var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const os_tag = builtin.os.tag;"},
{"lineNum":"    4","line":"const arch = builtin.cpu.arch;"},
{"lineNum":"    5","line":"const abi = builtin.abi;"},
{"lineNum":"    6","line":"const is_test = builtin.is_test;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"const is_gnu = abi.isGnu();"},
{"lineNum":"    9","line":"const is_mingw = os_tag == .windows and is_gnu;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"const linkage: std.builtin.GlobalLinkage = if (builtin.is_test) .Internal else .Weak;"},
{"lineNum":"   12","line":"const strong_linkage: std.builtin.GlobalLinkage = if (builtin.is_test) .Internal else .Strong;"},
{"lineNum":"   13","line":"pub const panic = @import(\"common.zig\").panic;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"comptime {"},
{"lineNum":"   16","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"   17","line":"        // Default stack-probe functions emitted by LLVM"},
{"lineNum":"   18","line":"        if (is_mingw) {"},
{"lineNum":"   19","line":"            @export(_chkstk, .{ .name = \"_alloca\", .linkage = strong_linkage });"},
{"lineNum":"   20","line":"            @export(___chkstk_ms, .{ .name = \"___chkstk_ms\", .linkage = strong_linkage });"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"            if (arch.isAARCH64()) {"},
{"lineNum":"   23","line":"                @export(__chkstk, .{ .name = \"__chkstk\", .linkage = strong_linkage });"},
{"lineNum":"   24","line":"            }"},
{"lineNum":"   25","line":"        } else if (!builtin.link_libc) {"},
{"lineNum":"   26","line":"            // This symbols are otherwise exported by MSVCRT.lib"},
{"lineNum":"   27","line":"            @export(_chkstk, .{ .name = \"_chkstk\", .linkage = strong_linkage });"},
{"lineNum":"   28","line":"            @export(__chkstk, .{ .name = \"__chkstk\", .linkage = strong_linkage });"},
{"lineNum":"   29","line":"        }"},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    switch (arch) {"},
{"lineNum":"   33","line":"        .x86,"},
{"lineNum":"   34","line":"        .x86_64,"},
{"lineNum":"   35","line":"        => {"},
{"lineNum":"   36","line":"            @export(zig_probe_stack, .{ .name = \"__zig_probe_stack\", .linkage = linkage });"},
{"lineNum":"   37","line":"        },"},
{"lineNum":"   38","line":"        else => {},"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"// Zig\'s own stack-probe routine (available only on x86 and x86_64)"},
{"lineNum":"   43","line":"pub fn zig_probe_stack() callconv(.Naked) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    @setRuntimeSafety(false);"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    // Versions of the Linux kernel before 5.1 treat any access below SP as"},
{"lineNum":"   47","line":"    // invalid so let\'s update it on the go, otherwise we\'ll get a segfault"},
{"lineNum":"   48","line":"    // instead of triggering the stack growth."},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    switch (arch) {"},
{"lineNum":"   51","line":"        .x86_64 => {"},
{"lineNum":"   52","line":"            // %rax = probe length, %rsp = stack pointer"},
{"lineNum":"   53","line":"            asm volatile (","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   54","line":"                \\\\        push   %%rcx"},
{"lineNum":"   55","line":"                \\\\        mov    %%rax, %%rcx"},
{"lineNum":"   56","line":"                \\\\        cmp    $0x1000,%%rcx"},
{"lineNum":"   57","line":"                \\\\        jb     2f"},
{"lineNum":"   58","line":"                \\\\ 1:"},
{"lineNum":"   59","line":"                \\\\        sub    $0x1000,%%rsp"},
{"lineNum":"   60","line":"                \\\\        orl    $0,16(%%rsp)"},
{"lineNum":"   61","line":"                \\\\        sub    $0x1000,%%rcx"},
{"lineNum":"   62","line":"                \\\\        cmp    $0x1000,%%rcx"},
{"lineNum":"   63","line":"                \\\\        ja     1b"},
{"lineNum":"   64","line":"                \\\\ 2:"},
{"lineNum":"   65","line":"                \\\\        sub    %%rcx, %%rsp"},
{"lineNum":"   66","line":"                \\\\        orl    $0,16(%%rsp)"},
{"lineNum":"   67","line":"                \\\\        add    %%rax,%%rsp"},
{"lineNum":"   68","line":"                \\\\        pop    %%rcx"},
{"lineNum":"   69","line":"                \\\\        ret"},
{"lineNum":"   70","line":"            );"},
{"lineNum":"   71","line":"        },"},
{"lineNum":"   72","line":"        .x86 => {"},
{"lineNum":"   73","line":"            // %eax = probe length, %esp = stack pointer"},
{"lineNum":"   74","line":"            asm volatile ("},
{"lineNum":"   75","line":"                \\\\        push   %%ecx"},
{"lineNum":"   76","line":"                \\\\        mov    %%eax, %%ecx"},
{"lineNum":"   77","line":"                \\\\        cmp    $0x1000,%%ecx"},
{"lineNum":"   78","line":"                \\\\        jb     2f"},
{"lineNum":"   79","line":"                \\\\ 1:"},
{"lineNum":"   80","line":"                \\\\        sub    $0x1000,%%esp"},
{"lineNum":"   81","line":"                \\\\        orl    $0,8(%%esp)"},
{"lineNum":"   82","line":"                \\\\        sub    $0x1000,%%ecx"},
{"lineNum":"   83","line":"                \\\\        cmp    $0x1000,%%ecx"},
{"lineNum":"   84","line":"                \\\\        ja     1b"},
{"lineNum":"   85","line":"                \\\\ 2:"},
{"lineNum":"   86","line":"                \\\\        sub    %%ecx, %%esp"},
{"lineNum":"   87","line":"                \\\\        orl    $0,8(%%esp)"},
{"lineNum":"   88","line":"                \\\\        add    %%eax,%%esp"},
{"lineNum":"   89","line":"                \\\\        pop    %%ecx"},
{"lineNum":"   90","line":"                \\\\        ret"},
{"lineNum":"   91","line":"            );"},
{"lineNum":"   92","line":"        },"},
{"lineNum":"   93","line":"        else => {},"},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    unreachable;"},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"fn win_probe_stack_only() void {"},
{"lineNum":"  100","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    switch (arch) {"},
{"lineNum":"  103","line":"        .x86_64 => {"},
{"lineNum":"  104","line":"            asm volatile ("},
{"lineNum":"  105","line":"                \\\\         push   %%rcx"},
{"lineNum":"  106","line":"                \\\\         push   %%rax"},
{"lineNum":"  107","line":"                \\\\         cmp    $0x1000,%%rax"},
{"lineNum":"  108","line":"                \\\\         lea    24(%%rsp),%%rcx"},
{"lineNum":"  109","line":"                \\\\         jb     1f"},
{"lineNum":"  110","line":"                \\\\ 2:"},
{"lineNum":"  111","line":"                \\\\         sub    $0x1000,%%rcx"},
{"lineNum":"  112","line":"                \\\\         test   %%rcx,(%%rcx)"},
{"lineNum":"  113","line":"                \\\\         sub    $0x1000,%%rax"},
{"lineNum":"  114","line":"                \\\\         cmp    $0x1000,%%rax"},
{"lineNum":"  115","line":"                \\\\         ja     2b"},
{"lineNum":"  116","line":"                \\\\ 1:"},
{"lineNum":"  117","line":"                \\\\         sub    %%rax,%%rcx"},
{"lineNum":"  118","line":"                \\\\         test   %%rcx,(%%rcx)"},
{"lineNum":"  119","line":"                \\\\         pop    %%rax"},
{"lineNum":"  120","line":"                \\\\         pop    %%rcx"},
{"lineNum":"  121","line":"                \\\\         ret"},
{"lineNum":"  122","line":"            );"},
{"lineNum":"  123","line":"        },"},
{"lineNum":"  124","line":"        .x86 => {"},
{"lineNum":"  125","line":"            asm volatile ("},
{"lineNum":"  126","line":"                \\\\         push   %%ecx"},
{"lineNum":"  127","line":"                \\\\         push   %%eax"},
{"lineNum":"  128","line":"                \\\\         cmp    $0x1000,%%eax"},
{"lineNum":"  129","line":"                \\\\         lea    12(%%esp),%%ecx"},
{"lineNum":"  130","line":"                \\\\         jb     1f"},
{"lineNum":"  131","line":"                \\\\ 2:"},
{"lineNum":"  132","line":"                \\\\         sub    $0x1000,%%ecx"},
{"lineNum":"  133","line":"                \\\\         test   %%ecx,(%%ecx)"},
{"lineNum":"  134","line":"                \\\\         sub    $0x1000,%%eax"},
{"lineNum":"  135","line":"                \\\\         cmp    $0x1000,%%eax"},
{"lineNum":"  136","line":"                \\\\         ja     2b"},
{"lineNum":"  137","line":"                \\\\ 1:"},
{"lineNum":"  138","line":"                \\\\         sub    %%eax,%%ecx"},
{"lineNum":"  139","line":"                \\\\         test   %%ecx,(%%ecx)"},
{"lineNum":"  140","line":"                \\\\         pop    %%eax"},
{"lineNum":"  141","line":"                \\\\         pop    %%ecx"},
{"lineNum":"  142","line":"                \\\\         ret"},
{"lineNum":"  143","line":"            );"},
{"lineNum":"  144","line":"        },"},
{"lineNum":"  145","line":"        else => {},"},
{"lineNum":"  146","line":"    }"},
{"lineNum":"  147","line":"    if (comptime arch.isAARCH64()) {"},
{"lineNum":"  148","line":"        // NOTE: page size hardcoded to 4096 for now"},
{"lineNum":"  149","line":"        asm volatile ("},
{"lineNum":"  150","line":"            \\\\        lsl    x16, x15, #4"},
{"lineNum":"  151","line":"            \\\\        mov    x17, sp"},
{"lineNum":"  152","line":"            \\\\1:"},
{"lineNum":"  153","line":"            \\\\"},
{"lineNum":"  154","line":"            \\\\        sub    x17, x17, 4096"},
{"lineNum":"  155","line":"            \\\\        subs   x16, x16, 4096"},
{"lineNum":"  156","line":"            \\\\        ldr    xzr, [x17]"},
{"lineNum":"  157","line":"            \\\\        b.gt   1b"},
{"lineNum":"  158","line":"            \\\\"},
{"lineNum":"  159","line":"            \\\\        ret"},
{"lineNum":"  160","line":"        );"},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    unreachable;"},
{"lineNum":"  164","line":"}"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"fn win_probe_stack_adjust_sp() void {"},
{"lineNum":"  167","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    switch (arch) {"},
{"lineNum":"  170","line":"        .x86_64 => {"},
{"lineNum":"  171","line":"            asm volatile ("},
{"lineNum":"  172","line":"                \\\\         push   %%rcx"},
{"lineNum":"  173","line":"                \\\\         cmp    $0x1000,%%rax"},
{"lineNum":"  174","line":"                \\\\         lea    16(%%rsp),%%rcx"},
{"lineNum":"  175","line":"                \\\\         jb     1f"},
{"lineNum":"  176","line":"                \\\\ 2:"},
{"lineNum":"  177","line":"                \\\\         sub    $0x1000,%%rcx"},
{"lineNum":"  178","line":"                \\\\         test   %%rcx,(%%rcx)"},
{"lineNum":"  179","line":"                \\\\         sub    $0x1000,%%rax"},
{"lineNum":"  180","line":"                \\\\         cmp    $0x1000,%%rax"},
{"lineNum":"  181","line":"                \\\\         ja     2b"},
{"lineNum":"  182","line":"                \\\\ 1:"},
{"lineNum":"  183","line":"                \\\\         sub    %%rax,%%rcx"},
{"lineNum":"  184","line":"                \\\\         test   %%rcx,(%%rcx)"},
{"lineNum":"  185","line":"                \\\\"},
{"lineNum":"  186","line":"                \\\\         lea    8(%%rsp),%%rax"},
{"lineNum":"  187","line":"                \\\\         mov    %%rcx,%%rsp"},
{"lineNum":"  188","line":"                \\\\         mov    -8(%%rax),%%rcx"},
{"lineNum":"  189","line":"                \\\\         push   (%%rax)"},
{"lineNum":"  190","line":"                \\\\         sub    %%rsp,%%rax"},
{"lineNum":"  191","line":"                \\\\         ret"},
{"lineNum":"  192","line":"            );"},
{"lineNum":"  193","line":"        },"},
{"lineNum":"  194","line":"        .x86 => {"},
{"lineNum":"  195","line":"            asm volatile ("},
{"lineNum":"  196","line":"                \\\\         push   %%ecx"},
{"lineNum":"  197","line":"                \\\\         cmp    $0x1000,%%eax"},
{"lineNum":"  198","line":"                \\\\         lea    8(%%esp),%%ecx"},
{"lineNum":"  199","line":"                \\\\         jb     1f"},
{"lineNum":"  200","line":"                \\\\ 2:"},
{"lineNum":"  201","line":"                \\\\         sub    $0x1000,%%ecx"},
{"lineNum":"  202","line":"                \\\\         test   %%ecx,(%%ecx)"},
{"lineNum":"  203","line":"                \\\\         sub    $0x1000,%%eax"},
{"lineNum":"  204","line":"                \\\\         cmp    $0x1000,%%eax"},
{"lineNum":"  205","line":"                \\\\         ja     2b"},
{"lineNum":"  206","line":"                \\\\ 1:"},
{"lineNum":"  207","line":"                \\\\         sub    %%eax,%%ecx"},
{"lineNum":"  208","line":"                \\\\         test   %%ecx,(%%ecx)"},
{"lineNum":"  209","line":"                \\\\"},
{"lineNum":"  210","line":"                \\\\         lea    4(%%esp),%%eax"},
{"lineNum":"  211","line":"                \\\\         mov    %%ecx,%%esp"},
{"lineNum":"  212","line":"                \\\\         mov    -4(%%eax),%%ecx"},
{"lineNum":"  213","line":"                \\\\         push   (%%eax)"},
{"lineNum":"  214","line":"                \\\\         sub    %%esp,%%eax"},
{"lineNum":"  215","line":"                \\\\         ret"},
{"lineNum":"  216","line":"            );"},
{"lineNum":"  217","line":"        },"},
{"lineNum":"  218","line":"        else => {},"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    unreachable;"},
{"lineNum":"  222","line":"}"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"// Windows has a multitude of stack-probing functions with similar names and"},
{"lineNum":"  225","line":"// slightly different behaviours: some behave as alloca() and update the stack"},
{"lineNum":"  226","line":"// pointer after probing the stack, other do not."},
{"lineNum":"  227","line":"//"},
{"lineNum":"  228","line":"// Function name        | Adjusts the SP? |"},
{"lineNum":"  229","line":"//                      | x86    | x86_64 |"},
{"lineNum":"  230","line":"// ----------------------------------------"},
{"lineNum":"  231","line":"// _chkstk (_alloca)    | yes    | yes    |"},
{"lineNum":"  232","line":"// __chkstk             | yes    | no     |"},
{"lineNum":"  233","line":"// __chkstk_ms          | no     | no     |"},
{"lineNum":"  234","line":"// ___chkstk (__alloca) | yes    | yes    |"},
{"lineNum":"  235","line":"// ___chkstk_ms         | no     | no     |"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"pub fn _chkstk() callconv(.Naked) void {"},
{"lineNum":"  238","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  239","line":"    @call(.always_inline, win_probe_stack_adjust_sp, .{});"},
{"lineNum":"  240","line":"}"},
{"lineNum":"  241","line":"pub fn __chkstk() callconv(.Naked) void {"},
{"lineNum":"  242","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  243","line":"    if (comptime arch.isAARCH64()) {"},
{"lineNum":"  244","line":"        @call(.always_inline, win_probe_stack_only, .{});"},
{"lineNum":"  245","line":"    } else switch (arch) {"},
{"lineNum":"  246","line":"        .x86 => @call(.always_inline, win_probe_stack_adjust_sp, .{}),"},
{"lineNum":"  247","line":"        .x86_64 => @call(.always_inline, win_probe_stack_only, .{}),"},
{"lineNum":"  248","line":"        else => unreachable,"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":"}"},
{"lineNum":"  251","line":"pub fn ___chkstk() callconv(.Naked) void {"},
{"lineNum":"  252","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  253","line":"    @call(.always_inline, win_probe_stack_adjust_sp, .{});"},
{"lineNum":"  254","line":"}"},
{"lineNum":"  255","line":"pub fn __chkstk_ms() callconv(.Naked) void {"},
{"lineNum":"  256","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  257","line":"    @call(.always_inline, win_probe_stack_only, .{});"},
{"lineNum":"  258","line":"}"},
{"lineNum":"  259","line":"pub fn ___chkstk_ms() callconv(.Naked) void {"},
{"lineNum":"  260","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  261","line":"    @call(.always_inline, win_probe_stack_only, .{});"},
{"lineNum":"  262","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:48", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
