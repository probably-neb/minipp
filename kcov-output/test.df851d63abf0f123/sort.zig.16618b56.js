var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const assert = std.debug.assert;"},
{"lineNum":"    3","line":"const testing = std.testing;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const math = std.math;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub const block = @import(\"sort/block.zig\").block;"},
{"lineNum":"    8","line":"pub const pdq = @import(\"sort/pdq.zig\").pdq;"},
{"lineNum":"    9","line":"pub const pdqContext = @import(\"sort/pdq.zig\").pdqContext;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case."},
{"lineNum":"   12","line":"/// O(1) memory (no allocator required)."},
{"lineNum":"   13","line":"/// Sorts in ascending order with respect to the given `lessThan` function."},
{"lineNum":"   14","line":"pub fn insertion("},
{"lineNum":"   15","line":"    comptime T: type,"},
{"lineNum":"   16","line":"    items: []T,"},
{"lineNum":"   17","line":"    context: anytype,"},
{"lineNum":"   18","line":"    comptime lessThanFn: fn (@TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"   19","line":") void {"},
{"lineNum":"   20","line":"    const Context = struct {"},
{"lineNum":"   21","line":"        items: []T,"},
{"lineNum":"   22","line":"        sub_ctx: @TypeOf(context),"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"        pub fn lessThan(ctx: @This(), a: usize, b: usize) bool {"},
{"lineNum":"   25","line":"            return lessThanFn(ctx.sub_ctx, ctx.items[a], ctx.items[b]);"},
{"lineNum":"   26","line":"        }"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"        pub fn swap(ctx: @This(), a: usize, b: usize) void {"},
{"lineNum":"   29","line":"            return mem.swap(T, &ctx.items[a], &ctx.items[b]);"},
{"lineNum":"   30","line":"        }"},
{"lineNum":"   31","line":"    };"},
{"lineNum":"   32","line":"    insertionContext(0, items.len, Context{ .items = items, .sub_ctx = context });"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/// Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case."},
{"lineNum":"   36","line":"/// O(1) memory (no allocator required)."},
{"lineNum":"   37","line":"/// `context` must have methods `swap` and `lessThan`,"},
{"lineNum":"   38","line":"/// which each take 2 `usize` parameters indicating the index of an item."},
{"lineNum":"   39","line":"/// Sorts in ascending order with respect to `lessThan`."},
{"lineNum":"   40","line":"pub fn insertionContext(a: usize, b: usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"    assert(a <= b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    var i = a + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    while (i < b) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   45","line":"        var j = i;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"        while (j > a and context.lessThan(j, j - 1)) : (j -= 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   47","line":"            context.swap(j, j - 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   48","line":"        }"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"/// Unstable in-place sort. O(n*log(n)) best case, worst case and average case."},
{"lineNum":"   53","line":"/// O(1) memory (no allocator required)."},
{"lineNum":"   54","line":"/// Sorts in ascending order with respect to the given `lessThan` function."},
{"lineNum":"   55","line":"pub fn heap("},
{"lineNum":"   56","line":"    comptime T: type,"},
{"lineNum":"   57","line":"    items: []T,"},
{"lineNum":"   58","line":"    context: anytype,"},
{"lineNum":"   59","line":"    comptime lessThanFn: fn (@TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"   60","line":") void {"},
{"lineNum":"   61","line":"    const Context = struct {"},
{"lineNum":"   62","line":"        items: []T,"},
{"lineNum":"   63","line":"        sub_ctx: @TypeOf(context),"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        pub fn lessThan(ctx: @This(), a: usize, b: usize) bool {"},
{"lineNum":"   66","line":"            return lessThanFn(ctx.sub_ctx, ctx.items[a], ctx.items[b]);"},
{"lineNum":"   67","line":"        }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        pub fn swap(ctx: @This(), a: usize, b: usize) void {"},
{"lineNum":"   70","line":"            return mem.swap(T, &ctx.items[a], &ctx.items[b]);"},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":"    };"},
{"lineNum":"   73","line":"    heapContext(0, items.len, Context{ .items = items, .sub_ctx = context });"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"/// Unstable in-place sort. O(n*log(n)) best case, worst case and average case."},
{"lineNum":"   77","line":"/// O(1) memory (no allocator required)."},
{"lineNum":"   78","line":"/// `context` must have methods `swap` and `lessThan`,"},
{"lineNum":"   79","line":"/// which each take 2 `usize` parameters indicating the index of an item."},
{"lineNum":"   80","line":"/// Sorts in ascending order with respect to `lessThan`."},
{"lineNum":"   81","line":"pub fn heapContext(a: usize, b: usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"    assert(a <= b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    // build the heap in linear time."},
{"lineNum":"   84","line":"    var i = a + (b - a) / 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"    while (i > a) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"        i -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"        siftDown(a, i, b, context);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    // pop maximal elements from the heap."},
{"lineNum":"   91","line":"    i = b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    while (i > a) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"        i -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"        context.swap(a, i);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"        siftDown(a, a, i, context);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"fn siftDown(a: usize, target: usize, b: usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    var cur = target;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    while (true) {"},
{"lineNum":"  102","line":"        // When we don\'t overflow from the multiply below, the following expression equals (2*cur) - (2*a) + a + 1"},
{"lineNum":"  103","line":"        // The `+ a + 1` is safe because:"},
{"lineNum":"  104","line":"        //  for `a > 0` then `2a >= a + 1`."},
{"lineNum":"  105","line":"        //  for `a = 0`, the expression equals `2*cur+1`. `2*cur` is an even number, therefore adding 1 is safe."},
{"lineNum":"  106","line":"        var child = (math.mul(usize, cur - a, 2) catch break) + a + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        // stop if we overshot the boundary"},
{"lineNum":"  109","line":"        if (!(child < b)) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"        // `next_child` is at most `b`, therefore no overflow is possible"},
{"lineNum":"  112","line":"        const next_child = child + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        // store the greater child in `child`"},
{"lineNum":"  115","line":"        if (next_child < b and context.lessThan(child, next_child)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"            child = next_child;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        // stop if the Heap invariant holds at `cur`."},
{"lineNum":"  120","line":"        if (context.lessThan(child, cur)) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        // swap `cur` with the greater child,"},
{"lineNum":"  123","line":"        // move one step down, and continue sifting."},
{"lineNum":"  124","line":"        context.swap(child, cur);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"        cur = child;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":"}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"/// Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, asc(u8))`."},
{"lineNum":"  130","line":"pub fn asc(comptime T: type) fn (void, T, T) bool {"},
{"lineNum":"  131","line":"    return struct {"},
{"lineNum":"  132","line":"        pub fn inner(_: void, a: T, b: T) bool {"},
{"lineNum":"  133","line":"            return a < b;"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":"    }.inner;"},
{"lineNum":"  136","line":"}"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"/// Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, desc(u8))`."},
{"lineNum":"  139","line":"pub fn desc(comptime T: type) fn (void, T, T) bool {"},
{"lineNum":"  140","line":"    return struct {"},
{"lineNum":"  141","line":"        pub fn inner(_: void, a: T, b: T) bool {"},
{"lineNum":"  142","line":"            return a > b;"},
{"lineNum":"  143","line":"        }"},
{"lineNum":"  144","line":"    }.inner;"},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"const asc_u8 = asc(u8);"},
{"lineNum":"  148","line":"const asc_i32 = asc(i32);"},
{"lineNum":"  149","line":"const desc_u8 = desc(u8);"},
{"lineNum":"  150","line":"const desc_i32 = desc(i32);"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"const sort_funcs = &[_]fn (comptime type, anytype, anytype, comptime anytype) void{"},
{"lineNum":"  153","line":"    block,"},
{"lineNum":"  154","line":"    pdq,"},
{"lineNum":"  155","line":"    insertion,"},
{"lineNum":"  156","line":"    heap,"},
{"lineNum":"  157","line":"};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"const context_sort_funcs = &[_]fn (usize, usize, anytype) void{"},
{"lineNum":"  160","line":"    // blockContext,"},
{"lineNum":"  161","line":"    pdqContext,"},
{"lineNum":"  162","line":"    insertionContext,"},
{"lineNum":"  163","line":"    heapContext,"},
{"lineNum":"  164","line":"};"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"const IdAndValue = struct {"},
{"lineNum":"  167","line":"    id: usize,"},
{"lineNum":"  168","line":"    value: i32,"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    fn lessThan(context: void, a: IdAndValue, b: IdAndValue) bool {"},
{"lineNum":"  171","line":"        _ = context;"},
{"lineNum":"  172","line":"        return a.value < b.value;"},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":"};"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"test \"stable sort\" {"},
{"lineNum":"  177","line":"    const expected = [_]IdAndValue{"},
{"lineNum":"  178","line":"        IdAndValue{ .id = 0, .value = 0 },"},
{"lineNum":"  179","line":"        IdAndValue{ .id = 1, .value = 0 },"},
{"lineNum":"  180","line":"        IdAndValue{ .id = 2, .value = 0 },"},
{"lineNum":"  181","line":"        IdAndValue{ .id = 0, .value = 1 },"},
{"lineNum":"  182","line":"        IdAndValue{ .id = 1, .value = 1 },"},
{"lineNum":"  183","line":"        IdAndValue{ .id = 2, .value = 1 },"},
{"lineNum":"  184","line":"        IdAndValue{ .id = 0, .value = 2 },"},
{"lineNum":"  185","line":"        IdAndValue{ .id = 1, .value = 2 },"},
{"lineNum":"  186","line":"        IdAndValue{ .id = 2, .value = 2 },"},
{"lineNum":"  187","line":"    };"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    var cases = [_][9]IdAndValue{"},
{"lineNum":"  190","line":"        [_]IdAndValue{"},
{"lineNum":"  191","line":"            IdAndValue{ .id = 0, .value = 0 },"},
{"lineNum":"  192","line":"            IdAndValue{ .id = 0, .value = 1 },"},
{"lineNum":"  193","line":"            IdAndValue{ .id = 0, .value = 2 },"},
{"lineNum":"  194","line":"            IdAndValue{ .id = 1, .value = 0 },"},
{"lineNum":"  195","line":"            IdAndValue{ .id = 1, .value = 1 },"},
{"lineNum":"  196","line":"            IdAndValue{ .id = 1, .value = 2 },"},
{"lineNum":"  197","line":"            IdAndValue{ .id = 2, .value = 0 },"},
{"lineNum":"  198","line":"            IdAndValue{ .id = 2, .value = 1 },"},
{"lineNum":"  199","line":"            IdAndValue{ .id = 2, .value = 2 },"},
{"lineNum":"  200","line":"        },"},
{"lineNum":"  201","line":"        [_]IdAndValue{"},
{"lineNum":"  202","line":"            IdAndValue{ .id = 0, .value = 2 },"},
{"lineNum":"  203","line":"            IdAndValue{ .id = 0, .value = 1 },"},
{"lineNum":"  204","line":"            IdAndValue{ .id = 0, .value = 0 },"},
{"lineNum":"  205","line":"            IdAndValue{ .id = 1, .value = 2 },"},
{"lineNum":"  206","line":"            IdAndValue{ .id = 1, .value = 1 },"},
{"lineNum":"  207","line":"            IdAndValue{ .id = 1, .value = 0 },"},
{"lineNum":"  208","line":"            IdAndValue{ .id = 2, .value = 2 },"},
{"lineNum":"  209","line":"            IdAndValue{ .id = 2, .value = 1 },"},
{"lineNum":"  210","line":"            IdAndValue{ .id = 2, .value = 0 },"},
{"lineNum":"  211","line":"        },"},
{"lineNum":"  212","line":"    };"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    for (&cases) |*case| {"},
{"lineNum":"  215","line":"        block(IdAndValue, (case.*)[0..], {}, IdAndValue.lessThan);"},
{"lineNum":"  216","line":"        for (case.*, 0..) |item, i| {"},
{"lineNum":"  217","line":"            try testing.expect(item.id == expected[i].id);"},
{"lineNum":"  218","line":"            try testing.expect(item.value == expected[i].value);"},
{"lineNum":"  219","line":"        }"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"test \"sort\" {"},
{"lineNum":"  224","line":"    const u8cases = [_][]const []const u8{"},
{"lineNum":"  225","line":"        &[_][]const u8{"},
{"lineNum":"  226","line":"            \"\","},
{"lineNum":"  227","line":"            \"\","},
{"lineNum":"  228","line":"        },"},
{"lineNum":"  229","line":"        &[_][]const u8{"},
{"lineNum":"  230","line":"            \"a\","},
{"lineNum":"  231","line":"            \"a\","},
{"lineNum":"  232","line":"        },"},
{"lineNum":"  233","line":"        &[_][]const u8{"},
{"lineNum":"  234","line":"            \"az\","},
{"lineNum":"  235","line":"            \"az\","},
{"lineNum":"  236","line":"        },"},
{"lineNum":"  237","line":"        &[_][]const u8{"},
{"lineNum":"  238","line":"            \"za\","},
{"lineNum":"  239","line":"            \"az\","},
{"lineNum":"  240","line":"        },"},
{"lineNum":"  241","line":"        &[_][]const u8{"},
{"lineNum":"  242","line":"            \"asdf\","},
{"lineNum":"  243","line":"            \"adfs\","},
{"lineNum":"  244","line":"        },"},
{"lineNum":"  245","line":"        &[_][]const u8{"},
{"lineNum":"  246","line":"            \"one\","},
{"lineNum":"  247","line":"            \"eno\","},
{"lineNum":"  248","line":"        },"},
{"lineNum":"  249","line":"    };"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    const i32cases = [_][]const []const i32{"},
{"lineNum":"  252","line":"        &[_][]const i32{"},
{"lineNum":"  253","line":"            &[_]i32{},"},
{"lineNum":"  254","line":"            &[_]i32{},"},
{"lineNum":"  255","line":"        },"},
{"lineNum":"  256","line":"        &[_][]const i32{"},
{"lineNum":"  257","line":"            &[_]i32{1},"},
{"lineNum":"  258","line":"            &[_]i32{1},"},
{"lineNum":"  259","line":"        },"},
{"lineNum":"  260","line":"        &[_][]const i32{"},
{"lineNum":"  261","line":"            &[_]i32{ 0, 1 },"},
{"lineNum":"  262","line":"            &[_]i32{ 0, 1 },"},
{"lineNum":"  263","line":"        },"},
{"lineNum":"  264","line":"        &[_][]const i32{"},
{"lineNum":"  265","line":"            &[_]i32{ 1, 0 },"},
{"lineNum":"  266","line":"            &[_]i32{ 0, 1 },"},
{"lineNum":"  267","line":"        },"},
{"lineNum":"  268","line":"        &[_][]const i32{"},
{"lineNum":"  269","line":"            &[_]i32{ 1, -1, 0 },"},
{"lineNum":"  270","line":"            &[_]i32{ -1, 0, 1 },"},
{"lineNum":"  271","line":"        },"},
{"lineNum":"  272","line":"        &[_][]const i32{"},
{"lineNum":"  273","line":"            &[_]i32{ 2, 1, 3 },"},
{"lineNum":"  274","line":"            &[_]i32{ 1, 2, 3 },"},
{"lineNum":"  275","line":"        },"},
{"lineNum":"  276","line":"        &[_][]const i32{"},
{"lineNum":"  277","line":"            &[_]i32{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 55, 32, 39, 58, 21, 88, 43, 22, 59 },"},
{"lineNum":"  278","line":"            &[_]i32{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 21, 22, 32, 39, 43, 55, 58, 59, 88 },"},
{"lineNum":"  279","line":"        },"},
{"lineNum":"  280","line":"    };"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    inline for (sort_funcs) |sortFn| {"},
{"lineNum":"  283","line":"        for (u8cases) |case| {"},
{"lineNum":"  284","line":"            var buf: [20]u8 = undefined;"},
{"lineNum":"  285","line":"            const slice = buf[0..case[0].len];"},
{"lineNum":"  286","line":"            @memcpy(slice, case[0]);"},
{"lineNum":"  287","line":"            sortFn(u8, slice, {}, asc_u8);"},
{"lineNum":"  288","line":"            try testing.expect(mem.eql(u8, slice, case[1]));"},
{"lineNum":"  289","line":"        }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"        for (i32cases) |case| {"},
{"lineNum":"  292","line":"            var buf: [20]i32 = undefined;"},
{"lineNum":"  293","line":"            const slice = buf[0..case[0].len];"},
{"lineNum":"  294","line":"            @memcpy(slice, case[0]);"},
{"lineNum":"  295","line":"            sortFn(i32, slice, {}, asc_i32);"},
{"lineNum":"  296","line":"            try testing.expect(mem.eql(i32, slice, case[1]));"},
{"lineNum":"  297","line":"        }"},
{"lineNum":"  298","line":"    }"},
{"lineNum":"  299","line":"}"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"test \"sort descending\" {"},
{"lineNum":"  302","line":"    const rev_cases = [_][]const []const i32{"},
{"lineNum":"  303","line":"        &[_][]const i32{"},
{"lineNum":"  304","line":"            &[_]i32{},"},
{"lineNum":"  305","line":"            &[_]i32{},"},
{"lineNum":"  306","line":"        },"},
{"lineNum":"  307","line":"        &[_][]const i32{"},
{"lineNum":"  308","line":"            &[_]i32{1},"},
{"lineNum":"  309","line":"            &[_]i32{1},"},
{"lineNum":"  310","line":"        },"},
{"lineNum":"  311","line":"        &[_][]const i32{"},
{"lineNum":"  312","line":"            &[_]i32{ 0, 1 },"},
{"lineNum":"  313","line":"            &[_]i32{ 1, 0 },"},
{"lineNum":"  314","line":"        },"},
{"lineNum":"  315","line":"        &[_][]const i32{"},
{"lineNum":"  316","line":"            &[_]i32{ 1, 0 },"},
{"lineNum":"  317","line":"            &[_]i32{ 1, 0 },"},
{"lineNum":"  318","line":"        },"},
{"lineNum":"  319","line":"        &[_][]const i32{"},
{"lineNum":"  320","line":"            &[_]i32{ 1, -1, 0 },"},
{"lineNum":"  321","line":"            &[_]i32{ 1, 0, -1 },"},
{"lineNum":"  322","line":"        },"},
{"lineNum":"  323","line":"        &[_][]const i32{"},
{"lineNum":"  324","line":"            &[_]i32{ 2, 1, 3 },"},
{"lineNum":"  325","line":"            &[_]i32{ 3, 2, 1 },"},
{"lineNum":"  326","line":"        },"},
{"lineNum":"  327","line":"    };"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    inline for (sort_funcs) |sortFn| {"},
{"lineNum":"  330","line":"        for (rev_cases) |case| {"},
{"lineNum":"  331","line":"            var buf: [8]i32 = undefined;"},
{"lineNum":"  332","line":"            const slice = buf[0..case[0].len];"},
{"lineNum":"  333","line":"            @memcpy(slice, case[0]);"},
{"lineNum":"  334","line":"            sortFn(i32, slice, {}, desc_i32);"},
{"lineNum":"  335","line":"            try testing.expect(mem.eql(i32, slice, case[1]));"},
{"lineNum":"  336","line":"        }"},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":"}"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"test \"sort with context in the middle of a slice\" {"},
{"lineNum":"  341","line":"    const Context = struct {"},
{"lineNum":"  342","line":"        items: []i32,"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"        pub fn lessThan(ctx: @This(), a: usize, b: usize) bool {"},
{"lineNum":"  345","line":"            return ctx.items[a] < ctx.items[b];"},
{"lineNum":"  346","line":"        }"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"        pub fn swap(ctx: @This(), a: usize, b: usize) void {"},
{"lineNum":"  349","line":"            return mem.swap(i32, &ctx.items[a], &ctx.items[b]);"},
{"lineNum":"  350","line":"        }"},
{"lineNum":"  351","line":"    };"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    const i32cases = [_][]const []const i32{"},
{"lineNum":"  354","line":"        &[_][]const i32{"},
{"lineNum":"  355","line":"            &[_]i32{ 0, 1, 8, 3, 6, 5, 4, 2, 9, 7, 10, 55, 32, 39, 58, 21, 88, 43, 22, 59 },"},
{"lineNum":"  356","line":"            &[_]i32{ 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 22, 32, 39, 43, 55, 58, 59, 88 },"},
{"lineNum":"  357","line":"        },"},
{"lineNum":"  358","line":"    };"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    const ranges = [_]struct { start: usize, end: usize }{"},
{"lineNum":"  361","line":"        .{ .start = 10, .end = 20 },"},
{"lineNum":"  362","line":"        .{ .start = 1, .end = 11 },"},
{"lineNum":"  363","line":"        .{ .start = 3, .end = 7 },"},
{"lineNum":"  364","line":"    };"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    inline for (context_sort_funcs) |sortFn| {"},
{"lineNum":"  367","line":"        for (i32cases) |case| {"},
{"lineNum":"  368","line":"            for (ranges) |range| {"},
{"lineNum":"  369","line":"                var buf: [20]i32 = undefined;"},
{"lineNum":"  370","line":"                const slice = buf[0..case[0].len];"},
{"lineNum":"  371","line":"                @memcpy(slice, case[0]);"},
{"lineNum":"  372","line":"                sortFn(range.start, range.end, Context{ .items = slice });"},
{"lineNum":"  373","line":"                try testing.expectEqualSlices(i32, case[1][range.start..range.end], slice[range.start..range.end]);"},
{"lineNum":"  374","line":"            }"},
{"lineNum":"  375","line":"        }"},
{"lineNum":"  376","line":"    }"},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"test \"sort fuzz testing\" {"},
{"lineNum":"  380","line":"    var prng = std.rand.DefaultPrng.init(0x12345678);"},
{"lineNum":"  381","line":"    const random = prng.random();"},
{"lineNum":"  382","line":"    const test_case_count = 10;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"    inline for (sort_funcs) |sortFn| {"},
{"lineNum":"  385","line":"        var i: usize = 0;"},
{"lineNum":"  386","line":"        while (i < test_case_count) : (i += 1) {"},
{"lineNum":"  387","line":"            const array_size = random.intRangeLessThan(usize, 0, 1000);"},
{"lineNum":"  388","line":"            var array = try testing.allocator.alloc(i32, array_size);"},
{"lineNum":"  389","line":"            defer testing.allocator.free(array);"},
{"lineNum":"  390","line":"            // populate with random data"},
{"lineNum":"  391","line":"            for (array) |*item| {"},
{"lineNum":"  392","line":"                item.* = random.intRangeLessThan(i32, 0, 100);"},
{"lineNum":"  393","line":"            }"},
{"lineNum":"  394","line":"            sortFn(i32, array, {}, asc_i32);"},
{"lineNum":"  395","line":"            try testing.expect(isSorted(i32, array, {}, asc_i32));"},
{"lineNum":"  396","line":"        }"},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":"}"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"pub fn binarySearch("},
{"lineNum":"  401","line":"    comptime T: type,"},
{"lineNum":"  402","line":"    key: anytype,"},
{"lineNum":"  403","line":"    items: []const T,"},
{"lineNum":"  404","line":"    context: anytype,"},
{"lineNum":"  405","line":"    comptime compareFn: fn (context: @TypeOf(context), key: @TypeOf(key), mid_item: T) math.Order,"},
{"lineNum":"  406","line":") ?usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"    var left: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  408","line":"    var right: usize = items.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    while (left < right) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"        // Avoid overflowing in the midpoint calculation"},
{"lineNum":"  412","line":"        const mid = left + (right - left) / 2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  413","line":"        // Compare the key with the midpoint element"},
{"lineNum":"  414","line":"        switch (compareFn(context, key, items[mid])) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  415","line":"            .eq => return mid,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"            .gt => left = mid + 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"            .lt => right = mid,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":"        }"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"}"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"test \"binarySearch\" {"},
{"lineNum":"  425","line":"    const S = struct {"},
{"lineNum":"  426","line":"        fn order_u32(context: void, lhs: u32, rhs: u32) math.Order {"},
{"lineNum":"  427","line":"            _ = context;"},
{"lineNum":"  428","line":"            return math.order(lhs, rhs);"},
{"lineNum":"  429","line":"        }"},
{"lineNum":"  430","line":"        fn order_i32(context: void, lhs: i32, rhs: i32) math.Order {"},
{"lineNum":"  431","line":"            _ = context;"},
{"lineNum":"  432","line":"            return math.order(lhs, rhs);"},
{"lineNum":"  433","line":"        }"},
{"lineNum":"  434","line":"    };"},
{"lineNum":"  435","line":"    try testing.expectEqual("},
{"lineNum":"  436","line":"        @as(?usize, null),"},
{"lineNum":"  437","line":"        binarySearch(u32, @as(u32, 1), &[_]u32{}, {}, S.order_u32),"},
{"lineNum":"  438","line":"    );"},
{"lineNum":"  439","line":"    try testing.expectEqual("},
{"lineNum":"  440","line":"        @as(?usize, 0),"},
{"lineNum":"  441","line":"        binarySearch(u32, @as(u32, 1), &[_]u32{1}, {}, S.order_u32),"},
{"lineNum":"  442","line":"    );"},
{"lineNum":"  443","line":"    try testing.expectEqual("},
{"lineNum":"  444","line":"        @as(?usize, null),"},
{"lineNum":"  445","line":"        binarySearch(u32, @as(u32, 1), &[_]u32{0}, {}, S.order_u32),"},
{"lineNum":"  446","line":"    );"},
{"lineNum":"  447","line":"    try testing.expectEqual("},
{"lineNum":"  448","line":"        @as(?usize, null),"},
{"lineNum":"  449","line":"        binarySearch(u32, @as(u32, 0), &[_]u32{1}, {}, S.order_u32),"},
{"lineNum":"  450","line":"    );"},
{"lineNum":"  451","line":"    try testing.expectEqual("},
{"lineNum":"  452","line":"        @as(?usize, 4),"},
{"lineNum":"  453","line":"        binarySearch(u32, @as(u32, 5), &[_]u32{ 1, 2, 3, 4, 5 }, {}, S.order_u32),"},
{"lineNum":"  454","line":"    );"},
{"lineNum":"  455","line":"    try testing.expectEqual("},
{"lineNum":"  456","line":"        @as(?usize, 0),"},
{"lineNum":"  457","line":"        binarySearch(u32, @as(u32, 2), &[_]u32{ 2, 4, 8, 16, 32, 64 }, {}, S.order_u32),"},
{"lineNum":"  458","line":"    );"},
{"lineNum":"  459","line":"    try testing.expectEqual("},
{"lineNum":"  460","line":"        @as(?usize, 1),"},
{"lineNum":"  461","line":"        binarySearch(i32, @as(i32, -4), &[_]i32{ -7, -4, 0, 9, 10 }, {}, S.order_i32),"},
{"lineNum":"  462","line":"    );"},
{"lineNum":"  463","line":"    try testing.expectEqual("},
{"lineNum":"  464","line":"        @as(?usize, 3),"},
{"lineNum":"  465","line":"        binarySearch(i32, @as(i32, 98), &[_]i32{ -100, -25, 2, 98, 99, 100 }, {}, S.order_i32),"},
{"lineNum":"  466","line":"    );"},
{"lineNum":"  467","line":"    const R = struct {"},
{"lineNum":"  468","line":"        b: i32,"},
{"lineNum":"  469","line":"        e: i32,"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"        fn r(b: i32, e: i32) @This() {"},
{"lineNum":"  472","line":"            return @This(){ .b = b, .e = e };"},
{"lineNum":"  473","line":"        }"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"        fn order(context: void, key: i32, mid_item: @This()) math.Order {"},
{"lineNum":"  476","line":"            _ = context;"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"            if (key < mid_item.b) {"},
{"lineNum":"  479","line":"                return .lt;"},
{"lineNum":"  480","line":"            }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"            if (key > mid_item.e) {"},
{"lineNum":"  483","line":"                return .gt;"},
{"lineNum":"  484","line":"            }"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"            return .eq;"},
{"lineNum":"  487","line":"        }"},
{"lineNum":"  488","line":"    };"},
{"lineNum":"  489","line":"    try testing.expectEqual("},
{"lineNum":"  490","line":"        @as(?usize, null),"},
{"lineNum":"  491","line":"        binarySearch(R, @as(i32, -45), &[_]R{ R.r(-100, -50), R.r(-40, -20), R.r(-10, 20), R.r(30, 40) }, {}, R.order),"},
{"lineNum":"  492","line":"    );"},
{"lineNum":"  493","line":"    try testing.expectEqual("},
{"lineNum":"  494","line":"        @as(?usize, 2),"},
{"lineNum":"  495","line":"        binarySearch(R, @as(i32, 10), &[_]R{ R.r(-100, -50), R.r(-40, -20), R.r(-10, 20), R.r(30, 40) }, {}, R.order),"},
{"lineNum":"  496","line":"    );"},
{"lineNum":"  497","line":"    try testing.expectEqual("},
{"lineNum":"  498","line":"        @as(?usize, 1),"},
{"lineNum":"  499","line":"        binarySearch(R, @as(i32, -20), &[_]R{ R.r(-100, -50), R.r(-40, -20), R.r(-10, 20), R.r(30, 40) }, {}, R.order),"},
{"lineNum":"  500","line":"    );"},
{"lineNum":"  501","line":"}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"pub fn argMin("},
{"lineNum":"  504","line":"    comptime T: type,"},
{"lineNum":"  505","line":"    items: []const T,"},
{"lineNum":"  506","line":"    context: anytype,"},
{"lineNum":"  507","line":"    comptime lessThan: fn (@TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"  508","line":") ?usize {"},
{"lineNum":"  509","line":"    if (items.len == 0) {"},
{"lineNum":"  510","line":"        return null;"},
{"lineNum":"  511","line":"    }"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"    var smallest = items[0];"},
{"lineNum":"  514","line":"    var smallest_index: usize = 0;"},
{"lineNum":"  515","line":"    for (items[1..], 0..) |item, i| {"},
{"lineNum":"  516","line":"        if (lessThan(context, item, smallest)) {"},
{"lineNum":"  517","line":"            smallest = item;"},
{"lineNum":"  518","line":"            smallest_index = i + 1;"},
{"lineNum":"  519","line":"        }"},
{"lineNum":"  520","line":"    }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"    return smallest_index;"},
{"lineNum":"  523","line":"}"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"test \"argMin\" {"},
{"lineNum":"  526","line":"    try testing.expectEqual(@as(?usize, null), argMin(i32, &[_]i32{}, {}, asc_i32));"},
{"lineNum":"  527","line":"    try testing.expectEqual(@as(?usize, 0), argMin(i32, &[_]i32{1}, {}, asc_i32));"},
{"lineNum":"  528","line":"    try testing.expectEqual(@as(?usize, 0), argMin(i32, &[_]i32{ 1, 2, 3, 4, 5 }, {}, asc_i32));"},
{"lineNum":"  529","line":"    try testing.expectEqual(@as(?usize, 3), argMin(i32, &[_]i32{ 9, 3, 8, 2, 5 }, {}, asc_i32));"},
{"lineNum":"  530","line":"    try testing.expectEqual(@as(?usize, 0), argMin(i32, &[_]i32{ 1, 1, 1, 1, 1 }, {}, asc_i32));"},
{"lineNum":"  531","line":"    try testing.expectEqual(@as(?usize, 0), argMin(i32, &[_]i32{ -10, 1, 10 }, {}, asc_i32));"},
{"lineNum":"  532","line":"    try testing.expectEqual(@as(?usize, 3), argMin(i32, &[_]i32{ 6, 3, 5, 7, 6 }, {}, desc_i32));"},
{"lineNum":"  533","line":"}"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"pub fn min("},
{"lineNum":"  536","line":"    comptime T: type,"},
{"lineNum":"  537","line":"    items: []const T,"},
{"lineNum":"  538","line":"    context: anytype,"},
{"lineNum":"  539","line":"    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"  540","line":") ?T {"},
{"lineNum":"  541","line":"    const i = argMin(T, items, context, lessThan) orelse return null;"},
{"lineNum":"  542","line":"    return items[i];"},
{"lineNum":"  543","line":"}"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"test \"min\" {"},
{"lineNum":"  546","line":"    try testing.expectEqual(@as(?i32, null), min(i32, &[_]i32{}, {}, asc_i32));"},
{"lineNum":"  547","line":"    try testing.expectEqual(@as(?i32, 1), min(i32, &[_]i32{1}, {}, asc_i32));"},
{"lineNum":"  548","line":"    try testing.expectEqual(@as(?i32, 1), min(i32, &[_]i32{ 1, 2, 3, 4, 5 }, {}, asc_i32));"},
{"lineNum":"  549","line":"    try testing.expectEqual(@as(?i32, 2), min(i32, &[_]i32{ 9, 3, 8, 2, 5 }, {}, asc_i32));"},
{"lineNum":"  550","line":"    try testing.expectEqual(@as(?i32, 1), min(i32, &[_]i32{ 1, 1, 1, 1, 1 }, {}, asc_i32));"},
{"lineNum":"  551","line":"    try testing.expectEqual(@as(?i32, -10), min(i32, &[_]i32{ -10, 1, 10 }, {}, asc_i32));"},
{"lineNum":"  552","line":"    try testing.expectEqual(@as(?i32, 7), min(i32, &[_]i32{ 6, 3, 5, 7, 6 }, {}, desc_i32));"},
{"lineNum":"  553","line":"}"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"pub fn argMax("},
{"lineNum":"  556","line":"    comptime T: type,"},
{"lineNum":"  557","line":"    items: []const T,"},
{"lineNum":"  558","line":"    context: anytype,"},
{"lineNum":"  559","line":"    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"  560","line":") ?usize {"},
{"lineNum":"  561","line":"    if (items.len == 0) {"},
{"lineNum":"  562","line":"        return null;"},
{"lineNum":"  563","line":"    }"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    var biggest = items[0];"},
{"lineNum":"  566","line":"    var biggest_index: usize = 0;"},
{"lineNum":"  567","line":"    for (items[1..], 0..) |item, i| {"},
{"lineNum":"  568","line":"        if (lessThan(context, biggest, item)) {"},
{"lineNum":"  569","line":"            biggest = item;"},
{"lineNum":"  570","line":"            biggest_index = i + 1;"},
{"lineNum":"  571","line":"        }"},
{"lineNum":"  572","line":"    }"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"    return biggest_index;"},
{"lineNum":"  575","line":"}"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"test \"argMax\" {"},
{"lineNum":"  578","line":"    try testing.expectEqual(@as(?usize, null), argMax(i32, &[_]i32{}, {}, asc_i32));"},
{"lineNum":"  579","line":"    try testing.expectEqual(@as(?usize, 0), argMax(i32, &[_]i32{1}, {}, asc_i32));"},
{"lineNum":"  580","line":"    try testing.expectEqual(@as(?usize, 4), argMax(i32, &[_]i32{ 1, 2, 3, 4, 5 }, {}, asc_i32));"},
{"lineNum":"  581","line":"    try testing.expectEqual(@as(?usize, 0), argMax(i32, &[_]i32{ 9, 3, 8, 2, 5 }, {}, asc_i32));"},
{"lineNum":"  582","line":"    try testing.expectEqual(@as(?usize, 0), argMax(i32, &[_]i32{ 1, 1, 1, 1, 1 }, {}, asc_i32));"},
{"lineNum":"  583","line":"    try testing.expectEqual(@as(?usize, 2), argMax(i32, &[_]i32{ -10, 1, 10 }, {}, asc_i32));"},
{"lineNum":"  584","line":"    try testing.expectEqual(@as(?usize, 1), argMax(i32, &[_]i32{ 6, 3, 5, 7, 6 }, {}, desc_i32));"},
{"lineNum":"  585","line":"}"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"pub fn max("},
{"lineNum":"  588","line":"    comptime T: type,"},
{"lineNum":"  589","line":"    items: []const T,"},
{"lineNum":"  590","line":"    context: anytype,"},
{"lineNum":"  591","line":"    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"  592","line":") ?T {"},
{"lineNum":"  593","line":"    const i = argMax(T, items, context, lessThan) orelse return null;"},
{"lineNum":"  594","line":"    return items[i];"},
{"lineNum":"  595","line":"}"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"test \"max\" {"},
{"lineNum":"  598","line":"    try testing.expectEqual(@as(?i32, null), max(i32, &[_]i32{}, {}, asc_i32));"},
{"lineNum":"  599","line":"    try testing.expectEqual(@as(?i32, 1), max(i32, &[_]i32{1}, {}, asc_i32));"},
{"lineNum":"  600","line":"    try testing.expectEqual(@as(?i32, 5), max(i32, &[_]i32{ 1, 2, 3, 4, 5 }, {}, asc_i32));"},
{"lineNum":"  601","line":"    try testing.expectEqual(@as(?i32, 9), max(i32, &[_]i32{ 9, 3, 8, 2, 5 }, {}, asc_i32));"},
{"lineNum":"  602","line":"    try testing.expectEqual(@as(?i32, 1), max(i32, &[_]i32{ 1, 1, 1, 1, 1 }, {}, asc_i32));"},
{"lineNum":"  603","line":"    try testing.expectEqual(@as(?i32, 10), max(i32, &[_]i32{ -10, 1, 10 }, {}, asc_i32));"},
{"lineNum":"  604","line":"    try testing.expectEqual(@as(?i32, 3), max(i32, &[_]i32{ 6, 3, 5, 7, 6 }, {}, desc_i32));"},
{"lineNum":"  605","line":"}"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"pub fn isSorted("},
{"lineNum":"  608","line":"    comptime T: type,"},
{"lineNum":"  609","line":"    items: []const T,"},
{"lineNum":"  610","line":"    context: anytype,"},
{"lineNum":"  611","line":"    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"  612","line":") bool {"},
{"lineNum":"  613","line":"    var i: usize = 1;"},
{"lineNum":"  614","line":"    while (i < items.len) : (i += 1) {"},
{"lineNum":"  615","line":"        if (lessThan(context, items[i], items[i - 1])) {"},
{"lineNum":"  616","line":"            return false;"},
{"lineNum":"  617","line":"        }"},
{"lineNum":"  618","line":"    }"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"    return true;"},
{"lineNum":"  621","line":"}"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"test \"isSorted\" {"},
{"lineNum":"  624","line":"    try testing.expect(isSorted(i32, &[_]i32{}, {}, asc_i32));"},
{"lineNum":"  625","line":"    try testing.expect(isSorted(i32, &[_]i32{10}, {}, asc_i32));"},
{"lineNum":"  626","line":"    try testing.expect(isSorted(i32, &[_]i32{ 1, 2, 3, 4, 5 }, {}, asc_i32));"},
{"lineNum":"  627","line":"    try testing.expect(isSorted(i32, &[_]i32{ -10, 1, 1, 1, 10 }, {}, asc_i32));"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"    try testing.expect(isSorted(i32, &[_]i32{}, {}, desc_i32));"},
{"lineNum":"  630","line":"    try testing.expect(isSorted(i32, &[_]i32{-20}, {}, desc_i32));"},
{"lineNum":"  631","line":"    try testing.expect(isSorted(i32, &[_]i32{ 3, 2, 1, 0, -1 }, {}, desc_i32));"},
{"lineNum":"  632","line":"    try testing.expect(isSorted(i32, &[_]i32{ 10, -10 }, {}, desc_i32));"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"    try testing.expect(isSorted(i32, &[_]i32{ 1, 1, 1, 1, 1 }, {}, asc_i32));"},
{"lineNum":"  635","line":"    try testing.expect(isSorted(i32, &[_]i32{ 1, 1, 1, 1, 1 }, {}, desc_i32));"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    try testing.expectEqual(false, isSorted(i32, &[_]i32{ 5, 4, 3, 2, 1 }, {}, asc_i32));"},
{"lineNum":"  638","line":"    try testing.expectEqual(false, isSorted(i32, &[_]i32{ 1, 2, 3, 4, 5 }, {}, desc_i32));"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    try testing.expect(isSorted(u8, \"abcd\", {}, asc_u8));"},
{"lineNum":"  641","line":"    try testing.expect(isSorted(u8, \"zyxw\", {}, desc_u8));"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    try testing.expectEqual(false, isSorted(u8, \"abcd\", {}, desc_u8));"},
{"lineNum":"  644","line":"    try testing.expectEqual(false, isSorted(u8, \"zyxw\", {}, asc_u8));"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    try testing.expect(isSorted(u8, \"ffff\", {}, asc_u8));"},
{"lineNum":"  647","line":"    try testing.expect(isSorted(u8, \"ffff\", {}, desc_u8));"},
{"lineNum":"  648","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:48", "instrumented" : 38, "covered" : 0,};
var merged_data = [];
