var data = {lines:[
{"lineNum":"    1","line":"//! This struct represents a kernel thread, and acts as a namespace for concurrency"},
{"lineNum":"    2","line":"//! primitives that operate on kernel threads. For concurrency primitives that support"},
{"lineNum":"    3","line":"//! both evented I/O and async I/O, see the respective names in the top level std namespace."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    6","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    7","line":"const math = std.math;"},
{"lineNum":"    8","line":"const os = std.os;"},
{"lineNum":"    9","line":"const assert = std.debug.assert;"},
{"lineNum":"   10","line":"const target = builtin.target;"},
{"lineNum":"   11","line":"const Atomic = std.atomic.Atomic;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"pub const Futex = @import(\"Thread/Futex.zig\");"},
{"lineNum":"   14","line":"pub const ResetEvent = @import(\"Thread/ResetEvent.zig\");"},
{"lineNum":"   15","line":"pub const Mutex = @import(\"Thread/Mutex.zig\");"},
{"lineNum":"   16","line":"pub const Semaphore = @import(\"Thread/Semaphore.zig\");"},
{"lineNum":"   17","line":"pub const Condition = @import(\"Thread/Condition.zig\");"},
{"lineNum":"   18","line":"pub const RwLock = @import(\"Thread/RwLock.zig\");"},
{"lineNum":"   19","line":"pub const Pool = @import(\"Thread/Pool.zig\");"},
{"lineNum":"   20","line":"pub const WaitGroup = @import(\"Thread/WaitGroup.zig\");"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"pub const use_pthreads = target.os.tag != .windows and target.os.tag != .wasi and builtin.link_libc;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"const Thread = @This();"},
{"lineNum":"   25","line":"const Impl = if (target.os.tag == .windows)"},
{"lineNum":"   26","line":"    WindowsThreadImpl"},
{"lineNum":"   27","line":"else if (use_pthreads)"},
{"lineNum":"   28","line":"    PosixThreadImpl"},
{"lineNum":"   29","line":"else if (target.os.tag == .linux)"},
{"lineNum":"   30","line":"    LinuxThreadImpl"},
{"lineNum":"   31","line":"else if (target.os.tag == .wasi)"},
{"lineNum":"   32","line":"    WasiThreadImpl"},
{"lineNum":"   33","line":"else"},
{"lineNum":"   34","line":"    UnsupportedImpl;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"impl: Impl,"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"pub const max_name_len = switch (target.os.tag) {"},
{"lineNum":"   39","line":"    .linux => 15,"},
{"lineNum":"   40","line":"    .windows => 31,"},
{"lineNum":"   41","line":"    .macos, .ios, .watchos, .tvos => 63,"},
{"lineNum":"   42","line":"    .netbsd => 31,"},
{"lineNum":"   43","line":"    .freebsd => 15,"},
{"lineNum":"   44","line":"    .openbsd => 23,"},
{"lineNum":"   45","line":"    .dragonfly => 1023,"},
{"lineNum":"   46","line":"    .solaris => 31,"},
{"lineNum":"   47","line":"    else => 0,"},
{"lineNum":"   48","line":"};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"pub const SetNameError = error{"},
{"lineNum":"   51","line":"    NameTooLong,"},
{"lineNum":"   52","line":"    Unsupported,"},
{"lineNum":"   53","line":"    Unexpected,"},
{"lineNum":"   54","line":"} || os.PrctlError || os.WriteError || std.fs.File.OpenError || std.fmt.BufPrintError;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"pub fn setName(self: Thread, name: []const u8) SetNameError!void {"},
{"lineNum":"   57","line":"    if (name.len > max_name_len) return error.NameTooLong;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    const name_with_terminator = blk: {"},
{"lineNum":"   60","line":"        var name_buf: [max_name_len:0]u8 = undefined;"},
{"lineNum":"   61","line":"        @memcpy(name_buf[0..name.len], name);"},
{"lineNum":"   62","line":"        name_buf[name.len] = 0;"},
{"lineNum":"   63","line":"        break :blk name_buf[0..name.len :0];"},
{"lineNum":"   64","line":"    };"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    switch (target.os.tag) {"},
{"lineNum":"   67","line":"        .linux => if (use_pthreads) {"},
{"lineNum":"   68","line":"            if (self.getHandle() == std.c.pthread_self()) {"},
{"lineNum":"   69","line":"                // Set the name of the calling thread (no thread id required)."},
{"lineNum":"   70","line":"                const err = try os.prctl(.SET_NAME, .{@intFromPtr(name_with_terminator.ptr)});"},
{"lineNum":"   71","line":"                switch (@as(os.E, @enumFromInt(err))) {"},
{"lineNum":"   72","line":"                    .SUCCESS => return,"},
{"lineNum":"   73","line":"                    else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"   74","line":"                }"},
{"lineNum":"   75","line":"            } else {"},
{"lineNum":"   76","line":"                const err = std.c.pthread_setname_np(self.getHandle(), name_with_terminator.ptr);"},
{"lineNum":"   77","line":"                switch (err) {"},
{"lineNum":"   78","line":"                    .SUCCESS => return,"},
{"lineNum":"   79","line":"                    .RANGE => unreachable,"},
{"lineNum":"   80","line":"                    else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"   81","line":"                }"},
{"lineNum":"   82","line":"            }"},
{"lineNum":"   83","line":"        } else {"},
{"lineNum":"   84","line":"            var buf: [32]u8 = undefined;"},
{"lineNum":"   85","line":"            const path = try std.fmt.bufPrint(&buf, \"/proc/self/task/{d}/comm\", .{self.getHandle()});"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"            const file = try std.fs.cwd().openFile(path, .{ .mode = .write_only });"},
{"lineNum":"   88","line":"            defer file.close();"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"            try file.writer().writeAll(name);"},
{"lineNum":"   91","line":"            return;"},
{"lineNum":"   92","line":"        },"},
{"lineNum":"   93","line":"        .windows => {"},
{"lineNum":"   94","line":"            var buf: [max_name_len]u16 = undefined;"},
{"lineNum":"   95","line":"            const len = try std.unicode.utf8ToUtf16Le(&buf, name);"},
{"lineNum":"   96","line":"            const byte_len = math.cast(c_ushort, len * 2) orelse return error.NameTooLong;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"            // Note: NT allocates its own copy, no use-after-free here."},
{"lineNum":"   99","line":"            const unicode_string = os.windows.UNICODE_STRING{"},
{"lineNum":"  100","line":"                .Length = byte_len,"},
{"lineNum":"  101","line":"                .MaximumLength = byte_len,"},
{"lineNum":"  102","line":"                .Buffer = &buf,"},
{"lineNum":"  103","line":"            };"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"            switch (os.windows.ntdll.NtSetInformationThread("},
{"lineNum":"  106","line":"                self.getHandle(),"},
{"lineNum":"  107","line":"                .ThreadNameInformation,"},
{"lineNum":"  108","line":"                &unicode_string,"},
{"lineNum":"  109","line":"                @sizeOf(os.windows.UNICODE_STRING),"},
{"lineNum":"  110","line":"            )) {"},
{"lineNum":"  111","line":"                .SUCCESS => return,"},
{"lineNum":"  112","line":"                .NOT_IMPLEMENTED => return error.Unsupported,"},
{"lineNum":"  113","line":"                else => |err| return os.windows.unexpectedStatus(err),"},
{"lineNum":"  114","line":"            }"},
{"lineNum":"  115","line":"        },"},
{"lineNum":"  116","line":"        .macos, .ios, .watchos, .tvos => if (use_pthreads) {"},
{"lineNum":"  117","line":"            // There doesn\'t seem to be a way to set the name for an arbitrary thread, only the current one."},
{"lineNum":"  118","line":"            if (self.getHandle() != std.c.pthread_self()) return error.Unsupported;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"            const err = std.c.pthread_setname_np(name_with_terminator.ptr);"},
{"lineNum":"  121","line":"            switch (err) {"},
{"lineNum":"  122","line":"                .SUCCESS => return,"},
{"lineNum":"  123","line":"                else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  124","line":"            }"},
{"lineNum":"  125","line":"        },"},
{"lineNum":"  126","line":"        .netbsd, .solaris => if (use_pthreads) {"},
{"lineNum":"  127","line":"            const err = std.c.pthread_setname_np(self.getHandle(), name_with_terminator.ptr, null);"},
{"lineNum":"  128","line":"            switch (err) {"},
{"lineNum":"  129","line":"                .SUCCESS => return,"},
{"lineNum":"  130","line":"                .INVAL => unreachable,"},
{"lineNum":"  131","line":"                .SRCH => unreachable,"},
{"lineNum":"  132","line":"                .NOMEM => unreachable,"},
{"lineNum":"  133","line":"                else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  134","line":"            }"},
{"lineNum":"  135","line":"        },"},
{"lineNum":"  136","line":"        .freebsd, .openbsd => if (use_pthreads) {"},
{"lineNum":"  137","line":"            // Use pthread_set_name_np for FreeBSD because pthread_setname_np is FreeBSD 12.2+ only."},
{"lineNum":"  138","line":"            // TODO maybe revisit this if depending on FreeBSD 12.2+ is acceptable because"},
{"lineNum":"  139","line":"            // pthread_setname_np can return an error."},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"            std.c.pthread_set_name_np(self.getHandle(), name_with_terminator.ptr);"},
{"lineNum":"  142","line":"            return;"},
{"lineNum":"  143","line":"        },"},
{"lineNum":"  144","line":"        .dragonfly => if (use_pthreads) {"},
{"lineNum":"  145","line":"            const err = std.c.pthread_setname_np(self.getHandle(), name_with_terminator.ptr);"},
{"lineNum":"  146","line":"            switch (err) {"},
{"lineNum":"  147","line":"                .SUCCESS => return,"},
{"lineNum":"  148","line":"                .INVAL => unreachable,"},
{"lineNum":"  149","line":"                .FAULT => unreachable,"},
{"lineNum":"  150","line":"                .NAMETOOLONG => unreachable, // already checked"},
{"lineNum":"  151","line":"                .SRCH => unreachable,"},
{"lineNum":"  152","line":"                else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  153","line":"            }"},
{"lineNum":"  154","line":"        },"},
{"lineNum":"  155","line":"        else => {},"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"    return error.Unsupported;"},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"pub const GetNameError = error{"},
{"lineNum":"  161","line":"    // For Windows, the name is converted from UTF16 to UTF8"},
{"lineNum":"  162","line":"    CodepointTooLarge,"},
{"lineNum":"  163","line":"    Utf8CannotEncodeSurrogateHalf,"},
{"lineNum":"  164","line":"    DanglingSurrogateHalf,"},
{"lineNum":"  165","line":"    ExpectedSecondSurrogateHalf,"},
{"lineNum":"  166","line":"    UnexpectedSecondSurrogateHalf,"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    Unsupported,"},
{"lineNum":"  169","line":"    Unexpected,"},
{"lineNum":"  170","line":"} || os.PrctlError || os.ReadError || std.fs.File.OpenError || std.fmt.BufPrintError;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"pub fn getName(self: Thread, buffer_ptr: *[max_name_len:0]u8) GetNameError!?[]const u8 {"},
{"lineNum":"  173","line":"    buffer_ptr[max_name_len] = 0;"},
{"lineNum":"  174","line":"    var buffer: [:0]u8 = buffer_ptr;"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    switch (target.os.tag) {"},
{"lineNum":"  177","line":"        .linux => if (use_pthreads) {"},
{"lineNum":"  178","line":"            if (self.getHandle() == std.c.pthread_self()) {"},
{"lineNum":"  179","line":"                // Get the name of the calling thread (no thread id required)."},
{"lineNum":"  180","line":"                const err = try os.prctl(.GET_NAME, .{@intFromPtr(buffer.ptr)});"},
{"lineNum":"  181","line":"                switch (@as(os.E, @enumFromInt(err))) {"},
{"lineNum":"  182","line":"                    .SUCCESS => return std.mem.sliceTo(buffer, 0),"},
{"lineNum":"  183","line":"                    else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  184","line":"                }"},
{"lineNum":"  185","line":"            } else {"},
{"lineNum":"  186","line":"                const err = std.c.pthread_getname_np(self.getHandle(), buffer.ptr, max_name_len + 1);"},
{"lineNum":"  187","line":"                switch (err) {"},
{"lineNum":"  188","line":"                    .SUCCESS => return std.mem.sliceTo(buffer, 0),"},
{"lineNum":"  189","line":"                    .RANGE => unreachable,"},
{"lineNum":"  190","line":"                    else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  191","line":"                }"},
{"lineNum":"  192","line":"            }"},
{"lineNum":"  193","line":"        } else {"},
{"lineNum":"  194","line":"            var buf: [32]u8 = undefined;"},
{"lineNum":"  195","line":"            const path = try std.fmt.bufPrint(&buf, \"/proc/self/task/{d}/comm\", .{self.getHandle()});"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"            const file = try std.fs.cwd().openFile(path, .{});"},
{"lineNum":"  198","line":"            defer file.close();"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"            const data_len = try file.reader().readAll(buffer_ptr[0 .. max_name_len + 1]);"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"            return if (data_len >= 1) buffer[0 .. data_len - 1] else null;"},
{"lineNum":"  203","line":"        },"},
{"lineNum":"  204","line":"        .windows => {"},
{"lineNum":"  205","line":"            const buf_capacity = @sizeOf(os.windows.UNICODE_STRING) + (@sizeOf(u16) * max_name_len);"},
{"lineNum":"  206","line":"            var buf: [buf_capacity]u8 align(@alignOf(os.windows.UNICODE_STRING)) = undefined;"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"            switch (os.windows.ntdll.NtQueryInformationThread("},
{"lineNum":"  209","line":"                self.getHandle(),"},
{"lineNum":"  210","line":"                .ThreadNameInformation,"},
{"lineNum":"  211","line":"                &buf,"},
{"lineNum":"  212","line":"                buf_capacity,"},
{"lineNum":"  213","line":"                null,"},
{"lineNum":"  214","line":"            )) {"},
{"lineNum":"  215","line":"                .SUCCESS => {"},
{"lineNum":"  216","line":"                    const string = @as(*const os.windows.UNICODE_STRING, @ptrCast(&buf));"},
{"lineNum":"  217","line":"                    const len = try std.unicode.utf16leToUtf8(buffer, string.Buffer[0 .. string.Length / 2]);"},
{"lineNum":"  218","line":"                    return if (len > 0) buffer[0..len] else null;"},
{"lineNum":"  219","line":"                },"},
{"lineNum":"  220","line":"                .NOT_IMPLEMENTED => return error.Unsupported,"},
{"lineNum":"  221","line":"                else => |err| return os.windows.unexpectedStatus(err),"},
{"lineNum":"  222","line":"            }"},
{"lineNum":"  223","line":"        },"},
{"lineNum":"  224","line":"        .macos, .ios, .watchos, .tvos => if (use_pthreads) {"},
{"lineNum":"  225","line":"            const err = std.c.pthread_getname_np(self.getHandle(), buffer.ptr, max_name_len + 1);"},
{"lineNum":"  226","line":"            switch (err) {"},
{"lineNum":"  227","line":"                .SUCCESS => return std.mem.sliceTo(buffer, 0),"},
{"lineNum":"  228","line":"                .SRCH => unreachable,"},
{"lineNum":"  229","line":"                else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  230","line":"            }"},
{"lineNum":"  231","line":"        },"},
{"lineNum":"  232","line":"        .netbsd, .solaris => if (use_pthreads) {"},
{"lineNum":"  233","line":"            const err = std.c.pthread_getname_np(self.getHandle(), buffer.ptr, max_name_len + 1);"},
{"lineNum":"  234","line":"            switch (err) {"},
{"lineNum":"  235","line":"                .SUCCESS => return std.mem.sliceTo(buffer, 0),"},
{"lineNum":"  236","line":"                .INVAL => unreachable,"},
{"lineNum":"  237","line":"                .SRCH => unreachable,"},
{"lineNum":"  238","line":"                else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  239","line":"            }"},
{"lineNum":"  240","line":"        },"},
{"lineNum":"  241","line":"        .freebsd, .openbsd => if (use_pthreads) {"},
{"lineNum":"  242","line":"            // Use pthread_get_name_np for FreeBSD because pthread_getname_np is FreeBSD 12.2+ only."},
{"lineNum":"  243","line":"            // TODO maybe revisit this if depending on FreeBSD 12.2+ is acceptable because pthread_getname_np can return an error."},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"            std.c.pthread_get_name_np(self.getHandle(), buffer.ptr, max_name_len + 1);"},
{"lineNum":"  246","line":"            return std.mem.sliceTo(buffer, 0);"},
{"lineNum":"  247","line":"        },"},
{"lineNum":"  248","line":"        .dragonfly => if (use_pthreads) {"},
{"lineNum":"  249","line":"            const err = std.c.pthread_getname_np(self.getHandle(), buffer.ptr, max_name_len + 1);"},
{"lineNum":"  250","line":"            switch (err) {"},
{"lineNum":"  251","line":"                .SUCCESS => return std.mem.sliceTo(buffer, 0),"},
{"lineNum":"  252","line":"                .INVAL => unreachable,"},
{"lineNum":"  253","line":"                .FAULT => unreachable,"},
{"lineNum":"  254","line":"                .SRCH => unreachable,"},
{"lineNum":"  255","line":"                else => |e| return os.unexpectedErrno(e),"},
{"lineNum":"  256","line":"            }"},
{"lineNum":"  257","line":"        },"},
{"lineNum":"  258","line":"        else => {},"},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":"    return error.Unsupported;"},
{"lineNum":"  261","line":"}"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"/// Represents an ID per thread guaranteed to be unique only within a process."},
{"lineNum":"  264","line":"pub const Id = switch (target.os.tag) {"},
{"lineNum":"  265","line":"    .linux,"},
{"lineNum":"  266","line":"    .dragonfly,"},
{"lineNum":"  267","line":"    .netbsd,"},
{"lineNum":"  268","line":"    .freebsd,"},
{"lineNum":"  269","line":"    .openbsd,"},
{"lineNum":"  270","line":"    .haiku,"},
{"lineNum":"  271","line":"    .wasi,"},
{"lineNum":"  272","line":"    => u32,"},
{"lineNum":"  273","line":"    .macos, .ios, .watchos, .tvos => u64,"},
{"lineNum":"  274","line":"    .windows => os.windows.DWORD,"},
{"lineNum":"  275","line":"    else => usize,"},
{"lineNum":"  276","line":"};"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"/// Returns the platform ID of the callers thread."},
{"lineNum":"  279","line":"/// Attempts to use thread locals and avoid syscalls when possible."},
{"lineNum":"  280","line":"pub fn getCurrentId() Id {","class":"lineCov","hits":"1","order":"518","possible_hits":"1",},
{"lineNum":"  281","line":"    return Impl.getCurrentId();","class":"lineCov","hits":"1","order":"519","possible_hits":"1",},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"pub const CpuCountError = error{"},
{"lineNum":"  285","line":"    PermissionDenied,"},
{"lineNum":"  286","line":"    SystemResources,"},
{"lineNum":"  287","line":"    Unexpected,"},
{"lineNum":"  288","line":"};"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"/// Returns the platforms view on the number of logical CPU cores available."},
{"lineNum":"  291","line":"pub fn getCpuCount() CpuCountError!usize {"},
{"lineNum":"  292","line":"    return Impl.getCpuCount();"},
{"lineNum":"  293","line":"}"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"/// Configuration options for hints on how to spawn threads."},
{"lineNum":"  296","line":"pub const SpawnConfig = struct {"},
{"lineNum":"  297","line":"    // TODO compile-time call graph analysis to determine stack upper bound"},
{"lineNum":"  298","line":"    // https://github.com/ziglang/zig/issues/157"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    /// Size in bytes of the Thread\'s stack"},
{"lineNum":"  301","line":"    stack_size: usize = 16 * 1024 * 1024,"},
{"lineNum":"  302","line":"    /// The allocator to be used to allocate memory for the to-be-spawned thread"},
{"lineNum":"  303","line":"    allocator: ?std.mem.Allocator = null,"},
{"lineNum":"  304","line":"};"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"pub const SpawnError = error{"},
{"lineNum":"  307","line":"    /// A system-imposed limit on the number of threads was encountered."},
{"lineNum":"  308","line":"    /// There are a number of limits that may trigger this error:"},
{"lineNum":"  309","line":"    /// *  the  RLIMIT_NPROC soft resource limit (set via setrlimit(2)),"},
{"lineNum":"  310","line":"    ///    which limits the number of processes and threads for  a  real"},
{"lineNum":"  311","line":"    ///    user ID, was reached;"},
{"lineNum":"  312","line":"    /// *  the kernel\'s system-wide limit on the number of processes and"},
{"lineNum":"  313","line":"    ///    threads,  /proc/sys/kernel/threads-max,  was   reached   (see"},
{"lineNum":"  314","line":"    ///    proc(5));"},
{"lineNum":"  315","line":"    /// *  the  maximum  number  of  PIDs, /proc/sys/kernel/pid_max, was"},
{"lineNum":"  316","line":"    ///    reached (see proc(5)); or"},
{"lineNum":"  317","line":"    /// *  the PID limit (pids.max) imposed by the cgroup \"process  num‐"},
{"lineNum":"  318","line":"    ///    ber\" (PIDs) controller was reached."},
{"lineNum":"  319","line":"    ThreadQuotaExceeded,"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    /// The kernel cannot allocate sufficient memory to allocate a task structure"},
{"lineNum":"  322","line":"    /// for the child, or to copy those parts of the caller\'s context that need to"},
{"lineNum":"  323","line":"    /// be copied."},
{"lineNum":"  324","line":"    SystemResources,"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    /// Not enough userland memory to spawn the thread."},
{"lineNum":"  327","line":"    OutOfMemory,"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    /// `mlockall` is enabled, and the memory needed to spawn the thread"},
{"lineNum":"  330","line":"    /// would exceed the limit."},
{"lineNum":"  331","line":"    LockedMemoryLimitExceeded,"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    Unexpected,"},
{"lineNum":"  334","line":"};"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"/// Spawns a new thread which executes `function` using `args` and returns a handle to the spawned thread."},
{"lineNum":"  337","line":"/// `config` can be used as hints to the platform for now to spawn and execute the `function`."},
{"lineNum":"  338","line":"/// The caller must eventually either call `join()` to wait for the thread to finish and free its resources"},
{"lineNum":"  339","line":"/// or call `detach()` to excuse the caller from calling `join()` and have the thread clean up its resources on completion."},
{"lineNum":"  340","line":"pub fn spawn(config: SpawnConfig, comptime function: anytype, args: anytype) SpawnError!Thread {"},
{"lineNum":"  341","line":"    if (builtin.single_threaded) {"},
{"lineNum":"  342","line":"        @compileError(\"Cannot spawn thread when building in single-threaded mode\");"},
{"lineNum":"  343","line":"    }"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    const impl = try Impl.spawn(config, function, args);"},
{"lineNum":"  346","line":"    return Thread{ .impl = impl };"},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"/// Represents a kernel thread handle."},
{"lineNum":"  350","line":"/// May be an integer or a pointer depending on the platform."},
{"lineNum":"  351","line":"pub const Handle = Impl.ThreadHandle;"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"/// Returns the handle of this thread"},
{"lineNum":"  354","line":"pub fn getHandle(self: Thread) Handle {"},
{"lineNum":"  355","line":"    return self.impl.getHandle();"},
{"lineNum":"  356","line":"}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"/// Release the obligation of the caller to call `join()` and have the thread clean up its own resources on completion."},
{"lineNum":"  359","line":"/// Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior."},
{"lineNum":"  360","line":"pub fn detach(self: Thread) void {"},
{"lineNum":"  361","line":"    return self.impl.detach();"},
{"lineNum":"  362","line":"}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"/// Waits for the thread to complete, then deallocates any resources created on `spawn()`."},
{"lineNum":"  365","line":"/// Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior."},
{"lineNum":"  366","line":"pub fn join(self: Thread) void {"},
{"lineNum":"  367","line":"    return self.impl.join();"},
{"lineNum":"  368","line":"}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"pub const YieldError = error{"},
{"lineNum":"  371","line":"    /// The system is not configured to allow yielding"},
{"lineNum":"  372","line":"    SystemCannotYield,"},
{"lineNum":"  373","line":"};"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"/// Yields the current thread potentially allowing other threads to run."},
{"lineNum":"  376","line":"pub fn yield() YieldError!void {"},
{"lineNum":"  377","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  378","line":"        // The return value has to do with how many other threads there are; it is not"},
{"lineNum":"  379","line":"        // an error condition on Windows."},
{"lineNum":"  380","line":"        _ = os.windows.kernel32.SwitchToThread();"},
{"lineNum":"  381","line":"        return;"},
{"lineNum":"  382","line":"    }"},
{"lineNum":"  383","line":"    switch (os.errno(os.system.sched_yield())) {"},
{"lineNum":"  384","line":"        .SUCCESS => return,"},
{"lineNum":"  385","line":"        .NOSYS => return error.SystemCannotYield,"},
{"lineNum":"  386","line":"        else => return error.SystemCannotYield,"},
{"lineNum":"  387","line":"    }"},
{"lineNum":"  388","line":"}"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"/// State to synchronize detachment of spawner thread to spawned thread"},
{"lineNum":"  391","line":"const Completion = Atomic(enum(u8) {"},
{"lineNum":"  392","line":"    running,"},
{"lineNum":"  393","line":"    detached,"},
{"lineNum":"  394","line":"    completed,"},
{"lineNum":"  395","line":"});"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"/// Used by the Thread implementations to call the spawned function with the arguments."},
{"lineNum":"  398","line":"fn callFn(comptime f: anytype, args: anytype) switch (Impl) {"},
{"lineNum":"  399","line":"    WindowsThreadImpl => std.os.windows.DWORD,"},
{"lineNum":"  400","line":"    LinuxThreadImpl => u8,"},
{"lineNum":"  401","line":"    PosixThreadImpl => ?*anyopaque,"},
{"lineNum":"  402","line":"    else => unreachable,"},
{"lineNum":"  403","line":"} {"},
{"lineNum":"  404","line":"    const default_value = if (Impl == PosixThreadImpl) null else 0;"},
{"lineNum":"  405","line":"    const bad_fn_ret = \"expected return type of startFn to be \'u8\', \'noreturn\', \'void\', or \'!void\'\";"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    switch (@typeInfo(@typeInfo(@TypeOf(f)).Fn.return_type.?)) {"},
{"lineNum":"  408","line":"        .NoReturn => {"},
{"lineNum":"  409","line":"            @call(.auto, f, args);"},
{"lineNum":"  410","line":"        },"},
{"lineNum":"  411","line":"        .Void => {"},
{"lineNum":"  412","line":"            @call(.auto, f, args);"},
{"lineNum":"  413","line":"            return default_value;"},
{"lineNum":"  414","line":"        },"},
{"lineNum":"  415","line":"        .Int => |info| {"},
{"lineNum":"  416","line":"            if (info.bits != 8) {"},
{"lineNum":"  417","line":"                @compileError(bad_fn_ret);"},
{"lineNum":"  418","line":"            }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"            const status = @call(.auto, f, args);"},
{"lineNum":"  421","line":"            if (Impl != PosixThreadImpl) {"},
{"lineNum":"  422","line":"                return status;"},
{"lineNum":"  423","line":"            }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"            // pthreads don\'t support exit status, ignore value"},
{"lineNum":"  426","line":"            return default_value;"},
{"lineNum":"  427","line":"        },"},
{"lineNum":"  428","line":"        .ErrorUnion => |info| {"},
{"lineNum":"  429","line":"            if (info.payload != void) {"},
{"lineNum":"  430","line":"                @compileError(bad_fn_ret);"},
{"lineNum":"  431","line":"            }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"            @call(.auto, f, args) catch |err| {"},
{"lineNum":"  434","line":"                std.debug.print(\"error: {s}\\n\", .{@errorName(err)});"},
{"lineNum":"  435","line":"                if (@errorReturnTrace()) |trace| {"},
{"lineNum":"  436","line":"                    std.debug.dumpStackTrace(trace.*);"},
{"lineNum":"  437","line":"                }"},
{"lineNum":"  438","line":"            };"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"            return default_value;"},
{"lineNum":"  441","line":"        },"},
{"lineNum":"  442","line":"        else => {"},
{"lineNum":"  443","line":"            @compileError(bad_fn_ret);"},
{"lineNum":"  444","line":"        },"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":"}"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"/// We can\'t compile error in the `Impl` switch statement as its eagerly evaluated."},
{"lineNum":"  449","line":"/// So instead, we compile-error on the methods themselves for platforms which don\'t support threads."},
{"lineNum":"  450","line":"const UnsupportedImpl = struct {"},
{"lineNum":"  451","line":"    pub const ThreadHandle = void;"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    fn getCurrentId() usize {"},
{"lineNum":"  454","line":"        return unsupported({});"},
{"lineNum":"  455","line":"    }"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    fn getCpuCount() !usize {"},
{"lineNum":"  458","line":"        return unsupported({});"},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    fn spawn(config: SpawnConfig, comptime f: anytype, args: anytype) !Impl {"},
{"lineNum":"  462","line":"        return unsupported(.{ config, f, args });"},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    fn getHandle(self: Impl) ThreadHandle {"},
{"lineNum":"  466","line":"        return unsupported(self);"},
{"lineNum":"  467","line":"    }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    fn detach(self: Impl) void {"},
{"lineNum":"  470","line":"        return unsupported(self);"},
{"lineNum":"  471","line":"    }"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    fn join(self: Impl) void {"},
{"lineNum":"  474","line":"        return unsupported(self);"},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    fn unsupported(unused: anytype) noreturn {"},
{"lineNum":"  478","line":"        _ = unused;"},
{"lineNum":"  479","line":"        @compileError(\"Unsupported operating system \" ++ @tagName(target.os.tag));"},
{"lineNum":"  480","line":"    }"},
{"lineNum":"  481","line":"};"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"const WindowsThreadImpl = struct {"},
{"lineNum":"  484","line":"    const windows = os.windows;"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    pub const ThreadHandle = windows.HANDLE;"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"    fn getCurrentId() windows.DWORD {"},
{"lineNum":"  489","line":"        return windows.kernel32.GetCurrentThreadId();"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    fn getCpuCount() !usize {"},
{"lineNum":"  493","line":"        // Faster than calling into GetSystemInfo(), even if amortized."},
{"lineNum":"  494","line":"        return windows.peb().NumberOfProcessors;"},
{"lineNum":"  495","line":"    }"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    thread: *ThreadCompletion,"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    const ThreadCompletion = struct {"},
{"lineNum":"  500","line":"        completion: Completion,"},
{"lineNum":"  501","line":"        heap_ptr: windows.PVOID,"},
{"lineNum":"  502","line":"        heap_handle: windows.HANDLE,"},
{"lineNum":"  503","line":"        thread_handle: windows.HANDLE = undefined,"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"        fn free(self: ThreadCompletion) void {"},
{"lineNum":"  506","line":"            const status = windows.kernel32.HeapFree(self.heap_handle, 0, self.heap_ptr);"},
{"lineNum":"  507","line":"            assert(status != 0);"},
{"lineNum":"  508","line":"        }"},
{"lineNum":"  509","line":"    };"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"    fn spawn(config: SpawnConfig, comptime f: anytype, args: anytype) !Impl {"},
{"lineNum":"  512","line":"        const Args = @TypeOf(args);"},
{"lineNum":"  513","line":"        const Instance = struct {"},
{"lineNum":"  514","line":"            fn_args: Args,"},
{"lineNum":"  515","line":"            thread: ThreadCompletion,"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"            fn entryFn(raw_ptr: windows.PVOID) callconv(.C) windows.DWORD {"},
{"lineNum":"  518","line":"                const self: *@This() = @ptrCast(@alignCast(raw_ptr));"},
{"lineNum":"  519","line":"                defer switch (self.thread.completion.swap(.completed, .SeqCst)) {"},
{"lineNum":"  520","line":"                    .running => {},"},
{"lineNum":"  521","line":"                    .completed => unreachable,"},
{"lineNum":"  522","line":"                    .detached => self.thread.free(),"},
{"lineNum":"  523","line":"                };"},
{"lineNum":"  524","line":"                return callFn(f, self.fn_args);"},
{"lineNum":"  525","line":"            }"},
{"lineNum":"  526","line":"        };"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"        const heap_handle = windows.kernel32.GetProcessHeap() orelse return error.OutOfMemory;"},
{"lineNum":"  529","line":"        const alloc_bytes = @alignOf(Instance) + @sizeOf(Instance);"},
{"lineNum":"  530","line":"        const alloc_ptr = windows.kernel32.HeapAlloc(heap_handle, 0, alloc_bytes) orelse return error.OutOfMemory;"},
{"lineNum":"  531","line":"        errdefer assert(windows.kernel32.HeapFree(heap_handle, 0, alloc_ptr) != 0);"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"        const instance_bytes = @as([*]u8, @ptrCast(alloc_ptr))[0..alloc_bytes];"},
{"lineNum":"  534","line":"        var fba = std.heap.FixedBufferAllocator.init(instance_bytes);"},
{"lineNum":"  535","line":"        const instance = fba.allocator().create(Instance) catch unreachable;"},
{"lineNum":"  536","line":"        instance.* = .{"},
{"lineNum":"  537","line":"            .fn_args = args,"},
{"lineNum":"  538","line":"            .thread = .{"},
{"lineNum":"  539","line":"                .completion = Completion.init(.running),"},
{"lineNum":"  540","line":"                .heap_ptr = alloc_ptr,"},
{"lineNum":"  541","line":"                .heap_handle = heap_handle,"},
{"lineNum":"  542","line":"            },"},
{"lineNum":"  543","line":"        };"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"        // Windows appears to only support SYSTEM_INFO.dwAllocationGranularity minimum stack size."},
{"lineNum":"  546","line":"        // Going lower makes it default to that specified in the executable (~1mb)."},
{"lineNum":"  547","line":"        // Its also fine if the limit here is incorrect as stack size is only a hint."},
{"lineNum":"  548","line":"        var stack_size = std.math.cast(u32, config.stack_size) orelse std.math.maxInt(u32);"},
{"lineNum":"  549","line":"        stack_size = @max(64 * 1024, stack_size);"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"        instance.thread.thread_handle = windows.kernel32.CreateThread("},
{"lineNum":"  552","line":"            null,"},
{"lineNum":"  553","line":"            stack_size,"},
{"lineNum":"  554","line":"            Instance.entryFn,"},
{"lineNum":"  555","line":"            @as(*anyopaque, @ptrCast(instance)),"},
{"lineNum":"  556","line":"            0,"},
{"lineNum":"  557","line":"            null,"},
{"lineNum":"  558","line":"        ) orelse {"},
{"lineNum":"  559","line":"            const errno = windows.kernel32.GetLastError();"},
{"lineNum":"  560","line":"            return windows.unexpectedError(errno);"},
{"lineNum":"  561","line":"        };"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"        return Impl{ .thread = &instance.thread };"},
{"lineNum":"  564","line":"    }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    fn getHandle(self: Impl) ThreadHandle {"},
{"lineNum":"  567","line":"        return self.thread.thread_handle;"},
{"lineNum":"  568","line":"    }"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"    fn detach(self: Impl) void {"},
{"lineNum":"  571","line":"        windows.CloseHandle(self.thread.thread_handle);"},
{"lineNum":"  572","line":"        switch (self.thread.completion.swap(.detached, .SeqCst)) {"},
{"lineNum":"  573","line":"            .running => {},"},
{"lineNum":"  574","line":"            .completed => self.thread.free(),"},
{"lineNum":"  575","line":"            .detached => unreachable,"},
{"lineNum":"  576","line":"        }"},
{"lineNum":"  577","line":"    }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    fn join(self: Impl) void {"},
{"lineNum":"  580","line":"        windows.WaitForSingleObjectEx(self.thread.thread_handle, windows.INFINITE, false) catch unreachable;"},
{"lineNum":"  581","line":"        windows.CloseHandle(self.thread.thread_handle);"},
{"lineNum":"  582","line":"        assert(self.thread.completion.load(.SeqCst) == .completed);"},
{"lineNum":"  583","line":"        self.thread.free();"},
{"lineNum":"  584","line":"    }"},
{"lineNum":"  585","line":"};"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"const PosixThreadImpl = struct {"},
{"lineNum":"  588","line":"    const c = std.c;"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"    pub const ThreadHandle = c.pthread_t;"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    fn getCurrentId() Id {"},
{"lineNum":"  593","line":"        switch (target.os.tag) {"},
{"lineNum":"  594","line":"            .linux => {"},
{"lineNum":"  595","line":"                return LinuxThreadImpl.getCurrentId();"},
{"lineNum":"  596","line":"            },"},
{"lineNum":"  597","line":"            .macos, .ios, .watchos, .tvos => {"},
{"lineNum":"  598","line":"                var thread_id: u64 = undefined;"},
{"lineNum":"  599","line":"                // Pass thread=null to get the current thread ID."},
{"lineNum":"  600","line":"                assert(c.pthread_threadid_np(null, &thread_id) == 0);"},
{"lineNum":"  601","line":"                return thread_id;"},
{"lineNum":"  602","line":"            },"},
{"lineNum":"  603","line":"            .dragonfly => {"},
{"lineNum":"  604","line":"                return @as(u32, @bitCast(c.lwp_gettid()));"},
{"lineNum":"  605","line":"            },"},
{"lineNum":"  606","line":"            .netbsd => {"},
{"lineNum":"  607","line":"                return @as(u32, @bitCast(c._lwp_self()));"},
{"lineNum":"  608","line":"            },"},
{"lineNum":"  609","line":"            .freebsd => {"},
{"lineNum":"  610","line":"                return @as(u32, @bitCast(c.pthread_getthreadid_np()));"},
{"lineNum":"  611","line":"            },"},
{"lineNum":"  612","line":"            .openbsd => {"},
{"lineNum":"  613","line":"                return @as(u32, @bitCast(c.getthrid()));"},
{"lineNum":"  614","line":"            },"},
{"lineNum":"  615","line":"            .haiku => {"},
{"lineNum":"  616","line":"                return @as(u32, @bitCast(c.find_thread(null)));"},
{"lineNum":"  617","line":"            },"},
{"lineNum":"  618","line":"            else => {"},
{"lineNum":"  619","line":"                return @intFromPtr(c.pthread_self());"},
{"lineNum":"  620","line":"            },"},
{"lineNum":"  621","line":"        }"},
{"lineNum":"  622","line":"    }"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"    fn getCpuCount() !usize {"},
{"lineNum":"  625","line":"        switch (target.os.tag) {"},
{"lineNum":"  626","line":"            .linux => {"},
{"lineNum":"  627","line":"                return LinuxThreadImpl.getCpuCount();"},
{"lineNum":"  628","line":"            },"},
{"lineNum":"  629","line":"            .openbsd => {"},
{"lineNum":"  630","line":"                var count: c_int = undefined;"},
{"lineNum":"  631","line":"                var count_size: usize = @sizeOf(c_int);"},
{"lineNum":"  632","line":"                const mib = [_]c_int{ os.CTL.HW, os.system.HW.NCPUONLINE };"},
{"lineNum":"  633","line":"                os.sysctl(&mib, &count, &count_size, null, 0) catch |err| switch (err) {"},
{"lineNum":"  634","line":"                    error.NameTooLong, error.UnknownName => unreachable,"},
{"lineNum":"  635","line":"                    else => |e| return e,"},
{"lineNum":"  636","line":"                };"},
{"lineNum":"  637","line":"                return @as(usize, @intCast(count));"},
{"lineNum":"  638","line":"            },"},
{"lineNum":"  639","line":"            .solaris => {"},
{"lineNum":"  640","line":"                // The \"proper\" way to get the cpu count would be to query"},
{"lineNum":"  641","line":"                // /dev/kstat via ioctls, and traverse a linked list for each"},
{"lineNum":"  642","line":"                // cpu."},
{"lineNum":"  643","line":"                const rc = c.sysconf(os._SC.NPROCESSORS_ONLN);"},
{"lineNum":"  644","line":"                return switch (os.errno(rc)) {"},
{"lineNum":"  645","line":"                    .SUCCESS => @as(usize, @intCast(rc)),"},
{"lineNum":"  646","line":"                    else => |err| os.unexpectedErrno(err),"},
{"lineNum":"  647","line":"                };"},
{"lineNum":"  648","line":"            },"},
{"lineNum":"  649","line":"            .haiku => {"},
{"lineNum":"  650","line":"                var system_info: os.system.system_info = undefined;"},
{"lineNum":"  651","line":"                const rc = os.system.get_system_info(&system_info); // always returns B_OK"},
{"lineNum":"  652","line":"                return switch (os.errno(rc)) {"},
{"lineNum":"  653","line":"                    .SUCCESS => @as(usize, @intCast(system_info.cpu_count)),"},
{"lineNum":"  654","line":"                    else => |err| os.unexpectedErrno(err),"},
{"lineNum":"  655","line":"                };"},
{"lineNum":"  656","line":"            },"},
{"lineNum":"  657","line":"            else => {"},
{"lineNum":"  658","line":"                var count: c_int = undefined;"},
{"lineNum":"  659","line":"                var count_len: usize = @sizeOf(c_int);"},
{"lineNum":"  660","line":"                const name = if (comptime target.isDarwin()) \"hw.logicalcpu\" else \"hw.ncpu\";"},
{"lineNum":"  661","line":"                os.sysctlbynameZ(name, &count, &count_len, null, 0) catch |err| switch (err) {"},
{"lineNum":"  662","line":"                    error.NameTooLong, error.UnknownName => unreachable,"},
{"lineNum":"  663","line":"                    else => |e| return e,"},
{"lineNum":"  664","line":"                };"},
{"lineNum":"  665","line":"                return @as(usize, @intCast(count));"},
{"lineNum":"  666","line":"            },"},
{"lineNum":"  667","line":"        }"},
{"lineNum":"  668","line":"    }"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"    handle: ThreadHandle,"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    fn spawn(config: SpawnConfig, comptime f: anytype, args: anytype) !Impl {"},
{"lineNum":"  673","line":"        const Args = @TypeOf(args);"},
{"lineNum":"  674","line":"        const allocator = std.heap.c_allocator;"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"        const Instance = struct {"},
{"lineNum":"  677","line":"            fn entryFn(raw_arg: ?*anyopaque) callconv(.C) ?*anyopaque {"},
{"lineNum":"  678","line":"                // @alignCast() below doesn\'t support zero-sized-types (ZST)"},
{"lineNum":"  679","line":"                if (@sizeOf(Args) < 1) {"},
{"lineNum":"  680","line":"                    return callFn(f, @as(Args, undefined));"},
{"lineNum":"  681","line":"                }"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"                const args_ptr: *Args = @ptrCast(@alignCast(raw_arg));"},
{"lineNum":"  684","line":"                defer allocator.destroy(args_ptr);"},
{"lineNum":"  685","line":"                return callFn(f, args_ptr.*);"},
{"lineNum":"  686","line":"            }"},
{"lineNum":"  687","line":"        };"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"        const args_ptr = try allocator.create(Args);"},
{"lineNum":"  690","line":"        args_ptr.* = args;"},
{"lineNum":"  691","line":"        errdefer allocator.destroy(args_ptr);"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"        var attr: c.pthread_attr_t = undefined;"},
{"lineNum":"  694","line":"        if (c.pthread_attr_init(&attr) != .SUCCESS) return error.SystemResources;"},
{"lineNum":"  695","line":"        defer assert(c.pthread_attr_destroy(&attr) == .SUCCESS);"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"        // Use the same set of parameters used by the libc-less impl."},
{"lineNum":"  698","line":"        const stack_size = @max(config.stack_size, 16 * 1024);"},
{"lineNum":"  699","line":"        assert(c.pthread_attr_setstacksize(&attr, stack_size) == .SUCCESS);"},
{"lineNum":"  700","line":"        assert(c.pthread_attr_setguardsize(&attr, std.mem.page_size) == .SUCCESS);"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"        var handle: c.pthread_t = undefined;"},
{"lineNum":"  703","line":"        switch (c.pthread_create("},
{"lineNum":"  704","line":"            &handle,"},
{"lineNum":"  705","line":"            &attr,"},
{"lineNum":"  706","line":"            Instance.entryFn,"},
{"lineNum":"  707","line":"            if (@sizeOf(Args) > 1) @as(*anyopaque, @ptrCast(args_ptr)) else undefined,"},
{"lineNum":"  708","line":"        )) {"},
{"lineNum":"  709","line":"            .SUCCESS => return Impl{ .handle = handle },"},
{"lineNum":"  710","line":"            .AGAIN => return error.SystemResources,"},
{"lineNum":"  711","line":"            .PERM => unreachable,"},
{"lineNum":"  712","line":"            .INVAL => unreachable,"},
{"lineNum":"  713","line":"            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  714","line":"        }"},
{"lineNum":"  715","line":"    }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    fn getHandle(self: Impl) ThreadHandle {"},
{"lineNum":"  718","line":"        return self.handle;"},
{"lineNum":"  719","line":"    }"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"    fn detach(self: Impl) void {"},
{"lineNum":"  722","line":"        switch (c.pthread_detach(self.handle)) {"},
{"lineNum":"  723","line":"            .SUCCESS => {},"},
{"lineNum":"  724","line":"            .INVAL => unreachable, // thread handle is not joinable"},
{"lineNum":"  725","line":"            .SRCH => unreachable, // thread handle is invalid"},
{"lineNum":"  726","line":"            else => unreachable,"},
{"lineNum":"  727","line":"        }"},
{"lineNum":"  728","line":"    }"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    fn join(self: Impl) void {"},
{"lineNum":"  731","line":"        switch (c.pthread_join(self.handle, null)) {"},
{"lineNum":"  732","line":"            .SUCCESS => {},"},
{"lineNum":"  733","line":"            .INVAL => unreachable, // thread handle is not joinable (or another thread is already joining in)"},
{"lineNum":"  734","line":"            .SRCH => unreachable, // thread handle is invalid"},
{"lineNum":"  735","line":"            .DEADLK => unreachable, // two threads tried to join each other"},
{"lineNum":"  736","line":"            else => unreachable,"},
{"lineNum":"  737","line":"        }"},
{"lineNum":"  738","line":"    }"},
{"lineNum":"  739","line":"};"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"const WasiThreadImpl = struct {"},
{"lineNum":"  742","line":"    thread: *WasiThread,"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"    pub const ThreadHandle = i32;"},
{"lineNum":"  745","line":"    threadlocal var tls_thread_id: Id = 0;"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"    const WasiThread = struct {"},
{"lineNum":"  748","line":"        /// Thread ID"},
{"lineNum":"  749","line":"        tid: Atomic(i32) = Atomic(i32).init(0),"},
{"lineNum":"  750","line":"        /// Contains all memory which was allocated to bootstrap this thread, including:"},
{"lineNum":"  751","line":"        /// - Guard page"},
{"lineNum":"  752","line":"        /// - Stack"},
{"lineNum":"  753","line":"        /// - TLS segment"},
{"lineNum":"  754","line":"        /// - `Instance`"},
{"lineNum":"  755","line":"        /// All memory is freed upon call to `join`"},
{"lineNum":"  756","line":"        memory: []u8,"},
{"lineNum":"  757","line":"        /// The allocator used to allocate the thread\'s memory,"},
{"lineNum":"  758","line":"        /// which is also used during `join` to ensure clean-up."},
{"lineNum":"  759","line":"        allocator: std.mem.Allocator,"},
{"lineNum":"  760","line":"        /// The current state of the thread."},
{"lineNum":"  761","line":"        state: State = State.init(.running),"},
{"lineNum":"  762","line":"    };"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"    /// A meta-data structure used to bootstrap a thread"},
{"lineNum":"  765","line":"    const Instance = struct {"},
{"lineNum":"  766","line":"        thread: WasiThread,"},
{"lineNum":"  767","line":"        /// Contains the offset to the new __tls_base."},
{"lineNum":"  768","line":"        /// The offset starting from the memory\'s base."},
{"lineNum":"  769","line":"        tls_offset: usize,"},
{"lineNum":"  770","line":"        /// Contains the offset to the stack for the newly spawned thread."},
{"lineNum":"  771","line":"        /// The offset is calculated starting from the memory\'s base."},
{"lineNum":"  772","line":"        stack_offset: usize,"},
{"lineNum":"  773","line":"        /// Contains the raw pointer value to the wrapper which holds all arguments"},
{"lineNum":"  774","line":"        /// for the callback."},
{"lineNum":"  775","line":"        raw_ptr: usize,"},
{"lineNum":"  776","line":"        /// Function pointer to a wrapping function which will call the user\'s"},
{"lineNum":"  777","line":"        /// function upon thread spawn. The above mentioned pointer will be passed"},
{"lineNum":"  778","line":"        /// to this function pointer as its argument."},
{"lineNum":"  779","line":"        call_back: *const fn (usize) void,"},
{"lineNum":"  780","line":"        /// When a thread is in `detached` state, we must free all of its memory"},
{"lineNum":"  781","line":"        /// upon thread completion. However, as this is done while still within"},
{"lineNum":"  782","line":"        /// the thread, we must first jump back to the main thread\'s stack or else"},
{"lineNum":"  783","line":"        /// we end up freeing the stack that we\'re currently using."},
{"lineNum":"  784","line":"        original_stack_pointer: [*]u8,"},
{"lineNum":"  785","line":"    };"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"    const State = Atomic(enum(u8) { running, completed, detached });"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    fn getCurrentId() Id {"},
{"lineNum":"  790","line":"        return tls_thread_id;"},
{"lineNum":"  791","line":"    }"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"    fn getHandle(self: Impl) ThreadHandle {"},
{"lineNum":"  794","line":"        return self.thread.tid.load(.SeqCst);"},
{"lineNum":"  795","line":"    }"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"    fn detach(self: Impl) void {"},
{"lineNum":"  798","line":"        switch (self.thread.state.swap(.detached, .SeqCst)) {"},
{"lineNum":"  799","line":"            .running => {},"},
{"lineNum":"  800","line":"            .completed => self.join(),"},
{"lineNum":"  801","line":"            .detached => unreachable,"},
{"lineNum":"  802","line":"        }"},
{"lineNum":"  803","line":"    }"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    fn join(self: Impl) void {"},
{"lineNum":"  806","line":"        defer {"},
{"lineNum":"  807","line":"            // Create a copy of the allocator so we do not free the reference to the"},
{"lineNum":"  808","line":"            // original allocator while freeing the memory."},
{"lineNum":"  809","line":"            var allocator = self.thread.allocator;"},
{"lineNum":"  810","line":"            allocator.free(self.thread.memory);"},
{"lineNum":"  811","line":"        }"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"        var spin: u8 = 10;"},
{"lineNum":"  814","line":"        while (true) {"},
{"lineNum":"  815","line":"            const tid = self.thread.tid.load(.SeqCst);"},
{"lineNum":"  816","line":"            if (tid == 0) {"},
{"lineNum":"  817","line":"                break;"},
{"lineNum":"  818","line":"            }"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"            if (spin > 0) {"},
{"lineNum":"  821","line":"                spin -= 1;"},
{"lineNum":"  822","line":"                std.atomic.spinLoopHint();"},
{"lineNum":"  823","line":"                continue;"},
{"lineNum":"  824","line":"            }"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"            const result = asm ("},
{"lineNum":"  827","line":"                \\\\ local.get %[ptr]"},
{"lineNum":"  828","line":"                \\\\ local.get %[expected]"},
{"lineNum":"  829","line":"                \\\\ i64.const -1 # infinite"},
{"lineNum":"  830","line":"                \\\\ memory.atomic.wait32 0"},
{"lineNum":"  831","line":"                \\\\ local.set %[ret]"},
{"lineNum":"  832","line":"                : [ret] \"=r\" (-> u32),"},
{"lineNum":"  833","line":"                : [ptr] \"r\" (&self.thread.tid.value),"},
{"lineNum":"  834","line":"                  [expected] \"r\" (tid),"},
{"lineNum":"  835","line":"            );"},
{"lineNum":"  836","line":"            switch (result) {"},
{"lineNum":"  837","line":"                0 => continue, // ok"},
{"lineNum":"  838","line":"                1 => continue, // expected =! loaded"},
{"lineNum":"  839","line":"                2 => unreachable, // timeout (infinite)"},
{"lineNum":"  840","line":"                else => unreachable,"},
{"lineNum":"  841","line":"            }"},
{"lineNum":"  842","line":"        }"},
{"lineNum":"  843","line":"    }"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    fn spawn(config: std.Thread.SpawnConfig, comptime f: anytype, args: anytype) !WasiThreadImpl {"},
{"lineNum":"  846","line":"        if (config.allocator == null) return error.OutOfMemory; // an allocator is required to spawn a WASI-thread"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"        // Wrapping struct required to hold the user-provided function arguments."},
{"lineNum":"  849","line":"        const Wrapper = struct {"},
{"lineNum":"  850","line":"            args: @TypeOf(args),"},
{"lineNum":"  851","line":"            fn entry(ptr: usize) void {"},
{"lineNum":"  852","line":"                const w: *@This() = @ptrFromInt(ptr);"},
{"lineNum":"  853","line":"                @call(.auto, f, w.args);"},
{"lineNum":"  854","line":"            }"},
{"lineNum":"  855","line":"        };"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"        var stack_offset: usize = undefined;"},
{"lineNum":"  858","line":"        var tls_offset: usize = undefined;"},
{"lineNum":"  859","line":"        var wrapper_offset: usize = undefined;"},
{"lineNum":"  860","line":"        var instance_offset: usize = undefined;"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"        // Calculate the bytes we have to allocate to store all thread information, including:"},
{"lineNum":"  863","line":"        // - The actual stack for the thread"},
{"lineNum":"  864","line":"        // - The TLS segment"},
{"lineNum":"  865","line":"        // - `Instance` - containing information about how to call the user\'s function."},
{"lineNum":"  866","line":"        const map_bytes = blk: {"},
{"lineNum":"  867","line":"            // start with atleast a single page, which is used as a guard to prevent"},
{"lineNum":"  868","line":"            // other threads clobbering our new thread."},
{"lineNum":"  869","line":"            // Unfortunately, WebAssembly has no notion of read-only segments, so this"},
{"lineNum":"  870","line":"            // is only a best effort."},
{"lineNum":"  871","line":"            var bytes: usize = std.wasm.page_size;"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"            bytes = std.mem.alignForward(usize, bytes, 16); // align stack to 16 bytes"},
{"lineNum":"  874","line":"            stack_offset = bytes;"},
{"lineNum":"  875","line":"            bytes += @max(std.wasm.page_size, config.stack_size);"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"            bytes = std.mem.alignForward(usize, bytes, __tls_align());"},
{"lineNum":"  878","line":"            tls_offset = bytes;"},
{"lineNum":"  879","line":"            bytes += __tls_size();"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"            bytes = std.mem.alignForward(usize, bytes, @alignOf(Wrapper));"},
{"lineNum":"  882","line":"            wrapper_offset = bytes;"},
{"lineNum":"  883","line":"            bytes += @sizeOf(Wrapper);"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"            bytes = std.mem.alignForward(usize, bytes, @alignOf(Instance));"},
{"lineNum":"  886","line":"            instance_offset = bytes;"},
{"lineNum":"  887","line":"            bytes += @sizeOf(Instance);"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"            bytes = std.mem.alignForward(usize, bytes, std.wasm.page_size);"},
{"lineNum":"  890","line":"            break :blk bytes;"},
{"lineNum":"  891","line":"        };"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"        // Allocate the amount of memory required for all meta data."},
{"lineNum":"  894","line":"        const allocated_memory = try config.allocator.?.alloc(u8, map_bytes);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"        const wrapper: *Wrapper = @ptrCast(@alignCast(&allocated_memory[wrapper_offset]));"},
{"lineNum":"  897","line":"        wrapper.* = .{ .args = args };"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"        const instance: *Instance = @ptrCast(@alignCast(&allocated_memory[instance_offset]));"},
{"lineNum":"  900","line":"        instance.* = .{"},
{"lineNum":"  901","line":"            .thread = .{ .memory = allocated_memory, .allocator = config.allocator.? },"},
{"lineNum":"  902","line":"            .tls_offset = tls_offset,"},
{"lineNum":"  903","line":"            .stack_offset = stack_offset,"},
{"lineNum":"  904","line":"            .raw_ptr = @intFromPtr(wrapper),"},
{"lineNum":"  905","line":"            .call_back = &Wrapper.entry,"},
{"lineNum":"  906","line":"            .original_stack_pointer = __get_stack_pointer(),"},
{"lineNum":"  907","line":"        };"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"        const tid = spawnWasiThread(instance);"},
{"lineNum":"  910","line":"        // The specification says any value lower than 0 indicates an error."},
{"lineNum":"  911","line":"        // The values of such error are unspecified. WASI-Libc treats it as EAGAIN."},
{"lineNum":"  912","line":"        if (tid < 0) {"},
{"lineNum":"  913","line":"            return error.SystemResources;"},
{"lineNum":"  914","line":"        }"},
{"lineNum":"  915","line":"        instance.thread.tid.store(tid, .SeqCst);"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"        return .{ .thread = &instance.thread };"},
{"lineNum":"  918","line":"    }"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"    /// Bootstrap procedure, called by the host environment after thread creation."},
{"lineNum":"  921","line":"    export fn wasi_thread_start(tid: i32, arg: *Instance) void {"},
{"lineNum":"  922","line":"        if (builtin.single_threaded) {"},
{"lineNum":"  923","line":"            // ensure function is not analyzed in single-threaded mode"},
{"lineNum":"  924","line":"            return;"},
{"lineNum":"  925","line":"        }"},
{"lineNum":"  926","line":"        __set_stack_pointer(arg.thread.memory.ptr + arg.stack_offset);"},
{"lineNum":"  927","line":"        __wasm_init_tls(arg.thread.memory.ptr + arg.tls_offset);"},
{"lineNum":"  928","line":"        @atomicStore(u32, &WasiThreadImpl.tls_thread_id, @intCast(tid), .SeqCst);"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"        // Finished bootstrapping, call user\'s procedure."},
{"lineNum":"  931","line":"        arg.call_back(arg.raw_ptr);"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"        switch (arg.thread.state.swap(.completed, .SeqCst)) {"},
{"lineNum":"  934","line":"            .running => {"},
{"lineNum":"  935","line":"                // reset the Thread ID"},
{"lineNum":"  936","line":"                asm volatile ("},
{"lineNum":"  937","line":"                    \\\\ local.get %[ptr]"},
{"lineNum":"  938","line":"                    \\\\ i32.const 0"},
{"lineNum":"  939","line":"                    \\\\ i32.atomic.store 0"},
{"lineNum":"  940","line":"                    :"},
{"lineNum":"  941","line":"                    : [ptr] \"r\" (&arg.thread.tid.value),"},
{"lineNum":"  942","line":"                );"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"                // Wake the main thread listening to this thread"},
{"lineNum":"  945","line":"                asm volatile ("},
{"lineNum":"  946","line":"                    \\\\ local.get %[ptr]"},
{"lineNum":"  947","line":"                    \\\\ i32.const 1 # waiters"},
{"lineNum":"  948","line":"                    \\\\ memory.atomic.notify 0"},
{"lineNum":"  949","line":"                    \\\\ drop # no need to know the waiters"},
{"lineNum":"  950","line":"                    :"},
{"lineNum":"  951","line":"                    : [ptr] \"r\" (&arg.thread.tid.value),"},
{"lineNum":"  952","line":"                );"},
{"lineNum":"  953","line":"            },"},
{"lineNum":"  954","line":"            .completed => unreachable,"},
{"lineNum":"  955","line":"            .detached => {"},
{"lineNum":"  956","line":"                // restore the original stack pointer so we can free the memory"},
{"lineNum":"  957","line":"                // without having to worry about freeing the stack"},
{"lineNum":"  958","line":"                __set_stack_pointer(arg.original_stack_pointer);"},
{"lineNum":"  959","line":"                // Ensure a copy so we don\'t free the allocator reference itself"},
{"lineNum":"  960","line":"                var allocator = arg.thread.allocator;"},
{"lineNum":"  961","line":"                allocator.free(arg.thread.memory);"},
{"lineNum":"  962","line":"            },"},
{"lineNum":"  963","line":"        }"},
{"lineNum":"  964","line":"    }"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"    /// Asks the host to create a new thread for us."},
{"lineNum":"  967","line":"    /// Newly created thread will call `wasi_tread_start` with the thread ID as well"},
{"lineNum":"  968","line":"    /// as the input `arg` that was provided to `spawnWasiThread`"},
{"lineNum":"  969","line":"    const spawnWasiThread = @\"thread-spawn\";"},
{"lineNum":"  970","line":"    extern \"wasi\" fn @\"thread-spawn\"(arg: *Instance) i32;"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"    /// Initializes the TLS data segment starting at `memory`."},
{"lineNum":"  973","line":"    /// This is a synthetic function, generated by the linker."},
{"lineNum":"  974","line":"    extern fn __wasm_init_tls(memory: [*]u8) void;"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"    /// Returns a pointer to the base of the TLS data segment for the current thread"},
{"lineNum":"  977","line":"    inline fn __tls_base() [*]u8 {"},
{"lineNum":"  978","line":"        return asm ("},
{"lineNum":"  979","line":"            \\\\ .globaltype __tls_base, i32"},
{"lineNum":"  980","line":"            \\\\ global.get __tls_base"},
{"lineNum":"  981","line":"            \\\\ local.set %[ret]"},
{"lineNum":"  982","line":"            : [ret] \"=r\" (-> [*]u8),"},
{"lineNum":"  983","line":"        );"},
{"lineNum":"  984","line":"    }"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"    /// Returns the size of the TLS segment"},
{"lineNum":"  987","line":"    inline fn __tls_size() u32 {"},
{"lineNum":"  988","line":"        return asm volatile ("},
{"lineNum":"  989","line":"            \\\\ .globaltype __tls_size, i32, immutable"},
{"lineNum":"  990","line":"            \\\\ global.get __tls_size"},
{"lineNum":"  991","line":"            \\\\ local.set %[ret]"},
{"lineNum":"  992","line":"            : [ret] \"=r\" (-> u32),"},
{"lineNum":"  993","line":"        );"},
{"lineNum":"  994","line":"    }"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"    /// Returns the alignment of the TLS segment"},
{"lineNum":"  997","line":"    inline fn __tls_align() u32 {"},
{"lineNum":"  998","line":"        return asm ("},
{"lineNum":"  999","line":"            \\\\ .globaltype __tls_align, i32, immutable"},
{"lineNum":" 1000","line":"            \\\\ global.get __tls_align"},
{"lineNum":" 1001","line":"            \\\\ local.set %[ret]"},
{"lineNum":" 1002","line":"            : [ret] \"=r\" (-> u32),"},
{"lineNum":" 1003","line":"        );"},
{"lineNum":" 1004","line":"    }"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"    /// Allows for setting the stack pointer in the WebAssembly module."},
{"lineNum":" 1007","line":"    inline fn __set_stack_pointer(addr: [*]u8) void {"},
{"lineNum":" 1008","line":"        asm volatile ("},
{"lineNum":" 1009","line":"            \\\\ local.get %[ptr]"},
{"lineNum":" 1010","line":"            \\\\ global.set __stack_pointer"},
{"lineNum":" 1011","line":"            :"},
{"lineNum":" 1012","line":"            : [ptr] \"r\" (addr),"},
{"lineNum":" 1013","line":"        );"},
{"lineNum":" 1014","line":"    }"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"    /// Returns the current value of the stack pointer"},
{"lineNum":" 1017","line":"    inline fn __get_stack_pointer() [*]u8 {"},
{"lineNum":" 1018","line":"        return asm ("},
{"lineNum":" 1019","line":"            \\\\ global.get __stack_pointer"},
{"lineNum":" 1020","line":"            \\\\ local.set %[stack_ptr]"},
{"lineNum":" 1021","line":"            : [stack_ptr] \"=r\" (-> [*]u8),"},
{"lineNum":" 1022","line":"        );"},
{"lineNum":" 1023","line":"    }"},
{"lineNum":" 1024","line":"};"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"const LinuxThreadImpl = struct {"},
{"lineNum":" 1027","line":"    const linux = os.linux;"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"    pub const ThreadHandle = i32;"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"    threadlocal var tls_thread_id: ?Id = null;"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"    fn getCurrentId() Id {","class":"lineCov","hits":"1","order":"520","possible_hits":"1",},
{"lineNum":" 1034","line":"        return tls_thread_id orelse {","class":"lineCov","hits":"1","order":"521","possible_hits":"1",},
{"lineNum":" 1035","line":"            const tid = @as(u32, @bitCast(linux.gettid()));","class":"lineCov","hits":"1","order":"522","possible_hits":"1",},
{"lineNum":" 1036","line":"            tls_thread_id = tid;","class":"lineCov","hits":"1","order":"527","possible_hits":"1",},
{"lineNum":" 1037","line":"            return tid;","class":"lineCov","hits":"1","order":"528","possible_hits":"1",},
{"lineNum":" 1038","line":"        };"},
{"lineNum":" 1039","line":"    }"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"    fn getCpuCount() !usize {"},
{"lineNum":" 1042","line":"        const cpu_set = try os.sched_getaffinity(0);"},
{"lineNum":" 1043","line":"        // TODO: should not need this usize cast"},
{"lineNum":" 1044","line":"        return @as(usize, os.CPU_COUNT(cpu_set));"},
{"lineNum":" 1045","line":"    }"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"    thread: *ThreadCompletion,"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    const ThreadCompletion = struct {"},
{"lineNum":" 1050","line":"        completion: Completion = Completion.init(.running),"},
{"lineNum":" 1051","line":"        child_tid: Atomic(i32) = Atomic(i32).init(1),"},
{"lineNum":" 1052","line":"        parent_tid: i32 = undefined,"},
{"lineNum":" 1053","line":"        mapped: []align(std.mem.page_size) u8,"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"        /// Calls `munmap(mapped.ptr, mapped.len)` then `exit(1)` without touching the stack (which lives in `mapped.ptr`)."},
{"lineNum":" 1056","line":"        /// Ported over from musl libc\'s pthread detached implementation:"},
{"lineNum":" 1057","line":"        /// https://github.com/ifduyue/musl/search?q=__unmapself"},
{"lineNum":" 1058","line":"        fn freeAndExit(self: *ThreadCompletion) noreturn {"},
{"lineNum":" 1059","line":"            switch (target.cpu.arch) {"},
{"lineNum":" 1060","line":"                .x86 => asm volatile ("},
{"lineNum":" 1061","line":"                    \\\\  movl $91, %%eax"},
{"lineNum":" 1062","line":"                    \\\\  movl %[ptr], %%ebx"},
{"lineNum":" 1063","line":"                    \\\\  movl %[len], %%ecx"},
{"lineNum":" 1064","line":"                    \\\\  int $128"},
{"lineNum":" 1065","line":"                    \\\\  movl $1, %%eax"},
{"lineNum":" 1066","line":"                    \\\\  movl $0, %%ebx"},
{"lineNum":" 1067","line":"                    \\\\  int $128"},
{"lineNum":" 1068","line":"                    :"},
{"lineNum":" 1069","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1070","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1071","line":"                    : \"memory\""},
{"lineNum":" 1072","line":"                ),"},
{"lineNum":" 1073","line":"                .x86_64 => asm volatile ("},
{"lineNum":" 1074","line":"                    \\\\  movq $11, %%rax"},
{"lineNum":" 1075","line":"                    \\\\  syscall"},
{"lineNum":" 1076","line":"                    \\\\  movq $60, %%rax"},
{"lineNum":" 1077","line":"                    \\\\  movq $1, %%rdi"},
{"lineNum":" 1078","line":"                    \\\\  syscall"},
{"lineNum":" 1079","line":"                    :"},
{"lineNum":" 1080","line":"                    : [ptr] \"{rdi}\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1081","line":"                      [len] \"{rsi}\" (self.mapped.len),"},
{"lineNum":" 1082","line":"                ),"},
{"lineNum":" 1083","line":"                .arm, .armeb, .thumb, .thumbeb => asm volatile ("},
{"lineNum":" 1084","line":"                    \\\\  mov r7, #91"},
{"lineNum":" 1085","line":"                    \\\\  mov r0, %[ptr]"},
{"lineNum":" 1086","line":"                    \\\\  mov r1, %[len]"},
{"lineNum":" 1087","line":"                    \\\\  svc 0"},
{"lineNum":" 1088","line":"                    \\\\  mov r7, #1"},
{"lineNum":" 1089","line":"                    \\\\  mov r0, #0"},
{"lineNum":" 1090","line":"                    \\\\  svc 0"},
{"lineNum":" 1091","line":"                    :"},
{"lineNum":" 1092","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1093","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1094","line":"                    : \"memory\""},
{"lineNum":" 1095","line":"                ),"},
{"lineNum":" 1096","line":"                .aarch64, .aarch64_be, .aarch64_32 => asm volatile ("},
{"lineNum":" 1097","line":"                    \\\\  mov x8, #215"},
{"lineNum":" 1098","line":"                    \\\\  mov x0, %[ptr]"},
{"lineNum":" 1099","line":"                    \\\\  mov x1, %[len]"},
{"lineNum":" 1100","line":"                    \\\\  svc 0"},
{"lineNum":" 1101","line":"                    \\\\  mov x8, #93"},
{"lineNum":" 1102","line":"                    \\\\  mov x0, #0"},
{"lineNum":" 1103","line":"                    \\\\  svc 0"},
{"lineNum":" 1104","line":"                    :"},
{"lineNum":" 1105","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1106","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1107","line":"                    : \"memory\""},
{"lineNum":" 1108","line":"                ),"},
{"lineNum":" 1109","line":"                .mips, .mipsel => asm volatile ("},
{"lineNum":" 1110","line":"                    \\\\  move $sp, $25"},
{"lineNum":" 1111","line":"                    \\\\  li $2, 4091"},
{"lineNum":" 1112","line":"                    \\\\  move $4, %[ptr]"},
{"lineNum":" 1113","line":"                    \\\\  move $5, %[len]"},
{"lineNum":" 1114","line":"                    \\\\  syscall"},
{"lineNum":" 1115","line":"                    \\\\  li $2, 4001"},
{"lineNum":" 1116","line":"                    \\\\  li $4, 0"},
{"lineNum":" 1117","line":"                    \\\\  syscall"},
{"lineNum":" 1118","line":"                    :"},
{"lineNum":" 1119","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1120","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1121","line":"                    : \"memory\""},
{"lineNum":" 1122","line":"                ),"},
{"lineNum":" 1123","line":"                .mips64, .mips64el => asm volatile ("},
{"lineNum":" 1124","line":"                    \\\\  li $2, 4091"},
{"lineNum":" 1125","line":"                    \\\\  move $4, %[ptr]"},
{"lineNum":" 1126","line":"                    \\\\  move $5, %[len]"},
{"lineNum":" 1127","line":"                    \\\\  syscall"},
{"lineNum":" 1128","line":"                    \\\\  li $2, 4001"},
{"lineNum":" 1129","line":"                    \\\\  li $4, 0"},
{"lineNum":" 1130","line":"                    \\\\  syscall"},
{"lineNum":" 1131","line":"                    :"},
{"lineNum":" 1132","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1133","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1134","line":"                    : \"memory\""},
{"lineNum":" 1135","line":"                ),"},
{"lineNum":" 1136","line":"                .powerpc, .powerpcle, .powerpc64, .powerpc64le => asm volatile ("},
{"lineNum":" 1137","line":"                    \\\\  li 0, 91"},
{"lineNum":" 1138","line":"                    \\\\  mr %[ptr], 3"},
{"lineNum":" 1139","line":"                    \\\\  mr %[len], 4"},
{"lineNum":" 1140","line":"                    \\\\  sc"},
{"lineNum":" 1141","line":"                    \\\\  li 0, 1"},
{"lineNum":" 1142","line":"                    \\\\  li 3, 0"},
{"lineNum":" 1143","line":"                    \\\\  sc"},
{"lineNum":" 1144","line":"                    \\\\  blr"},
{"lineNum":" 1145","line":"                    :"},
{"lineNum":" 1146","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1147","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1148","line":"                    : \"memory\""},
{"lineNum":" 1149","line":"                ),"},
{"lineNum":" 1150","line":"                .riscv64 => asm volatile ("},
{"lineNum":" 1151","line":"                    \\\\  li a7, 215"},
{"lineNum":" 1152","line":"                    \\\\  mv a0, %[ptr]"},
{"lineNum":" 1153","line":"                    \\\\  mv a1, %[len]"},
{"lineNum":" 1154","line":"                    \\\\  ecall"},
{"lineNum":" 1155","line":"                    \\\\  li a7, 93"},
{"lineNum":" 1156","line":"                    \\\\  mv a0, zero"},
{"lineNum":" 1157","line":"                    \\\\  ecall"},
{"lineNum":" 1158","line":"                    :"},
{"lineNum":" 1159","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1160","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1161","line":"                    : \"memory\""},
{"lineNum":" 1162","line":"                ),"},
{"lineNum":" 1163","line":"                .sparc64 => asm volatile ("},
{"lineNum":" 1164","line":"                    \\\\ # SPARCs really don\'t like it when active stack frames"},
{"lineNum":" 1165","line":"                    \\\\ # is unmapped (it will result in a segfault), so we"},
{"lineNum":" 1166","line":"                    \\\\ # force-deactivate it by running `restore` until"},
{"lineNum":" 1167","line":"                    \\\\ # all frames are cleared."},
{"lineNum":" 1168","line":"                    \\\\  1:"},
{"lineNum":" 1169","line":"                    \\\\  cmp %%fp, 0"},
{"lineNum":" 1170","line":"                    \\\\  beq 2f"},
{"lineNum":" 1171","line":"                    \\\\  nop"},
{"lineNum":" 1172","line":"                    \\\\  ba 1b"},
{"lineNum":" 1173","line":"                    \\\\  restore"},
{"lineNum":" 1174","line":"                    \\\\  2:"},
{"lineNum":" 1175","line":"                    \\\\  mov 73, %%g1"},
{"lineNum":" 1176","line":"                    \\\\  mov %[ptr], %%o0"},
{"lineNum":" 1177","line":"                    \\\\  mov %[len], %%o1"},
{"lineNum":" 1178","line":"                    \\\\  # Flush register window contents to prevent background"},
{"lineNum":" 1179","line":"                    \\\\  # memory access before unmapping the stack."},
{"lineNum":" 1180","line":"                    \\\\  flushw"},
{"lineNum":" 1181","line":"                    \\\\  t 0x6d"},
{"lineNum":" 1182","line":"                    \\\\  mov 1, %%g1"},
{"lineNum":" 1183","line":"                    \\\\  mov 1, %%o0"},
{"lineNum":" 1184","line":"                    \\\\  t 0x6d"},
{"lineNum":" 1185","line":"                    :"},
{"lineNum":" 1186","line":"                    : [ptr] \"r\" (@intFromPtr(self.mapped.ptr)),"},
{"lineNum":" 1187","line":"                      [len] \"r\" (self.mapped.len),"},
{"lineNum":" 1188","line":"                    : \"memory\""},
{"lineNum":" 1189","line":"                ),"},
{"lineNum":" 1190","line":"                else => |cpu_arch| @compileError(\"Unsupported linux arch: \" ++ @tagName(cpu_arch)),"},
{"lineNum":" 1191","line":"            }"},
{"lineNum":" 1192","line":"            unreachable;"},
{"lineNum":" 1193","line":"        }"},
{"lineNum":" 1194","line":"    };"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    fn spawn(config: SpawnConfig, comptime f: anytype, args: anytype) !Impl {"},
{"lineNum":" 1197","line":"        const page_size = std.mem.page_size;"},
{"lineNum":" 1198","line":"        const Args = @TypeOf(args);"},
{"lineNum":" 1199","line":"        const Instance = struct {"},
{"lineNum":" 1200","line":"            fn_args: Args,"},
{"lineNum":" 1201","line":"            thread: ThreadCompletion,"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"            fn entryFn(raw_arg: usize) callconv(.C) u8 {"},
{"lineNum":" 1204","line":"                const self = @as(*@This(), @ptrFromInt(raw_arg));"},
{"lineNum":" 1205","line":"                defer switch (self.thread.completion.swap(.completed, .SeqCst)) {"},
{"lineNum":" 1206","line":"                    .running => {},"},
{"lineNum":" 1207","line":"                    .completed => unreachable,"},
{"lineNum":" 1208","line":"                    .detached => self.thread.freeAndExit(),"},
{"lineNum":" 1209","line":"                };"},
{"lineNum":" 1210","line":"                return callFn(f, self.fn_args);"},
{"lineNum":" 1211","line":"            }"},
{"lineNum":" 1212","line":"        };"},
{"lineNum":" 1213","line":""},
{"lineNum":" 1214","line":"        var guard_offset: usize = undefined;"},
{"lineNum":" 1215","line":"        var stack_offset: usize = undefined;"},
{"lineNum":" 1216","line":"        var tls_offset: usize = undefined;"},
{"lineNum":" 1217","line":"        var instance_offset: usize = undefined;"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"        const map_bytes = blk: {"},
{"lineNum":" 1220","line":"            var bytes: usize = page_size;"},
{"lineNum":" 1221","line":"            guard_offset = bytes;"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"            bytes += @max(page_size, config.stack_size);"},
{"lineNum":" 1224","line":"            bytes = std.mem.alignForward(usize, bytes, page_size);"},
{"lineNum":" 1225","line":"            stack_offset = bytes;"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"            bytes = std.mem.alignForward(usize, bytes, linux.tls.tls_image.alloc_align);"},
{"lineNum":" 1228","line":"            tls_offset = bytes;"},
{"lineNum":" 1229","line":"            bytes += linux.tls.tls_image.alloc_size;"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"            bytes = std.mem.alignForward(usize, bytes, @alignOf(Instance));"},
{"lineNum":" 1232","line":"            instance_offset = bytes;"},
{"lineNum":" 1233","line":"            bytes += @sizeOf(Instance);"},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"            bytes = std.mem.alignForward(usize, bytes, page_size);"},
{"lineNum":" 1236","line":"            break :blk bytes;"},
{"lineNum":" 1237","line":"        };"},
{"lineNum":" 1238","line":""},
{"lineNum":" 1239","line":"        // map all memory needed without read/write permissions"},
{"lineNum":" 1240","line":"        // to avoid committing the whole region right away"},
{"lineNum":" 1241","line":"        // anonymous mapping ensures file descriptor limits are not exceeded"},
{"lineNum":" 1242","line":"        const mapped = os.mmap("},
{"lineNum":" 1243","line":"            null,"},
{"lineNum":" 1244","line":"            map_bytes,"},
{"lineNum":" 1245","line":"            os.PROT.NONE,"},
{"lineNum":" 1246","line":"            os.MAP.PRIVATE | os.MAP.ANONYMOUS,"},
{"lineNum":" 1247","line":"            -1,"},
{"lineNum":" 1248","line":"            0,"},
{"lineNum":" 1249","line":"        ) catch |err| switch (err) {"},
{"lineNum":" 1250","line":"            error.MemoryMappingNotSupported => unreachable,"},
{"lineNum":" 1251","line":"            error.AccessDenied => unreachable,"},
{"lineNum":" 1252","line":"            error.PermissionDenied => unreachable,"},
{"lineNum":" 1253","line":"            error.ProcessFdQuotaExceeded => unreachable,"},
{"lineNum":" 1254","line":"            error.SystemFdQuotaExceeded => unreachable,"},
{"lineNum":" 1255","line":"            else => |e| return e,"},
{"lineNum":" 1256","line":"        };"},
{"lineNum":" 1257","line":"        assert(mapped.len >= map_bytes);"},
{"lineNum":" 1258","line":"        errdefer os.munmap(mapped);"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"        // map everything but the guard page as read/write"},
{"lineNum":" 1261","line":"        os.mprotect("},
{"lineNum":" 1262","line":"            @alignCast(mapped[guard_offset..]),"},
{"lineNum":" 1263","line":"            os.PROT.READ | os.PROT.WRITE,"},
{"lineNum":" 1264","line":"        ) catch |err| switch (err) {"},
{"lineNum":" 1265","line":"            error.AccessDenied => unreachable,"},
{"lineNum":" 1266","line":"            else => |e| return e,"},
{"lineNum":" 1267","line":"        };"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"        // Prepare the TLS segment and prepare a user_desc struct when needed on x86"},
{"lineNum":" 1270","line":"        var tls_ptr = os.linux.tls.prepareTLS(mapped[tls_offset..]);"},
{"lineNum":" 1271","line":"        var user_desc: if (target.cpu.arch == .x86) os.linux.user_desc else void = undefined;"},
{"lineNum":" 1272","line":"        if (target.cpu.arch == .x86) {"},
{"lineNum":" 1273","line":"            defer tls_ptr = @intFromPtr(&user_desc);"},
{"lineNum":" 1274","line":"            user_desc = .{"},
{"lineNum":" 1275","line":"                .entry_number = os.linux.tls.tls_image.gdt_entry_number,"},
{"lineNum":" 1276","line":"                .base_addr = tls_ptr,"},
{"lineNum":" 1277","line":"                .limit = 0xfffff,"},
{"lineNum":" 1278","line":"                .flags = .{"},
{"lineNum":" 1279","line":"                    .seg_32bit = 1,"},
{"lineNum":" 1280","line":"                    .contents = 0, // Data"},
{"lineNum":" 1281","line":"                    .read_exec_only = 0,"},
{"lineNum":" 1282","line":"                    .limit_in_pages = 1,"},
{"lineNum":" 1283","line":"                    .seg_not_present = 0,"},
{"lineNum":" 1284","line":"                    .useable = 1,"},
{"lineNum":" 1285","line":"                },"},
{"lineNum":" 1286","line":"            };"},
{"lineNum":" 1287","line":"        }"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"        const instance: *Instance = @ptrCast(@alignCast(&mapped[instance_offset]));"},
{"lineNum":" 1290","line":"        instance.* = .{"},
{"lineNum":" 1291","line":"            .fn_args = args,"},
{"lineNum":" 1292","line":"            .thread = .{ .mapped = mapped },"},
{"lineNum":" 1293","line":"        };"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"        const flags: u32 = linux.CLONE.THREAD | linux.CLONE.DETACHED |"},
{"lineNum":" 1296","line":"            linux.CLONE.VM | linux.CLONE.FS | linux.CLONE.FILES |"},
{"lineNum":" 1297","line":"            linux.CLONE.PARENT_SETTID | linux.CLONE.CHILD_CLEARTID |"},
{"lineNum":" 1298","line":"            linux.CLONE.SIGHAND | linux.CLONE.SYSVSEM | linux.CLONE.SETTLS;"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"        switch (linux.getErrno(linux.clone("},
{"lineNum":" 1301","line":"            Instance.entryFn,"},
{"lineNum":" 1302","line":"            @intFromPtr(&mapped[stack_offset]),"},
{"lineNum":" 1303","line":"            flags,"},
{"lineNum":" 1304","line":"            @intFromPtr(instance),"},
{"lineNum":" 1305","line":"            &instance.thread.parent_tid,"},
{"lineNum":" 1306","line":"            tls_ptr,"},
{"lineNum":" 1307","line":"            &instance.thread.child_tid.value,"},
{"lineNum":" 1308","line":"        ))) {"},
{"lineNum":" 1309","line":"            .SUCCESS => return Impl{ .thread = &instance.thread },"},
{"lineNum":" 1310","line":"            .AGAIN => return error.ThreadQuotaExceeded,"},
{"lineNum":" 1311","line":"            .INVAL => unreachable,"},
{"lineNum":" 1312","line":"            .NOMEM => return error.SystemResources,"},
{"lineNum":" 1313","line":"            .NOSPC => unreachable,"},
{"lineNum":" 1314","line":"            .PERM => unreachable,"},
{"lineNum":" 1315","line":"            .USERS => unreachable,"},
{"lineNum":" 1316","line":"            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":" 1317","line":"        }"},
{"lineNum":" 1318","line":"    }"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"    fn getHandle(self: Impl) ThreadHandle {"},
{"lineNum":" 1321","line":"        return self.thread.parent_tid;"},
{"lineNum":" 1322","line":"    }"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"    fn detach(self: Impl) void {"},
{"lineNum":" 1325","line":"        switch (self.thread.completion.swap(.detached, .SeqCst)) {"},
{"lineNum":" 1326","line":"            .running => {},"},
{"lineNum":" 1327","line":"            .completed => self.join(),"},
{"lineNum":" 1328","line":"            .detached => unreachable,"},
{"lineNum":" 1329","line":"        }"},
{"lineNum":" 1330","line":"    }"},
{"lineNum":" 1331","line":""},
{"lineNum":" 1332","line":"    fn join(self: Impl) void {"},
{"lineNum":" 1333","line":"        defer os.munmap(self.thread.mapped);"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"        var spin: u8 = 10;"},
{"lineNum":" 1336","line":"        while (true) {"},
{"lineNum":" 1337","line":"            const tid = self.thread.child_tid.load(.SeqCst);"},
{"lineNum":" 1338","line":"            if (tid == 0) {"},
{"lineNum":" 1339","line":"                break;"},
{"lineNum":" 1340","line":"            }"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"            if (spin > 0) {"},
{"lineNum":" 1343","line":"                spin -= 1;"},
{"lineNum":" 1344","line":"                std.atomic.spinLoopHint();"},
{"lineNum":" 1345","line":"                continue;"},
{"lineNum":" 1346","line":"            }"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"            switch (linux.getErrno(linux.futex_wait("},
{"lineNum":" 1349","line":"                &self.thread.child_tid.value,"},
{"lineNum":" 1350","line":"                linux.FUTEX.WAIT,"},
{"lineNum":" 1351","line":"                tid,"},
{"lineNum":" 1352","line":"                null,"},
{"lineNum":" 1353","line":"            ))) {"},
{"lineNum":" 1354","line":"                .SUCCESS => continue,"},
{"lineNum":" 1355","line":"                .INTR => continue,"},
{"lineNum":" 1356","line":"                .AGAIN => continue,"},
{"lineNum":" 1357","line":"                else => unreachable,"},
{"lineNum":" 1358","line":"            }"},
{"lineNum":" 1359","line":"        }"},
{"lineNum":" 1360","line":"    }"},
{"lineNum":" 1361","line":"};"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"fn testThreadName(thread: *Thread) !void {"},
{"lineNum":" 1364","line":"    const testCases = &[_][]const u8{"},
{"lineNum":" 1365","line":"        \"mythread\","},
{"lineNum":" 1366","line":"        \"b\" ** max_name_len,"},
{"lineNum":" 1367","line":"    };"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"    inline for (testCases) |tc| {"},
{"lineNum":" 1370","line":"        try thread.setName(tc);"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"        var name_buffer: [max_name_len:0]u8 = undefined;"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"        const name = try thread.getName(&name_buffer);"},
{"lineNum":" 1375","line":"        if (name) |value| {"},
{"lineNum":" 1376","line":"            try std.testing.expectEqual(tc.len, value.len);"},
{"lineNum":" 1377","line":"            try std.testing.expectEqualStrings(tc, value);"},
{"lineNum":" 1378","line":"        }"},
{"lineNum":" 1379","line":"    }"},
{"lineNum":" 1380","line":"}"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"test \"setName, getName\" {"},
{"lineNum":" 1383","line":"    if (builtin.single_threaded) return error.SkipZigTest;"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"    const Context = struct {"},
{"lineNum":" 1386","line":"        start_wait_event: ResetEvent = .{},"},
{"lineNum":" 1387","line":"        test_done_event: ResetEvent = .{},"},
{"lineNum":" 1388","line":"        thread_done_event: ResetEvent = .{},"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"        done: std.atomic.Atomic(bool) = std.atomic.Atomic(bool).init(false),"},
{"lineNum":" 1391","line":"        thread: Thread = undefined,"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"        pub fn run(ctx: *@This()) !void {"},
{"lineNum":" 1394","line":"            // Wait for the main thread to have set the thread field in the context."},
{"lineNum":" 1395","line":"            ctx.start_wait_event.wait();"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"            switch (target.os.tag) {"},
{"lineNum":" 1398","line":"                .windows => testThreadName(&ctx.thread) catch |err| switch (err) {"},
{"lineNum":" 1399","line":"                    error.Unsupported => return error.SkipZigTest,"},
{"lineNum":" 1400","line":"                    else => return err,"},
{"lineNum":" 1401","line":"                },"},
{"lineNum":" 1402","line":"                else => try testThreadName(&ctx.thread),"},
{"lineNum":" 1403","line":"            }"},
{"lineNum":" 1404","line":""},
{"lineNum":" 1405","line":"            // Signal our test is done"},
{"lineNum":" 1406","line":"            ctx.test_done_event.set();"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"            // wait for the thread to property exit"},
{"lineNum":" 1409","line":"            ctx.thread_done_event.wait();"},
{"lineNum":" 1410","line":"        }"},
{"lineNum":" 1411","line":"    };"},
{"lineNum":" 1412","line":""},
{"lineNum":" 1413","line":"    var context = Context{};"},
{"lineNum":" 1414","line":"    var thread = try spawn(.{}, Context.run, .{&context});"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"    context.thread = thread;"},
{"lineNum":" 1417","line":"    context.start_wait_event.set();"},
{"lineNum":" 1418","line":"    context.test_done_event.wait();"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"    switch (target.os.tag) {"},
{"lineNum":" 1421","line":"        .macos, .ios, .watchos, .tvos => {"},
{"lineNum":" 1422","line":"            const res = thread.setName(\"foobar\");"},
{"lineNum":" 1423","line":"            try std.testing.expectError(error.Unsupported, res);"},
{"lineNum":" 1424","line":"        },"},
{"lineNum":" 1425","line":"        .windows => testThreadName(&thread) catch |err| switch (err) {"},
{"lineNum":" 1426","line":"            error.Unsupported => return error.SkipZigTest,"},
{"lineNum":" 1427","line":"            else => return err,"},
{"lineNum":" 1428","line":"        },"},
{"lineNum":" 1429","line":"        else => try testThreadName(&thread),"},
{"lineNum":" 1430","line":"    }"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"    context.thread_done_event.set();"},
{"lineNum":" 1433","line":"    thread.join();"},
{"lineNum":" 1434","line":"}"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"test {"},
{"lineNum":" 1437","line":"    // Doesn\'t use testing.refAllDecls() since that would pull in the compileError spinLoopHint."},
{"lineNum":" 1438","line":"    _ = Futex;"},
{"lineNum":" 1439","line":"    _ = ResetEvent;"},
{"lineNum":" 1440","line":"    _ = Mutex;"},
{"lineNum":" 1441","line":"    _ = Semaphore;"},
{"lineNum":" 1442","line":"    _ = Condition;"},
{"lineNum":" 1443","line":"    _ = RwLock;"},
{"lineNum":" 1444","line":"}"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"fn testIncrementNotify(value: *usize, event: *ResetEvent) void {"},
{"lineNum":" 1447","line":"    value.* += 1;"},
{"lineNum":" 1448","line":"    event.set();"},
{"lineNum":" 1449","line":"}"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"test \"Thread.join\" {"},
{"lineNum":" 1452","line":"    if (builtin.single_threaded) return error.SkipZigTest;"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"    var value: usize = 0;"},
{"lineNum":" 1455","line":"    var event = ResetEvent{};"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"    const thread = try Thread.spawn(.{}, testIncrementNotify, .{ &value, &event });"},
{"lineNum":" 1458","line":"    thread.join();"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"    try std.testing.expectEqual(value, 1);"},
{"lineNum":" 1461","line":"}"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"test \"Thread.detach\" {"},
{"lineNum":" 1464","line":"    if (builtin.single_threaded) return error.SkipZigTest;"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"    var value: usize = 0;"},
{"lineNum":" 1467","line":"    var event = ResetEvent{};"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"    const thread = try Thread.spawn(.{}, testIncrementNotify, .{ &value, &event });"},
{"lineNum":" 1470","line":"    thread.detach();"},
{"lineNum":" 1471","line":""},
{"lineNum":" 1472","line":"    event.wait();"},
{"lineNum":" 1473","line":"    try std.testing.expectEqual(value, 1);"},
{"lineNum":" 1474","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 7, "covered" : 7,};
var merged_data = [];
