var data = {lines:[
{"lineNum":"    1","line":"/// This Lib is a part of the Rust Core Library (idk copilot wrote that)"},
{"lineNum":"    2","line":"/// It is designed for delaying error and other logging. I decided to write it"},
{"lineNum":"    3","line":"/// when type checking got complicated."},
{"lineNum":"    4","line":"/// It uses a global allocator and message log to store messages until a call to print"},
{"lineNum":"    5","line":"const Self = @This();"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"const std = @import(\"std\");"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"const Level = enum {"},
{"lineNum":"   10","line":"    Info,"},
{"lineNum":"   11","line":"    Err,"},
{"lineNum":"   12","line":"    Warn,"},
{"lineNum":"   13","line":"};"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"const Msg = struct {"},
{"lineNum":"   16","line":"    level: Level,"},
{"lineNum":"   17","line":"    msg: []const u8,"},
{"lineNum":"   18","line":"};"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"const alloc = std.heap.page_allocator;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"var msgs = std.ArrayList(Msg).init(alloc);"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"fn logInner(level: Level, comptime msg: []const u8, vars: anytype) void {","class":"linePartCov","hits":"19","order":"1403","possible_hits":"97",},
{"lineNum":"   25","line":"    const slice = std.fmt.allocPrint(alloc, msg, vars) catch |e| {","class":"linePartCov","hits":"38","order":"1404","possible_hits":"194",},
{"lineNum":"   26","line":"        std.debug.print(\"Failed to format message: {}\\n\", .{e});","class":"lineNoCov","hits":"0","possible_hits":"97",},
{"lineNum":"   27","line":"        return;","class":"linePartCov","hits":"19","order":"1447","possible_hits":"194",},
{"lineNum":"   28","line":"    };"},
{"lineNum":"   29","line":"    msgs.append(Msg{ .msg = slice, .level = level }) catch |e| {","class":"linePartCov","hits":"38","order":"1448","possible_hits":"194",},
{"lineNum":"   30","line":"        std.debug.print(\"Failed to append message: {}\\n\", .{e});","class":"lineNoCov","hits":"0","possible_hits":"97",},
{"lineNum":"   31","line":"        return;","class":"linePartCov","hits":"19","order":"1449","possible_hits":"194",},
{"lineNum":"   32","line":"    };"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":"/// Log a message with the `info` level. Fails silently if the message can\'t be formatted."},
{"lineNum":"   35","line":"pub fn info(comptime msg: []const u8, vars: anytype) void {","class":"lineCov","hits":"6","order":"1401","possible_hits":"6",},
{"lineNum":"   36","line":"    logInner(Level.Info, msg, vars);","class":"lineCov","hits":"6","order":"1402","possible_hits":"6",},
{"lineNum":"   37","line":"}"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"pub fn err(comptime msg: []const u8, vars: anytype) void {","class":"linePartCov","hits":"12","order":"1524","possible_hits":"90",},
{"lineNum":"   40","line":"    logInner(Level.Err, msg, vars);","class":"linePartCov","hits":"12","order":"1525","possible_hits":"90",},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"pub fn warn(comptime msg: []const u8, vars: anytype) void {","class":"lineCov","hits":"1","order":"3319","possible_hits":"1",},
{"lineNum":"   44","line":"    logInner(Level.Warn, msg, vars);","class":"lineCov","hits":"1","order":"3320","possible_hits":"1",},
{"lineNum":"   45","line":"}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"/// prints all messages in the log"},
{"lineNum":"   48","line":"pub fn print() void {","class":"lineCov","hits":"1","order":"1310","possible_hits":"1",},
{"lineNum":"   49","line":"    for (msgs.items) |msg| {","class":"linePartCov","hits":"2","order":"1311","possible_hits":"3",},
{"lineNum":"   50","line":"        switch (msg.level) {","class":"linePartCov","hits":"1","order":"1312","possible_hits":"3",},
{"lineNum":"   51","line":"            .Info => std.log.info(\"{s}\", .{msg.msg}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"            .Err => std.log.err(\"{s}\", .{msg.msg}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"            .Warn => std.log.warn(\"{s}\", .{msg.msg}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"        }"},
{"lineNum":"   55","line":"    }"},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"/// clears all allocated messages and empties the list"},
{"lineNum":"   59","line":"/// but does not destroy the list itself"},
{"lineNum":"   60","line":"fn clear() void {"},
{"lineNum":"   61","line":"    for (msgs.items()) |msg| {"},
{"lineNum":"   62","line":"        alloc.destroy(msg.msg);"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"    msgs.clearAndFree();"},
{"lineNum":"   65","line":"}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"/// Deinitializes the log, destroying all messages and the list itself"},
{"lineNum":"   68","line":"pub fn deinit() void {"},
{"lineNum":"   69","line":"    for (msgs.items()) |msg| {"},
{"lineNum":"   70","line":"        alloc.destroy(msg.msg);"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":"    msgs.deinit();"},
{"lineNum":"   73","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 19, "covered" : 14,};
var merged_data = [];
