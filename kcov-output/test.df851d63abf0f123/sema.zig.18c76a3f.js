var data = {lines:[
{"lineNum":"    1","line":"// AST (possibly borqed) -> AST (not borqed)"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"const std = @import(\"std\");"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"const Ast = @import(\"ast.zig\");"},
{"lineNum":"    6","line":"const utils = @import(\"utils.zig\");"},
{"lineNum":"    7","line":"const log = @import(\"log.zig\");"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"const SemaError = error{"},
{"lineNum":"   10","line":"    NoMain,"},
{"lineNum":"   11","line":"    InvalidReturnPath,"},
{"lineNum":"   12","line":"};"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"const TypeError = error{"},
{"lineNum":"   15","line":"    InvalidType,"},
{"lineNum":"   16","line":"    InvalidFunctionCall,"},
{"lineNum":"   17","line":"    OutOfBounds,"},
{"lineNum":"   18","line":"    OutOfMemory,"},
{"lineNum":"   19","line":"    ReturnTypeNotVoid,"},
{"lineNum":"   20","line":"    InvalidReturnType,"},
{"lineNum":"   21","line":"    InvalidAssignmentType,"},
{"lineNum":"   22","line":"    InvalidReadExptedTypeInt,"},
{"lineNum":"   23","line":"    InvalidAssignmentNoDeclaration,"},
{"lineNum":"   24","line":"    StructHasNoMember,"},
{"lineNum":"   25","line":"    BinaryOperationTypeMismatch,"},
{"lineNum":"   26","line":"    InvalidTypeExptectedInt,"},
{"lineNum":"   27","line":"    InvalidTypeExpectedBool,"},
{"lineNum":"   28","line":"};"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"const MAIN: []const u8 = \"main\";"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"fn ensureHasMain(ast: *const Ast) SemaError!void {","class":"lineCov","hits":"1","order":"1197","possible_hits":"1",},
{"lineNum":"   33","line":"    var funcs = ast.iterFuncs();","class":"lineCov","hits":"1","order":"1198","possible_hits":"1",},
{"lineNum":"   34","line":"    while (funcs.next()) |func| {","class":"lineCov","hits":"2","order":"1214","possible_hits":"2",},
{"lineNum":"   35","line":"        const name = func.getName(ast);","class":"lineCov","hits":"1","order":"1227","possible_hits":"1",},
{"lineNum":"   36","line":"        if (std.mem.eql(u8, name, MAIN)) {","class":"lineCov","hits":"1","order":"1233","possible_hits":"1",},
{"lineNum":"   37","line":"            return;","class":"lineCov","hits":"2","order":"1234","possible_hits":"2",},
{"lineNum":"   38","line":"        }"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":"    return error.NoMain;","class":"lineCov","hits":"1","order":"1236","possible_hits":"1",},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"fn allFunctionsHaveValidReturnPaths(ast: *const Ast) !void {","class":"lineCov","hits":"1","order":"1547","possible_hits":"1",},
{"lineNum":"   44","line":"    var funcs = ast.iterFuncs();","class":"lineCov","hits":"1","order":"1548","possible_hits":"1",},
{"lineNum":"   45","line":"    while (funcs.next()) |func| {","class":"lineCov","hits":"2","order":"1549","possible_hits":"2",},
{"lineNum":"   46","line":"        try allReturnPathsHaveReturnType(ast, func);","class":"lineCov","hits":"2","order":"1550","possible_hits":"2",},
{"lineNum":"   47","line":"        try allReturnPathsExist(ast, func);","class":"lineCov","hits":"3","order":"1609","possible_hits":"3",},
{"lineNum":"   48","line":"    }"},
{"lineNum":"   49","line":"    return;","class":"lineCov","hits":"1","order":"1668","possible_hits":"1",},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"/// note that the ast must be sliced to start at some function for this function"},
{"lineNum":"   53","line":"/// to work"},
{"lineNum":"   54","line":"fn allReturnPathsHaveReturnType(ast: *const Ast, func: Ast.Node.Kind.FunctionType) SemaError!void {","class":"lineCov","hits":"1","order":"1551","possible_hits":"1",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    // Get the name"},
{"lineNum":"   57","line":"    const funcName = func.getName(ast);","class":"lineCov","hits":"1","order":"1552","possible_hits":"1",},
{"lineNum":"   58","line":"    // Get the return type"},
{"lineNum":"   59","line":"    const returnType = func.getReturnType(ast).?;","class":"lineCov","hits":"2","order":"1553","possible_hits":"2",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    // Get all return expressions"},
{"lineNum":"   62","line":"    // This is in the form of there being the first and last expression within the statment list of the functio"},
{"lineNum":"   63","line":"    var returnExprs = func.getBody(ast).iterReturns(ast);","class":"lineCov","hits":"1","order":"1569","possible_hits":"1",},
{"lineNum":"   64","line":"    var checked: usize = 0;","class":"lineCov","hits":"1","order":"1581","possible_hits":"1",},
{"lineNum":"   65","line":"    while (returnExprs.next()) |returnExpr| {","class":"lineCov","hits":"2","order":"1582","possible_hits":"2",},
{"lineNum":"   66","line":"        checked += 1;","class":"linePartCov","hits":"1","order":"1590","possible_hits":"2",},
{"lineNum":"   67","line":"        if (returnExpr.expr == null and returnType == .Void) {","class":"lineCov","hits":"2","order":"1591","possible_hits":"2",},
{"lineNum":"   68","line":"            // void return valid for void function"},
{"lineNum":"   69","line":"            continue;","class":"lineCov","hits":"1","order":"1592","possible_hits":"1",},
{"lineNum":"   70","line":"        }"},
{"lineNum":"   71","line":"        // FIXME: this may or may not be invalid."},
{"lineNum":"   72","line":"        if (returnExpr.expr != null and returnType == .Void) {","class":"lineCov","hits":"2","order":"1594","possible_hits":"2",},
{"lineNum":"   73","line":"            // void return invalid for non-void function"},
{"lineNum":"   74","line":"            // FIXME: determine if this an error or a warning that the returned value will not be used?"},
{"lineNum":"   75","line":"            log.err(\"Expected function {s} to return `void`, but found Return expression: {any}\\n\", .{ funcName, returnExpr });","class":"lineCov","hits":"1","order":"1595","possible_hits":"1",},
{"lineNum":"   76","line":"            return SemaError.InvalidReturnPath;","class":"lineCov","hits":"1","order":"1599","possible_hits":"1",},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        if (returnExpr.expr == null and returnType != .Void) {","class":"lineCov","hits":"2","order":"1692","possible_hits":"2",},
{"lineNum":"   80","line":"            log.err(\"Expected function {s} to return {any}, but found Return type: {any}\\n\", .{ funcName, returnExpr, returnType });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            return SemaError.InvalidReturnPath;","class":"linePartCov","hits":"3","order":"1593","possible_hits":"4",},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        // TODO: FIXME"},
{"lineNum":"   85","line":"        // if (returnExpr.expr) |expr| {"},
{"lineNum":"   86","line":"        //     if (returnType) |retTy| {"},
{"lineNum":"   87","line":"        //         _ = expr;"},
{"lineNum":"   88","line":"        //         _ = retTy;"},
{"lineNum":"   89","line":"        //         utils.todo(\"Checking expression types not implemented\\n\", .{});"},
{"lineNum":"   90","line":"        //     } else unreachable;"},
{"lineNum":"   91","line":"        // } else unreachable;"},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":"    return;","class":"lineCov","hits":"1","order":"1608","possible_hits":"1",},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"fn allReturnPathsExistInner(ast: *const Ast, start: usize, end: usize) bool {","class":"lineCov","hits":"1","order":"1619","possible_hits":"1",},
{"lineNum":"   97","line":"    // TODO:"},
{"lineNum":"   98","line":"    // decend the tree if we hit a conditional call a function that checks if the conditional"},
{"lineNum":"   99","line":"    // has a return statement, if both sides return then we are good."},
{"lineNum":"  100","line":"    // otherwise continue decending for a fall through."},
{"lineNum":"  101","line":"    // if there is no final return statment throw an error"},
{"lineNum":"  102","line":"    var result = false;","class":"lineCov","hits":"1","order":"1620","possible_hits":"1",},
{"lineNum":"  103","line":"    var cursor = start;","class":"lineCov","hits":"1","order":"1621","possible_hits":"1",},
{"lineNum":"  104","line":"    while (cursor < end) {","class":"lineCov","hits":"1","order":"1622","possible_hits":"1",},
{"lineNum":"  105","line":"        const i = cursor;","class":"lineCov","hits":"1","order":"1623","possible_hits":"1",},
{"lineNum":"  106","line":"        cursor += 1;","class":"linePartCov","hits":"1","order":"1624","possible_hits":"2",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        const node = ast.get(i);","class":"lineCov","hits":"1","order":"1625","possible_hits":"1",},
{"lineNum":"  109","line":"        if (node.kind == .Return) {","class":"lineCov","hits":"1","order":"1626","possible_hits":"1",},
{"lineNum":"  110","line":"            // found return, can ignore rest of block"},
{"lineNum":"  111","line":"            result = true;","class":"lineCov","hits":"1","order":"1644","possible_hits":"1",},
{"lineNum":"  112","line":"            break;","class":"lineCov","hits":"1","order":"1645","possible_hits":"1",},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":"        if (node.kind != .ConditionalIf) {","class":"lineCov","hits":"1","order":"1627","possible_hits":"1",},
{"lineNum":"  115","line":"            // we don\'t care about non conditional nodes"},
{"lineNum":"  116","line":"            continue;","class":"lineCov","hits":"1","order":"1628","possible_hits":"1",},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        var returnsInThenCase = true;","class":"lineCov","hits":"1","order":"1630","possible_hits":"1",},
{"lineNum":"  120","line":"        // defaults to true in case there is no else case"},
{"lineNum":"  121","line":"        var returnsInElseCase = true;","class":"lineCov","hits":"1","order":"1631","possible_hits":"1",},
{"lineNum":"  122","line":"        var returnsInTrailing = false;","class":"lineCov","hits":"1","order":"1632","possible_hits":"1",},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        const ifNode = node.kind.ConditionalIf;","class":"lineCov","hits":"3","order":"1633","possible_hits":"3",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"        _ = returnsInTrailing;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"        var trailingNodesStart: usize = undefined;","class":"lineCov","hits":"1","order":"1634","possible_hits":"1",},
{"lineNum":"  129","line":"        const trailingNodesEnd = end;","class":"lineCov","hits":"1","order":"1635","possible_hits":"1",},
{"lineNum":"  130","line":"        var fallthroughReq = false;","class":"lineCov","hits":"1","order":"1636","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"        if (ifNode.isIfElse(ast)) {","class":"lineCov","hits":"1","order":"1637","possible_hits":"1",},
{"lineNum":"  133","line":"            const ifElseNode = ast.get(ifNode.block).kind.ConditionalIfElse;","class":"lineCov","hits":"3","order":"1642","possible_hits":"3",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            returnsInThenCase = allReturnPathsExistInner(ast, ifElseNode.ifBlock, ifElseNode.elseBlock);","class":"lineCov","hits":"1","order":"1643","possible_hits":"1",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"            // now default returnsInElse to false because there is an else block"},
{"lineNum":"  138","line":"            returnsInElseCase = false;","class":"lineCov","hits":"1","order":"1647","possible_hits":"1",},
{"lineNum":"  139","line":"            const elseBlockRange = ast.get(ifElseNode.elseBlock).kind.Block.range(ast);","class":"lineCov","hits":"3","order":"1648","possible_hits":"3",},
{"lineNum":"  140","line":"            if (elseBlockRange) |range| {","class":"lineCov","hits":"2","order":"1656","possible_hits":"2",},
{"lineNum":"  141","line":"                const elseBlockStart = range[0];","class":"lineCov","hits":"1","order":"1657","possible_hits":"1",},
{"lineNum":"  142","line":"                const elseBlockEnd = range[1] + 1;","class":"linePartCov","hits":"1","order":"1658","possible_hits":"2",},
{"lineNum":"  143","line":"                returnsInElseCase = allReturnPathsExistInner(ast, elseBlockStart, elseBlockEnd);","class":"lineCov","hits":"1","order":"1659","possible_hits":"1",},
{"lineNum":"  144","line":"                fallthroughReq = !returnsInElseCase;","class":"lineCov","hits":"1","order":"1660","possible_hits":"1",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"                trailingNodesStart = elseBlockEnd + 1;","class":"lineCov","hits":"1","order":"1661","possible_hits":"1",},
{"lineNum":"  147","line":"            } else {"},
{"lineNum":"  148","line":"                trailingNodesStart = ifElseNode.elseBlock + 1;","class":"linePartCov","hits":"1","order":"1662","possible_hits":"3",},
{"lineNum":"  149","line":"            }"},
{"lineNum":"  150","line":"        } else {"},
{"lineNum":"  151","line":"            fallthroughReq = true;","class":"lineCov","hits":"1","order":"1703","possible_hits":"1",},
{"lineNum":"  152","line":"            const ifNodeBlock = ast.get(ifNode.block).kind.Block;","class":"lineCov","hits":"3","order":"1704","possible_hits":"3",},
{"lineNum":"  153","line":"            const ifNodeBlockRange = ifNodeBlock.range(ast);","class":"lineCov","hits":"1","order":"1705","possible_hits":"1",},
{"lineNum":"  154","line":"            if (ifNodeBlockRange) |range| {","class":"lineCov","hits":"2","order":"1706","possible_hits":"2",},
{"lineNum":"  155","line":"                const ifNodeStart = range[0];","class":"lineCov","hits":"1","order":"1707","possible_hits":"1",},
{"lineNum":"  156","line":"                const ifNodeEnd = range[1] + 1;","class":"linePartCov","hits":"1","order":"1708","possible_hits":"2",},
{"lineNum":"  157","line":"                returnsInThenCase = allReturnPathsExistInner(ast, ifNodeStart, ifNodeEnd);","class":"lineCov","hits":"1","order":"1709","possible_hits":"1",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"                trailingNodesStart = ifNodeEnd;","class":"lineCov","hits":"1","order":"1710","possible_hits":"1",},
{"lineNum":"  160","line":"            } else {"},
{"lineNum":"  161","line":"                returnsInThenCase = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"                trailingNodesStart = ifNode.block + 1;","class":"linePartCov","hits":"1","order":"1711","possible_hits":"3",},
{"lineNum":"  163","line":"            }"},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":"        const returnsInTrailingNodes = allReturnPathsExistInner(ast, trailingNodesStart, trailingNodesEnd);","class":"lineCov","hits":"1","order":"1663","possible_hits":"1",},
{"lineNum":"  166","line":"        // print the trailing nodes"},
{"lineNum":"  167","line":"        if (fallthroughReq) {","class":"lineCov","hits":"1","order":"1664","possible_hits":"1",},
{"lineNum":"  168","line":"            result = returnsInTrailingNodes;","class":"lineCov","hits":"1","order":"1712","possible_hits":"1",},
{"lineNum":"  169","line":"        } else {"},
{"lineNum":"  170","line":"            result = (returnsInThenCase and returnsInElseCase);","class":"lineCov","hits":"1","order":"1665","possible_hits":"1",},
{"lineNum":"  171","line":"        }"},
{"lineNum":"  172","line":"        break;","class":"lineCov","hits":"3","order":"1629","possible_hits":"3",},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":"    return result;","class":"lineCov","hits":"1","order":"1646","possible_hits":"1",},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"fn allReturnPathsExist(ast: *const Ast, func: Ast.Node.Kind.FunctionType) SemaError!void {","class":"lineCov","hits":"1","order":"1610","possible_hits":"1",},
{"lineNum":"  178","line":"    const returnType = func.getReturnType(ast).?;","class":"lineCov","hits":"2","order":"1611","possible_hits":"2",},
{"lineNum":"  179","line":"    const statementList = func.getBody(ast).getStatementList();","class":"lineCov","hits":"1","order":"1612","possible_hits":"1",},
{"lineNum":"  180","line":"    if (returnType == .Void and statementList == null) {","class":"lineCov","hits":"2","order":"1615","possible_hits":"2",},
{"lineNum":"  181","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":"    const statList = statementList.?;","class":"lineCov","hits":"3","order":"1616","possible_hits":"3",},
{"lineNum":"  184","line":"    const funcEnd = ast.findIndex(.FunctionEnd, statList).?;","class":"lineCov","hits":"3","order":"1617","possible_hits":"3",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    const ok = allReturnPathsExistInner(ast, statList, funcEnd);","class":"lineCov","hits":"1","order":"1618","possible_hits":"1",},
{"lineNum":"  187","line":"    if (!ok) {","class":"lineCov","hits":"1","order":"1666","possible_hits":"1",},
{"lineNum":"  188","line":"        return SemaError.InvalidReturnPath;","class":"lineCov","hits":"1","order":"1667","possible_hits":"1",},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":"}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"pub fn typeCheck(ast: *Ast) !void {","class":"lineCov","hits":"1","order":"2707","possible_hits":"1",},
{"lineNum":"  193","line":"    // get all functions out of map"},
{"lineNum":"  194","line":"    var funcsKeys = ast.functionMap.keyIterator();","class":"lineCov","hits":"1","order":"2708","possible_hits":"1",},
{"lineNum":"  195","line":"    while (funcsKeys.next()) |key| {","class":"lineCov","hits":"2","order":"2716","possible_hits":"2",},
{"lineNum":"  196","line":"        const func = ast.getFunctionFromName(key.*).?;","class":"lineCov","hits":"3","order":"2723","possible_hits":"3",},
{"lineNum":"  197","line":"        try typeCheckFunction(ast, func.*);","class":"linePartCov","hits":"3","order":"2724","possible_hits":"5",},
{"lineNum":"  198","line":"    }"},
{"lineNum":"  199","line":"}"},
{"lineNum":"  200","line":"// Done"},
{"lineNum":"  201","line":"pub fn typeCheckFunction(ast: *Ast, func: Ast.Node) TypeError!void {","class":"lineCov","hits":"1","order":"1792","possible_hits":"1",},
{"lineNum":"  202","line":"    var fc = func.kind.Function;","class":"lineCov","hits":"2","order":"1793","possible_hits":"2",},
{"lineNum":"  203","line":"    const functionName = fc.getName(ast);","class":"lineCov","hits":"1","order":"1794","possible_hits":"1",},
{"lineNum":"  204","line":"    const returnType = fc.getReturnType(ast).?;","class":"lineCov","hits":"3","order":"1795","possible_hits":"3",},
{"lineNum":"  205","line":"    const fBody = ast.get(fc.body).*;","class":"lineCov","hits":"1","order":"1796","possible_hits":"1",},
{"lineNum":"  206","line":"    const fstatementsIndex = fBody.kind.FunctionBody.statements;","class":"lineCov","hits":"3","order":"1797","possible_hits":"3",},
{"lineNum":"  207","line":"    if(fstatementsIndex == null){","class":"lineCov","hits":"1","order":"1798","possible_hits":"1",},
{"lineNum":"  208","line":"        std.debug.print(\"wahoo \\n\",.{});","class":"lineCov","hits":"1","order":"1799","possible_hits":"1",},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":"    if (fstatementsIndex == null) {","class":"lineCov","hits":"1","order":"1809","possible_hits":"1",},
{"lineNum":"  211","line":"        return;","class":"lineCov","hits":"1","order":"1810","possible_hits":"1",},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":"    try typeCheckStatementList(ast, fstatementsIndex, functionName, returnType);","class":"lineCov","hits":"2","order":"1860","possible_hits":"2",},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"// Done"},
{"lineNum":"  217","line":"pub fn typeCheckStatementList(ast: *Ast, statementListn: ?usize, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"1861","possible_hits":"1",},
{"lineNum":"  218","line":"    ast.printAst();","class":"lineCov","hits":"1","order":"1862","possible_hits":"1",},
{"lineNum":"  219","line":"    std.debug.print(\"statementListn: {d}\\n\", .{statementListn.?});","class":"lineCov","hits":"2","order":"1873","possible_hits":"2",},
{"lineNum":"  220","line":"    const list = try StatemenListgetList(statementListn, ast);","class":"linePartCov","hits":"1","order":"1874","possible_hits":"2",},
{"lineNum":"  221","line":"    if (list == null) {","class":"lineCov","hits":"1","order":"1890","possible_hits":"1",},
{"lineNum":"  222","line":"        return;","class":"linePartCov","hits":"1","order":"1891","possible_hits":"2",},
{"lineNum":"  223","line":"    }"},
{"lineNum":"  224","line":"    for (list.?) |statement| {","class":"lineCov","hits":"4","order":"1892","possible_hits":"4",},
{"lineNum":"  225","line":"        std.debug.print(\"Statement {any}\\n\", .{statement});","class":"lineCov","hits":"1","order":"1893","possible_hits":"1",},
{"lineNum":"  226","line":"        const statNode = ast.get(statement).*;","class":"lineCov","hits":"1","order":"1894","possible_hits":"1",},
{"lineNum":"  227","line":"        try typeCheckStatement(ast, statNode, fName, returnType);","class":"lineCov","hits":"3","order":"1895","possible_hits":"3",},
{"lineNum":"  228","line":"    }"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"pub fn typeCheckStatement(ast: *Ast, statement: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"1896","possible_hits":"1",},
{"lineNum":"  232","line":"    const kind = statement.kind;"},
{"lineNum":"  233","line":"    _ = switch (kind) {","class":"linePartCov","hits":"1","order":"1897","possible_hits":"2",},
{"lineNum":"  234","line":"    .Block => { try typeCheckBlock(ast, statement, fName, returnType); return; },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"    .Assignment => { try typeCheckAssignment(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"2104","possible_hits":"1",},
{"lineNum":"  236","line":"    .Print => { try typeCheckPrint(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"2344","possible_hits":"1",},
{"lineNum":"  237","line":"    .ConditionalIf => { try typeCheckConditional(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"2738","possible_hits":"1",},
{"lineNum":"  238","line":"    .While => { try typeCheckWhile(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"2787","possible_hits":"1",},
{"lineNum":"  239","line":"    .Delete => { try typeCheckDelete(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"2798","possible_hits":"1",},
{"lineNum":"  240","line":"    .Return => { try typeCheckReturn(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"2034","possible_hits":"1",},
{"lineNum":"  241","line":"    .Invocation => { _ = try getAndCheckInvocation(ast, statement, fName, returnType); return; },","class":"lineCov","hits":"1","order":"1898","possible_hits":"1",},
{"lineNum":"  242","line":"    else => {"},
{"lineNum":"  243","line":"        utils.todo(\"Error on statement type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"        return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"    },"},
{"lineNum":"  246","line":"    };"},
{"lineNum":"  247","line":"    return error.InvalidType;"},
{"lineNum":"  248","line":"}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"// Done"},
{"lineNum":"  251","line":"pub fn typeCheckBlock(ast: *Ast, blockn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2750","possible_hits":"1",},
{"lineNum":"  252","line":"    // Block to statement list"},
{"lineNum":"  253","line":"    const block = blockn.kind.Block;","class":"lineCov","hits":"2","order":"2751","possible_hits":"2",},
{"lineNum":"  254","line":"    const statementIndex = block.statements;","class":"lineCov","hits":"1","order":"2752","possible_hits":"1",},
{"lineNum":"  255","line":"    if (statementIndex == null) {","class":"lineCov","hits":"1","order":"2753","possible_hits":"1",},
{"lineNum":"  256","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":"    try typeCheckStatementList(ast, statementIndex.?, fName, returnType);","class":"lineCov","hits":"2","order":"2754","possible_hits":"2",},
{"lineNum":"  259","line":"}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"// Done"},
{"lineNum":"  262","line":"pub fn typeCheckAssignment(ast: *Ast, assignmentn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2105","possible_hits":"1",},
{"lineNum":"  263","line":"    const assignment = assignmentn.kind.Assignment;","class":"lineCov","hits":"2","order":"2106","possible_hits":"2",},
{"lineNum":"  264","line":"    const left = assignment.lhs;","class":"lineCov","hits":"1","order":"2107","possible_hits":"1",},
{"lineNum":"  265","line":"    const right = assignment.rhs;","class":"lineCov","hits":"1","order":"2108","possible_hits":"1",},
{"lineNum":"  266","line":"    if (left == null) {","class":"lineCov","hits":"1","order":"2109","possible_hits":"1",},
{"lineNum":"  267","line":"        utils.todo(\"Error on assignment type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"    }"},
{"lineNum":"  270","line":"    if (right == null) {","class":"lineCov","hits":"1","order":"2110","possible_hits":"1",},
{"lineNum":"  271","line":"        utils.todo(\"Error on assignment type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"    }"},
{"lineNum":"  274","line":"    // check if right is type read"},
{"lineNum":"  275","line":"    const leftType = try LValuegetType(left, ast, fName);","class":"lineCov","hits":"2","order":"2111","possible_hits":"2",},
{"lineNum":"  276","line":"    if (leftType == null) {","class":"lineCov","hits":"1","order":"2175","possible_hits":"1",},
{"lineNum":"  277","line":"        utils.todo(\"Error on assignment type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"    }"},
{"lineNum":"  280","line":"    const rightNode = ast.get(right.?).kind;","class":"lineCov","hits":"3","order":"2176","possible_hits":"3",},
{"lineNum":"  281","line":"    if (rightNode == .Read) {","class":"lineCov","hits":"1","order":"2177","possible_hits":"1",},
{"lineNum":"  282","line":"        const readType = Ast.Type.Int;","class":"lineCov","hits":"1","order":"2700","possible_hits":"1",},
{"lineNum":"  283","line":"        // expect lhs to be of type int"},
{"lineNum":"  284","line":"        if (!leftType.?.equals(readType)) {","class":"lineCov","hits":"2","order":"2701","possible_hits":"2",},
{"lineNum":"  285","line":"            // TODO: add error"},
{"lineNum":"  286","line":"            return error.InvalidReadExptedTypeInt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"        return;","class":"lineCov","hits":"1","order":"2178","possible_hits":"1",},
{"lineNum":"  289","line":"    }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    // right hand side is an expression"},
{"lineNum":"  292","line":"    const rightExpr = ast.get(right.?).*;","class":"lineCov","hits":"3","order":"2179","possible_hits":"3",},
{"lineNum":"  293","line":"    const rightType = try getAndCheckTypeExpression(ast, rightExpr, fName, returnType);","class":"lineCov","hits":"2","order":"2180","possible_hits":"2",},
{"lineNum":"  294","line":"    if(rightType.isStruct()){","class":"lineCov","hits":"1","order":"2181","possible_hits":"1",},
{"lineNum":"  295","line":"        std.debug.print(\"rightType: {s}\\n\", .{rightType.Struct});","class":"lineCov","hits":"3","order":"2591","possible_hits":"3",},
{"lineNum":"  296","line":"        std.debug.print(\"leftType: {s}\\n\", .{leftType.?.Struct});","class":"lineCov","hits":"3","order":"2184","possible_hits":"3",},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":"    if (!leftType.?.equals(rightType)) {","class":"lineCov","hits":"2","order":"2185","possible_hits":"2",},
{"lineNum":"  299","line":"        // FIXME: add error"},
{"lineNum":"  300","line":"        return error.InvalidAssignmentType;","class":"lineCov","hits":"2","order":"2186","possible_hits":"2",},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":"}"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"// Done"},
{"lineNum":"  305","line":"pub fn typeCheckPrint(ast: *Ast, printn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2345","possible_hits":"1",},
{"lineNum":"  306","line":"    const print = printn.kind.Print;","class":"lineCov","hits":"2","order":"2346","possible_hits":"2",},
{"lineNum":"  307","line":"    const expr = print.expr;","class":"lineCov","hits":"1","order":"2347","possible_hits":"1",},
{"lineNum":"  308","line":"    const exprNode = ast.get(expr).*;","class":"lineCov","hits":"1","order":"2348","possible_hits":"1",},
{"lineNum":"  309","line":"    const exprType = try getAndCheckTypeExpression(ast, exprNode, fName, returnType);","class":"linePartCov","hits":"1","order":"2349","possible_hits":"2",},
{"lineNum":"  310","line":"    if (!exprType.equals(Ast.Type.Int)) {","class":"lineCov","hits":"1","order":"2351","possible_hits":"1",},
{"lineNum":"  311","line":"        // TODO: add error"},
{"lineNum":"  312","line":"        return TypeError.InvalidReadExptedTypeInt;","class":"lineCov","hits":"1","order":"2352","possible_hits":"1",},
{"lineNum":"  313","line":"    }"},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"// Done"},
{"lineNum":"  317","line":"pub fn typeCheckConditional(ast: *Ast, conditionaln: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2739","possible_hits":"1",},
{"lineNum":"  318","line":"    // first check if conditional is bool"},
{"lineNum":"  319","line":"    const conditional = conditionaln.kind.ConditionalIf;","class":"lineCov","hits":"2","order":"2740","possible_hits":"2",},
{"lineNum":"  320","line":"    const cond = conditional.cond;","class":"lineCov","hits":"1","order":"2741","possible_hits":"1",},
{"lineNum":"  321","line":"    const condNode = ast.get(cond).*;","class":"lineCov","hits":"1","order":"2742","possible_hits":"1",},
{"lineNum":"  322","line":"    std.debug.print(\"condNode: {any}\\n\", .{cond});","class":"lineCov","hits":"1","order":"2743","possible_hits":"1",},
{"lineNum":"  323","line":"    const condType = try getAndCheckTypeExpression(ast, condNode, fName, returnType);","class":"linePartCov","hits":"1","order":"2744","possible_hits":"2",},
{"lineNum":"  324","line":"    if (!condType.equals(Ast.Type.Bool)) {","class":"lineCov","hits":"1","order":"2745","possible_hits":"1",},
{"lineNum":"  325","line":"        utils.todo(\"Error on conditional type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"        return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"    }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    const isIfElse = conditional.isIfElse(ast);","class":"lineCov","hits":"1","order":"2746","possible_hits":"1",},
{"lineNum":"  330","line":"    if (isIfElse) {","class":"lineCov","hits":"1","order":"2747","possible_hits":"1",},
{"lineNum":"  331","line":"        const ifElseNode = ast.get(conditional.block).kind.ConditionalIfElse;","class":"lineCov","hits":"3","order":"2755","possible_hits":"3",},
{"lineNum":"  332","line":"        const ifBlockNode = ast.get(ifElseNode.ifBlock).*;","class":"lineCov","hits":"1","order":"2756","possible_hits":"1",},
{"lineNum":"  333","line":"        const elseBlockNode = ast.get(ifElseNode.elseBlock).*;","class":"lineCov","hits":"1","order":"2757","possible_hits":"1",},
{"lineNum":"  334","line":"        try typeCheckBlock(ast, ifBlockNode, fName, returnType);","class":"linePartCov","hits":"1","order":"2758","possible_hits":"2",},
{"lineNum":"  335","line":"        try typeCheckBlock(ast, elseBlockNode, fName, returnType);","class":"lineCov","hits":"1","order":"2759","possible_hits":"1",},
{"lineNum":"  336","line":"    } else {"},
{"lineNum":"  337","line":"        const ifBlockNode = ast.get(conditional.block).*;","class":"lineCov","hits":"1","order":"2748","possible_hits":"1",},
{"lineNum":"  338","line":"        try typeCheckBlock(ast, ifBlockNode, fName, returnType);","class":"linePartCov","hits":"2","order":"2749","possible_hits":"3",},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"// Done"},
{"lineNum":"  343","line":"pub fn typeCheckWhile(ast: *Ast, while_nN: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2788","possible_hits":"1",},
{"lineNum":"  344","line":"    // first check if conditional is bool"},
{"lineNum":"  345","line":"    const while_n = while_nN.kind.While;","class":"lineCov","hits":"2","order":"2789","possible_hits":"2",},
{"lineNum":"  346","line":"    const cond = while_n.cond;","class":"lineCov","hits":"1","order":"2790","possible_hits":"1",},
{"lineNum":"  347","line":"    const condNode = ast.get(cond).*;","class":"lineCov","hits":"1","order":"2791","possible_hits":"1",},
{"lineNum":"  348","line":"    const condType = try getAndCheckTypeExpression(ast, condNode, fName, returnType);","class":"linePartCov","hits":"1","order":"2792","possible_hits":"2",},
{"lineNum":"  349","line":"    if (!condType.equals(Ast.Type.Bool)) {","class":"lineCov","hits":"1","order":"2793","possible_hits":"1",},
{"lineNum":"  350","line":"        utils.todo(\"Error on while type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"        return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    const blockNode = ast.get(while_n.block).*;","class":"lineCov","hits":"1","order":"2794","possible_hits":"1",},
{"lineNum":"  355","line":"    try typeCheckBlock(ast, blockNode, fName, returnType);","class":"lineCov","hits":"2","order":"2795","possible_hits":"2",},
{"lineNum":"  356","line":"}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"// Done"},
{"lineNum":"  359","line":"pub fn typeCheckDelete(ast: *Ast, deleten: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2799","possible_hits":"1",},
{"lineNum":"  360","line":"    const delete = deleten.kind.Delete;","class":"lineCov","hits":"2","order":"2800","possible_hits":"2",},
{"lineNum":"  361","line":"    const expr = delete.expr;","class":"lineCov","hits":"1","order":"2801","possible_hits":"1",},
{"lineNum":"  362","line":"    const exprNode = ast.get(expr).*;","class":"lineCov","hits":"1","order":"2802","possible_hits":"1",},
{"lineNum":"  363","line":"    const exprType = try getAndCheckTypeExpression(ast, exprNode, fName, returnType);","class":"linePartCov","hits":"1","order":"2803","possible_hits":"2",},
{"lineNum":"  364","line":"    if (!exprType.equalsNoCont(Ast.Type{ .Struct = \"cunny\" })) {","class":"lineCov","hits":"1","order":"2804","possible_hits":"1",},
{"lineNum":"  365","line":"        utils.todo(\"Error on delete type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"        return error.InvalidType;","class":"linePartCov","hits":"1","order":"2807","possible_hits":"2",},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":"}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"// Done"},
{"lineNum":"  371","line":"pub fn typeCheckReturn(ast: *Ast, retn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!void {","class":"lineCov","hits":"1","order":"2035","possible_hits":"1",},
{"lineNum":"  372","line":"    const ret = retn.kind.Return;","class":"lineCov","hits":"2","order":"2036","possible_hits":"2",},
{"lineNum":"  373","line":"    const expr = ret.expr;","class":"lineCov","hits":"1","order":"2037","possible_hits":"1",},
{"lineNum":"  374","line":"    if (expr == null) {","class":"lineCov","hits":"1","order":"2038","possible_hits":"1",},
{"lineNum":"  375","line":"        if (!returnType.equals(Ast.Type.Void)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"            return error.ReturnTypeNotVoid;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"        }"},
{"lineNum":"  378","line":"        return;","class":"lineCov","hits":"1","order":"2039","possible_hits":"1",},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":"    const exprNode = ast.get(expr.?).*;","class":"lineCov","hits":"3","order":"2040","possible_hits":"3",},
{"lineNum":"  381","line":"    const exprType = try getAndCheckTypeExpression(ast, exprNode, fName, returnType);","class":"linePartCov","hits":"1","order":"2041","possible_hits":"2",},
{"lineNum":"  382","line":"    if (!exprType.equals(returnType)) {","class":"lineCov","hits":"1","order":"2042","possible_hits":"1",},
{"lineNum":"  383","line":"        // FIXME: add proper error"},
{"lineNum":"  384","line":"        return error.InvalidReturnType;","class":"lineCov","hits":"1","order":"2043","possible_hits":"1",},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"// Done"},
{"lineNum":"  389","line":"pub fn getAndCheckInvocation(ast: *Ast, invocationn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"1899","possible_hits":"1",},
{"lineNum":"  390","line":"    const invocation = invocationn.kind.Invocation;","class":"lineCov","hits":"2","order":"1900","possible_hits":"2",},
{"lineNum":"  391","line":"    const funcName = ast.get(invocation.funcName).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"1901","possible_hits":"1",},
{"lineNum":"  392","line":"    const func = ast.getFunctionFromName(funcName);","class":"lineCov","hits":"1","order":"1902","possible_hits":"1",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"    if (func == null) {","class":"lineCov","hits":"1","order":"1903","possible_hits":"1",},
{"lineNum":"  395","line":"        utils.todo(\"Error on invocation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"        return error.InvalidFunctionCall;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":"    // check the arguments"},
{"lineNum":"  399","line":"    const args = invocation.args;","class":"lineCov","hits":"1","order":"1904","possible_hits":"1",},
{"lineNum":"  400","line":"    const funcProto = ast.get(func.?.kind.Function.proto).*.kind.FunctionProto.parameters;","class":"lineCov","hits":"3","order":"1905","possible_hits":"3",},
{"lineNum":"  401","line":"    if (args == null) {","class":"lineCov","hits":"1","order":"1906","possible_hits":"1",},
{"lineNum":"  402","line":"        // check the definition of the function"},
{"lineNum":"  403","line":"        if (funcProto == null) {","class":"lineCov","hits":"1","order":"2447","possible_hits":"1",},
{"lineNum":"  404","line":"            return ast.getFunctionReturnTypeFromName(funcName).?;","class":"lineCov","hits":"2","order":"2448","possible_hits":"2",},
{"lineNum":"  405","line":"        } else {"},
{"lineNum":"  406","line":"            utils.todo(\"Error on invocation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"            return error.InvalidFunctionCall;","class":"linePartCov","hits":"1","order":"1907","possible_hits":"2",},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    var argsList = try ArgumentsgetArgumentTypes(args, ast, fName, returnType);","class":"linePartCov","hits":"1","order":"1908","possible_hits":"2",},
{"lineNum":"  412","line":"    var funcPList = try ParametergetParamTypes(funcProto, ast);","class":"lineCov","hits":"1","order":"1955","possible_hits":"1",},
{"lineNum":"  413","line":"    std.debug.print(\"argsList: {any}\\n\", .{argsList});","class":"lineCov","hits":"1","order":"1978","possible_hits":"1",},
{"lineNum":"  414","line":"    std.debug.print(\"funcPList: {any}\\n\", .{funcPList});","class":"lineCov","hits":"1","order":"1986","possible_hits":"1",},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    if (argsList == null) {","class":"lineCov","hits":"1","order":"1987","possible_hits":"1",},
{"lineNum":"  417","line":"        if (funcPList == null) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":"            // return the return type of the function"},
{"lineNum":"  419","line":"            const aaahhhhhhhhhhhhhhhhhhhhhhhhhh = ast.getFunctionReturnTypeFromName(funcName);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"            if (aaahhhhhhhhhhhhhhhhhhhhhhhhhh == null) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"                utils.todo(\"Error on invocation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"                return error.InvalidFunctionCall;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"            }"},
{"lineNum":"  424","line":"            return aaahhhhhhhhhhhhhhhhhhhhhhhhhh.?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  425","line":"        }"},
{"lineNum":"  426","line":"        utils.todo(\"Error on invocation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        return error.InvalidFunctionCall;","class":"linePartCov","hits":"1","order":"1988","possible_hits":"2",},
{"lineNum":"  428","line":"    }"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    if (funcPList == null) {","class":"lineCov","hits":"1","order":"1989","possible_hits":"1",},
{"lineNum":"  431","line":"        utils.todo(\"Error on invocation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"        return error.InvalidFunctionCall;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"    }"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    funcPList = funcPList.?;","class":"lineCov","hits":"3","order":"1990","possible_hits":"3",},
{"lineNum":"  436","line":"    argsList = argsList.?;","class":"lineCov","hits":"3","order":"1991","possible_hits":"3",},
{"lineNum":"  437","line":"    if (argsList.?.len != funcPList.?.len) {","class":"lineCov","hits":"2","order":"1992","possible_hits":"2",},
{"lineNum":"  438","line":"        utils.todo(\"Error on invocation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"        return error.InvalidFunctionCall;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"    }"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"    var i: usize = 0;","class":"lineCov","hits":"1","order":"1993","possible_hits":"1",},
{"lineNum":"  443","line":"    while (i < argsList.?.len) {","class":"lineCov","hits":"2","order":"1994","possible_hits":"2",},
{"lineNum":"  444","line":"        const argType = argsList.?[i];","class":"lineCov","hits":"3","order":"1995","possible_hits":"3",},
{"lineNum":"  445","line":"        const paramType = funcPList.?[i];","class":"lineCov","hits":"3","order":"1996","possible_hits":"3",},
{"lineNum":"  446","line":"        if (!argType.equals(paramType)) {","class":"lineCov","hits":"1","order":"1997","possible_hits":"1",},
{"lineNum":"  447","line":"            return error.InvalidFunctionCall;","class":"lineCov","hits":"1","order":"2002","possible_hits":"1",},
{"lineNum":"  448","line":"        }"},
{"lineNum":"  449","line":"        i += 1;","class":"linePartCov","hits":"3","order":"2020","possible_hits":"4",},
{"lineNum":"  450","line":"    }"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    return ast.getFunctionReturnTypeFromName(funcName).?;","class":"lineCov","hits":"2","order":"2702","possible_hits":"2",},
{"lineNum":"  453","line":"}"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"// Done"},
{"lineNum":"  456","line":"pub fn getAndCheckTypeExpression(ast: *Ast, exprn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"1919","possible_hits":"1",},
{"lineNum":"  457","line":"    switch(exprn.kind){","class":"linePartCov","hits":"1","order":"1920","possible_hits":"2",},
{"lineNum":"  458","line":"        .BinaryOperation => {"},
{"lineNum":"  459","line":"            return try getAndCheckBinaryOperation(ast, exprn, fName, returnType);","class":"lineCov","hits":"1","order":"2405","possible_hits":"1",},
{"lineNum":"  460","line":"        },"},
{"lineNum":"  461","line":"        .UnaryOperation => {"},
{"lineNum":"  462","line":"            return try getAndCheckUnaryOperation(ast, exprn, fName, returnType);","class":"lineCov","hits":"1","order":"2556","possible_hits":"1",},
{"lineNum":"  463","line":"        },"},
{"lineNum":"  464","line":"        .Selector => {"},
{"lineNum":"  465","line":"            return try getAndCheckSelector(ast, exprn, fName, returnType);","class":"lineCov","hits":"1","order":"2406","possible_hits":"1",},
{"lineNum":"  466","line":"        },"},
{"lineNum":"  467","line":"        .Expression => {"},
{"lineNum":"  468","line":"            const expr = exprn.kind.Expression;","class":"lineCov","hits":"2","order":"1921","possible_hits":"2",},
{"lineNum":"  469","line":"            // get the type of the expression"},
{"lineNum":"  470","line":"            const node = ast.get(expr.expr).*;","class":"lineCov","hits":"1","order":"1922","possible_hits":"1",},
{"lineNum":"  471","line":"            const kind = node.kind;"},
{"lineNum":"  472","line":"            switch (kind) {","class":"linePartCov","hits":"1","order":"1923","possible_hits":"3",},
{"lineNum":"  473","line":"            .BinaryOperation => {"},
{"lineNum":"  474","line":"                return try getAndCheckBinaryOperation(ast, node, fName, returnType);","class":"lineCov","hits":"1","order":"2397","possible_hits":"1",},
{"lineNum":"  475","line":"            },"},
{"lineNum":"  476","line":"            .UnaryOperation => {"},
{"lineNum":"  477","line":"                return try getAndCheckUnaryOperation(ast, node, fName, returnType);","class":"lineCov","hits":"1","order":"2519","possible_hits":"1",},
{"lineNum":"  478","line":"            },"},
{"lineNum":"  479","line":"            .Selector => {"},
{"lineNum":"  480","line":"                return try getAndCheckSelector(ast, node, fName, returnType);","class":"lineCov","hits":"1","order":"1924","possible_hits":"1",},
{"lineNum":"  481","line":"            },"},
{"lineNum":"  482","line":"            else => {"},
{"lineNum":"  483","line":"                utils.todo(\"Error on expression type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"                return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"            },"},
{"lineNum":"  486","line":"            }"},
{"lineNum":"  487","line":"        },"},
{"lineNum":"  488","line":"        else => {"},
{"lineNum":"  489","line":"            std.debug.print(\"exprn.kind: {any}\\n\", .{exprn.kind});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":"            // print the index into the ast"},
{"lineNum":"  491","line":"            utils.todo(\"Error on expression type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  492","line":"            return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"        },"},
{"lineNum":"  494","line":"    }"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"// TODO: fix the errors"},
{"lineNum":"  499","line":"pub fn getAndCheckBinaryOperation(ast: *Ast, binaryOp: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"2398","possible_hits":"1",},
{"lineNum":"  500","line":"    const token = binaryOp.token;","class":"lineCov","hits":"1","order":"2399","possible_hits":"1",},
{"lineNum":"  501","line":"    switch (token.kind) {","class":"linePartCov","hits":"1","order":"2400","possible_hits":"2",},
{"lineNum":"  502","line":"        .Lt, .Gt, .GtEq, .DoubleEq, .NotEq => {"},
{"lineNum":"  503","line":"            const lhsExpr = ast.get(binaryOp.kind.BinaryOperation.lhs.?).*;","class":"lineCov","hits":"2","order":"2483","possible_hits":"2",},
{"lineNum":"  504","line":"            const rhsExpr = ast.get(binaryOp.kind.BinaryOperation.rhs.?).*;","class":"lineCov","hits":"3","order":"2484","possible_hits":"3",},
{"lineNum":"  505","line":"            const lhsType = try getAndCheckTypeExpression(ast, lhsExpr, fName, returnType);","class":"linePartCov","hits":"1","order":"2485","possible_hits":"2",},
{"lineNum":"  506","line":"            const rhsType = try getAndCheckTypeExpression(ast, rhsExpr, fName, returnType);","class":"lineCov","hits":"1","order":"2486","possible_hits":"1",},
{"lineNum":"  507","line":"            if (!lhsType.equals(rhsType)) {","class":"lineCov","hits":"1","order":"2487","possible_hits":"1",},
{"lineNum":"  508","line":"                return error.BinaryOperationTypeMismatch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":"            }"},
{"lineNum":"  510","line":"            if (!lhsType.equals(Ast.Type.Int)) {","class":"lineCov","hits":"1","order":"2488","possible_hits":"1",},
{"lineNum":"  511","line":"                return error.InvalidTypeExptectedInt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"            }"},
{"lineNum":"  513","line":"            return Ast.Type.Bool;","class":"lineCov","hits":"1","order":"2489","possible_hits":"1",},
{"lineNum":"  514","line":"        },"},
{"lineNum":"  515","line":"        .Or, .And => {"},
{"lineNum":"  516","line":"            const lhsExpr = ast.get(binaryOp.kind.BinaryOperation.lhs.?).*;","class":"lineCov","hits":"2","order":"2480","possible_hits":"2",},
{"lineNum":"  517","line":"            const rhsExpr = ast.get(binaryOp.kind.BinaryOperation.rhs.?).*;","class":"lineCov","hits":"3","order":"2481","possible_hits":"3",},
{"lineNum":"  518","line":"            const lhsType = try getAndCheckTypeExpression(ast, lhsExpr, fName, returnType);","class":"lineCov","hits":"2","order":"2482","possible_hits":"2",},
{"lineNum":"  519","line":"            const rhsType = try getAndCheckTypeExpression(ast, rhsExpr, fName, returnType);","class":"lineCov","hits":"1","order":"2490","possible_hits":"1",},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"            if (!lhsType.equals(rhsType)) {","class":"lineCov","hits":"1","order":"2491","possible_hits":"1",},
{"lineNum":"  522","line":"                return error.BinaryOperationTypeMismatch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  523","line":"            }"},
{"lineNum":"  524","line":"            if (!lhsType.equals(Ast.Type.Bool)) {","class":"lineCov","hits":"1","order":"2492","possible_hits":"1",},
{"lineNum":"  525","line":"                return error.InvalidTypeExpectedBool;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"            }"},
{"lineNum":"  527","line":"            return Ast.Type.Bool;","class":"lineCov","hits":"1","order":"2493","possible_hits":"1",},
{"lineNum":"  528","line":"        },"},
{"lineNum":"  529","line":"        .Mul,"},
{"lineNum":"  530","line":"        .Minus,"},
{"lineNum":"  531","line":"        .Plus,"},
{"lineNum":"  532","line":"        .Div,"},
{"lineNum":"  533","line":"        => {"},
{"lineNum":"  534","line":"            ast.printAst();","class":"lineCov","hits":"1","order":"2401","possible_hits":"1",},
{"lineNum":"  535","line":"            const lhsExpr = ast.get(binaryOp.kind.BinaryOperation.lhs.?).*;","class":"lineCov","hits":"2","order":"2402","possible_hits":"2",},
{"lineNum":"  536","line":"            const rhsExpr = ast.get(binaryOp.kind.BinaryOperation.rhs.?).*;","class":"lineCov","hits":"3","order":"2403","possible_hits":"3",},
{"lineNum":"  537","line":"            const lhsType = try getAndCheckTypeExpression(ast, lhsExpr, fName, returnType);","class":"linePartCov","hits":"1","order":"2404","possible_hits":"2",},
{"lineNum":"  538","line":"            const rhsType = try getAndCheckTypeExpression(ast, rhsExpr, fName, returnType);","class":"lineCov","hits":"1","order":"2407","possible_hits":"1",},
{"lineNum":"  539","line":"            if (!lhsType.equals(rhsType)) {","class":"lineCov","hits":"1","order":"2408","possible_hits":"1",},
{"lineNum":"  540","line":"                // TODO: add error"},
{"lineNum":"  541","line":"                return error.BinaryOperationTypeMismatch;","class":"lineCov","hits":"1","order":"2429","possible_hits":"1",},
{"lineNum":"  542","line":"            }"},
{"lineNum":"  543","line":"            if (!lhsType.equals(Ast.Type.Int)) {","class":"lineCov","hits":"1","order":"2409","possible_hits":"1",},
{"lineNum":"  544","line":"                // TODO: add error"},
{"lineNum":"  545","line":"                return error.InvalidTypeExptectedInt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"            }"},
{"lineNum":"  547","line":"            return lhsType;","class":"lineCov","hits":"1","order":"2410","possible_hits":"1",},
{"lineNum":"  548","line":"        },"},
{"lineNum":"  549","line":"        else => {"},
{"lineNum":"  550","line":"            std.debug.print(\"token.kind: {any}\\n\", .{token.kind});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  551","line":"            utils.todo(\"Error on binary operation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  552","line":"            return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"        },"},
{"lineNum":"  554","line":"    }"},
{"lineNum":"  555","line":"    unreachable;"},
{"lineNum":"  556","line":"}"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"pub fn getAndCheckUnaryOperation(ast: *Ast, unaryOp: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"2520","possible_hits":"1",},
{"lineNum":"  559","line":"    const token = unaryOp.token;"},
{"lineNum":"  560","line":"    switch (token.kind) {","class":"linePartCov","hits":"1","order":"2521","possible_hits":"2",},
{"lineNum":"  561","line":"        .Not => {"},
{"lineNum":"  562","line":"            const expr = ast.get(unaryOp.kind.UnaryOperation.on).*;","class":"lineCov","hits":"2","order":"2522","possible_hits":"2",},
{"lineNum":"  563","line":"            const exprType = try getAndCheckTypeExpression(ast, expr, fName, returnType);","class":"linePartCov","hits":"1","order":"2523","possible_hits":"2",},
{"lineNum":"  564","line":"            if (!exprType.equals(Ast.Type.Bool)) {","class":"lineCov","hits":"1","order":"2524","possible_hits":"1",},
{"lineNum":"  565","line":"                return error.InvalidTypeExpectedBool;","class":"lineCov","hits":"1","order":"2532","possible_hits":"1",},
{"lineNum":"  566","line":"            }"},
{"lineNum":"  567","line":"            return exprType;","class":"lineCov","hits":"1","order":"2525","possible_hits":"1",},
{"lineNum":"  568","line":"        },"},
{"lineNum":"  569","line":"        .Minus => {"},
{"lineNum":"  570","line":"            const expr = ast.get(unaryOp.kind.UnaryOperation.on).*;","class":"lineCov","hits":"2","order":"2539","possible_hits":"2",},
{"lineNum":"  571","line":"            const exprType = try getAndCheckTypeExpression(ast, expr, fName, returnType);","class":"linePartCov","hits":"1","order":"2540","possible_hits":"2",},
{"lineNum":"  572","line":"            if (!exprType.equals(Ast.Type.Int)) {","class":"lineCov","hits":"1","order":"2541","possible_hits":"1",},
{"lineNum":"  573","line":"                return error.InvalidTypeExptectedInt;","class":"lineCov","hits":"1","order":"2549","possible_hits":"1",},
{"lineNum":"  574","line":"            }"},
{"lineNum":"  575","line":"            return exprType;","class":"lineCov","hits":"1","order":"2542","possible_hits":"1",},
{"lineNum":"  576","line":"        },"},
{"lineNum":"  577","line":"        else => {"},
{"lineNum":"  578","line":"            utils.todo(\"Error on unary operation type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":"            return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"        },"},
{"lineNum":"  581","line":"    }"},
{"lineNum":"  582","line":"    unreachable;"},
{"lineNum":"  583","line":"}"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"pub fn getAndCheckSelector(ast: *Ast, selectorn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"1925","possible_hits":"1",},
{"lineNum":"  586","line":"    const selector = selectorn.kind.Selector;","class":"lineCov","hits":"2","order":"1926","possible_hits":"2",},
{"lineNum":"  587","line":"    const factorNode = ast.get(selector.factor).*;","class":"lineCov","hits":"1","order":"1927","possible_hits":"1",},
{"lineNum":"  588","line":"    const factorType = try getAndCheckFactor(ast, factorNode, fName, returnType);","class":"linePartCov","hits":"1","order":"1928","possible_hits":"2",},
{"lineNum":"  589","line":"    const chainType = try SelectorChaingetType(selector.chain, ast, factorType);","class":"lineCov","hits":"1","order":"1935","possible_hits":"1",},
{"lineNum":"  590","line":"    if (chainType == null) {","class":"lineCov","hits":"1","order":"1939","possible_hits":"1",},
{"lineNum":"  591","line":"        return factorType;","class":"lineCov","hits":"1","order":"1940","possible_hits":"1",},
{"lineNum":"  592","line":"    }"},
{"lineNum":"  593","line":"    return chainType.?;","class":"lineCov","hits":"2","order":"2786","possible_hits":"2",},
{"lineNum":"  594","line":"}"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"pub fn getAndCheckFactor(ast: *Ast, factorn: Ast.Node, fName: []const u8, returnType: Ast.Type) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"1929","possible_hits":"1",},
{"lineNum":"  597","line":"    const factor = factorn.kind.Factor;","class":"lineCov","hits":"2","order":"1930","possible_hits":"2",},
{"lineNum":"  598","line":"    const kind = factor.factor;","class":"lineCov","hits":"1","order":"1931","possible_hits":"1",},
{"lineNum":"  599","line":"    const node = ast.get(kind).*;","class":"lineCov","hits":"1","order":"1932","possible_hits":"1",},
{"lineNum":"  600","line":"    switch (node.kind) {","class":"linePartCov","hits":"1","order":"1933","possible_hits":"3",},
{"lineNum":"  601","line":"        .Number => return Ast.Type.Int,","class":"lineCov","hits":"1","order":"2018","possible_hits":"1",},
{"lineNum":"  602","line":"        .True, .False => return Ast.Type.Bool,","class":"lineCov","hits":"1","order":"1934","possible_hits":"1",},
{"lineNum":"  603","line":"        .Null => return Ast.Type.Null,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"        .New => return try getAndCheckNew(ast, node),","class":"lineCov","hits":"1","order":"2762","possible_hits":"1",},
{"lineNum":"  605","line":"        .Invocation => return try getAndCheckInvocation(ast, node, fName, returnType),","class":"lineCov","hits":"1","order":"2446","possible_hits":"1",},
{"lineNum":"  606","line":"        .Expression => return try getAndCheckTypeExpression(ast, node, fName, returnType),","class":"lineCov","hits":"1","order":"2350","possible_hits":"1",},
{"lineNum":"  607","line":"        .Identifier => return try getAndCheckLocalIdentifier(ast, node, fName),","class":"lineCov","hits":"1","order":"2422","possible_hits":"1",},
{"lineNum":"  608","line":"        else => {"},
{"lineNum":"  609","line":"            utils.todo(\"Error on factor type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"            return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"        },"},
{"lineNum":"  612","line":"    }"},
{"lineNum":"  613","line":"    unreachable;"},
{"lineNum":"  614","line":"}"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"pub fn getAndCheckNew(ast: *Ast, newn: Ast.Node) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"2763","possible_hits":"1",},
{"lineNum":"  617","line":"    const new = newn.kind.New;","class":"lineCov","hits":"2","order":"2764","possible_hits":"2",},
{"lineNum":"  618","line":"    const name = ast.get(new.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2765","possible_hits":"1",},
{"lineNum":"  619","line":"    const structType = ast.getStructNodeFromName(name);","class":"lineCov","hits":"1","order":"2766","possible_hits":"1",},
{"lineNum":"  620","line":"    if (structType == null) {","class":"lineCov","hits":"1","order":"2767","possible_hits":"1",},
{"lineNum":"  621","line":"        utils.todo(\"Error on new type checking\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"        return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"    }"},
{"lineNum":"  624","line":"    return Ast.Type{ .Struct = name };","class":"lineCov","hits":"2","order":"2768","possible_hits":"2",},
{"lineNum":"  625","line":"}"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"pub fn getAndCheckLocalIdentifier(ast: *Ast, localId: Ast.Node, fName: []const u8) TypeError!Ast.Type {","class":"lineCov","hits":"1","order":"2118","possible_hits":"1",},
{"lineNum":"  628","line":"    const token = localId.token;","class":"lineCov","hits":"1","order":"2119","possible_hits":"1",},
{"lineNum":"  629","line":"    const name = token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2120","possible_hits":"1",},
{"lineNum":"  630","line":"    const func = ast.getFunctionFromName(fName).?.kind.Function.proto;","class":"lineCov","hits":"2","order":"2121","possible_hits":"2",},
{"lineNum":"  631","line":"    const param = ast.get(func).*.kind.FunctionProto.parameters;","class":"lineCov","hits":"3","order":"2122","possible_hits":"3",},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"    const funcDecl = ast.getFunctionDeclarationTypeFromName(fName,name );","class":"lineCov","hits":"1","order":"2123","possible_hits":"1",},
{"lineNum":"  634","line":"    const funcParam = try ParamatergetParamTypeFromName(param, ast, name);","class":"linePartCov","hits":"1","order":"2151","possible_hits":"2",},
{"lineNum":"  635","line":"    const globalDecl = ast.getDeclarationGlobalFromName(name);","class":"lineCov","hits":"1","order":"2155","possible_hits":"1",},
{"lineNum":"  636","line":"    const localDecl = funcParam orelse funcDecl orelse globalDecl;","class":"lineCov","hits":"2","order":"2164","possible_hits":"2",},
{"lineNum":"  637","line":"    std.debug.print(\"name: {s}\\n\", .{name});","class":"lineCov","hits":"1","order":"2165","possible_hits":"1",},
{"lineNum":"  638","line":"    if (localDecl == null) {","class":"lineCov","hits":"1","order":"2166","possible_hits":"1",},
{"lineNum":"  639","line":"        return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":"    }"},
{"lineNum":"  641","line":"    return localDecl.?;","class":"lineCov","hits":"2","order":"2167","possible_hits":"2",},
{"lineNum":"  642","line":"}"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"pub fn SelectorChaingetType(this: ?usize, ast: *Ast, ty: Ast.Type) !?Ast.Type {","class":"lineCov","hits":"1","order":"1936","possible_hits":"1",},
{"lineNum":"  645","line":"    if (this == null) {","class":"lineCov","hits":"1","order":"1937","possible_hits":"1",},
{"lineNum":"  646","line":"        return null;","class":"lineCov","hits":"1","order":"1938","possible_hits":"1",},
{"lineNum":"  647","line":"    }"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"    // check if type is a struct"},
{"lineNum":"  650","line":"    if (!ty.isStruct()) {","class":"lineCov","hits":"1","order":"2769","possible_hits":"1",},
{"lineNum":"  651","line":"        utils.todo(\"this must be a struct, do error proper\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  652","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":"    // get the ident of the struct"},
{"lineNum":"  655","line":"    const ident = ty.Struct;","class":"lineCov","hits":"3","order":"2770","possible_hits":"3",},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    var result: ?Ast.Type = null;","class":"lineCov","hits":"1","order":"2771","possible_hits":"1",},
{"lineNum":"  658","line":"    var tmpIdent = ident;","class":"lineCov","hits":"1","order":"2772","possible_hits":"1",},
{"lineNum":"  659","line":"    var chaini = this;","class":"lineCov","hits":"1","order":"2773","possible_hits":"1",},
{"lineNum":"  660","line":"    if (chaini == null) {","class":"lineCov","hits":"1","order":"2774","possible_hits":"1",},
{"lineNum":"  661","line":"        return ty;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"    }"},
{"lineNum":"  663","line":"    tmpIdent = ty.Struct;","class":"lineCov","hits":"3","order":"2775","possible_hits":"3",},
{"lineNum":"  664","line":"    tmpIdent = ast.get(ast.getStructNodeFromName(tmpIdent).?.kind.TypeDeclaration.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"3","order":"2776","possible_hits":"3",},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    var chain = ast.get(chaini.?).kind.SelectorChain;","class":"lineCov","hits":"2","order":"2777","possible_hits":"2",},
{"lineNum":"  667","line":"    while (true) {"},
{"lineNum":"  668","line":"        const chainIdent = ast.get(chain.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2778","possible_hits":"1",},
{"lineNum":"  669","line":"        const field = ast.getStructFieldType(tmpIdent, chainIdent);","class":"lineCov","hits":"1","order":"2779","possible_hits":"1",},
{"lineNum":"  670","line":"        if (field == null) {","class":"lineCov","hits":"1","order":"2780","possible_hits":"1",},
{"lineNum":"  671","line":"            // TODO: add error"},
{"lineNum":"  672","line":"            return error.StructHasNoMember;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"        }"},
{"lineNum":"  674","line":"        if(field.?.isStruct()){","class":"lineCov","hits":"2","order":"2781","possible_hits":"2",},
{"lineNum":"  675","line":"            tmpIdent = field.?.Struct;","class":"lineCov","hits":"3","order":"2796","possible_hits":"3",},
{"lineNum":"  676","line":"            tmpIdent = ast.get(ast.getStructNodeFromName(tmpIdent).?.kind.TypeDeclaration.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"3","order":"2782","possible_hits":"3",},
{"lineNum":"  677","line":"        }"},
{"lineNum":"  678","line":"        result = field;","class":"lineCov","hits":"1","order":"2783","possible_hits":"1",},
{"lineNum":"  679","line":"        if (chain.next == null) {","class":"lineCov","hits":"1","order":"2784","possible_hits":"1",},
{"lineNum":"  680","line":"            return result;","class":"lineCov","hits":"1","order":"2785","possible_hits":"1",},
{"lineNum":"  681","line":"        } else {"},
{"lineNum":"  682","line":"            chain = ast.get(chain.next.?).kind.SelectorChain;","class":"lineCov","hits":"2","order":"2797","possible_hits":"2",},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":"    }"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"}"},
{"lineNum":"  687","line":"pub fn ParametergetParamTypes(this: ?usize, ast: *Ast) !?[]Ast.Type {","class":"lineCov","hits":"1","order":"1956","possible_hits":"1",},
{"lineNum":"  688","line":"    if (this == null) {","class":"lineCov","hits":"1","order":"1957","possible_hits":"1",},
{"lineNum":"  689","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  690","line":"    }"},
{"lineNum":"  691","line":"    const self = ast.get(this.?).kind.Parameters;","class":"lineCov","hits":"3","order":"1958","possible_hits":"3",},
{"lineNum":"  692","line":"    if (self.firstParam == null) {","class":"lineCov","hits":"1","order":"1959","possible_hits":"1",},
{"lineNum":"  693","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  694","line":"    }"},
{"lineNum":"  695","line":"    var last = self.lastParam;","class":"lineCov","hits":"1","order":"1960","possible_hits":"1",},
{"lineNum":"  696","line":"    if (last == null) {","class":"lineCov","hits":"1","order":"1961","possible_hits":"1",},
{"lineNum":"  697","line":"        last = self.firstParam.? + 1;","class":"lineCov","hits":"1","order":"1962","possible_hits":"1",},
{"lineNum":"  698","line":"    }"},
{"lineNum":"  699","line":"    var list = std.ArrayList(Ast.Type).init(ast.allocator);","class":"lineCov","hits":"1","order":"1963","possible_hits":"1",},
{"lineNum":"  700","line":"    var iter: ?usize = self.firstParam;","class":"lineCov","hits":"1","order":"1964","possible_hits":"1",},
{"lineNum":"  701","line":"    while (iter != null) {","class":"lineCov","hits":"1","order":"1965","possible_hits":"1",},
{"lineNum":"  702","line":"        const param = ast.get(iter.?).*;","class":"lineCov","hits":"3","order":"1966","possible_hits":"3",},
{"lineNum":"  703","line":"        // find next TypedIdentifier"},
{"lineNum":"  704","line":"        iter = ast.findIndexWithin(.TypedIdentifier, iter.?+1,last.? + 1);","class":"lineCov","hits":"2","order":"1967","possible_hits":"2",},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"        const ty = try TypedIdentifergetType(param,ast);","class":"lineCov","hits":"1","order":"1968","possible_hits":"1",},
{"lineNum":"  707","line":"        try list.append(ty);","class":"lineCov","hits":"3","order":"1974","possible_hits":"3",},
{"lineNum":"  708","line":"    }"},
{"lineNum":"  709","line":"    const res = try list.toOwnedSlice();","class":"linePartCov","hits":"1","order":"1975","possible_hits":"2",},
{"lineNum":"  710","line":"    list.deinit();","class":"lineCov","hits":"1","order":"1976","possible_hits":"1",},
{"lineNum":"  711","line":"    return res;","class":"lineCov","hits":"1","order":"1977","possible_hits":"1",},
{"lineNum":"  712","line":"}"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"pub fn ParamatergetParamTypeFromName(this: ?usize, ast: *Ast, name: []const u8) !?Ast.Type {","class":"lineCov","hits":"1","order":"2152","possible_hits":"1",},
{"lineNum":"  715","line":"    if (this == null) {","class":"lineCov","hits":"1","order":"2153","possible_hits":"1",},
{"lineNum":"  716","line":"        return null;","class":"lineCov","hits":"1","order":"2154","possible_hits":"1",},
{"lineNum":"  717","line":"    }"},
{"lineNum":"  718","line":"    const self = ast.get(this.?).kind.Parameters;","class":"lineCov","hits":"3","order":"2726","possible_hits":"3",},
{"lineNum":"  719","line":"    if (self.firstParam == null) {","class":"lineCov","hits":"1","order":"2727","possible_hits":"1",},
{"lineNum":"  720","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":"    var last = self.lastParam;","class":"lineCov","hits":"1","order":"2728","possible_hits":"1",},
{"lineNum":"  723","line":"    if (last == null) {","class":"lineCov","hits":"1","order":"2729","possible_hits":"1",},
{"lineNum":"  724","line":"        last = self.firstParam.? + 1;","class":"lineCov","hits":"1","order":"2760","possible_hits":"1",},
{"lineNum":"  725","line":"    }"},
{"lineNum":"  726","line":"    var iter: ?usize = self.firstParam;","class":"lineCov","hits":"1","order":"2730","possible_hits":"1",},
{"lineNum":"  727","line":"    while (iter != null) {","class":"lineCov","hits":"1","order":"2731","possible_hits":"1",},
{"lineNum":"  728","line":"        const param = ast.get(iter.?).*;","class":"lineCov","hits":"3","order":"2732","possible_hits":"3",},
{"lineNum":"  729","line":"        const identNode = ast.get(param.kind.TypedIdentifier.ident);","class":"lineCov","hits":"3","order":"2733","possible_hits":"3",},
{"lineNum":"  730","line":"        const ident = identNode.token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2734","possible_hits":"1",},
{"lineNum":"  731","line":"        if (std.mem.eql(u8, ident, name)) {","class":"lineCov","hits":"1","order":"2735","possible_hits":"1",},
{"lineNum":"  732","line":"            return try TypedIdentifergetType(param,ast);","class":"lineCov","hits":"1","order":"2736","possible_hits":"1",},
{"lineNum":"  733","line":"        }"},
{"lineNum":"  734","line":"        // find next TypedIdentifier"},
{"lineNum":"  735","line":"        iter = ast.findIndexWithin(.TypedIdentifier, iter.?+1,last.? + 1);","class":"lineCov","hits":"4","order":"2737","possible_hits":"4",},
{"lineNum":"  736","line":"    }"},
{"lineNum":"  737","line":"    return null;","class":"lineCov","hits":"1","order":"2761","possible_hits":"1",},
{"lineNum":"  738","line":"}"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"pub fn TypedIdentifergetType(tid: Ast.Node, ast: *Ast) !Ast.Type {","class":"lineCov","hits":"1","order":"1969","possible_hits":"1",},
{"lineNum":"  741","line":"    const ty = ast.get(tid.kind.TypedIdentifier.type).*.kind.Type.kind;","class":"lineCov","hits":"2","order":"1970","possible_hits":"2",},
{"lineNum":"  742","line":"    const ff = ast.get(ty).*.kind;","class":"lineCov","hits":"1","order":"1971","possible_hits":"1",},
{"lineNum":"  743","line":"    _ = switch (ff) {","class":"linePartCov","hits":"1","order":"1972","possible_hits":"3",},
{"lineNum":"  744","line":"        .IntType => return Ast.Type.Int,","class":"lineCov","hits":"1","order":"1973","possible_hits":"1",},
{"lineNum":"  745","line":"        .BoolType => return Ast.Type.Bool,","class":"lineCov","hits":"1","order":"2019","possible_hits":"1",},
{"lineNum":"  746","line":"        .Void => return Ast.Type.Void,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  747","line":"        .StructType => {"},
{"lineNum":"  748","line":"            const name = ast.get(ty).*.token._range.getSubStrFromStr(ast.input);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":"            return Ast.Type{ .Struct = name };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  750","line":"        },"},
{"lineNum":"  751","line":"        else => {"},
{"lineNum":"  752","line":"            utils.todo(\"this must be defined previously, do error proper\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  753","line":"        },"},
{"lineNum":"  754","line":"    };"},
{"lineNum":"  755","line":"    return error.InvalidType;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"}"},
{"lineNum":"  757","line":"pub fn ArgumentsgetArgumentTypes(this: ?usize, ast: *Ast, fName: []const u8, returnType: Ast.Type) !?[]Ast.Type {","class":"lineCov","hits":"1","order":"1909","possible_hits":"1",},
{"lineNum":"  758","line":"    if (this == null) {","class":"lineCov","hits":"1","order":"1910","possible_hits":"1",},
{"lineNum":"  759","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":"    }"},
{"lineNum":"  761","line":"    const self = ast.get(this.?).kind.Arguments;","class":"lineCov","hits":"3","order":"1911","possible_hits":"3",},
{"lineNum":"  762","line":"    var list = std.ArrayList(Ast.Type).init(ast.allocator);","class":"lineCov","hits":"1","order":"1912","possible_hits":"1",},
{"lineNum":"  763","line":"    const last: usize = self.lastArg orelse self.firstArg + 1;","class":"lineCov","hits":"3","order":"1913","possible_hits":"3",},
{"lineNum":"  764","line":"    var iter: ?usize = self.firstArg;","class":"lineCov","hits":"1","order":"1914","possible_hits":"1",},
{"lineNum":"  765","line":"    ast.printAst();","class":"lineCov","hits":"1","order":"1915","possible_hits":"1",},
{"lineNum":"  766","line":"    while (iter != null) {","class":"lineCov","hits":"1","order":"1916","possible_hits":"1",},
{"lineNum":"  767","line":"        const arg = ast.get(iter.?).*;","class":"lineCov","hits":"3","order":"1917","possible_hits":"3",},
{"lineNum":"  768","line":"        // find next occurence of ArgumentEnd"},
{"lineNum":"  769","line":"        const ty = try getAndCheckTypeExpression(ast, arg, fName, returnType);","class":"linePartCov","hits":"1","order":"1918","possible_hits":"2",},
{"lineNum":"  770","line":"        try list.append(ty);","class":"lineCov","hits":"1","order":"1941","possible_hits":"1",},
{"lineNum":"  771","line":"        iter = ast.findIndexWithin(.ArgumentEnd, iter.? + 1,last + 1);","class":"lineCov","hits":"1","order":"1942","possible_hits":"1",},
{"lineNum":"  772","line":"        if(iter != null){","class":"lineCov","hits":"1","order":"1950","possible_hits":"1",},
{"lineNum":"  773","line":"            iter = iter.? + 1;","class":"lineCov","hits":"3","order":"1951","possible_hits":"3",},
{"lineNum":"  774","line":"        }"},
{"lineNum":"  775","line":"    }"},
{"lineNum":"  776","line":"    const res = try list.toOwnedSlice();","class":"linePartCov","hits":"1","order":"1952","possible_hits":"2",},
{"lineNum":"  777","line":"    list.deinit();","class":"lineCov","hits":"1","order":"1953","possible_hits":"1",},
{"lineNum":"  778","line":"    return res;","class":"lineCov","hits":"1","order":"1954","possible_hits":"1",},
{"lineNum":"  779","line":"}"},
{"lineNum":"  780","line":"pub fn LValuegetType(this: ?usize, ast: *Ast, fName: []const u8) !?Ast.Type {","class":"lineCov","hits":"1","order":"2112","possible_hits":"1",},
{"lineNum":"  781","line":"    if (this == null) {","class":"lineCov","hits":"1","order":"2113","possible_hits":"1",},
{"lineNum":"  782","line":"        // TODO add error"},
{"lineNum":"  783","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  784","line":"    }"},
{"lineNum":"  785","line":"    const self = ast.get(this.?).kind.LValue;","class":"lineCov","hits":"3","order":"2114","possible_hits":"3",},
{"lineNum":"  786","line":"    const identNode = ast.get(self.ident);","class":"lineCov","hits":"1","order":"2115","possible_hits":"1",},
{"lineNum":"  787","line":"    const ident = identNode.token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2116","possible_hits":"1",},
{"lineNum":"  788","line":"    // const g_decl = ast.getDeclarationGlobalFromName(ident);"},
{"lineNum":"  789","line":"    const f_decl = try getAndCheckLocalIdentifier(ast, identNode.*, fName);","class":"linePartCov","hits":"1","order":"2117","possible_hits":"2",},
{"lineNum":"  790","line":"    std.debug.print(\"name {s}\\n\", .{ident});","class":"lineCov","hits":"1","order":"2168","possible_hits":"1",},
{"lineNum":"  791","line":"    var decl = f_decl;","class":"lineCov","hits":"1","order":"2169","possible_hits":"1",},
{"lineNum":"  792","line":"    // if (decl == null) {"},
{"lineNum":"  793","line":"    //     // TODO: add error"},
{"lineNum":"  794","line":"    //     return error.InvalidAssignmentNoDeclaration;"},
{"lineNum":"  795","line":"    // }"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"    var result: ?Ast.Type = null;","class":"lineCov","hits":"1","order":"2170","possible_hits":"1",},
{"lineNum":"  798","line":"    var tmpIdent = ident;","class":"lineCov","hits":"1","order":"2171","possible_hits":"1",},
{"lineNum":"  799","line":"    var chaini = self.chain;","class":"lineCov","hits":"1","order":"2172","possible_hits":"1",},
{"lineNum":"  800","line":"    if (chaini == null) {","class":"lineCov","hits":"1","order":"2173","possible_hits":"1",},
{"lineNum":"  801","line":"        return decl;","class":"lineCov","hits":"1","order":"2174","possible_hits":"1",},
{"lineNum":"  802","line":"    }"},
{"lineNum":"  803","line":"    tmpIdent = decl.Struct;","class":"lineCov","hits":"3","order":"2267","possible_hits":"3",},
{"lineNum":"  804","line":"    tmpIdent = ast.get(ast.getStructNodeFromName(tmpIdent).?.kind.TypeDeclaration.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"3","order":"2268","possible_hits":"3",},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"    var chain = ast.get(chaini.?).kind.SelectorChain;","class":"lineCov","hits":"2","order":"2273","possible_hits":"2",},
{"lineNum":"  807","line":"    while (true) {"},
{"lineNum":"  808","line":"        const chainIdent = ast.get(chain.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2274","possible_hits":"1",},
{"lineNum":"  809","line":"        const field = ast.getStructFieldType(tmpIdent, chainIdent);","class":"lineCov","hits":"1","order":"2275","possible_hits":"1",},
{"lineNum":"  810","line":"        if (field == null) {","class":"lineCov","hits":"1","order":"2291","possible_hits":"1",},
{"lineNum":"  811","line":"            // TODO: add error"},
{"lineNum":"  812","line":"            return error.StructHasNoMember;","class":"lineCov","hits":"1","order":"2311","possible_hits":"1",},
{"lineNum":"  813","line":"        }"},
{"lineNum":"  814","line":"        if(field.?.isStruct()){","class":"lineCov","hits":"2","order":"2292","possible_hits":"2",},
{"lineNum":"  815","line":"            tmpIdent = field.?.Struct;","class":"lineCov","hits":"3","order":"2577","possible_hits":"3",},
{"lineNum":"  816","line":"            tmpIdent = ast.get(ast.getStructNodeFromName(tmpIdent).?.kind.TypeDeclaration.ident).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"3","order":"2293","possible_hits":"3",},
{"lineNum":"  817","line":"        }"},
{"lineNum":"  818","line":"        result = field;","class":"lineCov","hits":"1","order":"2294","possible_hits":"1",},
{"lineNum":"  819","line":"        if (chain.next == null) {","class":"lineCov","hits":"1","order":"2295","possible_hits":"1",},
{"lineNum":"  820","line":"            return result;","class":"lineCov","hits":"1","order":"2296","possible_hits":"1",},
{"lineNum":"  821","line":"        } else {"},
{"lineNum":"  822","line":"            chain = ast.get(chain.next.?).kind.SelectorChain;","class":"lineCov","hits":"2","order":"2578","possible_hits":"2",},
{"lineNum":"  823","line":"        }"},
{"lineNum":"  824","line":"    }"},
{"lineNum":"  825","line":"}"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"pub fn StatemenListgetList(this: ?usize, ast: *Ast) TypeError!?[]usize {","class":"lineCov","hits":"1","order":"1875","possible_hits":"1",},
{"lineNum":"  829","line":"    if (this == null) {","class":"lineCov","hits":"1","order":"1876","possible_hits":"1",},
{"lineNum":"  830","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"    }"},
{"lineNum":"  832","line":"    const self = ast.get(this.?).kind.StatementList;","class":"lineCov","hits":"3","order":"1877","possible_hits":"3",},
{"lineNum":"  833","line":"    var list = std.ArrayList(usize).init(ast.allocator);","class":"lineCov","hits":"1","order":"1878","possible_hits":"1",},
{"lineNum":"  834","line":"    const last = self.lastStatement orelse self.firstStatement + 1;","class":"lineCov","hits":"3","order":"1879","possible_hits":"3",},
{"lineNum":"  835","line":"    var iter: ?usize = self.firstStatement;","class":"lineCov","hits":"1","order":"1880","possible_hits":"1",},
{"lineNum":"  836","line":"    while (iter != null){","class":"lineCov","hits":"1","order":"1881","possible_hits":"1",},
{"lineNum":"  837","line":"        if(iter.? > last){","class":"lineCov","hits":"2","order":"1882","possible_hits":"2",},
{"lineNum":"  838","line":"            break;","class":"lineCov","hits":"1","order":"1886","possible_hits":"1",},
{"lineNum":"  839","line":"        }"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"        const stmt = ast.get(iter.?).kind.Statement;","class":"lineCov","hits":"3","order":"1883","possible_hits":"3",},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"        try list.append(stmt.statement);","class":"linePartCov","hits":"1","order":"1884","possible_hits":"2",},
{"lineNum":"  844","line":"        iter = stmt.finalIndex;","class":"linePartCov","hits":"2","order":"1885","possible_hits":"3",},
{"lineNum":"  845","line":"    }"},
{"lineNum":"  846","line":"    const res = try list.toOwnedSlice();","class":"linePartCov","hits":"1","order":"1887","possible_hits":"2",},
{"lineNum":"  847","line":"    list.deinit();","class":"lineCov","hits":"1","order":"1888","possible_hits":"1",},
{"lineNum":"  848","line":"    return res;","class":"lineCov","hits":"1","order":"1889","possible_hits":"1",},
{"lineNum":"  849","line":"}"},
{"lineNum":"  850","line":"///////////"},
{"lineNum":"  851","line":"// TESTS //"},
{"lineNum":"  852","line":"///////////"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"const ting = std.testing;"},
{"lineNum":"  856","line":"const debugAlloc = std.heap.page_allocator;"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"fn testMe(input: []const u8) !Ast {","class":"lineCov","hits":"1","order":"701","possible_hits":"1",},
{"lineNum":"  862","line":"    const tokens = try @import(\"lexer.zig\").Lexer.tokenizeFromStr(input, debugAlloc);","class":"lineCov","hits":"1","order":"702","possible_hits":"1",},
{"lineNum":"  863","line":"    const parser = try @import(\"parser.zig\").Parser.parseTokens(tokens, input, debugAlloc);","class":"lineCov","hits":"1","order":"821","possible_hits":"1",},
{"lineNum":"  864","line":"    const ast = Ast.initFromParser(parser);","class":"lineCov","hits":"1","order":"1153","possible_hits":"1",},
{"lineNum":"  865","line":"    return ast;","class":"lineCov","hits":"1","order":"1195","possible_hits":"1",},
{"lineNum":"  866","line":"}"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"test \"sema.no_main\" {","class":"lineCov","hits":"1","order":"698","possible_hits":"1",},
{"lineNum":"  869","line":"    const source = \"fun foo() void {return;}\";","class":"lineCov","hits":"1","order":"699","possible_hits":"1",},
{"lineNum":"  870","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"700","possible_hits":"1",},
{"lineNum":"  871","line":"    try ting.expectError(SemaError.NoMain, ensureHasMain(&ast));","class":"lineCov","hits":"1","order":"1196","possible_hits":"1",},
{"lineNum":"  872","line":"}"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"test \"sema.has_main\" {","class":"lineCov","hits":"1","order":"1297","possible_hits":"1",},
{"lineNum":"  875","line":"    defer log.print();","class":"linePartCov","hits":"1","order":"1309","possible_hits":"3",},
{"lineNum":"  876","line":"    const source = \"fun main() void {return;}\";","class":"lineCov","hits":"1","order":"1298","possible_hits":"1",},
{"lineNum":"  877","line":"    const ast = try testMe(source);","class":"linePartCov","hits":"1","order":"1299","possible_hits":"2",},
{"lineNum":"  878","line":"    try ensureHasMain(&ast);","class":"linePartCov","hits":"1","order":"1308","possible_hits":"2",},
{"lineNum":"  879","line":"}"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"test \"sema.not_all_return_paths_void\" {","class":"lineCov","hits":"1","order":"1313","possible_hits":"1",},
{"lineNum":"  882","line":"    const source = \"fun main() void {if (true) {return;} else {return 1;}}\";","class":"lineCov","hits":"1","order":"1314","possible_hits":"1",},
{"lineNum":"  883","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1315","possible_hits":"1",},
{"lineNum":"  884","line":"    try ting.expectEqual(ast.numNodes(.Return, 0), 2);","class":"lineCov","hits":"1","order":"1536","possible_hits":"1",},
{"lineNum":"  885","line":"    const result = allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1546","possible_hits":"1",},
{"lineNum":"  886","line":"    try ting.expectError(SemaError.InvalidReturnPath, result);","class":"lineCov","hits":"1","order":"1600","possible_hits":"1",},
{"lineNum":"  887","line":"}"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"test \"sema.all_return_paths_void\" {","class":"lineCov","hits":"1","order":"1601","possible_hits":"1",},
{"lineNum":"  890","line":"    const source = \"fun main() void {if (true) {return;} else {return;} return;}\";","class":"lineCov","hits":"1","order":"1602","possible_hits":"1",},
{"lineNum":"  891","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1603","possible_hits":"1",},
{"lineNum":"  892","line":"    try allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1604","possible_hits":"1",},
{"lineNum":"  893","line":"}"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"test \"sema.all_return_paths_bool\" {","class":"lineCov","hits":"1","order":"1669","possible_hits":"1",},
{"lineNum":"  896","line":"    const source = \"fun main() bool {if (true) {return true;} else {return false;}}\";","class":"lineCov","hits":"1","order":"1670","possible_hits":"1",},
{"lineNum":"  897","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1671","possible_hits":"1",},
{"lineNum":"  898","line":"    try allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1687","possible_hits":"1",},
{"lineNum":"  899","line":"}"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"test \"sema.returns_in_both_sides_of_if_else\" {","class":"lineCov","hits":"1","order":"1693","possible_hits":"1",},
{"lineNum":"  902","line":"    const source = \"fun main() bool {if (true) {return true;} else {return false;}}\";","class":"lineCov","hits":"1","order":"1694","possible_hits":"1",},
{"lineNum":"  903","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1695","possible_hits":"1",},
{"lineNum":"  904","line":"    try allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1696","possible_hits":"1",},
{"lineNum":"  905","line":"}"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"test \"sema.not_all_paths_return\" {","class":"lineCov","hits":"1","order":"1697","possible_hits":"1",},
{"lineNum":"  908","line":"    const source = \"fun main() bool {if (true) {return true;}}\";","class":"lineCov","hits":"1","order":"1698","possible_hits":"1",},
{"lineNum":"  909","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1699","possible_hits":"1",},
{"lineNum":"  910","line":"    try ting.expectEqual(ast.numNodes(.Return, 0), 1);","class":"lineCov","hits":"1","order":"1700","possible_hits":"1",},
{"lineNum":"  911","line":"    const result = allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1701","possible_hits":"1",},
{"lineNum":"  912","line":"    try ting.expectError(SemaError.InvalidReturnPath, result);","class":"lineCov","hits":"1","order":"1713","possible_hits":"1",},
{"lineNum":"  913","line":"}"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"test \"sema.not_all_paths_return_in_nested_if\" {","class":"lineCov","hits":"1","order":"1714","possible_hits":"1",},
{"lineNum":"  916","line":"    const source = \"fun main() bool {if (true) {if (false) {return true;} else {return false;}}}\";","class":"lineCov","hits":"1","order":"1715","possible_hits":"1",},
{"lineNum":"  917","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1716","possible_hits":"1",},
{"lineNum":"  918","line":"    try ting.expectEqual(ast.numNodes(.Return, 0), 2);","class":"lineCov","hits":"1","order":"1717","possible_hits":"1",},
{"lineNum":"  919","line":"    const result = allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1718","possible_hits":"1",},
{"lineNum":"  920","line":"    try ting.expectError(SemaError.InvalidReturnPath, result);","class":"lineCov","hits":"1","order":"1719","possible_hits":"1",},
{"lineNum":"  921","line":"}"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"test \"sema.nested_fallthrough_fail_on_ifelse\" {","class":"lineCov","hits":"1","order":"1720","possible_hits":"1",},
{"lineNum":"  924","line":"    const source = \"fun main() bool {if (true) {if (false) {if(true){return true;}} else {return false;}}}\";","class":"lineCov","hits":"1","order":"1721","possible_hits":"1",},
{"lineNum":"  925","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1722","possible_hits":"1",},
{"lineNum":"  926","line":"    try ting.expectEqual(ast.numNodes(.Return, 0), 2);","class":"lineCov","hits":"1","order":"1723","possible_hits":"1",},
{"lineNum":"  927","line":"    const result = allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1724","possible_hits":"1",},
{"lineNum":"  928","line":"    try ting.expectError(SemaError.InvalidReturnPath, result);","class":"lineCov","hits":"1","order":"1725","possible_hits":"1",},
{"lineNum":"  929","line":"}"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"test \"sema.super_nested_fallthrough_fail_on_ifelse\" {","class":"lineCov","hits":"1","order":"1726","possible_hits":"1",},
{"lineNum":"  932","line":"    const source = \"fun main() bool {if (true) {if (false) {if(true){if(false){return true;}} else {return false;}}}}\";","class":"lineCov","hits":"1","order":"1727","possible_hits":"1",},
{"lineNum":"  933","line":"    const ast = try testMe(source);","class":"lineCov","hits":"1","order":"1728","possible_hits":"1",},
{"lineNum":"  934","line":"    try ting.expectEqual(ast.numNodes(.Return, 0), 2);","class":"lineCov","hits":"1","order":"1729","possible_hits":"1",},
{"lineNum":"  935","line":"    const result = allFunctionsHaveValidReturnPaths(&ast);","class":"lineCov","hits":"1","order":"1730","possible_hits":"1",},
{"lineNum":"  936","line":"    try ting.expectError(SemaError.InvalidReturnPath, result);","class":"lineCov","hits":"1","order":"1731","possible_hits":"1",},
{"lineNum":"  937","line":"}"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"test \"sema.get_and_check_invocation\" {","class":"lineCov","hits":"1","order":"1732","possible_hits":"1",},
{"lineNum":"  940","line":"    const source = \"fun foo () void {} fun main() void {foo();}\";","class":"lineCov","hits":"1","order":"1733","possible_hits":"1",},
{"lineNum":"  941","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"1734","possible_hits":"1",},
{"lineNum":"  942","line":"    var func = ast.getFunctionFromName(\"foo\");","class":"lineCov","hits":"1","order":"1774","possible_hits":"1",},
{"lineNum":"  943","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"1790","possible_hits":"2",},
{"lineNum":"  944","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"1791","possible_hits":"2",},
{"lineNum":"  945","line":"}"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"test \"sema.get_and_check_invocation_with_args\" {","class":"lineCov","hits":"1","order":"1811","possible_hits":"1",},
{"lineNum":"  948","line":"    const source = \"fun foo (int a) void {} fun main() void {foo(1);}\";","class":"lineCov","hits":"1","order":"1812","possible_hits":"1",},
{"lineNum":"  949","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"1813","possible_hits":"1",},
{"lineNum":"  950","line":"    var func = ast.getFunctionFromName(\"foo\");","class":"lineCov","hits":"1","order":"1851","possible_hits":"1",},
{"lineNum":"  951","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"1852","possible_hits":"2",},
{"lineNum":"  952","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"1853","possible_hits":"2",},
{"lineNum":"  953","line":"}"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"test \"sema.get_and_check_invocation_with_args_fail\" {","class":"lineCov","hits":"1","order":"1854","possible_hits":"1",},
{"lineNum":"  956","line":"    const source = \"fun foo (int a) void {} fun main() void {foo(true);}\";","class":"lineCov","hits":"1","order":"1855","possible_hits":"1",},
{"lineNum":"  957","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"1856","possible_hits":"1",},
{"lineNum":"  958","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"1857","possible_hits":"1",},
{"lineNum":"  959","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"1858","possible_hits":"2",},
{"lineNum":"  960","line":"    try ting.expectError(TypeError.InvalidFunctionCall, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"1859","possible_hits":"2",},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"test \"sema_get_and_check_invocations_with_mul_args_pass\"{","class":"lineCov","hits":"1","order":"2003","possible_hits":"1",},
{"lineNum":"  964","line":"    const source = \"fun foo (int a, bool b) void {} fun main() void {foo(1, true);}\";","class":"lineCov","hits":"1","order":"2004","possible_hits":"1",},
{"lineNum":"  965","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2005","possible_hits":"1",},
{"lineNum":"  966","line":"    var func = ast.getFunctionFromName(\"foo\");","class":"lineCov","hits":"1","order":"2009","possible_hits":"1",},
{"lineNum":"  967","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2010","possible_hits":"2",},
{"lineNum":"  968","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2011","possible_hits":"2",},
{"lineNum":"  969","line":"}"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"test \"sema_get_and_check_invocations_with_mul_args_fail\"{","class":"lineCov","hits":"1","order":"2012","possible_hits":"1",},
{"lineNum":"  972","line":"    const source = \"fun foo (int a, bool b) void {} fun main() void {foo(1, 1);}\";","class":"lineCov","hits":"1","order":"2013","possible_hits":"1",},
{"lineNum":"  973","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2014","possible_hits":"1",},
{"lineNum":"  974","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2015","possible_hits":"1",},
{"lineNum":"  975","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2016","possible_hits":"2",},
{"lineNum":"  976","line":"    try ting.expectError(TypeError.InvalidFunctionCall, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2017","possible_hits":"2",},
{"lineNum":"  977","line":"}"},
{"lineNum":"  978","line":""},
{"lineNum":"  979","line":"test \"sema_get_and_check_invocations_with_mul_args_fail2\"{","class":"lineCov","hits":"1","order":"2021","possible_hits":"1",},
{"lineNum":"  980","line":"    const source = \"fun foo (int a, bool b) void {} fun main() void {foo(true, true);}\";","class":"lineCov","hits":"1","order":"2022","possible_hits":"1",},
{"lineNum":"  981","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2023","possible_hits":"1",},
{"lineNum":"  982","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2024","possible_hits":"1",},
{"lineNum":"  983","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2025","possible_hits":"2",},
{"lineNum":"  984","line":"    try ting.expectError(TypeError.InvalidFunctionCall, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2026","possible_hits":"2",},
{"lineNum":"  985","line":"}"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"test \"sema.get_and_check_invocation_with_return\" {","class":"lineCov","hits":"1","order":"2027","possible_hits":"1",},
{"lineNum":"  988","line":"    const source = \"fun foo () int {return 1;} fun main() void {foo();}\";","class":"lineCov","hits":"1","order":"2028","possible_hits":"1",},
{"lineNum":"  989","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2029","possible_hits":"1",},
{"lineNum":"  990","line":"    var func = ast.getFunctionFromName(\"foo\");","class":"lineCov","hits":"1","order":"2030","possible_hits":"1",},
{"lineNum":"  991","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2031","possible_hits":"2",},
{"lineNum":"  992","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2032","possible_hits":"2",},
{"lineNum":"  993","line":"}"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"test \"sema.get_and_check_invocation_with_return_fail\" {","class":"lineCov","hits":"1","order":"2044","possible_hits":"1",},
{"lineNum":"  996","line":"    const source = \"fun foo () bool {return 1;} fun main() void {foo();}\";","class":"lineCov","hits":"1","order":"2045","possible_hits":"1",},
{"lineNum":"  997","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2046","possible_hits":"1",},
{"lineNum":"  998","line":"    var func = ast.getFunctionFromName(\"foo\");","class":"lineCov","hits":"1","order":"2047","possible_hits":"1",},
{"lineNum":"  999","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2048","possible_hits":"2",},
{"lineNum":" 1000","line":"    try ting.expectError(TypeError.InvalidReturnType, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2049","possible_hits":"2",},
{"lineNum":" 1001","line":"}"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"test \"sema.check_assignment_int\" {","class":"lineCov","hits":"1","order":"2050","possible_hits":"1",},
{"lineNum":" 1004","line":"    const source = \"fun main() void {int a; a = 1;}\";","class":"lineCov","hits":"1","order":"2051","possible_hits":"1",},
{"lineNum":" 1005","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2052","possible_hits":"1",},
{"lineNum":" 1006","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2101","possible_hits":"1",},
{"lineNum":" 1007","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2102","possible_hits":"2",},
{"lineNum":" 1008","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2103","possible_hits":"2",},
{"lineNum":" 1009","line":"}"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"test \"sema.check_assignment_bool\" {","class":"lineCov","hits":"1","order":"2187","possible_hits":"1",},
{"lineNum":" 1012","line":"    const source = \"fun main() void {bool a; a = true;}\";","class":"lineCov","hits":"1","order":"2188","possible_hits":"1",},
{"lineNum":" 1013","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2189","possible_hits":"1",},
{"lineNum":" 1014","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2190","possible_hits":"1",},
{"lineNum":" 1015","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2191","possible_hits":"2",},
{"lineNum":" 1016","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2192","possible_hits":"2",},
{"lineNum":" 1017","line":"}"},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"test \"sema.check_assignment_fail\" {","class":"lineCov","hits":"1","order":"2194","possible_hits":"1",},
{"lineNum":" 1020","line":"    const source = \"fun main() void {int a; a = true;}\";","class":"lineCov","hits":"1","order":"2195","possible_hits":"1",},
{"lineNum":" 1021","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2196","possible_hits":"1",},
{"lineNum":" 1022","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2197","possible_hits":"1",},
{"lineNum":" 1023","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2198","possible_hits":"2",},
{"lineNum":" 1024","line":"    try ting.expectError(TypeError.InvalidAssignmentType, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2199","possible_hits":"2",},
{"lineNum":" 1025","line":"}"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"test \"sema.check_assignment_fail2\" {","class":"lineCov","hits":"1","order":"2200","possible_hits":"1",},
{"lineNum":" 1028","line":"    const source = \"fun main() void {bool a; a = 1;}\";","class":"lineCov","hits":"1","order":"2201","possible_hits":"1",},
{"lineNum":" 1029","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2202","possible_hits":"1",},
{"lineNum":" 1030","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2203","possible_hits":"1",},
{"lineNum":" 1031","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2204","possible_hits":"2",},
{"lineNum":" 1032","line":"    try ting.expectError(TypeError.InvalidAssignmentType, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2205","possible_hits":"2",},
{"lineNum":" 1033","line":"}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"test \"sema.check_struct_assignment_member\" {","class":"lineCov","hits":"1","order":"2206","possible_hits":"1",},
{"lineNum":" 1036","line":"    const source = \"struct S {int a;}; fun main() void {struct S s; s.a = 1;}\";","class":"lineCov","hits":"1","order":"2207","possible_hits":"1",},
{"lineNum":" 1037","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2208","possible_hits":"1",},
{"lineNum":" 1038","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2261","possible_hits":"1",},
{"lineNum":" 1039","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2262","possible_hits":"2",},
{"lineNum":" 1040","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2263","possible_hits":"2",},
{"lineNum":" 1041","line":"}"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"test \"sema.check_struct_assignment_member_fail\" {","class":"lineCov","hits":"1","order":"2297","possible_hits":"1",},
{"lineNum":" 1044","line":"    const source = \"struct S {int a;}; fun main() void {struct S s; s.a = true;}\";","class":"lineCov","hits":"1","order":"2298","possible_hits":"1",},
{"lineNum":" 1045","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2299","possible_hits":"1",},
{"lineNum":" 1046","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2300","possible_hits":"1",},
{"lineNum":" 1047","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2301","possible_hits":"2",},
{"lineNum":" 1048","line":"    try ting.expectError(TypeError.InvalidAssignmentType, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2302","possible_hits":"2",},
{"lineNum":" 1049","line":"}"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"test \"sema.check_struct_assignment_member_no_such_member\" {","class":"lineCov","hits":"1","order":"2303","possible_hits":"1",},
{"lineNum":" 1052","line":"    const source = \"struct S {int a;}; fun main() void {struct S s; s.b = 1;}\";","class":"lineCov","hits":"1","order":"2304","possible_hits":"1",},
{"lineNum":" 1053","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2305","possible_hits":"1",},
{"lineNum":" 1054","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2306","possible_hits":"1",},
{"lineNum":" 1055","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2307","possible_hits":"2",},
{"lineNum":" 1056","line":"    try ting.expectError(TypeError.StructHasNoMember, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2308","possible_hits":"2",},
{"lineNum":" 1057","line":"}"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"test \"sema.check_print_int\" {","class":"lineCov","hits":"1","order":"2312","possible_hits":"1",},
{"lineNum":" 1060","line":"    const source = \"fun main() void {print(1);}\";","class":"lineCov","hits":"1","order":"2313","possible_hits":"1",},
{"lineNum":" 1061","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2314","possible_hits":"1",},
{"lineNum":" 1062","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2341","possible_hits":"1",},
{"lineNum":" 1063","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2342","possible_hits":"2",},
{"lineNum":" 1064","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2343","possible_hits":"2",},
{"lineNum":" 1065","line":"}"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"test \"sema.check_print_bool\" {","class":"lineCov","hits":"1","order":"2353","possible_hits":"1",},
{"lineNum":" 1068","line":"    const source = \"fun main() void {print(true);}\";","class":"lineCov","hits":"1","order":"2354","possible_hits":"1",},
{"lineNum":" 1069","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2355","possible_hits":"1",},
{"lineNum":" 1070","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2356","possible_hits":"1",},
{"lineNum":" 1071","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2357","possible_hits":"2",},
{"lineNum":" 1072","line":"    // expect error"},
{"lineNum":" 1073","line":"    try ting.expectError(TypeError.InvalidReadExptedTypeInt, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2358","possible_hits":"2",},
{"lineNum":" 1074","line":"}"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"test \"sema.check_binop_int\" {","class":"lineCov","hits":"1","order":"2359","possible_hits":"1",},
{"lineNum":" 1077","line":"    const source = \"fun main() void {int a; a = 1 + 1 + 1;}\";","class":"lineCov","hits":"1","order":"2360","possible_hits":"1",},
{"lineNum":" 1078","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2361","possible_hits":"1",},
{"lineNum":" 1079","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2391","possible_hits":"1",},
{"lineNum":" 1080","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2392","possible_hits":"2",},
{"lineNum":" 1081","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2393","possible_hits":"2",},
{"lineNum":" 1082","line":"}"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"test \"sema.check_binop_int_many\" {","class":"lineCov","hits":"1","order":"2411","possible_hits":"1",},
{"lineNum":" 1085","line":"    const source = \"fun main() void {int a; int b; int c; a =1; b = 2; c = a + b;}\";","class":"lineCov","hits":"1","order":"2412","possible_hits":"1",},
{"lineNum":" 1086","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2413","possible_hits":"1",},
{"lineNum":" 1087","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2418","possible_hits":"1",},
{"lineNum":" 1088","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2419","possible_hits":"2",},
{"lineNum":" 1089","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2420","possible_hits":"2",},
{"lineNum":" 1090","line":"}"},
{"lineNum":" 1091","line":"test \"sema.check_binop_int_fail\" {","class":"lineCov","hits":"1","order":"2423","possible_hits":"1",},
{"lineNum":" 1092","line":"    const source = \"fun main() void {int a; a = 1 + true;}\";","class":"lineCov","hits":"1","order":"2424","possible_hits":"1",},
{"lineNum":" 1093","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2425","possible_hits":"1",},
{"lineNum":" 1094","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2426","possible_hits":"1",},
{"lineNum":" 1095","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2427","possible_hits":"2",},
{"lineNum":" 1096","line":"    // expect error"},
{"lineNum":" 1097","line":"    try ting.expectError(TypeError.BinaryOperationTypeMismatch, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2428","possible_hits":"2",},
{"lineNum":" 1098","line":"}"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"test \"sema.check_binop_int_function_call\" {","class":"lineCov","hits":"1","order":"2430","possible_hits":"1",},
{"lineNum":" 1101","line":"    const source = \"fun foo() int {return 1;} fun main() void {int a; a = 1 + foo();}\";","class":"lineCov","hits":"1","order":"2431","possible_hits":"1",},
{"lineNum":" 1102","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2432","possible_hits":"1",},
{"lineNum":" 1103","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2443","possible_hits":"1",},
{"lineNum":" 1104","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2444","possible_hits":"2",},
{"lineNum":" 1105","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2445","possible_hits":"2",},
{"lineNum":" 1106","line":"}"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"test \"sema.check_binop_int_function_call_fail\" {","class":"lineCov","hits":"1","order":"2454","possible_hits":"1",},
{"lineNum":" 1109","line":"    const source = \"fun foo() bool {return true;} fun main() void {int a; a = 1 + foo();}\";","class":"lineCov","hits":"1","order":"2455","possible_hits":"1",},
{"lineNum":" 1110","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2456","possible_hits":"1",},
{"lineNum":" 1111","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2457","possible_hits":"1",},
{"lineNum":" 1112","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2458","possible_hits":"2",},
{"lineNum":" 1113","line":"    // expect error"},
{"lineNum":" 1114","line":"    try ting.expectError(TypeError.BinaryOperationTypeMismatch, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2459","possible_hits":"2",},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"test \"sema.check_binop_all_ops\" {","class":"lineCov","hits":"1","order":"2460","possible_hits":"1",},
{"lineNum":" 1118","line":"    const source = \"fun main() void {int a; a = 1 + 1 - 1 * 1 / 1;}\";","class":"lineCov","hits":"1","order":"2461","possible_hits":"1",},
{"lineNum":" 1119","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2462","possible_hits":"1",},
{"lineNum":" 1120","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2463","possible_hits":"1",},
{"lineNum":" 1121","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2464","possible_hits":"2",},
{"lineNum":" 1122","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2465","possible_hits":"2",},
{"lineNum":" 1123","line":"}"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"test \"sema.check_binop_all_ops_and_logic\" {","class":"lineCov","hits":"1","order":"2466","possible_hits":"1",},
{"lineNum":" 1126","line":"    const source = \"fun main() void {bool a; a = 1 + 1 - 1 * 1 / 1 > 1 && true || false;}\";","class":"lineCov","hits":"1","order":"2467","possible_hits":"1",},
{"lineNum":" 1127","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2468","possible_hits":"1",},
{"lineNum":" 1128","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2477","possible_hits":"1",},
{"lineNum":" 1129","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2478","possible_hits":"2",},
{"lineNum":" 1130","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2479","possible_hits":"2",},
{"lineNum":" 1131","line":"}"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"test \"sema.check_binop_many_ops_fail\" {","class":"lineCov","hits":"1","order":"2494","possible_hits":"1",},
{"lineNum":" 1134","line":"    const source = \"fun main() void {int a; a = 1 + 1 - 1 * 1 / true;}\";","class":"lineCov","hits":"1","order":"2495","possible_hits":"1",},
{"lineNum":" 1135","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2496","possible_hits":"1",},
{"lineNum":" 1136","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2497","possible_hits":"1",},
{"lineNum":" 1137","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2498","possible_hits":"2",},
{"lineNum":" 1138","line":"    // expect error"},
{"lineNum":" 1139","line":"    try ting.expectError(TypeError.BinaryOperationTypeMismatch, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2499","possible_hits":"2",},
{"lineNum":" 1140","line":"}"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"test \"sema.check_unop_not\" {","class":"lineCov","hits":"1","order":"2500","possible_hits":"1",},
{"lineNum":" 1143","line":"    const source = \"fun main() void {bool a; a = !true;}\";","class":"lineCov","hits":"1","order":"2501","possible_hits":"1",},
{"lineNum":" 1144","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2502","possible_hits":"1",},
{"lineNum":" 1145","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2516","possible_hits":"1",},
{"lineNum":" 1146","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2517","possible_hits":"2",},
{"lineNum":" 1147","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2518","possible_hits":"2",},
{"lineNum":" 1148","line":"}"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"test \"sema.check_unop_not_fail\" {","class":"lineCov","hits":"1","order":"2526","possible_hits":"1",},
{"lineNum":" 1151","line":"    const source = \"fun main() void {int a; a = !1;}\";","class":"lineCov","hits":"1","order":"2527","possible_hits":"1",},
{"lineNum":" 1152","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2528","possible_hits":"1",},
{"lineNum":" 1153","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2529","possible_hits":"1",},
{"lineNum":" 1154","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2530","possible_hits":"2",},
{"lineNum":" 1155","line":"    // expect error"},
{"lineNum":" 1156","line":"    try ting.expectError(TypeError.InvalidTypeExpectedBool, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2531","possible_hits":"2",},
{"lineNum":" 1157","line":"}"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"test \"sema.check_unop_minus\" {","class":"lineCov","hits":"1","order":"2533","possible_hits":"1",},
{"lineNum":" 1160","line":"    const source = \"fun main() void {int a; a = -1;}\";","class":"lineCov","hits":"1","order":"2534","possible_hits":"1",},
{"lineNum":" 1161","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2535","possible_hits":"1",},
{"lineNum":" 1162","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2536","possible_hits":"1",},
{"lineNum":" 1163","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2537","possible_hits":"2",},
{"lineNum":" 1164","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2538","possible_hits":"2",},
{"lineNum":" 1165","line":"}"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"test \"sema.check_unop_minus_fail\" {","class":"lineCov","hits":"1","order":"2543","possible_hits":"1",},
{"lineNum":" 1168","line":"    const source = \"fun main() void {bool a; a = -true;}\";","class":"lineCov","hits":"1","order":"2544","possible_hits":"1",},
{"lineNum":" 1169","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2545","possible_hits":"1",},
{"lineNum":" 1170","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2546","possible_hits":"1",},
{"lineNum":" 1171","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2547","possible_hits":"2",},
{"lineNum":" 1172","line":"    // expect error"},
{"lineNum":" 1173","line":"    try ting.expectError(TypeError.InvalidTypeExptectedInt, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2548","possible_hits":"2",},
{"lineNum":" 1174","line":"}"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"//FIXME: this seems so wrong lmao"},
{"lineNum":" 1177","line":"test \"sema.check_unop_in_binops\" {","class":"lineCov","hits":"1","order":"2550","possible_hits":"1",},
{"lineNum":" 1178","line":"    const source = \"fun main() void {int a; a = 1 + -1 + 1 - -1 * 1 / -1;}\";","class":"lineCov","hits":"1","order":"2551","possible_hits":"1",},
{"lineNum":" 1179","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2552","possible_hits":"1",},
{"lineNum":" 1180","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2553","possible_hits":"1",},
{"lineNum":" 1181","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2554","possible_hits":"2",},
{"lineNum":" 1182","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2555","possible_hits":"2",},
{"lineNum":" 1183","line":"}"},
{"lineNum":" 1184","line":""},
{"lineNum":" 1185","line":"test \"sema.check_logical_unop_in_binops\" {","class":"lineCov","hits":"1","order":"2557","possible_hits":"1",},
{"lineNum":" 1186","line":"    const source = \"fun main() void {bool a; a = !true && !false || !true && !false && !true || !false && !true || !false && !true && !false;}\";","class":"lineCov","hits":"1","order":"2558","possible_hits":"1",},
{"lineNum":" 1187","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2559","possible_hits":"1",},
{"lineNum":" 1188","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2560","possible_hits":"1",},
{"lineNum":" 1189","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2561","possible_hits":"2",},
{"lineNum":" 1190","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2562","possible_hits":"2",},
{"lineNum":" 1191","line":"}"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"test \"sema.check_logical_unop_in_binops_fail\" {","class":"lineCov","hits":"1","order":"2563","possible_hits":"1",},
{"lineNum":" 1194","line":"    const source = \"fun main() void {bool a; a = !1 && !false || !true && !false && !true || !false && !true || !false && !true && !false;}\";","class":"lineCov","hits":"1","order":"2564","possible_hits":"1",},
{"lineNum":" 1195","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2565","possible_hits":"1",},
{"lineNum":" 1196","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2566","possible_hits":"1",},
{"lineNum":" 1197","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2567","possible_hits":"2",},
{"lineNum":" 1198","line":"    // expect error"},
{"lineNum":" 1199","line":"    try ting.expectError(TypeError.InvalidTypeExpectedBool, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2568","possible_hits":"2",},
{"lineNum":" 1200","line":"}"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"test \"sema.check_deep_struct\" {","class":"lineCov","hits":"1","order":"2569","possible_hits":"1",},
{"lineNum":" 1203","line":"    const source = \"struct S {int a; struct S s;}; fun main() void {struct S s; s.s.s.s.s.s.a = 1;}\";","class":"lineCov","hits":"1","order":"2570","possible_hits":"1",},
{"lineNum":" 1204","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2571","possible_hits":"1",},
{"lineNum":" 1205","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2574","possible_hits":"1",},
{"lineNum":" 1206","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2575","possible_hits":"2",},
{"lineNum":" 1207","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2576","possible_hits":"2",},
{"lineNum":" 1208","line":"}"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"test \"sema.check_deep_struct_assignment_fail\" {","class":"lineCov","hits":"1","order":"2579","possible_hits":"1",},
{"lineNum":" 1211","line":"    const source = \"struct S {int a; struct S s;}; fun main() void {struct S s; s.s.s.s.s.s.a = true;}\";","class":"lineCov","hits":"1","order":"2580","possible_hits":"1",},
{"lineNum":" 1212","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2581","possible_hits":"1",},
{"lineNum":" 1213","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2582","possible_hits":"1",},
{"lineNum":" 1214","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2583","possible_hits":"2",},
{"lineNum":" 1215","line":"    // expect error"},
{"lineNum":" 1216","line":"    try ting.expectError(TypeError.InvalidAssignmentType, typeCheckFunction(&ast, funcLit));","class":"lineCov","hits":"2","order":"2584","possible_hits":"2",},
{"lineNum":" 1217","line":"}"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"test \"sema.check_deep_struct_assignment\"{","class":"lineCov","hits":"1","order":"2585","possible_hits":"1",},
{"lineNum":" 1220","line":"    const source = \"struct S {int a; struct S s;}; fun main() void {struct S s; struct S b; s.s.s.s.s.s.a = 1; b.s.s.s.s.s.s.s =s;}\";","class":"lineCov","hits":"1","order":"2586","possible_hits":"1",},
{"lineNum":" 1221","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2587","possible_hits":"1",},
{"lineNum":" 1222","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2588","possible_hits":"1",},
{"lineNum":" 1223","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2589","possible_hits":"2",},
{"lineNum":" 1224","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2590","possible_hits":"2",},
{"lineNum":" 1225","line":"}"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"test \"sema.check_mixed.mini\"{","class":"lineCov","hits":"1","order":"2593","possible_hits":"1",},
{"lineNum":" 1228","line":"    // load source from file"},
{"lineNum":" 1229","line":"    const source = @embedFile(\"mixed.mini\");","class":"lineCov","hits":"1","order":"2594","possible_hits":"1",},
{"lineNum":" 1230","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2595","possible_hits":"1",},
{"lineNum":" 1231","line":"    var func = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2695","possible_hits":"1",},
{"lineNum":" 1232","line":"    var funcLit = func.?.*;","class":"lineCov","hits":"2","order":"2696","possible_hits":"2",},
{"lineNum":" 1233","line":"    try typeCheckFunction(&ast, funcLit);","class":"linePartCov","hits":"1","order":"2697","possible_hits":"2",},
{"lineNum":" 1234","line":"}"},
{"lineNum":" 1235","line":"test \"sema.check_mixed_wrong_new.mini\"{","class":"lineCov","hits":"1","order":"2703","possible_hits":"1",},
{"lineNum":" 1236","line":"    // load source from file"},
{"lineNum":" 1237","line":"    const source = @embedFile(\"mixed_wrong_new.mini\");","class":"lineCov","hits":"1","order":"2704","possible_hits":"1",},
{"lineNum":" 1238","line":"    var ast = try testMe(source);","class":"lineCov","hits":"1","order":"2705","possible_hits":"1",},
{"lineNum":" 1239","line":"    // expect error InvalidAssignmentType"},
{"lineNum":" 1240","line":"    try ting.expectError(TypeError.InvalidAssignmentType, typeCheck(&ast));","class":"lineCov","hits":"1","order":"2706","possible_hits":"1",},
{"lineNum":" 1241","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 773, "covered" : 702,};
var merged_data = [];
