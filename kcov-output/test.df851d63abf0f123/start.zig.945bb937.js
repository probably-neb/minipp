var data = {lines:[
{"lineNum":"    1","line":"// This file is included in the compilation unit when exporting an executable."},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"const root = @import(\"root\");"},
{"lineNum":"    4","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    5","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    6","line":"const assert = std.debug.assert;"},
{"lineNum":"    7","line":"const uefi = std.os.uefi;"},
{"lineNum":"    8","line":"const elf = std.elf;"},
{"lineNum":"    9","line":"const native_arch = builtin.cpu.arch;"},
{"lineNum":"   10","line":"const native_os = builtin.os.tag;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"var argc_argv_ptr: [*]usize = undefined;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"const start_sym_name = if (native_arch.isMIPS()) \"__start\" else \"_start\";"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// The self-hosted compiler is not fully capable of handling all of this start.zig file."},
{"lineNum":"   17","line":"// Until then, we have simplified logic here for self-hosted. TODO remove this once"},
{"lineNum":"   18","line":"// self-hosted is capable enough to handle all of the real start.zig logic."},
{"lineNum":"   19","line":"pub const simplified_logic ="},
{"lineNum":"   20","line":"    builtin.zig_backend == .stage2_x86 or"},
{"lineNum":"   21","line":"    builtin.zig_backend == .stage2_aarch64 or"},
{"lineNum":"   22","line":"    builtin.zig_backend == .stage2_arm or"},
{"lineNum":"   23","line":"    builtin.zig_backend == .stage2_riscv64 or"},
{"lineNum":"   24","line":"    builtin.zig_backend == .stage2_sparc64 or"},
{"lineNum":"   25","line":"    builtin.cpu.arch == .spirv32 or"},
{"lineNum":"   26","line":"    builtin.cpu.arch == .spirv64;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"comptime {"},
{"lineNum":"   29","line":"    // No matter what, we import the root file, so that any export, test, comptime"},
{"lineNum":"   30","line":"    // decls there get run."},
{"lineNum":"   31","line":"    _ = root;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    if (simplified_logic) {"},
{"lineNum":"   34","line":"        if (builtin.output_mode == .Exe) {"},
{"lineNum":"   35","line":"            if ((builtin.link_libc or builtin.object_format == .c) and @hasDecl(root, \"main\")) {"},
{"lineNum":"   36","line":"                if (@typeInfo(@TypeOf(root.main)).Fn.calling_convention != .C) {"},
{"lineNum":"   37","line":"                    @export(main2, .{ .name = \"main\" });"},
{"lineNum":"   38","line":"                }"},
{"lineNum":"   39","line":"            } else if (builtin.os.tag == .windows) {"},
{"lineNum":"   40","line":"                if (!@hasDecl(root, \"wWinMainCRTStartup\") and !@hasDecl(root, \"mainCRTStartup\")) {"},
{"lineNum":"   41","line":"                    @export(wWinMainCRTStartup2, .{ .name = \"wWinMainCRTStartup\" });"},
{"lineNum":"   42","line":"                }"},
{"lineNum":"   43","line":"            } else if (builtin.os.tag == .opencl) {"},
{"lineNum":"   44","line":"                if (@hasDecl(root, \"main\"))"},
{"lineNum":"   45","line":"                    @export(spirvMain2, .{ .name = \"main\" });"},
{"lineNum":"   46","line":"            } else {"},
{"lineNum":"   47","line":"                if (!@hasDecl(root, \"_start\")) {"},
{"lineNum":"   48","line":"                    @export(_start2, .{ .name = \"_start\" });"},
{"lineNum":"   49","line":"                }"},
{"lineNum":"   50","line":"            }"},
{"lineNum":"   51","line":"        }"},
{"lineNum":"   52","line":"    } else {"},
{"lineNum":"   53","line":"        if (builtin.output_mode == .Lib and builtin.link_mode == .Dynamic) {"},
{"lineNum":"   54","line":"            if (native_os == .windows and !@hasDecl(root, \"_DllMainCRTStartup\")) {"},
{"lineNum":"   55","line":"                @export(_DllMainCRTStartup, .{ .name = \"_DllMainCRTStartup\" });"},
{"lineNum":"   56","line":"            }"},
{"lineNum":"   57","line":"        } else if (builtin.output_mode == .Exe or @hasDecl(root, \"main\")) {"},
{"lineNum":"   58","line":"            if (builtin.link_libc and @hasDecl(root, \"main\")) {"},
{"lineNum":"   59","line":"                if (native_arch.isWasm()) {"},
{"lineNum":"   60","line":"                    @export(mainWithoutEnv, .{ .name = \"main\" });"},
{"lineNum":"   61","line":"                } else if (@typeInfo(@TypeOf(root.main)).Fn.calling_convention != .C) {"},
{"lineNum":"   62","line":"                    @export(main, .{ .name = \"main\" });"},
{"lineNum":"   63","line":"                }"},
{"lineNum":"   64","line":"            } else if (native_os == .windows) {"},
{"lineNum":"   65","line":"                if (!@hasDecl(root, \"WinMain\") and !@hasDecl(root, \"WinMainCRTStartup\") and"},
{"lineNum":"   66","line":"                    !@hasDecl(root, \"wWinMain\") and !@hasDecl(root, \"wWinMainCRTStartup\"))"},
{"lineNum":"   67","line":"                {"},
{"lineNum":"   68","line":"                    @export(WinStartup, .{ .name = \"wWinMainCRTStartup\" });"},
{"lineNum":"   69","line":"                } else if (@hasDecl(root, \"WinMain\") and !@hasDecl(root, \"WinMainCRTStartup\") and"},
{"lineNum":"   70","line":"                    !@hasDecl(root, \"wWinMain\") and !@hasDecl(root, \"wWinMainCRTStartup\"))"},
{"lineNum":"   71","line":"                {"},
{"lineNum":"   72","line":"                    @compileError(\"WinMain not supported; declare wWinMain or main instead\");"},
{"lineNum":"   73","line":"                } else if (@hasDecl(root, \"wWinMain\") and !@hasDecl(root, \"wWinMainCRTStartup\") and"},
{"lineNum":"   74","line":"                    !@hasDecl(root, \"WinMain\") and !@hasDecl(root, \"WinMainCRTStartup\"))"},
{"lineNum":"   75","line":"                {"},
{"lineNum":"   76","line":"                    @export(wWinMainCRTStartup, .{ .name = \"wWinMainCRTStartup\" });"},
{"lineNum":"   77","line":"                }"},
{"lineNum":"   78","line":"            } else if (native_os == .uefi) {"},
{"lineNum":"   79","line":"                if (!@hasDecl(root, \"EfiMain\")) @export(EfiMain, .{ .name = \"EfiMain\" });"},
{"lineNum":"   80","line":"            } else if (native_os == .wasi) {"},
{"lineNum":"   81","line":"                const wasm_start_sym = switch (builtin.wasi_exec_model) {"},
{"lineNum":"   82","line":"                    .reactor => \"_initialize\","},
{"lineNum":"   83","line":"                    .command => \"_start\","},
{"lineNum":"   84","line":"                };"},
{"lineNum":"   85","line":"                if (!@hasDecl(root, wasm_start_sym)) {"},
{"lineNum":"   86","line":"                    @export(wasi_start, .{ .name = wasm_start_sym });"},
{"lineNum":"   87","line":"                }"},
{"lineNum":"   88","line":"            } else if (native_arch.isWasm() and native_os == .freestanding) {"},
{"lineNum":"   89","line":"                if (!@hasDecl(root, start_sym_name)) @export(wasm_freestanding_start, .{ .name = start_sym_name });"},
{"lineNum":"   90","line":"            } else if (native_os != .other and native_os != .freestanding) {"},
{"lineNum":"   91","line":"                if (!@hasDecl(root, start_sym_name)) @export(_start, .{ .name = start_sym_name });"},
{"lineNum":"   92","line":"            }"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"// Simplified start code for stage2 until it supports more language features ///"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"fn main2() callconv(.C) c_int {"},
{"lineNum":"  100","line":"    root.main();"},
{"lineNum":"  101","line":"    return 0;"},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"fn _start2() noreturn {"},
{"lineNum":"  105","line":"    callMain2();"},
{"lineNum":"  106","line":"}"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"fn callMain2() noreturn {"},
{"lineNum":"  109","line":"    @setAlignStack(16);"},
{"lineNum":"  110","line":"    root.main();"},
{"lineNum":"  111","line":"    exit2(0);"},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"fn spirvMain2() callconv(.Kernel) void {"},
{"lineNum":"  115","line":"    root.main();"},
{"lineNum":"  116","line":"}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"fn wWinMainCRTStartup2() callconv(.C) noreturn {"},
{"lineNum":"  119","line":"    root.main();"},
{"lineNum":"  120","line":"    exit2(0);"},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"fn exit2(code: usize) noreturn {"},
{"lineNum":"  124","line":"    switch (native_os) {"},
{"lineNum":"  125","line":"        .linux => switch (builtin.cpu.arch) {"},
{"lineNum":"  126","line":"            .x86_64 => {"},
{"lineNum":"  127","line":"                asm volatile (\"syscall\""},
{"lineNum":"  128","line":"                    :"},
{"lineNum":"  129","line":"                    : [number] \"{rax}\" (231),"},
{"lineNum":"  130","line":"                      [arg1] \"{rdi}\" (code),"},
{"lineNum":"  131","line":"                    : \"rcx\", \"r11\", \"memory\""},
{"lineNum":"  132","line":"                );"},
{"lineNum":"  133","line":"            },"},
{"lineNum":"  134","line":"            .arm => {"},
{"lineNum":"  135","line":"                asm volatile (\"svc #0\""},
{"lineNum":"  136","line":"                    :"},
{"lineNum":"  137","line":"                    : [number] \"{r7}\" (1),"},
{"lineNum":"  138","line":"                      [arg1] \"{r0}\" (code),"},
{"lineNum":"  139","line":"                    : \"memory\""},
{"lineNum":"  140","line":"                );"},
{"lineNum":"  141","line":"            },"},
{"lineNum":"  142","line":"            .aarch64 => {"},
{"lineNum":"  143","line":"                asm volatile (\"svc #0\""},
{"lineNum":"  144","line":"                    :"},
{"lineNum":"  145","line":"                    : [number] \"{x8}\" (93),"},
{"lineNum":"  146","line":"                      [arg1] \"{x0}\" (code),"},
{"lineNum":"  147","line":"                    : \"memory\", \"cc\""},
{"lineNum":"  148","line":"                );"},
{"lineNum":"  149","line":"            },"},
{"lineNum":"  150","line":"            .riscv64 => {"},
{"lineNum":"  151","line":"                asm volatile (\"ecall\""},
{"lineNum":"  152","line":"                    :"},
{"lineNum":"  153","line":"                    : [number] \"{a7}\" (94),"},
{"lineNum":"  154","line":"                      [arg1] \"{a0}\" (0),"},
{"lineNum":"  155","line":"                    : \"rcx\", \"r11\", \"memory\""},
{"lineNum":"  156","line":"                );"},
{"lineNum":"  157","line":"            },"},
{"lineNum":"  158","line":"            .sparc64 => {"},
{"lineNum":"  159","line":"                asm volatile (\"ta 0x6d\""},
{"lineNum":"  160","line":"                    :"},
{"lineNum":"  161","line":"                    : [number] \"{g1}\" (1),"},
{"lineNum":"  162","line":"                      [arg1] \"{o0}\" (code),"},
{"lineNum":"  163","line":"                    : \"o0\", \"o1\", \"o2\", \"o3\", \"o4\", \"o5\", \"o6\", \"o7\", \"memory\""},
{"lineNum":"  164","line":"                );"},
{"lineNum":"  165","line":"            },"},
{"lineNum":"  166","line":"            else => @compileError(\"TODO\"),"},
{"lineNum":"  167","line":"        },"},
{"lineNum":"  168","line":"        // exits(0)"},
{"lineNum":"  169","line":"        .plan9 => std.os.plan9.exits(null),"},
{"lineNum":"  170","line":"        .windows => {"},
{"lineNum":"  171","line":"            ExitProcess(@as(u32, @truncate(code)));"},
{"lineNum":"  172","line":"        },"},
{"lineNum":"  173","line":"        else => @compileError(\"TODO\"),"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":"    unreachable;"},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"extern \"kernel32\" fn ExitProcess(exit_code: u32) callconv(.C) noreturn;"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"fn _DllMainCRTStartup("},
{"lineNum":"  183","line":"    hinstDLL: std.os.windows.HINSTANCE,"},
{"lineNum":"  184","line":"    fdwReason: std.os.windows.DWORD,"},
{"lineNum":"  185","line":"    lpReserved: std.os.windows.LPVOID,"},
{"lineNum":"  186","line":") callconv(std.os.windows.WINAPI) std.os.windows.BOOL {"},
{"lineNum":"  187","line":"    if (!builtin.single_threaded and !builtin.link_libc) {"},
{"lineNum":"  188","line":"        _ = @import(\"start_windows_tls.zig\");"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    if (@hasDecl(root, \"DllMain\")) {"},
{"lineNum":"  192","line":"        return root.DllMain(hinstDLL, fdwReason, lpReserved);"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    return std.os.windows.TRUE;"},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"fn wasm_freestanding_start() callconv(.C) void {"},
{"lineNum":"  199","line":"    // This is marked inline because for some reason LLVM in"},
{"lineNum":"  200","line":"    // release mode fails to inline it, and we want fewer call frames in stack traces."},
{"lineNum":"  201","line":"    _ = @call(.always_inline, callMain, .{});"},
{"lineNum":"  202","line":"}"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"fn wasi_start() callconv(.C) void {"},
{"lineNum":"  205","line":"    // The function call is marked inline because for some reason LLVM in"},
{"lineNum":"  206","line":"    // release mode fails to inline it, and we want fewer call frames in stack traces."},
{"lineNum":"  207","line":"    switch (builtin.wasi_exec_model) {"},
{"lineNum":"  208","line":"        .reactor => _ = @call(.always_inline, callMain, .{}),"},
{"lineNum":"  209","line":"        .command => std.os.wasi.proc_exit(@call(.always_inline, callMain, .{})),"},
{"lineNum":"  210","line":"    }"},
{"lineNum":"  211","line":"}"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"fn EfiMain(handle: uefi.Handle, system_table: *uefi.tables.SystemTable) callconv(.C) usize {"},
{"lineNum":"  214","line":"    uefi.handle = handle;"},
{"lineNum":"  215","line":"    uefi.system_table = system_table;"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    switch (@typeInfo(@TypeOf(root.main)).Fn.return_type.?) {"},
{"lineNum":"  218","line":"        noreturn => {"},
{"lineNum":"  219","line":"            root.main();"},
{"lineNum":"  220","line":"        },"},
{"lineNum":"  221","line":"        void => {"},
{"lineNum":"  222","line":"            root.main();"},
{"lineNum":"  223","line":"            return 0;"},
{"lineNum":"  224","line":"        },"},
{"lineNum":"  225","line":"        usize => {"},
{"lineNum":"  226","line":"            return root.main();"},
{"lineNum":"  227","line":"        },"},
{"lineNum":"  228","line":"        uefi.Status => {"},
{"lineNum":"  229","line":"            return @intFromEnum(root.main());"},
{"lineNum":"  230","line":"        },"},
{"lineNum":"  231","line":"        else => @compileError(\"expected return type of main to be \'void\', \'noreturn\', \'usize\', or \'std.os.uefi.Status\'\"),"},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"fn _start() callconv(.Naked) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"    // TODO set Top of Stack on non x86_64-plan9"},
{"lineNum":"  237","line":"    if (native_os == .plan9 and native_arch == .x86_64) {"},
{"lineNum":"  238","line":"        // from /sys/src/libc/amd64/main9.s"},
{"lineNum":"  239","line":"        std.os.plan9.tos = asm volatile (\"\""},
{"lineNum":"  240","line":"            : [tos] \"={rax}\" (-> *std.os.plan9.Tos),"},
{"lineNum":"  241","line":"        );"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":"    asm volatile (switch (native_arch) {","class":"lineCov","hits":"1","order":"1","possible_hits":"1",},
{"lineNum":"  244","line":"            .x86_64 =>"},
{"lineNum":"  245","line":"            \\\\ xorl %%ebp, %%ebp"},
{"lineNum":"  246","line":"            \\\\ movq %%rsp, %[argc_argv_ptr]"},
{"lineNum":"  247","line":"            \\\\ andq $-16, %%rsp"},
{"lineNum":"  248","line":"            \\\\ callq %[posixCallMainAndExit:P]"},
{"lineNum":"  249","line":"            ,"},
{"lineNum":"  250","line":"            .x86 =>"},
{"lineNum":"  251","line":"            \\\\ xorl %%ebp, %%ebp"},
{"lineNum":"  252","line":"            \\\\ movl %%esp, %[argc_argv_ptr]"},
{"lineNum":"  253","line":"            \\\\ andl $-16, %%esp"},
{"lineNum":"  254","line":"            \\\\ calll %[posixCallMainAndExit:P]"},
{"lineNum":"  255","line":"            ,"},
{"lineNum":"  256","line":"            .aarch64, .aarch64_be =>"},
{"lineNum":"  257","line":"            \\\\ mov fp, #0"},
{"lineNum":"  258","line":"            \\\\ mov lr, #0"},
{"lineNum":"  259","line":"            \\\\ mov x0, sp"},
{"lineNum":"  260","line":"            \\\\ str x0, %[argc_argv_ptr]"},
{"lineNum":"  261","line":"            \\\\ b %[posixCallMainAndExit]"},
{"lineNum":"  262","line":"            ,"},
{"lineNum":"  263","line":"            .arm, .armeb, .thumb, .thumbeb =>"},
{"lineNum":"  264","line":"            \\\\ mov fp, #0"},
{"lineNum":"  265","line":"            \\\\ mov lr, #0"},
{"lineNum":"  266","line":"            \\\\ str sp, %[argc_argv_ptr]"},
{"lineNum":"  267","line":"            \\\\ and sp, #-16"},
{"lineNum":"  268","line":"            \\\\ b %[posixCallMainAndExit]"},
{"lineNum":"  269","line":"            ,"},
{"lineNum":"  270","line":"            .riscv64 =>"},
{"lineNum":"  271","line":"            \\\\ li s0, 0"},
{"lineNum":"  272","line":"            \\\\ li ra, 0"},
{"lineNum":"  273","line":"            \\\\ sd sp, %[argc_argv_ptr]"},
{"lineNum":"  274","line":"            \\\\ andi sp, sp, -16"},
{"lineNum":"  275","line":"            \\\\ tail %[posixCallMainAndExit]@plt"},
{"lineNum":"  276","line":"            ,"},
{"lineNum":"  277","line":"            .mips, .mipsel =>"},
{"lineNum":"  278","line":"            // The lr is already zeroed on entry, as specified by the ABI."},
{"lineNum":"  279","line":"            \\\\ addiu $fp, $zero, 0"},
{"lineNum":"  280","line":"            \\\\ sw $sp, %[argc_argv_ptr]"},
{"lineNum":"  281","line":"            \\\\ .set push"},
{"lineNum":"  282","line":"            \\\\ .set noat"},
{"lineNum":"  283","line":"            \\\\ addiu $1, $zero, -16"},
{"lineNum":"  284","line":"            \\\\ and $sp, $sp, $1"},
{"lineNum":"  285","line":"            \\\\ .set pop"},
{"lineNum":"  286","line":"            \\\\ j %[posixCallMainAndExit]"},
{"lineNum":"  287","line":"            ,"},
{"lineNum":"  288","line":"            .mips64, .mips64el =>"},
{"lineNum":"  289","line":"            // The lr is already zeroed on entry, as specified by the ABI."},
{"lineNum":"  290","line":"            \\\\ addiu $fp, $zero, 0"},
{"lineNum":"  291","line":"            \\\\ sd $sp, %[argc_argv_ptr]"},
{"lineNum":"  292","line":"            \\\\ .set push"},
{"lineNum":"  293","line":"            \\\\ .set noat"},
{"lineNum":"  294","line":"            \\\\ daddiu $1, $zero, -16"},
{"lineNum":"  295","line":"            \\\\ and $sp, $sp, $1"},
{"lineNum":"  296","line":"            \\\\ .set pop"},
{"lineNum":"  297","line":"            \\\\ j %[posixCallMainAndExit]"},
{"lineNum":"  298","line":"            ,"},
{"lineNum":"  299","line":"            .powerpc, .powerpcle =>"},
{"lineNum":"  300","line":"            // Setup the initial stack frame and clear the back chain pointer."},
{"lineNum":"  301","line":"            \\\\ stw 1, %[argc_argv_ptr]"},
{"lineNum":"  302","line":"            \\\\ li 0, 0"},
{"lineNum":"  303","line":"            \\\\ stwu 1, -16(1)"},
{"lineNum":"  304","line":"            \\\\ stw 0, 0(1)"},
{"lineNum":"  305","line":"            \\\\ mtlr 0"},
{"lineNum":"  306","line":"            \\\\ b %[posixCallMainAndExit]"},
{"lineNum":"  307","line":"            ,"},
{"lineNum":"  308","line":"            .powerpc64, .powerpc64le =>"},
{"lineNum":"  309","line":"            // Setup the initial stack frame and clear the back chain pointer."},
{"lineNum":"  310","line":"            // TODO: Support powerpc64 (big endian) on ELFv2."},
{"lineNum":"  311","line":"            \\\\ std 1, %[argc_argv_ptr]"},
{"lineNum":"  312","line":"            \\\\ li 0, 0"},
{"lineNum":"  313","line":"            \\\\ stdu 0, -32(1)"},
{"lineNum":"  314","line":"            \\\\ mtlr 0"},
{"lineNum":"  315","line":"            \\\\ b %[posixCallMainAndExit]"},
{"lineNum":"  316","line":"            ,"},
{"lineNum":"  317","line":"            .sparc64 =>"},
{"lineNum":"  318","line":"            // argc is stored after a register window (16 registers) plus stack bias"},
{"lineNum":"  319","line":"            \\\\ mov %%g0, %%i6"},
{"lineNum":"  320","line":"            \\\\ add %%o6, 2175, %%l0"},
{"lineNum":"  321","line":"            \\\\ stx %%l0, %[argc_argv_ptr]"},
{"lineNum":"  322","line":"            \\\\ ba %[posixCallMainAndExit]"},
{"lineNum":"  323","line":"            ,"},
{"lineNum":"  324","line":"            else => @compileError(\"unsupported arch\"),"},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":"        : [argc_argv_ptr] \"=m\" (argc_argv_ptr),"},
{"lineNum":"  327","line":"        : [posixCallMainAndExit] \"X\" (&posixCallMainAndExit),"},
{"lineNum":"  328","line":"    );"},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"fn WinStartup() callconv(std.os.windows.WINAPI) noreturn {"},
{"lineNum":"  332","line":"    @setAlignStack(16);"},
{"lineNum":"  333","line":"    if (!builtin.single_threaded and !builtin.link_libc) {"},
{"lineNum":"  334","line":"        _ = @import(\"start_windows_tls.zig\");"},
{"lineNum":"  335","line":"    }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    std.debug.maybeEnableSegfaultHandler();"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    std.os.windows.kernel32.ExitProcess(initEventLoopAndCallMain());"},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"fn wWinMainCRTStartup() callconv(std.os.windows.WINAPI) noreturn {"},
{"lineNum":"  343","line":"    @setAlignStack(16);"},
{"lineNum":"  344","line":"    if (!builtin.single_threaded and !builtin.link_libc) {"},
{"lineNum":"  345","line":"        _ = @import(\"start_windows_tls.zig\");"},
{"lineNum":"  346","line":"    }"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    std.debug.maybeEnableSegfaultHandler();"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    const result: std.os.windows.INT = initEventLoopAndCallWinMain();"},
{"lineNum":"  351","line":"    std.os.windows.kernel32.ExitProcess(@as(std.os.windows.UINT, @bitCast(result)));"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"fn posixCallMainAndExit() callconv(.C) noreturn {","class":"lineCov","hits":"1","order":"2","possible_hits":"1",},
{"lineNum":"  355","line":"    const argc = argc_argv_ptr[0];","class":"lineCov","hits":"1","order":"3","possible_hits":"1",},
{"lineNum":"  356","line":"    const argv = @as([*][*:0]u8, @ptrCast(argc_argv_ptr + 1));","class":"lineCov","hits":"1","order":"4","possible_hits":"1",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    const envp_optional: [*:null]?[*:0]u8 = @ptrCast(@alignCast(argv + argc + 1));","class":"lineCov","hits":"1","order":"5","possible_hits":"1",},
{"lineNum":"  359","line":"    var envp_count: usize = 0;","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"  360","line":"    while (envp_optional[envp_count]) |_| : (envp_count += 1) {}","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":"  361","line":"    const envp = @as([*][*:0]u8, @ptrCast(envp_optional))[0..envp_count];","class":"lineCov","hits":"3","order":"8","possible_hits":"3",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    if (native_os == .linux) {"},
{"lineNum":"  364","line":"        // Find the beginning of the auxiliary vector"},
{"lineNum":"  365","line":"        const auxv: [*]elf.Auxv = @ptrCast(@alignCast(envp.ptr + envp_count + 1));","class":"lineCov","hits":"1","order":"9","possible_hits":"1",},
{"lineNum":"  366","line":"        std.os.linux.elf_aux_maybe = auxv;","class":"lineCov","hits":"1","order":"10","possible_hits":"1",},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"        var at_hwcap: usize = 0;","class":"lineCov","hits":"1","order":"11","possible_hits":"1",},
{"lineNum":"  369","line":"        const phdrs = init: {"},
{"lineNum":"  370","line":"            var i: usize = 0;","class":"lineCov","hits":"1","order":"12","possible_hits":"1",},
{"lineNum":"  371","line":"            var at_phdr: usize = 0;","class":"lineCov","hits":"1","order":"13","possible_hits":"1",},
{"lineNum":"  372","line":"            var at_phnum: usize = 0;","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"  373","line":"            while (auxv[i].a_type != elf.AT_NULL) : (i += 1) {","class":"linePartCov","hits":"2","order":"15","possible_hits":"3",},
{"lineNum":"  374","line":"                switch (auxv[i].a_type) {","class":"lineCov","hits":"1","order":"16","possible_hits":"1",},
{"lineNum":"  375","line":"                    elf.AT_PHNUM => at_phnum = auxv[i].a_un.a_val,","class":"lineCov","hits":"1","order":"19","possible_hits":"1",},
{"lineNum":"  376","line":"                    elf.AT_PHDR => at_phdr = auxv[i].a_un.a_val,","class":"lineCov","hits":"1","order":"18","possible_hits":"1",},
{"lineNum":"  377","line":"                    elf.AT_HWCAP => at_hwcap = auxv[i].a_un.a_val,","class":"lineCov","hits":"2","order":"17","possible_hits":"2",},
{"lineNum":"  378","line":"                    else => continue,"},
{"lineNum":"  379","line":"                }"},
{"lineNum":"  380","line":"            }"},
{"lineNum":"  381","line":"            break :init @as([*]elf.Phdr, @ptrFromInt(at_phdr))[0..at_phnum];","class":"lineCov","hits":"3","order":"20","possible_hits":"3",},
{"lineNum":"  382","line":"        };"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"        // Apply the initial relocations as early as possible in the startup"},
{"lineNum":"  385","line":"        // process."},
{"lineNum":"  386","line":"        if (builtin.position_independent_executable) {"},
{"lineNum":"  387","line":"            std.os.linux.pie.relocate(phdrs);"},
{"lineNum":"  388","line":"        }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        if (!builtin.single_threaded) {"},
{"lineNum":"  391","line":"            // ARMv6 targets (and earlier) have no support for TLS in hardware."},
{"lineNum":"  392","line":"            // FIXME: Elide the check for targets >= ARMv7 when the target feature API"},
{"lineNum":"  393","line":"            // becomes less verbose (and more usable)."},
{"lineNum":"  394","line":"            if (comptime native_arch.isARM()) {"},
{"lineNum":"  395","line":"                if (at_hwcap & std.os.linux.HWCAP.TLS == 0) {"},
{"lineNum":"  396","line":"                    // FIXME: Make __aeabi_read_tp call the kernel helper kuser_get_tls"},
{"lineNum":"  397","line":"                    // For the time being use a simple abort instead of a @panic call to"},
{"lineNum":"  398","line":"                    // keep the binary bloat under control."},
{"lineNum":"  399","line":"                    std.os.abort();"},
{"lineNum":"  400","line":"                }"},
{"lineNum":"  401","line":"            }"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"            // Initialize the TLS area."},
{"lineNum":"  404","line":"            std.os.linux.tls.initStaticTLS(phdrs);","class":"lineCov","hits":"1","order":"21","possible_hits":"1",},
{"lineNum":"  405","line":"        }"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"        // The way Linux executables represent stack size is via the PT_GNU_STACK"},
{"lineNum":"  408","line":"        // program header. However the kernel does not recognize it; it always gives 8 MiB."},
{"lineNum":"  409","line":"        // Here we look for the stack size in our program headers and use setrlimit"},
{"lineNum":"  410","line":"        // to ask for more stack space."},
{"lineNum":"  411","line":"        expandStackSize(phdrs);","class":"lineCov","hits":"1","order":"95","possible_hits":"1",},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    std.os.exit(@call(.always_inline, callMainWithArgs, .{ argc, argv, envp }));","class":"lineCov","hits":"2","order":"118","possible_hits":"2",},
{"lineNum":"  415","line":"}"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"fn expandStackSize(phdrs: []elf.Phdr) void {","class":"lineCov","hits":"1","order":"96","possible_hits":"1",},
{"lineNum":"  418","line":"    for (phdrs) |*phdr| {","class":"lineCov","hits":"3","order":"97","possible_hits":"3",},
{"lineNum":"  419","line":"        switch (phdr.p_type) {","class":"lineCov","hits":"1","order":"98","possible_hits":"1",},
{"lineNum":"  420","line":"            elf.PT_GNU_STACK => {"},
{"lineNum":"  421","line":"                assert(phdr.p_memsz % std.mem.page_size == 0);","class":"lineCov","hits":"1","order":"100","possible_hits":"1",},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"                // Silently fail if we are unable to get limits."},
{"lineNum":"  424","line":"                const limits = std.os.getrlimit(.STACK) catch break;","class":"lineCov","hits":"2","order":"101","possible_hits":"2",},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"                // Clamp to limits.max ."},
{"lineNum":"  427","line":"                const wanted_stack_size = @min(phdr.p_memsz, limits.max);","class":"lineCov","hits":"1","order":"116","possible_hits":"1",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"                if (wanted_stack_size > limits.cur) {","class":"lineCov","hits":"1","order":"117","possible_hits":"1",},
{"lineNum":"  430","line":"                    std.os.setrlimit(.STACK, .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"                        .cur = wanted_stack_size,"},
{"lineNum":"  432","line":"                        .max = limits.max,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"                    }) catch {"},
{"lineNum":"  434","line":"                        // Because we could not increase the stack size to the upper bound,"},
{"lineNum":"  435","line":"                        // depending on what happens at runtime, a stack overflow may occur."},
{"lineNum":"  436","line":"                        // However it would cause a segmentation fault, thanks to stack probing,"},
{"lineNum":"  437","line":"                        // so we do not have a memory safety issue here."},
{"lineNum":"  438","line":"                        // This is intentional silent failure."},
{"lineNum":"  439","line":"                        // This logic should be revisited when the following issues are addressed:"},
{"lineNum":"  440","line":"                        // https://github.com/ziglang/zig/issues/157"},
{"lineNum":"  441","line":"                        // https://github.com/ziglang/zig/issues/1006"},
{"lineNum":"  442","line":"                    };"},
{"lineNum":"  443","line":"                }"},
{"lineNum":"  444","line":"                break;","class":"linePartCov","hits":"3","order":"99","possible_hits":"4",},
{"lineNum":"  445","line":"            },"},
{"lineNum":"  446","line":"            else => {},"},
{"lineNum":"  447","line":"        }"},
{"lineNum":"  448","line":"    }"},
{"lineNum":"  449","line":"}"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"fn callMainWithArgs(argc: usize, argv: [*][*:0]u8, envp: [][*:0]u8) u8 {"},
{"lineNum":"  452","line":"    std.os.argv = argv[0..argc];","class":"lineCov","hits":"3","order":"119","possible_hits":"3",},
{"lineNum":"  453","line":"    std.os.environ = envp;","class":"lineCov","hits":"1","order":"120","possible_hits":"1",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    std.debug.maybeEnableSegfaultHandler();","class":"lineCov","hits":"1","order":"121","possible_hits":"1",},
{"lineNum":"  456","line":"    std.os.maybeIgnoreSigpipe();","class":"lineCov","hits":"1","order":"156","possible_hits":"1",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    return initEventLoopAndCallMain();"},
{"lineNum":"  459","line":"}"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"fn main(c_argc: c_int, c_argv: [*][*:0]c_char, c_envp: [*:null]?[*:0]c_char) callconv(.C) c_int {"},
{"lineNum":"  462","line":"    var env_count: usize = 0;"},
{"lineNum":"  463","line":"    while (c_envp[env_count] != null) : (env_count += 1) {}"},
{"lineNum":"  464","line":"    const envp = @as([*][*:0]u8, @ptrCast(c_envp))[0..env_count];"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    if (builtin.os.tag == .linux) {"},
{"lineNum":"  467","line":"        const at_phdr = std.c.getauxval(elf.AT_PHDR);"},
{"lineNum":"  468","line":"        const at_phnum = std.c.getauxval(elf.AT_PHNUM);"},
{"lineNum":"  469","line":"        const phdrs = (@as([*]elf.Phdr, @ptrFromInt(at_phdr)))[0..at_phnum];"},
{"lineNum":"  470","line":"        expandStackSize(phdrs);"},
{"lineNum":"  471","line":"    }"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    return @call(.always_inline, callMainWithArgs, .{ @as(usize, @intCast(c_argc)), @as([*][*:0]u8, @ptrCast(c_argv)), envp });"},
{"lineNum":"  474","line":"}"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"fn mainWithoutEnv(c_argc: c_int, c_argv: [*][*:0]c_char) callconv(.C) c_int {"},
{"lineNum":"  477","line":"    std.os.argv = @as([*][*:0]u8, @ptrCast(c_argv))[0..@as(usize, @intCast(c_argc))];"},
{"lineNum":"  478","line":"    return @call(.always_inline, callMain, .{});"},
{"lineNum":"  479","line":"}"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"// General error message for a malformed return type"},
{"lineNum":"  482","line":"const bad_main_ret = \"expected return type of main to be \'void\', \'!void\', \'noreturn\', \'u8\', or \'!u8\'\";"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"// This is marked inline because for some reason LLVM in release mode fails to inline it,"},
{"lineNum":"  485","line":"// and we want fewer call frames in stack traces."},
{"lineNum":"  486","line":"inline fn initEventLoopAndCallMain() u8 {"},
{"lineNum":"  487","line":"    if (std.event.Loop.instance) |loop| {"},
{"lineNum":"  488","line":"        if (loop == std.event.Loop.default_instance) {"},
{"lineNum":"  489","line":"            loop.init() catch |err| {"},
{"lineNum":"  490","line":"                std.log.err(\"{s}\", .{@errorName(err)});"},
{"lineNum":"  491","line":"                if (@errorReturnTrace()) |trace| {"},
{"lineNum":"  492","line":"                    std.debug.dumpStackTrace(trace.*);"},
{"lineNum":"  493","line":"                }"},
{"lineNum":"  494","line":"                return 1;"},
{"lineNum":"  495","line":"            };"},
{"lineNum":"  496","line":"            defer loop.deinit();"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"            var result: u8 = undefined;"},
{"lineNum":"  499","line":"            var frame: @Frame(callMainAsync) = undefined;"},
{"lineNum":"  500","line":"            _ = @asyncCall(&frame, &result, callMainAsync, .{loop});"},
{"lineNum":"  501","line":"            loop.run();"},
{"lineNum":"  502","line":"            return result;"},
{"lineNum":"  503","line":"        }"},
{"lineNum":"  504","line":"    }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    // This is marked inline because for some reason LLVM in release mode fails to inline it,"},
{"lineNum":"  507","line":"    // and we want fewer call frames in stack traces."},
{"lineNum":"  508","line":"    return @call(.always_inline, callMain, .{});"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"// This is marked inline because for some reason LLVM in release mode fails to inline it,"},
{"lineNum":"  512","line":"// and we want fewer call frames in stack traces."},
{"lineNum":"  513","line":"// TODO This function is duplicated from initEventLoopAndCallMain instead of using generics"},
{"lineNum":"  514","line":"// because it is working around stage1 compiler bugs."},
{"lineNum":"  515","line":"inline fn initEventLoopAndCallWinMain() std.os.windows.INT {"},
{"lineNum":"  516","line":"    if (std.event.Loop.instance) |loop| {"},
{"lineNum":"  517","line":"        if (loop == std.event.Loop.default_instance) {"},
{"lineNum":"  518","line":"            loop.init() catch |err| {"},
{"lineNum":"  519","line":"                std.log.err(\"{s}\", .{@errorName(err)});"},
{"lineNum":"  520","line":"                if (@errorReturnTrace()) |trace| {"},
{"lineNum":"  521","line":"                    std.debug.dumpStackTrace(trace.*);"},
{"lineNum":"  522","line":"                }"},
{"lineNum":"  523","line":"                return 1;"},
{"lineNum":"  524","line":"            };"},
{"lineNum":"  525","line":"            defer loop.deinit();"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"            var result: std.os.windows.INT = undefined;"},
{"lineNum":"  528","line":"            var frame: @Frame(callWinMainAsync) = undefined;"},
{"lineNum":"  529","line":"            _ = @asyncCall(&frame, &result, callWinMainAsync, .{loop});"},
{"lineNum":"  530","line":"            loop.run();"},
{"lineNum":"  531","line":"            return result;"},
{"lineNum":"  532","line":"        }"},
{"lineNum":"  533","line":"    }"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"    // This is marked inline because for some reason LLVM in release mode fails to inline it,"},
{"lineNum":"  536","line":"    // and we want fewer call frames in stack traces."},
{"lineNum":"  537","line":"    return @call(.always_inline, call_wWinMain, .{});"},
{"lineNum":"  538","line":"}"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"fn callMainAsync(loop: *std.event.Loop) callconv(.Async) u8 {"},
{"lineNum":"  541","line":"    // This prevents the event loop from terminating at least until main() has returned."},
{"lineNum":"  542","line":"    // TODO This shouldn\'t be needed here; it should be in the event loop code."},
{"lineNum":"  543","line":"    loop.beginOneEvent();"},
{"lineNum":"  544","line":"    defer loop.finishOneEvent();"},
{"lineNum":"  545","line":"    return callMain();"},
{"lineNum":"  546","line":"}"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"fn callWinMainAsync(loop: *std.event.Loop) callconv(.Async) std.os.windows.INT {"},
{"lineNum":"  549","line":"    // This prevents the event loop from terminating at least until main() has returned."},
{"lineNum":"  550","line":"    // TODO This shouldn\'t be needed here; it should be in the event loop code."},
{"lineNum":"  551","line":"    loop.beginOneEvent();"},
{"lineNum":"  552","line":"    defer loop.finishOneEvent();"},
{"lineNum":"  553","line":"    return call_wWinMain();"},
{"lineNum":"  554","line":"}"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"// This is not marked inline because it is called with @asyncCall when"},
{"lineNum":"  557","line":"// there is an event loop."},
{"lineNum":"  558","line":"pub fn callMain() u8 {"},
{"lineNum":"  559","line":"    switch (@typeInfo(@typeInfo(@TypeOf(root.main)).Fn.return_type.?)) {"},
{"lineNum":"  560","line":"        .NoReturn => {"},
{"lineNum":"  561","line":"            root.main();"},
{"lineNum":"  562","line":"        },"},
{"lineNum":"  563","line":"        .Void => {"},
{"lineNum":"  564","line":"            root.main();","class":"lineCov","hits":"1","order":"160","possible_hits":"1",},
{"lineNum":"  565","line":"            return 0;","class":"lineCov","hits":"1","order":"3541","possible_hits":"1",},
{"lineNum":"  566","line":"        },"},
{"lineNum":"  567","line":"        .Int => |info| {"},
{"lineNum":"  568","line":"            if (info.bits != 8 or info.signedness == .signed) {"},
{"lineNum":"  569","line":"                @compileError(bad_main_ret);"},
{"lineNum":"  570","line":"            }"},
{"lineNum":"  571","line":"            return root.main();"},
{"lineNum":"  572","line":"        },"},
{"lineNum":"  573","line":"        .ErrorUnion => {"},
{"lineNum":"  574","line":"            const result = root.main() catch |err| {"},
{"lineNum":"  575","line":"                std.log.err(\"{s}\", .{@errorName(err)});"},
{"lineNum":"  576","line":"                if (@errorReturnTrace()) |trace| {"},
{"lineNum":"  577","line":"                    std.debug.dumpStackTrace(trace.*);"},
{"lineNum":"  578","line":"                }"},
{"lineNum":"  579","line":"                return 1;"},
{"lineNum":"  580","line":"            };"},
{"lineNum":"  581","line":"            switch (@typeInfo(@TypeOf(result))) {"},
{"lineNum":"  582","line":"                .Void => return 0,"},
{"lineNum":"  583","line":"                .Int => |info| {"},
{"lineNum":"  584","line":"                    if (info.bits != 8 or info.signedness == .signed) {"},
{"lineNum":"  585","line":"                        @compileError(bad_main_ret);"},
{"lineNum":"  586","line":"                    }"},
{"lineNum":"  587","line":"                    return result;"},
{"lineNum":"  588","line":"                },"},
{"lineNum":"  589","line":"                else => @compileError(bad_main_ret),"},
{"lineNum":"  590","line":"            }"},
{"lineNum":"  591","line":"        },"},
{"lineNum":"  592","line":"        else => @compileError(bad_main_ret),"},
{"lineNum":"  593","line":"    }"},
{"lineNum":"  594","line":"}"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"pub fn call_wWinMain() std.os.windows.INT {"},
{"lineNum":"  597","line":"    const MAIN_HINSTANCE = @typeInfo(@TypeOf(root.wWinMain)).Fn.params[0].type.?;"},
{"lineNum":"  598","line":"    const hInstance = @as(MAIN_HINSTANCE, @ptrCast(std.os.windows.kernel32.GetModuleHandleW(null).?));"},
{"lineNum":"  599","line":"    const lpCmdLine = std.os.windows.kernel32.GetCommandLineW();"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    // There\'s no (documented) way to get the nCmdShow parameter, so we\'re"},
{"lineNum":"  602","line":"    // using this fairly standard default."},
{"lineNum":"  603","line":"    const nCmdShow = std.os.windows.user32.SW_SHOW;"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    // second parameter hPrevInstance, MSDN: \"This parameter is always NULL\""},
{"lineNum":"  606","line":"    return root.wWinMain(hInstance, null, lpCmdLine, nCmdShow);"},
{"lineNum":"  607","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 40, "covered" : 37,};
var merged_data = [];
