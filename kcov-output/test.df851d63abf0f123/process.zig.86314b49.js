var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const os = std.os;"},
{"lineNum":"    4","line":"const fs = std.fs;"},
{"lineNum":"    5","line":"const mem = std.mem;"},
{"lineNum":"    6","line":"const math = std.math;"},
{"lineNum":"    7","line":"const Allocator = mem.Allocator;"},
{"lineNum":"    8","line":"const assert = std.debug.assert;"},
{"lineNum":"    9","line":"const testing = std.testing;"},
{"lineNum":"   10","line":"const child_process = @import(\"child_process.zig\");"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"pub const Child = child_process.ChildProcess;"},
{"lineNum":"   13","line":"pub const abort = os.abort;"},
{"lineNum":"   14","line":"pub const exit = os.exit;"},
{"lineNum":"   15","line":"pub const changeCurDir = os.chdir;"},
{"lineNum":"   16","line":"pub const changeCurDirC = os.chdirC;"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/// The result is a slice of `out_buffer`, from index `0`."},
{"lineNum":"   19","line":"pub fn getCwd(out_buffer: []u8) ![]u8 {"},
{"lineNum":"   20","line":"    return os.getcwd(out_buffer);"},
{"lineNum":"   21","line":"}"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"/// Caller must free the returned memory."},
{"lineNum":"   24","line":"pub fn getCwdAlloc(allocator: Allocator) ![]u8 {"},
{"lineNum":"   25","line":"    // The use of MAX_PATH_BYTES here is just a heuristic: most paths will fit"},
{"lineNum":"   26","line":"    // in stack_buf, avoiding an extra allocation in the common case."},
{"lineNum":"   27","line":"    var stack_buf: [fs.MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":"   28","line":"    var heap_buf: ?[]u8 = null;"},
{"lineNum":"   29","line":"    defer if (heap_buf) |buf| allocator.free(buf);"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    var current_buf: []u8 = &stack_buf;"},
{"lineNum":"   32","line":"    while (true) {"},
{"lineNum":"   33","line":"        if (os.getcwd(current_buf)) |slice| {"},
{"lineNum":"   34","line":"            return allocator.dupe(u8, slice);"},
{"lineNum":"   35","line":"        } else |err| switch (err) {"},
{"lineNum":"   36","line":"            error.NameTooLong => {"},
{"lineNum":"   37","line":"                // The path is too long to fit in stack_buf. Allocate geometrically"},
{"lineNum":"   38","line":"                // increasing buffers until we find one that works"},
{"lineNum":"   39","line":"                const new_capacity = current_buf.len * 2;"},
{"lineNum":"   40","line":"                if (heap_buf) |buf| allocator.free(buf);"},
{"lineNum":"   41","line":"                current_buf = try allocator.alloc(u8, new_capacity);"},
{"lineNum":"   42","line":"                heap_buf = current_buf;"},
{"lineNum":"   43","line":"            },"},
{"lineNum":"   44","line":"            else => |e| return e,"},
{"lineNum":"   45","line":"        }"},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":"}"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"test \"getCwdAlloc\" {"},
{"lineNum":"   50","line":"    if (builtin.os.tag == .wasi) return error.SkipZigTest;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    const cwd = try getCwdAlloc(testing.allocator);"},
{"lineNum":"   53","line":"    testing.allocator.free(cwd);"},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"pub const EnvMap = struct {"},
{"lineNum":"   57","line":"    hash_map: HashMap,"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    const HashMap = std.HashMap("},
{"lineNum":"   60","line":"        []const u8,"},
{"lineNum":"   61","line":"        []const u8,"},
{"lineNum":"   62","line":"        EnvNameHashContext,"},
{"lineNum":"   63","line":"        std.hash_map.default_max_load_percentage,"},
{"lineNum":"   64","line":"    );"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    pub const Size = HashMap.Size;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    pub const EnvNameHashContext = struct {"},
{"lineNum":"   69","line":"        fn upcase(c: u21) u21 {"},
{"lineNum":"   70","line":"            if (c <= std.math.maxInt(u16))"},
{"lineNum":"   71","line":"                return std.os.windows.ntdll.RtlUpcaseUnicodeChar(@as(u16, @intCast(c)));"},
{"lineNum":"   72","line":"            return c;"},
{"lineNum":"   73","line":"        }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        pub fn hash(self: @This(), s: []const u8) u64 {"},
{"lineNum":"   76","line":"            _ = self;"},
{"lineNum":"   77","line":"            if (builtin.os.tag == .windows) {"},
{"lineNum":"   78","line":"                var h = std.hash.Wyhash.init(0);"},
{"lineNum":"   79","line":"                var it = std.unicode.Utf8View.initUnchecked(s).iterator();"},
{"lineNum":"   80","line":"                while (it.nextCodepoint()) |cp| {"},
{"lineNum":"   81","line":"                    const cp_upper = upcase(cp);"},
{"lineNum":"   82","line":"                    h.update(&[_]u8{"},
{"lineNum":"   83","line":"                        @as(u8, @intCast((cp_upper >> 16) & 0xff)),"},
{"lineNum":"   84","line":"                        @as(u8, @intCast((cp_upper >> 8) & 0xff)),"},
{"lineNum":"   85","line":"                        @as(u8, @intCast((cp_upper >> 0) & 0xff)),"},
{"lineNum":"   86","line":"                    });"},
{"lineNum":"   87","line":"                }"},
{"lineNum":"   88","line":"                return h.final();"},
{"lineNum":"   89","line":"            }"},
{"lineNum":"   90","line":"            return std.hash_map.hashString(s);"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        pub fn eql(self: @This(), a: []const u8, b: []const u8) bool {"},
{"lineNum":"   94","line":"            _ = self;"},
{"lineNum":"   95","line":"            if (builtin.os.tag == .windows) {"},
{"lineNum":"   96","line":"                var it_a = std.unicode.Utf8View.initUnchecked(a).iterator();"},
{"lineNum":"   97","line":"                var it_b = std.unicode.Utf8View.initUnchecked(b).iterator();"},
{"lineNum":"   98","line":"                while (true) {"},
{"lineNum":"   99","line":"                    const c_a = it_a.nextCodepoint() orelse break;"},
{"lineNum":"  100","line":"                    const c_b = it_b.nextCodepoint() orelse return false;"},
{"lineNum":"  101","line":"                    if (upcase(c_a) != upcase(c_b))"},
{"lineNum":"  102","line":"                        return false;"},
{"lineNum":"  103","line":"                }"},
{"lineNum":"  104","line":"                return if (it_b.nextCodepoint()) |_| false else true;"},
{"lineNum":"  105","line":"            }"},
{"lineNum":"  106","line":"            return std.hash_map.eqlString(a, b);"},
{"lineNum":"  107","line":"        }"},
{"lineNum":"  108","line":"    };"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    /// Create a EnvMap backed by a specific allocator."},
{"lineNum":"  111","line":"    /// That allocator will be used for both backing allocations"},
{"lineNum":"  112","line":"    /// and string deduplication."},
{"lineNum":"  113","line":"    pub fn init(allocator: Allocator) EnvMap {"},
{"lineNum":"  114","line":"        return EnvMap{ .hash_map = HashMap.init(allocator) };"},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    /// Free the backing storage of the map, as well as all"},
{"lineNum":"  118","line":"    /// of the stored keys and values."},
{"lineNum":"  119","line":"    pub fn deinit(self: *EnvMap) void {"},
{"lineNum":"  120","line":"        var it = self.hash_map.iterator();"},
{"lineNum":"  121","line":"        while (it.next()) |entry| {"},
{"lineNum":"  122","line":"            self.free(entry.key_ptr.*);"},
{"lineNum":"  123","line":"            self.free(entry.value_ptr.*);"},
{"lineNum":"  124","line":"        }"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"        self.hash_map.deinit();"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    /// Same as `put` but the key and value become owned by the EnvMap rather"},
{"lineNum":"  130","line":"    /// than being copied."},
{"lineNum":"  131","line":"    /// If `putMove` fails, the ownership of key and value does not transfer."},
{"lineNum":"  132","line":"    /// On Windows `key` must be a valid UTF-8 string."},
{"lineNum":"  133","line":"    pub fn putMove(self: *EnvMap, key: []u8, value: []u8) !void {"},
{"lineNum":"  134","line":"        const get_or_put = try self.hash_map.getOrPut(key);"},
{"lineNum":"  135","line":"        if (get_or_put.found_existing) {"},
{"lineNum":"  136","line":"            self.free(get_or_put.key_ptr.*);"},
{"lineNum":"  137","line":"            self.free(get_or_put.value_ptr.*);"},
{"lineNum":"  138","line":"            get_or_put.key_ptr.* = key;"},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":"        get_or_put.value_ptr.* = value;"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    /// `key` and `value` are copied into the EnvMap."},
{"lineNum":"  144","line":"    /// On Windows `key` must be a valid UTF-8 string."},
{"lineNum":"  145","line":"    pub fn put(self: *EnvMap, key: []const u8, value: []const u8) !void {"},
{"lineNum":"  146","line":"        const value_copy = try self.copy(value);"},
{"lineNum":"  147","line":"        errdefer self.free(value_copy);"},
{"lineNum":"  148","line":"        const get_or_put = try self.hash_map.getOrPut(key);"},
{"lineNum":"  149","line":"        if (get_or_put.found_existing) {"},
{"lineNum":"  150","line":"            self.free(get_or_put.value_ptr.*);"},
{"lineNum":"  151","line":"        } else {"},
{"lineNum":"  152","line":"            get_or_put.key_ptr.* = self.copy(key) catch |err| {"},
{"lineNum":"  153","line":"                _ = self.hash_map.remove(key);"},
{"lineNum":"  154","line":"                return err;"},
{"lineNum":"  155","line":"            };"},
{"lineNum":"  156","line":"        }"},
{"lineNum":"  157","line":"        get_or_put.value_ptr.* = value_copy;"},
{"lineNum":"  158","line":"    }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    /// Find the address of the value associated with a key."},
{"lineNum":"  161","line":"    /// The returned pointer is invalidated if the map resizes."},
{"lineNum":"  162","line":"    /// On Windows `key` must be a valid UTF-8 string."},
{"lineNum":"  163","line":"    pub fn getPtr(self: EnvMap, key: []const u8) ?*[]const u8 {"},
{"lineNum":"  164","line":"        return self.hash_map.getPtr(key);"},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    /// Return the map\'s copy of the value associated with"},
{"lineNum":"  168","line":"    /// a key.  The returned string is invalidated if this"},
{"lineNum":"  169","line":"    /// key is removed from the map."},
{"lineNum":"  170","line":"    /// On Windows `key` must be a valid UTF-8 string."},
{"lineNum":"  171","line":"    pub fn get(self: EnvMap, key: []const u8) ?[]const u8 {"},
{"lineNum":"  172","line":"        return self.hash_map.get(key);"},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    /// Removes the item from the map and frees its value."},
{"lineNum":"  176","line":"    /// This invalidates the value returned by get() for this key."},
{"lineNum":"  177","line":"    /// On Windows `key` must be a valid UTF-8 string."},
{"lineNum":"  178","line":"    pub fn remove(self: *EnvMap, key: []const u8) void {"},
{"lineNum":"  179","line":"        const kv = self.hash_map.fetchRemove(key) orelse return;"},
{"lineNum":"  180","line":"        self.free(kv.key);"},
{"lineNum":"  181","line":"        self.free(kv.value);"},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    /// Returns the number of KV pairs stored in the map."},
{"lineNum":"  185","line":"    pub fn count(self: EnvMap) HashMap.Size {"},
{"lineNum":"  186","line":"        return self.hash_map.count();"},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    /// Returns an iterator over entries in the map."},
{"lineNum":"  190","line":"    pub fn iterator(self: *const EnvMap) HashMap.Iterator {"},
{"lineNum":"  191","line":"        return self.hash_map.iterator();"},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    fn free(self: EnvMap, value: []const u8) void {"},
{"lineNum":"  195","line":"        self.hash_map.allocator.free(value);"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    fn copy(self: EnvMap, value: []const u8) ![]u8 {"},
{"lineNum":"  199","line":"        return self.hash_map.allocator.dupe(u8, value);"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":"};"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"test \"EnvMap\" {"},
{"lineNum":"  204","line":"    var env = EnvMap.init(testing.allocator);"},
{"lineNum":"  205","line":"    defer env.deinit();"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    try env.put(\"SOMETHING_NEW\", \"hello\");"},
{"lineNum":"  208","line":"    try testing.expectEqualStrings(\"hello\", env.get(\"SOMETHING_NEW\").?);"},
{"lineNum":"  209","line":"    try testing.expectEqual(@as(EnvMap.Size, 1), env.count());"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    // overwrite"},
{"lineNum":"  212","line":"    try env.put(\"SOMETHING_NEW\", \"something\");"},
{"lineNum":"  213","line":"    try testing.expectEqualStrings(\"something\", env.get(\"SOMETHING_NEW\").?);"},
{"lineNum":"  214","line":"    try testing.expectEqual(@as(EnvMap.Size, 1), env.count());"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    // a new longer name to test the Windows-specific conversion buffer"},
{"lineNum":"  217","line":"    try env.put(\"SOMETHING_NEW_AND_LONGER\", \"1\");"},
{"lineNum":"  218","line":"    try testing.expectEqualStrings(\"1\", env.get(\"SOMETHING_NEW_AND_LONGER\").?);"},
{"lineNum":"  219","line":"    try testing.expectEqual(@as(EnvMap.Size, 2), env.count());"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    // case insensitivity on Windows only"},
{"lineNum":"  222","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  223","line":"        try testing.expectEqualStrings(\"1\", env.get(\"something_New_aNd_LONGER\").?);"},
{"lineNum":"  224","line":"    } else {"},
{"lineNum":"  225","line":"        try testing.expect(null == env.get(\"something_New_aNd_LONGER\"));"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    var it = env.iterator();"},
{"lineNum":"  229","line":"    var count: EnvMap.Size = 0;"},
{"lineNum":"  230","line":"    while (it.next()) |entry| {"},
{"lineNum":"  231","line":"        const is_an_expected_name = std.mem.eql(u8, \"SOMETHING_NEW\", entry.key_ptr.*) or std.mem.eql(u8, \"SOMETHING_NEW_AND_LONGER\", entry.key_ptr.*);"},
{"lineNum":"  232","line":"        try testing.expect(is_an_expected_name);"},
{"lineNum":"  233","line":"        count += 1;"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"    try testing.expectEqual(@as(EnvMap.Size, 2), count);"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    env.remove(\"SOMETHING_NEW\");"},
{"lineNum":"  238","line":"    try testing.expect(env.get(\"SOMETHING_NEW\") == null);"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    try testing.expectEqual(@as(EnvMap.Size, 1), env.count());"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    // test Unicode case-insensitivity on Windows"},
{"lineNum":"  243","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  244","line":"        try env.put(\"КИРиллИЦА\", \"something else\");"},
{"lineNum":"  245","line":"        try testing.expectEqualStrings(\"something else\", env.get(\"кириллица\").?);"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"/// Returns a snapshot of the environment variables of the current process."},
{"lineNum":"  250","line":"/// Any modifications to the resulting EnvMap will not be not reflected in the environment, and"},
{"lineNum":"  251","line":"/// likewise, any future modifications to the environment will not be reflected in the EnvMap."},
{"lineNum":"  252","line":"/// Caller owns resulting `EnvMap` and should call its `deinit` fn when done."},
{"lineNum":"  253","line":"pub fn getEnvMap(allocator: Allocator) !EnvMap {"},
{"lineNum":"  254","line":"    var result = EnvMap.init(allocator);"},
{"lineNum":"  255","line":"    errdefer result.deinit();"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  258","line":"        const ptr = os.windows.peb().ProcessParameters.Environment;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"        var i: usize = 0;"},
{"lineNum":"  261","line":"        while (ptr[i] != 0) {"},
{"lineNum":"  262","line":"            const key_start = i;"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"            // There are some special environment variables that start with =,"},
{"lineNum":"  265","line":"            // so we need a special case to not treat = as a key/value separator"},
{"lineNum":"  266","line":"            // if it\'s the first character."},
{"lineNum":"  267","line":"            // https://devblogs.microsoft.com/oldnewthing/20100506-00/?p=14133"},
{"lineNum":"  268","line":"            if (ptr[key_start] == \'=\') i += 1;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"            while (ptr[i] != 0 and ptr[i] != \'=\') : (i += 1) {}"},
{"lineNum":"  271","line":"            const key_w = ptr[key_start..i];"},
{"lineNum":"  272","line":"            const key = try std.unicode.utf16leToUtf8Alloc(allocator, key_w);"},
{"lineNum":"  273","line":"            errdefer allocator.free(key);"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"            if (ptr[i] == \'=\') i += 1;"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"            const value_start = i;"},
{"lineNum":"  278","line":"            while (ptr[i] != 0) : (i += 1) {}"},
{"lineNum":"  279","line":"            const value_w = ptr[value_start..i];"},
{"lineNum":"  280","line":"            const value = try std.unicode.utf16leToUtf8Alloc(allocator, value_w);"},
{"lineNum":"  281","line":"            errdefer allocator.free(value);"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"            i += 1; // skip over null byte"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"            try result.putMove(key, value);"},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":"        return result;"},
{"lineNum":"  288","line":"    } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  289","line":"        var environ_count: usize = undefined;"},
{"lineNum":"  290","line":"        var environ_buf_size: usize = undefined;"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        const environ_sizes_get_ret = os.wasi.environ_sizes_get(&environ_count, &environ_buf_size);"},
{"lineNum":"  293","line":"        if (environ_sizes_get_ret != .SUCCESS) {"},
{"lineNum":"  294","line":"            return os.unexpectedErrno(environ_sizes_get_ret);"},
{"lineNum":"  295","line":"        }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"        if (environ_count == 0) {"},
{"lineNum":"  298","line":"            return result;"},
{"lineNum":"  299","line":"        }"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"        var environ = try allocator.alloc([*:0]u8, environ_count);"},
{"lineNum":"  302","line":"        defer allocator.free(environ);"},
{"lineNum":"  303","line":"        var environ_buf = try allocator.alloc(u8, environ_buf_size);"},
{"lineNum":"  304","line":"        defer allocator.free(environ_buf);"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        const environ_get_ret = os.wasi.environ_get(environ.ptr, environ_buf.ptr);"},
{"lineNum":"  307","line":"        if (environ_get_ret != .SUCCESS) {"},
{"lineNum":"  308","line":"            return os.unexpectedErrno(environ_get_ret);"},
{"lineNum":"  309","line":"        }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"        for (environ) |env| {"},
{"lineNum":"  312","line":"            const pair = mem.sliceTo(env, 0);"},
{"lineNum":"  313","line":"            var parts = mem.splitScalar(u8, pair, \'=\');"},
{"lineNum":"  314","line":"            const key = parts.first();"},
{"lineNum":"  315","line":"            const value = parts.rest();"},
{"lineNum":"  316","line":"            try result.put(key, value);"},
{"lineNum":"  317","line":"        }"},
{"lineNum":"  318","line":"        return result;"},
{"lineNum":"  319","line":"    } else if (builtin.link_libc) {"},
{"lineNum":"  320","line":"        var ptr = std.c.environ;"},
{"lineNum":"  321","line":"        while (ptr[0]) |line| : (ptr += 1) {"},
{"lineNum":"  322","line":"            var line_i: usize = 0;"},
{"lineNum":"  323","line":"            while (line[line_i] != 0 and line[line_i] != \'=\') : (line_i += 1) {}"},
{"lineNum":"  324","line":"            const key = line[0..line_i];"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"            var end_i: usize = line_i;"},
{"lineNum":"  327","line":"            while (line[end_i] != 0) : (end_i += 1) {}"},
{"lineNum":"  328","line":"            const value = line[line_i + 1 .. end_i];"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"            try result.put(key, value);"},
{"lineNum":"  331","line":"        }"},
{"lineNum":"  332","line":"        return result;"},
{"lineNum":"  333","line":"    } else {"},
{"lineNum":"  334","line":"        for (os.environ) |line| {"},
{"lineNum":"  335","line":"            var line_i: usize = 0;"},
{"lineNum":"  336","line":"            while (line[line_i] != 0 and line[line_i] != \'=\') : (line_i += 1) {}"},
{"lineNum":"  337","line":"            const key = line[0..line_i];"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"            var end_i: usize = line_i;"},
{"lineNum":"  340","line":"            while (line[end_i] != 0) : (end_i += 1) {}"},
{"lineNum":"  341","line":"            const value = line[line_i + 1 .. end_i];"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"            try result.put(key, value);"},
{"lineNum":"  344","line":"        }"},
{"lineNum":"  345","line":"        return result;"},
{"lineNum":"  346","line":"    }"},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"test \"getEnvMap\" {"},
{"lineNum":"  350","line":"    var env = try getEnvMap(testing.allocator);"},
{"lineNum":"  351","line":"    defer env.deinit();"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"pub const GetEnvVarOwnedError = error{"},
{"lineNum":"  355","line":"    OutOfMemory,"},
{"lineNum":"  356","line":"    EnvironmentVariableNotFound,"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    /// See https://github.com/ziglang/zig/issues/1774"},
{"lineNum":"  359","line":"    InvalidUtf8,"},
{"lineNum":"  360","line":"};"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"/// Caller must free returned memory."},
{"lineNum":"  363","line":"pub fn getEnvVarOwned(allocator: Allocator, key: []const u8) GetEnvVarOwnedError![]u8 {"},
{"lineNum":"  364","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  365","line":"        const result_w = blk: {"},
{"lineNum":"  366","line":"            const key_w = try std.unicode.utf8ToUtf16LeWithNull(allocator, key);"},
{"lineNum":"  367","line":"            defer allocator.free(key_w);"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"            break :blk std.os.getenvW(key_w) orelse return error.EnvironmentVariableNotFound;"},
{"lineNum":"  370","line":"        };"},
{"lineNum":"  371","line":"        return std.unicode.utf16leToUtf8Alloc(allocator, result_w) catch |err| switch (err) {"},
{"lineNum":"  372","line":"            error.DanglingSurrogateHalf => return error.InvalidUtf8,"},
{"lineNum":"  373","line":"            error.ExpectedSecondSurrogateHalf => return error.InvalidUtf8,"},
{"lineNum":"  374","line":"            error.UnexpectedSecondSurrogateHalf => return error.InvalidUtf8,"},
{"lineNum":"  375","line":"            else => |e| return e,"},
{"lineNum":"  376","line":"        };"},
{"lineNum":"  377","line":"    } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  378","line":"        var envmap = getEnvMap(allocator) catch return error.OutOfMemory;"},
{"lineNum":"  379","line":"        defer envmap.deinit();"},
{"lineNum":"  380","line":"        const val = envmap.get(key) orelse return error.EnvironmentVariableNotFound;"},
{"lineNum":"  381","line":"        return allocator.dupe(u8, val);"},
{"lineNum":"  382","line":"    } else {"},
{"lineNum":"  383","line":"        const result = os.getenv(key) orelse return error.EnvironmentVariableNotFound;"},
{"lineNum":"  384","line":"        return allocator.dupe(u8, result);"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"pub fn hasEnvVarConstant(comptime key: []const u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  389","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  390","line":"        const key_w = comptime std.unicode.utf8ToUtf16LeStringLiteral(key);"},
{"lineNum":"  391","line":"        return std.os.getenvW(key_w) != null;"},
{"lineNum":"  392","line":"    } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  393","line":"        @compileError(\"hasEnvVarConstant is not supported for WASI without libc\");"},
{"lineNum":"  394","line":"    } else {"},
{"lineNum":"  395","line":"        return os.getenv(key) != null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":"}"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"pub fn hasEnvVar(allocator: Allocator, key: []const u8) error{OutOfMemory}!bool {"},
{"lineNum":"  400","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  401","line":"        var stack_alloc = std.heap.stackFallback(256 * @sizeOf(u16), allocator);"},
{"lineNum":"  402","line":"        const key_w = try std.unicode.utf8ToUtf16LeWithNull(stack_alloc.get(), key);"},
{"lineNum":"  403","line":"        defer stack_alloc.allocator.free(key_w);"},
{"lineNum":"  404","line":"        return std.os.getenvW(key_w) != null;"},
{"lineNum":"  405","line":"    } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  406","line":"        var envmap = getEnvMap(allocator) catch return error.OutOfMemory;"},
{"lineNum":"  407","line":"        defer envmap.deinit();"},
{"lineNum":"  408","line":"        return envmap.getPtr(key) != null;"},
{"lineNum":"  409","line":"    } else {"},
{"lineNum":"  410","line":"        return os.getenv(key) != null;"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":"}"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"test \"os.getEnvVarOwned\" {"},
{"lineNum":"  415","line":"    var ga = std.testing.allocator;"},
{"lineNum":"  416","line":"    try testing.expectError(error.EnvironmentVariableNotFound, getEnvVarOwned(ga, \"BADENV\"));"},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"pub const ArgIteratorPosix = struct {"},
{"lineNum":"  420","line":"    index: usize,"},
{"lineNum":"  421","line":"    count: usize,"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    pub const InitError = error{};"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    pub fn init() ArgIteratorPosix {","class":"lineCov","hits":"1","order":"171","possible_hits":"1",},
{"lineNum":"  426","line":"        return ArgIteratorPosix{","class":"lineCov","hits":"2","order":"172","possible_hits":"2",},
{"lineNum":"  427","line":"            .index = 0,"},
{"lineNum":"  428","line":"            .count = os.argv.len,","class":"lineCov","hits":"1","order":"173","possible_hits":"1",},
{"lineNum":"  429","line":"        };"},
{"lineNum":"  430","line":"    }"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    pub fn next(self: *ArgIteratorPosix) ?[:0]const u8 {","class":"lineCov","hits":"1","order":"181","possible_hits":"1",},
{"lineNum":"  433","line":"        if (self.index == self.count) return null;","class":"lineCov","hits":"2","order":"182","possible_hits":"2",},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"        const s = os.argv[self.index];","class":"lineCov","hits":"3","order":"183","possible_hits":"3",},
{"lineNum":"  436","line":"        self.index += 1;","class":"linePartCov","hits":"1","order":"184","possible_hits":"2",},
{"lineNum":"  437","line":"        return mem.sliceTo(s, 0);","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":"  438","line":"    }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"    pub fn skip(self: *ArgIteratorPosix) bool {"},
{"lineNum":"  441","line":"        if (self.index == self.count) return false;"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"        self.index += 1;"},
{"lineNum":"  444","line":"        return true;"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":"};"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"pub const ArgIteratorWasi = struct {"},
{"lineNum":"  449","line":"    allocator: Allocator,"},
{"lineNum":"  450","line":"    index: usize,"},
{"lineNum":"  451","line":"    args: [][:0]u8,"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    pub const InitError = error{OutOfMemory} || os.UnexpectedError;"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    /// You must call deinit to free the internal buffer of the"},
{"lineNum":"  456","line":"    /// iterator after you are done."},
{"lineNum":"  457","line":"    pub fn init(allocator: Allocator) InitError!ArgIteratorWasi {"},
{"lineNum":"  458","line":"        const fetched_args = try ArgIteratorWasi.internalInit(allocator);"},
{"lineNum":"  459","line":"        return ArgIteratorWasi{"},
{"lineNum":"  460","line":"            .allocator = allocator,"},
{"lineNum":"  461","line":"            .index = 0,"},
{"lineNum":"  462","line":"            .args = fetched_args,"},
{"lineNum":"  463","line":"        };"},
{"lineNum":"  464","line":"    }"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    fn internalInit(allocator: Allocator) InitError![][:0]u8 {"},
{"lineNum":"  467","line":"        const w = os.wasi;"},
{"lineNum":"  468","line":"        var count: usize = undefined;"},
{"lineNum":"  469","line":"        var buf_size: usize = undefined;"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"        switch (w.args_sizes_get(&count, &buf_size)) {"},
{"lineNum":"  472","line":"            .SUCCESS => {},"},
{"lineNum":"  473","line":"            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  474","line":"        }"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"        if (count == 0) {"},
{"lineNum":"  477","line":"            return &[_][:0]u8{};"},
{"lineNum":"  478","line":"        }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"        var argv = try allocator.alloc([*:0]u8, count);"},
{"lineNum":"  481","line":"        defer allocator.free(argv);"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"        var argv_buf = try allocator.alloc(u8, buf_size);"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"        switch (w.args_get(argv.ptr, argv_buf.ptr)) {"},
{"lineNum":"  486","line":"            .SUCCESS => {},"},
{"lineNum":"  487","line":"            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  488","line":"        }"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"        var result_args = try allocator.alloc([:0]u8, count);"},
{"lineNum":"  491","line":"        var i: usize = 0;"},
{"lineNum":"  492","line":"        while (i < count) : (i += 1) {"},
{"lineNum":"  493","line":"            result_args[i] = mem.sliceTo(argv[i], 0);"},
{"lineNum":"  494","line":"        }"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"        return result_args;"},
{"lineNum":"  497","line":"    }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    pub fn next(self: *ArgIteratorWasi) ?[:0]const u8 {"},
{"lineNum":"  500","line":"        if (self.index == self.args.len) return null;"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"        const arg = self.args[self.index];"},
{"lineNum":"  503","line":"        self.index += 1;"},
{"lineNum":"  504","line":"        return arg;"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    pub fn skip(self: *ArgIteratorWasi) bool {"},
{"lineNum":"  508","line":"        if (self.index == self.args.len) return false;"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"        self.index += 1;"},
{"lineNum":"  511","line":"        return true;"},
{"lineNum":"  512","line":"    }"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    /// Call to free the internal buffer of the iterator."},
{"lineNum":"  515","line":"    pub fn deinit(self: *ArgIteratorWasi) void {"},
{"lineNum":"  516","line":"        const last_item = self.args[self.args.len - 1];"},
{"lineNum":"  517","line":"        const last_byte_addr = @intFromPtr(last_item.ptr) + last_item.len + 1; // null terminated"},
{"lineNum":"  518","line":"        const first_item_ptr = self.args[0].ptr;"},
{"lineNum":"  519","line":"        const len = last_byte_addr - @intFromPtr(first_item_ptr);"},
{"lineNum":"  520","line":"        self.allocator.free(first_item_ptr[0..len]);"},
{"lineNum":"  521","line":"        self.allocator.free(self.args);"},
{"lineNum":"  522","line":"    }"},
{"lineNum":"  523","line":"};"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"/// Optional parameters for `ArgIteratorGeneral`"},
{"lineNum":"  526","line":"pub const ArgIteratorGeneralOptions = struct {"},
{"lineNum":"  527","line":"    comments: bool = false,"},
{"lineNum":"  528","line":"    single_quotes: bool = false,"},
{"lineNum":"  529","line":"};"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"/// A general Iterator to parse a string into a set of arguments"},
{"lineNum":"  532","line":"pub fn ArgIteratorGeneral(comptime options: ArgIteratorGeneralOptions) type {"},
{"lineNum":"  533","line":"    return struct {"},
{"lineNum":"  534","line":"        allocator: Allocator,"},
{"lineNum":"  535","line":"        index: usize = 0,"},
{"lineNum":"  536","line":"        cmd_line: []const u8,"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"        /// Should the cmd_line field be free\'d (using the allocator) on deinit()?"},
{"lineNum":"  539","line":"        free_cmd_line_on_deinit: bool,"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"        /// buffer MUST be long enough to hold the cmd_line plus a null terminator."},
{"lineNum":"  542","line":"        /// buffer will we free\'d (using the allocator) on deinit()"},
{"lineNum":"  543","line":"        buffer: []u8,"},
{"lineNum":"  544","line":"        start: usize = 0,"},
{"lineNum":"  545","line":"        end: usize = 0,"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"        pub const Self = @This();"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"        pub const InitError = error{OutOfMemory};"},
{"lineNum":"  550","line":"        pub const InitUtf16leError = error{ OutOfMemory, InvalidCmdLine };"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"        /// cmd_line_utf8 MUST remain valid and constant while using this instance"},
{"lineNum":"  553","line":"        pub fn init(allocator: Allocator, cmd_line_utf8: []const u8) InitError!Self {"},
{"lineNum":"  554","line":"            var buffer = try allocator.alloc(u8, cmd_line_utf8.len + 1);"},
{"lineNum":"  555","line":"            errdefer allocator.free(buffer);"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"            return Self{"},
{"lineNum":"  558","line":"                .allocator = allocator,"},
{"lineNum":"  559","line":"                .cmd_line = cmd_line_utf8,"},
{"lineNum":"  560","line":"                .free_cmd_line_on_deinit = false,"},
{"lineNum":"  561","line":"                .buffer = buffer,"},
{"lineNum":"  562","line":"            };"},
{"lineNum":"  563","line":"        }"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"        /// cmd_line_utf8 will be free\'d (with the allocator) on deinit()"},
{"lineNum":"  566","line":"        pub fn initTakeOwnership(allocator: Allocator, cmd_line_utf8: []const u8) InitError!Self {"},
{"lineNum":"  567","line":"            var buffer = try allocator.alloc(u8, cmd_line_utf8.len + 1);"},
{"lineNum":"  568","line":"            errdefer allocator.free(buffer);"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"            return Self{"},
{"lineNum":"  571","line":"                .allocator = allocator,"},
{"lineNum":"  572","line":"                .cmd_line = cmd_line_utf8,"},
{"lineNum":"  573","line":"                .free_cmd_line_on_deinit = true,"},
{"lineNum":"  574","line":"                .buffer = buffer,"},
{"lineNum":"  575","line":"            };"},
{"lineNum":"  576","line":"        }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"        /// cmd_line_utf16le MUST be encoded UTF16-LE, and is converted to UTF-8 in an internal buffer"},
{"lineNum":"  579","line":"        pub fn initUtf16le(allocator: Allocator, cmd_line_utf16le: [*:0]const u16) InitUtf16leError!Self {"},
{"lineNum":"  580","line":"            var utf16le_slice = mem.sliceTo(cmd_line_utf16le, 0);"},
{"lineNum":"  581","line":"            var cmd_line = std.unicode.utf16leToUtf8Alloc(allocator, utf16le_slice) catch |err| switch (err) {"},
{"lineNum":"  582","line":"                error.ExpectedSecondSurrogateHalf,"},
{"lineNum":"  583","line":"                error.DanglingSurrogateHalf,"},
{"lineNum":"  584","line":"                error.UnexpectedSecondSurrogateHalf,"},
{"lineNum":"  585","line":"                => return error.InvalidCmdLine,"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"                error.OutOfMemory => return error.OutOfMemory,"},
{"lineNum":"  588","line":"            };"},
{"lineNum":"  589","line":"            errdefer allocator.free(cmd_line);"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"            var buffer = try allocator.alloc(u8, cmd_line.len + 1);"},
{"lineNum":"  592","line":"            errdefer allocator.free(buffer);"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"            return Self{"},
{"lineNum":"  595","line":"                .allocator = allocator,"},
{"lineNum":"  596","line":"                .cmd_line = cmd_line,"},
{"lineNum":"  597","line":"                .free_cmd_line_on_deinit = true,"},
{"lineNum":"  598","line":"                .buffer = buffer,"},
{"lineNum":"  599","line":"            };"},
{"lineNum":"  600","line":"        }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"        // Skips over whitespace in the cmd_line."},
{"lineNum":"  603","line":"        // Returns false if the terminating sentinel is reached, true otherwise."},
{"lineNum":"  604","line":"        // Also skips over comments (if supported)."},
{"lineNum":"  605","line":"        fn skipWhitespace(self: *Self) bool {"},
{"lineNum":"  606","line":"            while (true) : (self.index += 1) {"},
{"lineNum":"  607","line":"                const character = if (self.index != self.cmd_line.len) self.cmd_line[self.index] else 0;"},
{"lineNum":"  608","line":"                switch (character) {"},
{"lineNum":"  609","line":"                    0 => return false,"},
{"lineNum":"  610","line":"                    \' \', \'\\t\', \'\\r\', \'\\n\' => continue,"},
{"lineNum":"  611","line":"                    \'#\' => {"},
{"lineNum":"  612","line":"                        if (options.comments) {"},
{"lineNum":"  613","line":"                            while (true) : (self.index += 1) {"},
{"lineNum":"  614","line":"                                switch (self.cmd_line[self.index]) {"},
{"lineNum":"  615","line":"                                    \'\\n\' => break,"},
{"lineNum":"  616","line":"                                    0 => return false,"},
{"lineNum":"  617","line":"                                    else => continue,"},
{"lineNum":"  618","line":"                                }"},
{"lineNum":"  619","line":"                            }"},
{"lineNum":"  620","line":"                            continue;"},
{"lineNum":"  621","line":"                        } else {"},
{"lineNum":"  622","line":"                            break;"},
{"lineNum":"  623","line":"                        }"},
{"lineNum":"  624","line":"                    },"},
{"lineNum":"  625","line":"                    else => break,"},
{"lineNum":"  626","line":"                }"},
{"lineNum":"  627","line":"            }"},
{"lineNum":"  628","line":"            return true;"},
{"lineNum":"  629","line":"        }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"        pub fn skip(self: *Self) bool {"},
{"lineNum":"  632","line":"            if (!self.skipWhitespace()) {"},
{"lineNum":"  633","line":"                return false;"},
{"lineNum":"  634","line":"            }"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"            var backslash_count: usize = 0;"},
{"lineNum":"  637","line":"            var in_quote = false;"},
{"lineNum":"  638","line":"            while (true) : (self.index += 1) {"},
{"lineNum":"  639","line":"                const character = if (self.index != self.cmd_line.len) self.cmd_line[self.index] else 0;"},
{"lineNum":"  640","line":"                switch (character) {"},
{"lineNum":"  641","line":"                    0 => return true,"},
{"lineNum":"  642","line":"                    \'\"\', \'\\\'\' => {"},
{"lineNum":"  643","line":"                        if (!options.single_quotes and character == \'\\\'\') {"},
{"lineNum":"  644","line":"                            backslash_count = 0;"},
{"lineNum":"  645","line":"                            continue;"},
{"lineNum":"  646","line":"                        }"},
{"lineNum":"  647","line":"                        const quote_is_real = backslash_count % 2 == 0;"},
{"lineNum":"  648","line":"                        if (quote_is_real) {"},
{"lineNum":"  649","line":"                            in_quote = !in_quote;"},
{"lineNum":"  650","line":"                        }"},
{"lineNum":"  651","line":"                    },"},
{"lineNum":"  652","line":"                    \'\\\\\' => {"},
{"lineNum":"  653","line":"                        backslash_count += 1;"},
{"lineNum":"  654","line":"                    },"},
{"lineNum":"  655","line":"                    \' \', \'\\t\', \'\\r\', \'\\n\' => {"},
{"lineNum":"  656","line":"                        if (!in_quote) {"},
{"lineNum":"  657","line":"                            return true;"},
{"lineNum":"  658","line":"                        }"},
{"lineNum":"  659","line":"                        backslash_count = 0;"},
{"lineNum":"  660","line":"                    },"},
{"lineNum":"  661","line":"                    else => {"},
{"lineNum":"  662","line":"                        backslash_count = 0;"},
{"lineNum":"  663","line":"                        continue;"},
{"lineNum":"  664","line":"                    },"},
{"lineNum":"  665","line":"                }"},
{"lineNum":"  666","line":"            }"},
{"lineNum":"  667","line":"        }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"        /// Returns a slice of the internal buffer that contains the next argument."},
{"lineNum":"  670","line":"        /// Returns null when it reaches the end."},
{"lineNum":"  671","line":"        pub fn next(self: *Self) ?[:0]const u8 {"},
{"lineNum":"  672","line":"            if (!self.skipWhitespace()) {"},
{"lineNum":"  673","line":"                return null;"},
{"lineNum":"  674","line":"            }"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"            var backslash_count: usize = 0;"},
{"lineNum":"  677","line":"            var in_quote = false;"},
{"lineNum":"  678","line":"            while (true) : (self.index += 1) {"},
{"lineNum":"  679","line":"                const character = if (self.index != self.cmd_line.len) self.cmd_line[self.index] else 0;"},
{"lineNum":"  680","line":"                switch (character) {"},
{"lineNum":"  681","line":"                    0 => {"},
{"lineNum":"  682","line":"                        self.emitBackslashes(backslash_count);"},
{"lineNum":"  683","line":"                        self.buffer[self.end] = 0;"},
{"lineNum":"  684","line":"                        var token = self.buffer[self.start..self.end :0];"},
{"lineNum":"  685","line":"                        self.end += 1;"},
{"lineNum":"  686","line":"                        self.start = self.end;"},
{"lineNum":"  687","line":"                        return token;"},
{"lineNum":"  688","line":"                    },"},
{"lineNum":"  689","line":"                    \'\"\', \'\\\'\' => {"},
{"lineNum":"  690","line":"                        if (!options.single_quotes and character == \'\\\'\') {"},
{"lineNum":"  691","line":"                            self.emitBackslashes(backslash_count);"},
{"lineNum":"  692","line":"                            backslash_count = 0;"},
{"lineNum":"  693","line":"                            self.emitCharacter(character);"},
{"lineNum":"  694","line":"                            continue;"},
{"lineNum":"  695","line":"                        }"},
{"lineNum":"  696","line":"                        const quote_is_real = backslash_count % 2 == 0;"},
{"lineNum":"  697","line":"                        self.emitBackslashes(backslash_count / 2);"},
{"lineNum":"  698","line":"                        backslash_count = 0;"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"                        if (quote_is_real) {"},
{"lineNum":"  701","line":"                            in_quote = !in_quote;"},
{"lineNum":"  702","line":"                        } else {"},
{"lineNum":"  703","line":"                            self.emitCharacter(\'\"\');"},
{"lineNum":"  704","line":"                        }"},
{"lineNum":"  705","line":"                    },"},
{"lineNum":"  706","line":"                    \'\\\\\' => {"},
{"lineNum":"  707","line":"                        backslash_count += 1;"},
{"lineNum":"  708","line":"                    },"},
{"lineNum":"  709","line":"                    \' \', \'\\t\', \'\\r\', \'\\n\' => {"},
{"lineNum":"  710","line":"                        self.emitBackslashes(backslash_count);"},
{"lineNum":"  711","line":"                        backslash_count = 0;"},
{"lineNum":"  712","line":"                        if (in_quote) {"},
{"lineNum":"  713","line":"                            self.emitCharacter(character);"},
{"lineNum":"  714","line":"                        } else {"},
{"lineNum":"  715","line":"                            self.buffer[self.end] = 0;"},
{"lineNum":"  716","line":"                            var token = self.buffer[self.start..self.end :0];"},
{"lineNum":"  717","line":"                            self.end += 1;"},
{"lineNum":"  718","line":"                            self.start = self.end;"},
{"lineNum":"  719","line":"                            return token;"},
{"lineNum":"  720","line":"                        }"},
{"lineNum":"  721","line":"                    },"},
{"lineNum":"  722","line":"                    else => {"},
{"lineNum":"  723","line":"                        self.emitBackslashes(backslash_count);"},
{"lineNum":"  724","line":"                        backslash_count = 0;"},
{"lineNum":"  725","line":"                        self.emitCharacter(character);"},
{"lineNum":"  726","line":"                    },"},
{"lineNum":"  727","line":"                }"},
{"lineNum":"  728","line":"            }"},
{"lineNum":"  729","line":"        }"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"        fn emitBackslashes(self: *Self, emit_count: usize) void {"},
{"lineNum":"  732","line":"            var i: usize = 0;"},
{"lineNum":"  733","line":"            while (i < emit_count) : (i += 1) {"},
{"lineNum":"  734","line":"                self.emitCharacter(\'\\\\\');"},
{"lineNum":"  735","line":"            }"},
{"lineNum":"  736","line":"        }"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"        fn emitCharacter(self: *Self, char: u8) void {"},
{"lineNum":"  739","line":"            self.buffer[self.end] = char;"},
{"lineNum":"  740","line":"            self.end += 1;"},
{"lineNum":"  741","line":"        }"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"        /// Call to free the internal buffer of the iterator."},
{"lineNum":"  744","line":"        pub fn deinit(self: *Self) void {"},
{"lineNum":"  745","line":"            self.allocator.free(self.buffer);"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"            if (self.free_cmd_line_on_deinit) {"},
{"lineNum":"  748","line":"                self.allocator.free(self.cmd_line);"},
{"lineNum":"  749","line":"            }"},
{"lineNum":"  750","line":"        }"},
{"lineNum":"  751","line":"    };"},
{"lineNum":"  752","line":"}"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"/// Cross-platform command line argument iterator."},
{"lineNum":"  755","line":"pub const ArgIterator = struct {"},
{"lineNum":"  756","line":"    const InnerType = switch (builtin.os.tag) {"},
{"lineNum":"  757","line":"        .windows => ArgIteratorGeneral(.{}),"},
{"lineNum":"  758","line":"        .wasi => if (builtin.link_libc) ArgIteratorPosix else ArgIteratorWasi,"},
{"lineNum":"  759","line":"        else => ArgIteratorPosix,"},
{"lineNum":"  760","line":"    };"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"    inner: InnerType,"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"    /// Initialize the args iterator. Consider using initWithAllocator() instead"},
{"lineNum":"  765","line":"    /// for cross-platform compatibility."},
{"lineNum":"  766","line":"    pub fn init() ArgIterator {"},
{"lineNum":"  767","line":"        if (builtin.os.tag == .wasi) {"},
{"lineNum":"  768","line":"            @compileError(\"In WASI, use initWithAllocator instead.\");"},
{"lineNum":"  769","line":"        }"},
{"lineNum":"  770","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  771","line":"            @compileError(\"In Windows, use initWithAllocator instead.\");"},
{"lineNum":"  772","line":"        }"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"        return ArgIterator{ .inner = InnerType.init() };"},
{"lineNum":"  775","line":"    }"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"    pub const InitError = switch (builtin.os.tag) {"},
{"lineNum":"  778","line":"        .windows => InnerType.InitUtf16leError,"},
{"lineNum":"  779","line":"        else => InnerType.InitError,"},
{"lineNum":"  780","line":"    };"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"    /// You must deinitialize iterator\'s internal buffers by calling `deinit` when done."},
{"lineNum":"  783","line":"    pub fn initWithAllocator(allocator: Allocator) InitError!ArgIterator {","class":"lineCov","hits":"1","order":"169","possible_hits":"1",},
{"lineNum":"  784","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  785","line":"            return ArgIterator{ .inner = try InnerType.init(allocator) };"},
{"lineNum":"  786","line":"        }"},
{"lineNum":"  787","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  788","line":"            const cmd_line_w = os.windows.kernel32.GetCommandLineW();"},
{"lineNum":"  789","line":"            return ArgIterator{ .inner = try InnerType.initUtf16le(allocator, cmd_line_w) };"},
{"lineNum":"  790","line":"        }"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"        return ArgIterator{ .inner = InnerType.init() };","class":"lineCov","hits":"1","order":"170","possible_hits":"1",},
{"lineNum":"  793","line":"    }"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"    /// Get the next argument. Returns \'null\' if we are at the end."},
{"lineNum":"  796","line":"    /// Returned slice is pointing to the iterator\'s internal buffer."},
{"lineNum":"  797","line":"    pub fn next(self: *ArgIterator) ?([:0]const u8) {","class":"lineCov","hits":"1","order":"179","possible_hits":"1",},
{"lineNum":"  798","line":"        return self.inner.next();","class":"lineCov","hits":"1","order":"180","possible_hits":"1",},
{"lineNum":"  799","line":"    }"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"    /// Parse past 1 argument without capturing it."},
{"lineNum":"  802","line":"    /// Returns `true` if skipped an arg, `false` if we are at the end."},
{"lineNum":"  803","line":"    pub fn skip(self: *ArgIterator) bool {"},
{"lineNum":"  804","line":"        return self.inner.skip();"},
{"lineNum":"  805","line":"    }"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"    /// Call this to free the iterator\'s internal buffer if the iterator"},
{"lineNum":"  808","line":"    /// was created with `initWithAllocator` function."},
{"lineNum":"  809","line":"    pub fn deinit(self: *ArgIterator) void {","class":"lineCov","hits":"1","order":"337","possible_hits":"1",},
{"lineNum":"  810","line":"        // Unless we\'re targeting WASI or Windows, this is a no-op."},
{"lineNum":"  811","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  812","line":"            self.inner.deinit();"},
{"lineNum":"  813","line":"        }"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"        if (builtin.os.tag == .windows) {","class":"lineCov","hits":"1","order":"338","possible_hits":"1",},
{"lineNum":"  816","line":"            self.inner.deinit();"},
{"lineNum":"  817","line":"        }"},
{"lineNum":"  818","line":"    }"},
{"lineNum":"  819","line":"};"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"/// Holds the command-line arguments, with the program name as the first entry."},
{"lineNum":"  822","line":"/// Use argsWithAllocator() for cross-platform code."},
{"lineNum":"  823","line":"pub fn args() ArgIterator {"},
{"lineNum":"  824","line":"    return ArgIterator.init();"},
{"lineNum":"  825","line":"}"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"/// You must deinitialize iterator\'s internal buffers by calling `deinit` when done."},
{"lineNum":"  828","line":"pub fn argsWithAllocator(allocator: Allocator) ArgIterator.InitError!ArgIterator {","class":"lineCov","hits":"1","order":"167","possible_hits":"1",},
{"lineNum":"  829","line":"    return ArgIterator.initWithAllocator(allocator);","class":"lineCov","hits":"1","order":"168","possible_hits":"1",},
{"lineNum":"  830","line":"}"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"/// Caller must call argsFree on result."},
{"lineNum":"  833","line":"pub fn argsAlloc(allocator: Allocator) ![][:0]u8 {","class":"lineCov","hits":"1","order":"165","possible_hits":"1",},
{"lineNum":"  834","line":"    // TODO refactor to only make 1 allocation."},
{"lineNum":"  835","line":"    var it = try argsWithAllocator(allocator);","class":"lineCov","hits":"1","order":"166","possible_hits":"1",},
{"lineNum":"  836","line":"    defer it.deinit();","class":"linePartCov","hits":"1","order":"336","possible_hits":"6",},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    var contents = std.ArrayList(u8).init(allocator);","class":"lineCov","hits":"1","order":"174","possible_hits":"1",},
{"lineNum":"  839","line":"    defer contents.deinit();","class":"linePartCov","hits":"1","order":"335","possible_hits":"6",},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    var slice_list = std.ArrayList(usize).init(allocator);","class":"lineCov","hits":"1","order":"177","possible_hits":"1",},
{"lineNum":"  842","line":"    defer slice_list.deinit();","class":"linePartCov","hits":"1","order":"314","possible_hits":"6",},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"    while (it.next()) |arg| {","class":"lineCov","hits":"2","order":"178","possible_hits":"2",},
{"lineNum":"  845","line":"        try contents.appendSlice(arg[0 .. arg.len + 1]);","class":"linePartCov","hits":"1","order":"197","possible_hits":"3",},
{"lineNum":"  846","line":"        try slice_list.append(arg.len);","class":"linePartCov","hits":"3","order":"274","possible_hits":"4",},
{"lineNum":"  847","line":"    }"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"    const contents_slice = contents.items;","class":"lineCov","hits":"1","order":"292","possible_hits":"1",},
{"lineNum":"  850","line":"    const slice_sizes = slice_list.items;","class":"lineCov","hits":"1","order":"293","possible_hits":"1",},
{"lineNum":"  851","line":"    const slice_list_bytes = try math.mul(usize, @sizeOf([]u8), slice_sizes.len);","class":"linePartCov","hits":"1","order":"294","possible_hits":"3",},
{"lineNum":"  852","line":"    const total_bytes = try math.add(usize, slice_list_bytes, contents_slice.len);","class":"linePartCov","hits":"1","order":"295","possible_hits":"2",},
{"lineNum":"  853","line":"    const buf = try allocator.alignedAlloc(u8, @alignOf([]u8), total_bytes);","class":"linePartCov","hits":"1","order":"300","possible_hits":"2",},
{"lineNum":"  854","line":"    errdefer allocator.free(buf);"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"    const result_slice_list = mem.bytesAsSlice([:0]u8, buf[0..slice_list_bytes]);","class":"lineCov","hits":"2","order":"302","possible_hits":"2",},
{"lineNum":"  857","line":"    const result_contents = buf[slice_list_bytes..];","class":"lineCov","hits":"3","order":"306","possible_hits":"3",},
{"lineNum":"  858","line":"    @memcpy(result_contents[0..contents_slice.len], contents_slice);","class":"lineCov","hits":"3","order":"307","possible_hits":"3",},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"    var contents_index: usize = 0;","class":"lineCov","hits":"1","order":"308","possible_hits":"1",},
{"lineNum":"  861","line":"    for (slice_sizes, 0..) |len, i| {","class":"lineCov","hits":"3","order":"309","possible_hits":"3",},
{"lineNum":"  862","line":"        const new_index = contents_index + len;","class":"linePartCov","hits":"1","order":"310","possible_hits":"2",},
{"lineNum":"  863","line":"        result_slice_list[i] = result_contents[contents_index..new_index :0];","class":"lineCov","hits":"2","order":"311","possible_hits":"2",},
{"lineNum":"  864","line":"        contents_index = new_index + 1;","class":"linePartCov","hits":"3","order":"312","possible_hits":"4",},
{"lineNum":"  865","line":"    }"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    return result_slice_list;","class":"lineCov","hits":"2","order":"313","possible_hits":"2",},
{"lineNum":"  868","line":"}"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"pub fn argsFree(allocator: Allocator, args_alloc: []const [:0]u8) void {"},
{"lineNum":"  871","line":"    var total_bytes: usize = 0;"},
{"lineNum":"  872","line":"    for (args_alloc) |arg| {"},
{"lineNum":"  873","line":"        total_bytes += @sizeOf([]u8) + arg.len + 1;"},
{"lineNum":"  874","line":"    }"},
{"lineNum":"  875","line":"    const unaligned_allocated_buf = @as([*]const u8, @ptrCast(args_alloc.ptr))[0..total_bytes];"},
{"lineNum":"  876","line":"    const aligned_allocated_buf: []align(@alignOf([]u8)) const u8 = @alignCast(unaligned_allocated_buf);"},
{"lineNum":"  877","line":"    return allocator.free(aligned_allocated_buf);"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"test \"general arg parsing\" {"},
{"lineNum":"  881","line":"    try testGeneralCmdLine(\"a   b\\tc d\", &.{ \"a\", \"b\", \"c\", \"d\" });"},
{"lineNum":"  882","line":"    try testGeneralCmdLine(\"\\\"abc\\\" d e\", &.{ \"abc\", \"d\", \"e\" });"},
{"lineNum":"  883","line":"    try testGeneralCmdLine(\"a\\\\\\\\\\\\b d\\\"e f\\\"g h\", &.{ \"a\\\\\\\\\\\\b\", \"de fg\", \"h\" });"},
{"lineNum":"  884","line":"    try testGeneralCmdLine(\"a\\\\\\\\\\\\\\\"b c d\", &.{ \"a\\\\\\\"b\", \"c\", \"d\" });"},
{"lineNum":"  885","line":"    try testGeneralCmdLine(\"a\\\\\\\\\\\\\\\\\\\"b c\\\" d e\", &.{ \"a\\\\\\\\b c\", \"d\", \"e\" });"},
{"lineNum":"  886","line":"    try testGeneralCmdLine(\"a   b\\tc \\\"d f\", &.{ \"a\", \"b\", \"c\", \"d f\" });"},
{"lineNum":"  887","line":"    try testGeneralCmdLine(\"j k l\\\\\", &.{ \"j\", \"k\", \"l\\\\\" });"},
{"lineNum":"  888","line":"    try testGeneralCmdLine(\"\\\"\\\" x y z\\\\\\\\\", &.{ \"\", \"x\", \"y\", \"z\\\\\\\\\" });"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    try testGeneralCmdLine(\"\\\".\\\\..\\\\zig-cache\\\\build\\\" \\\"bin\\\\zig.exe\\\" \\\".\\\\..\\\" \\\".\\\\..\\\\zig-cache\\\" \\\"--help\\\"\", &.{"},
{"lineNum":"  891","line":"        \".\\\\..\\\\zig-cache\\\\build\","},
{"lineNum":"  892","line":"        \"bin\\\\zig.exe\","},
{"lineNum":"  893","line":"        \".\\\\..\","},
{"lineNum":"  894","line":"        \".\\\\..\\\\zig-cache\","},
{"lineNum":"  895","line":"        \"--help\","},
{"lineNum":"  896","line":"    });"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"    try testGeneralCmdLine("},
{"lineNum":"  899","line":"        \\\\ \'foo\' \"bar\""},
{"lineNum":"  900","line":"    , &.{ \"\'foo\'\", \"bar\" });"},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"fn testGeneralCmdLine(input_cmd_line: []const u8, expected_args: []const []const u8) !void {"},
{"lineNum":"  904","line":"    var it = try ArgIteratorGeneral(.{}).init(std.testing.allocator, input_cmd_line);"},
{"lineNum":"  905","line":"    defer it.deinit();"},
{"lineNum":"  906","line":"    for (expected_args) |expected_arg| {"},
{"lineNum":"  907","line":"        const arg = it.next().?;"},
{"lineNum":"  908","line":"        try testing.expectEqualStrings(expected_arg, arg);"},
{"lineNum":"  909","line":"    }"},
{"lineNum":"  910","line":"    try testing.expect(it.next() == null);"},
{"lineNum":"  911","line":"}"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"test \"response file arg parsing\" {"},
{"lineNum":"  914","line":"    try testResponseFileCmdLine("},
{"lineNum":"  915","line":"        \\\\a b"},
{"lineNum":"  916","line":"        \\\\c d\\"},
{"lineNum":"  917","line":"    , &.{ \"a\", \"b\", \"c\", \"d\\\\\" });"},
{"lineNum":"  918","line":"    try testResponseFileCmdLine(\"a b c d\\\\\", &.{ \"a\", \"b\", \"c\", \"d\\\\\" });"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"    try testResponseFileCmdLine("},
{"lineNum":"  921","line":"        \\\\j"},
{"lineNum":"  922","line":"        \\\\ k l # this is a comment \\\\ \\\\\\ \\\\\\\\ \"none\" \"\\\\\" \"\\\\\\\""},
{"lineNum":"  923","line":"        \\\\ \"m\" #another comment"},
{"lineNum":"  924","line":"        \\\\"},
{"lineNum":"  925","line":"    , &.{ \"j\", \"k\", \"l\", \"m\" });"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"    try testResponseFileCmdLine("},
{"lineNum":"  928","line":"        \\\\ \"\" q \"\""},
{"lineNum":"  929","line":"        \\\\ \"r s # t\" \"u\\\" v\" #another comment"},
{"lineNum":"  930","line":"        \\\\"},
{"lineNum":"  931","line":"    , &.{ \"\", \"q\", \"\", \"r s # t\", \"u\\\" v\" });"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"    try testResponseFileCmdLine("},
{"lineNum":"  934","line":"        \\\\ -l\"advapi32\" a# b#c d#"},
{"lineNum":"  935","line":"        \\\\e\\\\\\"},
{"lineNum":"  936","line":"    , &.{ \"-ladvapi32\", \"a#\", \"b#c\", \"d#\", \"e\\\\\\\\\\\\\" });"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"    try testResponseFileCmdLine("},
{"lineNum":"  939","line":"        \\\\ \'foo\' \"bar\""},
{"lineNum":"  940","line":"    , &.{ \"foo\", \"bar\" });"},
{"lineNum":"  941","line":"}"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"fn testResponseFileCmdLine(input_cmd_line: []const u8, expected_args: []const []const u8) !void {"},
{"lineNum":"  944","line":"    var it = try ArgIteratorGeneral(.{ .comments = true, .single_quotes = true })"},
{"lineNum":"  945","line":"        .init(std.testing.allocator, input_cmd_line);"},
{"lineNum":"  946","line":"    defer it.deinit();"},
{"lineNum":"  947","line":"    for (expected_args) |expected_arg| {"},
{"lineNum":"  948","line":"        const arg = it.next().?;"},
{"lineNum":"  949","line":"        try testing.expectEqualStrings(expected_arg, arg);"},
{"lineNum":"  950","line":"    }"},
{"lineNum":"  951","line":"    try testing.expect(it.next() == null);"},
{"lineNum":"  952","line":"}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"pub const UserInfo = struct {"},
{"lineNum":"  955","line":"    uid: os.uid_t,"},
{"lineNum":"  956","line":"    gid: os.gid_t,"},
{"lineNum":"  957","line":"};"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"/// POSIX function which gets a uid from username."},
{"lineNum":"  960","line":"pub fn getUserInfo(name: []const u8) !UserInfo {"},
{"lineNum":"  961","line":"    return switch (builtin.os.tag) {"},
{"lineNum":"  962","line":"        .linux, .macos, .watchos, .tvos, .ios, .freebsd, .netbsd, .openbsd, .haiku, .solaris => posixGetUserInfo(name),"},
{"lineNum":"  963","line":"        else => @compileError(\"Unsupported OS\"),"},
{"lineNum":"  964","line":"    };"},
{"lineNum":"  965","line":"}"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"/// TODO this reads /etc/passwd. But sometimes the user/id mapping is in something else"},
{"lineNum":"  968","line":"/// like NIS, AD, etc. See `man nss` or look at an strace for `id myuser`."},
{"lineNum":"  969","line":"pub fn posixGetUserInfo(name: []const u8) !UserInfo {"},
{"lineNum":"  970","line":"    const file = try std.fs.openFileAbsolute(\"/etc/passwd\", .{});"},
{"lineNum":"  971","line":"    defer file.close();"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"    const reader = file.reader();"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"    const State = enum {"},
{"lineNum":"  976","line":"        Start,"},
{"lineNum":"  977","line":"        WaitForNextLine,"},
{"lineNum":"  978","line":"        SkipPassword,"},
{"lineNum":"  979","line":"        ReadUserId,"},
{"lineNum":"  980","line":"        ReadGroupId,"},
{"lineNum":"  981","line":"    };"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"    var buf: [std.mem.page_size]u8 = undefined;"},
{"lineNum":"  984","line":"    var name_index: usize = 0;"},
{"lineNum":"  985","line":"    var state = State.Start;"},
{"lineNum":"  986","line":"    var uid: os.uid_t = 0;"},
{"lineNum":"  987","line":"    var gid: os.gid_t = 0;"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    while (true) {"},
{"lineNum":"  990","line":"        const amt_read = try reader.read(buf[0..]);"},
{"lineNum":"  991","line":"        for (buf[0..amt_read]) |byte| {"},
{"lineNum":"  992","line":"            switch (state) {"},
{"lineNum":"  993","line":"                .Start => switch (byte) {"},
{"lineNum":"  994","line":"                    \':\' => {"},
{"lineNum":"  995","line":"                        state = if (name_index == name.len) State.SkipPassword else State.WaitForNextLine;"},
{"lineNum":"  996","line":"                    },"},
{"lineNum":"  997","line":"                    \'\\n\' => return error.CorruptPasswordFile,"},
{"lineNum":"  998","line":"                    else => {"},
{"lineNum":"  999","line":"                        if (name_index == name.len or name[name_index] != byte) {"},
{"lineNum":" 1000","line":"                            state = .WaitForNextLine;"},
{"lineNum":" 1001","line":"                        }"},
{"lineNum":" 1002","line":"                        name_index += 1;"},
{"lineNum":" 1003","line":"                    },"},
{"lineNum":" 1004","line":"                },"},
{"lineNum":" 1005","line":"                .WaitForNextLine => switch (byte) {"},
{"lineNum":" 1006","line":"                    \'\\n\' => {"},
{"lineNum":" 1007","line":"                        name_index = 0;"},
{"lineNum":" 1008","line":"                        state = .Start;"},
{"lineNum":" 1009","line":"                    },"},
{"lineNum":" 1010","line":"                    else => continue,"},
{"lineNum":" 1011","line":"                },"},
{"lineNum":" 1012","line":"                .SkipPassword => switch (byte) {"},
{"lineNum":" 1013","line":"                    \'\\n\' => return error.CorruptPasswordFile,"},
{"lineNum":" 1014","line":"                    \':\' => {"},
{"lineNum":" 1015","line":"                        state = .ReadUserId;"},
{"lineNum":" 1016","line":"                    },"},
{"lineNum":" 1017","line":"                    else => continue,"},
{"lineNum":" 1018","line":"                },"},
{"lineNum":" 1019","line":"                .ReadUserId => switch (byte) {"},
{"lineNum":" 1020","line":"                    \':\' => {"},
{"lineNum":" 1021","line":"                        state = .ReadGroupId;"},
{"lineNum":" 1022","line":"                    },"},
{"lineNum":" 1023","line":"                    \'\\n\' => return error.CorruptPasswordFile,"},
{"lineNum":" 1024","line":"                    else => {"},
{"lineNum":" 1025","line":"                        const digit = switch (byte) {"},
{"lineNum":" 1026","line":"                            \'0\'...\'9\' => byte - \'0\',"},
{"lineNum":" 1027","line":"                            else => return error.CorruptPasswordFile,"},
{"lineNum":" 1028","line":"                        };"},
{"lineNum":" 1029","line":"                        {"},
{"lineNum":" 1030","line":"                            const ov = @mulWithOverflow(uid, 10);"},
{"lineNum":" 1031","line":"                            if (ov[1] != 0) return error.CorruptPasswordFile;"},
{"lineNum":" 1032","line":"                            uid = ov[0];"},
{"lineNum":" 1033","line":"                        }"},
{"lineNum":" 1034","line":"                        {"},
{"lineNum":" 1035","line":"                            const ov = @addWithOverflow(uid, digit);"},
{"lineNum":" 1036","line":"                            if (ov[1] != 0) return error.CorruptPasswordFile;"},
{"lineNum":" 1037","line":"                            uid = ov[0];"},
{"lineNum":" 1038","line":"                        }"},
{"lineNum":" 1039","line":"                    },"},
{"lineNum":" 1040","line":"                },"},
{"lineNum":" 1041","line":"                .ReadGroupId => switch (byte) {"},
{"lineNum":" 1042","line":"                    \'\\n\', \':\' => {"},
{"lineNum":" 1043","line":"                        return UserInfo{"},
{"lineNum":" 1044","line":"                            .uid = uid,"},
{"lineNum":" 1045","line":"                            .gid = gid,"},
{"lineNum":" 1046","line":"                        };"},
{"lineNum":" 1047","line":"                    },"},
{"lineNum":" 1048","line":"                    else => {"},
{"lineNum":" 1049","line":"                        const digit = switch (byte) {"},
{"lineNum":" 1050","line":"                            \'0\'...\'9\' => byte - \'0\',"},
{"lineNum":" 1051","line":"                            else => return error.CorruptPasswordFile,"},
{"lineNum":" 1052","line":"                        };"},
{"lineNum":" 1053","line":"                        {"},
{"lineNum":" 1054","line":"                            const ov = @mulWithOverflow(gid, 10);"},
{"lineNum":" 1055","line":"                            if (ov[1] != 0) return error.CorruptPasswordFile;"},
{"lineNum":" 1056","line":"                            gid = ov[0];"},
{"lineNum":" 1057","line":"                        }"},
{"lineNum":" 1058","line":"                        {"},
{"lineNum":" 1059","line":"                            const ov = @addWithOverflow(gid, digit);"},
{"lineNum":" 1060","line":"                            if (ov[1] != 0) return error.CorruptPasswordFile;"},
{"lineNum":" 1061","line":"                            gid = ov[0];"},
{"lineNum":" 1062","line":"                        }"},
{"lineNum":" 1063","line":"                    },"},
{"lineNum":" 1064","line":"                },"},
{"lineNum":" 1065","line":"            }"},
{"lineNum":" 1066","line":"        }"},
{"lineNum":" 1067","line":"        if (amt_read < buf.len) return error.UserNotFound;"},
{"lineNum":" 1068","line":"    }"},
{"lineNum":" 1069","line":"}"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"pub fn getBaseAddress() usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1072","line":"    switch (builtin.os.tag) {"},
{"lineNum":" 1073","line":"        .linux => {"},
{"lineNum":" 1074","line":"            const base = os.system.getauxval(std.elf.AT_BASE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1075","line":"            if (base != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1076","line":"                return base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1077","line":"            }"},
{"lineNum":" 1078","line":"            const phdr = os.system.getauxval(std.elf.AT_PHDR);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1079","line":"            return phdr - @sizeOf(std.elf.Ehdr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1080","line":"        },"},
{"lineNum":" 1081","line":"        .macos, .freebsd, .netbsd => {"},
{"lineNum":" 1082","line":"            return @intFromPtr(&std.c._mh_execute_header);"},
{"lineNum":" 1083","line":"        },"},
{"lineNum":" 1084","line":"        .windows => return @intFromPtr(os.windows.kernel32.GetModuleHandleW(null)),"},
{"lineNum":" 1085","line":"        else => @compileError(\"Unsupported OS\"),"},
{"lineNum":" 1086","line":"    }"},
{"lineNum":" 1087","line":"}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"/// Tells whether calling the `execv` or `execve` functions will be a compile error."},
{"lineNum":" 1090","line":"pub const can_execv = switch (builtin.os.tag) {"},
{"lineNum":" 1091","line":"    .windows, .haiku, .wasi => false,"},
{"lineNum":" 1092","line":"    else => true,"},
{"lineNum":" 1093","line":"};"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"/// Tells whether spawning child processes is supported (e.g. via ChildProcess)"},
{"lineNum":" 1096","line":"pub const can_spawn = switch (builtin.os.tag) {"},
{"lineNum":" 1097","line":"    .wasi, .watchos, .tvos => false,"},
{"lineNum":" 1098","line":"    else => true,"},
{"lineNum":" 1099","line":"};"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"pub const ExecvError = std.os.ExecveError || error{OutOfMemory};"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"/// Replaces the current process image with the executed process."},
{"lineNum":" 1104","line":"/// This function must allocate memory to add a null terminating bytes on path and each arg."},
{"lineNum":" 1105","line":"/// It must also convert to KEY=VALUE\\0 format for environment variables, and include null"},
{"lineNum":" 1106","line":"/// pointers after the args and after the environment variables."},
{"lineNum":" 1107","line":"/// `argv[0]` is the executable path."},
{"lineNum":" 1108","line":"/// This function also uses the PATH environment variable to get the full path to the executable."},
{"lineNum":" 1109","line":"/// Due to the heap-allocation, it is illegal to call this function in a fork() child."},
{"lineNum":" 1110","line":"/// For that use case, use the `std.os` functions directly."},
{"lineNum":" 1111","line":"pub fn execv(allocator: Allocator, argv: []const []const u8) ExecvError {"},
{"lineNum":" 1112","line":"    return execve(allocator, argv, null);"},
{"lineNum":" 1113","line":"}"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"/// Replaces the current process image with the executed process."},
{"lineNum":" 1116","line":"/// This function must allocate memory to add a null terminating bytes on path and each arg."},
{"lineNum":" 1117","line":"/// It must also convert to KEY=VALUE\\0 format for environment variables, and include null"},
{"lineNum":" 1118","line":"/// pointers after the args and after the environment variables."},
{"lineNum":" 1119","line":"/// `argv[0]` is the executable path."},
{"lineNum":" 1120","line":"/// This function also uses the PATH environment variable to get the full path to the executable."},
{"lineNum":" 1121","line":"/// Due to the heap-allocation, it is illegal to call this function in a fork() child."},
{"lineNum":" 1122","line":"/// For that use case, use the `std.os` functions directly."},
{"lineNum":" 1123","line":"pub fn execve("},
{"lineNum":" 1124","line":"    allocator: Allocator,"},
{"lineNum":" 1125","line":"    argv: []const []const u8,"},
{"lineNum":" 1126","line":"    env_map: ?*const EnvMap,"},
{"lineNum":" 1127","line":") ExecvError {"},
{"lineNum":" 1128","line":"    if (!can_execv) @compileError(\"The target OS does not support execv\");"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"    var arena_allocator = std.heap.ArenaAllocator.init(allocator);"},
{"lineNum":" 1131","line":"    defer arena_allocator.deinit();"},
{"lineNum":" 1132","line":"    const arena = arena_allocator.allocator();"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"    const argv_buf = try arena.allocSentinel(?[*:0]const u8, argv.len, null);"},
{"lineNum":" 1135","line":"    for (argv, 0..) |arg, i| argv_buf[i] = (try arena.dupeZ(u8, arg)).ptr;"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"    const envp = m: {"},
{"lineNum":" 1138","line":"        if (env_map) |m| {"},
{"lineNum":" 1139","line":"            const envp_buf = try child_process.createNullDelimitedEnvMap(arena, m);"},
{"lineNum":" 1140","line":"            break :m envp_buf.ptr;"},
{"lineNum":" 1141","line":"        } else if (builtin.link_libc) {"},
{"lineNum":" 1142","line":"            break :m std.c.environ;"},
{"lineNum":" 1143","line":"        } else if (builtin.output_mode == .Exe) {"},
{"lineNum":" 1144","line":"            // Then we have Zig start code and this works."},
{"lineNum":" 1145","line":"            // TODO type-safety for null-termination of `os.environ`."},
{"lineNum":" 1146","line":"            break :m @as([*:null]const ?[*:0]const u8, @ptrCast(os.environ.ptr));"},
{"lineNum":" 1147","line":"        } else {"},
{"lineNum":" 1148","line":"            // TODO come up with a solution for this."},
{"lineNum":" 1149","line":"            @compileError(\"missing std lib enhancement: std.process.execv implementation has no way to collect the environment variables to forward to the child process\");"},
{"lineNum":" 1150","line":"        }"},
{"lineNum":" 1151","line":"    };"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"    return os.execvpeZ_expandArg0(.no_expand, argv_buf.ptr[0].?, argv_buf.ptr, envp);"},
{"lineNum":" 1154","line":"}"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"pub const TotalSystemMemoryError = error{"},
{"lineNum":" 1157","line":"    UnknownTotalSystemMemory,"},
{"lineNum":" 1158","line":"};"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"/// Returns the total system memory, in bytes."},
{"lineNum":" 1161","line":"pub fn totalSystemMemory() TotalSystemMemoryError!usize {"},
{"lineNum":" 1162","line":"    switch (builtin.os.tag) {"},
{"lineNum":" 1163","line":"        .linux => {"},
{"lineNum":" 1164","line":"            return totalSystemMemoryLinux() catch return error.UnknownTotalSystemMemory;"},
{"lineNum":" 1165","line":"        },"},
{"lineNum":" 1166","line":"        .freebsd => {"},
{"lineNum":" 1167","line":"            var physmem: c_ulong = undefined;"},
{"lineNum":" 1168","line":"            var len: usize = @sizeOf(c_ulong);"},
{"lineNum":" 1169","line":"            os.sysctlbynameZ(\"hw.physmem\", &physmem, &len, null, 0) catch |err| switch (err) {"},
{"lineNum":" 1170","line":"                error.NameTooLong, error.UnknownName => unreachable,"},
{"lineNum":" 1171","line":"                else => return error.UnknownTotalSystemMemory,"},
{"lineNum":" 1172","line":"            };"},
{"lineNum":" 1173","line":"            return @as(usize, @intCast(physmem));"},
{"lineNum":" 1174","line":"        },"},
{"lineNum":" 1175","line":"        .openbsd => {"},
{"lineNum":" 1176","line":"            const mib: [2]c_int = [_]c_int{"},
{"lineNum":" 1177","line":"                std.os.CTL.HW,"},
{"lineNum":" 1178","line":"                std.os.HW.PHYSMEM64,"},
{"lineNum":" 1179","line":"            };"},
{"lineNum":" 1180","line":"            var physmem: i64 = undefined;"},
{"lineNum":" 1181","line":"            var len: usize = @sizeOf(@TypeOf(physmem));"},
{"lineNum":" 1182","line":"            std.os.sysctl(&mib, &physmem, &len, null, 0) catch |err| switch (err) {"},
{"lineNum":" 1183","line":"                error.NameTooLong => unreachable, // constant, known good value"},
{"lineNum":" 1184","line":"                error.PermissionDenied => unreachable, // only when setting values,"},
{"lineNum":" 1185","line":"                error.SystemResources => unreachable, // memory already on the stack"},
{"lineNum":" 1186","line":"                error.UnknownName => unreachable, // constant, known good value"},
{"lineNum":" 1187","line":"                else => return error.UnknownTotalSystemMemory,"},
{"lineNum":" 1188","line":"            };"},
{"lineNum":" 1189","line":"            assert(physmem >= 0);"},
{"lineNum":" 1190","line":"            return @as(usize, @bitCast(physmem));"},
{"lineNum":" 1191","line":"        },"},
{"lineNum":" 1192","line":"        .windows => {"},
{"lineNum":" 1193","line":"            var sbi: std.os.windows.SYSTEM_BASIC_INFORMATION = undefined;"},
{"lineNum":" 1194","line":"            const rc = std.os.windows.ntdll.NtQuerySystemInformation("},
{"lineNum":" 1195","line":"                .SystemBasicInformation,"},
{"lineNum":" 1196","line":"                &sbi,"},
{"lineNum":" 1197","line":"                @sizeOf(std.os.windows.SYSTEM_BASIC_INFORMATION),"},
{"lineNum":" 1198","line":"                null,"},
{"lineNum":" 1199","line":"            );"},
{"lineNum":" 1200","line":"            if (rc != .SUCCESS) {"},
{"lineNum":" 1201","line":"                return error.UnknownTotalSystemMemory;"},
{"lineNum":" 1202","line":"            }"},
{"lineNum":" 1203","line":"            return @as(usize, sbi.NumberOfPhysicalPages) * sbi.PageSize;"},
{"lineNum":" 1204","line":"        },"},
{"lineNum":" 1205","line":"        else => return error.UnknownTotalSystemMemory,"},
{"lineNum":" 1206","line":"    }"},
{"lineNum":" 1207","line":"}"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"fn totalSystemMemoryLinux() !usize {"},
{"lineNum":" 1210","line":"    var file = try std.fs.openFileAbsoluteZ(\"/proc/meminfo\", .{});"},
{"lineNum":" 1211","line":"    defer file.close();"},
{"lineNum":" 1212","line":"    var buf: [50]u8 = undefined;"},
{"lineNum":" 1213","line":"    const amt = try file.read(&buf);"},
{"lineNum":" 1214","line":"    if (amt != 50) return error.Unexpected;"},
{"lineNum":" 1215","line":"    var it = std.mem.tokenizeAny(u8, buf[0..amt], \" \\n\");"},
{"lineNum":" 1216","line":"    const label = it.next().?;"},
{"lineNum":" 1217","line":"    if (!std.mem.eql(u8, label, \"MemTotal:\")) return error.Unexpected;"},
{"lineNum":" 1218","line":"    const int_text = it.next() orelse return error.Unexpected;"},
{"lineNum":" 1219","line":"    const units = it.next() orelse return error.Unexpected;"},
{"lineNum":" 1220","line":"    if (!std.mem.eql(u8, units, \"kB\")) return error.Unexpected;"},
{"lineNum":" 1221","line":"    const kilobytes = try std.fmt.parseInt(usize, int_text, 10);"},
{"lineNum":" 1222","line":"    return kilobytes * 1024;"},
{"lineNum":" 1223","line":"}"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"/// Indicate that we are now terminating with a successful exit code."},
{"lineNum":" 1226","line":"/// In debug builds, this is a no-op, so that the calling code\'s"},
{"lineNum":" 1227","line":"/// cleanup mechanisms are tested and so that external tools that"},
{"lineNum":" 1228","line":"/// check for resource leaks can be accurate. In release builds, this"},
{"lineNum":" 1229","line":"/// calls exit(0), and does not return."},
{"lineNum":" 1230","line":"pub fn cleanExit() void {"},
{"lineNum":" 1231","line":"    if (builtin.mode == .Debug) {"},
{"lineNum":" 1232","line":"        return;"},
{"lineNum":" 1233","line":"    } else {"},
{"lineNum":" 1234","line":"        exit(0);"},
{"lineNum":" 1235","line":"    }"},
{"lineNum":" 1236","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 48, "covered" : 40,};
var merged_data = [];
