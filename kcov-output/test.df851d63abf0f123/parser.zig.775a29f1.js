var data = {lines:[
{"lineNum":"    1","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"    2","line":"/// Version 0.0: The parser was implemented but did not have nice ast"},
{"lineNum":"    3","line":"/// Version 0.1: AST will be flat array(s)"},
{"lineNum":"    4","line":"///     - NOTE: for the ones that are lists, the LHS will be the first, and the RHS will be the last"},
{"lineNum":"    5","line":"///       - Only implemented so far for NestedDecl"},
{"lineNum":"    6","line":"///     - The optionals on the AST are nice, however, I think that they should"},
{"lineNum":"    7","line":"///       be removed because they fore the use of getters and setters, so that"},
{"lineNum":"    8","line":"///       the code is not insanely long."},
{"lineNum":"    9","line":"///       - Furthermore I do not like how the inline version panics out."},
{"lineNum":"   10","line":"/// Version 0.2: The AST is now a flat array."},
{"lineNum":"   11","line":"/// NOTE: there is a lot of indirection present in the tree"},
{"lineNum":"   12","line":"///     ex. Expression -> Selector -> Factor -> Number"},
{"lineNum":"   13","line":"///     the plan is to remove this as needed while working on the following"},
{"lineNum":"   14","line":"///     compile steps that operate on the AST (name resolution, type checking, semantic analysis)"},
{"lineNum":"   15","line":"///     to suit the needs of those steps"},
{"lineNum":"   16","line":"///"},
{"lineNum":"   17","line":"///     the primary goal will be to remove as many of the so-called \"lhs only\" nodes"},
{"lineNum":"   18","line":"///     such as Expression."},
{"lineNum":"   19","line":"///"},
{"lineNum":"   20","line":"///     The goal of the AST is not to produce a clean representation"},
{"lineNum":"   21","line":"///     of the grammar based on the input file, it is to create a structure suitable"},
{"lineNum":"   22","line":"///     for the following compile steps/passes"},
{"lineNum":"   23","line":"///     Therefore information that can be assumed"},
{"lineNum":"   24","line":"///     (like the condition in an if statement is an expression)"},
{"lineNum":"   25","line":"///     should not be stored as it only adds more places for mistakes, and more required"},
{"lineNum":"   26","line":"///     logic/indirection to the consumers"},
{"lineNum":"   27","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"const std = @import(\"std\");"},
{"lineNum":"   30","line":"const lexer = @import(\"lexer.zig\");"},
{"lineNum":"   31","line":"const Token = lexer.Token;"},
{"lineNum":"   32","line":"const Lexer = lexer.Lexer;"},
{"lineNum":"   33","line":"const TokenKind = lexer.TokenKind;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"const Node = @import(\"ast.zig\").Node;"},
{"lineNum":"   36","line":"const NodeKind = Node.Kind;"},
{"lineNum":"   37","line":"const NodeList = @import(\"ast.zig\").NodeList;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"const utils = @import(\"utils.zig\");"},
{"lineNum":"   40","line":"const log = @import(\"log.zig\");"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"const ParserError = error{ InvalidToken, TokenIndexOutOfBounds, TokensDoNotMatch, NotEnoughTokens, NoRangeForToken, OutofBounds, OutOfMemory, AssertionError };"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"/// A parser is responsible for taking the tokens and creating an abstract syntax tree."},
{"lineNum":"   45","line":"/// The resulting ast is a flat array of nodes."},
{"lineNum":"   46","line":"/// To deinit the parser call the `deinit` member function."},
{"lineNum":"   47","line":"/// Reccomended usage:"},
{"lineNum":"   48","line":"/// ```zig"},
{"lineNum":"   49","line":"/// cosnt tokens = try Lexer.tokenize(input, file_name, allocator);"},
{"lineNum":"   50","line":"/// const parser = try Parser.parseTokens(tokens, input, allocator);"},
{"lineNum":"   51","line":"/// defer parser.deinit();"},
{"lineNum":"   52","line":"/// ```"},
{"lineNum":"   53","line":"pub const Parser = struct {"},
{"lineNum":"   54","line":"    tokens: []Token,"},
{"lineNum":"   55","line":"    input: []const u8,"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    ast: NodeList,"},
{"lineNum":"   58","line":"    astLen: usize = 0,"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    pos: usize = 0,"},
{"lineNum":"   61","line":"    readPos: usize = 1,"},
{"lineNum":"   62","line":"    idMap: std.StringHashMap(bool),"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    allocator: std.mem.Allocator,"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    // flags"},
{"lineNum":"   67","line":"    showParseTree: bool = false,"},
{"lineNum":"   68","line":"    allowNoMain: bool = @import(\"builtin\").is_test,"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    pub fn init(tokens: []Token, input: []const u8, allocator: std.mem.Allocator) !Parser {","class":"lineCov","hits":"1","order":"824","possible_hits":"1",},
{"lineNum":"   71","line":"        var parser = Parser{","class":"lineCov","hits":"1","order":"825","possible_hits":"1",},
{"lineNum":"   72","line":"            .ast = try std.ArrayList(Node).initCapacity(allocator, tokens.len),","class":"lineCov","hits":"1","order":"826","possible_hits":"1",},
{"lineNum":"   73","line":"            .idMap = std.StringHashMap(bool).init(allocator),","class":"lineCov","hits":"1","order":"831","possible_hits":"1",},
{"lineNum":"   74","line":"            .tokens = tokens,"},
{"lineNum":"   75","line":"            .input = input,"},
{"lineNum":"   76","line":"            .readPos = if (tokens.len > 0) 1 else 0,","class":"lineCov","hits":"2","order":"834","possible_hits":"2",},
{"lineNum":"   77","line":"            .allocator = allocator,"},
{"lineNum":"   78","line":"        };"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        return parser;","class":"lineCov","hits":"1","order":"835","possible_hits":"1",},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    pub fn deinit(self: *Parser) void {","class":"lineCov","hits":"1","order":"3299","possible_hits":"1",},
{"lineNum":"   84","line":"        self.allocator.free(self.tokens);","class":"lineCov","hits":"1","order":"3300","possible_hits":"1",},
{"lineNum":"   85","line":"        self.idMap.deinit();","class":"lineCov","hits":"1","order":"3301","possible_hits":"1",},
{"lineNum":"   86","line":"    }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    pub fn parseTokens(tokens: []Token, input: []const u8, allocator: std.mem.Allocator) !Parser {","class":"lineCov","hits":"1","order":"822","possible_hits":"1",},
{"lineNum":"   89","line":"        var parser = try Parser.init(tokens, input, allocator);","class":"lineCov","hits":"1","order":"823","possible_hits":"1",},
{"lineNum":"   90","line":"        parser.parseProgram() catch |err| {","class":"lineCov","hits":"2","order":"836","possible_hits":"2",},
{"lineNum":"   91","line":"            log.err(\"Error in parsing the program.\\n\", .{});","class":"lineCov","hits":"1","order":"3297","possible_hits":"1",},
{"lineNum":"   92","line":"            parser.deinit();","class":"lineCov","hits":"1","order":"3298","possible_hits":"1",},
{"lineNum":"   93","line":"            return err;","class":"lineCov","hits":"1","order":"3305","possible_hits":"1",},
{"lineNum":"   94","line":"        };"},
{"lineNum":"   95","line":"        return parser;","class":"lineCov","hits":"1","order":"1152","possible_hits":"1",},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    fn peekToken(self: *Parser) !Token {","class":"lineCov","hits":"1","order":"1068","possible_hits":"1",},
{"lineNum":"   99","line":"        if (self.readPos >= self.tokens.len) return error.TokenIndexOutOfBounds;","class":"linePartCov","hits":"1","order":"1069","possible_hits":"2",},
{"lineNum":"  100","line":"        return self.tokens[self.readPos];","class":"lineCov","hits":"2","order":"1070","possible_hits":"2",},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    fn peekNTokens(self: *Parser, n: usize) !Token {","class":"lineCov","hits":"1","order":"2602","possible_hits":"1",},
{"lineNum":"  104","line":"        if (self.readPos + n >= self.tokens.len) return error.TokenIndexOutOfBounds;","class":"linePartCov","hits":"1","order":"2603","possible_hits":"2",},
{"lineNum":"  105","line":"        return self.tokens[self.readPos + n];","class":"linePartCov","hits":"1","order":"2604","possible_hits":"2",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    // TODO : create currentTokenThatShouldBe function for more checks and"},
{"lineNum":"  109","line":"    // easier bug finding (supposedly (my opinions are my own))"},
{"lineNum":"  110","line":"    fn currentToken(self: *Parser) !Token {","class":"lineCov","hits":"1","order":"839","possible_hits":"1",},
{"lineNum":"  111","line":"        if (self.pos >= self.tokens.len) return error.TokenIndexOutOfBounds;","class":"linePartCov","hits":"1","order":"840","possible_hits":"2",},
{"lineNum":"  112","line":"        return self.tokens[self.pos];","class":"lineCov","hits":"2","order":"841","possible_hits":"2",},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    fn consumeToken(self: *Parser) !Token {","class":"lineCov","hits":"1","order":"891","possible_hits":"1",},
{"lineNum":"  116","line":"        if (self.pos >= self.tokens.len) {","class":"lineCov","hits":"1","order":"892","possible_hits":"1",},
{"lineNum":"  117","line":"            log.err(\"Error Consuming Token: Out of bounds @ Token# {d}/{d}\\n The last token was: {s}.\\n\", .{ self.readPos, self.tokens.len, @tagName((try self.currentToken()).kind) });","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  118","line":"            log.err(\"Hit EOF before expected.\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"            return error.TokenIndexOutOfBounds;","class":"linePartCov","hits":"1","order":"893","possible_hits":"2",},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":"        const token = self.tokens[self.pos];","class":"lineCov","hits":"3","order":"894","possible_hits":"3",},
{"lineNum":"  122","line":"        self.pos = self.readPos;","class":"lineCov","hits":"1","order":"895","possible_hits":"1",},
{"lineNum":"  123","line":"        self.readPos += 1;","class":"linePartCov","hits":"1","order":"896","possible_hits":"2",},
{"lineNum":"  124","line":"        return token;","class":"lineCov","hits":"1","order":"897","possible_hits":"1",},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    fn expectToken(self: *Parser, kind: TokenKind) !void {","class":"lineCov","hits":"1","order":"889","possible_hits":"1",},
{"lineNum":"  128","line":"        const token = self.consumeToken() catch |err| {","class":"lineCov","hits":"2","order":"890","possible_hits":"2",},
{"lineNum":"  129","line":"            log.err(\"Error could not find expected Token: {s}\\n\", .{@tagName(kind)});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"            return err;","class":"linePartCov","hits":"1","order":"898","possible_hits":"2",},
{"lineNum":"  131","line":"        };"},
{"lineNum":"  132","line":"        if (!token.kind.equals(kind)) {","class":"lineCov","hits":"1","order":"899","possible_hits":"1",},
{"lineNum":"  133","line":"            // TODO: should update with the desired changes to TokenKind, such that the position is found."},
{"lineNum":"  134","line":"            // Refactored for the moment"},
{"lineNum":"  135","line":"            log.err(\"Error invalid Token at {d}: expected token kind {s} but got {s}.\\n\", .{ @max(self.pos, 1) - 1, @tagName(kind), @tagName(token.kind) });","class":"linePartCov","hits":"2","order":"3310","possible_hits":"3",},
{"lineNum":"  136","line":"            const line: []const u8 = token._range.getLineCont(self.input);","class":"lineCov","hits":"1","order":"3311","possible_hits":"1",},
{"lineNum":"  137","line":"            log.err(\"{s}\\n\", .{line});","class":"lineCov","hits":"1","order":"3312","possible_hits":"1",},
{"lineNum":"  138","line":"            token._range.printLineContUnderline(self.input);","class":"lineCov","hits":"1","order":"3313","possible_hits":"1",},
{"lineNum":"  139","line":"            return error.InvalidToken;","class":"lineCov","hits":"3","order":"904","possible_hits":"3",},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    fn expectAndYeildToken(self: *Parser, kind: TokenKind) !Token {","class":"lineCov","hits":"1","order":"909","possible_hits":"1",},
{"lineNum":"  144","line":"        const token = self.consumeToken() catch |err| {","class":"lineCov","hits":"2","order":"910","possible_hits":"2",},
{"lineNum":"  145","line":"            log.err(\"Error could not yeild expected Token: {s}\\n\", .{@tagName(kind)});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":"            return err;","class":"linePartCov","hits":"1","order":"911","possible_hits":"2",},
{"lineNum":"  147","line":"        };"},
{"lineNum":"  148","line":"        if (token.kind.equals(kind)) {","class":"lineCov","hits":"1","order":"912","possible_hits":"1",},
{"lineNum":"  149","line":"            return token;","class":"lineCov","hits":"1","order":"913","possible_hits":"1",},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":"        // TODO: should update with the desired changes to TokenKind, such that the position is found."},
{"lineNum":"  152","line":"        // Refactored for the moment"},
{"lineNum":"  153","line":"        log.err(\"Error invalid Token: expected token kind {s} but got {s}.\\n\", .{ @tagName(kind), @tagName(token.kind) });","class":"lineCov","hits":"3","order":"3258","possible_hits":"3",},
{"lineNum":"  154","line":"        log.err(\"{s}\\n\", .{token._range.getLineCont(self.input)});","class":"lineCov","hits":"1","order":"3259","possible_hits":"1",},
{"lineNum":"  155","line":"        token._range.printLineContUnderline(self.input);","class":"lineCov","hits":"1","order":"3270","possible_hits":"1",},
{"lineNum":"  156","line":"        return error.InvalidToken;","class":"lineCov","hits":"1","order":"3292","possible_hits":"1",},
{"lineNum":"  157","line":"    }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    fn expectIdentifier(self: *Parser) !Node {","class":"lineCov","hits":"1","order":"907","possible_hits":"1",},
{"lineNum":"  160","line":"        const token = self.expectAndYeildToken(TokenKind.Identifier) catch |err| {","class":"lineCov","hits":"2","order":"908","possible_hits":"2",},
{"lineNum":"  161","line":"            log.err(\"Error could not yeild Identifier.\\n\", .{});","class":"lineCov","hits":"1","order":"3293","possible_hits":"1",},
{"lineNum":"  162","line":"            return err;","class":"lineCov","hits":"2","order":"914","possible_hits":"2",},
{"lineNum":"  163","line":"        };"},
{"lineNum":"  164","line":"        try self.idMap.put(token._range.getSubStrFromStr(self.input), true);","class":"linePartCov","hits":"1","order":"915","possible_hits":"2",},
{"lineNum":"  165","line":"        const node = Node{ .kind = NodeKind.Identifier, .token = token };","class":"lineCov","hits":"1","order":"1059","possible_hits":"1",},
{"lineNum":"  166","line":"        return node;","class":"lineCov","hits":"1","order":"1060","possible_hits":"1",},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    // Adds the node to the types array in the ast"},
{"lineNum":"  170","line":"    // Returns the index of the node in the types array"},
{"lineNum":"  171","line":"    pub fn astAppendNode(self: *Parser, node: Node) !usize {","class":"lineCov","hits":"1","order":"1061","possible_hits":"1",},
{"lineNum":"  172","line":"        try self.ast.append(node);","class":"lineCov","hits":"1","order":"1062","possible_hits":"1",},
{"lineNum":"  173","line":"        self.astLen += 1;","class":"lineCov","hits":"1","order":"1063","possible_hits":"1",},
{"lineNum":"  174","line":"        return self.astLen - 1;","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    pub fn astAppend(self: *Parser, kind: NodeKind, token: Token) !usize {","class":"lineCov","hits":"1","order":"1139","possible_hits":"1",},
{"lineNum":"  178","line":"        const node = Node{ .kind = kind, .token = token };","class":"lineCov","hits":"1","order":"1140","possible_hits":"1",},
{"lineNum":"  179","line":"        return self.astAppendNode(node);","class":"lineCov","hits":"1","order":"1141","possible_hits":"1",},
{"lineNum":"  180","line":"    }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    pub fn fromTypesAppend(self: *Parser, token: Token) !usize {"},
{"lineNum":"  183","line":"        const node = Node.fromToken(token);"},
{"lineNum":"  184","line":"        return self.astAppendNode(node);"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    pub fn isCurrentTokenAType(self: *Parser) !bool {","class":"lineCov","hits":"1","order":"863","possible_hits":"1",},
{"lineNum":"  188","line":"        switch ((try self.currentToken()).kind) {","class":"lineCov","hits":"2","order":"864","possible_hits":"2",},
{"lineNum":"  189","line":"            TokenKind.KeywordInt, TokenKind.KeywordBool, TokenKind.KeywordStruct => {"},
{"lineNum":"  190","line":"                return true;","class":"lineCov","hits":"1","order":"1821","possible_hits":"1",},
{"lineNum":"  191","line":"            },"},
{"lineNum":"  192","line":"            else => {"},
{"lineNum":"  193","line":"                return false;","class":"lineCov","hits":"1","order":"865","possible_hits":"1",},
{"lineNum":"  194","line":"            },"},
{"lineNum":"  195","line":"        }"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    pub fn prettyPrintAst(self: *const Parser) !void {","class":"lineCov","hits":"1","order":"3496","possible_hits":"1",},
{"lineNum":"  199","line":"        const ast = self.ast.items;","class":"lineCov","hits":"1","order":"3497","possible_hits":"1",},
{"lineNum":"  200","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"3498","possible_hits":"1",},
{"lineNum":"  201","line":"        log.info(\"AST:{{\\n\", .{});","class":"lineCov","hits":"1","order":"3499","possible_hits":"1",},
{"lineNum":"  202","line":"        while (i < self.astLen) {","class":"lineCov","hits":"1","order":"3500","possible_hits":"1",},
{"lineNum":"  203","line":"            const node = ast[i];","class":"lineCov","hits":"3","order":"3501","possible_hits":"3",},
{"lineNum":"  204","line":"            const token = node.token;","class":"lineCov","hits":"1","order":"3502","possible_hits":"1",},
{"lineNum":"  205","line":"            const tokenStr = token._range.getSubStrFromStr(self.input);","class":"lineCov","hits":"1","order":"3503","possible_hits":"1",},
{"lineNum":"  206","line":"            const kind = @tagName(node.kind);","class":"lineCov","hits":"3","order":"3504","possible_hits":"3",},
{"lineNum":"  207","line":"            log.info(\"{s}: {s}\\n\", .{ kind, tokenStr });","class":"lineCov","hits":"1","order":"3505","possible_hits":"1",},
{"lineNum":"  208","line":"            i += 1;","class":"linePartCov","hits":"3","order":"3506","possible_hits":"4",},
{"lineNum":"  209","line":"        }"},
{"lineNum":"  210","line":"        log.info(\"}}\\n\", .{});","class":"lineCov","hits":"1","order":"3507","possible_hits":"1",},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    /// reserves a location using the BackFillReserve Node"},
{"lineNum":"  214","line":"    /// NOTE: does not call any token consuming functions, expects"},
{"lineNum":"  215","line":"    /// the caller to handle tokens"},
{"lineNum":"  216","line":"    fn reserve(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"843","possible_hits":"1",},
{"lineNum":"  217","line":"        const index = self.astLen;","class":"lineCov","hits":"1","order":"844","possible_hits":"1",},
{"lineNum":"  218","line":"        const node = Node{ .kind = .BackfillReserve, .token = Token{","class":"lineCov","hits":"1","order":"845","possible_hits":"1",},
{"lineNum":"  219","line":"            .kind = TokenKind.Eof,","class":"lineCov","hits":"1","order":"846","possible_hits":"1",},
{"lineNum":"  220","line":"            ._range = lexer.Range.new(0, 0),","class":"lineCov","hits":"1","order":"847","possible_hits":"1",},
{"lineNum":"  221","line":"        } };"},
{"lineNum":"  222","line":"        try self.ast.append(node);","class":"lineCov","hits":"1","order":"850","possible_hits":"1",},
{"lineNum":"  223","line":"        self.astLen += 1;","class":"lineCov","hits":"1","order":"851","possible_hits":"1",},
{"lineNum":"  224","line":"        return index;","class":"lineCov","hits":"1","order":"852","possible_hits":"1",},
{"lineNum":"  225","line":"    }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    /// the sidekick of `reserve` takes in an index returned by `reserve`"},
{"lineNum":"  228","line":"    /// and a node to put there and bada-bing-bada-boom you maintained a preorder traversal"},
{"lineNum":"  229","line":"    fn set(self: *Parser, at: usize, node: Node) !void {","class":"lineCov","hits":"1","order":"869","possible_hits":"1",},
{"lineNum":"  230","line":"        utils.assert(at < self.astLen, \"tried to set a node out of bounds: astLen = {d}, silly goose passed = {d}\", .{ at, self.astLen });","class":"lineCov","hits":"1","order":"870","possible_hits":"1",},
{"lineNum":"  231","line":"        self.ast.items[at] = node;","class":"lineCov","hits":"1","order":"874","possible_hits":"1",},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  235","line":"    /// Parser Grammar Functions"},
{"lineNum":"  236","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    // Program = Types Declarations Functions"},
{"lineNum":"  239","line":"    // each sub function returns an u32, which is the index into the array where they start"},
{"lineNum":"  240","line":"    pub fn parseProgram(self: *Parser) !void {","class":"lineCov","hits":"1","order":"837","possible_hits":"1",},
{"lineNum":"  241","line":"        errdefer {"},
{"lineNum":"  242","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"2","order":"3296","possible_hits":"7",},
{"lineNum":"  243","line":"                log.err(\"Error in parsing a Program\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  244","line":"                log.err(\"Defined as: Program = Types Declarations Functions\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  245","line":"            }"},
{"lineNum":"  246","line":"        }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        var progToken = try self.currentToken();","class":"linePartCov","hits":"2","order":"838","possible_hits":"3",},
{"lineNum":"  249","line":"        // Init indexes"},
{"lineNum":"  250","line":"        var programIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"842","possible_hits":"4",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"        const programDeclarationsIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"853","possible_hits":"4",},
{"lineNum":"  253","line":"        // Expect Types"},
{"lineNum":"  254","line":"        const programTypesIndex = try self.parseTypes();","class":"lineCov","hits":"4","order":"854","possible_hits":"4",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"        // Expect Declarations"},
{"lineNum":"  257","line":"        // Functions will be rhsIndex"},
{"lineNum":"  258","line":"        const programGlobalDeclarationsIndex = try self.parseLocalDeclarations();","class":"linePartCov","hits":"2","order":"860","possible_hits":"4",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"        const programDeclarationsNode = Node{","class":"lineCov","hits":"1","order":"867","possible_hits":"1",},
{"lineNum":"  261","line":"            .kind = .{ .ProgramDeclarations = .{"},
{"lineNum":"  262","line":"                .types = programTypesIndex,"},
{"lineNum":"  263","line":"                .declarations = programGlobalDeclarationsIndex,"},
{"lineNum":"  264","line":"            } },"},
{"lineNum":"  265","line":"            .token = progToken,"},
{"lineNum":"  266","line":"        };"},
{"lineNum":"  267","line":"        try self.set(programDeclarationsIndex, programDeclarationsNode);","class":"lineCov","hits":"1","order":"868","possible_hits":"1",},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        // Expect Functions"},
{"lineNum":"  270","line":"        const functionsIndex = try self.parseFunctions();","class":"linePartCov","hits":"2","order":"875","possible_hits":"4",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        // Expect EOF"},
{"lineNum":"  273","line":"        // TODO: make sure that Eof gets assigned propperly"},
{"lineNum":"  274","line":"        try self.expectToken(TokenKind.Eof);","class":"lineCov","hits":"2","order":"1149","possible_hits":"2",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        const progNode = Node{","class":"lineCov","hits":"1","order":"1150","possible_hits":"1",},
{"lineNum":"  277","line":"            .kind = NodeKind{ .Program = .{ .declarations = programDeclarationsIndex, .functions = functionsIndex } },"},
{"lineNum":"  278","line":"            .token = progToken,"},
{"lineNum":"  279","line":"        };"},
{"lineNum":"  280","line":"        try self.set(programIndex, progNode);","class":"lineCov","hits":"1","order":"1151","possible_hits":"1",},
{"lineNum":"  281","line":"    }"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    // Types = { TypeDeclaration }*"},
{"lineNum":"  284","line":"    // returns null when no types declared"},
{"lineNum":"  285","line":"    pub fn parseTypes(self: *Parser) !?usize {","class":"lineCov","hits":"1","order":"855","possible_hits":"1",},
{"lineNum":"  286","line":"        errdefer {"},
{"lineNum":"  287","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"1","order":"3295","possible_hits":"7",},
{"lineNum":"  288","line":"                log.err(\"Error in parsing Types\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  289","line":"                log.err(\"Defined as: Types = {{ TypeDeclaration }}*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  290","line":"            }"},
{"lineNum":"  291","line":"        }"},
{"lineNum":"  292","line":"        // Init indexes"},
{"lineNum":"  293","line":"        const typesToken = try self.currentToken();","class":"linePartCov","hits":"2","order":"856","possible_hits":"3",},
{"lineNum":"  294","line":"        const typesIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"857","possible_hits":"4",},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"        if ((try self.currentToken()).kind != .KeywordStruct) {","class":"linePartCov","hits":"2","order":"858","possible_hits":"3",},
{"lineNum":"  297","line":"            return null;","class":"lineCov","hits":"1","order":"859","possible_hits":"1",},
{"lineNum":"  298","line":"        }"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"        const firstTypeIndex = try self.parseTypeDeclaration();","class":"lineCov","hits":"4","order":"2209","possible_hits":"4",},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"        var lastTypeIndex: ?usize = null;","class":"lineCov","hits":"1","order":"2236","possible_hits":"1",},
{"lineNum":"  303","line":"        // // While not EOF then parse TypeDeclaration"},
{"lineNum":"  304","line":"        // // Expect (TypeDeclaration)*"},
{"lineNum":"  305","line":"        while ((try self.currentToken()).kind == TokenKind.KeywordStruct) {","class":"linePartCov","hits":"2","order":"2237","possible_hits":"3",},
{"lineNum":"  306","line":"            // peek to see if we are now doing globals"},
{"lineNum":"  307","line":"            if ((try self.peekNTokens(1)).kind != TokenKind.LCurly) {","class":"linePartCov","hits":"2","order":"2601","possible_hits":"3",},
{"lineNum":"  308","line":"                return null;","class":"lineCov","hits":"1","order":"2605","possible_hits":"1",},
{"lineNum":"  309","line":"            }"},
{"lineNum":"  310","line":"            lastTypeIndex = try self.parseTypeDeclaration();","class":"linePartCov","hits":"3","order":"2238","possible_hits":"4",},
{"lineNum":"  311","line":"        }"},
{"lineNum":"  312","line":"        const node = Node{ .kind = NodeKind{ .Types = .{ .firstType = firstTypeIndex, .lastType = lastTypeIndex } }, .token = typesToken };","class":"lineCov","hits":"1","order":"2239","possible_hits":"1",},
{"lineNum":"  313","line":"        try self.set(typesIndex, node);","class":"lineCov","hits":"1","order":"2240","possible_hits":"1",},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"        return typesIndex;","class":"lineCov","hits":"1","order":"2241","possible_hits":"1",},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    // TypeDeclaration = \"struct\" Identifier \"{\" NestedDeclarations \"}\" \";\""},
{"lineNum":"  319","line":"    // Refactored"},
{"lineNum":"  320","line":"    pub fn parseTypeDeclaration(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2210","possible_hits":"1",},
{"lineNum":"  321","line":"        errdefer {"},
{"lineNum":"  322","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"2","order":"3294","possible_hits":"9",},
{"lineNum":"  323","line":"                log.err(\"Error in parsing a TypeDelcaration\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  324","line":"                log.err(\"Defined as: TypeDeclaration = \\\"struct\\\" Identifier {{ NestedDeclarations }} \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  325","line":"            }"},
{"lineNum":"  326","line":"        }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"        // Init indexes"},
{"lineNum":"  329","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2211","possible_hits":"3",},
{"lineNum":"  330","line":"        var typeNodeIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2212","possible_hits":"4",},
{"lineNum":"  331","line":"        var identIndex: usize = undefined;","class":"lineCov","hits":"1","order":"2213","possible_hits":"1",},
{"lineNum":"  332","line":"        var declarationsIndex: usize = undefined;","class":"lineCov","hits":"1","order":"2214","possible_hits":"1",},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"        // Exepect struct"},
{"lineNum":"  335","line":"        try self.expectToken(TokenKind.KeywordStruct);","class":"linePartCov","hits":"1","order":"2215","possible_hits":"2",},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"        // Expect identifier"},
{"lineNum":"  338","line":"        identIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"4","order":"2216","possible_hits":"6",},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"        // Expect {"},
{"lineNum":"  341","line":"        try self.expectToken(TokenKind.LCurly);","class":"linePartCov","hits":"1","order":"2217","possible_hits":"2",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"        // Expect nested declarations"},
{"lineNum":"  344","line":"        declarationsIndex = try self.parseStructFieldDeclarations();","class":"lineCov","hits":"4","order":"2218","possible_hits":"4",},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"        // Expect }"},
{"lineNum":"  347","line":"        try self.expectToken(TokenKind.RCurly);","class":"linePartCov","hits":"1","order":"2231","possible_hits":"2",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"        // Expect ;"},
{"lineNum":"  350","line":"        try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"2232","possible_hits":"2",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2233","possible_hits":"1",},
{"lineNum":"  353","line":"            .kind = NodeKind{ .TypeDeclaration = .{ .ident = identIndex, .declarations = declarationsIndex } },"},
{"lineNum":"  354","line":"            .token = tok,"},
{"lineNum":"  355","line":"        };"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"        try self.set(typeNodeIndex, node);","class":"lineCov","hits":"1","order":"2234","possible_hits":"1",},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"        // convert to array"},
{"lineNum":"  360","line":"        return typeNodeIndex;","class":"lineCov","hits":"1","order":"2235","possible_hits":"1",},
{"lineNum":"  361","line":"    }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    // NestedDecl = { Decl \";\" }+"},
{"lineNum":"  364","line":"    pub fn parseStructFieldDeclarations(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2219","possible_hits":"1",},
{"lineNum":"  365","line":"        errdefer {"},
{"lineNum":"  366","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"3","order":"3334","possible_hits":"7",},
{"lineNum":"  367","line":"                log.err(\"Error in parsing NestedDeclarations\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  368","line":"                log.err(\"Defined as: NestedDeclarations = {{ Decl \\\";\\\" }}+\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  369","line":"            }"},
{"lineNum":"  370","line":"        }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"        // Init indexes"},
{"lineNum":"  373","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2220","possible_hits":"3",},
{"lineNum":"  374","line":"        var nestedDeclarationsIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2221","possible_hits":"4",},
{"lineNum":"  375","line":"        // var nestedDeclarationsIndex = try self.astAppend(, try self.currentToken());"},
{"lineNum":"  376","line":"        var lhsIndex: usize = undefined;","class":"lineCov","hits":"1","order":"2222","possible_hits":"1",},
{"lineNum":"  377","line":"        var rhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"2223","possible_hits":"1",},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"        // Expect { Decl \";\" }+"},
{"lineNum":"  380","line":"        // i.e. at least one declaration"},
{"lineNum":"  381","line":"        lhsIndex = try self.parseStructFieldDeclaration();","class":"lineCov","hits":"4","order":"2224","possible_hits":"4",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"        // Expect ;"},
{"lineNum":"  384","line":"        try self.expectToken(TokenKind.Semicolon);","class":"lineCov","hits":"2","order":"2225","possible_hits":"2",},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"        // Repeat"},
{"lineNum":"  387","line":"        while ((try self.currentToken()).kind != TokenKind.RCurly) {","class":"linePartCov","hits":"2","order":"2226","possible_hits":"3",},
{"lineNum":"  388","line":"            rhsIndex = try self.parseStructFieldDeclaration();","class":"linePartCov","hits":"2","order":"2572","possible_hits":"4",},
{"lineNum":"  389","line":"            try self.expectToken(TokenKind.Semicolon);","class":"lineCov","hits":"4","order":"2227","possible_hits":"4",},
{"lineNum":"  390","line":"        }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2228","possible_hits":"1",},
{"lineNum":"  393","line":"            .kind = NodeKind{ .StructFieldDeclarations = .{ .firstDecl = lhsIndex, .lastDecl = rhsIndex } },"},
{"lineNum":"  394","line":"            .token = tok,"},
{"lineNum":"  395","line":"        };"},
{"lineNum":"  396","line":"        try self.set(nestedDeclarationsIndex, node);","class":"lineCov","hits":"1","order":"2229","possible_hits":"1",},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"        return nestedDeclarationsIndex;","class":"lineCov","hits":"1","order":"2230","possible_hits":"1",},
{"lineNum":"  399","line":"    }"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    // Decl = Type Identifier"},
{"lineNum":"  402","line":"    pub fn parseStructFieldDeclaration(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1823","possible_hits":"1",},
{"lineNum":"  403","line":"        errdefer {"},
{"lineNum":"  404","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"1","order":"3333","possible_hits":"5",},
{"lineNum":"  405","line":"                log.err(\"Error in parsing a Decl\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  406","line":"                log.err(\"Defined as: Decl = Type Identifier\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  407","line":"            }"},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":"        // REFACTOR: this could use the lhs and rhs index, however.... its"},
{"lineNum":"  410","line":"        // actually faster this way"},
{"lineNum":"  411","line":"        // Init indexes"},
{"lineNum":"  412","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1824","possible_hits":"3",},
{"lineNum":"  413","line":"        var declIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1825","possible_hits":"4",},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"        // Expect Type"},
{"lineNum":"  416","line":"        const typeIndex = try self.parseType();","class":"lineCov","hits":"4","order":"1826","possible_hits":"4",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"        // Expect Identifier"},
{"lineNum":"  419","line":"        const identIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"1829","possible_hits":"6",},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1830","possible_hits":"1",},
{"lineNum":"  422","line":"            .kind = NodeKind{ .TypedIdentifier = .{ .type = typeIndex, .ident = identIndex } },"},
{"lineNum":"  423","line":"            .token = tok,"},
{"lineNum":"  424","line":"        };"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"        try self.set(declIndex, node);","class":"lineCov","hits":"1","order":"1831","possible_hits":"1",},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"        return declIndex;","class":"lineCov","hits":"1","order":"1832","possible_hits":"1",},
{"lineNum":"  429","line":"    }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    // Type = \"int\" | \"bool\" | \"struct\" Identifier"},
{"lineNum":"  432","line":"    pub fn parseType(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1673","possible_hits":"1",},
{"lineNum":"  433","line":"        errdefer {"},
{"lineNum":"  434","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"1","order":"3331","possible_hits":"9",},
{"lineNum":"  435","line":"                log.err(\"Error in parsing a Type\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  436","line":"                log.err(\"Defined as: Type = \\\"int\\\" | \\\"bool\\\" | \\\"struct\\\" Identifier\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  437","line":"            }"},
{"lineNum":"  438","line":"        }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"        // Init indexes"},
{"lineNum":"  441","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1674","possible_hits":"3",},
{"lineNum":"  442","line":"        var typeIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1675","possible_hits":"4",},
{"lineNum":"  443","line":"        var kindIndex: usize = undefined;","class":"lineCov","hits":"1","order":"1676","possible_hits":"1",},
{"lineNum":"  444","line":"        var structIdentifierIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1677","possible_hits":"1",},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"        const token = try self.consumeToken();","class":"linePartCov","hits":"2","order":"1678","possible_hits":"4",},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"        // Expect int | bool | struct (id)"},
{"lineNum":"  449","line":"        switch (token.kind) {","class":"lineCov","hits":"3","order":"1679","possible_hits":"3",},
{"lineNum":"  450","line":"            TokenKind.KeywordInt => {"},
{"lineNum":"  451","line":"                const kind = NodeKind.IntType;","class":"lineCov","hits":"1","order":"1827","possible_hits":"1",},
{"lineNum":"  452","line":"                kindIndex = try self.astAppend(kind, token);","class":"lineCov","hits":"2","order":"1828","possible_hits":"2",},
{"lineNum":"  453","line":"            },"},
{"lineNum":"  454","line":"            TokenKind.KeywordBool => {"},
{"lineNum":"  455","line":"                kindIndex = try self.astAppend(NodeKind.BoolType, token);","class":"lineCov","hits":"2","order":"1680","possible_hits":"2",},
{"lineNum":"  456","line":"            },"},
{"lineNum":"  457","line":"            TokenKind.KeywordStruct => {"},
{"lineNum":"  458","line":"                kindIndex = try self.astAppend(NodeKind.StructType, token);","class":"linePartCov","hits":"2","order":"2242","possible_hits":"3",},
{"lineNum":"  459","line":"                structIdentifierIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"2243","possible_hits":"5",},
{"lineNum":"  460","line":"            },"},
{"lineNum":"  461","line":"            else => {"},
{"lineNum":"  462","line":"                // TODO: make this error like the others"},
{"lineNum":"  463","line":"                log.err(\"Error invalid Token: expected token kind {s} | {s} | {s} but got {s}.\\n\", .{ @tagName(TokenKind.KeywordInt), @tagName(TokenKind.KeywordBool), @tagName(TokenKind.KeywordStruct), @tagName(token.kind) });","class":"lineCov","hits":"3","order":"3326","possible_hits":"3",},
{"lineNum":"  464","line":"                const line: []const u8 = token._range.getLineCont(self.input);","class":"lineCov","hits":"1","order":"3328","possible_hits":"1",},
{"lineNum":"  465","line":"                log.err(\"{s}\\n\", .{line});","class":"lineCov","hits":"1","order":"3329","possible_hits":"1",},
{"lineNum":"  466","line":"                token._range.printLineContUnderline(self.input);","class":"lineCov","hits":"1","order":"3330","possible_hits":"1",},
{"lineNum":"  467","line":"                return error.InvalidToken;","class":"lineCov","hits":"1","order":"3332","possible_hits":"1",},
{"lineNum":"  468","line":"            },"},
{"lineNum":"  469","line":"        }"},
{"lineNum":"  470","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1681","possible_hits":"1",},
{"lineNum":"  471","line":"            .kind = NodeKind{ .Type = .{ .kind = kindIndex, .structIdentifier = structIdentifierIndex } },"},
{"lineNum":"  472","line":"            .token = tok,"},
{"lineNum":"  473","line":"        };"},
{"lineNum":"  474","line":"        try self.set(typeIndex, node);","class":"lineCov","hits":"1","order":"1682","possible_hits":"1",},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"        return typeIndex;","class":"lineCov","hits":"1","order":"1683","possible_hits":"1",},
{"lineNum":"  477","line":"    }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    // Declarations = { Declaration }*"},
{"lineNum":"  480","line":"    // returns null if no declarations"},
{"lineNum":"  481","line":"    pub fn parseLocalDeclarations(self: *Parser) !?usize {","class":"lineCov","hits":"1","order":"861","possible_hits":"1",},
{"lineNum":"  482","line":"        errdefer {"},
{"lineNum":"  483","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  484","line":"                log.err(\"Error in parsing Declarations\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  485","line":"                log.err(\"Defined as: Declarations = {{ Declaration }}*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  486","line":"            }"},
{"lineNum":"  487","line":"        }"},
{"lineNum":"  488","line":"        if (!(try self.isCurrentTokenAType())) {","class":"linePartCov","hits":"2","order":"862","possible_hits":"3",},
{"lineNum":"  489","line":"            return null;","class":"lineCov","hits":"1","order":"866","possible_hits":"1",},
{"lineNum":"  490","line":"        }"},
{"lineNum":"  491","line":"        // Init indexes"},
{"lineNum":"  492","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2060","possible_hits":"4",},
{"lineNum":"  493","line":"        var declarationsIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2061","possible_hits":"4",},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        // While not EOF or function keyword then parse declaration"},
{"lineNum":"  496","line":"        // Expect (Declaration)*"},
{"lineNum":"  497","line":"        const firstDeclIndex = try self.parseDeclaration();","class":"linePartCov","hits":"2","order":"2062","possible_hits":"4",},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"        var lastDeclIndex: ?usize = null;","class":"lineCov","hits":"1","order":"2074","possible_hits":"1",},
{"lineNum":"  500","line":"        while (try self.isCurrentTokenAType()) {","class":"linePartCov","hits":"2","order":"2075","possible_hits":"3",},
{"lineNum":"  501","line":"            // Expect Declaration"},
{"lineNum":"  502","line":"            lastDeclIndex = try self.parseDeclaration();","class":"lineCov","hits":"3","order":"2414","possible_hits":"3",},
{"lineNum":"  503","line":"        }"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2076","possible_hits":"1",},
{"lineNum":"  506","line":"            .kind = NodeKind{ .LocalDeclarations = .{ .firstDecl = firstDeclIndex, .lastDecl = self.ast.items.len } },","class":"lineCov","hits":"1","order":"2077","possible_hits":"1",},
{"lineNum":"  507","line":"            .token = tok,"},
{"lineNum":"  508","line":"        };"},
{"lineNum":"  509","line":"        try self.set(declarationsIndex, node);","class":"lineCov","hits":"1","order":"2078","possible_hits":"1",},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"        return declarationsIndex;","class":"lineCov","hits":"1","order":"2079","possible_hits":"1",},
{"lineNum":"  512","line":"    }"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    // Declaration = Type Identifier (\",\" Identifier)* \";\""},
{"lineNum":"  515","line":"    // NOTE: removes syntax sugar, and creates n type declarations that use the"},
{"lineNum":"  516","line":"    // same type for the different identifiers, they should be added in order,"},
{"lineNum":"  517","line":"    // in the array"},
{"lineNum":"  518","line":"    pub fn parseDeclaration(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2063","possible_hits":"1",},
{"lineNum":"  519","line":"        errdefer {"},
{"lineNum":"  520","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  521","line":"                log.err(\"Error in parsing a Declaration\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  522","line":"                log.err(\"Defined as: Declaration = Type Identifier (\\\",\\\" Identifier)* \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  523","line":"            }"},
{"lineNum":"  524","line":"        }"},
{"lineNum":"  525","line":"        // Init indexes"},
{"lineNum":"  526","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2064","possible_hits":"3",},
{"lineNum":"  527","line":"        const firstDeclIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2065","possible_hits":"4",},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"        // Expect type"},
{"lineNum":"  530","line":"        const typeIndex = try self.parseType();","class":"linePartCov","hits":"2","order":"2066","possible_hits":"4",},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"        // Expect Identifier"},
{"lineNum":"  533","line":"        const firstIdentIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"2067","possible_hits":"6",},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"        const firstDeclNode = Node{","class":"lineCov","hits":"1","order":"2068","possible_hits":"1",},
{"lineNum":"  536","line":"            .kind = NodeKind{ .TypedIdentifier = .{ .type = typeIndex, .ident = firstIdentIndex } },"},
{"lineNum":"  537","line":"            .token = tok,"},
{"lineNum":"  538","line":"        };"},
{"lineNum":"  539","line":"        try self.set(firstDeclIndex, firstDeclNode);","class":"lineCov","hits":"1","order":"2069","possible_hits":"1",},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"        // Expect (\",\" Identifier)* \";\""},
{"lineNum":"  542","line":"        while ((try self.currentToken()).kind != TokenKind.Semicolon) {","class":"linePartCov","hits":"2","order":"2070","possible_hits":"3",},
{"lineNum":"  543","line":"            // Expect ,"},
{"lineNum":"  544","line":"            try self.expectToken(TokenKind.Comma);","class":"linePartCov","hits":"1","order":"2683","possible_hits":"2",},
{"lineNum":"  545","line":"            const localDeclIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2684","possible_hits":"4",},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"            // Expect Identifier"},
{"lineNum":"  548","line":"            const identIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"2685","possible_hits":"6",},
{"lineNum":"  549","line":"            const localDeclNode = Node{","class":"lineCov","hits":"1","order":"2686","possible_hits":"1",},
{"lineNum":"  550","line":"                .kind = NodeKind{ .TypedIdentifier = .{ .type = typeIndex, .ident = identIndex } },"},
{"lineNum":"  551","line":"                .token = try self.currentToken(),","class":"linePartCov","hits":"2","order":"2687","possible_hits":"4",},
{"lineNum":"  552","line":"            };"},
{"lineNum":"  553","line":"            // Repeat"},
{"lineNum":"  554","line":"            try self.set(localDeclIndex, localDeclNode);","class":"lineCov","hits":"3","order":"2071","possible_hits":"3",},
{"lineNum":"  555","line":"        }"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"        // Expect ;"},
{"lineNum":"  558","line":"        try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"2072","possible_hits":"2",},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"        return firstDeclIndex;","class":"lineCov","hits":"1","order":"2073","possible_hits":"1",},
{"lineNum":"  561","line":"    }"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    // Functions = ( Function )*"},
{"lineNum":"  564","line":"    pub fn parseFunctions(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"876","possible_hits":"1",},
{"lineNum":"  565","line":"        errdefer {"},
{"lineNum":"  566","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  567","line":"                log.err(\"Error in parsing Functions\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  568","line":"                log.err(\"Defined as: Functions = ( Function )*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  569","line":"            }"},
{"lineNum":"  570","line":"        }"},
{"lineNum":"  571","line":"        // init indexes"},
{"lineNum":"  572","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"877","possible_hits":"3",},
{"lineNum":"  573","line":"        var functionsIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"878","possible_hits":"4",},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"        const firstFuncIndex = self.parseFunction() catch {","class":"lineCov","hits":"2","order":"879","possible_hits":"2",},
{"lineNum":"  576","line":"            if (self.allowNoMain) {","class":"lineCov","hits":"1","order":"3317","possible_hits":"1",},
{"lineNum":"  577","line":"                // It\'s really annoying to have to provide a main for test cases"},
{"lineNum":"  578","line":"                log.warn(\"Ignoring no main in test...\\n\", .{});","class":"lineCov","hits":"1","order":"3318","possible_hits":"1",},
{"lineNum":"  579","line":"                return 0;","class":"lineCov","hits":"1","order":"3321","possible_hits":"1",},
{"lineNum":"  580","line":"            }"},
{"lineNum":"  581","line":"            log.err(\"Error in parsing Functions, expected a function.\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":"            log.err(\"At least one function (main;) must be defined.\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  583","line":"            return error.InvalidProgram;","class":"linePartCov","hits":"1","order":"1143","possible_hits":"2",},
{"lineNum":"  584","line":"        };"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"        var lastFuncIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1144","possible_hits":"1",},
{"lineNum":"  587","line":"        // While not EOF then parse function"},
{"lineNum":"  588","line":"        // Expect (Function)*"},
{"lineNum":"  589","line":"        while ((try self.currentToken()).kind == TokenKind.KeywordFun) {","class":"linePartCov","hits":"2","order":"1145","possible_hits":"3",},
{"lineNum":"  590","line":"            lastFuncIndex = try self.parseFunction();","class":"lineCov","hits":"3","order":"1736","possible_hits":"3",},
{"lineNum":"  591","line":"        }"},
{"lineNum":"  592","line":"        // FIXME: having no functions is an error, at least one (main) function is required"},
{"lineNum":"  593","line":"        // but I am assuming we will handle it in semantic analysis"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1146","possible_hits":"1",},
{"lineNum":"  596","line":"            .kind = NodeKind{ .Functions = .{ .firstFunc = firstFuncIndex, .lastFunc = lastFuncIndex } },"},
{"lineNum":"  597","line":"            .token = tok,"},
{"lineNum":"  598","line":"        };"},
{"lineNum":"  599","line":"        try self.set(functionsIndex, node);","class":"lineCov","hits":"1","order":"1147","possible_hits":"1",},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"        return functionsIndex;","class":"lineCov","hits":"1","order":"1148","possible_hits":"1",},
{"lineNum":"  602","line":"    }"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    // Function = \"fun\" Identifier Paramaters ReturnType \"{\" Declarations StatementList \"}\""},
{"lineNum":"  605","line":"    pub fn parseFunction(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"880","possible_hits":"1",},
{"lineNum":"  606","line":"        errdefer {"},
{"lineNum":"  607","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"2","order":"3316","possible_hits":"5",},
{"lineNum":"  608","line":"                log.err(\"Error in parsing a Function\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  609","line":"                log.err(\"Defined as: Function = \\\"fun\\\" Identifier Paramaters ReturnType \\\"{{\\\" Declarations StatementList \\\"}}\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  610","line":"            }"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":"        // Init indexes"},
{"lineNum":"  613","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"881","possible_hits":"3",},
{"lineNum":"  614","line":"        var functionIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"882","possible_hits":"4",},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"        const protoIndex = try self.parseFunctionProto();","class":"lineCov","hits":"4","order":"883","possible_hits":"4",},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"        const bodyIndex = try self.parseFunctionBody();","class":"lineCov","hits":"4","order":"1090","possible_hits":"4",},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1136","possible_hits":"1",},
{"lineNum":"  621","line":"            .kind = NodeKind{ .Function = .{ .proto = protoIndex, .body = bodyIndex } },"},
{"lineNum":"  622","line":"            .token = tok,"},
{"lineNum":"  623","line":"        };"},
{"lineNum":"  624","line":"        try self.set(functionIndex, node);","class":"lineCov","hits":"1","order":"1137","possible_hits":"1",},
{"lineNum":"  625","line":"        _ = try self.astAppend(.FunctionEnd, tok);","class":"linePartCov","hits":"1","order":"1138","possible_hits":"3",},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"        return functionIndex;","class":"lineCov","hits":"1","order":"1142","possible_hits":"1",},
{"lineNum":"  628","line":"    }"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    /// parse identifier, parameters, returntype"},
{"lineNum":"  631","line":"    pub fn parseFunctionProto(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"884","possible_hits":"1",},
{"lineNum":"  632","line":"        errdefer {"},
{"lineNum":"  633","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"4","order":"3315","possible_hits":"9",},
{"lineNum":"  634","line":"                log.err(\"Error in parsing a Function\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  635","line":"                log.err(\"Defined as: Function = \\\"fun\\\" Identifier Paramaters ReturnType \\\"{{\\\" Declarations StatementList \\\"}}\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  636","line":"            }"},
{"lineNum":"  637","line":"        }"},
{"lineNum":"  638","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"885","possible_hits":"3",},
{"lineNum":"  639","line":"        const protoIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"886","possible_hits":"4",},
{"lineNum":"  640","line":"        const typedIdentIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"887","possible_hits":"4",},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"        try self.expectToken(TokenKind.KeywordFun);","class":"lineCov","hits":"2","order":"888","possible_hits":"2",},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"        const identToken = try self.currentToken();","class":"linePartCov","hits":"2","order":"905","possible_hits":"4",},
{"lineNum":"  645","line":"        const funcNameIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"4","order":"906","possible_hits":"6",},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"        // Expect Parameters"},
{"lineNum":"  648","line":"        const paramsIndex = try self.parseParameters();","class":"lineCov","hits":"4","order":"1065","possible_hits":"4",},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"        // Expect ReturnType"},
{"lineNum":"  651","line":"        const returnTypeIndex = try self.parseReturnType();","class":"lineCov","hits":"4","order":"1075","possible_hits":"4",},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"        const typedIdentNode = Node{","class":"lineCov","hits":"1","order":"1085","possible_hits":"1",},
{"lineNum":"  654","line":"            .kind = .{ .ReturnTypedIdentifier = .{ .ident = funcNameIndex, .type = returnTypeIndex } },"},
{"lineNum":"  655","line":"            .token = identToken,"},
{"lineNum":"  656","line":"        };"},
{"lineNum":"  657","line":"        try self.set(typedIdentIndex, typedIdentNode);","class":"lineCov","hits":"1","order":"1086","possible_hits":"1",},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"        const protoNode = Node{","class":"lineCov","hits":"1","order":"1087","possible_hits":"1",},
{"lineNum":"  660","line":"            .kind = .{ .FunctionProto = .{ .name = typedIdentIndex, .parameters = paramsIndex } },"},
{"lineNum":"  661","line":"            .token = tok,"},
{"lineNum":"  662","line":"        };"},
{"lineNum":"  663","line":"        try self.set(protoIndex, protoNode);","class":"lineCov","hits":"1","order":"1088","possible_hits":"1",},
{"lineNum":"  664","line":"        return protoIndex;","class":"lineCov","hits":"1","order":"1089","possible_hits":"1",},
{"lineNum":"  665","line":"    }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    /// `Parameters = \"(\" (Decl (\",\" Decl)* )? \")\"`"},
{"lineNum":"  668","line":"    /// returns null if next token is `.RParen` aka no parameters"},
{"lineNum":"  669","line":"    pub fn parseParameters(self: *Parser) !?usize {","class":"lineCov","hits":"1","order":"1066","possible_hits":"1",},
{"lineNum":"  670","line":"        errdefer {"},
{"lineNum":"  671","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"1","order":"3356","possible_hits":"12",},
{"lineNum":"  672","line":"                log.err(\"Error in parsing Parameters\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  673","line":"                log.err(\"Defined as: Parameters = \\\"(\\\" (Decl (\\\",\\\" Decl)* )? \\\")\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  674","line":"            }"},
{"lineNum":"  675","line":"        }"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"        // return null if no params"},
{"lineNum":"  678","line":"        const nextTok = try self.peekToken();","class":"linePartCov","hits":"2","order":"1067","possible_hits":"3",},
{"lineNum":"  679","line":"        if (nextTok.kind == TokenKind.RParen) {","class":"lineCov","hits":"1","order":"1071","possible_hits":"1",},
{"lineNum":"  680","line":"            try self.expectToken(.LParen);","class":"linePartCov","hits":"1","order":"1072","possible_hits":"2",},
{"lineNum":"  681","line":"            try self.expectToken(.RParen);","class":"linePartCov","hits":"1","order":"1073","possible_hits":"2",},
{"lineNum":"  682","line":"            return null;","class":"lineCov","hits":"2","order":"1074","possible_hits":"2",},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"        // Init indexes"},
{"lineNum":"  686","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1815","possible_hits":"4",},
{"lineNum":"  687","line":"        var parametersIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1816","possible_hits":"4",},
{"lineNum":"  688","line":"        var lhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1817","possible_hits":"1",},
{"lineNum":"  689","line":"        var rhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1818","possible_hits":"1",},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"        // Expect ("},
{"lineNum":"  692","line":"        try self.expectToken(TokenKind.LParen);","class":"lineCov","hits":"2","order":"1819","possible_hits":"2",},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"        // FIXME: I think this is supposed to be parsing params like go params,"},
{"lineNum":"  695","line":"        // where you can have multiple args with the same type like so (in mini syntax)"},
{"lineNum":"  696","line":"        // `fun (int a, b, c, bool foo)`"},
{"lineNum":"  697","line":"        // but I am not sure that is valid syntax, I believe based on the grammar it should be"},
{"lineNum":"  698","line":"        // `fun (int a, int b, int c, bool foo)`"},
{"lineNum":"  699","line":"        while (try self.isCurrentTokenAType()) {","class":"linePartCov","hits":"2","order":"1820","possible_hits":"3",},
{"lineNum":"  700","line":"            // Expect Decl"},
{"lineNum":"  701","line":"            lhsIndex = try self.parseStructFieldDeclaration();","class":"linePartCov","hits":"2","order":"1822","possible_hits":"3",},
{"lineNum":"  702","line":"            // Expect (\",\" Decl)*"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"            while ((try self.currentToken()).kind == TokenKind.Comma) {","class":"linePartCov","hits":"2","order":"1833","possible_hits":"3",},
{"lineNum":"  705","line":"                // Expect ,"},
{"lineNum":"  706","line":"                try self.expectToken(TokenKind.Comma);","class":"linePartCov","hits":"1","order":"2006","possible_hits":"2",},
{"lineNum":"  707","line":"                // Expect Decl"},
{"lineNum":"  708","line":"                rhsIndex = try self.parseStructFieldDeclaration();","class":"linePartCov","hits":"7","order":"1834","possible_hits":"8",},
{"lineNum":"  709","line":"            }"},
{"lineNum":"  710","line":"        }"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"        // Expect )"},
{"lineNum":"  713","line":"        try self.expectToken(TokenKind.RParen);","class":"linePartCov","hits":"1","order":"1835","possible_hits":"2",},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1836","possible_hits":"1",},
{"lineNum":"  716","line":"            .kind = NodeKind{ .Parameters = .{ .firstParam = lhsIndex.?, .lastParam = rhsIndex } },","class":"lineCov","hits":"3","order":"1837","possible_hits":"3",},
{"lineNum":"  717","line":"            .token = tok,"},
{"lineNum":"  718","line":"        };"},
{"lineNum":"  719","line":"        try self.set(parametersIndex, node);","class":"lineCov","hits":"1","order":"1838","possible_hits":"1",},
{"lineNum":"  720","line":"        return parametersIndex;","class":"lineCov","hits":"1","order":"1839","possible_hits":"1",},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"    // ReturnType = Type | \"void\""},
{"lineNum":"  724","line":"    pub fn parseReturnType(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1076","possible_hits":"1",},
{"lineNum":"  725","line":"        errdefer {"},
{"lineNum":"  726","line":"            if (self.showParseTree) {","class":"linePartCov","hits":"1","order":"3361","possible_hits":"4",},
{"lineNum":"  727","line":"                log.err(\"Error in parsing ReturnType\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  728","line":"                log.err(\"Defined as: ReturnType = Type | \\\"void\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  729","line":"            }"},
{"lineNum":"  730","line":"        }"},
{"lineNum":"  731","line":"        // Init indexes"},
{"lineNum":"  732","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1077","possible_hits":"3",},
{"lineNum":"  733","line":"        var returnTypeIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1078","possible_hits":"4",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"        var typeIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1079","possible_hits":"1",},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"        if (tok.kind == .KeywordVoid) {","class":"lineCov","hits":"1","order":"1080","possible_hits":"1",},
{"lineNum":"  738","line":"            // leave typeIndex as null"},
{"lineNum":"  739","line":"            try self.expectToken(TokenKind.KeywordVoid);","class":"lineCov","hits":"2","order":"1081","possible_hits":"2",},
{"lineNum":"  740","line":"        } else {"},
{"lineNum":"  741","line":"            typeIndex = try self.parseType();","class":"lineCov","hits":"3","order":"1672","possible_hits":"3",},
{"lineNum":"  742","line":"        }"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1082","possible_hits":"1",},
{"lineNum":"  745","line":"            .kind = NodeKind{ .ReturnType = .{ .type = typeIndex } },"},
{"lineNum":"  746","line":"            .token = tok,"},
{"lineNum":"  747","line":"        };"},
{"lineNum":"  748","line":"        try self.set(returnTypeIndex, node);","class":"lineCov","hits":"1","order":"1083","possible_hits":"1",},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"        return returnTypeIndex;","class":"lineCov","hits":"1","order":"1084","possible_hits":"1",},
{"lineNum":"  751","line":"    }"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    pub fn parseFunctionBody(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1091","possible_hits":"1",},
{"lineNum":"  754","line":"        const tok = try self.currentToken();","class":"lineCov","hits":"1","order":"1092","possible_hits":"1",},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"        const bodyIndex = try self.reserve();","class":"lineCov","hits":"1","order":"1093","possible_hits":"1",},
{"lineNum":"  757","line":"        // Expect {"},
{"lineNum":"  758","line":"        try self.expectToken(TokenKind.LCurly);","class":"lineCov","hits":"1","order":"1094","possible_hits":"1",},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"        // Expect Declarations"},
{"lineNum":"  761","line":"        const declarationsIndex = try self.parseLocalDeclarations();","class":"lineCov","hits":"1","order":"1095","possible_hits":"1",},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"        // Expect StatementList"},
{"lineNum":"  764","line":"        const statementsIndex = try self.parseStatementList();","class":"lineCov","hits":"1","order":"1096","possible_hits":"1",},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"        // Expect }"},
{"lineNum":"  767","line":"        try self.expectToken(TokenKind.RCurly);","class":"lineCov","hits":"1","order":"1132","possible_hits":"1",},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"        const bodyNode = Node{","class":"lineCov","hits":"1","order":"1133","possible_hits":"1",},
{"lineNum":"  770","line":"            .kind = .{ .FunctionBody = .{ .declarations = declarationsIndex, .statements = statementsIndex } },"},
{"lineNum":"  771","line":"            .token = tok,"},
{"lineNum":"  772","line":"        };"},
{"lineNum":"  773","line":"        try self.set(bodyIndex, bodyNode);","class":"lineCov","hits":"1","order":"1134","possible_hits":"1",},
{"lineNum":"  774","line":"        return bodyIndex;","class":"lineCov","hits":"1","order":"1135","possible_hits":"1",},
{"lineNum":"  775","line":"    }"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"    // Statement = Block | Assignment | Print | PrintLn | ConditionalIf | ConditionalIfElse | While | Delete | Return | Invocation"},
{"lineNum":"  778","line":"    pub fn parseStatement(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1106","possible_hits":"1",},
{"lineNum":"  779","line":"        errdefer {"},
{"lineNum":"  780","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  781","line":"                log.err(\"Error in parsing a Statement\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  782","line":"                log.err(\"Defined as: Statement = Block | Assignment | Print | PrintLn | ConditionalIf | ConditionalIfElse | While | Delete | Return | Invocation\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  783","line":"            }"},
{"lineNum":"  784","line":"        }"},
{"lineNum":"  785","line":"        // Init indexes"},
{"lineNum":"  786","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1107","possible_hits":"3",},
{"lineNum":"  787","line":"        var statementIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1108","possible_hits":"4",},
{"lineNum":"  788","line":"        var lhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1109","possible_hits":"1",},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"        const token = try self.currentToken();","class":"linePartCov","hits":"1","order":"1110","possible_hits":"3",},
{"lineNum":"  791","line":"        switch (token.kind) {","class":"linePartCov","hits":"1","order":"1111","possible_hits":"3",},
{"lineNum":"  792","line":"            // Block"},
{"lineNum":"  793","line":"            TokenKind.LCurly => {"},
{"lineNum":"  794","line":"                lhsIndex = try self.parseBlock();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  795","line":"            },"},
{"lineNum":"  796","line":"            // Invocation | Assignment"},
{"lineNum":"  797","line":"            TokenKind.Identifier => {"},
{"lineNum":"  798","line":"                switch ((try self.peekToken()).kind) {","class":"lineCov","hits":"4","order":"1737","possible_hits":"4",},
{"lineNum":"  799","line":"                    TokenKind.LParen => {"},
{"lineNum":"  800","line":"                        lhsIndex = try self.parseInvocation();","class":"lineCov","hits":"2","order":"1738","possible_hits":"2",},
{"lineNum":"  801","line":"                    },"},
{"lineNum":"  802","line":"                    else => {"},
{"lineNum":"  803","line":"                        lhsIndex = try self.parseAssignment();","class":"linePartCov","hits":"3","order":"1765","possible_hits":"4",},
{"lineNum":"  804","line":"                    },"},
{"lineNum":"  805","line":"                }"},
{"lineNum":"  806","line":"            },"},
{"lineNum":"  807","line":"            // ConditionalIf | ConditionalIfElse"},
{"lineNum":"  808","line":"            TokenKind.KeywordIf => {"},
{"lineNum":"  809","line":"                lhsIndex = try self.parseConditionals();","class":"lineCov","hits":"2","order":"1324","possible_hits":"2",},
{"lineNum":"  810","line":"            },"},
{"lineNum":"  811","line":"            // While"},
{"lineNum":"  812","line":"            TokenKind.KeywordWhile => {"},
{"lineNum":"  813","line":"                lhsIndex = try self.parseWhile();","class":"lineCov","hits":"2","order":"2660","possible_hits":"2",},
{"lineNum":"  814","line":"            },"},
{"lineNum":"  815","line":"            // Delete"},
{"lineNum":"  816","line":"            TokenKind.KeywordDelete => {"},
{"lineNum":"  817","line":"                lhsIndex = try self.parseDelete();","class":"lineCov","hits":"2","order":"2672","possible_hits":"2",},
{"lineNum":"  818","line":"            },"},
{"lineNum":"  819","line":"            // Return"},
{"lineNum":"  820","line":"            TokenKind.KeywordReturn => {"},
{"lineNum":"  821","line":"                lhsIndex = try self.parseReturn();","class":"lineCov","hits":"2","order":"1112","possible_hits":"2",},
{"lineNum":"  822","line":"            },"},
{"lineNum":"  823","line":"            // Print | PrintLn"},
{"lineNum":"  824","line":"            TokenKind.KeywordPrint => {"},
{"lineNum":"  825","line":"                lhsIndex = try self.parsePrints();","class":"lineCov","hits":"2","order":"2315","possible_hits":"2",},
{"lineNum":"  826","line":"            },"},
{"lineNum":"  827","line":"            else => {"},
{"lineNum":"  828","line":"                // TODO: make this error like the others"},
{"lineNum":"  829","line":"                // TOOD: really actually tho"},
{"lineNum":"  830","line":"                log.err(\"Error invalid Token: expected token kind of Statment \\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"                const line: []const u8 = (try self.currentToken())._range.getLineCont(self.input);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  832","line":"                log.err(\"{s}\\n\", .{line});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"                (try self.currentToken())._range.printLineContUnderline(self.input);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  834","line":"                return error.InvalidToken;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  835","line":"            },"},
{"lineNum":"  836","line":"        }"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1123","possible_hits":"1",},
{"lineNum":"  839","line":"            .kind = NodeKind{ .Statement = .{ .statement = lhsIndex.?, .finalIndex = self.ast.items.len } },","class":"lineCov","hits":"3","order":"1124","possible_hits":"3",},
{"lineNum":"  840","line":"            .token = tok,"},
{"lineNum":"  841","line":"        };"},
{"lineNum":"  842","line":"        try self.set(statementIndex, node);","class":"lineCov","hits":"1","order":"1125","possible_hits":"1",},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"        return statementIndex;","class":"lineCov","hits":"1","order":"1126","possible_hits":"1",},
{"lineNum":"  845","line":"    }"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"    /// `StatementList = ( Statement )*`"},
{"lineNum":"  848","line":"    /// returns null if there are no statements (current token is )"},
{"lineNum":"  849","line":"    /// TODO: test that it works with no statements"},
{"lineNum":"  850","line":"    pub fn parseStatementList(self: *Parser) ParserError!?usize {","class":"lineCov","hits":"1","order":"1097","possible_hits":"1",},
{"lineNum":"  851","line":"        errdefer {"},
{"lineNum":"  852","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  853","line":"                log.err(\"Error in parsing a StatementList\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  854","line":"                log.err(\"Defined as: StatementList = ( Statement )*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  855","line":"            }"},
{"lineNum":"  856","line":"        }"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"        // Init indexes"},
{"lineNum":"  859","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1098","possible_hits":"3",},
{"lineNum":"  860","line":"        if (tok.kind == TokenKind.RCurly) {","class":"lineCov","hits":"1","order":"1099","possible_hits":"1",},
{"lineNum":"  861","line":"            return null;","class":"lineCov","hits":"1","order":"1735","possible_hits":"1",},
{"lineNum":"  862","line":"        }"},
{"lineNum":"  863","line":"        var statementListIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1100","possible_hits":"4",},
{"lineNum":"  864","line":"        var lhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1101","possible_hits":"1",},
{"lineNum":"  865","line":"        var rhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1102","possible_hits":"1",},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"        // While not EOF then parse statement"},
{"lineNum":"  868","line":"        // Expect (Statement)*"},
{"lineNum":"  869","line":"        while ((try self.currentToken()).kind != TokenKind.RCurly) {","class":"linePartCov","hits":"2","order":"1103","possible_hits":"3",},
{"lineNum":"  870","line":"            if (lhsIndex == null) {","class":"lineCov","hits":"1","order":"1104","possible_hits":"1",},
{"lineNum":"  871","line":"                lhsIndex = try self.parseStatement();","class":"linePartCov","hits":"2","order":"1105","possible_hits":"3",},
{"lineNum":"  872","line":"            } else {"},
{"lineNum":"  873","line":"                rhsIndex = try self.parseStatement();","class":"linePartCov","hits":"4","order":"1127","possible_hits":"5",},
{"lineNum":"  874","line":"            }"},
{"lineNum":"  875","line":"        }"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1128","possible_hits":"1",},
{"lineNum":"  878","line":"            .kind = NodeKind{ .StatementList = .{ .firstStatement = lhsIndex.?, .lastStatement = rhsIndex } },","class":"lineCov","hits":"3","order":"1129","possible_hits":"3",},
{"lineNum":"  879","line":"            .token = tok,"},
{"lineNum":"  880","line":"        };"},
{"lineNum":"  881","line":"        try self.set(statementListIndex, node);","class":"lineCov","hits":"1","order":"1130","possible_hits":"1",},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"        return statementListIndex;","class":"lineCov","hits":"1","order":"1131","possible_hits":"1",},
{"lineNum":"  884","line":"    }"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"    // Block = \"{\" StatementList \"}\""},
{"lineNum":"  887","line":"    pub fn parseBlock(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1510","possible_hits":"1",},
{"lineNum":"  888","line":"        errdefer {"},
{"lineNum":"  889","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  890","line":"                log.err(\"Error in parsing a Block\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  891","line":"                log.err(\"Defined as: Block = \\\"{{\\\" StatementList \\\"}}\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  892","line":"            }"},
{"lineNum":"  893","line":"        }"},
{"lineNum":"  894","line":"        // Init indexes"},
{"lineNum":"  895","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1511","possible_hits":"3",},
{"lineNum":"  896","line":"        var blockIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1512","possible_hits":"4",},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"        // Expect {"},
{"lineNum":"  899","line":"        try self.expectToken(TokenKind.LCurly);","class":"linePartCov","hits":"1","order":"1513","possible_hits":"2",},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"        // Expect StatementList"},
{"lineNum":"  902","line":"        const statementsIndex = try self.parseStatementList();","class":"linePartCov","hits":"2","order":"1514","possible_hits":"4",},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"        // Expect }"},
{"lineNum":"  905","line":"        try self.expectToken(TokenKind.RCurly);","class":"linePartCov","hits":"1","order":"1515","possible_hits":"2",},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1516","possible_hits":"1",},
{"lineNum":"  908","line":"            .kind = NodeKind{ .Block = .{ .statements = statementsIndex } },"},
{"lineNum":"  909","line":"            .token = tok,"},
{"lineNum":"  910","line":"        };"},
{"lineNum":"  911","line":"        try self.set(blockIndex, node);","class":"lineCov","hits":"1","order":"1517","possible_hits":"1",},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"        return blockIndex;","class":"lineCov","hits":"1","order":"1518","possible_hits":"1",},
{"lineNum":"  914","line":"    }"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"    // Assignment = LValue = (Expression | \"read\") \";\""},
{"lineNum":"  917","line":"    // REFACTOR: This is not properly written"},
{"lineNum":"  918","line":"    // FIXME:"},
{"lineNum":"  919","line":"    pub fn parseAssignment(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2080","possible_hits":"1",},
{"lineNum":"  920","line":"        errdefer {"},
{"lineNum":"  921","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  922","line":"                log.err(\"Error in parsing an Assignment\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  923","line":"                log.err(\"Defined as: Assignment = LValue = (Expression | \\\"read\\\") \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  924","line":"            }"},
{"lineNum":"  925","line":"        }"},
{"lineNum":"  926","line":"        // Init indexes"},
{"lineNum":"  927","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2081","possible_hits":"3",},
{"lineNum":"  928","line":"        var assignmentIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2082","possible_hits":"4",},
{"lineNum":"  929","line":"        var lhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"2083","possible_hits":"1",},
{"lineNum":"  930","line":"        var rhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"2084","possible_hits":"1",},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"        // Expect LValue"},
{"lineNum":"  933","line":"        lhsIndex = try self.parseLValue();","class":"linePartCov","hits":"2","order":"2085","possible_hits":"4",},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"        // Expect ="},
{"lineNum":"  936","line":"        try self.expectToken(TokenKind.Eq);","class":"linePartCov","hits":"1","order":"2094","possible_hits":"2",},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"        // Expect Expression | \"read\""},
{"lineNum":"  939","line":"        if ((try self.currentToken()).kind == TokenKind.KeywordRead) {","class":"linePartCov","hits":"2","order":"2095","possible_hits":"3",},
{"lineNum":"  940","line":"            // make read node"},
{"lineNum":"  941","line":"            const readNode = Node{","class":"lineCov","hits":"1","order":"2688","possible_hits":"1",},
{"lineNum":"  942","line":"                .kind = NodeKind.Read,","class":"lineCov","hits":"1","order":"2689","possible_hits":"1",},
{"lineNum":"  943","line":"                .token = try self.consumeToken(),","class":"linePartCov","hits":"2","order":"2690","possible_hits":"4",},
{"lineNum":"  944","line":"            };"},
{"lineNum":"  945","line":"            rhsIndex = try self.astAppendNode(readNode);","class":"linePartCov","hits":"2","order":"2691","possible_hits":"3",},
{"lineNum":"  946","line":"        } else {"},
{"lineNum":"  947","line":"            // make expression node"},
{"lineNum":"  948","line":"            rhsIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"2096","possible_hits":"3",},
{"lineNum":"  949","line":"        }"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"        // Expect ;"},
{"lineNum":"  952","line":"        try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"2097","possible_hits":"2",},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2098","possible_hits":"1",},
{"lineNum":"  955","line":"            .kind = NodeKind{ .Assignment = .{ .lhs = lhsIndex, .rhs = rhsIndex } },"},
{"lineNum":"  956","line":"            .token = tok,"},
{"lineNum":"  957","line":"        };"},
{"lineNum":"  958","line":"        try self.set(assignmentIndex, node);","class":"lineCov","hits":"1","order":"2099","possible_hits":"1",},
{"lineNum":"  959","line":"        return assignmentIndex;","class":"lineCov","hits":"1","order":"2100","possible_hits":"1",},
{"lineNum":"  960","line":"    }"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"    // Print = \"print\" Expression \";\""},
{"lineNum":"  963","line":"    // PrintLn = \"print\" Expression \"endl\" \";\""},
{"lineNum":"  964","line":"    pub fn parsePrints(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2316","possible_hits":"1",},
{"lineNum":"  965","line":"        errdefer {"},
{"lineNum":"  966","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  967","line":"                log.err(\"Error in parsing a Print type\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  968","line":"                log.err(\"Defined as: Print = \\\"print\\\" Expression \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  969","line":"            }"},
{"lineNum":"  970","line":"            log.err(\"Or defined as: PrintLn = \\\"print\\\" Expression \\\"endl\\\" \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  971","line":"        }"},
{"lineNum":"  972","line":"        // Init indexes"},
{"lineNum":"  973","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2317","possible_hits":"3",},
{"lineNum":"  974","line":"        var printIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2318","possible_hits":"4",},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"        // Expect print"},
{"lineNum":"  977","line":"        try self.expectToken(TokenKind.KeywordPrint);","class":"linePartCov","hits":"1","order":"2319","possible_hits":"2",},
{"lineNum":"  978","line":""},
{"lineNum":"  979","line":"        // Expect Expression"},
{"lineNum":"  980","line":"        const exprIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"2320","possible_hits":"4",},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"        var hasEndl = false;","class":"lineCov","hits":"1","order":"2335","possible_hits":"1",},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"        switch ((try self.currentToken()).kind) {","class":"linePartCov","hits":"2","order":"2336","possible_hits":"6",},
{"lineNum":"  985","line":"            // Expect ;"},
{"lineNum":"  986","line":"            TokenKind.Semicolon => {"},
{"lineNum":"  987","line":"                try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"2","order":"2337","possible_hits":"3",},
{"lineNum":"  988","line":"            },"},
{"lineNum":"  989","line":"            // Expect endl ;"},
{"lineNum":"  990","line":"            TokenKind.KeywordEndl => {"},
{"lineNum":"  991","line":"                try self.expectToken(TokenKind.KeywordEndl);","class":"linePartCov","hits":"1","order":"2692","possible_hits":"2",},
{"lineNum":"  992","line":"                try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"2693","possible_hits":"2",},
{"lineNum":"  993","line":"                hasEndl = true;","class":"lineCov","hits":"1","order":"2694","possible_hits":"1",},
{"lineNum":"  994","line":"            },"},
{"lineNum":"  995","line":"            else => {"},
{"lineNum":"  996","line":"                log.err(\"expected ; or endl but got {s}.\", .{@tagName((try self.currentToken()).kind)});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  997","line":"                return error.InvalidToken;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  998","line":"            },"},
{"lineNum":"  999","line":"        }"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2338","possible_hits":"1",},
{"lineNum":" 1002","line":"            .kind = NodeKind{ .Print = .{ .expr = exprIndex, .hasEndl = hasEndl } },"},
{"lineNum":" 1003","line":"            .token = tok,"},
{"lineNum":" 1004","line":"        };"},
{"lineNum":" 1005","line":"        try self.set(printIndex, node);","class":"lineCov","hits":"1","order":"2339","possible_hits":"1",},
{"lineNum":" 1006","line":"        return printIndex;","class":"lineCov","hits":"1","order":"2340","possible_hits":"1",},
{"lineNum":" 1007","line":"    }"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"    // ConditionalIf = \"if\" \"(\" Expression \")\" Block"},
{"lineNum":" 1010","line":"    // ConditionalIfElse = \"if\" \"(\" Expression \")\" Block \"else\" Block"},
{"lineNum":" 1011","line":"    /// If it is an if it goes like this:"},
{"lineNum":" 1012","line":"    /// [[ConditionalIf, expression, then block]]"},
{"lineNum":" 1013","line":"    ///                  lhs           rhs"},
{"lineNum":" 1014","line":"    /// If it is an if else it goes like this:"},
{"lineNum":" 1015","line":"    /// [[ConditionalIfElse, expression, then block, else block]]"},
{"lineNum":" 1016","line":"    ///                         lhs                   rhs"},
{"lineNum":" 1017","line":"    pub fn parseConditionals(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1325","possible_hits":"1",},
{"lineNum":" 1018","line":"        errdefer {"},
{"lineNum":" 1019","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1020","line":"                log.err(\"Error in parsing a Conditional\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1021","line":"                log.err(\"Defined as: ConditionalIf = \\\"if\\\" \\\"(\\\" Expression \\\")\\\" Block\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1022","line":"                log.err(\"Or defined as: ConditionalIfElse = \\\"if\\\" \\\"(\\\" Expression \\\")\\\" Block \\\"else\\\" Block\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1023","line":"            }"},
{"lineNum":" 1024","line":"        }"},
{"lineNum":" 1025","line":"        // Init indexes"},
{"lineNum":" 1026","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1326","possible_hits":"3",},
{"lineNum":" 1027","line":"        var conditionalIfIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1327","possible_hits":"4",},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"        // Expect if"},
{"lineNum":" 1030","line":"        try self.expectToken(TokenKind.KeywordIf);","class":"linePartCov","hits":"1","order":"1328","possible_hits":"2",},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"        // Expect ("},
{"lineNum":" 1033","line":"        try self.expectToken(TokenKind.LParen);","class":"linePartCov","hits":"1","order":"1329","possible_hits":"2",},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"        // Expect Expression"},
{"lineNum":" 1036","line":"        const condIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"1330","possible_hits":"4",},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"        // Expect )"},
{"lineNum":" 1039","line":"        try self.expectToken(TokenKind.RParen);","class":"linePartCov","hits":"1","order":"1508","possible_hits":"2",},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"        // Expect Block"},
{"lineNum":" 1042","line":"        var blockIndex = try self.parseBlock();","class":"linePartCov","hits":"2","order":"1509","possible_hits":"4",},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"        // If else then parse else block"},
{"lineNum":" 1045","line":"        if ((try self.currentToken()).kind == TokenKind.KeywordElse) {","class":"linePartCov","hits":"2","order":"1519","possible_hits":"3",},
{"lineNum":" 1046","line":"            const ifElseIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1520","possible_hits":"4",},
{"lineNum":" 1047","line":"            // Expect else"},
{"lineNum":" 1048","line":"            try self.expectToken(TokenKind.KeywordElse);","class":"linePartCov","hits":"1","order":"1521","possible_hits":"2",},
{"lineNum":" 1049","line":"            // Expect Block"},
{"lineNum":" 1050","line":"            const elseBlockIndex = try self.parseBlock();","class":"linePartCov","hits":"2","order":"1522","possible_hits":"4",},
{"lineNum":" 1051","line":"            const ifElseNode = Node{","class":"lineCov","hits":"1","order":"1530","possible_hits":"1",},
{"lineNum":" 1052","line":"                .kind = NodeKind{ .ConditionalIfElse = .{ .ifBlock = blockIndex, .elseBlock = elseBlockIndex } },"},
{"lineNum":" 1053","line":"                .token = tok,"},
{"lineNum":" 1054","line":"            };"},
{"lineNum":" 1055","line":"            try self.set(ifElseIndex, ifElseNode);","class":"lineCov","hits":"1","order":"1531","possible_hits":"1",},
{"lineNum":" 1056","line":"            blockIndex = ifElseIndex;","class":"lineCov","hits":"2","order":"1532","possible_hits":"2",},
{"lineNum":" 1057","line":"        }"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1533","possible_hits":"1",},
{"lineNum":" 1060","line":"            .kind = NodeKind{ .ConditionalIf = .{ .cond = condIndex, .block = blockIndex } },"},
{"lineNum":" 1061","line":"            .token = tok,"},
{"lineNum":" 1062","line":"        };"},
{"lineNum":" 1063","line":"        try self.set(conditionalIfIndex, node);","class":"lineCov","hits":"1","order":"1534","possible_hits":"1",},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"        return conditionalIfIndex;","class":"lineCov","hits":"1","order":"1535","possible_hits":"1",},
{"lineNum":" 1066","line":"    }"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    // While = \"while\" \"(\" Expression \")\" Block"},
{"lineNum":" 1069","line":"    /// While goes like this:"},
{"lineNum":" 1070","line":"    /// [[While, expression, block]]"},
{"lineNum":" 1071","line":"    ///           lhs         rhs"},
{"lineNum":" 1072","line":"    pub fn parseWhile(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2661","possible_hits":"1",},
{"lineNum":" 1073","line":"        errdefer {"},
{"lineNum":" 1074","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1075","line":"                log.err(\"Error in parsing a While\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1076","line":"                log.err(\"Defined as: While = \\\"while\\\" \\\"(\\\" Expression \\\")\\\" Block\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1077","line":"            }"},
{"lineNum":" 1078","line":"        }"},
{"lineNum":" 1079","line":"        // Init indexes"},
{"lineNum":" 1080","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2662","possible_hits":"3",},
{"lineNum":" 1081","line":"        var whileIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2663","possible_hits":"4",},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"        // Expect while"},
{"lineNum":" 1084","line":"        try self.expectToken(TokenKind.KeywordWhile);","class":"linePartCov","hits":"1","order":"2664","possible_hits":"2",},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"        // Expect ("},
{"lineNum":" 1087","line":"        try self.expectToken(TokenKind.LParen);","class":"linePartCov","hits":"1","order":"2665","possible_hits":"2",},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"        // Expect Expression"},
{"lineNum":" 1090","line":"        const condIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"2666","possible_hits":"4",},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"        // Expect )"},
{"lineNum":" 1093","line":"        try self.expectToken(TokenKind.RParen);","class":"linePartCov","hits":"1","order":"2667","possible_hits":"2",},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"        // Expect Block"},
{"lineNum":" 1096","line":"        const blockIndex = try self.parseBlock();","class":"linePartCov","hits":"2","order":"2668","possible_hits":"4",},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2669","possible_hits":"1",},
{"lineNum":" 1099","line":"            .kind = NodeKind{ .While = .{ .cond = condIndex, .block = blockIndex } },"},
{"lineNum":" 1100","line":"            .token = tok,"},
{"lineNum":" 1101","line":"        };"},
{"lineNum":" 1102","line":"        try self.set(whileIndex, node);","class":"lineCov","hits":"1","order":"2670","possible_hits":"1",},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"        return whileIndex;","class":"lineCov","hits":"1","order":"2671","possible_hits":"1",},
{"lineNum":" 1105","line":"    }"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    // Delete = \"delete\" Expression \";\""},
{"lineNum":" 1108","line":"    /// Delete goes like this:"},
{"lineNum":" 1109","line":"    /// [[Delete, expression]]"},
{"lineNum":" 1110","line":"    ///              lhs"},
{"lineNum":" 1111","line":"    pub fn parseDelete(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2673","possible_hits":"1",},
{"lineNum":" 1112","line":"        errdefer {"},
{"lineNum":" 1113","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1114","line":"                log.err(\"Error in parsing a Delete\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1115","line":"                log.err(\"Defined as: Delete = \\\"delete\\\" Expression \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1116","line":"            }"},
{"lineNum":" 1117","line":"        }"},
{"lineNum":" 1118","line":"        // Init indexes"},
{"lineNum":" 1119","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2674","possible_hits":"3",},
{"lineNum":" 1120","line":"        var deleteIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2675","possible_hits":"4",},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"        // Expect delete"},
{"lineNum":" 1123","line":"        try self.expectToken(TokenKind.KeywordDelete);","class":"linePartCov","hits":"1","order":"2676","possible_hits":"2",},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        // Expect Expression"},
{"lineNum":" 1126","line":"        const exprIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"2677","possible_hits":"4",},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        // Expect ;"},
{"lineNum":" 1129","line":"        try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"2678","possible_hits":"2",},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2679","possible_hits":"1",},
{"lineNum":" 1132","line":"            .kind = NodeKind{ .Delete = .{ .expr = exprIndex } },"},
{"lineNum":" 1133","line":"            .token = tok,"},
{"lineNum":" 1134","line":"        };"},
{"lineNum":" 1135","line":"        try self.set(deleteIndex, node);","class":"lineCov","hits":"1","order":"2680","possible_hits":"1",},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"        return deleteIndex;","class":"lineCov","hits":"1","order":"2681","possible_hits":"1",},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"    // Return = \"return\" (Expression)?  \";\""},
{"lineNum":" 1141","line":"    /// Return goes like this:"},
{"lineNum":" 1142","line":"    /// [[Return, expression]]"},
{"lineNum":" 1143","line":"    ///             lhs"},
{"lineNum":" 1144","line":"    pub fn parseReturn(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1113","possible_hits":"1",},
{"lineNum":" 1145","line":"        errdefer {"},
{"lineNum":" 1146","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1147","line":"                log.err(\"Error in parsing a Return\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1148","line":"                log.err(\"Defined as: Return = \\\"return\\\" (Expression)?  \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1149","line":"            }"},
{"lineNum":" 1150","line":"        }"},
{"lineNum":" 1151","line":"        // Init indexes"},
{"lineNum":" 1152","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1114","possible_hits":"3",},
{"lineNum":" 1153","line":"        var returnIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1115","possible_hits":"4",},
{"lineNum":" 1154","line":"        var exprIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1116","possible_hits":"1",},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"        // Expect return"},
{"lineNum":" 1157","line":"        try self.expectToken(TokenKind.KeywordReturn);","class":"linePartCov","hits":"1","order":"1117","possible_hits":"2",},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"        // Expect Expression optionally"},
{"lineNum":" 1160","line":"        if ((try self.currentToken()).kind != TokenKind.Semicolon) {","class":"linePartCov","hits":"2","order":"1118","possible_hits":"3",},
{"lineNum":" 1161","line":"            log.err(\"Expected an expression after return.\\n\", .{});","class":"lineCov","hits":"1","order":"1523","possible_hits":"1",},
{"lineNum":" 1162","line":"            // Expect Expression"},
{"lineNum":" 1163","line":"            exprIndex = try self.parseExpression();","class":"lineCov","hits":"2","order":"1526","possible_hits":"2",},
{"lineNum":" 1164","line":"        }"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1119","possible_hits":"1",},
{"lineNum":" 1167","line":"            .kind = NodeKind{ .Return = .{ .expr = exprIndex } },"},
{"lineNum":" 1168","line":"            .token = tok,"},
{"lineNum":" 1169","line":"        };"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"        // Expect ;"},
{"lineNum":" 1172","line":"        try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"1120","possible_hits":"2",},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"        try self.set(returnIndex, node);","class":"lineCov","hits":"1","order":"1121","possible_hits":"1",},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"        return returnIndex;","class":"lineCov","hits":"1","order":"1122","possible_hits":"1",},
{"lineNum":" 1177","line":"    }"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"    // Invocation = Identifier Arguments \";\""},
{"lineNum":" 1180","line":"    /// Invocation goes like this:"},
{"lineNum":" 1181","line":"    /// [[Invocation, identifier, arguments]]"},
{"lineNum":" 1182","line":"    ///               lhs         rhs"},
{"lineNum":" 1183","line":"    pub fn parseInvocation(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1739","possible_hits":"1",},
{"lineNum":" 1184","line":"        errdefer {"},
{"lineNum":" 1185","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1186","line":"                log.err(\"Error in parsing an Identifier\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1187","line":"                log.err(\"Defined as: Invocation = Identifier Arguments \\\";\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1188","line":"            }"},
{"lineNum":" 1189","line":"        }"},
{"lineNum":" 1190","line":"        // Init indexes"},
{"lineNum":" 1191","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1740","possible_hits":"3",},
{"lineNum":" 1192","line":"        var invocationIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1741","possible_hits":"4",},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"        // Expect Identifier"},
{"lineNum":" 1195","line":"        const funcNameIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"1742","possible_hits":"6",},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"        // Expect Arguments"},
{"lineNum":" 1198","line":"        const argsIndex = try self.parseArguments();","class":"linePartCov","hits":"2","order":"1755","possible_hits":"4",},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"        // Expect ;"},
{"lineNum":" 1201","line":"        try self.expectToken(TokenKind.Semicolon);","class":"linePartCov","hits":"1","order":"1761","possible_hits":"2",},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1762","possible_hits":"1",},
{"lineNum":" 1204","line":"            .kind = NodeKind{ .Invocation = .{ .funcName = funcNameIndex, .args = argsIndex } },"},
{"lineNum":" 1205","line":"            .token = tok,"},
{"lineNum":" 1206","line":"        };"},
{"lineNum":" 1207","line":"        try self.set(invocationIndex, node);","class":"lineCov","hits":"1","order":"1763","possible_hits":"1",},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"        return invocationIndex;","class":"lineCov","hits":"1","order":"1764","possible_hits":"1",},
{"lineNum":" 1210","line":"    }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    // LValue = Identifier (\".\" Identifier)*"},
{"lineNum":" 1213","line":"    pub fn parseLValue(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"2086","possible_hits":"1",},
{"lineNum":" 1214","line":"        errdefer {"},
{"lineNum":" 1215","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1216","line":"                log.err(\"Error in parsing an LValue\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1217","line":"                log.err(\"Defined as: LValue = Identifier (\\\".\\\" Identifier)*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1218","line":"            }"},
{"lineNum":" 1219","line":"        }"},
{"lineNum":" 1220","line":"        // Init indexes"},
{"lineNum":" 1221","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"2087","possible_hits":"3",},
{"lineNum":" 1222","line":"        var lValueIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2088","possible_hits":"4",},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"        // Expect Identifier"},
{"lineNum":" 1225","line":"        const identIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"2089","possible_hits":"6",},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"        const chainIndex = try self.parseSelectorChain();","class":"linePartCov","hits":"2","order":"2090","possible_hits":"4",},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"        const node = Node{","class":"lineCov","hits":"1","order":"2091","possible_hits":"1",},
{"lineNum":" 1230","line":"            .kind = NodeKind{ .LValue = .{ .ident = identIndex, .chain = chainIndex } },"},
{"lineNum":" 1231","line":"            .token = tok,"},
{"lineNum":" 1232","line":"        };"},
{"lineNum":" 1233","line":"        try self.set(lValueIndex, node);","class":"lineCov","hits":"1","order":"2092","possible_hits":"1",},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"        return lValueIndex;","class":"lineCov","hits":"1","order":"2093","possible_hits":"1",},
{"lineNum":" 1236","line":"    }"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"    // Arguments = \"(\" (Expression (\",\" Expression)*)? \")\""},
{"lineNum":" 1239","line":"    // returns null when no arguments are present (`funcName()`)"},
{"lineNum":" 1240","line":"    pub fn parseArguments(self: *Parser) !?usize {","class":"lineCov","hits":"1","order":"1756","possible_hits":"1",},
{"lineNum":" 1241","line":"        errdefer {"},
{"lineNum":" 1242","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1243","line":"                log.err(\"Error in parsing Arguments\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1244","line":"                log.err(\"Defined as: Arguments = \\\"(\\\" (Expression (\\\",\\\" Expression)*)? \\\")\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1245","line":"            }"},
{"lineNum":" 1246","line":"        }"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"        // Expect ("},
{"lineNum":" 1249","line":"        try self.expectToken(TokenKind.LParen);","class":"linePartCov","hits":"1","order":"1757","possible_hits":"2",},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"        if ((try self.currentToken()).kind == TokenKind.RParen) {","class":"linePartCov","hits":"2","order":"1758","possible_hits":"3",},
{"lineNum":" 1252","line":"            // Expect )"},
{"lineNum":" 1253","line":"            try self.expectToken(TokenKind.RParen);","class":"linePartCov","hits":"1","order":"1759","possible_hits":"2",},
{"lineNum":" 1254","line":"            // return null for no args"},
{"lineNum":" 1255","line":"            return null;","class":"lineCov","hits":"2","order":"1760","possible_hits":"2",},
{"lineNum":" 1256","line":"        }"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"        // Init indexes (after checking if there are any args at all)"},
{"lineNum":" 1259","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1840","possible_hits":"4",},
{"lineNum":" 1260","line":"        var argumentsIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1841","possible_hits":"4",},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"        // Expect (Expression (\",\" Expression)*)?"},
{"lineNum":" 1263","line":"        // Expect Expression"},
{"lineNum":" 1264","line":"        const firstArgIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"1842","possible_hits":"4",},
{"lineNum":" 1265","line":"        _ = try self.astAppend(.ArgumentEnd, tok);","class":"linePartCov","hits":"1","order":"1843","possible_hits":"3",},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"        var lastArgIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1844","possible_hits":"1",},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"        // Expect (\",\" Expression)*"},
{"lineNum":" 1270","line":"        while ((try self.currentToken()).kind == TokenKind.Comma) {","class":"linePartCov","hits":"2","order":"1845","possible_hits":"3",},
{"lineNum":" 1271","line":"            // Expect ,"},
{"lineNum":" 1272","line":"            try self.expectToken(TokenKind.Comma);","class":"linePartCov","hits":"1","order":"2007","possible_hits":"2",},
{"lineNum":" 1273","line":"            // Expect Expression"},
{"lineNum":" 1274","line":"            lastArgIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"2008","possible_hits":"4",},
{"lineNum":" 1275","line":"            _ = try self.astAppend(.ArgumentEnd, tok);","class":"linePartCov","hits":"4","order":"1846","possible_hits":"5",},
{"lineNum":" 1276","line":"        }"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"        // Expect )"},
{"lineNum":" 1279","line":"        try self.expectToken(TokenKind.RParen);","class":"linePartCov","hits":"1","order":"1847","possible_hits":"2",},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1848","possible_hits":"1",},
{"lineNum":" 1282","line":"            .kind = NodeKind{ .Arguments = .{ .firstArg = firstArgIndex, .lastArg = lastArgIndex } },"},
{"lineNum":" 1283","line":"            .token = tok,"},
{"lineNum":" 1284","line":"        };"},
{"lineNum":" 1285","line":"        try self.set(argumentsIndex, node);","class":"lineCov","hits":"1","order":"1849","possible_hits":"1",},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"        return argumentsIndex;","class":"lineCov","hits":"1","order":"1850","possible_hits":"1",},
{"lineNum":" 1288","line":"    }"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"    /// type alias"},
{"lineNum":" 1291","line":"    const BindingPower = u8;"},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"    /// \"binding power\" ~ precedence of an operator"},
{"lineNum":" 1294","line":"    /// higher binding power means higher precedence"},
{"lineNum":" 1295","line":"    /// pratt parsing based on these binding powers results in"},
{"lineNum":" 1296","line":"    /// sub expressions with higher precedence being grouped together"},
{"lineNum":" 1297","line":"    /// i.e. `a + b * c` is parsed as `a + (b * c)` because `*`"},
{"lineNum":" 1298","line":"    /// has higher precedence than `+`"},
{"lineNum":" 1299","line":"    fn binding_power(op: TokenKind) BindingPower {","class":"lineCov","hits":"1","order":"2363","possible_hits":"1",},
{"lineNum":" 1300","line":"        return switch (op) {","class":"linePartCov","hits":"1","order":"2364","possible_hits":"2",},
{"lineNum":" 1301","line":"            // expression -> boolterm { \'||\' boolterm}∗"},
{"lineNum":" 1302","line":"            .Or => 1,"},
{"lineNum":" 1303","line":"            // boolterm -> eqterm { \'&&\' eqterm}∗"},
{"lineNum":" 1304","line":"            .And => 2,"},
{"lineNum":" 1305","line":"            // eqterm -> relterm {{ \'==\' | \'!=\' } relterm}∗"},
{"lineNum":" 1306","line":"            .DoubleEq, .NotEq => 3,"},
{"lineNum":" 1307","line":"            // relterm -> simple {{ \'<\' | \'>\' | \'<=\' | \'>=\' } simple}∗"},
{"lineNum":" 1308","line":"            .Gt, .Lt, .GtEq, .LtEq => 4,"},
{"lineNum":" 1309","line":"            // simple -> term {{ \'+\' | \'−\' } term}∗"},
{"lineNum":" 1310","line":"            .Plus, .Minus => 5,"},
{"lineNum":" 1311","line":"            // term -> unary {{ \'∗\' | \'/\' } unary}∗"},
{"lineNum":" 1312","line":"            .Mul, .Div => 6,"},
{"lineNum":" 1313","line":"            else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1314","line":"        };"},
{"lineNum":" 1315","line":"    }"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"    /// binding power of prefix ops (`!`, `-`)"},
{"lineNum":" 1318","line":"    /// separate function because it is used in a different context"},
{"lineNum":" 1319","line":"    /// and must avoid returning the bp of `-` when used as negation operator"},
{"lineNum":" 1320","line":"    fn prefix_binding_power(op: TokenKind) BindingPower {","class":"lineCov","hits":"1","order":"2505","possible_hits":"1",},
{"lineNum":" 1321","line":"        return switch (op) {","class":"linePartCov","hits":"1","order":"2506","possible_hits":"2",},
{"lineNum":" 1322","line":"            // NOTE: must be bigger than biggest binop binding power"},
{"lineNum":" 1323","line":"            .Not, .Minus => 7,"},
{"lineNum":" 1324","line":"            else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1325","line":"        };"},
{"lineNum":" 1326","line":"    }"},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"    fn is_binop(op: TokenKind) bool {","class":"lineCov","hits":"1","order":"1395","possible_hits":"1",},
{"lineNum":" 1329","line":"        return switch (op) {","class":"lineCov","hits":"1","order":"1396","possible_hits":"1",},
{"lineNum":" 1330","line":"            .Or, .And, .DoubleEq, .NotEq, .Gt, .Lt, .GtEq, .LtEq, .Plus, .Minus, .Mul, .Div => true,"},
{"lineNum":" 1331","line":"            else => false,"},
{"lineNum":" 1332","line":"        };"},
{"lineNum":" 1333","line":"    }"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"    pub const Expr = union(enum) {"},
{"lineNum":" 1336","line":"        Binop: ExprBinop,"},
{"lineNum":" 1337","line":"        Uop: ExprUop,"},
{"lineNum":" 1338","line":"        Atom: ExprAtom,"},
{"lineNum":" 1339","line":"    };"},
{"lineNum":" 1340","line":"    /// An atom is a selector in the grammar, i.e. the lowest level of the expression"},
{"lineNum":" 1341","line":"    /// heirarchy that contains no operators (not considering `.` field acess as an op)"},
{"lineNum":" 1342","line":"    /// (described as selector in grammar)"},
{"lineNum":" 1343","line":"    // TODO: make it {start, end} rather than length. End is almost exclusively used"},
{"lineNum":" 1344","line":"    // in tests/assertions for taking a slice of the token list"},
{"lineNum":" 1345","line":"    pub const ExprAtom = struct {"},
{"lineNum":" 1346","line":"        /// The index into the token list, to set in the parser before calling parseAtom"},
{"lineNum":" 1347","line":"        /// while reconstructing the tree"},
{"lineNum":" 1348","line":"        start: usize,"},
{"lineNum":" 1349","line":"        len: u32,"},
{"lineNum":" 1350","line":"    };"},
{"lineNum":" 1351","line":"    /// binary operation"},
{"lineNum":" 1352","line":"    pub const ExprBinop = struct { op: Token, lhs: *Expr, rhs: *Expr };"},
{"lineNum":" 1353","line":"    /// unary operation"},
{"lineNum":" 1354","line":"    pub const ExprUop = struct {"},
{"lineNum":" 1355","line":"        op: Token,"},
{"lineNum":" 1356","line":"        on: *Expr,"},
{"lineNum":" 1357","line":"    };"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"    fn reconstructTree(self: *Parser, expr: *Expr) !usize {","class":"lineCov","hits":"1","order":"1451","possible_hits":"1",},
{"lineNum":" 1360","line":"        switch (expr.*) {","class":"lineCov","hits":"1","order":"1452","possible_hits":"1",},
{"lineNum":" 1361","line":"            .Binop => {"},
{"lineNum":" 1362","line":"                const binopIndex = try self.reserve();","class":"lineCov","hits":"1","order":"2384","possible_hits":"1",},
{"lineNum":" 1363","line":"                const lhsIndex = try self.reconstructTree(expr.Binop.lhs);","class":"lineCov","hits":"1","order":"2385","possible_hits":"1",},
{"lineNum":" 1364","line":"                const rhsIndex = try self.reconstructTree(expr.Binop.rhs);","class":"lineCov","hits":"1","order":"2386","possible_hits":"1",},
{"lineNum":" 1365","line":"                const node = Node{","class":"lineCov","hits":"1","order":"2387","possible_hits":"1",},
{"lineNum":" 1366","line":"                    .kind = .{ .BinaryOperation = .{"},
{"lineNum":" 1367","line":"                        .lhs = lhsIndex,"},
{"lineNum":" 1368","line":"                        .rhs = rhsIndex,"},
{"lineNum":" 1369","line":"                    } },"},
{"lineNum":" 1370","line":"                    .token = expr.Binop.op,","class":"lineCov","hits":"2","order":"2388","possible_hits":"2",},
{"lineNum":" 1371","line":"                };"},
{"lineNum":" 1372","line":"                try self.set(binopIndex, node);","class":"lineCov","hits":"1","order":"2389","possible_hits":"1",},
{"lineNum":" 1373","line":"                return binopIndex;","class":"lineCov","hits":"1","order":"2390","possible_hits":"1",},
{"lineNum":" 1374","line":"            },"},
{"lineNum":" 1375","line":"            .Uop => {"},
{"lineNum":" 1376","line":"                const uopIndex = try self.reserve();","class":"lineCov","hits":"1","order":"2510","possible_hits":"1",},
{"lineNum":" 1377","line":"                const onIndex = try self.reconstructTree(expr.Uop.on);","class":"lineCov","hits":"1","order":"2511","possible_hits":"1",},
{"lineNum":" 1378","line":"                const node = Node{","class":"lineCov","hits":"1","order":"2512","possible_hits":"1",},
{"lineNum":" 1379","line":"                    .kind = .{ .UnaryOperation = .{"},
{"lineNum":" 1380","line":"                        .on = onIndex,"},
{"lineNum":" 1381","line":"                    } },"},
{"lineNum":" 1382","line":"                    .token = expr.Uop.op,","class":"lineCov","hits":"2","order":"2513","possible_hits":"2",},
{"lineNum":" 1383","line":"                };"},
{"lineNum":" 1384","line":"                try self.set(uopIndex, node);","class":"lineCov","hits":"1","order":"2514","possible_hits":"1",},
{"lineNum":" 1385","line":"                return uopIndex;","class":"lineCov","hits":"1","order":"2515","possible_hits":"1",},
{"lineNum":" 1386","line":"            },"},
{"lineNum":" 1387","line":"            .Atom => {"},
{"lineNum":" 1388","line":"                // this is tricky see"},
{"lineNum":" 1389","line":"                // save token position before overwriting"},
{"lineNum":" 1390","line":"                const posSave = self.pos;","class":"lineCov","hits":"1","order":"1453","possible_hits":"1",},
{"lineNum":" 1391","line":"                const readPosSave = self.readPos;","class":"lineCov","hits":"1","order":"1454","possible_hits":"1",},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"                // overwrite the token position so when we call parseSelector"},
{"lineNum":" 1394","line":"                // it starts at the token we skipped while extracting the atom"},
{"lineNum":" 1395","line":"                self.pos = expr.Atom.start;","class":"lineCov","hits":"2","order":"1455","possible_hits":"2",},
{"lineNum":" 1396","line":"                self.readPos = expr.Atom.start + 1;","class":"lineCov","hits":"2","order":"1456","possible_hits":"2",},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"                const atomIndex = try self.parseSelector();","class":"lineCov","hits":"1","order":"1457","possible_hits":"1",},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"                // I really should have made this error shorter before the hundredth time I saw it"},
{"lineNum":" 1401","line":"                utils.assert(self.pos == (expr.Atom.start + expr.Atom.len), \"either didn\'t skip enough tokens when extracting atom or didn\'t parse enough when reconstructing tree... either way shits borqed! glhf!!!\\n Expected to parse: \\n{any}\\nBut Parsed: \\n{any}\\n\", .{ self.tokens[expr.Atom.start..(expr.Atom.start + expr.Atom.len)], self.tokens[expr.Atom.start..self.pos] });","class":"lineCov","hits":"2","order":"1484","possible_hits":"2",},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"                // restore read and write pos"},
{"lineNum":" 1404","line":"                self.pos = posSave;","class":"lineCov","hits":"1","order":"1485","possible_hits":"1",},
{"lineNum":" 1405","line":"                self.readPos = readPosSave;","class":"lineCov","hits":"1","order":"1486","possible_hits":"1",},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"                // return index to atom subtree in ast"},
{"lineNum":" 1408","line":"                return atomIndex;","class":"lineCov","hits":"1","order":"1487","possible_hits":"1",},
{"lineNum":" 1409","line":"            },"},
{"lineNum":" 1410","line":"        }"},
{"lineNum":" 1411","line":"    }"},
{"lineNum":" 1412","line":""},
{"lineNum":" 1413","line":"    pub fn parseExpression(self: *Parser) ParserError!usize {","class":"lineCov","hits":"1","order":"1331","possible_hits":"1",},
{"lineNum":" 1414","line":"        errdefer {"},
{"lineNum":" 1415","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1416","line":"                log.err(\"Error in parsing an Expression\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1417","line":"                log.err(\"Defined as: Expression = boolterm (\\\"||\\\" boolterm)*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1418","line":"            }"},
{"lineNum":" 1419","line":"        }"},
{"lineNum":" 1420","line":"        // Init indexes"},
{"lineNum":" 1421","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1332","possible_hits":"3",},
{"lineNum":" 1422","line":"        const expressionIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1333","possible_hits":"4",},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"        var arenaAlloc = std.heap.ArenaAllocator.init(self.allocator);","class":"lineCov","hits":"1","order":"1334","possible_hits":"1",},
{"lineNum":" 1425","line":"        defer arenaAlloc.deinit();","class":"linePartCov","hits":"1","order":"1491","possible_hits":"3",},
{"lineNum":" 1426","line":"        var arena = arenaAlloc.allocator();","class":"lineCov","hits":"1","order":"1339","possible_hits":"1",},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"        const expr = try self.prattParseExpression(arena, 0);","class":"linePartCov","hits":"2","order":"1342","possible_hits":"4",},
{"lineNum":" 1429","line":"        const last = self.ast.items.len;","class":"lineCov","hits":"1","order":"1399","possible_hits":"1",},
{"lineNum":" 1430","line":"        log.info(\"\\nEXTRACTED: {any}\\n\", .{expr});","class":"lineCov","hits":"1","order":"1400","possible_hits":"1",},
{"lineNum":" 1431","line":"        const treeIndex = try self.reconstructTree(expr);","class":"linePartCov","hits":"2","order":"1450","possible_hits":"4",},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"        // NOTE: unessary?"},
{"lineNum":" 1434","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1488","possible_hits":"1",},
{"lineNum":" 1435","line":"            .kind = NodeKind{ .Expression = .{ .expr = treeIndex, .last = last} },"},
{"lineNum":" 1436","line":"            .token = tok,"},
{"lineNum":" 1437","line":"        };"},
{"lineNum":" 1438","line":"        try self.set(expressionIndex, node);","class":"lineCov","hits":"1","order":"1489","possible_hits":"1",},
{"lineNum":" 1439","line":"        return expressionIndex;","class":"lineCov","hits":"2","order":"1490","possible_hits":"2",},
{"lineNum":" 1440","line":"    }"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    fn prattParseExpression(self: *Parser, arena: std.mem.Allocator, minBP: BindingPower) !*Expr {","class":"lineCov","hits":"1","order":"1343","possible_hits":"1",},
{"lineNum":" 1443","line":"        const tok = try self.currentToken();","class":"lineCov","hits":"1","order":"1344","possible_hits":"1",},
{"lineNum":" 1444","line":""},
{"lineNum":" 1445","line":"        var lhs = try arena.create(Expr);","class":"lineCov","hits":"1","order":"1345","possible_hits":"1",},
{"lineNum":" 1446","line":"        switch (tok.kind) {","class":"lineCov","hits":"3","order":"1379","possible_hits":"3",},
{"lineNum":" 1447","line":"            .Not, .Minus => |uop| {"},
{"lineNum":" 1448","line":"                const bp = prefix_binding_power(uop);","class":"lineCov","hits":"1","order":"2504","possible_hits":"1",},
{"lineNum":" 1449","line":"                _ = try self.consumeToken();","class":"lineCov","hits":"1","order":"2507","possible_hits":"1",},
{"lineNum":" 1450","line":"                const rhs = try self.prattParseExpression(arena, bp);","class":"lineCov","hits":"1","order":"2508","possible_hits":"1",},
{"lineNum":" 1451","line":"                lhs.* = Expr{ .Uop = .{","class":"lineCov","hits":"1","order":"2509","possible_hits":"1",},
{"lineNum":" 1452","line":"                    .op = tok,"},
{"lineNum":" 1453","line":"                    .on = rhs,"},
{"lineNum":" 1454","line":"                } };"},
{"lineNum":" 1455","line":"            },"},
{"lineNum":" 1456","line":"            // TODO: LParen here"},
{"lineNum":" 1457","line":"            else => {"},
{"lineNum":" 1458","line":"                const atom = try self.extractAtom();","class":"linePartCov","hits":"1","order":"1380","possible_hits":"2",},
{"lineNum":" 1459","line":"                lhs.* = Expr{ .Atom = atom };","class":"lineCov","hits":"2","order":"1391","possible_hits":"2",},
{"lineNum":" 1460","line":"            },"},
{"lineNum":" 1461","line":"        }"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"        while (true) {"},
{"lineNum":" 1464","line":"            // not peek because idk this works"},
{"lineNum":" 1465","line":"            const op = try self.currentToken();","class":"lineCov","hits":"1","order":"1392","possible_hits":"1",},
{"lineNum":" 1466","line":"            if (op.kind == TokenKind.Eof) {","class":"lineCov","hits":"1","order":"1393","possible_hits":"1",},
{"lineNum":" 1467","line":"                break;","class":"lineCov","hits":"1","order":"3448","possible_hits":"1",},
{"lineNum":" 1468","line":"            }"},
{"lineNum":" 1469","line":"            if (!is_binop(op.kind)) {","class":"lineCov","hits":"1","order":"1394","possible_hits":"1",},
{"lineNum":" 1470","line":"                // FIXME: sometimes a non-binop is expected"},
{"lineNum":" 1471","line":"                // ex. `,` between args"},
{"lineNum":" 1472","line":"                // but sometimes it means malformed expression (i think (unproven))"},
{"lineNum":" 1473","line":"                break;","class":"lineCov","hits":"1","order":"1397","possible_hits":"1",},
{"lineNum":" 1474","line":"            }"},
{"lineNum":" 1475","line":"            const bp = binding_power(op.kind);","class":"lineCov","hits":"1","order":"2362","possible_hits":"1",},
{"lineNum":" 1476","line":"            // we don\'t actually use different left/right binding powers,"},
{"lineNum":" 1477","line":"            // but if we did... this is so we don\'t have to go find the random"},
{"lineNum":" 1478","line":"            // shit I was reading to figure out which goes where"},
{"lineNum":" 1479","line":"            const rBP = bp;","class":"lineCov","hits":"1","order":"2365","possible_hits":"1",},
{"lineNum":" 1480","line":"            const lBP = bp;","class":"lineCov","hits":"1","order":"2366","possible_hits":"1",},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"            if (lBP < minBP) {","class":"lineCov","hits":"1","order":"2367","possible_hits":"1",},
{"lineNum":" 1483","line":"                break;","class":"lineCov","hits":"1","order":"2370","possible_hits":"1",},
{"lineNum":" 1484","line":"            }"},
{"lineNum":" 1485","line":"            _ = try self.consumeToken();","class":"linePartCov","hits":"1","order":"2368","possible_hits":"2",},
{"lineNum":" 1486","line":"            const rhs = try self.prattParseExpression(arena, rBP + 1);","class":"lineCov","hits":"1","order":"2369","possible_hits":"1",},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"            const newlhs = try arena.create(Expr);","class":"lineCov","hits":"1","order":"2371","possible_hits":"1",},
{"lineNum":" 1489","line":"            newlhs.* = Expr{ .Binop = .{ .op = op, .lhs = lhs, .rhs = rhs } };","class":"lineCov","hits":"1","order":"2377","possible_hits":"1",},
{"lineNum":" 1490","line":"            lhs = newlhs;","class":"lineCov","hits":"1","order":"2378","possible_hits":"1",},
{"lineNum":" 1491","line":"        }"},
{"lineNum":" 1492","line":"        return lhs;","class":"lineCov","hits":"1","order":"1398","possible_hits":"1",},
{"lineNum":" 1493","line":"    }"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"    // Extracts the list of tokens making up an `atom` (see description in Expr struct above)"},
{"lineNum":" 1496","line":"    // to be reparsed when reconstructing the pratt-parsed expr tree in preorder-traversal order"},
{"lineNum":" 1497","line":"    fn extractAtom(self: *Parser) ParserError!ExprAtom {","class":"lineCov","hits":"1","order":"1381","possible_hits":"1",},
{"lineNum":" 1498","line":"        const tokenStartIndex = self.pos;","class":"lineCov","hits":"1","order":"1382","possible_hits":"1",},
{"lineNum":" 1499","line":"        var numTokens: u32 = 1;","class":"lineCov","hits":"1","order":"1383","possible_hits":"1",},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"        var startTok = try self.currentToken();","class":"lineCov","hits":"1","order":"1384","possible_hits":"1",},
{"lineNum":" 1502","line":"        const peekKind = (try self.peekToken()).kind;","class":"lineCov","hits":"1","order":"1385","possible_hits":"1",},
{"lineNum":" 1503","line":""},
{"lineNum":" 1504","line":"        if ((startTok.kind == .Identifier) and (peekKind == .LParen or peekKind == .Dot)) {","class":"lineCov","hits":"2","order":"1386","possible_hits":"2",},
{"lineNum":" 1505","line":"            // skipping all tokens for function call `id \'(\' {args},* \')\'` is functionally the same as skipping all tokens in a parenthized as expression"},
{"lineNum":" 1506","line":"            // skipping the id token makes it so they can be handled in the same switch arm in the"},
{"lineNum":" 1507","line":"            // following switch statement"},
{"lineNum":" 1508","line":"            _ = try self.consumeToken();","class":"linePartCov","hits":"1","order":"2433","possible_hits":"2",},
{"lineNum":" 1509","line":"            startTok = try self.currentToken();","class":"lineCov","hits":"1","order":"2434","possible_hits":"1",},
{"lineNum":" 1510","line":"            if (peekKind == .LParen) {","class":"lineCov","hits":"1","order":"2435","possible_hits":"1",},
{"lineNum":" 1511","line":"                // Dot `numTokens` calculation is harder when we increment"},
{"lineNum":" 1512","line":"                // in both cases here"},
{"lineNum":" 1513","line":"                numTokens += 1;","class":"lineCov","hits":"2","order":"1387","possible_hits":"2",},
{"lineNum":" 1514","line":"            }"},
{"lineNum":" 1515","line":"            // skipping on `.` however just makes it so identifier is easier in the next switch"},
{"lineNum":" 1516","line":"        }"},
{"lineNum":" 1517","line":"        switch (startTok.kind) {","class":"linePartCov","hits":"1","order":"1388","possible_hits":"3",},
{"lineNum":" 1518","line":"            .LParen => {"},
{"lineNum":" 1519","line":"                // keep \"stack\" of paren count to find the last one"},
{"lineNum":" 1520","line":"                var count: u32 = 1;","class":"lineCov","hits":"1","order":"2321","possible_hits":"1",},
{"lineNum":" 1521","line":"                _ = try self.consumeToken();","class":"lineCov","hits":"1","order":"2322","possible_hits":"1",},
{"lineNum":" 1522","line":"                while (count != 0) {","class":"lineCov","hits":"1","order":"2323","possible_hits":"1",},
{"lineNum":" 1523","line":"                    numTokens += 1;","class":"linePartCov","hits":"1","order":"2324","possible_hits":"2",},
{"lineNum":" 1524","line":"                    const tok = try self.consumeToken();","class":"lineCov","hits":"1","order":"2325","possible_hits":"1",},
{"lineNum":" 1525","line":"                    if (tok.kind == .Eof) {","class":"lineCov","hits":"1","order":"2326","possible_hits":"1",},
{"lineNum":" 1526","line":"                        // TODO: handle"},
{"lineNum":" 1527","line":"                        return error.NotEnoughTokens;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1528","line":"                    }"},
{"lineNum":" 1529","line":"                    if (tok.kind == .LParen) {","class":"lineCov","hits":"1","order":"2327","possible_hits":"1",},
{"lineNum":" 1530","line":"                        count += 1;","class":"linePartCov","hits":"1","order":"2682","possible_hits":"2",},
{"lineNum":" 1531","line":"                    } else if (tok.kind == .RParen) {","class":"lineCov","hits":"1","order":"2328","possible_hits":"1",},
{"lineNum":" 1532","line":"                        count -= 1;","class":"lineCov","hits":"4","order":"2329","possible_hits":"4",},
{"lineNum":" 1533","line":"                    }"},
{"lineNum":" 1534","line":"                }"},
{"lineNum":" 1535","line":"                const final = self.tokens[self.pos - 1];","class":"linePartCov","hits":"2","order":"2330","possible_hits":"3",},
{"lineNum":" 1536","line":"                utils.assert(final.kind == .RParen, \"final token not RParen, is: {}\\n\", .{final});","class":"lineCov","hits":"1","order":"2331","possible_hits":"1",},
{"lineNum":" 1537","line":"            },"},
{"lineNum":" 1538","line":"            .KeywordNew => {"},
{"lineNum":" 1539","line":"                _ = try self.expectToken(.KeywordNew);","class":"lineCov","hits":"1","order":"2644","possible_hits":"1",},
{"lineNum":" 1540","line":"                // Note - leaving checking if the thing after new is right until it\'s parsed later..."},
{"lineNum":" 1541","line":"                // this is probably a badddd idea (malformed expressions like what! (with the lights on!!??))"},
{"lineNum":" 1542","line":"                // FIXME:"},
{"lineNum":" 1543","line":"                _ = try self.consumeToken();","class":"lineCov","hits":"1","order":"2645","possible_hits":"1",},
{"lineNum":" 1544","line":"                numTokens += 1;","class":"lineCov","hits":"1","order":"2646","possible_hits":"1",},
{"lineNum":" 1545","line":"                utils.assert(numTokens == 2, \"New token has more than 2 tokens\\n\", .{});","class":"lineCov","hits":"1","order":"2647","possible_hits":"1",},
{"lineNum":" 1546","line":"            },"},
{"lineNum":" 1547","line":"            .Dot => {"},
{"lineNum":" 1548","line":"                while ((try self.currentToken()).kind == .Dot) {","class":"linePartCov","hits":"1","order":"2656","possible_hits":"2",},
{"lineNum":" 1549","line":"                    _ = try self.consumeToken();","class":"linePartCov","hits":"1","order":"2657","possible_hits":"2",},
{"lineNum":" 1550","line":"                    try self.expectToken(.Identifier);","class":"lineCov","hits":"1","order":"2658","possible_hits":"1",},
{"lineNum":" 1551","line":"                    numTokens += 2;","class":"lineCov","hits":"4","order":"2659","possible_hits":"4",},
{"lineNum":" 1552","line":"                }"},
{"lineNum":" 1553","line":"            },"},
{"lineNum":" 1554","line":"            .Number, .KeywordTrue, .KeywordFalse, .KeywordNull, .Identifier => {"},
{"lineNum":" 1555","line":"                _ = try self.consumeToken();","class":"lineCov","hits":"1","order":"1389","possible_hits":"1",},
{"lineNum":" 1556","line":"            },"},
{"lineNum":" 1557","line":"            // TODO: handle error for invalid atom"},
{"lineNum":" 1558","line":"            else => {"},
{"lineNum":" 1559","line":"                log.err(\"Invalid atom\\nbre wth is this: {any}\", .{startTok});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1560","line":"                return error.InvalidToken;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1561","line":"            },"},
{"lineNum":" 1562","line":"        }"},
{"lineNum":" 1563","line":"        return ExprAtom{","class":"lineCov","hits":"2","order":"1390","possible_hits":"2",},
{"lineNum":" 1564","line":"            .start = tokenStartIndex,"},
{"lineNum":" 1565","line":"            .len = numTokens,"},
{"lineNum":" 1566","line":"        };"},
{"lineNum":" 1567","line":"    }"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"    // Selector = Factor (\".\" Identifier)*"},
{"lineNum":" 1570","line":"    pub fn parseSelector(self: *Parser) !usize {","class":"lineCov","hits":"1","order":"1458","possible_hits":"1",},
{"lineNum":" 1571","line":"        errdefer {"},
{"lineNum":" 1572","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1573","line":"                log.err(\"Error in parsing a Selector\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1574","line":"                log.err(\"Defined as: Selector = Factor (\\\".\\\" Identifier)*\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1575","line":"            }"},
{"lineNum":" 1576","line":"        }"},
{"lineNum":" 1577","line":"        // Init indexes"},
{"lineNum":" 1578","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1459","possible_hits":"3",},
{"lineNum":" 1579","line":"        const selectorIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1460","possible_hits":"4",},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"        // Expect Factor"},
{"lineNum":" 1582","line":"        const factorIndex = try self.parseFactor();","class":"linePartCov","hits":"2","order":"1461","possible_hits":"4",},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":"        const chainIndex = try self.parseSelectorChain();","class":"linePartCov","hits":"2","order":"1474","possible_hits":"4",},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1481","possible_hits":"1",},
{"lineNum":" 1587","line":"            .kind = NodeKind{ .Selector = .{ .factor = factorIndex, .chain = chainIndex } },"},
{"lineNum":" 1588","line":"            .token = tok,"},
{"lineNum":" 1589","line":"        };"},
{"lineNum":" 1590","line":"        try self.set(selectorIndex, node);","class":"lineCov","hits":"1","order":"1482","possible_hits":"1",},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"        return selectorIndex;","class":"lineCov","hits":"1","order":"1483","possible_hits":"1",},
{"lineNum":" 1593","line":"    }"},
{"lineNum":" 1594","line":""},
{"lineNum":" 1595","line":"    /// Parses a chain of selectors"},
{"lineNum":" 1596","line":"    /// `{ \".\" Identifier }*`"},
{"lineNum":" 1597","line":"    /// expects caller to parse first item in chain"},
{"lineNum":" 1598","line":"    /// i.e. Factor for `Selector` and `Identifier` for `LValue`"},
{"lineNum":" 1599","line":"    pub fn parseSelectorChain(self: *Parser) !?usize {","class":"lineCov","hits":"1","order":"1475","possible_hits":"1",},
{"lineNum":" 1600","line":"        var chainIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1476","possible_hits":"1",},
{"lineNum":" 1601","line":""},
{"lineNum":" 1602","line":"        var curChainIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1477","possible_hits":"1",},
{"lineNum":" 1603","line":""},
{"lineNum":" 1604","line":"        // Expect (\".\" Identifier)*"},
{"lineNum":" 1605","line":"        while ((try self.currentToken()).kind == TokenKind.Dot) {","class":"linePartCov","hits":"1","order":"1478","possible_hits":"2",},
{"lineNum":" 1606","line":"            const chainNodeIndex = try self.reserve();","class":"linePartCov","hits":"1","order":"2250","possible_hits":"2",},
{"lineNum":" 1607","line":"            if (chainIndex == null) {","class":"lineCov","hits":"1","order":"2251","possible_hits":"1",},
{"lineNum":" 1608","line":"                chainIndex = chainNodeIndex;","class":"lineCov","hits":"1","order":"2252","possible_hits":"1",},
{"lineNum":" 1609","line":"            }"},
{"lineNum":" 1610","line":"            // Expect ."},
{"lineNum":" 1611","line":"            const dotToken = try self.expectAndYeildToken(TokenKind.Dot);","class":"linePartCov","hits":"1","order":"2253","possible_hits":"2",},
{"lineNum":" 1612","line":"            // Expect Identifier"},
{"lineNum":" 1613","line":"            const identIndex = try self.astAppendNode(try self.expectIdentifier());","class":"lineCov","hits":"1","order":"2254","possible_hits":"1",},
{"lineNum":" 1614","line":"            const chainNode = Node{","class":"lineCov","hits":"1","order":"2255","possible_hits":"1",},
{"lineNum":" 1615","line":"                .kind = .{ .SelectorChain = .{ .ident = identIndex, .next = null } },"},
{"lineNum":" 1616","line":"                .token = dotToken,"},
{"lineNum":" 1617","line":"            };"},
{"lineNum":" 1618","line":"            try self.set(chainNodeIndex, chainNode);","class":"lineCov","hits":"1","order":"2256","possible_hits":"1",},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"            if (curChainIndex) |cci| {","class":"lineCov","hits":"2","order":"2257","possible_hits":"2",},
{"lineNum":" 1621","line":"                self.ast.items[cci].kind.SelectorChain.next = chainNodeIndex;","class":"lineCov","hits":"1","order":"2573","possible_hits":"1",},
{"lineNum":" 1622","line":"            }"},
{"lineNum":" 1623","line":"            curChainIndex = chainNodeIndex;","class":"lineCov","hits":"3","order":"1479","possible_hits":"3",},
{"lineNum":" 1624","line":"        }"},
{"lineNum":" 1625","line":"        return chainIndex;","class":"lineCov","hits":"1","order":"1480","possible_hits":"1",},
{"lineNum":" 1626","line":"    }"},
{"lineNum":" 1627","line":""},
{"lineNum":" 1628","line":"    // Factor = \"(\" Expression \")\" | Identifier (Arguments)? | Number | \"true\" | \"false\" | \"new\" Identifier | \"null\""},
{"lineNum":" 1629","line":"    pub fn parseFactor(self: *Parser) ParserError!usize {","class":"lineCov","hits":"1","order":"1462","possible_hits":"1",},
{"lineNum":" 1630","line":"        errdefer {"},
{"lineNum":" 1631","line":"            if (self.showParseTree) {","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 1632","line":"                log.err(\"Error in parsing a Factor\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 1633","line":"                log.err(\"Defined as: Factor = \\\"(\\\" Expression \\\")\\\" | Identifier (Arguments)? | Number | \\\"true\\\" | \\\"false\\\" | \\\"new\\\" Identifier | \\\"null\\\"\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 1634","line":"            }"},
{"lineNum":" 1635","line":"        }"},
{"lineNum":" 1636","line":"        // Init indexes"},
{"lineNum":" 1637","line":"        const tok = try self.currentToken();","class":"linePartCov","hits":"2","order":"1463","possible_hits":"3",},
{"lineNum":" 1638","line":"        var factorIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"1464","possible_hits":"4",},
{"lineNum":" 1639","line":"        var lhsIndex: ?usize = null;","class":"lineCov","hits":"1","order":"1465","possible_hits":"1",},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"        // FIXME: remove Factor node and just return `lhsIndex`, rhsIndex is never used"},
{"lineNum":" 1642","line":"        // We never iterate over a list of Factors like we do with Statements,"},
{"lineNum":" 1643","line":"        // so it is not necessary to have the top level node indicating the start of a new subtree"},
{"lineNum":" 1644","line":"        // as there is with statements"},
{"lineNum":" 1645","line":"        switch (tok.kind) {","class":"linePartCov","hits":"1","order":"1466","possible_hits":"3",},
{"lineNum":" 1646","line":"            TokenKind.LParen => {"},
{"lineNum":" 1647","line":"                // Expect ("},
{"lineNum":" 1648","line":"                try self.expectToken(TokenKind.LParen);","class":"linePartCov","hits":"1","order":"2332","possible_hits":"2",},
{"lineNum":" 1649","line":"                // Expect Expression"},
{"lineNum":" 1650","line":"                lhsIndex = try self.parseExpression();","class":"linePartCov","hits":"2","order":"2333","possible_hits":"4",},
{"lineNum":" 1651","line":"                // Expect )"},
{"lineNum":" 1652","line":"                try self.expectToken(TokenKind.RParen);","class":"lineCov","hits":"2","order":"2334","possible_hits":"2",},
{"lineNum":" 1653","line":"            },"},
{"lineNum":" 1654","line":"            TokenKind.Identifier => {"},
{"lineNum":" 1655","line":"                const peekTokenKind = (try self.peekToken()).kind;","class":"linePartCov","hits":"2","order":"2415","possible_hits":"3",},
{"lineNum":" 1656","line":"                if (peekTokenKind == .LParen) {","class":"lineCov","hits":"1","order":"2416","possible_hits":"1",},
{"lineNum":" 1657","line":"                    // function invocation"},
{"lineNum":" 1658","line":"                    // FIXME: this repeats the logic in `parseInvocation`"},
{"lineNum":" 1659","line":"                    // however, parseInvocation expects a trailing semicolon"},
{"lineNum":" 1660","line":"                    // should call parseInvocation here, and either expect the semicolon"},
{"lineNum":" 1661","line":"                    // in the other calling sites of parseInvocation, or have parseInvocation"},
{"lineNum":" 1662","line":"                    // take a parameter to indicate if it should expect a semicolon"},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"                    const invocIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2436","possible_hits":"4",},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"                    const ident = try self.expectIdentifier();","class":"linePartCov","hits":"2","order":"2437","possible_hits":"4",},
{"lineNum":" 1667","line":"                    const funcNameIndex = try self.astAppendNode(ident);","class":"linePartCov","hits":"2","order":"2438","possible_hits":"4",},
{"lineNum":" 1668","line":"                    const argsIndex = try self.parseArguments();","class":"linePartCov","hits":"2","order":"2439","possible_hits":"4",},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"                    const invocNode = Node{","class":"lineCov","hits":"1","order":"2440","possible_hits":"1",},
{"lineNum":" 1671","line":"                        .kind = .{ .Invocation = .{ .funcName = funcNameIndex, .args = argsIndex } },"},
{"lineNum":" 1672","line":"                        .token = tok,"},
{"lineNum":" 1673","line":"                    };"},
{"lineNum":" 1674","line":"                    try self.set(invocIndex, invocNode);","class":"lineCov","hits":"1","order":"2441","possible_hits":"1",},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"                    lhsIndex = invocIndex;","class":"lineCov","hits":"1","order":"2442","possible_hits":"1",},
{"lineNum":" 1677","line":"                } else {"},
{"lineNum":" 1678","line":"                    // Expect Identifier"},
{"lineNum":" 1679","line":"                    lhsIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"4","order":"2417","possible_hits":"6",},
{"lineNum":" 1680","line":"                }"},
{"lineNum":" 1681","line":"            },"},
{"lineNum":" 1682","line":"            // Theese could all be refactored into a helper function"},
{"lineNum":" 1683","line":"            // or just simplified ifykyk"},
{"lineNum":" 1684","line":"            // TODO: check that this works"},
{"lineNum":" 1685","line":"            TokenKind.Number => {"},
{"lineNum":" 1686","line":"                const numberToken = try self.expectAndYeildToken(TokenKind.Number);","class":"linePartCov","hits":"2","order":"1527","possible_hits":"3",},
{"lineNum":" 1687","line":"                const numberNode = Node{","class":"lineCov","hits":"1","order":"1528","possible_hits":"1",},
{"lineNum":" 1688","line":"                    .kind = .Number,"},
{"lineNum":" 1689","line":"                    .token = numberToken,"},
{"lineNum":" 1690","line":"                };"},
{"lineNum":" 1691","line":"                lhsIndex = try self.astAppendNode(numberNode);","class":"linePartCov","hits":"2","order":"1529","possible_hits":"3",},
{"lineNum":" 1692","line":"            },"},
{"lineNum":" 1693","line":"            TokenKind.KeywordTrue => {"},
{"lineNum":" 1694","line":"                const trueToken = try self.expectAndYeildToken(TokenKind.KeywordTrue);","class":"linePartCov","hits":"2","order":"1467","possible_hits":"3",},
{"lineNum":" 1695","line":"                const trueNode = Node{","class":"lineCov","hits":"1","order":"1468","possible_hits":"1",},
{"lineNum":" 1696","line":"                    .kind = .True,"},
{"lineNum":" 1697","line":"                    .token = trueToken,"},
{"lineNum":" 1698","line":"                };"},
{"lineNum":" 1699","line":"                lhsIndex = try self.astAppendNode(trueNode);","class":"linePartCov","hits":"2","order":"1469","possible_hits":"3",},
{"lineNum":" 1700","line":"            },"},
{"lineNum":" 1701","line":"            TokenKind.KeywordFalse => {"},
{"lineNum":" 1702","line":"                const falseToken = try self.expectAndYeildToken(TokenKind.KeywordFalse);","class":"linePartCov","hits":"2","order":"1684","possible_hits":"3",},
{"lineNum":" 1703","line":"                const falseNode = Node{","class":"lineCov","hits":"1","order":"1685","possible_hits":"1",},
{"lineNum":" 1704","line":"                    .kind = .False,"},
{"lineNum":" 1705","line":"                    .token = falseToken,"},
{"lineNum":" 1706","line":"                };"},
{"lineNum":" 1707","line":"                lhsIndex = try self.astAppendNode(falseNode);","class":"linePartCov","hits":"2","order":"1686","possible_hits":"3",},
{"lineNum":" 1708","line":"            },"},
{"lineNum":" 1709","line":"            TokenKind.KeywordNull => {"},
{"lineNum":" 1710","line":"                const nullToken = try self.expectAndYeildToken(TokenKind.KeywordNull);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1711","line":"                const nullNode = Node{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1712","line":"                    .kind = .Null,"},
{"lineNum":" 1713","line":"                    .token = nullToken,"},
{"lineNum":" 1714","line":"                };"},
{"lineNum":" 1715","line":"                lhsIndex = try self.astAppendNode(nullNode);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1716","line":"            },"},
{"lineNum":" 1717","line":"            TokenKind.KeywordNew => {"},
{"lineNum":" 1718","line":"                // Expect new"},
{"lineNum":" 1719","line":"                const newToken = try self.expectAndYeildToken(.KeywordNew);","class":"linePartCov","hits":"2","order":"2648","possible_hits":"3",},
{"lineNum":" 1720","line":"                const newIndex = try self.reserve();","class":"linePartCov","hits":"2","order":"2649","possible_hits":"4",},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"                // Expect Identifier"},
{"lineNum":" 1723","line":"                const identIndex = try self.astAppendNode(try self.expectIdentifier());","class":"linePartCov","hits":"3","order":"2650","possible_hits":"6",},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"                const newNode = Node{","class":"lineCov","hits":"1","order":"2651","possible_hits":"1",},
{"lineNum":" 1726","line":"                    .kind = .{ .New = .{ .ident = identIndex } },"},
{"lineNum":" 1727","line":"                    .token = newToken,"},
{"lineNum":" 1728","line":"                };"},
{"lineNum":" 1729","line":"                try self.set(newIndex, newNode);","class":"lineCov","hits":"1","order":"2652","possible_hits":"1",},
{"lineNum":" 1730","line":"                lhsIndex = newIndex;","class":"lineCov","hits":"1","order":"2653","possible_hits":"1",},
{"lineNum":" 1731","line":"            },"},
{"lineNum":" 1732","line":"            else => {"},
{"lineNum":" 1733","line":"                // TODO: make this error like the others"},
{"lineNum":" 1734","line":"                return error.InvalidToken;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1735","line":"            },"},
{"lineNum":" 1736","line":"        }"},
{"lineNum":" 1737","line":"        const node = Node{","class":"lineCov","hits":"1","order":"1470","possible_hits":"1",},
{"lineNum":" 1738","line":"            .kind = NodeKind{ .Factor = .{ .factor = lhsIndex.? } },","class":"lineCov","hits":"3","order":"1471","possible_hits":"3",},
{"lineNum":" 1739","line":"            .token = tok,"},
{"lineNum":" 1740","line":"        };"},
{"lineNum":" 1741","line":"        try self.set(factorIndex, node);","class":"lineCov","hits":"1","order":"1472","possible_hits":"1",},
{"lineNum":" 1742","line":"        return factorIndex;","class":"lineCov","hits":"1","order":"1473","possible_hits":"1",},
{"lineNum":" 1743","line":"    }"},
{"lineNum":" 1744","line":"};"},
{"lineNum":" 1745","line":""},
{"lineNum":" 1746","line":"pub fn main() !void {"},
{"lineNum":" 1747","line":"    const source = \"struct test{ int a; }; fun A() void{ int d;d=2+5;}\";"},
{"lineNum":" 1748","line":"    const tokens = try Lexer.tokenizeFromStr(source, std.heap.page_allocator);"},
{"lineNum":" 1749","line":"    const parser = try Parser.parseTokens(tokens, source, std.heap.page_allocator);"},
{"lineNum":" 1750","line":"    log.err(\"Parsed successfully\\n\", .{});"},
{"lineNum":" 1751","line":"    std.debug.print(\"haha penis\", .{});"},
{"lineNum":" 1752","line":"    try parser.prettyPrintAst();"},
{"lineNum":" 1753","line":"}"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1756","line":"//////// Tests"},
{"lineNum":" 1757","line":"//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"const debugAlloc = std.heap.page_allocator; //std.testing.allocator;"},
{"lineNum":" 1760","line":"const ting = std.testing;"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"// a helper for quickie testing (returns parser that hasn\'t had parseTokens called!)"},
{"lineNum":" 1763","line":"fn testMe(source: []const u8) !Parser {","class":"lineCov","hits":"1","order":"3380","possible_hits":"1",},
{"lineNum":" 1764","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3381","possible_hits":"1",},
{"lineNum":" 1765","line":"    const parser = try Parser.init(tokens, source, debugAlloc);","class":"lineCov","hits":"1","order":"3382","possible_hits":"1",},
{"lineNum":" 1766","line":"    return parser;","class":"lineCov","hits":"1","order":"3383","possible_hits":"1",},
{"lineNum":" 1767","line":"}"},
{"lineNum":" 1768","line":""},
{"lineNum":" 1769","line":"fn parseMe(source: []const u8) !Parser {","class":"lineCov","hits":"1","order":"3520","possible_hits":"1",},
{"lineNum":" 1770","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3521","possible_hits":"1",},
{"lineNum":" 1771","line":"    const parser = try Parser.parseTokens(tokens, source, debugAlloc);","class":"lineCov","hits":"1","order":"3522","possible_hits":"1",},
{"lineNum":" 1772","line":"    return parser;","class":"lineCov","hits":"1","order":"3523","possible_hits":"1",},
{"lineNum":" 1773","line":"}"},
{"lineNum":" 1774","line":""},
{"lineNum":" 1775","line":"test \"no_identifier_struct\" {","class":"lineCov","hits":"1","order":"3254","possible_hits":"1",},
{"lineNum":" 1776","line":"    const source = \"struct { int a; int b; struct TS S; };\";","class":"lineCov","hits":"1","order":"3255","possible_hits":"1",},
{"lineNum":" 1777","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3256","possible_hits":"1",},
{"lineNum":" 1778","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3257","possible_hits":"1",},
{"lineNum":" 1779","line":"}"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"test \"no_keyword_struct\" {","class":"lineCov","hits":"1","order":"3306","possible_hits":"1",},
{"lineNum":" 1782","line":"    const source = \"TS{ int a; int b; struct TS S; };\";","class":"lineCov","hits":"1","order":"3307","possible_hits":"1",},
{"lineNum":" 1783","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3308","possible_hits":"1",},
{"lineNum":" 1784","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3309","possible_hits":"1",},
{"lineNum":" 1785","line":"}"},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"test \"no_members_struct\" {","class":"lineCov","hits":"1","order":"3322","possible_hits":"1",},
{"lineNum":" 1788","line":"    const source = \"struct TS { };\";","class":"lineCov","hits":"1","order":"3323","possible_hits":"1",},
{"lineNum":" 1789","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3324","possible_hits":"1",},
{"lineNum":" 1790","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3325","possible_hits":"1",},
{"lineNum":" 1791","line":"}"},
{"lineNum":" 1792","line":""},
{"lineNum":" 1793","line":"test \"no_semicolon_struct_end\" {","class":"lineCov","hits":"1","order":"3335","possible_hits":"1",},
{"lineNum":" 1794","line":"    const source = \"struct TS { int a int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3336","possible_hits":"1",},
{"lineNum":" 1795","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3337","possible_hits":"1",},
{"lineNum":" 1796","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3338","possible_hits":"1",},
{"lineNum":" 1797","line":"}"},
{"lineNum":" 1798","line":""},
{"lineNum":" 1799","line":"test \"no_semicolon_struct_member\" {","class":"lineCov","hits":"1","order":"3339","possible_hits":"1",},
{"lineNum":" 1800","line":"    const source = \"struct TS { int a; int b; struct TS S };\";","class":"lineCov","hits":"1","order":"3340","possible_hits":"1",},
{"lineNum":" 1801","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3341","possible_hits":"1",},
{"lineNum":" 1802","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3342","possible_hits":"1",},
{"lineNum":" 1803","line":"}"},
{"lineNum":" 1804","line":""},
{"lineNum":" 1805","line":"test \"no_struct_function\" {","class":"lineCov","hits":"1","order":"3343","possible_hits":"1",},
{"lineNum":" 1806","line":"    const source = \"fun TS() void { int a; int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3344","possible_hits":"1",},
{"lineNum":" 1807","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3345","possible_hits":"1",},
{"lineNum":" 1808","line":"    var parser = try Parser.parseTokens(tokens, source, debugAlloc);","class":"lineCov","hits":"1","order":"3346","possible_hits":"1",},
{"lineNum":" 1809","line":"    parser.deinit();","class":"lineCov","hits":"1","order":"3347","possible_hits":"1",},
{"lineNum":" 1810","line":"}"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"test \"function_no_identifier\" {","class":"lineCov","hits":"1","order":"3348","possible_hits":"1",},
{"lineNum":" 1813","line":"    const source = \"fun () void { int a; int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3349","possible_hits":"1",},
{"lineNum":" 1814","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3350","possible_hits":"1",},
{"lineNum":" 1815","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3351","possible_hits":"1",},
{"lineNum":" 1816","line":"}"},
{"lineNum":" 1817","line":""},
{"lineNum":" 1818","line":"test \"function_no_parameters\" {","class":"lineCov","hits":"1","order":"3352","possible_hits":"1",},
{"lineNum":" 1819","line":"    const source = \"fun TS void { int a; int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3353","possible_hits":"1",},
{"lineNum":" 1820","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3354","possible_hits":"1",},
{"lineNum":" 1821","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3355","possible_hits":"1",},
{"lineNum":" 1822","line":"}"},
{"lineNum":" 1823","line":""},
{"lineNum":" 1824","line":"test \"function_no_return_type\" {","class":"lineCov","hits":"1","order":"3357","possible_hits":"1",},
{"lineNum":" 1825","line":"    const source = \"fun TS() { int a; int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3358","possible_hits":"1",},
{"lineNum":" 1826","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3359","possible_hits":"1",},
{"lineNum":" 1827","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3360","possible_hits":"1",},
{"lineNum":" 1828","line":"}"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"test \"function_no_lcurly\" {","class":"lineCov","hits":"1","order":"3362","possible_hits":"1",},
{"lineNum":" 1831","line":"    const source = \"fun TS() void int a; int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3363","possible_hits":"1",},
{"lineNum":" 1832","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3364","possible_hits":"1",},
{"lineNum":" 1833","line":"    try std.testing.expectError(error.InvalidToken, Parser.parseTokens(tokens, source, debugAlloc));","class":"lineCov","hits":"1","order":"3365","possible_hits":"1",},
{"lineNum":" 1834","line":"}"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"test \"program declarations indices null for no types\" {","class":"lineCov","hits":"1","order":"3366","possible_hits":"1",},
{"lineNum":" 1837","line":"    const source = \"fun TS() void { int a; int b; struct TS S; }\";","class":"lineCov","hits":"1","order":"3367","possible_hits":"1",},
{"lineNum":" 1838","line":"    const tokens = try Lexer.tokenizeFromStr(source, debugAlloc);","class":"lineCov","hits":"1","order":"3368","possible_hits":"1",},
{"lineNum":" 1839","line":"    const parser = try Parser.parseTokens(tokens, source, debugAlloc);","class":"lineCov","hits":"1","order":"3369","possible_hits":"1",},
{"lineNum":" 1840","line":"    switch (parser.ast.items[0].kind) {","class":"linePartCov","hits":"1","order":"3370","possible_hits":"3",},
{"lineNum":" 1841","line":"        .Program => |prog| {"},
{"lineNum":" 1842","line":"            const decls = parser.ast.items[prog.declarations].kind.ProgramDeclarations;","class":"lineCov","hits":"2","order":"3371","possible_hits":"2",},
{"lineNum":" 1843","line":"            try ting.expectEqual(decls.types, null);","class":"linePartCov","hits":"1","order":"3372","possible_hits":"2",},
{"lineNum":" 1844","line":"            try ting.expectEqual(decls.declarations, null);","class":"lineCov","hits":"1","order":"3376","possible_hits":"1",},
{"lineNum":" 1845","line":"        },"},
{"lineNum":" 1846","line":"        else => {"},
{"lineNum":" 1847","line":"            return error.Bre;","class":"linePartCov","hits":"1","order":"3377","possible_hits":"2",},
{"lineNum":" 1848","line":"        },"},
{"lineNum":" 1849","line":"    }"},
{"lineNum":" 1850","line":"}"},
{"lineNum":" 1851","line":""},
{"lineNum":" 1852","line":"test \"extractAtom.Num\" {","class":"lineCov","hits":"1","order":"3378","possible_hits":"1",},
{"lineNum":" 1853","line":"    var parser = try testMe(\"123\");","class":"lineCov","hits":"1","order":"3379","possible_hits":"1",},
{"lineNum":" 1854","line":"    const atom = try parser.extractAtom();","class":"lineCov","hits":"1","order":"3384","possible_hits":"1",},
{"lineNum":" 1855","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3385","possible_hits":"1",},
{"lineNum":" 1856","line":"    try ting.expectEqual(start, atom.start);","class":"lineCov","hits":"1","order":"3386","possible_hits":"1",},
{"lineNum":" 1857","line":"    const len: usize = 1;","class":"lineCov","hits":"1","order":"3387","possible_hits":"1",},
{"lineNum":" 1858","line":"    try ting.expectEqual(len, atom.len);","class":"lineCov","hits":"1","order":"3388","possible_hits":"1",},
{"lineNum":" 1859","line":"}"},
{"lineNum":" 1860","line":""},
{"lineNum":" 1861","line":"test \"extractAtom.simple_parenthized_expr\" {","class":"lineCov","hits":"1","order":"3389","possible_hits":"1",},
{"lineNum":" 1862","line":"    var parser = try testMe(\"(123)\");","class":"lineCov","hits":"1","order":"3390","possible_hits":"1",},
{"lineNum":" 1863","line":"    const atom = try parser.extractAtom();","class":"lineCov","hits":"1","order":"3391","possible_hits":"1",},
{"lineNum":" 1864","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3392","possible_hits":"1",},
{"lineNum":" 1865","line":"    try ting.expectEqual(start, atom.start);","class":"lineCov","hits":"1","order":"3393","possible_hits":"1",},
{"lineNum":" 1866","line":"    const len: usize = 3;","class":"lineCov","hits":"1","order":"3394","possible_hits":"1",},
{"lineNum":" 1867","line":"    try ting.expectEqual(len, atom.len);","class":"lineCov","hits":"1","order":"3395","possible_hits":"1",},
{"lineNum":" 1868","line":"}"},
{"lineNum":" 1869","line":""},
{"lineNum":" 1870","line":"test \"extractAtom.parenthized_expr\" {","class":"lineCov","hits":"1","order":"3396","possible_hits":"1",},
{"lineNum":" 1871","line":"    var parser = try testMe(\"(123, 456, blah, blah, blahbutfkncallbre(), blah, 789, fkncall())\");","class":"lineCov","hits":"1","order":"3397","possible_hits":"1",},
{"lineNum":" 1872","line":"    defer parser.deinit();","class":"linePartCov","hits":"1","order":"3404","possible_hits":"4",},
{"lineNum":" 1873","line":"    const atom = try parser.extractAtom();","class":"linePartCov","hits":"1","order":"3398","possible_hits":"2",},
{"lineNum":" 1874","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3399","possible_hits":"1",},
{"lineNum":" 1875","line":"    try ting.expectEqual(start, atom.start);","class":"linePartCov","hits":"1","order":"3400","possible_hits":"2",},
{"lineNum":" 1876","line":"    const len: usize = 21;","class":"lineCov","hits":"1","order":"3401","possible_hits":"1",},
{"lineNum":" 1877","line":"    const atomLen: usize = @intCast(atom.len);","class":"lineCov","hits":"1","order":"3402","possible_hits":"1",},
{"lineNum":" 1878","line":"    // note: -1 for ignoring EOF because nobody cares"},
{"lineNum":" 1879","line":"    try ting.expectEqual(len, atomLen);","class":"linePartCov","hits":"1","order":"3403","possible_hits":"2",},
{"lineNum":" 1880","line":"}"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"test \"extractAtom.selector\" {","class":"lineCov","hits":"1","order":"3405","possible_hits":"1",},
{"lineNum":" 1883","line":"    var parser = try testMe(\"foo.bar.baz.fooagain\");","class":"lineCov","hits":"1","order":"3406","possible_hits":"1",},
{"lineNum":" 1884","line":"    const atom = try parser.extractAtom();","class":"lineCov","hits":"1","order":"3407","possible_hits":"1",},
{"lineNum":" 1885","line":"    // log.err(\"ATOM: {any}\\n\", .{parser.tokens[atom.start..(atom.start + atom.len)]});"},
{"lineNum":" 1886","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3408","possible_hits":"1",},
{"lineNum":" 1887","line":"    const len: usize = 7;","class":"lineCov","hits":"1","order":"3409","possible_hits":"1",},
{"lineNum":" 1888","line":"    try ting.expectEqual(start, atom.start);","class":"lineCov","hits":"1","order":"3410","possible_hits":"1",},
{"lineNum":" 1889","line":"    try ting.expectEqual(len, atom.len);","class":"lineCov","hits":"1","order":"3411","possible_hits":"1",},
{"lineNum":" 1890","line":"}"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"fn expectAtomSliceTokenKinds(parser: *Parser, atom: Parser.ExprAtom, tokens: []const TokenKind) !void {","class":"lineCov","hits":"1","order":"3419","possible_hits":"1",},
{"lineNum":" 1893","line":"    const atomSlice = parser.tokens[atom.start..(atom.start + atom.len)];","class":"lineCov","hits":"2","order":"3420","possible_hits":"2",},
{"lineNum":" 1894","line":"    for (tokens, 0..) |token, i| {","class":"lineCov","hits":"3","order":"3421","possible_hits":"3",},
{"lineNum":" 1895","line":"        ting.expect(atomSlice.len > i) catch {","class":"lineCov","hits":"2","order":"3422","possible_hits":"2",},
{"lineNum":" 1896","line":"            log.err(\"Atom Slice Missing Tokens: {any}\\n\", .{tokens[i..]});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1897","line":"            return error.OutofBounds;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1898","line":"        };"},
{"lineNum":" 1899","line":"        ting.expectEqual(token, atomSlice[i].kind) catch {","class":"lineCov","hits":"2","order":"3423","possible_hits":"2",},
{"lineNum":" 1900","line":"            log.err(\"Token mismatch at {d}: \\nExpected: {}\\n Got: {}\\n\", .{ i, token, atomSlice[i].kind });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1901","line":"            return error.InvalidToken;","class":"linePartCov","hits":"4","order":"3424","possible_hits":"5",},
{"lineNum":" 1902","line":"        };"},
{"lineNum":" 1903","line":"    }"},
{"lineNum":" 1904","line":"}"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"test \"extractAtom.funcall\" {","class":"lineCov","hits":"1","order":"3412","possible_hits":"1",},
{"lineNum":" 1907","line":"    const source = \"foo(1, 2, 3)\";","class":"lineCov","hits":"1","order":"3413","possible_hits":"1",},
{"lineNum":" 1908","line":"    var parser = try testMe(source);","class":"lineCov","hits":"1","order":"3414","possible_hits":"1",},
{"lineNum":" 1909","line":"    const atom = try parser.extractAtom();","class":"lineCov","hits":"1","order":"3415","possible_hits":"1",},
{"lineNum":" 1910","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3416","possible_hits":"1",},
{"lineNum":" 1911","line":"    const len: usize = 8;","class":"lineCov","hits":"1","order":"3417","possible_hits":"1",},
{"lineNum":" 1912","line":"    const tokenKinds = [_]TokenKind{"},
{"lineNum":" 1913","line":"        .Identifier, .LParen, .Number, .Comma, .Number, .Comma, .Number, .RParen,"},
{"lineNum":" 1914","line":"    };"},
{"lineNum":" 1915","line":"    try expectAtomSliceTokenKinds(&parser, atom, &tokenKinds);","class":"lineCov","hits":"1","order":"3418","possible_hits":"1",},
{"lineNum":" 1916","line":"    try ting.expectEqual(start, atom.start);","class":"lineCov","hits":"1","order":"3425","possible_hits":"1",},
{"lineNum":" 1917","line":"    try ting.expectEqual(len, atom.len);","class":"lineCov","hits":"1","order":"3426","possible_hits":"1",},
{"lineNum":" 1918","line":"}"},
{"lineNum":" 1919","line":""},
{"lineNum":" 1920","line":"test \"extractAtom.new\" {","class":"lineCov","hits":"1","order":"3427","possible_hits":"1",},
{"lineNum":" 1921","line":"    const source = \"new foo\";","class":"lineCov","hits":"1","order":"3428","possible_hits":"1",},
{"lineNum":" 1922","line":"    var parser = try testMe(source);","class":"lineCov","hits":"1","order":"3429","possible_hits":"1",},
{"lineNum":" 1923","line":"    const atom = try parser.extractAtom();","class":"lineCov","hits":"1","order":"3430","possible_hits":"1",},
{"lineNum":" 1924","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3431","possible_hits":"1",},
{"lineNum":" 1925","line":"    const len: usize = 2;","class":"lineCov","hits":"1","order":"3432","possible_hits":"1",},
{"lineNum":" 1926","line":"    const tokenKinds = [_]TokenKind{ .KeywordNew, .Identifier };"},
{"lineNum":" 1927","line":"    try expectAtomSliceTokenKinds(&parser, atom, &tokenKinds);","class":"lineCov","hits":"1","order":"3433","possible_hits":"1",},
{"lineNum":" 1928","line":"    try ting.expectEqual(start, atom.start);","class":"lineCov","hits":"1","order":"3434","possible_hits":"1",},
{"lineNum":" 1929","line":"    try ting.expectEqual(len, atom.len);","class":"lineCov","hits":"1","order":"3435","possible_hits":"1",},
{"lineNum":" 1930","line":"}"},
{"lineNum":" 1931","line":""},
{"lineNum":" 1932","line":"test \"extractAtom.new_in_fkncall\" {","class":"lineCov","hits":"1","order":"3436","possible_hits":"1",},
{"lineNum":" 1933","line":"    const source = \"fkncall(new foo, 1)\";","class":"lineCov","hits":"1","order":"3437","possible_hits":"1",},
{"lineNum":" 1934","line":"    var parser = try testMe(source);","class":"lineCov","hits":"1","order":"3438","possible_hits":"1",},
{"lineNum":" 1935","line":"    const atom = try parser.extractAtom();","class":"lineCov","hits":"1","order":"3439","possible_hits":"1",},
{"lineNum":" 1936","line":"    const start: usize = 0;","class":"lineCov","hits":"1","order":"3440","possible_hits":"1",},
{"lineNum":" 1937","line":"    const len: usize = 7;","class":"lineCov","hits":"1","order":"3441","possible_hits":"1",},
{"lineNum":" 1938","line":"    const tokenKinds = [_]TokenKind{ .Identifier, .LParen, .KeywordNew, .Identifier, .Comma, .Number, .RParen };"},
{"lineNum":" 1939","line":"    try expectAtomSliceTokenKinds(&parser, atom, &tokenKinds);","class":"lineCov","hits":"1","order":"3442","possible_hits":"1",},
{"lineNum":" 1940","line":"    try ting.expectEqual(start, atom.start);","class":"lineCov","hits":"1","order":"3443","possible_hits":"1",},
{"lineNum":" 1941","line":"    try ting.expectEqual(len, atom.len);","class":"lineCov","hits":"1","order":"3444","possible_hits":"1",},
{"lineNum":" 1942","line":"}"},
{"lineNum":" 1943","line":""},
{"lineNum":" 1944","line":"test \"pratt.simple_pemdas\" {","class":"lineCov","hits":"1","order":"3445","possible_hits":"1",},
{"lineNum":" 1945","line":"    var parser = try testMe(\"1 + 2 * 3\");","class":"lineCov","hits":"1","order":"3446","possible_hits":"1",},
{"lineNum":" 1946","line":"    const expr = try parser.prattParseExpression(debugAlloc, 0);","class":"lineCov","hits":"1","order":"3447","possible_hits":"1",},
{"lineNum":" 1947","line":"    log.info(\"TREE: {}\\n\", .{expr.*});","class":"lineCov","hits":"1","order":"3449","possible_hits":"1",},
{"lineNum":" 1948","line":"    try ting.expectEqual(TokenKind.Plus, expr.*.Binop.op.kind);","class":"lineCov","hits":"1","order":"3450","possible_hits":"1",},
{"lineNum":" 1949","line":"    try ting.expect(expr.*.Binop.rhs.* == .Binop);","class":"lineCov","hits":"1","order":"3451","possible_hits":"1",},
{"lineNum":" 1950","line":"    try ting.expect(expr.*.Binop.lhs.* == .Atom);","class":"lineCov","hits":"1","order":"3452","possible_hits":"1",},
{"lineNum":" 1951","line":"    try ting.expectEqual(expr.*.Binop.lhs.*.Atom.len, 1);","class":"lineCov","hits":"1","order":"3453","possible_hits":"1",},
{"lineNum":" 1952","line":"    try ting.expectEqual(expr.*.Binop.rhs.*.Binop.op.kind, TokenKind.Mul);","class":"lineCov","hits":"1","order":"3454","possible_hits":"1",},
{"lineNum":" 1953","line":"    try ting.expectEqual(expr.*.Binop.rhs.*.Binop.lhs.*.Atom.start, 2);","class":"lineCov","hits":"1","order":"3455","possible_hits":"1",},
{"lineNum":" 1954","line":"    try ting.expectEqual(expr.*.Binop.rhs.*.Binop.lhs.*.Atom.len, 1);","class":"lineCov","hits":"1","order":"3456","possible_hits":"1",},
{"lineNum":" 1955","line":"    try ting.expectEqual(expr.*.Binop.rhs.*.Binop.rhs.*.Atom.start, 4);","class":"lineCov","hits":"1","order":"3457","possible_hits":"1",},
{"lineNum":" 1956","line":"    try ting.expectEqual(expr.*.Binop.rhs.*.Binop.rhs.*.Atom.len, 1);","class":"lineCov","hits":"1","order":"3458","possible_hits":"1",},
{"lineNum":" 1957","line":"}"},
{"lineNum":" 1958","line":""},
{"lineNum":" 1959","line":"// FIXME:"},
{"lineNum":" 1960","line":"test \"pratt.funcall\" {","class":"lineCov","hits":"1","order":"3459","possible_hits":"1",},
{"lineNum":" 1961","line":"    var parser = try testMe(\"foo(1, 2, 3)\");","class":"lineCov","hits":"1","order":"3460","possible_hits":"1",},
{"lineNum":" 1962","line":"    const expr = try parser.prattParseExpression(debugAlloc, 0);","class":"lineCov","hits":"1","order":"3461","possible_hits":"1",},
{"lineNum":" 1963","line":"    try ting.expect(expr.* == .Atom);","class":"lineCov","hits":"1","order":"3462","possible_hits":"1",},
{"lineNum":" 1964","line":"    try ting.expect(expr.*.Atom.start == 0);","class":"lineCov","hits":"1","order":"3463","possible_hits":"1",},
{"lineNum":" 1965","line":"    try ting.expect(expr.*.Atom.len == 8);","class":"lineCov","hits":"1","order":"3464","possible_hits":"1",},
{"lineNum":" 1966","line":"}"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"test \"parseArguments\" {","class":"lineCov","hits":"1","order":"3465","possible_hits":"1",},
{"lineNum":" 1969","line":"    const source = \"(new y, 2 + 2)\";","class":"lineCov","hits":"1","order":"3466","possible_hits":"1",},
{"lineNum":" 1970","line":"    var parser = try testMe(source);","class":"lineCov","hits":"1","order":"3467","possible_hits":"1",},
{"lineNum":" 1971","line":"    const argsIndex = try parser.parseArguments();","class":"lineCov","hits":"1","order":"3468","possible_hits":"1",},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"    try ting.expectEqual(argsIndex, 0);","class":"lineCov","hits":"1","order":"3469","possible_hits":"1",},
{"lineNum":" 1974","line":""},
{"lineNum":" 1975","line":"    const items = parser.ast.items;","class":"lineCov","hits":"1","order":"3473","possible_hits":"1",},
{"lineNum":" 1976","line":"    try ting.expect(items[0].kind == .Arguments);","class":"lineCov","hits":"1","order":"3474","possible_hits":"1",},
{"lineNum":" 1977","line":""},
{"lineNum":" 1978","line":"    // new y"},
{"lineNum":" 1979","line":"    try ting.expect(items[1].kind == .Expression);","class":"lineCov","hits":"1","order":"3475","possible_hits":"1",},
{"lineNum":" 1980","line":"    try ting.expect(items[2].kind == .Selector);","class":"lineCov","hits":"1","order":"3476","possible_hits":"1",},
{"lineNum":" 1981","line":"    try ting.expect(items[3].kind == .Factor);","class":"lineCov","hits":"1","order":"3477","possible_hits":"1",},
{"lineNum":" 1982","line":"    try ting.expect(items[4].kind == .New);","class":"lineCov","hits":"1","order":"3478","possible_hits":"1",},
{"lineNum":" 1983","line":"    try ting.expect(items[5].kind == .Identifier);","class":"lineCov","hits":"1","order":"3479","possible_hits":"1",},
{"lineNum":" 1984","line":"    try ting.expect(items[6].kind == .ArgumentEnd);","class":"lineCov","hits":"1","order":"3480","possible_hits":"1",},
{"lineNum":" 1985","line":""},
{"lineNum":" 1986","line":"    // 2 + 2"},
{"lineNum":" 1987","line":"    try ting.expect(items[7].kind == .Expression);","class":"lineCov","hits":"1","order":"3481","possible_hits":"1",},
{"lineNum":" 1988","line":"    try ting.expect(items[8].kind == .BinaryOperation);","class":"lineCov","hits":"1","order":"3482","possible_hits":"1",},
{"lineNum":" 1989","line":""},
{"lineNum":" 1990","line":"    // 2 +"},
{"lineNum":" 1991","line":"    try ting.expect(items[9].kind == .Selector);","class":"lineCov","hits":"1","order":"3483","possible_hits":"1",},
{"lineNum":" 1992","line":"    try ting.expect(items[10].kind == .Factor);","class":"lineCov","hits":"1","order":"3484","possible_hits":"1",},
{"lineNum":" 1993","line":"    try ting.expect(items[11].kind == .Number);","class":"lineCov","hits":"1","order":"3485","possible_hits":"1",},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"    // + 2"},
{"lineNum":" 1996","line":"    try ting.expect(items[12].kind == .Selector);","class":"lineCov","hits":"1","order":"3486","possible_hits":"1",},
{"lineNum":" 1997","line":"    try ting.expect(items[13].kind == .Factor);","class":"lineCov","hits":"1","order":"3487","possible_hits":"1",},
{"lineNum":" 1998","line":"    try ting.expect(items[14].kind == .Number);","class":"lineCov","hits":"1","order":"3488","possible_hits":"1",},
{"lineNum":" 1999","line":"    try ting.expect(items[15].kind == .ArgumentEnd);","class":"lineCov","hits":"1","order":"3489","possible_hits":"1",},
{"lineNum":" 2000","line":"}"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"// FIXME:"},
{"lineNum":" 2003","line":"test \"pratt.reconstruct.funcall\" {","class":"lineCov","hits":"1","order":"3490","possible_hits":"1",},
{"lineNum":" 2004","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2005","line":"    var parser = try testMe(\"1 + foo(x, new y, x + 1)\");","class":"linePartCov","hits":"1","order":"3491","possible_hits":"2",},
{"lineNum":" 2006","line":"    const expr = try parser.prattParseExpression(debugAlloc, 0);","class":"linePartCov","hits":"1","order":"3492","possible_hits":"2",},
{"lineNum":" 2007","line":"    const treeIndex = try parser.reconstructTree(expr);","class":"linePartCov","hits":"1","order":"3493","possible_hits":"2",},
{"lineNum":" 2008","line":"    log.info(\"TREE: {}\\n\", .{treeIndex});","class":"lineCov","hits":"1","order":"3494","possible_hits":"1",},
{"lineNum":" 2009","line":"    try parser.prettyPrintAst();","class":"lineCov","hits":"1","order":"3495","possible_hits":"1",},
{"lineNum":" 2010","line":"    const items = parser.ast.items;","class":"lineCov","hits":"1","order":"3508","possible_hits":"1",},
{"lineNum":" 2011","line":"    try ting.expect(items[0].kind == .BinaryOperation);","class":"linePartCov","hits":"1","order":"3509","possible_hits":"2",},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"    // WARN: I\'m going to remove this indirection... I just can\'t"},
{"lineNum":" 2014","line":"    // also going to make it so related nodes are never siblings and you can\'t stop me"},
{"lineNum":" 2015","line":"    // i.e. function is not [id, args] it is [func -> (id, args)]"},
{"lineNum":" 2016","line":"    try ting.expect(items[0].token.kind == .Plus);","class":"linePartCov","hits":"1","order":"3510","possible_hits":"2",},
{"lineNum":" 2017","line":"    try ting.expect(items[1].kind == .Selector);","class":"linePartCov","hits":"1","order":"3511","possible_hits":"2",},
{"lineNum":" 2018","line":"    try ting.expect(items[2].kind == .Factor);","class":"linePartCov","hits":"1","order":"3512","possible_hits":"2",},
{"lineNum":" 2019","line":"    try ting.expect(items[3].kind == .Number);","class":"linePartCov","hits":"1","order":"3513","possible_hits":"2",},
{"lineNum":" 2020","line":""},
{"lineNum":" 2021","line":"    try ting.expect(items[4].kind == .Selector);","class":"linePartCov","hits":"1","order":"3514","possible_hits":"2",},
{"lineNum":" 2022","line":"    try ting.expect(items[5].kind == .Factor);","class":"linePartCov","hits":"1","order":"3515","possible_hits":"2",},
{"lineNum":" 2023","line":"    try ting.expect(items[6].kind == .Invocation);","class":"linePartCov","hits":"1","order":"3516","possible_hits":"2",},
{"lineNum":" 2024","line":"    // TODO: ... finish"},
{"lineNum":" 2025","line":"}"},
{"lineNum":" 2026","line":""},
{"lineNum":" 2027","line":"/// The Enum of the NodeKind fields (no body required)"},
{"lineNum":" 2028","line":"const NodeKindTag = @typeInfo(NodeKind).Union.tag_type.?;"},
{"lineNum":" 2029","line":"// const NodeKindBody = @typeInfo(NodeKind).Union.body_type;"},
{"lineNum":" 2030","line":""},
{"lineNum":" 2031","line":"fn expectHasNodeWithKind(nodes: []const Node, kind: NodeKindTag) !Node {","class":"lineCov","hits":"1","order":"3526","possible_hits":"1",},
{"lineNum":" 2032","line":"    for (nodes) |node| {","class":"lineCov","hits":"3","order":"3527","possible_hits":"3",},
{"lineNum":" 2033","line":"        if (node.kind == kind) {","class":"lineCov","hits":"1","order":"3528","possible_hits":"1",},
{"lineNum":" 2034","line":"            return node;","class":"linePartCov","hits":"1","order":"3529","possible_hits":"2",},
{"lineNum":" 2035","line":"        }"},
{"lineNum":" 2036","line":"    }"},
{"lineNum":" 2037","line":"    log.err(\"Expected Node with Kind: {any}\\n\", .{kind});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2038","line":"    log.err(\"But Nodes were: {any}\\n\", .{nodes});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2039","line":"    return error.NotFound;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2040","line":"}"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"test \"fun.with_locals\" {","class":"lineCov","hits":"1","order":"3517","possible_hits":"1",},
{"lineNum":" 2043","line":"    const source = \"fun A() void { int d; d = 2 + 5; }\";","class":"lineCov","hits":"1","order":"3518","possible_hits":"1",},
{"lineNum":" 2044","line":"    const parser = try parseMe(source);","class":"lineCov","hits":"1","order":"3519","possible_hits":"1",},
{"lineNum":" 2045","line":"    const nodes = parser.ast.items;","class":"lineCov","hits":"1","order":"3524","possible_hits":"1",},
{"lineNum":" 2046","line":"    const funNode = try expectHasNodeWithKind(nodes, .Function);","class":"lineCov","hits":"1","order":"3525","possible_hits":"1",},
{"lineNum":" 2047","line":"    try ting.expect(nodes[funNode.kind.Function.proto].kind == .FunctionProto);","class":"lineCov","hits":"1","order":"3530","possible_hits":"1",},
{"lineNum":" 2048","line":"    // TODO: add more checks for function subtree structure"},
{"lineNum":" 2049","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 902, "covered" : 796,};
var merged_data = [];
