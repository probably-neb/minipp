var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const io = std.io;"},
{"lineNum":"    5","line":"const math = std.math;"},
{"lineNum":"    6","line":"const assert = std.debug.assert;"},
{"lineNum":"    7","line":"const mem = std.mem;"},
{"lineNum":"    8","line":"const unicode = std.unicode;"},
{"lineNum":"    9","line":"const meta = std.meta;"},
{"lineNum":"   10","line":"const errol = @import(\"fmt/errol.zig\");"},
{"lineNum":"   11","line":"const lossyCast = std.math.lossyCast;"},
{"lineNum":"   12","line":"const expectFmt = std.testing.expectFmt;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"pub const default_max_depth = 3;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"pub const Alignment = enum {"},
{"lineNum":"   17","line":"    left,"},
{"lineNum":"   18","line":"    center,"},
{"lineNum":"   19","line":"    right,"},
{"lineNum":"   20","line":"};"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"pub const FormatOptions = struct {"},
{"lineNum":"   23","line":"    precision: ?usize = null,"},
{"lineNum":"   24","line":"    width: ?usize = null,"},
{"lineNum":"   25","line":"    alignment: Alignment = .right,"},
{"lineNum":"   26","line":"    fill: u8 = \' \',"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"/// Renders fmt string with args, calling `writer` with slices of bytes."},
{"lineNum":"   30","line":"/// If `writer` returns an error, the error is returned from `format` and"},
{"lineNum":"   31","line":"/// `writer` is not called again."},
{"lineNum":"   32","line":"///"},
{"lineNum":"   33","line":"/// The format string must be comptime-known and may contain placeholders following"},
{"lineNum":"   34","line":"/// this format:"},
{"lineNum":"   35","line":"/// `{[argument][specifier]:[fill][alignment][width].[precision]}`"},
{"lineNum":"   36","line":"///"},
{"lineNum":"   37","line":"/// Above, each word including its surrounding [ and ] is a parameter which you have to replace with something:"},
{"lineNum":"   38","line":"///"},
{"lineNum":"   39","line":"/// - *argument* is either the numeric index or the field name of the argument that should be inserted"},
{"lineNum":"   40","line":"///   - when using a field name, you are required to enclose the field name (an identifier) in square"},
{"lineNum":"   41","line":"///     brackets, e.g. {[score]...} as opposed to the numeric index form which can be written e.g. {2...}"},
{"lineNum":"   42","line":"/// - *specifier* is a type-dependent formatting option that determines how a type should formatted (see below)"},
{"lineNum":"   43","line":"/// - *fill* is a single character which is used to pad the formatted text"},
{"lineNum":"   44","line":"/// - *alignment* is one of the three characters `<`, `^`, or `>` to make the text left-, center-, or right-aligned, respectively"},
{"lineNum":"   45","line":"/// - *width* is the total width of the field in characters"},
{"lineNum":"   46","line":"/// - *precision* specifies how many decimals a formatted number should have"},
{"lineNum":"   47","line":"///"},
{"lineNum":"   48","line":"/// Note that most of the parameters are optional and may be omitted. Also you can leave out separators like `:` and `.` when"},
{"lineNum":"   49","line":"/// all parameters after the separator are omitted."},
{"lineNum":"   50","line":"/// Only exception is the *fill* parameter. If *fill* is required, one has to specify *alignment* as well, as otherwise"},
{"lineNum":"   51","line":"/// the digits after `:` is interpreted as *width*, not *fill*."},
{"lineNum":"   52","line":"///"},
{"lineNum":"   53","line":"/// The *specifier* has several options for types:"},
{"lineNum":"   54","line":"/// - `x` and `X`: output numeric value in hexadecimal notation"},
{"lineNum":"   55","line":"/// - `s`:"},
{"lineNum":"   56","line":"///   - for pointer-to-many and C pointers of u8, print as a C-string using zero-termination"},
{"lineNum":"   57","line":"///   - for slices of u8, print the entire slice as a string without zero-termination"},
{"lineNum":"   58","line":"/// - `e`: output floating point value in scientific notation"},
{"lineNum":"   59","line":"/// - `d`: output numeric value in decimal notation"},
{"lineNum":"   60","line":"/// - `b`: output integer value in binary notation"},
{"lineNum":"   61","line":"/// - `o`: output integer value in octal notation"},
{"lineNum":"   62","line":"/// - `c`: output integer as an ASCII character. Integer type must have 8 bits at max."},
{"lineNum":"   63","line":"/// - `u`: output integer as an UTF-8 sequence. Integer type must have 21 bits at max."},
{"lineNum":"   64","line":"/// - `?`: output optional value as either the unwrapped value, or `null`; may be followed by a format specifier for the underlying value."},
{"lineNum":"   65","line":"/// - `!`: output error union value as either the unwrapped value, or the formatted error value; may be followed by a format specifier for the underlying value."},
{"lineNum":"   66","line":"/// - `*`: output the address of the value instead of the value itself."},
{"lineNum":"   67","line":"/// - `any`: output a value of any type using its default format."},
{"lineNum":"   68","line":"///"},
{"lineNum":"   69","line":"/// If a formatted user type contains a function of the type"},
{"lineNum":"   70","line":"/// ```"},
{"lineNum":"   71","line":"/// pub fn format(value: ?, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void"},
{"lineNum":"   72","line":"/// ```"},
{"lineNum":"   73","line":"/// with `?` being the type formatted, this function will be called instead of the default implementation."},
{"lineNum":"   74","line":"/// This allows user types to be formatted in a logical manner instead of dumping all fields of the type."},
{"lineNum":"   75","line":"///"},
{"lineNum":"   76","line":"/// A user type may be a `struct`, `vector`, `union` or `enum` type."},
{"lineNum":"   77","line":"///"},
{"lineNum":"   78","line":"/// To print literal curly braces, escape them by writing them twice, e.g. `{{` or `}}`."},
{"lineNum":"   79","line":"pub fn format("},
{"lineNum":"   80","line":"    writer: anytype,"},
{"lineNum":"   81","line":"    comptime fmt: []const u8,"},
{"lineNum":"   82","line":"    args: anytype,"},
{"lineNum":"   83","line":") !void {","class":"linePartCov","hits":"59","order":"609","possible_hits":"308",},
{"lineNum":"   84","line":"    const ArgsType = @TypeOf(args);"},
{"lineNum":"   85","line":"    const args_type_info = @typeInfo(ArgsType);"},
{"lineNum":"   86","line":"    if (args_type_info != .Struct) {"},
{"lineNum":"   87","line":"        @compileError(\"expected tuple or struct argument, found \" ++ @typeName(ArgsType));"},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    const fields_info = args_type_info.Struct.fields;"},
{"lineNum":"   91","line":"    if (fields_info.len > max_format_args) {"},
{"lineNum":"   92","line":"        @compileError(\"32 arguments max are supported per format call\");"},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    @setEvalBranchQuota(2000000);"},
{"lineNum":"   96","line":"    comptime var arg_state: ArgState = .{ .args_len = fields_info.len };"},
{"lineNum":"   97","line":"    comptime var i = 0;"},
{"lineNum":"   98","line":"    inline while (i < fmt.len) {"},
{"lineNum":"   99","line":"        const start_index = i;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        inline while (i < fmt.len) : (i += 1) {"},
{"lineNum":"  102","line":"            switch (fmt[i]) {"},
{"lineNum":"  103","line":"                \'{\', \'}\' => break,"},
{"lineNum":"  104","line":"                else => {},"},
{"lineNum":"  105","line":"            }"},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        comptime var end_index = i;"},
{"lineNum":"  109","line":"        comptime var unescape_brace = false;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"        // Handle {{ and }}, those are un-escaped as single braces"},
{"lineNum":"  112","line":"        if (i + 1 < fmt.len and fmt[i + 1] == fmt[i]) {"},
{"lineNum":"  113","line":"            unescape_brace = true;"},
{"lineNum":"  114","line":"            // Make the first brace part of the literal..."},
{"lineNum":"  115","line":"            end_index += 1;"},
{"lineNum":"  116","line":"            // ...and skip both"},
{"lineNum":"  117","line":"            i += 2;"},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        // Write out the literal"},
{"lineNum":"  121","line":"        if (start_index != end_index) {"},
{"lineNum":"  122","line":"            try writer.writeAll(fmt[start_index..end_index]);","class":"linePartCov","hits":"113","order":"646","possible_hits":"519",},
{"lineNum":"  123","line":"        }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        // We\'ve already skipped the other brace, restart the loop"},
{"lineNum":"  126","line":"        if (unescape_brace) continue;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"        if (i >= fmt.len) break;"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        if (fmt[i] == \'}\') {"},
{"lineNum":"  131","line":"            @compileError(\"missing opening {\");"},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        // Get past the {"},
{"lineNum":"  135","line":"        comptime assert(fmt[i] == \'{\');"},
{"lineNum":"  136","line":"        i += 1;"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        const fmt_begin = i;"},
{"lineNum":"  139","line":"        // Find the closing brace"},
{"lineNum":"  140","line":"        inline while (i < fmt.len and fmt[i] != \'}\') : (i += 1) {}"},
{"lineNum":"  141","line":"        const fmt_end = i;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        if (i >= fmt.len) {"},
{"lineNum":"  144","line":"            @compileError(\"missing closing }\");"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        // Get past the }"},
{"lineNum":"  148","line":"        comptime assert(fmt[i] == \'}\');"},
{"lineNum":"  149","line":"        i += 1;"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        const placeholder = comptime Placeholder.parse(fmt[fmt_begin..fmt_end].*);"},
{"lineNum":"  152","line":"        const arg_pos = comptime switch (placeholder.arg) {"},
{"lineNum":"  153","line":"            .none => null,"},
{"lineNum":"  154","line":"            .number => |pos| pos,"},
{"lineNum":"  155","line":"            .named => |arg_name| meta.fieldIndex(ArgsType, arg_name) orelse"},
{"lineNum":"  156","line":"                @compileError(\"no argument with name \'\" ++ arg_name ++ \"\'\"),"},
{"lineNum":"  157","line":"        };"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"        const width = switch (placeholder.width) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"            .none => null,"},
{"lineNum":"  161","line":"            .number => |v| v,"},
{"lineNum":"  162","line":"            .named => |arg_name| blk: {"},
{"lineNum":"  163","line":"                const arg_i = comptime meta.fieldIndex(ArgsType, arg_name) orelse"},
{"lineNum":"  164","line":"                    @compileError(\"no argument with name \'\" ++ arg_name ++ \"\'\");"},
{"lineNum":"  165","line":"                _ = comptime arg_state.nextArg(arg_i) orelse @compileError(\"too few arguments\");"},
{"lineNum":"  166","line":"                break :blk @field(args, arg_name);"},
{"lineNum":"  167","line":"            },"},
{"lineNum":"  168","line":"        };"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"        const precision = switch (placeholder.precision) {"},
{"lineNum":"  171","line":"            .none => null,"},
{"lineNum":"  172","line":"            .number => |v| v,"},
{"lineNum":"  173","line":"            .named => |arg_name| blk: {"},
{"lineNum":"  174","line":"                const arg_i = comptime meta.fieldIndex(ArgsType, arg_name) orelse"},
{"lineNum":"  175","line":"                    @compileError(\"no argument with name \'\" ++ arg_name ++ \"\'\");"},
{"lineNum":"  176","line":"                _ = comptime arg_state.nextArg(arg_i) orelse @compileError(\"too few arguments\");"},
{"lineNum":"  177","line":"                break :blk @field(args, arg_name);"},
{"lineNum":"  178","line":"            },"},
{"lineNum":"  179","line":"        };"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse","class":"linePartCov","hits":"64","order":"610","possible_hits":"251",},
{"lineNum":"  182","line":"            @compileError(\"too few arguments\");"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        try formatType(","class":"linePartCov","hits":"64","order":"611","possible_hits":"251",},
{"lineNum":"  185","line":"            @field(args, fields_info[arg_to_print].name),"},
{"lineNum":"  186","line":"            placeholder.specifier_arg,"},
{"lineNum":"  187","line":"            FormatOptions{"},
{"lineNum":"  188","line":"                .fill = placeholder.fill,"},
{"lineNum":"  189","line":"                .alignment = placeholder.alignment,"},
{"lineNum":"  190","line":"                .width = width,"},
{"lineNum":"  191","line":"                .precision = precision,"},
{"lineNum":"  192","line":"            },"},
{"lineNum":"  193","line":"            writer,"},
{"lineNum":"  194","line":"            std.options.fmt_max_depth,"},
{"lineNum":"  195","line":"        );"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    if (comptime arg_state.hasUnusedArgs()) {","class":"linePartCov","hits":"59","order":"635","possible_hits":"308",},
{"lineNum":"  199","line":"        const missing_count = arg_state.args_len - @popCount(arg_state.used_args);"},
{"lineNum":"  200","line":"        switch (missing_count) {"},
{"lineNum":"  201","line":"            0 => unreachable,"},
{"lineNum":"  202","line":"            1 => @compileError(\"unused argument in \'\" ++ fmt ++ \"\'\"),"},
{"lineNum":"  203","line":"            else => @compileError(comptimePrint(\"{d}\", .{missing_count}) ++ \" unused arguments in \'\" ++ fmt ++ \"\'\"),"},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":"}"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"fn cacheString(str: anytype) []const u8 {"},
{"lineNum":"  209","line":"    return &str;"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"pub const Placeholder = struct {"},
{"lineNum":"  213","line":"    specifier_arg: []const u8,"},
{"lineNum":"  214","line":"    fill: u8,"},
{"lineNum":"  215","line":"    alignment: Alignment,"},
{"lineNum":"  216","line":"    arg: Specifier,"},
{"lineNum":"  217","line":"    width: Specifier,"},
{"lineNum":"  218","line":"    precision: Specifier,"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    pub fn parse(comptime str: anytype) Placeholder {"},
{"lineNum":"  221","line":"        comptime var parser = Parser{ .buf = &str };"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        // Parse the positional argument number"},
{"lineNum":"  224","line":"        const arg = comptime parser.specifier() catch |err|"},
{"lineNum":"  225","line":"            @compileError(@errorName(err));"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        // Parse the format specifier"},
{"lineNum":"  228","line":"        const specifier_arg = comptime parser.until(\':\');"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        // Skip the colon, if present"},
{"lineNum":"  231","line":"        if (comptime parser.char()) |ch| {"},
{"lineNum":"  232","line":"            if (ch != \':\') {"},
{"lineNum":"  233","line":"                @compileError(\"expected : or }, found \'\" ++ [1]u8{ch} ++ \"\'\");"},
{"lineNum":"  234","line":"            }"},
{"lineNum":"  235","line":"        }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        // Parse the fill character"},
{"lineNum":"  238","line":"        // The fill parameter requires the alignment parameter to be specified"},
{"lineNum":"  239","line":"        // too"},
{"lineNum":"  240","line":"        const fill = comptime if (parser.peek(1)) |ch|"},
{"lineNum":"  241","line":"            switch (ch) {"},
{"lineNum":"  242","line":"                \'<\', \'^\', \'>\' => parser.char().?,"},
{"lineNum":"  243","line":"                else => \' \',"},
{"lineNum":"  244","line":"            }"},
{"lineNum":"  245","line":"        else"},
{"lineNum":"  246","line":"            \' \';"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        // Parse the alignment parameter"},
{"lineNum":"  249","line":"        const alignment: Alignment = comptime if (parser.peek(0)) |ch| init: {"},
{"lineNum":"  250","line":"            switch (ch) {"},
{"lineNum":"  251","line":"                \'<\', \'^\', \'>\' => _ = parser.char(),"},
{"lineNum":"  252","line":"                else => {},"},
{"lineNum":"  253","line":"            }"},
{"lineNum":"  254","line":"            break :init switch (ch) {"},
{"lineNum":"  255","line":"                \'<\' => .left,"},
{"lineNum":"  256","line":"                \'^\' => .center,"},
{"lineNum":"  257","line":"                else => .right,"},
{"lineNum":"  258","line":"            };"},
{"lineNum":"  259","line":"        } else .right;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        // Parse the width parameter"},
{"lineNum":"  262","line":"        const width = comptime parser.specifier() catch |err|"},
{"lineNum":"  263","line":"            @compileError(@errorName(err));"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"        // Skip the dot, if present"},
{"lineNum":"  266","line":"        if (comptime parser.char()) |ch| {"},
{"lineNum":"  267","line":"            if (ch != \'.\') {"},
{"lineNum":"  268","line":"                @compileError(\"expected . or }, found \'\" ++ [1]u8{ch} ++ \"\'\");"},
{"lineNum":"  269","line":"            }"},
{"lineNum":"  270","line":"        }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        // Parse the precision parameter"},
{"lineNum":"  273","line":"        const precision = comptime parser.specifier() catch |err|"},
{"lineNum":"  274","line":"            @compileError(@errorName(err));"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        if (comptime parser.char()) |ch| {"},
{"lineNum":"  277","line":"            @compileError(\"extraneous trailing character \'\" ++ [1]u8{ch} ++ \"\'\");"},
{"lineNum":"  278","line":"        }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"        return Placeholder{"},
{"lineNum":"  281","line":"            .specifier_arg = cacheString(specifier_arg[0..specifier_arg.len].*),"},
{"lineNum":"  282","line":"            .fill = fill,"},
{"lineNum":"  283","line":"            .alignment = alignment,"},
{"lineNum":"  284","line":"            .arg = arg,"},
{"lineNum":"  285","line":"            .width = width,"},
{"lineNum":"  286","line":"            .precision = precision,"},
{"lineNum":"  287","line":"        };"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":"};"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"pub const Specifier = union(enum) {"},
{"lineNum":"  292","line":"    none,"},
{"lineNum":"  293","line":"    number: usize,"},
{"lineNum":"  294","line":"    named: []const u8,"},
{"lineNum":"  295","line":"};"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"pub const Parser = struct {"},
{"lineNum":"  298","line":"    buf: []const u8,"},
{"lineNum":"  299","line":"    pos: usize = 0,"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    // Returns a decimal number or null if the current character is not a"},
{"lineNum":"  302","line":"    // digit"},
{"lineNum":"  303","line":"    pub fn number(self: *@This()) ?usize {"},
{"lineNum":"  304","line":"        var r: ?usize = null;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        while (self.pos < self.buf.len) : (self.pos += 1) {"},
{"lineNum":"  307","line":"            switch (self.buf[self.pos]) {"},
{"lineNum":"  308","line":"                \'0\'...\'9\' => {"},
{"lineNum":"  309","line":"                    if (r == null) r = 0;"},
{"lineNum":"  310","line":"                    r.? *= 10;"},
{"lineNum":"  311","line":"                    r.? += self.buf[self.pos] - \'0\';"},
{"lineNum":"  312","line":"                },"},
{"lineNum":"  313","line":"                else => break,"},
{"lineNum":"  314","line":"            }"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"        return r;"},
{"lineNum":"  318","line":"    }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    // Returns a substring of the input starting from the current position"},
{"lineNum":"  321","line":"    // and ending where `ch` is found or until the end if not found"},
{"lineNum":"  322","line":"    pub fn until(self: *@This(), ch: u8) []const u8 {"},
{"lineNum":"  323","line":"        const start = self.pos;"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"        if (start >= self.buf.len)"},
{"lineNum":"  326","line":"            return &[_]u8{};"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"        while (self.pos < self.buf.len) : (self.pos += 1) {"},
{"lineNum":"  329","line":"            if (self.buf[self.pos] == ch) break;"},
{"lineNum":"  330","line":"        }"},
{"lineNum":"  331","line":"        return self.buf[start..self.pos];"},
{"lineNum":"  332","line":"    }"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    // Returns one character, if available"},
{"lineNum":"  335","line":"    pub fn char(self: *@This()) ?u8 {"},
{"lineNum":"  336","line":"        if (self.pos < self.buf.len) {"},
{"lineNum":"  337","line":"            const ch = self.buf[self.pos];"},
{"lineNum":"  338","line":"            self.pos += 1;"},
{"lineNum":"  339","line":"            return ch;"},
{"lineNum":"  340","line":"        }"},
{"lineNum":"  341","line":"        return null;"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    pub fn maybe(self: *@This(), val: u8) bool {"},
{"lineNum":"  345","line":"        if (self.pos < self.buf.len and self.buf[self.pos] == val) {"},
{"lineNum":"  346","line":"            self.pos += 1;"},
{"lineNum":"  347","line":"            return true;"},
{"lineNum":"  348","line":"        }"},
{"lineNum":"  349","line":"        return false;"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    // Returns a decimal number or null if the current character is not a"},
{"lineNum":"  353","line":"    // digit"},
{"lineNum":"  354","line":"    pub fn specifier(self: *@This()) !Specifier {"},
{"lineNum":"  355","line":"        if (self.maybe(\'[\')) {"},
{"lineNum":"  356","line":"            const arg_name = self.until(\']\');"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"            if (!self.maybe(\']\'))"},
{"lineNum":"  359","line":"                return @field(anyerror, \"Expected closing ]\");"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"            return Specifier{ .named = arg_name };"},
{"lineNum":"  362","line":"        }"},
{"lineNum":"  363","line":"        if (self.number()) |i|"},
{"lineNum":"  364","line":"            return Specifier{ .number = i };"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"        return Specifier{ .none = {} };"},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    // Returns the n-th next character or null if that\'s past the end"},
{"lineNum":"  370","line":"    pub fn peek(self: *@This(), n: usize) ?u8 {"},
{"lineNum":"  371","line":"        return if (self.pos + n < self.buf.len) self.buf[self.pos + n] else null;"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":"};"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"pub const ArgSetType = u32;"},
{"lineNum":"  376","line":"const max_format_args = @typeInfo(ArgSetType).Int.bits;"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"pub const ArgState = struct {"},
{"lineNum":"  379","line":"    next_arg: usize = 0,"},
{"lineNum":"  380","line":"    used_args: ArgSetType = 0,"},
{"lineNum":"  381","line":"    args_len: usize,"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    pub fn hasUnusedArgs(self: *@This()) bool {"},
{"lineNum":"  384","line":"        return @popCount(self.used_args) != self.args_len;"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    pub fn nextArg(self: *@This(), arg_index: ?usize) ?usize {"},
{"lineNum":"  388","line":"        const next_index = arg_index orelse init: {"},
{"lineNum":"  389","line":"            const arg = self.next_arg;"},
{"lineNum":"  390","line":"            self.next_arg += 1;"},
{"lineNum":"  391","line":"            break :init arg;"},
{"lineNum":"  392","line":"        };"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"        if (next_index >= self.args_len) {"},
{"lineNum":"  395","line":"            return null;"},
{"lineNum":"  396","line":"        }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"        // Mark this argument as used"},
{"lineNum":"  399","line":"        self.used_args |= @as(ArgSetType, 1) << @as(u5, @intCast(next_index));"},
{"lineNum":"  400","line":"        return next_index;"},
{"lineNum":"  401","line":"    }"},
{"lineNum":"  402","line":"};"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"pub fn formatAddress(value: anytype, options: FormatOptions, writer: anytype) @TypeOf(writer).Error!void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"    _ = options;"},
{"lineNum":"  406","line":"    const T = @TypeOf(value);"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  409","line":"        .Pointer => |info| {"},
{"lineNum":"  410","line":"            try writer.writeAll(@typeName(info.child) ++ \"@\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  411","line":"            if (info.size == .Slice)"},
{"lineNum":"  412","line":"                try formatInt(@intFromPtr(value.ptr), 16, .lower, FormatOptions{}, writer)"},
{"lineNum":"  413","line":"            else"},
{"lineNum":"  414","line":"                try formatInt(@intFromPtr(value), 16, .lower, FormatOptions{}, writer);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  415","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  416","line":"        },"},
{"lineNum":"  417","line":"        .Optional => |info| {"},
{"lineNum":"  418","line":"            if (@typeInfo(info.child) == .Pointer) {"},
{"lineNum":"  419","line":"                try writer.writeAll(@typeName(info.child) ++ \"@\");"},
{"lineNum":"  420","line":"                try formatInt(@intFromPtr(value), 16, .lower, FormatOptions{}, writer);"},
{"lineNum":"  421","line":"                return;"},
{"lineNum":"  422","line":"            }"},
{"lineNum":"  423","line":"        },"},
{"lineNum":"  424","line":"        else => {},"},
{"lineNum":"  425","line":"    }"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"    @compileError(\"cannot format non-pointer type \" ++ @typeName(T) ++ \" with * specifier\");"},
{"lineNum":"  428","line":"}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"// This ANY const is a workaround for: https://github.com/ziglang/zig/issues/7948"},
{"lineNum":"  431","line":"const ANY = \"any\";"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"pub fn defaultSpec(comptime T: type) [:0]const u8 {"},
{"lineNum":"  434","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  435","line":"        .Array => |_| return ANY,"},
{"lineNum":"  436","line":"        .Pointer => |ptr_info| switch (ptr_info.size) {"},
{"lineNum":"  437","line":"            .One => switch (@typeInfo(ptr_info.child)) {"},
{"lineNum":"  438","line":"                .Array => |_| return \"*\","},
{"lineNum":"  439","line":"                else => {},"},
{"lineNum":"  440","line":"            },"},
{"lineNum":"  441","line":"            .Many, .C => return \"*\","},
{"lineNum":"  442","line":"            .Slice => return ANY,"},
{"lineNum":"  443","line":"        },"},
{"lineNum":"  444","line":"        .Optional => |info| return \"?\" ++ defaultSpec(info.child),"},
{"lineNum":"  445","line":"        .ErrorUnion => |info| return \"!\" ++ defaultSpec(info.payload),"},
{"lineNum":"  446","line":"        else => {},"},
{"lineNum":"  447","line":"    }"},
{"lineNum":"  448","line":"    return \"\";"},
{"lineNum":"  449","line":"}"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"fn stripOptionalOrErrorUnionSpec(comptime fmt: []const u8) []const u8 {"},
{"lineNum":"  452","line":"    return if (std.mem.eql(u8, fmt[1..], ANY))"},
{"lineNum":"  453","line":"        ANY"},
{"lineNum":"  454","line":"    else"},
{"lineNum":"  455","line":"        fmt[1..];"},
{"lineNum":"  456","line":"}"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"pub fn invalidFmtError(comptime fmt: []const u8, value: anytype) void {"},
{"lineNum":"  459","line":"    @compileError(\"invalid format string \'\" ++ fmt ++ \"\' for type \'\" ++ @typeName(@TypeOf(value)) ++ \"\'\");"},
{"lineNum":"  460","line":"}"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"pub fn formatType("},
{"lineNum":"  463","line":"    value: anytype,"},
{"lineNum":"  464","line":"    comptime fmt: []const u8,"},
{"lineNum":"  465","line":"    options: FormatOptions,"},
{"lineNum":"  466","line":"    writer: anytype,"},
{"lineNum":"  467","line":"    max_depth: usize,"},
{"lineNum":"  468","line":") @TypeOf(writer).Error!void {","class":"linePartCov","hits":"59","order":"612","possible_hits":"249",},
{"lineNum":"  469","line":"    const T = @TypeOf(value);"},
{"lineNum":"  470","line":"    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))","class":"linePartCov","hits":"59","order":"613","possible_hits":"249",},
{"lineNum":"  471","line":"        defaultSpec(@TypeOf(value))"},
{"lineNum":"  472","line":"    else if (fmt.len != 0 and (fmt[0] == \'?\' or fmt[0] == \'!\')) switch (@typeInfo(T)) {"},
{"lineNum":"  473","line":"        .Optional, .ErrorUnion => fmt,"},
{"lineNum":"  474","line":"        else => stripOptionalOrErrorUnionSpec(fmt),"},
{"lineNum":"  475","line":"    } else fmt;"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    if (comptime std.mem.eql(u8, actual_fmt, \"*\")) {"},
{"lineNum":"  478","line":"        return formatAddress(value, options, writer);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  479","line":"    }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    if (comptime std.meta.trait.hasFn(\"format\")(T)) {"},
{"lineNum":"  482","line":"        return try value.format(actual_fmt, options, writer);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  483","line":"    }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  486","line":"        .ComptimeInt, .Int, .ComptimeFloat, .Float => {"},
{"lineNum":"  487","line":"            return formatValue(value, actual_fmt, options, writer);","class":"linePartCov","hits":"18","order":"648","possible_hits":"34",},
{"lineNum":"  488","line":"        },"},
{"lineNum":"  489","line":"        .Void => {"},
{"lineNum":"  490","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  491","line":"            return formatBuf(\"void\", options, writer);","class":"linePartCov","hits":"1","order":"1982","possible_hits":"4",},
{"lineNum":"  492","line":"        },"},
{"lineNum":"  493","line":"        .Bool => {"},
{"lineNum":"  494","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  495","line":"            return formatBuf(if (value) \"true\" else \"false\", options, writer);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  496","line":"        },"},
{"lineNum":"  497","line":"        .Optional => {"},
{"lineNum":"  498","line":"            if (actual_fmt.len == 0 or actual_fmt[0] != \'?\')"},
{"lineNum":"  499","line":"                @compileError(\"cannot format optional without a specifier (i.e. {?} or {any})\");"},
{"lineNum":"  500","line":"            const remaining_fmt = comptime stripOptionalOrErrorUnionSpec(actual_fmt);","class":"linePartCov","hits":"4","order":"1596","possible_hits":"7",},
{"lineNum":"  501","line":"            if (value) |payload| {","class":"linePartCov","hits":"4","order":"1597","possible_hits":"7",},
{"lineNum":"  502","line":"                return formatType(payload, remaining_fmt, options, writer, max_depth);","class":"linePartCov","hits":"7","order":"1598","possible_hits":"13",},
{"lineNum":"  503","line":"            } else {"},
{"lineNum":"  504","line":"                return formatBuf(\"null\", options, writer);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  505","line":"            }"},
{"lineNum":"  506","line":"        },"},
{"lineNum":"  507","line":"        .ErrorUnion => {"},
{"lineNum":"  508","line":"            if (actual_fmt.len == 0 or actual_fmt[0] != \'!\')"},
{"lineNum":"  509","line":"                @compileError(\"cannot format error union without a specifier (i.e. {!} or {any})\");"},
{"lineNum":"  510","line":"            const remaining_fmt = comptime stripOptionalOrErrorUnionSpec(actual_fmt);"},
{"lineNum":"  511","line":"            if (value) |payload| {"},
{"lineNum":"  512","line":"                return formatType(payload, remaining_fmt, options, writer, max_depth);"},
{"lineNum":"  513","line":"            } else |err| {"},
{"lineNum":"  514","line":"                return formatType(err, \"\", options, writer, max_depth);"},
{"lineNum":"  515","line":"            }"},
{"lineNum":"  516","line":"        },"},
{"lineNum":"  517","line":"        .ErrorSet => {"},
{"lineNum":"  518","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  519","line":"            try writer.writeAll(\"error.\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  520","line":"            return writer.writeAll(@errorName(value));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  521","line":"        },"},
{"lineNum":"  522","line":"        .Enum => |enumInfo| {"},
{"lineNum":"  523","line":"            try writer.writeAll(@typeName(T));","class":"linePartCov","hits":"2","order":"2379","possible_hits":"11",},
{"lineNum":"  524","line":"            if (enumInfo.is_exhaustive) {"},
{"lineNum":"  525","line":"                if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  526","line":"                try writer.writeAll(\".\");","class":"linePartCov","hits":"2","order":"2380","possible_hits":"11",},
{"lineNum":"  527","line":"                try writer.writeAll(@tagName(value));","class":"linePartCov","hits":"3","order":"2381","possible_hits":"15",},
{"lineNum":"  528","line":"                return;","class":"linePartCov","hits":"2","order":"2382","possible_hits":"11",},
{"lineNum":"  529","line":"            }"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"            // Use @tagName only if value is one of known fields"},
{"lineNum":"  532","line":"            @setEvalBranchQuota(3 * enumInfo.fields.len);"},
{"lineNum":"  533","line":"            inline for (enumInfo.fields) |enumField| {"},
{"lineNum":"  534","line":"                if (@intFromEnum(value) == enumField.value) {"},
{"lineNum":"  535","line":"                    try writer.writeAll(\".\");"},
{"lineNum":"  536","line":"                    try writer.writeAll(@tagName(value));"},
{"lineNum":"  537","line":"                    return;"},
{"lineNum":"  538","line":"                }"},
{"lineNum":"  539","line":"            }"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"            try writer.writeAll(\"(\");"},
{"lineNum":"  542","line":"            try formatType(@intFromEnum(value), actual_fmt, options, writer, max_depth);"},
{"lineNum":"  543","line":"            try writer.writeAll(\")\");"},
{"lineNum":"  544","line":"        },"},
{"lineNum":"  545","line":"        .Union => |info| {"},
{"lineNum":"  546","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  547","line":"            try writer.writeAll(@typeName(T));","class":"linePartCov","hits":"5","order":"1421","possible_hits":"11",},
{"lineNum":"  548","line":"            if (max_depth == 0) {","class":"linePartCov","hits":"5","order":"1422","possible_hits":"11",},
{"lineNum":"  549","line":"                return writer.writeAll(\"{ ... }\");","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  550","line":"            }"},
{"lineNum":"  551","line":"            if (info.tag_type) |UnionTagType| {"},
{"lineNum":"  552","line":"                try writer.writeAll(\"{ .\");","class":"linePartCov","hits":"5","order":"1423","possible_hits":"18",},
{"lineNum":"  553","line":"                try writer.writeAll(@tagName(@as(UnionTagType, value)));","class":"linePartCov","hits":"9","order":"1424","possible_hits":"19",},
{"lineNum":"  554","line":"                try writer.writeAll(\" = \");","class":"linePartCov","hits":"5","order":"1425","possible_hits":"11",},
{"lineNum":"  555","line":"                inline for (info.fields) |u_field| {"},
{"lineNum":"  556","line":"                    if (value == @field(UnionTagType, u_field.name)) {","class":"linePartCov","hits":"14","order":"1426","possible_hits":"212",},
{"lineNum":"  557","line":"                        try formatType(@field(value, u_field.name), ANY, options, writer, max_depth - 1);","class":"linePartCov","hits":"10","order":"1427","possible_hits":"219",},
{"lineNum":"  558","line":"                    }"},
{"lineNum":"  559","line":"                }"},
{"lineNum":"  560","line":"                try writer.writeAll(\" }\");","class":"linePartCov","hits":"5","order":"1438","possible_hits":"18",},
{"lineNum":"  561","line":"            } else {"},
{"lineNum":"  562","line":"                try format(writer, \"@{x}\", .{@intFromPtr(&value)});"},
{"lineNum":"  563","line":"            }"},
{"lineNum":"  564","line":"        },"},
{"lineNum":"  565","line":"        .Struct => |info| {"},
{"lineNum":"  566","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  567","line":"            if (info.is_tuple) {"},
{"lineNum":"  568","line":"                // Skip the type and field names when formatting tuples."},
{"lineNum":"  569","line":"                if (max_depth == 0) {"},
{"lineNum":"  570","line":"                    return writer.writeAll(\"{ ... }\");"},
{"lineNum":"  571","line":"                }"},
{"lineNum":"  572","line":"                try writer.writeAll(\"{\");"},
{"lineNum":"  573","line":"                inline for (info.fields, 0..) |f, i| {"},
{"lineNum":"  574","line":"                    if (i == 0) {"},
{"lineNum":"  575","line":"                        try writer.writeAll(\" \");"},
{"lineNum":"  576","line":"                    } else {"},
{"lineNum":"  577","line":"                        try writer.writeAll(\", \");"},
{"lineNum":"  578","line":"                    }"},
{"lineNum":"  579","line":"                    try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);"},
{"lineNum":"  580","line":"                }"},
{"lineNum":"  581","line":"                return writer.writeAll(\" }\");"},
{"lineNum":"  582","line":"            }"},
{"lineNum":"  583","line":"            try writer.writeAll(@typeName(T));","class":"linePartCov","hits":"12","order":"1428","possible_hits":"135",},
{"lineNum":"  584","line":"            if (max_depth == 0) {","class":"linePartCov","hits":"12","order":"1429","possible_hits":"135",},
{"lineNum":"  585","line":"                return writer.writeAll(\"{ ... }\");","class":"linePartCov","hits":"6","order":"2383","possible_hits":"135",},
{"lineNum":"  586","line":"            }"},
{"lineNum":"  587","line":"            try writer.writeAll(\"{\");","class":"linePartCov","hits":"10","order":"1430","possible_hits":"227",},
{"lineNum":"  588","line":"            inline for (info.fields, 0..) |f, i| {","class":"linePartCov","hits":"10","order":"1431","possible_hits":"134",},
{"lineNum":"  589","line":"                if (i == 0) {"},
{"lineNum":"  590","line":"                    try writer.writeAll(\" .\");","class":"linePartCov","hits":"10","order":"1432","possible_hits":"134",},
{"lineNum":"  591","line":"                } else {"},
{"lineNum":"  592","line":"                    try writer.writeAll(\", .\");","class":"linePartCov","hits":"10","order":"1436","possible_hits":"130",},
{"lineNum":"  593","line":"                }"},
{"lineNum":"  594","line":"                try writer.writeAll(f.name);","class":"linePartCov","hits":"20","order":"1433","possible_hits":"264",},
{"lineNum":"  595","line":"                try writer.writeAll(\" = \");","class":"linePartCov","hits":"20","order":"1434","possible_hits":"264",},
{"lineNum":"  596","line":"                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);","class":"linePartCov","hits":"20","order":"1435","possible_hits":"307",},
{"lineNum":"  597","line":"            }"},
{"lineNum":"  598","line":"            try writer.writeAll(\" }\");","class":"linePartCov","hits":"10","order":"1437","possible_hits":"135",},
{"lineNum":"  599","line":"        },"},
{"lineNum":"  600","line":"        .Pointer => |ptr_info| switch (ptr_info.size) {"},
{"lineNum":"  601","line":"            .One => switch (@typeInfo(ptr_info.child)) {"},
{"lineNum":"  602","line":"                .Array => |info| {"},
{"lineNum":"  603","line":"                    if (actual_fmt.len == 0)"},
{"lineNum":"  604","line":"                        @compileError(\"cannot format array ref without a specifier (i.e. {s} or {*})\");"},
{"lineNum":"  605","line":"                    if (info.child == u8) {"},
{"lineNum":"  606","line":"                        switch (actual_fmt[0]) {"},
{"lineNum":"  607","line":"                            \'s\', \'x\', \'X\', \'e\', \'E\' => {"},
{"lineNum":"  608","line":"                                comptime checkTextFmt(actual_fmt);"},
{"lineNum":"  609","line":"                                return formatBuf(value, options, writer);","class":"linePartCov","hits":"6","order":"3327","possible_hits":"10",},
{"lineNum":"  610","line":"                            },"},
{"lineNum":"  611","line":"                            else => {},"},
{"lineNum":"  612","line":"                        }"},
{"lineNum":"  613","line":"                    }"},
{"lineNum":"  614","line":"                    if (comptime std.meta.trait.isZigString(info.child)) {"},
{"lineNum":"  615","line":"                        for (value, 0..) |item, i| {"},
{"lineNum":"  616","line":"                            comptime checkTextFmt(actual_fmt);"},
{"lineNum":"  617","line":"                            if (i != 0) try formatBuf(\", \", options, writer);"},
{"lineNum":"  618","line":"                            try formatBuf(item, options, writer);"},
{"lineNum":"  619","line":"                        }"},
{"lineNum":"  620","line":"                        return;"},
{"lineNum":"  621","line":"                    }"},
{"lineNum":"  622","line":"                    invalidFmtError(fmt, value);"},
{"lineNum":"  623","line":"                },"},
{"lineNum":"  624","line":"                .Enum, .Union, .Struct => {"},
{"lineNum":"  625","line":"                    return formatType(value.*, actual_fmt, options, writer, max_depth);","class":"linePartCov","hits":"4","order":"1420","possible_hits":"5",},
{"lineNum":"  626","line":"                },"},
{"lineNum":"  627","line":"                else => return format(writer, \"{s}@{x}\", .{ @typeName(ptr_info.child), @intFromPtr(value) }),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  628","line":"            },"},
{"lineNum":"  629","line":"            .Many, .C => {"},
{"lineNum":"  630","line":"                if (actual_fmt.len == 0)"},
{"lineNum":"  631","line":"                    @compileError(\"cannot format pointer without a specifier (i.e. {s} or {*})\");"},
{"lineNum":"  632","line":"                if (ptr_info.sentinel) |_| {"},
{"lineNum":"  633","line":"                    return formatType(mem.span(value), actual_fmt, options, writer, max_depth);"},
{"lineNum":"  634","line":"                }"},
{"lineNum":"  635","line":"                if (ptr_info.child == u8) {"},
{"lineNum":"  636","line":"                    switch (actual_fmt[0]) {"},
{"lineNum":"  637","line":"                        \'s\', \'x\', \'X\', \'e\', \'E\' => {"},
{"lineNum":"  638","line":"                            comptime checkTextFmt(actual_fmt);"},
{"lineNum":"  639","line":"                            return formatBuf(mem.span(value), options, writer);"},
{"lineNum":"  640","line":"                        },"},
{"lineNum":"  641","line":"                        else => {},"},
{"lineNum":"  642","line":"                    }"},
{"lineNum":"  643","line":"                }"},
{"lineNum":"  644","line":"                invalidFmtError(fmt, value);"},
{"lineNum":"  645","line":"            },"},
{"lineNum":"  646","line":"            .Slice => {"},
{"lineNum":"  647","line":"                if (actual_fmt.len == 0)"},
{"lineNum":"  648","line":"                    @compileError(\"cannot format slice without a specifier (i.e. {s} or {any})\");"},
{"lineNum":"  649","line":"                if (max_depth == 0) {","class":"linePartCov","hits":"7","order":"614","possible_hits":"19",},
{"lineNum":"  650","line":"                    return writer.writeAll(\"{ ... }\");","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  651","line":"                }"},
{"lineNum":"  652","line":"                if (ptr_info.child == u8) {"},
{"lineNum":"  653","line":"                    switch (actual_fmt[0]) {"},
{"lineNum":"  654","line":"                        \'s\', \'x\', \'X\', \'e\', \'E\' => {"},
{"lineNum":"  655","line":"                            comptime checkTextFmt(actual_fmt);"},
{"lineNum":"  656","line":"                            return formatBuf(value, options, writer);","class":"lineCov","hits":"10","order":"615","possible_hits":"10",},
{"lineNum":"  657","line":"                        },"},
{"lineNum":"  658","line":"                        else => {},"},
{"lineNum":"  659","line":"                    }"},
{"lineNum":"  660","line":"                }"},
{"lineNum":"  661","line":"                try writer.writeAll(\"{ \");","class":"linePartCov","hits":"1","order":"1979","possible_hits":"22",},
{"lineNum":"  662","line":"                for (value, 0..) |elem, i| {","class":"linePartCov","hits":"3","order":"1980","possible_hits":"39",},
{"lineNum":"  663","line":"                    try formatType(elem, actual_fmt, options, writer, max_depth - 1);","class":"linePartCov","hits":"1","order":"1981","possible_hits":"26",},
{"lineNum":"  664","line":"                    if (i != value.len - 1) {","class":"linePartCov","hits":"1","order":"1983","possible_hits":"26",},
{"lineNum":"  665","line":"                        try writer.writeAll(\", \");","class":"linePartCov","hits":"4","order":"1984","possible_hits":"52",},
{"lineNum":"  666","line":"                    }"},
{"lineNum":"  667","line":"                }"},
{"lineNum":"  668","line":"                try writer.writeAll(\" }\");","class":"linePartCov","hits":"1","order":"1985","possible_hits":"22",},
{"lineNum":"  669","line":"            },"},
{"lineNum":"  670","line":"        },"},
{"lineNum":"  671","line":"        .Array => |info| {"},
{"lineNum":"  672","line":"            if (actual_fmt.len == 0)"},
{"lineNum":"  673","line":"                @compileError(\"cannot format array without a specifier (i.e. {s} or {any})\");"},
{"lineNum":"  674","line":"            if (max_depth == 0) {"},
{"lineNum":"  675","line":"                return writer.writeAll(\"{ ... }\");"},
{"lineNum":"  676","line":"            }"},
{"lineNum":"  677","line":"            if (info.child == u8) {"},
{"lineNum":"  678","line":"                switch (actual_fmt[0]) {"},
{"lineNum":"  679","line":"                    \'s\', \'x\', \'X\', \'e\', \'E\' => {"},
{"lineNum":"  680","line":"                        comptime checkTextFmt(actual_fmt);"},
{"lineNum":"  681","line":"                        return formatBuf(&value, options, writer);"},
{"lineNum":"  682","line":"                    },"},
{"lineNum":"  683","line":"                    else => {},"},
{"lineNum":"  684","line":"                }"},
{"lineNum":"  685","line":"            }"},
{"lineNum":"  686","line":"            try writer.writeAll(\"{ \");"},
{"lineNum":"  687","line":"            for (value, 0..) |elem, i| {"},
{"lineNum":"  688","line":"                try formatType(elem, actual_fmt, options, writer, max_depth - 1);"},
{"lineNum":"  689","line":"                if (i < value.len - 1) {"},
{"lineNum":"  690","line":"                    try writer.writeAll(\", \");"},
{"lineNum":"  691","line":"                }"},
{"lineNum":"  692","line":"            }"},
{"lineNum":"  693","line":"            try writer.writeAll(\" }\");"},
{"lineNum":"  694","line":"        },"},
{"lineNum":"  695","line":"        .Vector => |info| {"},
{"lineNum":"  696","line":"            try writer.writeAll(\"{ \");"},
{"lineNum":"  697","line":"            var i: usize = 0;"},
{"lineNum":"  698","line":"            while (i < info.len) : (i += 1) {"},
{"lineNum":"  699","line":"                try formatValue(value[i], actual_fmt, options, writer);"},
{"lineNum":"  700","line":"                if (i < info.len - 1) {"},
{"lineNum":"  701","line":"                    try writer.writeAll(\", \");"},
{"lineNum":"  702","line":"                }"},
{"lineNum":"  703","line":"            }"},
{"lineNum":"  704","line":"            try writer.writeAll(\" }\");"},
{"lineNum":"  705","line":"        },"},
{"lineNum":"  706","line":"        .Fn => @compileError(\"unable to format function body type, use \'*const \" ++ @typeName(T) ++ \"\' for a function pointer type\"),"},
{"lineNum":"  707","line":"        .Type => {"},
{"lineNum":"  708","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  709","line":"            return formatBuf(@typeName(value), options, writer);"},
{"lineNum":"  710","line":"        },"},
{"lineNum":"  711","line":"        .EnumLiteral => {"},
{"lineNum":"  712","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  713","line":"            const buffer = [_]u8{\'.\'} ++ @tagName(value);"},
{"lineNum":"  714","line":"            return formatBuf(buffer, options, writer);"},
{"lineNum":"  715","line":"        },"},
{"lineNum":"  716","line":"        .Null => {"},
{"lineNum":"  717","line":"            if (actual_fmt.len != 0) invalidFmtError(fmt, value);"},
{"lineNum":"  718","line":"            return formatBuf(\"null\", options, writer);"},
{"lineNum":"  719","line":"        },"},
{"lineNum":"  720","line":"        else => @compileError(\"unable to format type \'\" ++ @typeName(T) ++ \"\'\"),"},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":"}"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"fn formatValue("},
{"lineNum":"  725","line":"    value: anytype,"},
{"lineNum":"  726","line":"    comptime fmt: []const u8,"},
{"lineNum":"  727","line":"    options: FormatOptions,"},
{"lineNum":"  728","line":"    writer: anytype,"},
{"lineNum":"  729","line":") !void {","class":"linePartCov","hits":"16","order":"649","possible_hits":"29",},
{"lineNum":"  730","line":"    const T = @TypeOf(value);"},
{"lineNum":"  731","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  732","line":"        .Float, .ComptimeFloat => return formatFloatValue(value, fmt, options, writer),"},
{"lineNum":"  733","line":"        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),","class":"linePartCov","hits":"16","order":"650","possible_hits":"29",},
{"lineNum":"  734","line":"        .Bool => return formatBuf(if (value) \"true\" else \"false\", options, writer),"},
{"lineNum":"  735","line":"        else => comptime unreachable,"},
{"lineNum":"  736","line":"    }"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"pub fn formatIntValue("},
{"lineNum":"  740","line":"    value: anytype,"},
{"lineNum":"  741","line":"    comptime fmt: []const u8,"},
{"lineNum":"  742","line":"    options: FormatOptions,"},
{"lineNum":"  743","line":"    writer: anytype,"},
{"lineNum":"  744","line":") !void {","class":"linePartCov","hits":"16","order":"651","possible_hits":"29",},
{"lineNum":"  745","line":"    comptime var base = 10;"},
{"lineNum":"  746","line":"    comptime var case: Case = .lower;"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    const int_value = if (@TypeOf(value) == comptime_int) blk: {","class":"linePartCov","hits":"16","order":"652","possible_hits":"29",},
{"lineNum":"  749","line":"        const Int = math.IntFittingRange(value, value);"},
{"lineNum":"  750","line":"        break :blk @as(Int, value);"},
{"lineNum":"  751","line":"    } else value;"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    if (fmt.len == 0 or comptime std.mem.eql(u8, fmt, \"d\")) {"},
{"lineNum":"  754","line":"        base = 10;"},
{"lineNum":"  755","line":"        case = .lower;"},
{"lineNum":"  756","line":"    } else if (comptime std.mem.eql(u8, fmt, \"c\")) {"},
{"lineNum":"  757","line":"        if (@typeInfo(@TypeOf(int_value)).Int.bits <= 8) {"},
{"lineNum":"  758","line":"            return formatAsciiChar(@as(u8, int_value), options, writer);","class":"lineCov","hits":"2","order":"3209","possible_hits":"2",},
{"lineNum":"  759","line":"        } else {"},
{"lineNum":"  760","line":"            @compileError(\"cannot print integer that is larger than 8 bits as an ASCII character\");"},
{"lineNum":"  761","line":"        }"},
{"lineNum":"  762","line":"    } else if (comptime std.mem.eql(u8, fmt, \"u\")) {"},
{"lineNum":"  763","line":"        if (@typeInfo(@TypeOf(int_value)).Int.bits <= 21) {"},
{"lineNum":"  764","line":"            return formatUnicodeCodepoint(@as(u21, int_value), options, writer);"},
{"lineNum":"  765","line":"        } else {"},
{"lineNum":"  766","line":"            @compileError(\"cannot print integer that is larger than 21 bits as an UTF-8 sequence\");"},
{"lineNum":"  767","line":"        }"},
{"lineNum":"  768","line":"    } else if (comptime std.mem.eql(u8, fmt, \"b\")) {"},
{"lineNum":"  769","line":"        base = 2;"},
{"lineNum":"  770","line":"        case = .lower;"},
{"lineNum":"  771","line":"    } else if (comptime std.mem.eql(u8, fmt, \"x\")) {"},
{"lineNum":"  772","line":"        base = 16;"},
{"lineNum":"  773","line":"        case = .lower;"},
{"lineNum":"  774","line":"    } else if (comptime std.mem.eql(u8, fmt, \"X\")) {"},
{"lineNum":"  775","line":"        base = 16;"},
{"lineNum":"  776","line":"        case = .upper;"},
{"lineNum":"  777","line":"    } else if (comptime std.mem.eql(u8, fmt, \"o\")) {"},
{"lineNum":"  778","line":"        base = 8;"},
{"lineNum":"  779","line":"        case = .lower;"},
{"lineNum":"  780","line":"    } else {"},
{"lineNum":"  781","line":"        invalidFmtError(fmt, value);"},
{"lineNum":"  782","line":"    }"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"    return formatInt(int_value, base, case, options, writer);","class":"linePartCov","hits":"14","order":"653","possible_hits":"27",},
{"lineNum":"  785","line":"}"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"fn formatFloatValue("},
{"lineNum":"  788","line":"    value: anytype,"},
{"lineNum":"  789","line":"    comptime fmt: []const u8,"},
{"lineNum":"  790","line":"    options: FormatOptions,"},
{"lineNum":"  791","line":"    writer: anytype,"},
{"lineNum":"  792","line":") !void {"},
{"lineNum":"  793","line":"    // this buffer should be enough to display all decimal places of a decimal f64 number."},
{"lineNum":"  794","line":"    var buf: [512]u8 = undefined;"},
{"lineNum":"  795","line":"    var buf_stream = std.io.fixedBufferStream(&buf);"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"    if (fmt.len == 0 or comptime std.mem.eql(u8, fmt, \"e\")) {"},
{"lineNum":"  798","line":"        formatFloatScientific(value, options, buf_stream.writer()) catch |err| switch (err) {"},
{"lineNum":"  799","line":"            error.NoSpaceLeft => unreachable,"},
{"lineNum":"  800","line":"        };"},
{"lineNum":"  801","line":"    } else if (comptime std.mem.eql(u8, fmt, \"d\")) {"},
{"lineNum":"  802","line":"        formatFloatDecimal(value, options, buf_stream.writer()) catch |err| switch (err) {"},
{"lineNum":"  803","line":"            error.NoSpaceLeft => unreachable,"},
{"lineNum":"  804","line":"        };"},
{"lineNum":"  805","line":"    } else if (comptime std.mem.eql(u8, fmt, \"x\")) {"},
{"lineNum":"  806","line":"        formatFloatHexadecimal(value, options, buf_stream.writer()) catch |err| switch (err) {"},
{"lineNum":"  807","line":"            error.NoSpaceLeft => unreachable,"},
{"lineNum":"  808","line":"        };"},
{"lineNum":"  809","line":"    } else {"},
{"lineNum":"  810","line":"        invalidFmtError(fmt, value);"},
{"lineNum":"  811","line":"    }"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"    return formatBuf(buf_stream.getWritten(), options, writer);"},
{"lineNum":"  814","line":"}"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"pub const Case = enum { lower, upper };"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"fn formatSliceHexImpl(comptime case: Case) type {"},
{"lineNum":"  819","line":"    const charset = \"0123456789\" ++ if (case == .upper) \"ABCDEF\" else \"abcdef\";"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"    return struct {"},
{"lineNum":"  822","line":"        pub fn formatSliceHexImpl("},
{"lineNum":"  823","line":"            bytes: []const u8,"},
{"lineNum":"  824","line":"            comptime fmt: []const u8,"},
{"lineNum":"  825","line":"            options: std.fmt.FormatOptions,"},
{"lineNum":"  826","line":"            writer: anytype,"},
{"lineNum":"  827","line":"        ) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  828","line":"            _ = fmt;"},
{"lineNum":"  829","line":"            _ = options;"},
{"lineNum":"  830","line":"            var buf: [2]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"            for (bytes) |c| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  833","line":"                buf[0] = charset[c >> 4];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  834","line":"                buf[1] = charset[c & 15];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  835","line":"                try writer.writeAll(&buf);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  836","line":"            }"},
{"lineNum":"  837","line":"        }"},
{"lineNum":"  838","line":"    };"},
{"lineNum":"  839","line":"}"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"const formatSliceHexLower = formatSliceHexImpl(.lower).formatSliceHexImpl;"},
{"lineNum":"  842","line":"const formatSliceHexUpper = formatSliceHexImpl(.upper).formatSliceHexImpl;"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"/// Return a Formatter for a []const u8 where every byte is formatted as a pair"},
{"lineNum":"  845","line":"/// of lowercase hexadecimal digits."},
{"lineNum":"  846","line":"pub fn fmtSliceHexLower(bytes: []const u8) std.fmt.Formatter(formatSliceHexLower) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  847","line":"    return .{ .data = bytes };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  848","line":"}"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"/// Return a Formatter for a []const u8 where every byte is formatted as pair"},
{"lineNum":"  851","line":"/// of uppercase hexadecimal digits."},
{"lineNum":"  852","line":"pub fn fmtSliceHexUpper(bytes: []const u8) std.fmt.Formatter(formatSliceHexUpper) {"},
{"lineNum":"  853","line":"    return .{ .data = bytes };"},
{"lineNum":"  854","line":"}"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"fn formatSliceEscapeImpl(comptime case: Case) type {"},
{"lineNum":"  857","line":"    const charset = \"0123456789\" ++ if (case == .upper) \"ABCDEF\" else \"abcdef\";"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    return struct {"},
{"lineNum":"  860","line":"        pub fn formatSliceEscapeImpl("},
{"lineNum":"  861","line":"            bytes: []const u8,"},
{"lineNum":"  862","line":"            comptime fmt: []const u8,"},
{"lineNum":"  863","line":"            options: std.fmt.FormatOptions,"},
{"lineNum":"  864","line":"            writer: anytype,"},
{"lineNum":"  865","line":"        ) !void {"},
{"lineNum":"  866","line":"            _ = fmt;"},
{"lineNum":"  867","line":"            _ = options;"},
{"lineNum":"  868","line":"            var buf: [4]u8 = undefined;"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"            buf[0] = \'\\\\\';"},
{"lineNum":"  871","line":"            buf[1] = \'x\';"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"            for (bytes) |c| {"},
{"lineNum":"  874","line":"                if (std.ascii.isPrint(c)) {"},
{"lineNum":"  875","line":"                    try writer.writeByte(c);"},
{"lineNum":"  876","line":"                } else {"},
{"lineNum":"  877","line":"                    buf[2] = charset[c >> 4];"},
{"lineNum":"  878","line":"                    buf[3] = charset[c & 15];"},
{"lineNum":"  879","line":"                    try writer.writeAll(&buf);"},
{"lineNum":"  880","line":"                }"},
{"lineNum":"  881","line":"            }"},
{"lineNum":"  882","line":"        }"},
{"lineNum":"  883","line":"    };"},
{"lineNum":"  884","line":"}"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"const formatSliceEscapeLower = formatSliceEscapeImpl(.lower).formatSliceEscapeImpl;"},
{"lineNum":"  887","line":"const formatSliceEscapeUpper = formatSliceEscapeImpl(.upper).formatSliceEscapeImpl;"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"/// Return a Formatter for a []const u8 where every non-printable ASCII"},
{"lineNum":"  890","line":"/// character is escaped as \\xNN, where NN is the character in lowercase"},
{"lineNum":"  891","line":"/// hexadecimal notation."},
{"lineNum":"  892","line":"pub fn fmtSliceEscapeLower(bytes: []const u8) std.fmt.Formatter(formatSliceEscapeLower) {"},
{"lineNum":"  893","line":"    return .{ .data = bytes };"},
{"lineNum":"  894","line":"}"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"/// Return a Formatter for a []const u8 where every non-printable ASCII"},
{"lineNum":"  897","line":"/// character is escaped as \\xNN, where NN is the character in uppercase"},
{"lineNum":"  898","line":"/// hexadecimal notation."},
{"lineNum":"  899","line":"pub fn fmtSliceEscapeUpper(bytes: []const u8) std.fmt.Formatter(formatSliceEscapeUpper) {"},
{"lineNum":"  900","line":"    return .{ .data = bytes };"},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"fn formatSizeImpl(comptime base: comptime_int) type {"},
{"lineNum":"  904","line":"    return struct {"},
{"lineNum":"  905","line":"        fn formatSizeImpl("},
{"lineNum":"  906","line":"            value: u64,"},
{"lineNum":"  907","line":"            comptime fmt: []const u8,"},
{"lineNum":"  908","line":"            options: FormatOptions,"},
{"lineNum":"  909","line":"            writer: anytype,"},
{"lineNum":"  910","line":"        ) !void {"},
{"lineNum":"  911","line":"            _ = fmt;"},
{"lineNum":"  912","line":"            if (value == 0) {"},
{"lineNum":"  913","line":"                return formatBuf(\"0B\", options, writer);"},
{"lineNum":"  914","line":"            }"},
{"lineNum":"  915","line":"            // The worst case in terms of space needed is 32 bytes + 3 for the suffix."},
{"lineNum":"  916","line":"            var buf: [35]u8 = undefined;"},
{"lineNum":"  917","line":"            var bufstream = io.fixedBufferStream(buf[0..]);"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"            const mags_si = \" kMGTPEZY\";"},
{"lineNum":"  920","line":"            const mags_iec = \" KMGTPEZY\";"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"            const log2 = math.log2(value);"},
{"lineNum":"  923","line":"            const magnitude = switch (base) {"},
{"lineNum":"  924","line":"                1000 => @min(log2 / comptime math.log2(1000), mags_si.len - 1),"},
{"lineNum":"  925","line":"                1024 => @min(log2 / 10, mags_iec.len - 1),"},
{"lineNum":"  926","line":"                else => unreachable,"},
{"lineNum":"  927","line":"            };"},
{"lineNum":"  928","line":"            const new_value = lossyCast(f64, value) / math.pow(f64, lossyCast(f64, base), lossyCast(f64, magnitude));"},
{"lineNum":"  929","line":"            const suffix = switch (base) {"},
{"lineNum":"  930","line":"                1000 => mags_si[magnitude],"},
{"lineNum":"  931","line":"                1024 => mags_iec[magnitude],"},
{"lineNum":"  932","line":"                else => unreachable,"},
{"lineNum":"  933","line":"            };"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"            formatFloatDecimal(new_value, options, bufstream.writer()) catch |err| switch (err) {"},
{"lineNum":"  936","line":"                error.NoSpaceLeft => unreachable, // 35 bytes should be enough"},
{"lineNum":"  937","line":"            };"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"            bufstream.writer().writeAll(if (suffix == \' \')"},
{"lineNum":"  940","line":"                \"B\""},
{"lineNum":"  941","line":"            else switch (base) {"},
{"lineNum":"  942","line":"                1000 => &[_]u8{ suffix, \'B\' },"},
{"lineNum":"  943","line":"                1024 => &[_]u8{ suffix, \'i\', \'B\' },"},
{"lineNum":"  944","line":"                else => unreachable,"},
{"lineNum":"  945","line":"            }) catch |err| switch (err) {"},
{"lineNum":"  946","line":"                error.NoSpaceLeft => unreachable,"},
{"lineNum":"  947","line":"            };"},
{"lineNum":"  948","line":"            return formatBuf(bufstream.getWritten(), options, writer);"},
{"lineNum":"  949","line":"        }"},
{"lineNum":"  950","line":"    };"},
{"lineNum":"  951","line":"}"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"const formatSizeDec = formatSizeImpl(1000).formatSizeImpl;"},
{"lineNum":"  954","line":"const formatSizeBin = formatSizeImpl(1024).formatSizeImpl;"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"/// Return a Formatter for a u64 value representing a file size."},
{"lineNum":"  957","line":"/// This formatter represents the number as multiple of 1000 and uses the SI"},
{"lineNum":"  958","line":"/// measurement units (kB, MB, GB, ...)."},
{"lineNum":"  959","line":"pub fn fmtIntSizeDec(value: u64) std.fmt.Formatter(formatSizeDec) {"},
{"lineNum":"  960","line":"    return .{ .data = value };"},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"/// Return a Formatter for a u64 value representing a file size."},
{"lineNum":"  964","line":"/// This formatter represents the number as multiple of 1024 and uses the IEC"},
{"lineNum":"  965","line":"/// measurement units (KiB, MiB, GiB, ...)."},
{"lineNum":"  966","line":"pub fn fmtIntSizeBin(value: u64) std.fmt.Formatter(formatSizeBin) {"},
{"lineNum":"  967","line":"    return .{ .data = value };"},
{"lineNum":"  968","line":"}"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"fn checkTextFmt(comptime fmt: []const u8) void {"},
{"lineNum":"  971","line":"    if (fmt.len != 1)"},
{"lineNum":"  972","line":"        @compileError(\"unsupported format string \'\" ++ fmt ++ \"\' when formatting text\");"},
{"lineNum":"  973","line":"    switch (fmt[0]) {"},
{"lineNum":"  974","line":"        // Example of deprecation:"},
{"lineNum":"  975","line":"        // \'[deprecated_specifier]\' => @compileError(\"specifier \'[deprecated_specifier]\' has been deprecated, wrap your argument in `std.some_function` instead\"),"},
{"lineNum":"  976","line":"        \'x\' => @compileError(\"specifier \'x\' has been deprecated, wrap your argument in std.fmt.fmtSliceHexLower instead\"),"},
{"lineNum":"  977","line":"        \'X\' => @compileError(\"specifier \'X\' has been deprecated, wrap your argument in std.fmt.fmtSliceHexUpper instead\"),"},
{"lineNum":"  978","line":"        else => {},"},
{"lineNum":"  979","line":"    }"},
{"lineNum":"  980","line":"}"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"pub fn formatText("},
{"lineNum":"  983","line":"    bytes: []const u8,"},
{"lineNum":"  984","line":"    comptime fmt: []const u8,"},
{"lineNum":"  985","line":"    options: FormatOptions,"},
{"lineNum":"  986","line":"    writer: anytype,"},
{"lineNum":"  987","line":") !void {"},
{"lineNum":"  988","line":"    comptime checkTextFmt(fmt);"},
{"lineNum":"  989","line":"    return formatBuf(bytes, options, writer);"},
{"lineNum":"  990","line":"}"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"pub fn formatAsciiChar("},
{"lineNum":"  993","line":"    c: u8,"},
{"lineNum":"  994","line":"    options: FormatOptions,"},
{"lineNum":"  995","line":"    writer: anytype,"},
{"lineNum":"  996","line":") !void {","class":"lineCov","hits":"2","order":"3210","possible_hits":"2",},
{"lineNum":"  997","line":"    return formatBuf(@as(*const [1]u8, &c), options, writer);","class":"lineCov","hits":"2","order":"3211","possible_hits":"2",},
{"lineNum":"  998","line":"}"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"pub fn formatUnicodeCodepoint("},
{"lineNum":" 1001","line":"    c: u21,"},
{"lineNum":" 1002","line":"    options: FormatOptions,"},
{"lineNum":" 1003","line":"    writer: anytype,"},
{"lineNum":" 1004","line":") !void {"},
{"lineNum":" 1005","line":"    var buf: [4]u8 = undefined;"},
{"lineNum":" 1006","line":"    const len = unicode.utf8Encode(c, &buf) catch |err| switch (err) {"},
{"lineNum":" 1007","line":"        error.Utf8CannotEncodeSurrogateHalf, error.CodepointTooLarge => {"},
{"lineNum":" 1008","line":"            const len = unicode.utf8Encode(unicode.replacement_character, &buf) catch unreachable;"},
{"lineNum":" 1009","line":"            return formatBuf(buf[0..len], options, writer);"},
{"lineNum":" 1010","line":"        },"},
{"lineNum":" 1011","line":"    };"},
{"lineNum":" 1012","line":"    return formatBuf(buf[0..len], options, writer);"},
{"lineNum":" 1013","line":"}"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"pub fn formatBuf("},
{"lineNum":" 1016","line":"    buf: []const u8,"},
{"lineNum":" 1017","line":"    options: FormatOptions,"},
{"lineNum":" 1018","line":"    writer: anytype,"},
{"lineNum":" 1019","line":") !void {","class":"lineCov","hits":"3","order":"616","possible_hits":"3",},
{"lineNum":" 1020","line":"    if (options.width) |min_width| {","class":"linePartCov","hits":"3","order":"617","possible_hits":"6",},
{"lineNum":" 1021","line":"        // In case of error assume the buffer content is ASCII-encoded"},
{"lineNum":" 1022","line":"        const width = unicode.utf8CountCodepoints(buf) catch buf.len;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1023","line":"        const padding = if (width < min_width) min_width - width else 0;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"        if (padding == 0)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1026","line":"            return writer.writeAll(buf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"        switch (options.alignment) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1029","line":"            .left => {"},
{"lineNum":" 1030","line":"                try writer.writeAll(buf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1031","line":"                try writer.writeByteNTimes(options.fill, padding);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1032","line":"            },"},
{"lineNum":" 1033","line":"            .center => {"},
{"lineNum":" 1034","line":"                const left_padding = padding / 2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1035","line":"                const right_padding = (padding + 1) / 2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1036","line":"                try writer.writeByteNTimes(options.fill, left_padding);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1037","line":"                try writer.writeAll(buf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1038","line":"                try writer.writeByteNTimes(options.fill, right_padding);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1039","line":"            },"},
{"lineNum":" 1040","line":"            .right => {"},
{"lineNum":" 1041","line":"                try writer.writeByteNTimes(options.fill, padding);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1042","line":"                try writer.writeAll(buf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1043","line":"            },"},
{"lineNum":" 1044","line":"        }"},
{"lineNum":" 1045","line":"    } else {"},
{"lineNum":" 1046","line":"        // Fast path, avoid counting the number of codepoints"},
{"lineNum":" 1047","line":"        try writer.writeAll(buf);","class":"linePartCov","hits":"6","order":"618","possible_hits":"8",},
{"lineNum":" 1048","line":"    }"},
{"lineNum":" 1049","line":"}"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"/// Print a float in scientific notation to the specified precision. Null uses full precision."},
{"lineNum":" 1052","line":"/// It should be the case that every full precision, printed value can be re-parsed back to the"},
{"lineNum":" 1053","line":"/// same type unambiguously."},
{"lineNum":" 1054","line":"pub fn formatFloatScientific("},
{"lineNum":" 1055","line":"    value: anytype,"},
{"lineNum":" 1056","line":"    options: FormatOptions,"},
{"lineNum":" 1057","line":"    writer: anytype,"},
{"lineNum":" 1058","line":") !void {"},
{"lineNum":" 1059","line":"    var x = @as(f64, @floatCast(value));"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"    // Errol doesn\'t handle these special cases."},
{"lineNum":" 1062","line":"    if (math.signbit(x)) {"},
{"lineNum":" 1063","line":"        try writer.writeAll(\"-\");"},
{"lineNum":" 1064","line":"        x = -x;"},
{"lineNum":" 1065","line":"    }"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"    if (math.isNan(x)) {"},
{"lineNum":" 1068","line":"        return writer.writeAll(\"nan\");"},
{"lineNum":" 1069","line":"    }"},
{"lineNum":" 1070","line":"    if (math.isPositiveInf(x)) {"},
{"lineNum":" 1071","line":"        return writer.writeAll(\"inf\");"},
{"lineNum":" 1072","line":"    }"},
{"lineNum":" 1073","line":"    if (x == 0.0) {"},
{"lineNum":" 1074","line":"        try writer.writeAll(\"0\");"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"        if (options.precision) |precision| {"},
{"lineNum":" 1077","line":"            if (precision != 0) {"},
{"lineNum":" 1078","line":"                try writer.writeAll(\".\");"},
{"lineNum":" 1079","line":"                var i: usize = 0;"},
{"lineNum":" 1080","line":"                while (i < precision) : (i += 1) {"},
{"lineNum":" 1081","line":"                    try writer.writeAll(\"0\");"},
{"lineNum":" 1082","line":"                }"},
{"lineNum":" 1083","line":"            }"},
{"lineNum":" 1084","line":"        } else {"},
{"lineNum":" 1085","line":"            try writer.writeAll(\".0\");"},
{"lineNum":" 1086","line":"        }"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"        try writer.writeAll(\"e+00\");"},
{"lineNum":" 1089","line":"        return;"},
{"lineNum":" 1090","line":"    }"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"    var buffer: [32]u8 = undefined;"},
{"lineNum":" 1093","line":"    var float_decimal = errol.errol3(x, buffer[0..]);"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"    if (options.precision) |precision| {"},
{"lineNum":" 1096","line":"        errol.roundToPrecision(&float_decimal, precision, errol.RoundMode.Scientific);"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"        try writer.writeAll(float_decimal.digits[0..1]);"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"        // {e0} case prints no `.`"},
{"lineNum":" 1101","line":"        if (precision != 0) {"},
{"lineNum":" 1102","line":"            try writer.writeAll(\".\");"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"            var printed: usize = 0;"},
{"lineNum":" 1105","line":"            if (float_decimal.digits.len > 1) {"},
{"lineNum":" 1106","line":"                const num_digits = @min(float_decimal.digits.len, precision + 1);"},
{"lineNum":" 1107","line":"                try writer.writeAll(float_decimal.digits[1..num_digits]);"},
{"lineNum":" 1108","line":"                printed += num_digits - 1;"},
{"lineNum":" 1109","line":"            }"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"            while (printed < precision) : (printed += 1) {"},
{"lineNum":" 1112","line":"                try writer.writeAll(\"0\");"},
{"lineNum":" 1113","line":"            }"},
{"lineNum":" 1114","line":"        }"},
{"lineNum":" 1115","line":"    } else {"},
{"lineNum":" 1116","line":"        try writer.writeAll(float_decimal.digits[0..1]);"},
{"lineNum":" 1117","line":"        try writer.writeAll(\".\");"},
{"lineNum":" 1118","line":"        if (float_decimal.digits.len > 1) {"},
{"lineNum":" 1119","line":"            const num_digits = if (@TypeOf(value) == f32) @min(@as(usize, 9), float_decimal.digits.len) else float_decimal.digits.len;"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"            try writer.writeAll(float_decimal.digits[1..num_digits]);"},
{"lineNum":" 1122","line":"        } else {"},
{"lineNum":" 1123","line":"            try writer.writeAll(\"0\");"},
{"lineNum":" 1124","line":"        }"},
{"lineNum":" 1125","line":"    }"},
{"lineNum":" 1126","line":""},
{"lineNum":" 1127","line":"    try writer.writeAll(\"e\");"},
{"lineNum":" 1128","line":"    const exp = float_decimal.exp - 1;"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"    if (exp >= 0) {"},
{"lineNum":" 1131","line":"        try writer.writeAll(\"+\");"},
{"lineNum":" 1132","line":"        if (exp > -10 and exp < 10) {"},
{"lineNum":" 1133","line":"            try writer.writeAll(\"0\");"},
{"lineNum":" 1134","line":"        }"},
{"lineNum":" 1135","line":"        try formatInt(exp, 10, .lower, FormatOptions{ .width = 0 }, writer);"},
{"lineNum":" 1136","line":"    } else {"},
{"lineNum":" 1137","line":"        try writer.writeAll(\"-\");"},
{"lineNum":" 1138","line":"        if (exp > -10 and exp < 10) {"},
{"lineNum":" 1139","line":"            try writer.writeAll(\"0\");"},
{"lineNum":" 1140","line":"        }"},
{"lineNum":" 1141","line":"        try formatInt(-exp, 10, .lower, FormatOptions{ .width = 0 }, writer);"},
{"lineNum":" 1142","line":"    }"},
{"lineNum":" 1143","line":"}"},
{"lineNum":" 1144","line":""},
{"lineNum":" 1145","line":"pub fn formatFloatHexadecimal("},
{"lineNum":" 1146","line":"    value: anytype,"},
{"lineNum":" 1147","line":"    options: FormatOptions,"},
{"lineNum":" 1148","line":"    writer: anytype,"},
{"lineNum":" 1149","line":") !void {"},
{"lineNum":" 1150","line":"    if (math.signbit(value)) {"},
{"lineNum":" 1151","line":"        try writer.writeByte(\'-\');"},
{"lineNum":" 1152","line":"    }"},
{"lineNum":" 1153","line":"    if (math.isNan(value)) {"},
{"lineNum":" 1154","line":"        return writer.writeAll(\"nan\");"},
{"lineNum":" 1155","line":"    }"},
{"lineNum":" 1156","line":"    if (math.isInf(value)) {"},
{"lineNum":" 1157","line":"        return writer.writeAll(\"inf\");"},
{"lineNum":" 1158","line":"    }"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"    const T = @TypeOf(value);"},
{"lineNum":" 1161","line":"    const TU = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"    const mantissa_bits = math.floatMantissaBits(T);"},
{"lineNum":" 1164","line":"    const fractional_bits = math.floatFractionalBits(T);"},
{"lineNum":" 1165","line":"    const exponent_bits = math.floatExponentBits(T);"},
{"lineNum":" 1166","line":"    const mantissa_mask = (1 << mantissa_bits) - 1;"},
{"lineNum":" 1167","line":"    const exponent_mask = (1 << exponent_bits) - 1;"},
{"lineNum":" 1168","line":"    const exponent_bias = (1 << (exponent_bits - 1)) - 1;"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"    const as_bits = @as(TU, @bitCast(value));"},
{"lineNum":" 1171","line":"    var mantissa = as_bits & mantissa_mask;"},
{"lineNum":" 1172","line":"    var exponent: i32 = @as(u16, @truncate((as_bits >> mantissa_bits) & exponent_mask));"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"    const is_denormal = exponent == 0 and mantissa != 0;"},
{"lineNum":" 1175","line":"    const is_zero = exponent == 0 and mantissa == 0;"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"    if (is_zero) {"},
{"lineNum":" 1178","line":"        // Handle this case here to simplify the logic below."},
{"lineNum":" 1179","line":"        try writer.writeAll(\"0x0\");"},
{"lineNum":" 1180","line":"        if (options.precision) |precision| {"},
{"lineNum":" 1181","line":"            if (precision > 0) {"},
{"lineNum":" 1182","line":"                try writer.writeAll(\".\");"},
{"lineNum":" 1183","line":"                try writer.writeByteNTimes(\'0\', precision);"},
{"lineNum":" 1184","line":"            }"},
{"lineNum":" 1185","line":"        } else {"},
{"lineNum":" 1186","line":"            try writer.writeAll(\".0\");"},
{"lineNum":" 1187","line":"        }"},
{"lineNum":" 1188","line":"        try writer.writeAll(\"p0\");"},
{"lineNum":" 1189","line":"        return;"},
{"lineNum":" 1190","line":"    }"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"    if (is_denormal) {"},
{"lineNum":" 1193","line":"        // Adjust the exponent for printing."},
{"lineNum":" 1194","line":"        exponent += 1;"},
{"lineNum":" 1195","line":"    } else {"},
{"lineNum":" 1196","line":"        if (fractional_bits == mantissa_bits)"},
{"lineNum":" 1197","line":"            mantissa |= 1 << fractional_bits; // Add the implicit integer bit."},
{"lineNum":" 1198","line":"    }"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"    const mantissa_digits = (fractional_bits + 3) / 4;"},
{"lineNum":" 1201","line":"    // Fill in zeroes to round the fraction width to a multiple of 4."},
{"lineNum":" 1202","line":"    mantissa <<= mantissa_digits * 4 - fractional_bits;"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"    if (options.precision) |precision| {"},
{"lineNum":" 1205","line":"        // Round if needed."},
{"lineNum":" 1206","line":"        if (precision < mantissa_digits) {"},
{"lineNum":" 1207","line":"            // We always have at least 4 extra bits."},
{"lineNum":" 1208","line":"            var extra_bits = (mantissa_digits - precision) * 4;"},
{"lineNum":" 1209","line":"            // The result LSB is the Guard bit, we need two more (Round and"},
{"lineNum":" 1210","line":"            // Sticky) to round the value."},
{"lineNum":" 1211","line":"            while (extra_bits > 2) {"},
{"lineNum":" 1212","line":"                mantissa = (mantissa >> 1) | (mantissa & 1);"},
{"lineNum":" 1213","line":"                extra_bits -= 1;"},
{"lineNum":" 1214","line":"            }"},
{"lineNum":" 1215","line":"            // Round to nearest, tie to even."},
{"lineNum":" 1216","line":"            mantissa |= @intFromBool(mantissa & 0b100 != 0);"},
{"lineNum":" 1217","line":"            mantissa += 1;"},
{"lineNum":" 1218","line":"            // Drop the excess bits."},
{"lineNum":" 1219","line":"            mantissa >>= 2;"},
{"lineNum":" 1220","line":"            // Restore the alignment."},
{"lineNum":" 1221","line":"            mantissa <<= @as(math.Log2Int(TU), @intCast((mantissa_digits - precision) * 4));"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"            const overflow = mantissa & (1 << 1 + mantissa_digits * 4) != 0;"},
{"lineNum":" 1224","line":"            // Prefer a normalized result in case of overflow."},
{"lineNum":" 1225","line":"            if (overflow) {"},
{"lineNum":" 1226","line":"                mantissa >>= 1;"},
{"lineNum":" 1227","line":"                exponent += 1;"},
{"lineNum":" 1228","line":"            }"},
{"lineNum":" 1229","line":"        }"},
{"lineNum":" 1230","line":"    }"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"    // +1 for the decimal part."},
{"lineNum":" 1233","line":"    var buf: [1 + mantissa_digits]u8 = undefined;"},
{"lineNum":" 1234","line":"    _ = formatIntBuf(&buf, mantissa, 16, .lower, .{ .fill = \'0\', .width = 1 + mantissa_digits });"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"    try writer.writeAll(\"0x\");"},
{"lineNum":" 1237","line":"    try writer.writeByte(buf[0]);"},
{"lineNum":" 1238","line":"    const trimmed = mem.trimRight(u8, buf[1..], \"0\");"},
{"lineNum":" 1239","line":"    if (options.precision) |precision| {"},
{"lineNum":" 1240","line":"        if (precision > 0) try writer.writeAll(\".\");"},
{"lineNum":" 1241","line":"    } else if (trimmed.len > 0) {"},
{"lineNum":" 1242","line":"        try writer.writeAll(\".\");"},
{"lineNum":" 1243","line":"    }"},
{"lineNum":" 1244","line":"    try writer.writeAll(trimmed);"},
{"lineNum":" 1245","line":"    // Add trailing zeros if explicitly requested."},
{"lineNum":" 1246","line":"    if (options.precision) |precision| if (precision > 0) {"},
{"lineNum":" 1247","line":"        if (precision > trimmed.len)"},
{"lineNum":" 1248","line":"            try writer.writeByteNTimes(\'0\', precision - trimmed.len);"},
{"lineNum":" 1249","line":"    };"},
{"lineNum":" 1250","line":"    try writer.writeAll(\"p\");"},
{"lineNum":" 1251","line":"    try formatInt(exponent - exponent_bias, 10, .lower, .{}, writer);"},
{"lineNum":" 1252","line":"}"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"/// Print a float of the format x.yyyyy where the number of y is specified by the precision argument."},
{"lineNum":" 1255","line":"/// By default floats are printed at full precision (no rounding)."},
{"lineNum":" 1256","line":"pub fn formatFloatDecimal("},
{"lineNum":" 1257","line":"    value: anytype,"},
{"lineNum":" 1258","line":"    options: FormatOptions,"},
{"lineNum":" 1259","line":"    writer: anytype,"},
{"lineNum":" 1260","line":") !void {"},
{"lineNum":" 1261","line":"    var x = @as(f64, value);"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"    // Errol doesn\'t handle these special cases."},
{"lineNum":" 1264","line":"    if (math.signbit(x)) {"},
{"lineNum":" 1265","line":"        try writer.writeAll(\"-\");"},
{"lineNum":" 1266","line":"        x = -x;"},
{"lineNum":" 1267","line":"    }"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"    if (math.isNan(x)) {"},
{"lineNum":" 1270","line":"        return writer.writeAll(\"nan\");"},
{"lineNum":" 1271","line":"    }"},
{"lineNum":" 1272","line":"    if (math.isPositiveInf(x)) {"},
{"lineNum":" 1273","line":"        return writer.writeAll(\"inf\");"},
{"lineNum":" 1274","line":"    }"},
{"lineNum":" 1275","line":"    if (x == 0.0) {"},
{"lineNum":" 1276","line":"        try writer.writeAll(\"0\");"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"        if (options.precision) |precision| {"},
{"lineNum":" 1279","line":"            if (precision != 0) {"},
{"lineNum":" 1280","line":"                try writer.writeAll(\".\");"},
{"lineNum":" 1281","line":"                var i: usize = 0;"},
{"lineNum":" 1282","line":"                while (i < precision) : (i += 1) {"},
{"lineNum":" 1283","line":"                    try writer.writeAll(\"0\");"},
{"lineNum":" 1284","line":"                }"},
{"lineNum":" 1285","line":"            }"},
{"lineNum":" 1286","line":"        }"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"        return;"},
{"lineNum":" 1289","line":"    }"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"    // non-special case, use errol3"},
{"lineNum":" 1292","line":"    var buffer: [32]u8 = undefined;"},
{"lineNum":" 1293","line":"    var float_decimal = errol.errol3(x, buffer[0..]);"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"    if (options.precision) |precision| {"},
{"lineNum":" 1296","line":"        errol.roundToPrecision(&float_decimal, precision, errol.RoundMode.Decimal);"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"        // exp < 0 means the leading is always 0 as errol result is normalized."},
{"lineNum":" 1299","line":"        var num_digits_whole = if (float_decimal.exp > 0) @as(usize, @intCast(float_decimal.exp)) else 0;"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"        // the actual slice into the buffer, we may need to zero-pad between num_digits_whole and this."},
{"lineNum":" 1302","line":"        var num_digits_whole_no_pad = @min(num_digits_whole, float_decimal.digits.len);"},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"        if (num_digits_whole > 0) {"},
{"lineNum":" 1305","line":"            // We may have to zero pad, for instance 1e4 requires zero padding."},
{"lineNum":" 1306","line":"            try writer.writeAll(float_decimal.digits[0..num_digits_whole_no_pad]);"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"            var i = num_digits_whole_no_pad;"},
{"lineNum":" 1309","line":"            while (i < num_digits_whole) : (i += 1) {"},
{"lineNum":" 1310","line":"                try writer.writeAll(\"0\");"},
{"lineNum":" 1311","line":"            }"},
{"lineNum":" 1312","line":"        } else {"},
{"lineNum":" 1313","line":"            try writer.writeAll(\"0\");"},
{"lineNum":" 1314","line":"        }"},
{"lineNum":" 1315","line":""},
{"lineNum":" 1316","line":"        // {.0} special case doesn\'t want a trailing \'.\'"},
{"lineNum":" 1317","line":"        if (precision == 0) {"},
{"lineNum":" 1318","line":"            return;"},
{"lineNum":" 1319","line":"        }"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"        try writer.writeAll(\".\");"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"        // Keep track of fractional count printed for case where we pre-pad then post-pad with 0\'s."},
{"lineNum":" 1324","line":"        var printed: usize = 0;"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"        // Zero-fill until we reach significant digits or run out of precision."},
{"lineNum":" 1327","line":"        if (float_decimal.exp <= 0) {"},
{"lineNum":" 1328","line":"            const zero_digit_count = @as(usize, @intCast(-float_decimal.exp));"},
{"lineNum":" 1329","line":"            const zeros_to_print = @min(zero_digit_count, precision);"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"            var i: usize = 0;"},
{"lineNum":" 1332","line":"            while (i < zeros_to_print) : (i += 1) {"},
{"lineNum":" 1333","line":"                try writer.writeAll(\"0\");"},
{"lineNum":" 1334","line":"                printed += 1;"},
{"lineNum":" 1335","line":"            }"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"            if (printed >= precision) {"},
{"lineNum":" 1338","line":"                return;"},
{"lineNum":" 1339","line":"            }"},
{"lineNum":" 1340","line":"        }"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"        // Remaining fractional portion, zero-padding if insufficient."},
{"lineNum":" 1343","line":"        assert(precision >= printed);"},
{"lineNum":" 1344","line":"        if (num_digits_whole_no_pad + precision - printed < float_decimal.digits.len) {"},
{"lineNum":" 1345","line":"            try writer.writeAll(float_decimal.digits[num_digits_whole_no_pad .. num_digits_whole_no_pad + precision - printed]);"},
{"lineNum":" 1346","line":"            return;"},
{"lineNum":" 1347","line":"        } else {"},
{"lineNum":" 1348","line":"            try writer.writeAll(float_decimal.digits[num_digits_whole_no_pad..]);"},
{"lineNum":" 1349","line":"            printed += float_decimal.digits.len - num_digits_whole_no_pad;"},
{"lineNum":" 1350","line":""},
{"lineNum":" 1351","line":"            while (printed < precision) : (printed += 1) {"},
{"lineNum":" 1352","line":"                try writer.writeAll(\"0\");"},
{"lineNum":" 1353","line":"            }"},
{"lineNum":" 1354","line":"        }"},
{"lineNum":" 1355","line":"    } else {"},
{"lineNum":" 1356","line":"        // exp < 0 means the leading is always 0 as errol result is normalized."},
{"lineNum":" 1357","line":"        var num_digits_whole = if (float_decimal.exp > 0) @as(usize, @intCast(float_decimal.exp)) else 0;"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"        // the actual slice into the buffer, we may need to zero-pad between num_digits_whole and this."},
{"lineNum":" 1360","line":"        var num_digits_whole_no_pad = @min(num_digits_whole, float_decimal.digits.len);"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"        if (num_digits_whole > 0) {"},
{"lineNum":" 1363","line":"            // We may have to zero pad, for instance 1e4 requires zero padding."},
{"lineNum":" 1364","line":"            try writer.writeAll(float_decimal.digits[0..num_digits_whole_no_pad]);"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"            var i = num_digits_whole_no_pad;"},
{"lineNum":" 1367","line":"            while (i < num_digits_whole) : (i += 1) {"},
{"lineNum":" 1368","line":"                try writer.writeAll(\"0\");"},
{"lineNum":" 1369","line":"            }"},
{"lineNum":" 1370","line":"        } else {"},
{"lineNum":" 1371","line":"            try writer.writeAll(\"0\");"},
{"lineNum":" 1372","line":"        }"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"        // Omit `.` if no fractional portion"},
{"lineNum":" 1375","line":"        if (float_decimal.exp >= 0 and num_digits_whole_no_pad == float_decimal.digits.len) {"},
{"lineNum":" 1376","line":"            return;"},
{"lineNum":" 1377","line":"        }"},
{"lineNum":" 1378","line":""},
{"lineNum":" 1379","line":"        try writer.writeAll(\".\");"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"        // Zero-fill until we reach significant digits or run out of precision."},
{"lineNum":" 1382","line":"        if (float_decimal.exp < 0) {"},
{"lineNum":" 1383","line":"            const zero_digit_count = @as(usize, @intCast(-float_decimal.exp));"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"            var i: usize = 0;"},
{"lineNum":" 1386","line":"            while (i < zero_digit_count) : (i += 1) {"},
{"lineNum":" 1387","line":"                try writer.writeAll(\"0\");"},
{"lineNum":" 1388","line":"            }"},
{"lineNum":" 1389","line":"        }"},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"        try writer.writeAll(float_decimal.digits[num_digits_whole_no_pad..]);"},
{"lineNum":" 1392","line":"    }"},
{"lineNum":" 1393","line":"}"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"pub fn formatInt("},
{"lineNum":" 1396","line":"    value: anytype,"},
{"lineNum":" 1397","line":"    base: u8,"},
{"lineNum":" 1398","line":"    case: Case,"},
{"lineNum":" 1399","line":"    options: FormatOptions,"},
{"lineNum":" 1400","line":"    writer: anytype,"},
{"lineNum":" 1401","line":") !void {","class":"linePartCov","hits":"7","order":"654","possible_hits":"14",},
{"lineNum":" 1402","line":"    assert(base >= 2);","class":"linePartCov","hits":"7","order":"655","possible_hits":"14",},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"    const int_value = if (@TypeOf(value) == comptime_int) blk: {","class":"linePartCov","hits":"7","order":"656","possible_hits":"14",},
{"lineNum":" 1405","line":"        const Int = math.IntFittingRange(value, value);"},
{"lineNum":" 1406","line":"        break :blk @as(Int, value);"},
{"lineNum":" 1407","line":"    } else value;"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"    const value_info = @typeInfo(@TypeOf(int_value)).Int;"},
{"lineNum":" 1410","line":""},
{"lineNum":" 1411","line":"    // The type must have the same size as `base` or be wider in order for the"},
{"lineNum":" 1412","line":"    // division to work"},
{"lineNum":" 1413","line":"    const min_int_bits = comptime @max(value_info.bits, 8);","class":"linePartCov","hits":"7","order":"657","possible_hits":"14",},
{"lineNum":" 1414","line":"    const MinInt = std.meta.Int(.unsigned, min_int_bits);"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"    const abs_value = math.absCast(int_value);","class":"linePartCov","hits":"7","order":"658","possible_hits":"14",},
{"lineNum":" 1417","line":"    // The worst case in terms of space needed is base 2, plus 1 for the sign"},
{"lineNum":" 1418","line":"    var buf: [1 + @max(@as(comptime_int, value_info.bits), 1)]u8 = undefined;","class":"linePartCov","hits":"7","order":"661","possible_hits":"14",},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"    var a: MinInt = abs_value;","class":"linePartCov","hits":"7","order":"662","possible_hits":"14",},
{"lineNum":" 1421","line":"    var index: usize = buf.len;","class":"linePartCov","hits":"7","order":"663","possible_hits":"14",},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"    if (base == 10) {","class":"linePartCov","hits":"14","order":"664","possible_hits":"28",},
{"lineNum":" 1424","line":"        while (a >= 100) : (a = @divTrunc(a, 100)) {","class":"linePartCov","hits":"17","order":"665","possible_hits":"42",},
{"lineNum":" 1425","line":"            index -= 2;","class":"linePartCov","hits":"3","order":"2654","possible_hits":"28",},
{"lineNum":" 1426","line":"            buf[index..][0..2].* = digits2(@as(usize, @intCast(a % 100)));","class":"linePartCov","hits":"3","order":"2655","possible_hits":"14",},
{"lineNum":" 1427","line":"        }"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"        if (a < 10) {","class":"linePartCov","hits":"7","order":"666","possible_hits":"14",},
{"lineNum":" 1430","line":"            index -= 1;","class":"linePartCov","hits":"7","order":"667","possible_hits":"28",},
{"lineNum":" 1431","line":"            buf[index] = \'0\' + @as(u8, @intCast(a));","class":"linePartCov","hits":"7","order":"668","possible_hits":"14",},
{"lineNum":" 1432","line":"        } else {"},
{"lineNum":" 1433","line":"            index -= 2;","class":"linePartCov","hits":"7","order":"671","possible_hits":"28",},
{"lineNum":" 1434","line":"            buf[index..][0..2].* = digits2(@as(usize, @intCast(a)));","class":"linePartCov","hits":"14","order":"669","possible_hits":"42",},
{"lineNum":" 1435","line":"        }"},
{"lineNum":" 1436","line":"    } else {"},
{"lineNum":" 1437","line":"        while (true) {"},
{"lineNum":" 1438","line":"            const digit = a % base;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":" 1439","line":"            index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":" 1440","line":"            buf[index] = digitToChar(@as(u8, @intCast(digit)), case);","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":" 1441","line":"            a /= base;","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":" 1442","line":"            if (a == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":" 1443","line":"        }"},
{"lineNum":" 1444","line":"    }"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"    if (value_info.signedness == .signed) {"},
{"lineNum":" 1447","line":"        if (value < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1448","line":"            // Negative integer"},
{"lineNum":" 1449","line":"            index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1450","line":"            buf[index] = \'-\';","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1451","line":"        } else if (options.width == null or options.width.? == 0) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1452","line":"            // Positive integer, omit the plus sign"},
{"lineNum":" 1453","line":"        } else {"},
{"lineNum":" 1454","line":"            // Positive integer"},
{"lineNum":" 1455","line":"            index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1456","line":"            buf[index] = \'+\';","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1457","line":"        }"},
{"lineNum":" 1458","line":"    }"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"    return formatBuf(buf[index..], options, writer);","class":"linePartCov","hits":"14","order":"670","possible_hits":"28",},
{"lineNum":" 1461","line":"}"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"pub fn formatIntBuf(out_buf: []u8, value: anytype, base: u8, case: Case, options: FormatOptions) usize {"},
{"lineNum":" 1464","line":"    var fbs = std.io.fixedBufferStream(out_buf);"},
{"lineNum":" 1465","line":"    formatInt(value, base, case, options, fbs.writer()) catch unreachable;"},
{"lineNum":" 1466","line":"    return fbs.pos;"},
{"lineNum":" 1467","line":"}"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"// Converts values in the range [0, 100) to a string."},
{"lineNum":" 1470","line":"fn digits2(value: usize) [2]u8 {","class":"lineCov","hits":"1","order":"672","possible_hits":"1",},
{"lineNum":" 1471","line":"    return (\"0001020304050607080910111213141516171819\" ++","class":"lineCov","hits":"1","order":"674","possible_hits":"1",},
{"lineNum":" 1472","line":"        \"2021222324252627282930313233343536373839\" ++"},
{"lineNum":" 1473","line":"        \"4041424344454647484950515253545556575859\" ++"},
{"lineNum":" 1474","line":"        \"6061626364656667686970717273747576777879\" ++"},
{"lineNum":" 1475","line":"        \"8081828384858687888990919293949596979899\")[value * 2 ..][0..2].*;","class":"lineCov","hits":"1","order":"673","possible_hits":"1",},
{"lineNum":" 1476","line":"}"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"const FormatDurationData = struct {"},
{"lineNum":" 1479","line":"    ns: u64,"},
{"lineNum":" 1480","line":"    negative: bool = false,"},
{"lineNum":" 1481","line":"};"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"fn formatDuration(data: FormatDurationData, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {"},
{"lineNum":" 1484","line":"    _ = fmt;"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"    // worst case: \"-XXXyXXwXXdXXhXXmXX.XXXs\".len = 24"},
{"lineNum":" 1487","line":"    var buf: [24]u8 = undefined;"},
{"lineNum":" 1488","line":"    var fbs = std.io.fixedBufferStream(&buf);"},
{"lineNum":" 1489","line":"    var buf_writer = fbs.writer();"},
{"lineNum":" 1490","line":"    if (data.negative) {"},
{"lineNum":" 1491","line":"        buf_writer.writeByte(\'-\') catch unreachable;"},
{"lineNum":" 1492","line":"    }"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"    var ns_remaining = data.ns;"},
{"lineNum":" 1495","line":"    inline for (.{"},
{"lineNum":" 1496","line":"        .{ .ns = 365 * std.time.ns_per_day, .sep = \'y\' },"},
{"lineNum":" 1497","line":"        .{ .ns = std.time.ns_per_week, .sep = \'w\' },"},
{"lineNum":" 1498","line":"        .{ .ns = std.time.ns_per_day, .sep = \'d\' },"},
{"lineNum":" 1499","line":"        .{ .ns = std.time.ns_per_hour, .sep = \'h\' },"},
{"lineNum":" 1500","line":"        .{ .ns = std.time.ns_per_min, .sep = \'m\' },"},
{"lineNum":" 1501","line":"    }) |unit| {"},
{"lineNum":" 1502","line":"        if (ns_remaining >= unit.ns) {"},
{"lineNum":" 1503","line":"            const units = ns_remaining / unit.ns;"},
{"lineNum":" 1504","line":"            formatInt(units, 10, .lower, .{}, buf_writer) catch unreachable;"},
{"lineNum":" 1505","line":"            buf_writer.writeByte(unit.sep) catch unreachable;"},
{"lineNum":" 1506","line":"            ns_remaining -= units * unit.ns;"},
{"lineNum":" 1507","line":"            if (ns_remaining == 0)"},
{"lineNum":" 1508","line":"                return formatBuf(fbs.getWritten(), options, writer);"},
{"lineNum":" 1509","line":"        }"},
{"lineNum":" 1510","line":"    }"},
{"lineNum":" 1511","line":""},
{"lineNum":" 1512","line":"    inline for (.{"},
{"lineNum":" 1513","line":"        .{ .ns = std.time.ns_per_s, .sep = \"s\" },"},
{"lineNum":" 1514","line":"        .{ .ns = std.time.ns_per_ms, .sep = \"ms\" },"},
{"lineNum":" 1515","line":"        .{ .ns = std.time.ns_per_us, .sep = \"us\" },"},
{"lineNum":" 1516","line":"    }) |unit| {"},
{"lineNum":" 1517","line":"        const kunits = ns_remaining * 1000 / unit.ns;"},
{"lineNum":" 1518","line":"        if (kunits >= 1000) {"},
{"lineNum":" 1519","line":"            formatInt(kunits / 1000, 10, .lower, .{}, buf_writer) catch unreachable;"},
{"lineNum":" 1520","line":"            const frac = kunits % 1000;"},
{"lineNum":" 1521","line":"            if (frac > 0) {"},
{"lineNum":" 1522","line":"                // Write up to 3 decimal places"},
{"lineNum":" 1523","line":"                var decimal_buf = [_]u8{ \'.\', 0, 0, 0 };"},
{"lineNum":" 1524","line":"                _ = formatIntBuf(decimal_buf[1..], frac, 10, .lower, .{ .fill = \'0\', .width = 3 });"},
{"lineNum":" 1525","line":"                var end: usize = 4;"},
{"lineNum":" 1526","line":"                while (end > 1) : (end -= 1) {"},
{"lineNum":" 1527","line":"                    if (decimal_buf[end - 1] != \'0\') break;"},
{"lineNum":" 1528","line":"                }"},
{"lineNum":" 1529","line":"                buf_writer.writeAll(decimal_buf[0..end]) catch unreachable;"},
{"lineNum":" 1530","line":"            }"},
{"lineNum":" 1531","line":"            buf_writer.writeAll(unit.sep) catch unreachable;"},
{"lineNum":" 1532","line":"            return formatBuf(fbs.getWritten(), options, writer);"},
{"lineNum":" 1533","line":"        }"},
{"lineNum":" 1534","line":"    }"},
{"lineNum":" 1535","line":""},
{"lineNum":" 1536","line":"    formatInt(ns_remaining, 10, .lower, .{}, buf_writer) catch unreachable;"},
{"lineNum":" 1537","line":"    buf_writer.writeAll(\"ns\") catch unreachable;"},
{"lineNum":" 1538","line":"    return formatBuf(fbs.getWritten(), options, writer);"},
{"lineNum":" 1539","line":"}"},
{"lineNum":" 1540","line":""},
{"lineNum":" 1541","line":"/// Return a Formatter for number of nanoseconds according to its magnitude:"},
{"lineNum":" 1542","line":"/// [#y][#w][#d][#h][#m]#[.###][n|u|m]s"},
{"lineNum":" 1543","line":"pub fn fmtDuration(ns: u64) Formatter(formatDuration) {"},
{"lineNum":" 1544","line":"    const data = FormatDurationData{ .ns = ns };"},
{"lineNum":" 1545","line":"    return .{ .data = data };"},
{"lineNum":" 1546","line":"}"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"test \"fmtDuration\" {"},
{"lineNum":" 1549","line":"    var buf: [24]u8 = undefined;"},
{"lineNum":" 1550","line":"    inline for (.{"},
{"lineNum":" 1551","line":"        .{ .s = \"0ns\", .d = 0 },"},
{"lineNum":" 1552","line":"        .{ .s = \"1ns\", .d = 1 },"},
{"lineNum":" 1553","line":"        .{ .s = \"999ns\", .d = std.time.ns_per_us - 1 },"},
{"lineNum":" 1554","line":"        .{ .s = \"1us\", .d = std.time.ns_per_us },"},
{"lineNum":" 1555","line":"        .{ .s = \"1.45us\", .d = 1450 },"},
{"lineNum":" 1556","line":"        .{ .s = \"1.5us\", .d = 3 * std.time.ns_per_us / 2 },"},
{"lineNum":" 1557","line":"        .{ .s = \"14.5us\", .d = 14500 },"},
{"lineNum":" 1558","line":"        .{ .s = \"145us\", .d = 145000 },"},
{"lineNum":" 1559","line":"        .{ .s = \"999.999us\", .d = std.time.ns_per_ms - 1 },"},
{"lineNum":" 1560","line":"        .{ .s = \"1ms\", .d = std.time.ns_per_ms + 1 },"},
{"lineNum":" 1561","line":"        .{ .s = \"1.5ms\", .d = 3 * std.time.ns_per_ms / 2 },"},
{"lineNum":" 1562","line":"        .{ .s = \"1.11ms\", .d = 1110000 },"},
{"lineNum":" 1563","line":"        .{ .s = \"1.111ms\", .d = 1111000 },"},
{"lineNum":" 1564","line":"        .{ .s = \"1.111ms\", .d = 1111100 },"},
{"lineNum":" 1565","line":"        .{ .s = \"999.999ms\", .d = std.time.ns_per_s - 1 },"},
{"lineNum":" 1566","line":"        .{ .s = \"1s\", .d = std.time.ns_per_s },"},
{"lineNum":" 1567","line":"        .{ .s = \"59.999s\", .d = std.time.ns_per_min - 1 },"},
{"lineNum":" 1568","line":"        .{ .s = \"1m\", .d = std.time.ns_per_min },"},
{"lineNum":" 1569","line":"        .{ .s = \"1h\", .d = std.time.ns_per_hour },"},
{"lineNum":" 1570","line":"        .{ .s = \"1d\", .d = std.time.ns_per_day },"},
{"lineNum":" 1571","line":"        .{ .s = \"1w\", .d = std.time.ns_per_week },"},
{"lineNum":" 1572","line":"        .{ .s = \"1y\", .d = 365 * std.time.ns_per_day },"},
{"lineNum":" 1573","line":"        .{ .s = \"1y52w23h59m59.999s\", .d = 730 * std.time.ns_per_day - 1 }, // 365d = 52w1d"},
{"lineNum":" 1574","line":"        .{ .s = \"1y1h1.001s\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_s + std.time.ns_per_ms },"},
{"lineNum":" 1575","line":"        .{ .s = \"1y1h1s\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_s + 999 * std.time.ns_per_us },"},
{"lineNum":" 1576","line":"        .{ .s = \"1y1h999.999us\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms - 1 },"},
{"lineNum":" 1577","line":"        .{ .s = \"1y1h1ms\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms },"},
{"lineNum":" 1578","line":"        .{ .s = \"1y1h1ms\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms + 1 },"},
{"lineNum":" 1579","line":"        .{ .s = \"1y1m999ns\", .d = 365 * std.time.ns_per_day + std.time.ns_per_min + 999 },"},
{"lineNum":" 1580","line":"        .{ .s = \"584y49w23h34m33.709s\", .d = math.maxInt(u64) },"},
{"lineNum":" 1581","line":"    }) |tc| {"},
{"lineNum":" 1582","line":"        const slice = try bufPrint(&buf, \"{}\", .{fmtDuration(tc.d)});"},
{"lineNum":" 1583","line":"        try std.testing.expectEqualStrings(tc.s, slice);"},
{"lineNum":" 1584","line":"    }"},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"    inline for (.{"},
{"lineNum":" 1587","line":"        .{ .s = \"=======0ns\", .f = \"{s:=>10}\", .d = 0 },"},
{"lineNum":" 1588","line":"        .{ .s = \"1ns=======\", .f = \"{s:=<10}\", .d = 1 },"},
{"lineNum":" 1589","line":"        .{ .s = \"  999ns   \", .f = \"{s:^10}\", .d = std.time.ns_per_us - 1 },"},
{"lineNum":" 1590","line":"    }) |tc| {"},
{"lineNum":" 1591","line":"        const slice = try bufPrint(&buf, tc.f, .{fmtDuration(tc.d)});"},
{"lineNum":" 1592","line":"        try std.testing.expectEqualStrings(tc.s, slice);"},
{"lineNum":" 1593","line":"    }"},
{"lineNum":" 1594","line":"}"},
{"lineNum":" 1595","line":""},
{"lineNum":" 1596","line":"fn formatDurationSigned(ns: i64, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {"},
{"lineNum":" 1597","line":"    if (ns < 0) {"},
{"lineNum":" 1598","line":"        const data = FormatDurationData{ .ns = @as(u64, @intCast(-ns)), .negative = true };"},
{"lineNum":" 1599","line":"        try formatDuration(data, fmt, options, writer);"},
{"lineNum":" 1600","line":"    } else {"},
{"lineNum":" 1601","line":"        const data = FormatDurationData{ .ns = @as(u64, @intCast(ns)) };"},
{"lineNum":" 1602","line":"        try formatDuration(data, fmt, options, writer);"},
{"lineNum":" 1603","line":"    }"},
{"lineNum":" 1604","line":"}"},
{"lineNum":" 1605","line":""},
{"lineNum":" 1606","line":"/// Return a Formatter for number of nanoseconds according to its signed magnitude:"},
{"lineNum":" 1607","line":"/// [#y][#w][#d][#h][#m]#[.###][n|u|m]s"},
{"lineNum":" 1608","line":"pub fn fmtDurationSigned(ns: i64) Formatter(formatDurationSigned) {"},
{"lineNum":" 1609","line":"    return .{ .data = ns };"},
{"lineNum":" 1610","line":"}"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"test \"fmtDurationSigned\" {"},
{"lineNum":" 1613","line":"    var buf: [24]u8 = undefined;"},
{"lineNum":" 1614","line":"    inline for (.{"},
{"lineNum":" 1615","line":"        .{ .s = \"0ns\", .d = 0 },"},
{"lineNum":" 1616","line":"        .{ .s = \"1ns\", .d = 1 },"},
{"lineNum":" 1617","line":"        .{ .s = \"-1ns\", .d = -(1) },"},
{"lineNum":" 1618","line":"        .{ .s = \"999ns\", .d = std.time.ns_per_us - 1 },"},
{"lineNum":" 1619","line":"        .{ .s = \"-999ns\", .d = -(std.time.ns_per_us - 1) },"},
{"lineNum":" 1620","line":"        .{ .s = \"1us\", .d = std.time.ns_per_us },"},
{"lineNum":" 1621","line":"        .{ .s = \"-1us\", .d = -(std.time.ns_per_us) },"},
{"lineNum":" 1622","line":"        .{ .s = \"1.45us\", .d = 1450 },"},
{"lineNum":" 1623","line":"        .{ .s = \"-1.45us\", .d = -(1450) },"},
{"lineNum":" 1624","line":"        .{ .s = \"1.5us\", .d = 3 * std.time.ns_per_us / 2 },"},
{"lineNum":" 1625","line":"        .{ .s = \"-1.5us\", .d = -(3 * std.time.ns_per_us / 2) },"},
{"lineNum":" 1626","line":"        .{ .s = \"14.5us\", .d = 14500 },"},
{"lineNum":" 1627","line":"        .{ .s = \"-14.5us\", .d = -(14500) },"},
{"lineNum":" 1628","line":"        .{ .s = \"145us\", .d = 145000 },"},
{"lineNum":" 1629","line":"        .{ .s = \"-145us\", .d = -(145000) },"},
{"lineNum":" 1630","line":"        .{ .s = \"999.999us\", .d = std.time.ns_per_ms - 1 },"},
{"lineNum":" 1631","line":"        .{ .s = \"-999.999us\", .d = -(std.time.ns_per_ms - 1) },"},
{"lineNum":" 1632","line":"        .{ .s = \"1ms\", .d = std.time.ns_per_ms + 1 },"},
{"lineNum":" 1633","line":"        .{ .s = \"-1ms\", .d = -(std.time.ns_per_ms + 1) },"},
{"lineNum":" 1634","line":"        .{ .s = \"1.5ms\", .d = 3 * std.time.ns_per_ms / 2 },"},
{"lineNum":" 1635","line":"        .{ .s = \"-1.5ms\", .d = -(3 * std.time.ns_per_ms / 2) },"},
{"lineNum":" 1636","line":"        .{ .s = \"1.11ms\", .d = 1110000 },"},
{"lineNum":" 1637","line":"        .{ .s = \"-1.11ms\", .d = -(1110000) },"},
{"lineNum":" 1638","line":"        .{ .s = \"1.111ms\", .d = 1111000 },"},
{"lineNum":" 1639","line":"        .{ .s = \"-1.111ms\", .d = -(1111000) },"},
{"lineNum":" 1640","line":"        .{ .s = \"1.111ms\", .d = 1111100 },"},
{"lineNum":" 1641","line":"        .{ .s = \"-1.111ms\", .d = -(1111100) },"},
{"lineNum":" 1642","line":"        .{ .s = \"999.999ms\", .d = std.time.ns_per_s - 1 },"},
{"lineNum":" 1643","line":"        .{ .s = \"-999.999ms\", .d = -(std.time.ns_per_s - 1) },"},
{"lineNum":" 1644","line":"        .{ .s = \"1s\", .d = std.time.ns_per_s },"},
{"lineNum":" 1645","line":"        .{ .s = \"-1s\", .d = -(std.time.ns_per_s) },"},
{"lineNum":" 1646","line":"        .{ .s = \"59.999s\", .d = std.time.ns_per_min - 1 },"},
{"lineNum":" 1647","line":"        .{ .s = \"-59.999s\", .d = -(std.time.ns_per_min - 1) },"},
{"lineNum":" 1648","line":"        .{ .s = \"1m\", .d = std.time.ns_per_min },"},
{"lineNum":" 1649","line":"        .{ .s = \"-1m\", .d = -(std.time.ns_per_min) },"},
{"lineNum":" 1650","line":"        .{ .s = \"1h\", .d = std.time.ns_per_hour },"},
{"lineNum":" 1651","line":"        .{ .s = \"-1h\", .d = -(std.time.ns_per_hour) },"},
{"lineNum":" 1652","line":"        .{ .s = \"1d\", .d = std.time.ns_per_day },"},
{"lineNum":" 1653","line":"        .{ .s = \"-1d\", .d = -(std.time.ns_per_day) },"},
{"lineNum":" 1654","line":"        .{ .s = \"1w\", .d = std.time.ns_per_week },"},
{"lineNum":" 1655","line":"        .{ .s = \"-1w\", .d = -(std.time.ns_per_week) },"},
{"lineNum":" 1656","line":"        .{ .s = \"1y\", .d = 365 * std.time.ns_per_day },"},
{"lineNum":" 1657","line":"        .{ .s = \"-1y\", .d = -(365 * std.time.ns_per_day) },"},
{"lineNum":" 1658","line":"        .{ .s = \"1y52w23h59m59.999s\", .d = 730 * std.time.ns_per_day - 1 }, // 365d = 52w1d"},
{"lineNum":" 1659","line":"        .{ .s = \"-1y52w23h59m59.999s\", .d = -(730 * std.time.ns_per_day - 1) }, // 365d = 52w1d"},
{"lineNum":" 1660","line":"        .{ .s = \"1y1h1.001s\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_s + std.time.ns_per_ms },"},
{"lineNum":" 1661","line":"        .{ .s = \"-1y1h1.001s\", .d = -(365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_s + std.time.ns_per_ms) },"},
{"lineNum":" 1662","line":"        .{ .s = \"1y1h1s\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_s + 999 * std.time.ns_per_us },"},
{"lineNum":" 1663","line":"        .{ .s = \"-1y1h1s\", .d = -(365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_s + 999 * std.time.ns_per_us) },"},
{"lineNum":" 1664","line":"        .{ .s = \"1y1h999.999us\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms - 1 },"},
{"lineNum":" 1665","line":"        .{ .s = \"-1y1h999.999us\", .d = -(365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms - 1) },"},
{"lineNum":" 1666","line":"        .{ .s = \"1y1h1ms\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms },"},
{"lineNum":" 1667","line":"        .{ .s = \"-1y1h1ms\", .d = -(365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms) },"},
{"lineNum":" 1668","line":"        .{ .s = \"1y1h1ms\", .d = 365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms + 1 },"},
{"lineNum":" 1669","line":"        .{ .s = \"-1y1h1ms\", .d = -(365 * std.time.ns_per_day + std.time.ns_per_hour + std.time.ns_per_ms + 1) },"},
{"lineNum":" 1670","line":"        .{ .s = \"1y1m999ns\", .d = 365 * std.time.ns_per_day + std.time.ns_per_min + 999 },"},
{"lineNum":" 1671","line":"        .{ .s = \"-1y1m999ns\", .d = -(365 * std.time.ns_per_day + std.time.ns_per_min + 999) },"},
{"lineNum":" 1672","line":"        .{ .s = \"292y24w3d23h47m16.854s\", .d = math.maxInt(i64) },"},
{"lineNum":" 1673","line":"        .{ .s = \"-292y24w3d23h47m16.854s\", .d = math.minInt(i64) + 1 },"},
{"lineNum":" 1674","line":"    }) |tc| {"},
{"lineNum":" 1675","line":"        const slice = try bufPrint(&buf, \"{}\", .{fmtDurationSigned(tc.d)});"},
{"lineNum":" 1676","line":"        try std.testing.expectEqualStrings(tc.s, slice);"},
{"lineNum":" 1677","line":"    }"},
{"lineNum":" 1678","line":""},
{"lineNum":" 1679","line":"    inline for (.{"},
{"lineNum":" 1680","line":"        .{ .s = \"=======0ns\", .f = \"{s:=>10}\", .d = 0 },"},
{"lineNum":" 1681","line":"        .{ .s = \"1ns=======\", .f = \"{s:=<10}\", .d = 1 },"},
{"lineNum":" 1682","line":"        .{ .s = \"-1ns======\", .f = \"{s:=<10}\", .d = -(1) },"},
{"lineNum":" 1683","line":"        .{ .s = \"  -999ns  \", .f = \"{s:^10}\", .d = -(std.time.ns_per_us - 1) },"},
{"lineNum":" 1684","line":"    }) |tc| {"},
{"lineNum":" 1685","line":"        const slice = try bufPrint(&buf, tc.f, .{fmtDurationSigned(tc.d)});"},
{"lineNum":" 1686","line":"        try std.testing.expectEqualStrings(tc.s, slice);"},
{"lineNum":" 1687","line":"    }"},
{"lineNum":" 1688","line":"}"},
{"lineNum":" 1689","line":""},
{"lineNum":" 1690","line":"pub const ParseIntError = error{"},
{"lineNum":" 1691","line":"    /// The result cannot fit in the type specified"},
{"lineNum":" 1692","line":"    Overflow,"},
{"lineNum":" 1693","line":""},
{"lineNum":" 1694","line":"    /// The input was empty or contained an invalid character"},
{"lineNum":" 1695","line":"    InvalidCharacter,"},
{"lineNum":" 1696","line":"};"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"/// Creates a Formatter type from a format function. Wrapping data in Formatter(func) causes"},
{"lineNum":" 1699","line":"/// the data to be formatted using the given function `func`.  `func` must be of the following"},
{"lineNum":" 1700","line":"/// form:"},
{"lineNum":" 1701","line":"///"},
{"lineNum":" 1702","line":"///     fn formatExample("},
{"lineNum":" 1703","line":"///         data: T,"},
{"lineNum":" 1704","line":"///         comptime fmt: []const u8,"},
{"lineNum":" 1705","line":"///         options: std.fmt.FormatOptions,"},
{"lineNum":" 1706","line":"///         writer: anytype,"},
{"lineNum":" 1707","line":"///     ) !void;"},
{"lineNum":" 1708","line":"///"},
{"lineNum":" 1709","line":"pub fn Formatter(comptime format_fn: anytype) type {"},
{"lineNum":" 1710","line":"    const Data = @typeInfo(@TypeOf(format_fn)).Fn.params[0].type.?;"},
{"lineNum":" 1711","line":"    return struct {"},
{"lineNum":" 1712","line":"        data: Data,"},
{"lineNum":" 1713","line":"        pub fn format("},
{"lineNum":" 1714","line":"            self: @This(),"},
{"lineNum":" 1715","line":"            comptime fmt: []const u8,"},
{"lineNum":" 1716","line":"            options: std.fmt.FormatOptions,"},
{"lineNum":" 1717","line":"            writer: anytype,"},
{"lineNum":" 1718","line":"        ) @TypeOf(writer).Error!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1719","line":"            try format_fn(self.data, fmt, options, writer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1720","line":"        }"},
{"lineNum":" 1721","line":"    };"},
{"lineNum":" 1722","line":"}"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"/// Parses the string `buf` as signed or unsigned representation in the"},
{"lineNum":" 1725","line":"/// specified base of an integral value of type `T`."},
{"lineNum":" 1726","line":"///"},
{"lineNum":" 1727","line":"/// When `base` is zero the string prefix is examined to detect the true base:"},
{"lineNum":" 1728","line":"///  * A prefix of \"0b\" implies base=2,"},
{"lineNum":" 1729","line":"///  * A prefix of \"0o\" implies base=8,"},
{"lineNum":" 1730","line":"///  * A prefix of \"0x\" implies base=16,"},
{"lineNum":" 1731","line":"///  * Otherwise base=10 is assumed."},
{"lineNum":" 1732","line":"///"},
{"lineNum":" 1733","line":"/// Ignores \'_\' character in `buf`."},
{"lineNum":" 1734","line":"/// See also `parseUnsigned`."},
{"lineNum":" 1735","line":"pub fn parseInt(comptime T: type, buf: []const u8, base: u8) ParseIntError!T {"},
{"lineNum":" 1736","line":"    if (buf.len == 0) return error.InvalidCharacter;"},
{"lineNum":" 1737","line":"    if (buf[0] == \'+\') return parseWithSign(T, buf[1..], base, .pos);"},
{"lineNum":" 1738","line":"    if (buf[0] == \'-\') return parseWithSign(T, buf[1..], base, .neg);"},
{"lineNum":" 1739","line":"    return parseWithSign(T, buf, base, .pos);"},
{"lineNum":" 1740","line":"}"},
{"lineNum":" 1741","line":""},
{"lineNum":" 1742","line":"test \"parseInt\" {"},
{"lineNum":" 1743","line":"    try std.testing.expect((try parseInt(i32, \"-10\", 10)) == -10);"},
{"lineNum":" 1744","line":"    try std.testing.expect((try parseInt(i32, \"+10\", 10)) == 10);"},
{"lineNum":" 1745","line":"    try std.testing.expect((try parseInt(u32, \"+10\", 10)) == 10);"},
{"lineNum":" 1746","line":"    try std.testing.expectError(error.Overflow, parseInt(u32, \"-10\", 10));"},
{"lineNum":" 1747","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \" 10\", 10));"},
{"lineNum":" 1748","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"10 \", 10));"},
{"lineNum":" 1749","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"_10_\", 10));"},
{"lineNum":" 1750","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"0x_10_\", 10));"},
{"lineNum":" 1751","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"0x10_\", 10));"},
{"lineNum":" 1752","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"0x_10\", 10));"},
{"lineNum":" 1753","line":"    try std.testing.expect((try parseInt(u8, \"255\", 10)) == 255);"},
{"lineNum":" 1754","line":"    try std.testing.expectError(error.Overflow, parseInt(u8, \"256\", 10));"},
{"lineNum":" 1755","line":""},
{"lineNum":" 1756","line":"    // +0 and -0 should work for unsigned"},
{"lineNum":" 1757","line":"    try std.testing.expect((try parseInt(u8, \"-0\", 10)) == 0);"},
{"lineNum":" 1758","line":"    try std.testing.expect((try parseInt(u8, \"+0\", 10)) == 0);"},
{"lineNum":" 1759","line":""},
{"lineNum":" 1760","line":"    // ensure minInt is parsed correctly"},
{"lineNum":" 1761","line":"    try std.testing.expect((try parseInt(i1, \"-1\", 10)) == math.minInt(i1));"},
{"lineNum":" 1762","line":"    try std.testing.expect((try parseInt(i8, \"-128\", 10)) == math.minInt(i8));"},
{"lineNum":" 1763","line":"    try std.testing.expect((try parseInt(i43, \"-4398046511104\", 10)) == math.minInt(i43));"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"    // empty string or bare +- is invalid"},
{"lineNum":" 1766","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"\", 10));"},
{"lineNum":" 1767","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(i32, \"\", 10));"},
{"lineNum":" 1768","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"+\", 10));"},
{"lineNum":" 1769","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(i32, \"+\", 10));"},
{"lineNum":" 1770","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"-\", 10));"},
{"lineNum":" 1771","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(i32, \"-\", 10));"},
{"lineNum":" 1772","line":""},
{"lineNum":" 1773","line":"    // autodectect the base"},
{"lineNum":" 1774","line":"    try std.testing.expect((try parseInt(i32, \"111\", 0)) == 111);"},
{"lineNum":" 1775","line":"    try std.testing.expect((try parseInt(i32, \"1_1_1\", 0)) == 111);"},
{"lineNum":" 1776","line":"    try std.testing.expect((try parseInt(i32, \"1_1_1\", 0)) == 111);"},
{"lineNum":" 1777","line":"    try std.testing.expect((try parseInt(i32, \"+0b111\", 0)) == 7);"},
{"lineNum":" 1778","line":"    try std.testing.expect((try parseInt(i32, \"+0B111\", 0)) == 7);"},
{"lineNum":" 1779","line":"    try std.testing.expect((try parseInt(i32, \"+0b1_11\", 0)) == 7);"},
{"lineNum":" 1780","line":"    try std.testing.expect((try parseInt(i32, \"+0o111\", 0)) == 73);"},
{"lineNum":" 1781","line":"    try std.testing.expect((try parseInt(i32, \"+0O111\", 0)) == 73);"},
{"lineNum":" 1782","line":"    try std.testing.expect((try parseInt(i32, \"+0o11_1\", 0)) == 73);"},
{"lineNum":" 1783","line":"    try std.testing.expect((try parseInt(i32, \"+0x111\", 0)) == 273);"},
{"lineNum":" 1784","line":"    try std.testing.expect((try parseInt(i32, \"-0b111\", 0)) == -7);"},
{"lineNum":" 1785","line":"    try std.testing.expect((try parseInt(i32, \"-0b11_1\", 0)) == -7);"},
{"lineNum":" 1786","line":"    try std.testing.expect((try parseInt(i32, \"-0o111\", 0)) == -73);"},
{"lineNum":" 1787","line":"    try std.testing.expect((try parseInt(i32, \"-0x111\", 0)) == -273);"},
{"lineNum":" 1788","line":"    try std.testing.expect((try parseInt(i32, \"-0X111\", 0)) == -273);"},
{"lineNum":" 1789","line":"    try std.testing.expect((try parseInt(i32, \"-0x1_11\", 0)) == -273);"},
{"lineNum":" 1790","line":""},
{"lineNum":" 1791","line":"    // bare binary/octal/decimal prefix is invalid"},
{"lineNum":" 1792","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"0b\", 0));"},
{"lineNum":" 1793","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"0o\", 0));"},
{"lineNum":" 1794","line":"    try std.testing.expectError(error.InvalidCharacter, parseInt(u32, \"0x\", 0));"},
{"lineNum":" 1795","line":"}"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"fn parseWithSign("},
{"lineNum":" 1798","line":"    comptime T: type,"},
{"lineNum":" 1799","line":"    buf: []const u8,"},
{"lineNum":" 1800","line":"    base: u8,"},
{"lineNum":" 1801","line":"    comptime sign: enum { pos, neg },"},
{"lineNum":" 1802","line":") ParseIntError!T {"},
{"lineNum":" 1803","line":"    if (buf.len == 0) return error.InvalidCharacter;"},
{"lineNum":" 1804","line":""},
{"lineNum":" 1805","line":"    var buf_base = base;"},
{"lineNum":" 1806","line":"    var buf_start = buf;"},
{"lineNum":" 1807","line":"    if (base == 0) {"},
{"lineNum":" 1808","line":"        // Treat is as a decimal number by default."},
{"lineNum":" 1809","line":"        buf_base = 10;"},
{"lineNum":" 1810","line":"        // Detect the base by looking at buf prefix."},
{"lineNum":" 1811","line":"        if (buf.len > 2 and buf[0] == \'0\') {"},
{"lineNum":" 1812","line":"            switch (std.ascii.toLower(buf[1])) {"},
{"lineNum":" 1813","line":"                \'b\' => {"},
{"lineNum":" 1814","line":"                    buf_base = 2;"},
{"lineNum":" 1815","line":"                    buf_start = buf[2..];"},
{"lineNum":" 1816","line":"                },"},
{"lineNum":" 1817","line":"                \'o\' => {"},
{"lineNum":" 1818","line":"                    buf_base = 8;"},
{"lineNum":" 1819","line":"                    buf_start = buf[2..];"},
{"lineNum":" 1820","line":"                },"},
{"lineNum":" 1821","line":"                \'x\' => {"},
{"lineNum":" 1822","line":"                    buf_base = 16;"},
{"lineNum":" 1823","line":"                    buf_start = buf[2..];"},
{"lineNum":" 1824","line":"                },"},
{"lineNum":" 1825","line":"                else => {},"},
{"lineNum":" 1826","line":"            }"},
{"lineNum":" 1827","line":"        }"},
{"lineNum":" 1828","line":"    }"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"    const add = switch (sign) {"},
{"lineNum":" 1831","line":"        .pos => math.add,"},
{"lineNum":" 1832","line":"        .neg => math.sub,"},
{"lineNum":" 1833","line":"    };"},
{"lineNum":" 1834","line":""},
{"lineNum":" 1835","line":"    var x: T = 0;"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"    if (buf_start[0] == \'_\' or buf_start[buf_start.len - 1] == \'_\') return error.InvalidCharacter;"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"    for (buf_start) |c| {"},
{"lineNum":" 1840","line":"        if (c == \'_\') continue;"},
{"lineNum":" 1841","line":"        const digit = try charToDigit(c, buf_base);"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":"        if (x != 0) {"},
{"lineNum":" 1844","line":"            x = try math.mul(T, x, math.cast(T, buf_base) orelse return error.Overflow);"},
{"lineNum":" 1845","line":"        } else if (sign == .neg) {"},
{"lineNum":" 1846","line":"            // The first digit of a negative number."},
{"lineNum":" 1847","line":"            // Consider parsing \"-4\" as an i3."},
{"lineNum":" 1848","line":"            // This should work, but positive 4 overflows i3, so we can\'t cast the digit to T and subtract."},
{"lineNum":" 1849","line":"            x = math.cast(T, -@as(i8, @intCast(digit))) orelse return error.Overflow;"},
{"lineNum":" 1850","line":"            continue;"},
{"lineNum":" 1851","line":"        }"},
{"lineNum":" 1852","line":"        x = try add(T, x, math.cast(T, digit) orelse return error.Overflow);"},
{"lineNum":" 1853","line":"    }"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"    return x;"},
{"lineNum":" 1856","line":"}"},
{"lineNum":" 1857","line":""},
{"lineNum":" 1858","line":"/// Parses the string `buf` as unsigned representation in the specified base"},
{"lineNum":" 1859","line":"/// of an integral value of type `T`."},
{"lineNum":" 1860","line":"///"},
{"lineNum":" 1861","line":"/// When `base` is zero the string prefix is examined to detect the true base:"},
{"lineNum":" 1862","line":"///  * A prefix of \"0b\" implies base=2,"},
{"lineNum":" 1863","line":"///  * A prefix of \"0o\" implies base=8,"},
{"lineNum":" 1864","line":"///  * A prefix of \"0x\" implies base=16,"},
{"lineNum":" 1865","line":"///  * Otherwise base=10 is assumed."},
{"lineNum":" 1866","line":"///"},
{"lineNum":" 1867","line":"/// Ignores \'_\' character in `buf`."},
{"lineNum":" 1868","line":"/// See also `parseInt`."},
{"lineNum":" 1869","line":"pub fn parseUnsigned(comptime T: type, buf: []const u8, base: u8) ParseIntError!T {"},
{"lineNum":" 1870","line":"    return parseWithSign(T, buf, base, .pos);"},
{"lineNum":" 1871","line":"}"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"test \"parseUnsigned\" {"},
{"lineNum":" 1874","line":"    try std.testing.expect((try parseUnsigned(u16, \"050124\", 10)) == 50124);"},
{"lineNum":" 1875","line":"    try std.testing.expect((try parseUnsigned(u16, \"65535\", 10)) == 65535);"},
{"lineNum":" 1876","line":"    try std.testing.expect((try parseUnsigned(u16, \"65_535\", 10)) == 65535);"},
{"lineNum":" 1877","line":"    try std.testing.expectError(error.Overflow, parseUnsigned(u16, \"65536\", 10));"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"    try std.testing.expect((try parseUnsigned(u64, \"0ffffffffffffffff\", 16)) == 0xffffffffffffffff);"},
{"lineNum":" 1880","line":"    try std.testing.expect((try parseUnsigned(u64, \"0f_fff_fff_fff_fff_fff\", 16)) == 0xffffffffffffffff);"},
{"lineNum":" 1881","line":"    try std.testing.expectError(error.Overflow, parseUnsigned(u64, \"10000000000000000\", 16));"},
{"lineNum":" 1882","line":""},
{"lineNum":" 1883","line":"    try std.testing.expect((try parseUnsigned(u32, \"DeadBeef\", 16)) == 0xDEADBEEF);"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"    try std.testing.expect((try parseUnsigned(u7, \"1\", 10)) == 1);"},
{"lineNum":" 1886","line":"    try std.testing.expect((try parseUnsigned(u7, \"1000\", 2)) == 8);"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"    try std.testing.expectError(error.InvalidCharacter, parseUnsigned(u32, \"f\", 10));"},
{"lineNum":" 1889","line":"    try std.testing.expectError(error.InvalidCharacter, parseUnsigned(u8, \"109\", 8));"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"    try std.testing.expect((try parseUnsigned(u32, \"NUMBER\", 36)) == 1442151747);"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"    // these numbers should fit even though the base itself doesn\'t fit in the destination type"},
{"lineNum":" 1894","line":"    try std.testing.expect((try parseUnsigned(u1, \"0\", 10)) == 0);"},
{"lineNum":" 1895","line":"    try std.testing.expect((try parseUnsigned(u1, \"1\", 10)) == 1);"},
{"lineNum":" 1896","line":"    try std.testing.expectError(error.Overflow, parseUnsigned(u1, \"2\", 10));"},
{"lineNum":" 1897","line":"    try std.testing.expect((try parseUnsigned(u1, \"001\", 16)) == 1);"},
{"lineNum":" 1898","line":"    try std.testing.expect((try parseUnsigned(u2, \"3\", 16)) == 3);"},
{"lineNum":" 1899","line":"    try std.testing.expectError(error.Overflow, parseUnsigned(u2, \"4\", 16));"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"    // parseUnsigned does not expect a sign"},
{"lineNum":" 1902","line":"    try std.testing.expectError(error.InvalidCharacter, parseUnsigned(u8, \"+0\", 10));"},
{"lineNum":" 1903","line":"    try std.testing.expectError(error.InvalidCharacter, parseUnsigned(u8, \"-0\", 10));"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"    // test empty string error"},
{"lineNum":" 1906","line":"    try std.testing.expectError(error.InvalidCharacter, parseUnsigned(u8, \"\", 10));"},
{"lineNum":" 1907","line":"}"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"/// Parses a number like \'2G\', \'2Gi\', or \'2GiB\'."},
{"lineNum":" 1910","line":"pub fn parseIntSizeSuffix(buf: []const u8, digit_base: u8) ParseIntError!usize {"},
{"lineNum":" 1911","line":"    var without_B = buf;"},
{"lineNum":" 1912","line":"    if (mem.endsWith(u8, buf, \"B\")) without_B.len -= 1;"},
{"lineNum":" 1913","line":"    var without_i = without_B;"},
{"lineNum":" 1914","line":"    var magnitude_base: usize = 1000;"},
{"lineNum":" 1915","line":"    if (mem.endsWith(u8, without_B, \"i\")) {"},
{"lineNum":" 1916","line":"        without_i.len -= 1;"},
{"lineNum":" 1917","line":"        magnitude_base = 1024;"},
{"lineNum":" 1918","line":"    }"},
{"lineNum":" 1919","line":"    if (without_i.len == 0) return error.InvalidCharacter;"},
{"lineNum":" 1920","line":"    const orders_of_magnitude: usize = switch (without_i[without_i.len - 1]) {"},
{"lineNum":" 1921","line":"        \'k\', \'K\' => 1,"},
{"lineNum":" 1922","line":"        \'M\' => 2,"},
{"lineNum":" 1923","line":"        \'G\' => 3,"},
{"lineNum":" 1924","line":"        \'T\' => 4,"},
{"lineNum":" 1925","line":"        \'P\' => 5,"},
{"lineNum":" 1926","line":"        \'E\' => 6,"},
{"lineNum":" 1927","line":"        \'Z\' => 7,"},
{"lineNum":" 1928","line":"        \'Y\' => 8,"},
{"lineNum":" 1929","line":"        \'R\' => 9,"},
{"lineNum":" 1930","line":"        \'Q\' => 10,"},
{"lineNum":" 1931","line":"        else => 0,"},
{"lineNum":" 1932","line":"    };"},
{"lineNum":" 1933","line":"    var without_suffix = without_i;"},
{"lineNum":" 1934","line":"    if (orders_of_magnitude > 0) {"},
{"lineNum":" 1935","line":"        without_suffix.len -= 1;"},
{"lineNum":" 1936","line":"    } else if (without_i.len != without_B.len) {"},
{"lineNum":" 1937","line":"        return error.InvalidCharacter;"},
{"lineNum":" 1938","line":"    }"},
{"lineNum":" 1939","line":"    const multiplier = math.powi(usize, magnitude_base, orders_of_magnitude) catch |err| switch (err) {"},
{"lineNum":" 1940","line":"        error.Underflow => unreachable,"},
{"lineNum":" 1941","line":"        error.Overflow => return error.Overflow,"},
{"lineNum":" 1942","line":"    };"},
{"lineNum":" 1943","line":"    const number = try std.fmt.parseInt(usize, without_suffix, digit_base);"},
{"lineNum":" 1944","line":"    return math.mul(usize, number, multiplier);"},
{"lineNum":" 1945","line":"}"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"test \"parseIntSizeSuffix\" {"},
{"lineNum":" 1948","line":"    try std.testing.expect(try parseIntSizeSuffix(\"2\", 10) == 2);"},
{"lineNum":" 1949","line":"    try std.testing.expect(try parseIntSizeSuffix(\"2B\", 10) == 2);"},
{"lineNum":" 1950","line":"    try std.testing.expect(try parseIntSizeSuffix(\"2kB\", 10) == 2000);"},
{"lineNum":" 1951","line":"    try std.testing.expect(try parseIntSizeSuffix(\"2k\", 10) == 2000);"},
{"lineNum":" 1952","line":"    try std.testing.expect(try parseIntSizeSuffix(\"2KiB\", 10) == 2048);"},
{"lineNum":" 1953","line":"    try std.testing.expect(try parseIntSizeSuffix(\"2Ki\", 10) == 2048);"},
{"lineNum":" 1954","line":"    try std.testing.expect(try parseIntSizeSuffix(\"aKiB\", 16) == 10240);"},
{"lineNum":" 1955","line":"    try std.testing.expect(parseIntSizeSuffix(\"\", 10) == error.InvalidCharacter);"},
{"lineNum":" 1956","line":"    try std.testing.expect(parseIntSizeSuffix(\"2iB\", 10) == error.InvalidCharacter);"},
{"lineNum":" 1957","line":"}"},
{"lineNum":" 1958","line":""},
{"lineNum":" 1959","line":"pub const parseFloat = @import(\"fmt/parse_float.zig\").parseFloat;"},
{"lineNum":" 1960","line":"pub const ParseFloatError = @import(\"fmt/parse_float.zig\").ParseFloatError;"},
{"lineNum":" 1961","line":""},
{"lineNum":" 1962","line":"test {"},
{"lineNum":" 1963","line":"    _ = &parseFloat;"},
{"lineNum":" 1964","line":"}"},
{"lineNum":" 1965","line":""},
{"lineNum":" 1966","line":"pub fn charToDigit(c: u8, base: u8) (error{InvalidCharacter}!u8) {"},
{"lineNum":" 1967","line":"    const value = switch (c) {"},
{"lineNum":" 1968","line":"        \'0\'...\'9\' => c - \'0\',"},
{"lineNum":" 1969","line":"        \'A\'...\'Z\' => c - \'A\' + 10,"},
{"lineNum":" 1970","line":"        \'a\'...\'z\' => c - \'a\' + 10,"},
{"lineNum":" 1971","line":"        else => return error.InvalidCharacter,"},
{"lineNum":" 1972","line":"    };"},
{"lineNum":" 1973","line":""},
{"lineNum":" 1974","line":"    if (value >= base) return error.InvalidCharacter;"},
{"lineNum":" 1975","line":""},
{"lineNum":" 1976","line":"    return value;"},
{"lineNum":" 1977","line":"}"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"pub fn digitToChar(digit: u8, case: Case) u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1980","line":"    return switch (digit) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1981","line":"        0...9 => digit + \'0\',","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1982","line":"        10...35 => digit + ((if (case == .upper) @as(u8, \'A\') else @as(u8, \'a\')) - 10),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1983","line":"        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1984","line":"    };"},
{"lineNum":" 1985","line":"}"},
{"lineNum":" 1986","line":""},
{"lineNum":" 1987","line":"pub const BufPrintError = error{"},
{"lineNum":" 1988","line":"    /// As much as possible was written to the buffer, but it was too small to fit all the printed bytes."},
{"lineNum":" 1989","line":"    NoSpaceLeft,"},
{"lineNum":" 1990","line":"};"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"/// print a Formatter string into `buf`. Actually just a thin wrapper around `format` and `fixedBufferStream`."},
{"lineNum":" 1993","line":"/// returns a slice of the bytes printed to."},
{"lineNum":" 1994","line":"pub fn bufPrint(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![]u8 {","class":"linePartCov","hits":"24","order":"602","possible_hits":"131",},
{"lineNum":" 1995","line":"    var fbs = std.io.fixedBufferStream(buf);","class":"linePartCov","hits":"24","order":"603","possible_hits":"131",},
{"lineNum":" 1996","line":"    try format(fbs.writer(), fmt, args);","class":"linePartCov","hits":"24","order":"606","possible_hits":"131",},
{"lineNum":" 1997","line":"    return fbs.getWritten();","class":"linePartCov","hits":"24","order":"636","possible_hits":"131",},
{"lineNum":" 1998","line":"}"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":"pub fn bufPrintZ(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![:0]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2001","line":"    const result = try bufPrint(buf, fmt ++ \"\\x00\", args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2002","line":"    return result[0 .. result.len - 1 :0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2003","line":"}"},
{"lineNum":" 2004","line":""},
{"lineNum":" 2005","line":"/// Count the characters needed for format. Useful for preallocating memory"},
{"lineNum":" 2006","line":"pub fn count(comptime fmt: []const u8, args: anytype) u64 {","class":"linePartCov","hits":"19","order":"1407","possible_hits":"97",},
{"lineNum":" 2007","line":"    var counting_writer = std.io.countingWriter(std.io.null_writer);","class":"linePartCov","hits":"19","order":"1408","possible_hits":"97",},
{"lineNum":" 2008","line":"    format(counting_writer.writer(), fmt, args) catch |err| switch (err) {};","class":"linePartCov","hits":"19","order":"1411","possible_hits":"97",},
{"lineNum":" 2009","line":"    return counting_writer.bytes_written;","class":"linePartCov","hits":"19","order":"1439","possible_hits":"97",},
{"lineNum":" 2010","line":"}"},
{"lineNum":" 2011","line":""},
{"lineNum":" 2012","line":"pub const AllocPrintError = error{OutOfMemory};"},
{"lineNum":" 2013","line":""},
{"lineNum":" 2014","line":"pub fn allocPrint(allocator: mem.Allocator, comptime fmt: []const u8, args: anytype) AllocPrintError![]u8 {","class":"linePartCov","hits":"19","order":"1405","possible_hits":"97",},
{"lineNum":" 2015","line":"    const size = math.cast(usize, count(fmt, args)) orelse return error.OutOfMemory;","class":"linePartCov","hits":"38","order":"1406","possible_hits":"194",},
{"lineNum":" 2016","line":"    const buf = try allocator.alloc(u8, size);","class":"linePartCov","hits":"19","order":"1443","possible_hits":"194",},
{"lineNum":" 2017","line":"    return bufPrint(buf, fmt, args) catch |err| switch (err) {","class":"linePartCov","hits":"38","order":"1446","possible_hits":"194",},
{"lineNum":" 2018","line":"        error.NoSpaceLeft => unreachable, // we just counted the size above","class":"lineNoCov","hits":"0","possible_hits":"97",},
{"lineNum":" 2019","line":"    };"},
{"lineNum":" 2020","line":"}"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"pub fn allocPrintZ(allocator: mem.Allocator, comptime fmt: []const u8, args: anytype) AllocPrintError![:0]u8 {"},
{"lineNum":" 2023","line":"    const result = try allocPrint(allocator, fmt ++ \"\\x00\", args);"},
{"lineNum":" 2024","line":"    return result[0 .. result.len - 1 :0];"},
{"lineNum":" 2025","line":"}"},
{"lineNum":" 2026","line":""},
{"lineNum":" 2027","line":"test \"bufPrintInt\" {"},
{"lineNum":" 2028","line":"    var buffer: [100]u8 = undefined;"},
{"lineNum":" 2029","line":"    const buf = buffer[0..];"},
{"lineNum":" 2030","line":""},
{"lineNum":" 2031","line":"    try std.testing.expectEqualSlices(u8, \"-1\", bufPrintIntToSlice(buf, @as(i1, -1), 10, .lower, FormatOptions{}));"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"    try std.testing.expectEqualSlices(u8, \"-101111000110000101001110\", bufPrintIntToSlice(buf, @as(i32, -12345678), 2, .lower, FormatOptions{}));"},
{"lineNum":" 2034","line":"    try std.testing.expectEqualSlices(u8, \"-12345678\", bufPrintIntToSlice(buf, @as(i32, -12345678), 10, .lower, FormatOptions{}));"},
{"lineNum":" 2035","line":"    try std.testing.expectEqualSlices(u8, \"-bc614e\", bufPrintIntToSlice(buf, @as(i32, -12345678), 16, .lower, FormatOptions{}));"},
{"lineNum":" 2036","line":"    try std.testing.expectEqualSlices(u8, \"-BC614E\", bufPrintIntToSlice(buf, @as(i32, -12345678), 16, .upper, FormatOptions{}));"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"    try std.testing.expectEqualSlices(u8, \"12345678\", bufPrintIntToSlice(buf, @as(u32, 12345678), 10, .upper, FormatOptions{}));"},
{"lineNum":" 2039","line":""},
{"lineNum":" 2040","line":"    try std.testing.expectEqualSlices(u8, \"   666\", bufPrintIntToSlice(buf, @as(u32, 666), 10, .lower, FormatOptions{ .width = 6 }));"},
{"lineNum":" 2041","line":"    try std.testing.expectEqualSlices(u8, \"  1234\", bufPrintIntToSlice(buf, @as(u32, 0x1234), 16, .lower, FormatOptions{ .width = 6 }));"},
{"lineNum":" 2042","line":"    try std.testing.expectEqualSlices(u8, \"1234\", bufPrintIntToSlice(buf, @as(u32, 0x1234), 16, .lower, FormatOptions{ .width = 1 }));"},
{"lineNum":" 2043","line":""},
{"lineNum":" 2044","line":"    try std.testing.expectEqualSlices(u8, \"+42\", bufPrintIntToSlice(buf, @as(i32, 42), 10, .lower, FormatOptions{ .width = 3 }));"},
{"lineNum":" 2045","line":"    try std.testing.expectEqualSlices(u8, \"-42\", bufPrintIntToSlice(buf, @as(i32, -42), 10, .lower, FormatOptions{ .width = 3 }));"},
{"lineNum":" 2046","line":"}"},
{"lineNum":" 2047","line":""},
{"lineNum":" 2048","line":"pub fn bufPrintIntToSlice(buf: []u8, value: anytype, base: u8, case: Case, options: FormatOptions) []u8 {"},
{"lineNum":" 2049","line":"    return buf[0..formatIntBuf(buf, value, base, case, options)];"},
{"lineNum":" 2050","line":"}"},
{"lineNum":" 2051","line":""},
{"lineNum":" 2052","line":"pub inline fn comptimePrint(comptime fmt: []const u8, args: anytype) *const [count(fmt, args):0]u8 {"},
{"lineNum":" 2053","line":"    comptime {"},
{"lineNum":" 2054","line":"        var buf: [count(fmt, args):0]u8 = undefined;"},
{"lineNum":" 2055","line":"        _ = bufPrint(&buf, fmt, args) catch unreachable;"},
{"lineNum":" 2056","line":"        buf[buf.len] = 0;"},
{"lineNum":" 2057","line":"        return &buf;"},
{"lineNum":" 2058","line":"    }"},
{"lineNum":" 2059","line":"}"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"test \"comptimePrint\" {"},
{"lineNum":" 2062","line":"    @setEvalBranchQuota(2000);"},
{"lineNum":" 2063","line":"    try std.testing.expectEqual(*const [3:0]u8, @TypeOf(comptimePrint(\"{}\", .{100})));"},
{"lineNum":" 2064","line":"    try std.testing.expectEqualSlices(u8, \"100\", comptimePrint(\"{}\", .{100}));"},
{"lineNum":" 2065","line":"}"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"test \"parse u64 digit too big\" {"},
{"lineNum":" 2068","line":"    _ = parseUnsigned(u64, \"123a\", 10) catch |err| {"},
{"lineNum":" 2069","line":"        if (err == error.InvalidCharacter) return;"},
{"lineNum":" 2070","line":"        unreachable;"},
{"lineNum":" 2071","line":"    };"},
{"lineNum":" 2072","line":"    unreachable;"},
{"lineNum":" 2073","line":"}"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"test \"parse unsigned comptime\" {"},
{"lineNum":" 2076","line":"    comptime {"},
{"lineNum":" 2077","line":"        try std.testing.expect((try parseUnsigned(usize, \"2\", 10)) == 2);"},
{"lineNum":" 2078","line":"    }"},
{"lineNum":" 2079","line":"}"},
{"lineNum":" 2080","line":""},
{"lineNum":" 2081","line":"test \"escaped braces\" {"},
{"lineNum":" 2082","line":"    try expectFmt(\"escaped: {{foo}}\\n\", \"escaped: {{{{foo}}}}\\n\", .{});"},
{"lineNum":" 2083","line":"    try expectFmt(\"escaped: {foo}\\n\", \"escaped: {{foo}}\\n\", .{});"},
{"lineNum":" 2084","line":"}"},
{"lineNum":" 2085","line":""},
{"lineNum":" 2086","line":"test \"optional\" {"},
{"lineNum":" 2087","line":"    {"},
{"lineNum":" 2088","line":"        const value: ?i32 = 1234;"},
{"lineNum":" 2089","line":"        try expectFmt(\"optional: 1234\\n\", \"optional: {?}\\n\", .{value});"},
{"lineNum":" 2090","line":"        try expectFmt(\"optional: 1234\\n\", \"optional: {?d}\\n\", .{value});"},
{"lineNum":" 2091","line":"        try expectFmt(\"optional: 4d2\\n\", \"optional: {?x}\\n\", .{value});"},
{"lineNum":" 2092","line":"    }"},
{"lineNum":" 2093","line":"    {"},
{"lineNum":" 2094","line":"        const value: ?[]const u8 = \"string\";"},
{"lineNum":" 2095","line":"        try expectFmt(\"optional: string\\n\", \"optional: {?s}\\n\", .{value});"},
{"lineNum":" 2096","line":"    }"},
{"lineNum":" 2097","line":"    {"},
{"lineNum":" 2098","line":"        const value: ?i32 = null;"},
{"lineNum":" 2099","line":"        try expectFmt(\"optional: null\\n\", \"optional: {?}\\n\", .{value});"},
{"lineNum":" 2100","line":"    }"},
{"lineNum":" 2101","line":"    {"},
{"lineNum":" 2102","line":"        const value = @as(?*i32, @ptrFromInt(0xf000d000));"},
{"lineNum":" 2103","line":"        try expectFmt(\"optional: *i32@f000d000\\n\", \"optional: {*}\\n\", .{value});"},
{"lineNum":" 2104","line":"    }"},
{"lineNum":" 2105","line":"}"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"test \"error\" {"},
{"lineNum":" 2108","line":"    {"},
{"lineNum":" 2109","line":"        const value: anyerror!i32 = 1234;"},
{"lineNum":" 2110","line":"        try expectFmt(\"error union: 1234\\n\", \"error union: {!}\\n\", .{value});"},
{"lineNum":" 2111","line":"        try expectFmt(\"error union: 1234\\n\", \"error union: {!d}\\n\", .{value});"},
{"lineNum":" 2112","line":"        try expectFmt(\"error union: 4d2\\n\", \"error union: {!x}\\n\", .{value});"},
{"lineNum":" 2113","line":"    }"},
{"lineNum":" 2114","line":"    {"},
{"lineNum":" 2115","line":"        const value: anyerror![]const u8 = \"string\";"},
{"lineNum":" 2116","line":"        try expectFmt(\"error union: string\\n\", \"error union: {!s}\\n\", .{value});"},
{"lineNum":" 2117","line":"    }"},
{"lineNum":" 2118","line":"    {"},
{"lineNum":" 2119","line":"        const value: anyerror!i32 = error.InvalidChar;"},
{"lineNum":" 2120","line":"        try expectFmt(\"error union: error.InvalidChar\\n\", \"error union: {!}\\n\", .{value});"},
{"lineNum":" 2121","line":"    }"},
{"lineNum":" 2122","line":"}"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"test \"int.small\" {"},
{"lineNum":" 2125","line":"    {"},
{"lineNum":" 2126","line":"        const value: u3 = 0b101;"},
{"lineNum":" 2127","line":"        try expectFmt(\"u3: 5\\n\", \"u3: {}\\n\", .{value});"},
{"lineNum":" 2128","line":"    }"},
{"lineNum":" 2129","line":"}"},
{"lineNum":" 2130","line":""},
{"lineNum":" 2131","line":"test \"int.specifier\" {"},
{"lineNum":" 2132","line":"    {"},
{"lineNum":" 2133","line":"        const value: u8 = \'a\';"},
{"lineNum":" 2134","line":"        try expectFmt(\"u8: a\\n\", \"u8: {c}\\n\", .{value});"},
{"lineNum":" 2135","line":"    }"},
{"lineNum":" 2136","line":"    {"},
{"lineNum":" 2137","line":"        const value: u8 = 0b1100;"},
{"lineNum":" 2138","line":"        try expectFmt(\"u8: 0b1100\\n\", \"u8: 0b{b}\\n\", .{value});"},
{"lineNum":" 2139","line":"    }"},
{"lineNum":" 2140","line":"    {"},
{"lineNum":" 2141","line":"        const value: u16 = 0o1234;"},
{"lineNum":" 2142","line":"        try expectFmt(\"u16: 0o1234\\n\", \"u16: 0o{o}\\n\", .{value});"},
{"lineNum":" 2143","line":"    }"},
{"lineNum":" 2144","line":"    {"},
{"lineNum":" 2145","line":"        const value: u8 = \'a\';"},
{"lineNum":" 2146","line":"        try expectFmt(\"UTF-8: a\\n\", \"UTF-8: {u}\\n\", .{value});"},
{"lineNum":" 2147","line":"    }"},
{"lineNum":" 2148","line":"    {"},
{"lineNum":" 2149","line":"        const value: u21 = 0x1F310;"},
{"lineNum":" 2150","line":"        try expectFmt(\"UTF-8: 🌐\\n\", \"UTF-8: {u}\\n\", .{value});"},
{"lineNum":" 2151","line":"    }"},
{"lineNum":" 2152","line":"    {"},
{"lineNum":" 2153","line":"        const value: u21 = 0xD800;"},
{"lineNum":" 2154","line":"        try expectFmt(\"UTF-8: �\\n\", \"UTF-8: {u}\\n\", .{value});"},
{"lineNum":" 2155","line":"    }"},
{"lineNum":" 2156","line":"    {"},
{"lineNum":" 2157","line":"        const value: u21 = 0x110001;"},
{"lineNum":" 2158","line":"        try expectFmt(\"UTF-8: �\\n\", \"UTF-8: {u}\\n\", .{value});"},
{"lineNum":" 2159","line":"    }"},
{"lineNum":" 2160","line":"}"},
{"lineNum":" 2161","line":""},
{"lineNum":" 2162","line":"test \"int.padded\" {"},
{"lineNum":" 2163","line":"    try expectFmt(\"u8: \'   1\'\", \"u8: \'{:4}\'\", .{@as(u8, 1)});"},
{"lineNum":" 2164","line":"    try expectFmt(\"u8: \'1000\'\", \"u8: \'{:0<4}\'\", .{@as(u8, 1)});"},
{"lineNum":" 2165","line":"    try expectFmt(\"u8: \'0001\'\", \"u8: \'{:0>4}\'\", .{@as(u8, 1)});"},
{"lineNum":" 2166","line":"    try expectFmt(\"u8: \'0100\'\", \"u8: \'{:0^4}\'\", .{@as(u8, 1)});"},
{"lineNum":" 2167","line":"    try expectFmt(\"i8: \'-1  \'\", \"i8: \'{:<4}\'\", .{@as(i8, -1)});"},
{"lineNum":" 2168","line":"    try expectFmt(\"i8: \'  -1\'\", \"i8: \'{:>4}\'\", .{@as(i8, -1)});"},
{"lineNum":" 2169","line":"    try expectFmt(\"i8: \' -1 \'\", \"i8: \'{:^4}\'\", .{@as(i8, -1)});"},
{"lineNum":" 2170","line":"    try expectFmt(\"i16: \'-1234\'\", \"i16: \'{:4}\'\", .{@as(i16, -1234)});"},
{"lineNum":" 2171","line":"    try expectFmt(\"i16: \'+1234\'\", \"i16: \'{:4}\'\", .{@as(i16, 1234)});"},
{"lineNum":" 2172","line":"    try expectFmt(\"i16: \'-12345\'\", \"i16: \'{:4}\'\", .{@as(i16, -12345)});"},
{"lineNum":" 2173","line":"    try expectFmt(\"i16: \'+12345\'\", \"i16: \'{:4}\'\", .{@as(i16, 12345)});"},
{"lineNum":" 2174","line":"    try expectFmt(\"u16: \'12345\'\", \"u16: \'{:4}\'\", .{@as(u16, 12345)});"},
{"lineNum":" 2175","line":""},
{"lineNum":" 2176","line":"    try expectFmt(\"UTF-8: \'ü   \'\", \"UTF-8: \'{u:<4}\'\", .{\'ü\'});"},
{"lineNum":" 2177","line":"    try expectFmt(\"UTF-8: \'   ü\'\", \"UTF-8: \'{u:>4}\'\", .{\'ü\'});"},
{"lineNum":" 2178","line":"    try expectFmt(\"UTF-8: \' ü  \'\", \"UTF-8: \'{u:^4}\'\", .{\'ü\'});"},
{"lineNum":" 2179","line":"}"},
{"lineNum":" 2180","line":""},
{"lineNum":" 2181","line":"test \"buffer\" {"},
{"lineNum":" 2182","line":"    {"},
{"lineNum":" 2183","line":"        var buf1: [32]u8 = undefined;"},
{"lineNum":" 2184","line":"        var fbs = std.io.fixedBufferStream(&buf1);"},
{"lineNum":" 2185","line":"        try formatType(1234, \"\", FormatOptions{}, fbs.writer(), std.options.fmt_max_depth);"},
{"lineNum":" 2186","line":"        try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"1234\"));"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"        fbs.reset();"},
{"lineNum":" 2189","line":"        try formatType(\'a\', \"c\", FormatOptions{}, fbs.writer(), std.options.fmt_max_depth);"},
{"lineNum":" 2190","line":"        try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"a\"));"},
{"lineNum":" 2191","line":""},
{"lineNum":" 2192","line":"        fbs.reset();"},
{"lineNum":" 2193","line":"        try formatType(0b1100, \"b\", FormatOptions{}, fbs.writer(), std.options.fmt_max_depth);"},
{"lineNum":" 2194","line":"        try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"1100\"));"},
{"lineNum":" 2195","line":"    }"},
{"lineNum":" 2196","line":"}"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"test \"array\" {"},
{"lineNum":" 2199","line":"    {"},
{"lineNum":" 2200","line":"        const value: [3]u8 = \"abc\".*;"},
{"lineNum":" 2201","line":"        try expectFmt(\"array: abc\\n\", \"array: {s}\\n\", .{value});"},
{"lineNum":" 2202","line":"        try expectFmt(\"array: abc\\n\", \"array: {s}\\n\", .{&value});"},
{"lineNum":" 2203","line":"        try expectFmt(\"array: { 97, 98, 99 }\\n\", \"array: {d}\\n\", .{value});"},
{"lineNum":" 2204","line":""},
{"lineNum":" 2205","line":"        var buf: [100]u8 = undefined;"},
{"lineNum":" 2206","line":"        try expectFmt("},
{"lineNum":" 2207","line":"            try bufPrint(buf[0..], \"array: [3]u8@{x}\\n\", .{@intFromPtr(&value)}),"},
{"lineNum":" 2208","line":"            \"array: {*}\\n\","},
{"lineNum":" 2209","line":"            .{&value},"},
{"lineNum":" 2210","line":"        );"},
{"lineNum":" 2211","line":"    }"},
{"lineNum":" 2212","line":"}"},
{"lineNum":" 2213","line":""},
{"lineNum":" 2214","line":"test \"slice\" {"},
{"lineNum":" 2215","line":"    {"},
{"lineNum":" 2216","line":"        const value: []const u8 = \"abc\";"},
{"lineNum":" 2217","line":"        try expectFmt(\"slice: abc\\n\", \"slice: {s}\\n\", .{value});"},
{"lineNum":" 2218","line":"    }"},
{"lineNum":" 2219","line":"    {"},
{"lineNum":" 2220","line":"        var runtime_zero: usize = 0;"},
{"lineNum":" 2221","line":"        const value = @as([*]align(1) const []const u8, @ptrFromInt(0xdeadbeef))[runtime_zero..runtime_zero];"},
{"lineNum":" 2222","line":"        try expectFmt(\"slice: []const u8@deadbeef\\n\", \"slice: {*}\\n\", .{value});"},
{"lineNum":" 2223","line":"    }"},
{"lineNum":" 2224","line":"    {"},
{"lineNum":" 2225","line":"        const null_term_slice: [:0]const u8 = \"\\x00hello\\x00\";"},
{"lineNum":" 2226","line":"        try expectFmt(\"buf: \\x00hello\\x00\\n\", \"buf: {s}\\n\", .{null_term_slice});"},
{"lineNum":" 2227","line":"    }"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"    try expectFmt(\"buf:  Test\\n\", \"buf: {s:5}\\n\", .{\"Test\"});"},
{"lineNum":" 2230","line":"    try expectFmt(\"buf: Test\\n Other text\", \"buf: {s}\\n Other text\", .{\"Test\"});"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"    {"},
{"lineNum":" 2233","line":"        var int_slice = [_]u32{ 1, 4096, 391891, 1111111111 };"},
{"lineNum":" 2234","line":"        var runtime_zero: usize = 0;"},
{"lineNum":" 2235","line":"        try expectFmt(\"int: { 1, 4096, 391891, 1111111111 }\", \"int: {any}\", .{int_slice[runtime_zero..]});"},
{"lineNum":" 2236","line":"        try expectFmt(\"int: { 1, 4096, 391891, 1111111111 }\", \"int: {d}\", .{int_slice[runtime_zero..]});"},
{"lineNum":" 2237","line":"        try expectFmt(\"int: { 1, 1000, 5fad3, 423a35c7 }\", \"int: {x}\", .{int_slice[runtime_zero..]});"},
{"lineNum":" 2238","line":"        try expectFmt(\"int: { 00001, 01000, 5fad3, 423a35c7 }\", \"int: {x:0>5}\", .{int_slice[runtime_zero..]});"},
{"lineNum":" 2239","line":"    }"},
{"lineNum":" 2240","line":"}"},
{"lineNum":" 2241","line":""},
{"lineNum":" 2242","line":"test \"escape non-printable\" {"},
{"lineNum":" 2243","line":"    try expectFmt(\"abc 123\", \"{s}\", .{fmtSliceEscapeLower(\"abc 123\")});"},
{"lineNum":" 2244","line":"    try expectFmt(\"ab\\\\xffc\", \"{s}\", .{fmtSliceEscapeLower(\"ab\\xffc\")});"},
{"lineNum":" 2245","line":"    try expectFmt(\"abc 123\", \"{s}\", .{fmtSliceEscapeUpper(\"abc 123\")});"},
{"lineNum":" 2246","line":"    try expectFmt(\"ab\\\\xFFc\", \"{s}\", .{fmtSliceEscapeUpper(\"ab\\xffc\")});"},
{"lineNum":" 2247","line":"}"},
{"lineNum":" 2248","line":""},
{"lineNum":" 2249","line":"test \"pointer\" {"},
{"lineNum":" 2250","line":"    {"},
{"lineNum":" 2251","line":"        const value = @as(*align(1) i32, @ptrFromInt(0xdeadbeef));"},
{"lineNum":" 2252","line":"        try expectFmt(\"pointer: i32@deadbeef\\n\", \"pointer: {}\\n\", .{value});"},
{"lineNum":" 2253","line":"        try expectFmt(\"pointer: i32@deadbeef\\n\", \"pointer: {*}\\n\", .{value});"},
{"lineNum":" 2254","line":"    }"},
{"lineNum":" 2255","line":"    const FnPtr = *align(1) const fn () void;"},
{"lineNum":" 2256","line":"    {"},
{"lineNum":" 2257","line":"        const value = @as(FnPtr, @ptrFromInt(0xdeadbeef));"},
{"lineNum":" 2258","line":"        try expectFmt(\"pointer: fn() void@deadbeef\\n\", \"pointer: {}\\n\", .{value});"},
{"lineNum":" 2259","line":"    }"},
{"lineNum":" 2260","line":"    {"},
{"lineNum":" 2261","line":"        const value = @as(FnPtr, @ptrFromInt(0xdeadbeef));"},
{"lineNum":" 2262","line":"        try expectFmt(\"pointer: fn() void@deadbeef\\n\", \"pointer: {}\\n\", .{value});"},
{"lineNum":" 2263","line":"    }"},
{"lineNum":" 2264","line":"}"},
{"lineNum":" 2265","line":""},
{"lineNum":" 2266","line":"test \"cstr\" {"},
{"lineNum":" 2267","line":"    try expectFmt("},
{"lineNum":" 2268","line":"        \"cstr: Test C\\n\","},
{"lineNum":" 2269","line":"        \"cstr: {s}\\n\","},
{"lineNum":" 2270","line":"        .{@as([*c]const u8, @ptrCast(\"Test C\"))},"},
{"lineNum":" 2271","line":"    );"},
{"lineNum":" 2272","line":"    try expectFmt("},
{"lineNum":" 2273","line":"        \"cstr:     Test C\\n\","},
{"lineNum":" 2274","line":"        \"cstr: {s:10}\\n\","},
{"lineNum":" 2275","line":"        .{@as([*c]const u8, @ptrCast(\"Test C\"))},"},
{"lineNum":" 2276","line":"    );"},
{"lineNum":" 2277","line":"}"},
{"lineNum":" 2278","line":""},
{"lineNum":" 2279","line":"test \"filesize\" {"},
{"lineNum":" 2280","line":"    try expectFmt(\"file size: 42B\\n\", \"file size: {}\\n\", .{fmtIntSizeDec(42)});"},
{"lineNum":" 2281","line":"    try expectFmt(\"file size: 42B\\n\", \"file size: {}\\n\", .{fmtIntSizeBin(42)});"},
{"lineNum":" 2282","line":"    try expectFmt(\"file size: 63MB\\n\", \"file size: {}\\n\", .{fmtIntSizeDec(63 * 1000 * 1000)});"},
{"lineNum":" 2283","line":"    try expectFmt(\"file size: 63MiB\\n\", \"file size: {}\\n\", .{fmtIntSizeBin(63 * 1024 * 1024)});"},
{"lineNum":" 2284","line":"    try expectFmt(\"file size: 66.06MB\\n\", \"file size: {:.2}\\n\", .{fmtIntSizeDec(63 * 1024 * 1024)});"},
{"lineNum":" 2285","line":"    try expectFmt(\"file size: 60.08MiB\\n\", \"file size: {:.2}\\n\", .{fmtIntSizeBin(63 * 1000 * 1000)});"},
{"lineNum":" 2286","line":"    try expectFmt(\"file size: =66.06MB=\\n\", \"file size: {:=^9.2}\\n\", .{fmtIntSizeDec(63 * 1024 * 1024)});"},
{"lineNum":" 2287","line":"    try expectFmt(\"file size:   66.06MB\\n\", \"file size: {: >9.2}\\n\", .{fmtIntSizeDec(63 * 1024 * 1024)});"},
{"lineNum":" 2288","line":"    try expectFmt(\"file size: 66.06MB  \\n\", \"file size: {: <9.2}\\n\", .{fmtIntSizeDec(63 * 1024 * 1024)});"},
{"lineNum":" 2289","line":"    try expectFmt(\"file size: 0.01844674407370955ZB\\n\", \"file size: {}\\n\", .{fmtIntSizeDec(math.maxInt(u64))});"},
{"lineNum":" 2290","line":"}"},
{"lineNum":" 2291","line":""},
{"lineNum":" 2292","line":"test \"struct\" {"},
{"lineNum":" 2293","line":"    {"},
{"lineNum":" 2294","line":"        const Struct = struct {"},
{"lineNum":" 2295","line":"            field: u8,"},
{"lineNum":" 2296","line":"        };"},
{"lineNum":" 2297","line":"        const value = Struct{ .field = 42 };"},
{"lineNum":" 2298","line":"        try expectFmt(\"struct: fmt.test.struct.Struct{ .field = 42 }\\n\", \"struct: {}\\n\", .{value});"},
{"lineNum":" 2299","line":"        try expectFmt(\"struct: fmt.test.struct.Struct{ .field = 42 }\\n\", \"struct: {}\\n\", .{&value});"},
{"lineNum":" 2300","line":"    }"},
{"lineNum":" 2301","line":"    {"},
{"lineNum":" 2302","line":"        const Struct = struct {"},
{"lineNum":" 2303","line":"            a: u0,"},
{"lineNum":" 2304","line":"            b: u1,"},
{"lineNum":" 2305","line":"        };"},
{"lineNum":" 2306","line":"        const value = Struct{ .a = 0, .b = 1 };"},
{"lineNum":" 2307","line":"        try expectFmt(\"struct: fmt.test.struct.Struct{ .a = 0, .b = 1 }\\n\", \"struct: {}\\n\", .{value});"},
{"lineNum":" 2308","line":"    }"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"    const S = struct {"},
{"lineNum":" 2311","line":"        a: u32,"},
{"lineNum":" 2312","line":"        b: anyerror,"},
{"lineNum":" 2313","line":"    };"},
{"lineNum":" 2314","line":""},
{"lineNum":" 2315","line":"    const inst = S{"},
{"lineNum":" 2316","line":"        .a = 456,"},
{"lineNum":" 2317","line":"        .b = error.Unused,"},
{"lineNum":" 2318","line":"    };"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"    try expectFmt(\"fmt.test.struct.S{ .a = 456, .b = error.Unused }\", \"{}\", .{inst});"},
{"lineNum":" 2321","line":"    // Tuples"},
{"lineNum":" 2322","line":"    try expectFmt(\"{ }\", \"{}\", .{.{}});"},
{"lineNum":" 2323","line":"    try expectFmt(\"{ -1 }\", \"{}\", .{.{-1}});"},
{"lineNum":" 2324","line":"    try expectFmt(\"{ -1, 42, 2.5e+04 }\", \"{}\", .{.{ -1, 42, 0.25e5 }});"},
{"lineNum":" 2325","line":"}"},
{"lineNum":" 2326","line":""},
{"lineNum":" 2327","line":"test \"enum\" {"},
{"lineNum":" 2328","line":"    const Enum = enum {"},
{"lineNum":" 2329","line":"        One,"},
{"lineNum":" 2330","line":"        Two,"},
{"lineNum":" 2331","line":"    };"},
{"lineNum":" 2332","line":"    const value = Enum.Two;"},
{"lineNum":" 2333","line":"    try expectFmt(\"enum: fmt.test.enum.Enum.Two\\n\", \"enum: {}\\n\", .{value});"},
{"lineNum":" 2334","line":"    try expectFmt(\"enum: fmt.test.enum.Enum.Two\\n\", \"enum: {}\\n\", .{&value});"},
{"lineNum":" 2335","line":"    try expectFmt(\"enum: fmt.test.enum.Enum.One\\n\", \"enum: {}\\n\", .{Enum.One});"},
{"lineNum":" 2336","line":"    try expectFmt(\"enum: fmt.test.enum.Enum.Two\\n\", \"enum: {}\\n\", .{Enum.Two});"},
{"lineNum":" 2337","line":""},
{"lineNum":" 2338","line":"    // test very large enum to verify ct branch quota is large enough"},
{"lineNum":" 2339","line":"    // TODO: https://github.com/ziglang/zig/issues/15609"},
{"lineNum":" 2340","line":"    if (!((builtin.cpu.arch == .wasm32) and builtin.mode == .Debug)) {"},
{"lineNum":" 2341","line":"        try expectFmt(\"enum: os.windows.win32error.Win32Error.INVALID_FUNCTION\\n\", \"enum: {}\\n\", .{std.os.windows.Win32Error.INVALID_FUNCTION});"},
{"lineNum":" 2342","line":"    }"},
{"lineNum":" 2343","line":""},
{"lineNum":" 2344","line":"    const E = enum {"},
{"lineNum":" 2345","line":"        One,"},
{"lineNum":" 2346","line":"        Two,"},
{"lineNum":" 2347","line":"        Three,"},
{"lineNum":" 2348","line":"    };"},
{"lineNum":" 2349","line":""},
{"lineNum":" 2350","line":"    const inst = E.Two;"},
{"lineNum":" 2351","line":""},
{"lineNum":" 2352","line":"    try expectFmt(\"fmt.test.enum.E.Two\", \"{}\", .{inst});"},
{"lineNum":" 2353","line":"}"},
{"lineNum":" 2354","line":""},
{"lineNum":" 2355","line":"test \"non-exhaustive enum\" {"},
{"lineNum":" 2356","line":"    const Enum = enum(u16) {"},
{"lineNum":" 2357","line":"        One = 0x000f,"},
{"lineNum":" 2358","line":"        Two = 0xbeef,"},
{"lineNum":" 2359","line":"        _,"},
{"lineNum":" 2360","line":"    };"},
{"lineNum":" 2361","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum.One\\n\", \"enum: {}\\n\", .{Enum.One});"},
{"lineNum":" 2362","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum.Two\\n\", \"enum: {}\\n\", .{Enum.Two});"},
{"lineNum":" 2363","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum(4660)\\n\", \"enum: {}\\n\", .{@as(Enum, @enumFromInt(0x1234))});"},
{"lineNum":" 2364","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum.One\\n\", \"enum: {x}\\n\", .{Enum.One});"},
{"lineNum":" 2365","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum.Two\\n\", \"enum: {x}\\n\", .{Enum.Two});"},
{"lineNum":" 2366","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum.Two\\n\", \"enum: {X}\\n\", .{Enum.Two});"},
{"lineNum":" 2367","line":"    try expectFmt(\"enum: fmt.test.non-exhaustive enum.Enum(1234)\\n\", \"enum: {x}\\n\", .{@as(Enum, @enumFromInt(0x1234))});"},
{"lineNum":" 2368","line":"}"},
{"lineNum":" 2369","line":""},
{"lineNum":" 2370","line":"test \"float.scientific\" {"},
{"lineNum":" 2371","line":"    try expectFmt(\"f32: 1.34000003e+00\", \"f32: {e}\", .{@as(f32, 1.34)});"},
{"lineNum":" 2372","line":"    try expectFmt(\"f32: 1.23400001e+01\", \"f32: {e}\", .{@as(f32, 12.34)});"},
{"lineNum":" 2373","line":"    try expectFmt(\"f64: -1.234e+11\", \"f64: {e}\", .{@as(f64, -12.34e10)});"},
{"lineNum":" 2374","line":"    try expectFmt(\"f64: 9.99996e-40\", \"f64: {e}\", .{@as(f64, 9.999960e-40)});"},
{"lineNum":" 2375","line":"}"},
{"lineNum":" 2376","line":""},
{"lineNum":" 2377","line":"test \"float.scientific.precision\" {"},
{"lineNum":" 2378","line":"    try expectFmt(\"f64: 1.40971e-42\", \"f64: {e:.5}\", .{@as(f64, 1.409706e-42)});"},
{"lineNum":" 2379","line":"    try expectFmt(\"f64: 1.00000e-09\", \"f64: {e:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 814313563))))});"},
{"lineNum":" 2380","line":"    try expectFmt(\"f64: 7.81250e-03\", \"f64: {e:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1006632960))))});"},
{"lineNum":" 2381","line":"    // libc rounds 1.000005e+05 to 1.00000e+05 but zig does 1.00001e+05."},
{"lineNum":" 2382","line":"    // In fact, libc doesn\'t round a lot of 5 cases up when one past the precision point."},
{"lineNum":" 2383","line":"    try expectFmt(\"f64: 1.00001e+05\", \"f64: {e:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1203982400))))});"},
{"lineNum":" 2384","line":"}"},
{"lineNum":" 2385","line":""},
{"lineNum":" 2386","line":"test \"float.special\" {"},
{"lineNum":" 2387","line":"    try expectFmt(\"f64: nan\", \"f64: {}\", .{math.nan_f64});"},
{"lineNum":" 2388","line":"    // negative nan is not defined by IEE 754,"},
{"lineNum":" 2389","line":"    // and ARM thus normalizes it to positive nan"},
{"lineNum":" 2390","line":"    if (builtin.target.cpu.arch != .arm) {"},
{"lineNum":" 2391","line":"        try expectFmt(\"f64: -nan\", \"f64: {}\", .{-math.nan_f64});"},
{"lineNum":" 2392","line":"    }"},
{"lineNum":" 2393","line":"    try expectFmt(\"f64: inf\", \"f64: {}\", .{math.inf(f64)});"},
{"lineNum":" 2394","line":"    try expectFmt(\"f64: -inf\", \"f64: {}\", .{-math.inf(f64)});"},
{"lineNum":" 2395","line":"}"},
{"lineNum":" 2396","line":""},
{"lineNum":" 2397","line":"test \"float.hexadecimal.special\" {"},
{"lineNum":" 2398","line":"    try expectFmt(\"f64: nan\", \"f64: {x}\", .{math.nan_f64});"},
{"lineNum":" 2399","line":"    // negative nan is not defined by IEE 754,"},
{"lineNum":" 2400","line":"    // and ARM thus normalizes it to positive nan"},
{"lineNum":" 2401","line":"    if (builtin.target.cpu.arch != .arm) {"},
{"lineNum":" 2402","line":"        try expectFmt(\"f64: -nan\", \"f64: {x}\", .{-math.nan_f64});"},
{"lineNum":" 2403","line":"    }"},
{"lineNum":" 2404","line":"    try expectFmt(\"f64: inf\", \"f64: {x}\", .{math.inf(f64)});"},
{"lineNum":" 2405","line":"    try expectFmt(\"f64: -inf\", \"f64: {x}\", .{-math.inf(f64)});"},
{"lineNum":" 2406","line":""},
{"lineNum":" 2407","line":"    try expectFmt(\"f64: 0x0.0p0\", \"f64: {x}\", .{@as(f64, 0)});"},
{"lineNum":" 2408","line":"    try expectFmt(\"f64: -0x0.0p0\", \"f64: {x}\", .{-@as(f64, 0)});"},
{"lineNum":" 2409","line":"}"},
{"lineNum":" 2410","line":""},
{"lineNum":" 2411","line":"test \"float.hexadecimal\" {"},
{"lineNum":" 2412","line":"    try expectFmt(\"f16: 0x1.554p-2\", \"f16: {x}\", .{@as(f16, 1.0 / 3.0)});"},
{"lineNum":" 2413","line":"    try expectFmt(\"f32: 0x1.555556p-2\", \"f32: {x}\", .{@as(f32, 1.0 / 3.0)});"},
{"lineNum":" 2414","line":"    try expectFmt(\"f64: 0x1.5555555555555p-2\", \"f64: {x}\", .{@as(f64, 1.0 / 3.0)});"},
{"lineNum":" 2415","line":"    try expectFmt(\"f80: 0x1.5555555555555556p-2\", \"f80: {x}\", .{@as(f80, 1.0 / 3.0)});"},
{"lineNum":" 2416","line":"    try expectFmt(\"f128: 0x1.5555555555555555555555555555p-2\", \"f128: {x}\", .{@as(f128, 1.0 / 3.0)});"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"    try expectFmt(\"f16: 0x1p-14\", \"f16: {x}\", .{math.floatMin(f16)});"},
{"lineNum":" 2419","line":"    try expectFmt(\"f32: 0x1p-126\", \"f32: {x}\", .{math.floatMin(f32)});"},
{"lineNum":" 2420","line":"    try expectFmt(\"f64: 0x1p-1022\", \"f64: {x}\", .{math.floatMin(f64)});"},
{"lineNum":" 2421","line":"    try expectFmt(\"f80: 0x1p-16382\", \"f80: {x}\", .{math.floatMin(f80)});"},
{"lineNum":" 2422","line":"    try expectFmt(\"f128: 0x1p-16382\", \"f128: {x}\", .{math.floatMin(f128)});"},
{"lineNum":" 2423","line":""},
{"lineNum":" 2424","line":"    try expectFmt(\"f16: 0x0.004p-14\", \"f16: {x}\", .{math.floatTrueMin(f16)});"},
{"lineNum":" 2425","line":"    try expectFmt(\"f32: 0x0.000002p-126\", \"f32: {x}\", .{math.floatTrueMin(f32)});"},
{"lineNum":" 2426","line":"    try expectFmt(\"f64: 0x0.0000000000001p-1022\", \"f64: {x}\", .{math.floatTrueMin(f64)});"},
{"lineNum":" 2427","line":"    try expectFmt(\"f80: 0x0.0000000000000002p-16382\", \"f80: {x}\", .{math.floatTrueMin(f80)});"},
{"lineNum":" 2428","line":"    try expectFmt(\"f128: 0x0.0000000000000000000000000001p-16382\", \"f128: {x}\", .{math.floatTrueMin(f128)});"},
{"lineNum":" 2429","line":""},
{"lineNum":" 2430","line":"    try expectFmt(\"f16: 0x1.ffcp15\", \"f16: {x}\", .{math.floatMax(f16)});"},
{"lineNum":" 2431","line":"    try expectFmt(\"f32: 0x1.fffffep127\", \"f32: {x}\", .{math.floatMax(f32)});"},
{"lineNum":" 2432","line":"    try expectFmt(\"f64: 0x1.fffffffffffffp1023\", \"f64: {x}\", .{math.floatMax(f64)});"},
{"lineNum":" 2433","line":"    try expectFmt(\"f80: 0x1.fffffffffffffffep16383\", \"f80: {x}\", .{math.floatMax(f80)});"},
{"lineNum":" 2434","line":"    try expectFmt(\"f128: 0x1.ffffffffffffffffffffffffffffp16383\", \"f128: {x}\", .{math.floatMax(f128)});"},
{"lineNum":" 2435","line":"}"},
{"lineNum":" 2436","line":""},
{"lineNum":" 2437","line":"test \"float.hexadecimal.precision\" {"},
{"lineNum":" 2438","line":"    try expectFmt(\"f16: 0x1.5p-2\", \"f16: {x:.1}\", .{@as(f16, 1.0 / 3.0)});"},
{"lineNum":" 2439","line":"    try expectFmt(\"f32: 0x1.555p-2\", \"f32: {x:.3}\", .{@as(f32, 1.0 / 3.0)});"},
{"lineNum":" 2440","line":"    try expectFmt(\"f64: 0x1.55555p-2\", \"f64: {x:.5}\", .{@as(f64, 1.0 / 3.0)});"},
{"lineNum":" 2441","line":"    try expectFmt(\"f80: 0x1.5555555p-2\", \"f80: {x:.7}\", .{@as(f80, 1.0 / 3.0)});"},
{"lineNum":" 2442","line":"    try expectFmt(\"f128: 0x1.555555555p-2\", \"f128: {x:.9}\", .{@as(f128, 1.0 / 3.0)});"},
{"lineNum":" 2443","line":""},
{"lineNum":" 2444","line":"    try expectFmt(\"f16: 0x1.00000p0\", \"f16: {x:.5}\", .{@as(f16, 1.0)});"},
{"lineNum":" 2445","line":"    try expectFmt(\"f32: 0x1.00000p0\", \"f32: {x:.5}\", .{@as(f32, 1.0)});"},
{"lineNum":" 2446","line":"    try expectFmt(\"f64: 0x1.00000p0\", \"f64: {x:.5}\", .{@as(f64, 1.0)});"},
{"lineNum":" 2447","line":"    try expectFmt(\"f80: 0x1.00000p0\", \"f80: {x:.5}\", .{@as(f80, 1.0)});"},
{"lineNum":" 2448","line":"    try expectFmt(\"f128: 0x1.00000p0\", \"f128: {x:.5}\", .{@as(f128, 1.0)});"},
{"lineNum":" 2449","line":"}"},
{"lineNum":" 2450","line":""},
{"lineNum":" 2451","line":"test \"float.decimal\" {"},
{"lineNum":" 2452","line":"    try expectFmt(\"f64: 152314000000000000000000000000\", \"f64: {d}\", .{@as(f64, 1.52314e+29)});"},
{"lineNum":" 2453","line":"    try expectFmt(\"f32: 0\", \"f32: {d}\", .{@as(f32, 0.0)});"},
{"lineNum":" 2454","line":"    try expectFmt(\"f32: 0\", \"f32: {d:.0}\", .{@as(f32, 0.0)});"},
{"lineNum":" 2455","line":"    try expectFmt(\"f32: 1.1\", \"f32: {d:.1}\", .{@as(f32, 1.1234)});"},
{"lineNum":" 2456","line":"    try expectFmt(\"f32: 1234.57\", \"f32: {d:.2}\", .{@as(f32, 1234.567)});"},
{"lineNum":" 2457","line":"    // -11.1234 is converted to f64 -11.12339... internally (errol3() function takes f64)."},
{"lineNum":" 2458","line":"    // -11.12339... is rounded back up to -11.1234"},
{"lineNum":" 2459","line":"    try expectFmt(\"f32: -11.1234\", \"f32: {d:.4}\", .{@as(f32, -11.1234)});"},
{"lineNum":" 2460","line":"    try expectFmt(\"f32: 91.12345\", \"f32: {d:.5}\", .{@as(f32, 91.12345)});"},
{"lineNum":" 2461","line":"    try expectFmt(\"f64: 91.1234567890\", \"f64: {d:.10}\", .{@as(f64, 91.12345678901235)});"},
{"lineNum":" 2462","line":"    try expectFmt(\"f64: 0.00000\", \"f64: {d:.5}\", .{@as(f64, 0.0)});"},
{"lineNum":" 2463","line":"    try expectFmt(\"f64: 6\", \"f64: {d:.0}\", .{@as(f64, 5.700)});"},
{"lineNum":" 2464","line":"    try expectFmt(\"f64: 10.0\", \"f64: {d:.1}\", .{@as(f64, 9.999)});"},
{"lineNum":" 2465","line":"    try expectFmt(\"f64: 1.000\", \"f64: {d:.3}\", .{@as(f64, 1.0)});"},
{"lineNum":" 2466","line":"    try expectFmt(\"f64: 0.00030000\", \"f64: {d:.8}\", .{@as(f64, 0.0003)});"},
{"lineNum":" 2467","line":"    try expectFmt(\"f64: 0.00000\", \"f64: {d:.5}\", .{@as(f64, 1.40130e-45)});"},
{"lineNum":" 2468","line":"    try expectFmt(\"f64: 0.00000\", \"f64: {d:.5}\", .{@as(f64, 9.999960e-40)});"},
{"lineNum":" 2469","line":"    try expectFmt(\"f64: 10000000000000.00\", \"f64: {d:.2}\", .{@as(f64, 9999999999999.999)});"},
{"lineNum":" 2470","line":"    try expectFmt(\"f64: 10000000000000000000000000000000000000\", \"f64: {d}\", .{@as(f64, 1e37)});"},
{"lineNum":" 2471","line":"    try expectFmt(\"f64: 100000000000000000000000000000000000000\", \"f64: {d}\", .{@as(f64, 1e38)});"},
{"lineNum":" 2472","line":"}"},
{"lineNum":" 2473","line":""},
{"lineNum":" 2474","line":"test \"float.libc.sanity\" {"},
{"lineNum":" 2475","line":"    try expectFmt(\"f64: 0.00001\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 916964781))))});"},
{"lineNum":" 2476","line":"    try expectFmt(\"f64: 0.00001\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 925353389))))});"},
{"lineNum":" 2477","line":"    try expectFmt(\"f64: 0.10000\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1036831278))))});"},
{"lineNum":" 2478","line":"    try expectFmt(\"f64: 1.00000\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1065353133))))});"},
{"lineNum":" 2479","line":"    try expectFmt(\"f64: 10.00000\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1092616192))))});"},
{"lineNum":" 2480","line":""},
{"lineNum":" 2481","line":"    // libc differences"},
{"lineNum":" 2482","line":"    //"},
{"lineNum":" 2483","line":"    // This is 0.015625 exactly according to gdb. We thus round down,"},
{"lineNum":" 2484","line":"    // however glibc rounds up for some reason. This occurs for all"},
{"lineNum":" 2485","line":"    // floats of the form x.yyyy25 on a precision point."},
{"lineNum":" 2486","line":"    try expectFmt(\"f64: 0.01563\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1015021568))))});"},
{"lineNum":" 2487","line":"    // errol3 rounds to ... 630 but libc rounds to ...632. Grisu3"},
{"lineNum":" 2488","line":"    // also rounds to 630 so I\'m inclined to believe libc is not"},
{"lineNum":" 2489","line":"    // optimal here."},
{"lineNum":" 2490","line":"    try expectFmt(\"f64: 18014400656965630.00000\", \"f64: {d:.5}\", .{@as(f64, @as(f32, @bitCast(@as(u32, 1518338049))))});"},
{"lineNum":" 2491","line":"}"},
{"lineNum":" 2492","line":""},
{"lineNum":" 2493","line":"test \"custom\" {"},
{"lineNum":" 2494","line":"    const Vec2 = struct {"},
{"lineNum":" 2495","line":"        const SelfType = @This();"},
{"lineNum":" 2496","line":"        x: f32,"},
{"lineNum":" 2497","line":"        y: f32,"},
{"lineNum":" 2498","line":""},
{"lineNum":" 2499","line":"        pub fn format("},
{"lineNum":" 2500","line":"            self: SelfType,"},
{"lineNum":" 2501","line":"            comptime fmt: []const u8,"},
{"lineNum":" 2502","line":"            options: FormatOptions,"},
{"lineNum":" 2503","line":"            writer: anytype,"},
{"lineNum":" 2504","line":"        ) !void {"},
{"lineNum":" 2505","line":"            _ = options;"},
{"lineNum":" 2506","line":"            if (fmt.len == 0 or comptime std.mem.eql(u8, fmt, \"p\")) {"},
{"lineNum":" 2507","line":"                return std.fmt.format(writer, \"({d:.3},{d:.3})\", .{ self.x, self.y });"},
{"lineNum":" 2508","line":"            } else if (comptime std.mem.eql(u8, fmt, \"d\")) {"},
{"lineNum":" 2509","line":"                return std.fmt.format(writer, \"{d:.3}x{d:.3}\", .{ self.x, self.y });"},
{"lineNum":" 2510","line":"            } else {"},
{"lineNum":" 2511","line":"                @compileError(\"unknown format character: \'\" ++ fmt ++ \"\'\");"},
{"lineNum":" 2512","line":"            }"},
{"lineNum":" 2513","line":"        }"},
{"lineNum":" 2514","line":"    };"},
{"lineNum":" 2515","line":""},
{"lineNum":" 2516","line":"    var value = Vec2{"},
{"lineNum":" 2517","line":"        .x = 10.2,"},
{"lineNum":" 2518","line":"        .y = 2.22,"},
{"lineNum":" 2519","line":"    };"},
{"lineNum":" 2520","line":"    try expectFmt(\"point: (10.200,2.220)\\n\", \"point: {}\\n\", .{&value});"},
{"lineNum":" 2521","line":"    try expectFmt(\"dim: 10.200x2.220\\n\", \"dim: {d}\\n\", .{&value});"},
{"lineNum":" 2522","line":""},
{"lineNum":" 2523","line":"    // same thing but not passing a pointer"},
{"lineNum":" 2524","line":"    try expectFmt(\"point: (10.200,2.220)\\n\", \"point: {}\\n\", .{value});"},
{"lineNum":" 2525","line":"    try expectFmt(\"dim: 10.200x2.220\\n\", \"dim: {d}\\n\", .{value});"},
{"lineNum":" 2526","line":"}"},
{"lineNum":" 2527","line":""},
{"lineNum":" 2528","line":"test \"union\" {"},
{"lineNum":" 2529","line":"    const TU = union(enum) {"},
{"lineNum":" 2530","line":"        float: f32,"},
{"lineNum":" 2531","line":"        int: u32,"},
{"lineNum":" 2532","line":"    };"},
{"lineNum":" 2533","line":""},
{"lineNum":" 2534","line":"    const UU = union {"},
{"lineNum":" 2535","line":"        float: f32,"},
{"lineNum":" 2536","line":"        int: u32,"},
{"lineNum":" 2537","line":"    };"},
{"lineNum":" 2538","line":""},
{"lineNum":" 2539","line":"    const EU = extern union {"},
{"lineNum":" 2540","line":"        float: f32,"},
{"lineNum":" 2541","line":"        int: u32,"},
{"lineNum":" 2542","line":"    };"},
{"lineNum":" 2543","line":""},
{"lineNum":" 2544","line":"    const tu_inst = TU{ .int = 123 };"},
{"lineNum":" 2545","line":"    const uu_inst = UU{ .int = 456 };"},
{"lineNum":" 2546","line":"    const eu_inst = EU{ .float = 321.123 };"},
{"lineNum":" 2547","line":""},
{"lineNum":" 2548","line":"    try expectFmt(\"fmt.test.union.TU{ .int = 123 }\", \"{}\", .{tu_inst});"},
{"lineNum":" 2549","line":""},
{"lineNum":" 2550","line":"    var buf: [100]u8 = undefined;"},
{"lineNum":" 2551","line":"    const uu_result = try bufPrint(buf[0..], \"{}\", .{uu_inst});"},
{"lineNum":" 2552","line":"    try std.testing.expect(mem.eql(u8, uu_result[0..18], \"fmt.test.union.UU@\"));"},
{"lineNum":" 2553","line":""},
{"lineNum":" 2554","line":"    const eu_result = try bufPrint(buf[0..], \"{}\", .{eu_inst});"},
{"lineNum":" 2555","line":"    try std.testing.expect(mem.eql(u8, eu_result[0..18], \"fmt.test.union.EU@\"));"},
{"lineNum":" 2556","line":"}"},
{"lineNum":" 2557","line":""},
{"lineNum":" 2558","line":"test \"struct.self-referential\" {"},
{"lineNum":" 2559","line":"    const S = struct {"},
{"lineNum":" 2560","line":"        const SelfType = @This();"},
{"lineNum":" 2561","line":"        a: ?*SelfType,"},
{"lineNum":" 2562","line":"    };"},
{"lineNum":" 2563","line":""},
{"lineNum":" 2564","line":"    var inst = S{"},
{"lineNum":" 2565","line":"        .a = null,"},
{"lineNum":" 2566","line":"    };"},
{"lineNum":" 2567","line":"    inst.a = &inst;"},
{"lineNum":" 2568","line":""},
{"lineNum":" 2569","line":"    try expectFmt(\"fmt.test.struct.self-referential.S{ .a = fmt.test.struct.self-referential.S{ .a = fmt.test.struct.self-referential.S{ .a = fmt.test.struct.self-referential.S{ ... } } } }\", \"{}\", .{inst});"},
{"lineNum":" 2570","line":"}"},
{"lineNum":" 2571","line":""},
{"lineNum":" 2572","line":"test \"struct.zero-size\" {"},
{"lineNum":" 2573","line":"    const A = struct {"},
{"lineNum":" 2574","line":"        fn foo() void {}"},
{"lineNum":" 2575","line":"    };"},
{"lineNum":" 2576","line":"    const B = struct {"},
{"lineNum":" 2577","line":"        a: A,"},
{"lineNum":" 2578","line":"        c: i32,"},
{"lineNum":" 2579","line":"    };"},
{"lineNum":" 2580","line":""},
{"lineNum":" 2581","line":"    const a = A{};"},
{"lineNum":" 2582","line":"    const b = B{ .a = a, .c = 0 };"},
{"lineNum":" 2583","line":""},
{"lineNum":" 2584","line":"    try expectFmt(\"fmt.test.struct.zero-size.B{ .a = fmt.test.struct.zero-size.A{ }, .c = 0 }\", \"{}\", .{b});"},
{"lineNum":" 2585","line":"}"},
{"lineNum":" 2586","line":""},
{"lineNum":" 2587","line":"test \"bytes.hex\" {"},
{"lineNum":" 2588","line":"    const some_bytes = \"\\xCA\\xFE\\xBA\\xBE\";"},
{"lineNum":" 2589","line":"    try expectFmt(\"lowercase: cafebabe\\n\", \"lowercase: {x}\\n\", .{fmtSliceHexLower(some_bytes)});"},
{"lineNum":" 2590","line":"    try expectFmt(\"uppercase: CAFEBABE\\n\", \"uppercase: {X}\\n\", .{fmtSliceHexUpper(some_bytes)});"},
{"lineNum":" 2591","line":"    //Test Slices"},
{"lineNum":" 2592","line":"    try expectFmt(\"uppercase: CAFE\\n\", \"uppercase: {X}\\n\", .{fmtSliceHexUpper(some_bytes[0..2])});"},
{"lineNum":" 2593","line":"    try expectFmt(\"lowercase: babe\\n\", \"lowercase: {x}\\n\", .{fmtSliceHexLower(some_bytes[2..])});"},
{"lineNum":" 2594","line":"    const bytes_with_zeros = \"\\x00\\x0E\\xBA\\xBE\";"},
{"lineNum":" 2595","line":"    try expectFmt(\"lowercase: 000ebabe\\n\", \"lowercase: {x}\\n\", .{fmtSliceHexLower(bytes_with_zeros)});"},
{"lineNum":" 2596","line":"}"},
{"lineNum":" 2597","line":""},
{"lineNum":" 2598","line":"/// Encodes a sequence of bytes as hexadecimal digits."},
{"lineNum":" 2599","line":"/// Returns an array containing the encoded bytes."},
{"lineNum":" 2600","line":"pub fn bytesToHex(input: anytype, case: Case) [input.len * 2]u8 {"},
{"lineNum":" 2601","line":"    if (input.len == 0) return [_]u8{};"},
{"lineNum":" 2602","line":"    comptime assert(@TypeOf(input[0]) == u8); // elements to encode must be unsigned bytes"},
{"lineNum":" 2603","line":""},
{"lineNum":" 2604","line":"    const charset = \"0123456789\" ++ if (case == .upper) \"ABCDEF\" else \"abcdef\";"},
{"lineNum":" 2605","line":"    var result: [input.len * 2]u8 = undefined;"},
{"lineNum":" 2606","line":"    for (input, 0..) |b, i| {"},
{"lineNum":" 2607","line":"        result[i * 2 + 0] = charset[b >> 4];"},
{"lineNum":" 2608","line":"        result[i * 2 + 1] = charset[b & 15];"},
{"lineNum":" 2609","line":"    }"},
{"lineNum":" 2610","line":"    return result;"},
{"lineNum":" 2611","line":"}"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"/// Decodes the sequence of bytes represented by the specified string of"},
{"lineNum":" 2614","line":"/// hexadecimal characters."},
{"lineNum":" 2615","line":"/// Returns a slice of the output buffer containing the decoded bytes."},
{"lineNum":" 2616","line":"pub fn hexToBytes(out: []u8, input: []const u8) ![]u8 {"},
{"lineNum":" 2617","line":"    // Expect 0 or n pairs of hexadecimal digits."},
{"lineNum":" 2618","line":"    if (input.len & 1 != 0)"},
{"lineNum":" 2619","line":"        return error.InvalidLength;"},
{"lineNum":" 2620","line":"    if (out.len * 2 < input.len)"},
{"lineNum":" 2621","line":"        return error.NoSpaceLeft;"},
{"lineNum":" 2622","line":""},
{"lineNum":" 2623","line":"    var in_i: usize = 0;"},
{"lineNum":" 2624","line":"    while (in_i < input.len) : (in_i += 2) {"},
{"lineNum":" 2625","line":"        const hi = try charToDigit(input[in_i], 16);"},
{"lineNum":" 2626","line":"        const lo = try charToDigit(input[in_i + 1], 16);"},
{"lineNum":" 2627","line":"        out[in_i / 2] = (hi << 4) | lo;"},
{"lineNum":" 2628","line":"    }"},
{"lineNum":" 2629","line":""},
{"lineNum":" 2630","line":"    return out[0 .. in_i / 2];"},
{"lineNum":" 2631","line":"}"},
{"lineNum":" 2632","line":""},
{"lineNum":" 2633","line":"test \"bytesToHex\" {"},
{"lineNum":" 2634","line":"    const input = \"input slice\";"},
{"lineNum":" 2635","line":"    const encoded = bytesToHex(input, .lower);"},
{"lineNum":" 2636","line":"    var decoded: [input.len]u8 = undefined;"},
{"lineNum":" 2637","line":"    try std.testing.expectEqualSlices(u8, input, try hexToBytes(&decoded, &encoded));"},
{"lineNum":" 2638","line":"}"},
{"lineNum":" 2639","line":""},
{"lineNum":" 2640","line":"test \"hexToBytes\" {"},
{"lineNum":" 2641","line":"    var buf: [32]u8 = undefined;"},
{"lineNum":" 2642","line":"    try expectFmt(\"90\" ** 32, \"{s}\", .{fmtSliceHexUpper(try hexToBytes(&buf, \"90\" ** 32))});"},
{"lineNum":" 2643","line":"    try expectFmt(\"ABCD\", \"{s}\", .{fmtSliceHexUpper(try hexToBytes(&buf, \"ABCD\"))});"},
{"lineNum":" 2644","line":"    try expectFmt(\"\", \"{s}\", .{fmtSliceHexUpper(try hexToBytes(&buf, \"\"))});"},
{"lineNum":" 2645","line":"    try std.testing.expectError(error.InvalidCharacter, hexToBytes(&buf, \"012Z\"));"},
{"lineNum":" 2646","line":"    try std.testing.expectError(error.InvalidLength, hexToBytes(&buf, \"AAA\"));"},
{"lineNum":" 2647","line":"    try std.testing.expectError(error.NoSpaceLeft, hexToBytes(buf[0..1], \"ABAB\"));"},
{"lineNum":" 2648","line":"}"},
{"lineNum":" 2649","line":""},
{"lineNum":" 2650","line":"test \"formatIntValue with comptime_int\" {"},
{"lineNum":" 2651","line":"    const value: comptime_int = 123456789123456789;"},
{"lineNum":" 2652","line":""},
{"lineNum":" 2653","line":"    var buf: [20]u8 = undefined;"},
{"lineNum":" 2654","line":"    var fbs = std.io.fixedBufferStream(&buf);"},
{"lineNum":" 2655","line":"    try formatIntValue(value, \"\", FormatOptions{}, fbs.writer());"},
{"lineNum":" 2656","line":"    try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"123456789123456789\"));"},
{"lineNum":" 2657","line":"}"},
{"lineNum":" 2658","line":""},
{"lineNum":" 2659","line":"test \"formatFloatValue with comptime_float\" {"},
{"lineNum":" 2660","line":"    const value: comptime_float = 1.0;"},
{"lineNum":" 2661","line":""},
{"lineNum":" 2662","line":"    var buf: [20]u8 = undefined;"},
{"lineNum":" 2663","line":"    var fbs = std.io.fixedBufferStream(&buf);"},
{"lineNum":" 2664","line":"    try formatFloatValue(value, \"\", FormatOptions{}, fbs.writer());"},
{"lineNum":" 2665","line":"    try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"1.0e+00\"));"},
{"lineNum":" 2666","line":""},
{"lineNum":" 2667","line":"    try expectFmt(\"1.0e+00\", \"{}\", .{value});"},
{"lineNum":" 2668","line":"    try expectFmt(\"1.0e+00\", \"{}\", .{1.0});"},
{"lineNum":" 2669","line":"}"},
{"lineNum":" 2670","line":""},
{"lineNum":" 2671","line":"test \"formatType max_depth\" {"},
{"lineNum":" 2672","line":"    const Vec2 = struct {"},
{"lineNum":" 2673","line":"        const SelfType = @This();"},
{"lineNum":" 2674","line":"        x: f32,"},
{"lineNum":" 2675","line":"        y: f32,"},
{"lineNum":" 2676","line":""},
{"lineNum":" 2677","line":"        pub fn format("},
{"lineNum":" 2678","line":"            self: SelfType,"},
{"lineNum":" 2679","line":"            comptime fmt: []const u8,"},
{"lineNum":" 2680","line":"            options: FormatOptions,"},
{"lineNum":" 2681","line":"            writer: anytype,"},
{"lineNum":" 2682","line":"        ) !void {"},
{"lineNum":" 2683","line":"            _ = options;"},
{"lineNum":" 2684","line":"            if (fmt.len == 0) {"},
{"lineNum":" 2685","line":"                return std.fmt.format(writer, \"({d:.3},{d:.3})\", .{ self.x, self.y });"},
{"lineNum":" 2686","line":"            } else {"},
{"lineNum":" 2687","line":"                @compileError(\"unknown format string: \'\" ++ fmt ++ \"\'\");"},
{"lineNum":" 2688","line":"            }"},
{"lineNum":" 2689","line":"        }"},
{"lineNum":" 2690","line":"    };"},
{"lineNum":" 2691","line":"    const E = enum {"},
{"lineNum":" 2692","line":"        One,"},
{"lineNum":" 2693","line":"        Two,"},
{"lineNum":" 2694","line":"        Three,"},
{"lineNum":" 2695","line":"    };"},
{"lineNum":" 2696","line":"    const TU = union(enum) {"},
{"lineNum":" 2697","line":"        const SelfType = @This();"},
{"lineNum":" 2698","line":"        float: f32,"},
{"lineNum":" 2699","line":"        int: u32,"},
{"lineNum":" 2700","line":"        ptr: ?*SelfType,"},
{"lineNum":" 2701","line":"    };"},
{"lineNum":" 2702","line":"    const S = struct {"},
{"lineNum":" 2703","line":"        const SelfType = @This();"},
{"lineNum":" 2704","line":"        a: ?*SelfType,"},
{"lineNum":" 2705","line":"        tu: TU,"},
{"lineNum":" 2706","line":"        e: E,"},
{"lineNum":" 2707","line":"        vec: Vec2,"},
{"lineNum":" 2708","line":"    };"},
{"lineNum":" 2709","line":""},
{"lineNum":" 2710","line":"    var inst = S{"},
{"lineNum":" 2711","line":"        .a = null,"},
{"lineNum":" 2712","line":"        .tu = TU{ .ptr = null },"},
{"lineNum":" 2713","line":"        .e = E.Two,"},
{"lineNum":" 2714","line":"        .vec = Vec2{ .x = 10.2, .y = 2.22 },"},
{"lineNum":" 2715","line":"    };"},
{"lineNum":" 2716","line":"    inst.a = &inst;"},
{"lineNum":" 2717","line":"    inst.tu.ptr = &inst.tu;"},
{"lineNum":" 2718","line":""},
{"lineNum":" 2719","line":"    var buf: [1000]u8 = undefined;"},
{"lineNum":" 2720","line":"    var fbs = std.io.fixedBufferStream(&buf);"},
{"lineNum":" 2721","line":"    try formatType(inst, \"\", FormatOptions{}, fbs.writer(), 0);"},
{"lineNum":" 2722","line":"    try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"fmt.test.formatType max_depth.S{ ... }\"));"},
{"lineNum":" 2723","line":""},
{"lineNum":" 2724","line":"    fbs.reset();"},
{"lineNum":" 2725","line":"    try formatType(inst, \"\", FormatOptions{}, fbs.writer(), 1);"},
{"lineNum":" 2726","line":"    try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"fmt.test.formatType max_depth.S{ .a = fmt.test.formatType max_depth.S{ ... }, .tu = fmt.test.formatType max_depth.TU{ ... }, .e = fmt.test.formatType max_depth.E.Two, .vec = (10.200,2.220) }\"));"},
{"lineNum":" 2727","line":""},
{"lineNum":" 2728","line":"    fbs.reset();"},
{"lineNum":" 2729","line":"    try formatType(inst, \"\", FormatOptions{}, fbs.writer(), 2);"},
{"lineNum":" 2730","line":"    try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"fmt.test.formatType max_depth.S{ .a = fmt.test.formatType max_depth.S{ .a = fmt.test.formatType max_depth.S{ ... }, .tu = fmt.test.formatType max_depth.TU{ ... }, .e = fmt.test.formatType max_depth.E.Two, .vec = (10.200,2.220) }, .tu = fmt.test.formatType max_depth.TU{ .ptr = fmt.test.formatType max_depth.TU{ ... } }, .e = fmt.test.formatType max_depth.E.Two, .vec = (10.200,2.220) }\"));"},
{"lineNum":" 2731","line":""},
{"lineNum":" 2732","line":"    fbs.reset();"},
{"lineNum":" 2733","line":"    try formatType(inst, \"\", FormatOptions{}, fbs.writer(), 3);"},
{"lineNum":" 2734","line":"    try std.testing.expect(mem.eql(u8, fbs.getWritten(), \"fmt.test.formatType max_depth.S{ .a = fmt.test.formatType max_depth.S{ .a = fmt.test.formatType max_depth.S{ .a = fmt.test.formatType max_depth.S{ ... }, .tu = fmt.test.formatType max_depth.TU{ ... }, .e = fmt.test.formatType max_depth.E.Two, .vec = (10.200,2.220) }, .tu = fmt.test.formatType max_depth.TU{ .ptr = fmt.test.formatType max_depth.TU{ ... } }, .e = fmt.test.formatType max_depth.E.Two, .vec = (10.200,2.220) }, .tu = fmt.test.formatType max_depth.TU{ .ptr = fmt.test.formatType max_depth.TU{ .ptr = fmt.test.formatType max_depth.TU{ ... } } }, .e = fmt.test.formatType max_depth.E.Two, .vec = (10.200,2.220) }\"));"},
{"lineNum":" 2735","line":"}"},
{"lineNum":" 2736","line":""},
{"lineNum":" 2737","line":"test \"positional\" {"},
{"lineNum":" 2738","line":"    try expectFmt(\"2 1 0\", \"{2} {1} {0}\", .{ @as(usize, 0), @as(usize, 1), @as(usize, 2) });"},
{"lineNum":" 2739","line":"    try expectFmt(\"2 1 0\", \"{2} {1} {}\", .{ @as(usize, 0), @as(usize, 1), @as(usize, 2) });"},
{"lineNum":" 2740","line":"    try expectFmt(\"0 0\", \"{0} {0}\", .{@as(usize, 0)});"},
{"lineNum":" 2741","line":"    try expectFmt(\"0 1\", \"{} {1}\", .{ @as(usize, 0), @as(usize, 1) });"},
{"lineNum":" 2742","line":"    try expectFmt(\"1 0 0 1\", \"{1} {} {0} {}\", .{ @as(usize, 0), @as(usize, 1) });"},
{"lineNum":" 2743","line":"}"},
{"lineNum":" 2744","line":""},
{"lineNum":" 2745","line":"test \"positional with specifier\" {"},
{"lineNum":" 2746","line":"    try expectFmt(\"10.0\", \"{0d:.1}\", .{@as(f64, 9.999)});"},
{"lineNum":" 2747","line":"}"},
{"lineNum":" 2748","line":""},
{"lineNum":" 2749","line":"test \"positional/alignment/width/precision\" {"},
{"lineNum":" 2750","line":"    try expectFmt(\"10.0\", \"{0d: >3.1}\", .{@as(f64, 9.999)});"},
{"lineNum":" 2751","line":"}"},
{"lineNum":" 2752","line":""},
{"lineNum":" 2753","line":"test \"vector\" {"},
{"lineNum":" 2754","line":"    if (builtin.target.cpu.arch == .riscv64) {"},
{"lineNum":" 2755","line":"        // https://github.com/ziglang/zig/issues/4486"},
{"lineNum":" 2756","line":"        return error.SkipZigTest;"},
{"lineNum":" 2757","line":"    }"},
{"lineNum":" 2758","line":""},
{"lineNum":" 2759","line":"    const vbool: @Vector(4, bool) = [_]bool{ true, false, true, false };"},
{"lineNum":" 2760","line":"    const vi64: @Vector(4, i64) = [_]i64{ -2, -1, 0, 1 };"},
{"lineNum":" 2761","line":"    const vu64: @Vector(4, u64) = [_]u64{ 1000, 2000, 3000, 4000 };"},
{"lineNum":" 2762","line":""},
{"lineNum":" 2763","line":"    try expectFmt(\"{ true, false, true, false }\", \"{}\", .{vbool});"},
{"lineNum":" 2764","line":"    try expectFmt(\"{ -2, -1, 0, 1 }\", \"{}\", .{vi64});"},
{"lineNum":" 2765","line":"    try expectFmt(\"{    -2,    -1,    +0,    +1 }\", \"{d:5}\", .{vi64});"},
{"lineNum":" 2766","line":"    try expectFmt(\"{ 1000, 2000, 3000, 4000 }\", \"{}\", .{vu64});"},
{"lineNum":" 2767","line":"    try expectFmt(\"{ 3e8, 7d0, bb8, fa0 }\", \"{x}\", .{vu64});"},
{"lineNum":" 2768","line":"}"},
{"lineNum":" 2769","line":""},
{"lineNum":" 2770","line":"test \"enum-literal\" {"},
{"lineNum":" 2771","line":"    try expectFmt(\".hello_world\", \"{}\", .{.hello_world});"},
{"lineNum":" 2772","line":"}"},
{"lineNum":" 2773","line":""},
{"lineNum":" 2774","line":"test \"padding\" {"},
{"lineNum":" 2775","line":"    try expectFmt(\"Simple\", \"{s}\", .{\"Simple\"});"},
{"lineNum":" 2776","line":"    try expectFmt(\"      true\", \"{:10}\", .{true});"},
{"lineNum":" 2777","line":"    try expectFmt(\"      true\", \"{:>10}\", .{true});"},
{"lineNum":" 2778","line":"    try expectFmt(\"======true\", \"{:=>10}\", .{true});"},
{"lineNum":" 2779","line":"    try expectFmt(\"true======\", \"{:=<10}\", .{true});"},
{"lineNum":" 2780","line":"    try expectFmt(\"   true   \", \"{:^10}\", .{true});"},
{"lineNum":" 2781","line":"    try expectFmt(\"===true===\", \"{:=^10}\", .{true});"},
{"lineNum":" 2782","line":"    try expectFmt(\"           Minimum width\", \"{s:18} width\", .{\"Minimum\"});"},
{"lineNum":" 2783","line":"    try expectFmt(\"==================Filled\", \"{s:=>24}\", .{\"Filled\"});"},
{"lineNum":" 2784","line":"    try expectFmt(\"        Centered        \", \"{s:^24}\", .{\"Centered\"});"},
{"lineNum":" 2785","line":"    try expectFmt(\"-\", \"{s:-^1}\", .{\"\"});"},
{"lineNum":" 2786","line":"    try expectFmt(\"==crêpe===\", \"{s:=^10}\", .{\"crêpe\"});"},
{"lineNum":" 2787","line":"    try expectFmt(\"=====crêpe\", \"{s:=>10}\", .{\"crêpe\"});"},
{"lineNum":" 2788","line":"    try expectFmt(\"crêpe=====\", \"{s:=<10}\", .{\"crêpe\"});"},
{"lineNum":" 2789","line":"    try expectFmt(\"====a\", \"{c:=>5}\", .{\'a\'});"},
{"lineNum":" 2790","line":"    try expectFmt(\"==a==\", \"{c:=^5}\", .{\'a\'});"},
{"lineNum":" 2791","line":"    try expectFmt(\"a====\", \"{c:=<5}\", .{\'a\'});"},
{"lineNum":" 2792","line":"}"},
{"lineNum":" 2793","line":""},
{"lineNum":" 2794","line":"test \"decimal float padding\" {"},
{"lineNum":" 2795","line":"    var number: f32 = 3.1415;"},
{"lineNum":" 2796","line":"    try expectFmt(\"left-pad:   **3.141\\n\", \"left-pad:   {d:*>7.3}\\n\", .{number});"},
{"lineNum":" 2797","line":"    try expectFmt(\"center-pad: *3.141*\\n\", \"center-pad: {d:*^7.3}\\n\", .{number});"},
{"lineNum":" 2798","line":"    try expectFmt(\"right-pad:  3.141**\\n\", \"right-pad:  {d:*<7.3}\\n\", .{number});"},
{"lineNum":" 2799","line":"}"},
{"lineNum":" 2800","line":""},
{"lineNum":" 2801","line":"test \"sci float padding\" {"},
{"lineNum":" 2802","line":"    var number: f32 = 3.1415;"},
{"lineNum":" 2803","line":"    try expectFmt(\"left-pad:   **3.141e+00\\n\", \"left-pad:   {e:*>11.3}\\n\", .{number});"},
{"lineNum":" 2804","line":"    try expectFmt(\"center-pad: *3.141e+00*\\n\", \"center-pad: {e:*^11.3}\\n\", .{number});"},
{"lineNum":" 2805","line":"    try expectFmt(\"right-pad:  3.141e+00**\\n\", \"right-pad:  {e:*<11.3}\\n\", .{number});"},
{"lineNum":" 2806","line":"}"},
{"lineNum":" 2807","line":""},
{"lineNum":" 2808","line":"test \"null\" {"},
{"lineNum":" 2809","line":"    const inst = null;"},
{"lineNum":" 2810","line":"    try expectFmt(\"null\", \"{}\", .{inst});"},
{"lineNum":" 2811","line":"}"},
{"lineNum":" 2812","line":""},
{"lineNum":" 2813","line":"test \"type\" {"},
{"lineNum":" 2814","line":"    try expectFmt(\"u8\", \"{}\", .{u8});"},
{"lineNum":" 2815","line":"    try expectFmt(\"?f32\", \"{}\", .{?f32});"},
{"lineNum":" 2816","line":"    try expectFmt(\"[]const u8\", \"{}\", .{[]const u8});"},
{"lineNum":" 2817","line":"}"},
{"lineNum":" 2818","line":""},
{"lineNum":" 2819","line":"test \"named arguments\" {"},
{"lineNum":" 2820","line":"    try expectFmt(\"hello world!\", \"{s} world{c}\", .{ \"hello\", \'!\' });"},
{"lineNum":" 2821","line":"    try expectFmt(\"hello world!\", \"{[greeting]s} world{[punctuation]c}\", .{ .punctuation = \'!\', .greeting = \"hello\" });"},
{"lineNum":" 2822","line":"    try expectFmt(\"hello world!\", \"{[1]s} world{[0]c}\", .{ \'!\', \"hello\" });"},
{"lineNum":" 2823","line":"}"},
{"lineNum":" 2824","line":""},
{"lineNum":" 2825","line":"test \"runtime width specifier\" {"},
{"lineNum":" 2826","line":"    var width: usize = 9;"},
{"lineNum":" 2827","line":"    try expectFmt(\"~~hello~~\", \"{s:~^[1]}\", .{ \"hello\", width });"},
{"lineNum":" 2828","line":"    try expectFmt(\"~~hello~~\", \"{s:~^[width]}\", .{ .string = \"hello\", .width = width });"},
{"lineNum":" 2829","line":"    try expectFmt(\"    hello\", \"{s:[1]}\", .{ \"hello\", width });"},
{"lineNum":" 2830","line":"    try expectFmt(\"42     hello\", \"{d} {s:[2]}\", .{ 42, \"hello\", width });"},
{"lineNum":" 2831","line":"}"},
{"lineNum":" 2832","line":""},
{"lineNum":" 2833","line":"test \"runtime precision specifier\" {"},
{"lineNum":" 2834","line":"    var number: f32 = 3.1415;"},
{"lineNum":" 2835","line":"    var precision: usize = 2;"},
{"lineNum":" 2836","line":"    try expectFmt(\"3.14e+00\", \"{:1.[1]}\", .{ number, precision });"},
{"lineNum":" 2837","line":"    try expectFmt(\"3.14e+00\", \"{:1.[precision]}\", .{ .number = number, .precision = precision });"},
{"lineNum":" 2838","line":"}"},
{"lineNum":" 2839","line":""},
{"lineNum":" 2840","line":"test \"recursive format function\" {"},
{"lineNum":" 2841","line":"    const R = union(enum) {"},
{"lineNum":" 2842","line":"        const R = @This();"},
{"lineNum":" 2843","line":"        Leaf: i32,"},
{"lineNum":" 2844","line":"        Branch: struct { left: *const R, right: *const R },"},
{"lineNum":" 2845","line":""},
{"lineNum":" 2846","line":"        pub fn format(self: R, comptime _: []const u8, _: std.fmt.FormatOptions, writer: anytype) !void {"},
{"lineNum":" 2847","line":"            return switch (self) {"},
{"lineNum":" 2848","line":"                .Leaf => |n| std.fmt.format(writer, \"Leaf({})\", .{n}),"},
{"lineNum":" 2849","line":"                .Branch => |b| std.fmt.format(writer, \"Branch({}, {})\", .{ b.left, b.right }),"},
{"lineNum":" 2850","line":"            };"},
{"lineNum":" 2851","line":"        }"},
{"lineNum":" 2852","line":"    };"},
{"lineNum":" 2853","line":""},
{"lineNum":" 2854","line":"    var r = R{ .Leaf = 1 };"},
{"lineNum":" 2855","line":"    try expectFmt(\"Leaf(1)\\n\", \"{}\\n\", .{&r});"},
{"lineNum":" 2856","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 147, "covered" : 89,};
var merged_data = [];
