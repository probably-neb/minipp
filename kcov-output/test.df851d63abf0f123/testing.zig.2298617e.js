var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const math = std.math;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"pub const FailingAllocator = @import(\"testing/failing_allocator.zig\").FailingAllocator;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"/// This should only be used in temporary test programs."},
{"lineNum":"    9","line":"pub const allocator = allocator_instance.allocator();"},
{"lineNum":"   10","line":"pub var allocator_instance = b: {"},
{"lineNum":"   11","line":"    if (!builtin.is_test)"},
{"lineNum":"   12","line":"        @compileError(\"Cannot use testing allocator outside of test block\");"},
{"lineNum":"   13","line":"    break :b std.heap.GeneralPurposeAllocator(.{}){};"},
{"lineNum":"   14","line":"};"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"pub const failing_allocator = failing_allocator_instance.allocator();"},
{"lineNum":"   17","line":"pub var failing_allocator_instance = FailingAllocator.init(base_allocator_instance.allocator(), 0);"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"pub var base_allocator_instance = std.heap.FixedBufferAllocator.init(\"\");"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"/// TODO https://github.com/ziglang/zig/issues/5738"},
{"lineNum":"   22","line":"pub var log_level = std.log.Level.warn;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"fn print(comptime fmt: []const u8, args: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"   25","line":"    // Disable printing in tests for simple backends."},
{"lineNum":"   26","line":"    if (builtin.zig_backend == .stage2_spirv64) return;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    std.debug.print(fmt, args);","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"/// This function is intended to be used only in tests. It prints diagnostics to stderr"},
{"lineNum":"   32","line":"/// and then returns a test failure error when actual_error_union is not expected_error."},
{"lineNum":"   33","line":"pub fn expectError(expected_error: anyerror, actual_error_union: anytype) !void {","class":"lineCov","hits":"7","order":"1242","possible_hits":"7",},
{"lineNum":"   34","line":"    if (actual_error_union) |actual_payload| {","class":"linePartCov","hits":"7","order":"1243","possible_hits":"8",},
{"lineNum":"   35","line":"        print(\"expected error.{s}, found {any}\\n\", .{ @errorName(expected_error), actual_payload });","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   36","line":"        return error.TestUnexpectedError;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   37","line":"    } else |actual_error| {"},
{"lineNum":"   38","line":"        if (expected_error != actual_error) {","class":"lineCov","hits":"7","order":"1244","possible_hits":"7",},
{"lineNum":"   39","line":"            print(\"expected error.{s}, found error.{s}\\n\", .{","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   40","line":"                @errorName(expected_error),","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   41","line":"                @errorName(actual_error),","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   42","line":"            });"},
{"lineNum":"   43","line":"            return error.TestExpectedError;","class":"linePartCov","hits":"14","order":"1245","possible_hits":"21",},
{"lineNum":"   44","line":"        }"},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":"}"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"/// This function is intended to be used only in tests. When the two values are not"},
{"lineNum":"   49","line":"/// equal, prints diagnostics to stderr to show exactly how they are not equal,"},
{"lineNum":"   50","line":"/// then returns a test failure error."},
{"lineNum":"   51","line":"/// `actual` is casted to the type of `expected`."},
{"lineNum":"   52","line":"pub fn expectEqual(expected: anytype, actual: @TypeOf(expected)) !void {","class":"lineCov","hits":"4","order":"1543","possible_hits":"4",},
{"lineNum":"   53","line":"    switch (@typeInfo(@TypeOf(actual))) {"},
{"lineNum":"   54","line":"        .NoReturn,"},
{"lineNum":"   55","line":"        .Opaque,"},
{"lineNum":"   56","line":"        .Frame,"},
{"lineNum":"   57","line":"        .AnyFrame,"},
{"lineNum":"   58","line":"        => @compileError(\"value of type \" ++ @typeName(@TypeOf(actual)) ++ \" encountered\"),"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        .Undefined,"},
{"lineNum":"   61","line":"        .Null,"},
{"lineNum":"   62","line":"        .Void,"},
{"lineNum":"   63","line":"        => return,"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        .Type => {"},
{"lineNum":"   66","line":"            if (actual != expected) {"},
{"lineNum":"   67","line":"                print(\"expected type {s}, found type {s}\\n\", .{ @typeName(expected), @typeName(actual) });"},
{"lineNum":"   68","line":"                return error.TestExpectedEqual;"},
{"lineNum":"   69","line":"            }"},
{"lineNum":"   70","line":"        },"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        .Bool,"},
{"lineNum":"   73","line":"        .Int,"},
{"lineNum":"   74","line":"        .Float,"},
{"lineNum":"   75","line":"        .ComptimeFloat,"},
{"lineNum":"   76","line":"        .ComptimeInt,"},
{"lineNum":"   77","line":"        .EnumLiteral,"},
{"lineNum":"   78","line":"        .Enum,"},
{"lineNum":"   79","line":"        .Fn,"},
{"lineNum":"   80","line":"        .ErrorSet,"},
{"lineNum":"   81","line":"        => {"},
{"lineNum":"   82","line":"            if (actual != expected) {","class":"lineCov","hits":"3","order":"1544","possible_hits":"3",},
{"lineNum":"   83","line":"                print(\"expected {}, found {}\\n\", .{ expected, actual });","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   84","line":"                return error.TestExpectedEqual;","class":"linePartCov","hits":"3","order":"1545","possible_hits":"6",},
{"lineNum":"   85","line":"            }"},
{"lineNum":"   86","line":"        },"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        .Pointer => |pointer| {"},
{"lineNum":"   89","line":"            switch (pointer.size) {"},
{"lineNum":"   90","line":"                .One, .Many, .C => {"},
{"lineNum":"   91","line":"                    if (actual != expected) {"},
{"lineNum":"   92","line":"                        print(\"expected {*}, found {*}\\n\", .{ expected, actual });"},
{"lineNum":"   93","line":"                        return error.TestExpectedEqual;"},
{"lineNum":"   94","line":"                    }"},
{"lineNum":"   95","line":"                },"},
{"lineNum":"   96","line":"                .Slice => {"},
{"lineNum":"   97","line":"                    if (actual.ptr != expected.ptr) {"},
{"lineNum":"   98","line":"                        print(\"expected slice ptr {*}, found {*}\\n\", .{ expected.ptr, actual.ptr });"},
{"lineNum":"   99","line":"                        return error.TestExpectedEqual;"},
{"lineNum":"  100","line":"                    }"},
{"lineNum":"  101","line":"                    if (actual.len != expected.len) {"},
{"lineNum":"  102","line":"                        print(\"expected slice len {}, found {}\\n\", .{ expected.len, actual.len });"},
{"lineNum":"  103","line":"                        return error.TestExpectedEqual;"},
{"lineNum":"  104","line":"                    }"},
{"lineNum":"  105","line":"                },"},
{"lineNum":"  106","line":"            }"},
{"lineNum":"  107","line":"        },"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        .Array => |array| try expectEqualSlices(array.child, &expected, &actual),"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"        .Vector => |info| {"},
{"lineNum":"  112","line":"            var i: usize = 0;"},
{"lineNum":"  113","line":"            while (i < info.len) : (i += 1) {"},
{"lineNum":"  114","line":"                if (!std.meta.eql(expected[i], actual[i])) {"},
{"lineNum":"  115","line":"                    print(\"index {} incorrect. expected {}, found {}\\n\", .{"},
{"lineNum":"  116","line":"                        i, expected[i], actual[i],"},
{"lineNum":"  117","line":"                    });"},
{"lineNum":"  118","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  119","line":"                }"},
{"lineNum":"  120","line":"            }"},
{"lineNum":"  121","line":"        },"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        .Struct => |structType| {"},
{"lineNum":"  124","line":"            inline for (structType.fields) |field| {"},
{"lineNum":"  125","line":"                try expectEqual(@field(expected, field.name), @field(actual, field.name));"},
{"lineNum":"  126","line":"            }"},
{"lineNum":"  127","line":"        },"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        .Union => |union_info| {"},
{"lineNum":"  130","line":"            if (union_info.tag_type == null) {"},
{"lineNum":"  131","line":"                @compileError(\"Unable to compare untagged union values\");"},
{"lineNum":"  132","line":"            }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"            const Tag = std.meta.Tag(@TypeOf(expected));"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"            const expectedTag = @as(Tag, expected);"},
{"lineNum":"  137","line":"            const actualTag = @as(Tag, actual);"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"            try expectEqual(expectedTag, actualTag);"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"            // we only reach this loop if the tags are equal"},
{"lineNum":"  142","line":"            inline for (std.meta.fields(@TypeOf(actual))) |fld| {"},
{"lineNum":"  143","line":"                if (std.mem.eql(u8, fld.name, @tagName(actualTag))) {"},
{"lineNum":"  144","line":"                    try expectEqual(@field(expected, fld.name), @field(actual, fld.name));"},
{"lineNum":"  145","line":"                    return;"},
{"lineNum":"  146","line":"                }"},
{"lineNum":"  147","line":"            }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"            // we iterate over *all* union fields"},
{"lineNum":"  150","line":"            // => we should never get here as the loop above is"},
{"lineNum":"  151","line":"            //    including all possible values."},
{"lineNum":"  152","line":"            unreachable;"},
{"lineNum":"  153","line":"        },"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        .Optional => {"},
{"lineNum":"  156","line":"            if (expected) |expected_payload| {","class":"lineCov","hits":"2","order":"3373","possible_hits":"2",},
{"lineNum":"  157","line":"                if (actual) |actual_payload| {","class":"lineCov","hits":"2","order":"3470","possible_hits":"2",},
{"lineNum":"  158","line":"                    try expectEqual(expected_payload, actual_payload);","class":"linePartCov","hits":"1","order":"3471","possible_hits":"2",},
{"lineNum":"  159","line":"                } else {"},
{"lineNum":"  160","line":"                    print(\"expected {any}, found null\\n\", .{expected_payload});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"                    return error.TestExpectedEqual;","class":"linePartCov","hits":"1","order":"3472","possible_hits":"2",},
{"lineNum":"  162","line":"                }"},
{"lineNum":"  163","line":"            } else {"},
{"lineNum":"  164","line":"                if (actual) |actual_payload| {","class":"linePartCov","hits":"1","order":"3374","possible_hits":"2",},
{"lineNum":"  165","line":"                    print(\"expected null, found {any}\\n\", .{actual_payload});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"                    return error.TestExpectedEqual;","class":"linePartCov","hits":"2","order":"3375","possible_hits":"3",},
{"lineNum":"  167","line":"                }"},
{"lineNum":"  168","line":"            }"},
{"lineNum":"  169","line":"        },"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        .ErrorUnion => {"},
{"lineNum":"  172","line":"            if (expected) |expected_payload| {"},
{"lineNum":"  173","line":"                if (actual) |actual_payload| {"},
{"lineNum":"  174","line":"                    try expectEqual(expected_payload, actual_payload);"},
{"lineNum":"  175","line":"                } else |actual_err| {"},
{"lineNum":"  176","line":"                    print(\"expected {any}, found {}\\n\", .{ expected_payload, actual_err });"},
{"lineNum":"  177","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  178","line":"                }"},
{"lineNum":"  179","line":"            } else |expected_err| {"},
{"lineNum":"  180","line":"                if (actual) |actual_payload| {"},
{"lineNum":"  181","line":"                    print(\"expected {}, found {any}\\n\", .{ expected_err, actual_payload });"},
{"lineNum":"  182","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  183","line":"                } else |actual_err| {"},
{"lineNum":"  184","line":"                    try expectEqual(expected_err, actual_err);"},
{"lineNum":"  185","line":"                }"},
{"lineNum":"  186","line":"            }"},
{"lineNum":"  187","line":"        },"},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"test \"expectEqual.union(enum)\" {"},
{"lineNum":"  192","line":"    const T = union(enum) {"},
{"lineNum":"  193","line":"        a: i32,"},
{"lineNum":"  194","line":"        b: f32,"},
{"lineNum":"  195","line":"    };"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    const a10 = T{ .a = 10 };"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    try expectEqual(a10, a10);"},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"/// This function is intended to be used only in tests. When the formatted result of the template"},
{"lineNum":"  203","line":"/// and its arguments does not equal the expected text, it prints diagnostics to stderr to show how"},
{"lineNum":"  204","line":"/// they are not equal, then returns an error."},
{"lineNum":"  205","line":"pub fn expectFmt(expected: []const u8, comptime template: []const u8, args: anytype) !void {"},
{"lineNum":"  206","line":"    const result = try std.fmt.allocPrint(allocator, template, args);"},
{"lineNum":"  207","line":"    defer allocator.free(result);"},
{"lineNum":"  208","line":"    if (std.mem.eql(u8, result, expected)) return;"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    print(\"\\n====== expected this output: =========\\n\", .{});"},
{"lineNum":"  211","line":"    print(\"{s}\", .{expected});"},
{"lineNum":"  212","line":"    print(\"\\n======== instead found this: =========\\n\", .{});"},
{"lineNum":"  213","line":"    print(\"{s}\", .{result});"},
{"lineNum":"  214","line":"    print(\"\\n======================================\\n\", .{});"},
{"lineNum":"  215","line":"    return error.TestExpectedFmt;"},
{"lineNum":"  216","line":"}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"/// This function is intended to be used only in tests. When the actual value is"},
{"lineNum":"  219","line":"/// not approximately equal to the expected value, prints diagnostics to stderr"},
{"lineNum":"  220","line":"/// to show exactly how they are not equal, then returns a test failure error."},
{"lineNum":"  221","line":"/// See `math.approxEqAbs` for more information on the tolerance parameter."},
{"lineNum":"  222","line":"/// The types must be floating-point."},
{"lineNum":"  223","line":"pub fn expectApproxEqAbs(expected: anytype, actual: @TypeOf(expected), tolerance: @TypeOf(expected)) !void {"},
{"lineNum":"  224","line":"    const T = @TypeOf(expected);"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  227","line":"        .Float => if (!math.approxEqAbs(T, expected, actual, tolerance)) {"},
{"lineNum":"  228","line":"            print(\"actual {}, not within absolute tolerance {} of expected {}\\n\", .{ actual, tolerance, expected });"},
{"lineNum":"  229","line":"            return error.TestExpectedApproxEqAbs;"},
{"lineNum":"  230","line":"        },"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"        .ComptimeFloat => @compileError(\"Cannot approximately compare two comptime_float values\"),"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        else => @compileError(\"Unable to compare non floating point values\"),"},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":"}"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"test \"expectApproxEqAbs\" {"},
{"lineNum":"  239","line":"    inline for ([_]type{ f16, f32, f64, f128 }) |T| {"},
{"lineNum":"  240","line":"        const pos_x: T = 12.0;"},
{"lineNum":"  241","line":"        const pos_y: T = 12.06;"},
{"lineNum":"  242","line":"        const neg_x: T = -12.0;"},
{"lineNum":"  243","line":"        const neg_y: T = -12.06;"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"        try expectApproxEqAbs(pos_x, pos_y, 0.1);"},
{"lineNum":"  246","line":"        try expectApproxEqAbs(neg_x, neg_y, 0.1);"},
{"lineNum":"  247","line":"    }"},
{"lineNum":"  248","line":"}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"/// This function is intended to be used only in tests. When the actual value is"},
{"lineNum":"  251","line":"/// not approximately equal to the expected value, prints diagnostics to stderr"},
{"lineNum":"  252","line":"/// to show exactly how they are not equal, then returns a test failure error."},
{"lineNum":"  253","line":"/// See `math.approxEqRel` for more information on the tolerance parameter."},
{"lineNum":"  254","line":"/// The types must be floating-point."},
{"lineNum":"  255","line":"pub fn expectApproxEqRel(expected: anytype, actual: @TypeOf(expected), tolerance: @TypeOf(expected)) !void {"},
{"lineNum":"  256","line":"    const T = @TypeOf(expected);"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  259","line":"        .Float => if (!math.approxEqRel(T, expected, actual, tolerance)) {"},
{"lineNum":"  260","line":"            print(\"actual {}, not within relative tolerance {} of expected {}\\n\", .{ actual, tolerance, expected });"},
{"lineNum":"  261","line":"            return error.TestExpectedApproxEqRel;"},
{"lineNum":"  262","line":"        },"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"        .ComptimeFloat => @compileError(\"Cannot approximately compare two comptime_float values\"),"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        else => @compileError(\"Unable to compare non floating point values\"),"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"test \"expectApproxEqRel\" {"},
{"lineNum":"  271","line":"    inline for ([_]type{ f16, f32, f64, f128 }) |T| {"},
{"lineNum":"  272","line":"        const eps_value = comptime math.floatEps(T);"},
{"lineNum":"  273","line":"        const sqrt_eps_value = comptime @sqrt(eps_value);"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"        const pos_x: T = 12.0;"},
{"lineNum":"  276","line":"        const pos_y: T = pos_x + 2 * eps_value;"},
{"lineNum":"  277","line":"        const neg_x: T = -12.0;"},
{"lineNum":"  278","line":"        const neg_y: T = neg_x - 2 * eps_value;"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"        try expectApproxEqRel(pos_x, pos_y, sqrt_eps_value);"},
{"lineNum":"  281","line":"        try expectApproxEqRel(neg_x, neg_y, sqrt_eps_value);"},
{"lineNum":"  282","line":"    }"},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"/// This function is intended to be used only in tests. When the two slices are not"},
{"lineNum":"  286","line":"/// equal, prints diagnostics to stderr to show exactly how they are not equal (with"},
{"lineNum":"  287","line":"/// the differences highlighted in red), then returns a test failure error."},
{"lineNum":"  288","line":"/// The colorized output is optional and controlled by the return of `std.io.tty.detectConfig()`."},
{"lineNum":"  289","line":"/// If your inputs are UTF-8 encoded strings, consider calling `expectEqualStrings` instead."},
{"lineNum":"  290","line":"pub fn expectEqualSlices(comptime T: type, expected: []const T, actual: []const T) !void {"},
{"lineNum":"  291","line":"    if (expected.ptr == actual.ptr and expected.len == actual.len) {"},
{"lineNum":"  292","line":"        return;"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":"    const diff_index: usize = diff_index: {"},
{"lineNum":"  295","line":"        const shortest = @min(expected.len, actual.len);"},
{"lineNum":"  296","line":"        var index: usize = 0;"},
{"lineNum":"  297","line":"        while (index < shortest) : (index += 1) {"},
{"lineNum":"  298","line":"            if (!std.meta.eql(actual[index], expected[index])) break :diff_index index;"},
{"lineNum":"  299","line":"        }"},
{"lineNum":"  300","line":"        break :diff_index if (expected.len == actual.len) return else shortest;"},
{"lineNum":"  301","line":"    };"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    print(\"slices differ. first difference occurs at index {d} (0x{X})\\n\", .{ diff_index, diff_index });"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    // TODO: Should this be configurable by the caller?"},
{"lineNum":"  306","line":"    const max_lines: usize = 16;"},
{"lineNum":"  307","line":"    const max_window_size: usize = if (T == u8) max_lines * 16 else max_lines;"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    // Print a maximum of max_window_size items of each input, starting just before the"},
{"lineNum":"  310","line":"    // first difference to give a bit of context."},
{"lineNum":"  311","line":"    var window_start: usize = 0;"},
{"lineNum":"  312","line":"    if (@max(actual.len, expected.len) > max_window_size) {"},
{"lineNum":"  313","line":"        const alignment = if (T == u8) 16 else 2;"},
{"lineNum":"  314","line":"        window_start = std.mem.alignBackward(usize, diff_index - @min(diff_index, alignment), alignment);"},
{"lineNum":"  315","line":"    }"},
{"lineNum":"  316","line":"    const expected_window = expected[window_start..@min(expected.len, window_start + max_window_size)];"},
{"lineNum":"  317","line":"    const expected_truncated = window_start + expected_window.len < expected.len;"},
{"lineNum":"  318","line":"    const actual_window = actual[window_start..@min(actual.len, window_start + max_window_size)];"},
{"lineNum":"  319","line":"    const actual_truncated = window_start + actual_window.len < actual.len;"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    const ttyconf = std.io.tty.detectConfig(std.io.getStdErr());"},
{"lineNum":"  322","line":"    var differ = if (T == u8) BytesDiffer{"},
{"lineNum":"  323","line":"        .expected = expected_window,"},
{"lineNum":"  324","line":"        .actual = actual_window,"},
{"lineNum":"  325","line":"        .ttyconf = ttyconf,"},
{"lineNum":"  326","line":"    } else SliceDiffer(T){"},
{"lineNum":"  327","line":"        .start_index = window_start,"},
{"lineNum":"  328","line":"        .expected = expected_window,"},
{"lineNum":"  329","line":"        .actual = actual_window,"},
{"lineNum":"  330","line":"        .ttyconf = ttyconf,"},
{"lineNum":"  331","line":"    };"},
{"lineNum":"  332","line":"    const stderr = std.io.getStdErr();"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    // Print indexes as hex for slices of u8 since it\'s more likely to be binary data where"},
{"lineNum":"  335","line":"    // that is usually useful."},
{"lineNum":"  336","line":"    const index_fmt = if (T == u8) \"0x{X}\" else \"{}\";"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    print(\"\\n============ expected this output: =============  len: {} (0x{X})\\n\\n\", .{ expected.len, expected.len });"},
{"lineNum":"  339","line":"    if (window_start > 0) {"},
{"lineNum":"  340","line":"        if (T == u8) {"},
{"lineNum":"  341","line":"            print(\"... truncated, start index: \" ++ index_fmt ++ \" ...\\n\", .{window_start});"},
{"lineNum":"  342","line":"        } else {"},
{"lineNum":"  343","line":"            print(\"... truncated ...\\n\", .{});"},
{"lineNum":"  344","line":"        }"},
{"lineNum":"  345","line":"    }"},
{"lineNum":"  346","line":"    differ.write(stderr.writer()) catch {};"},
{"lineNum":"  347","line":"    if (expected_truncated) {"},
{"lineNum":"  348","line":"        const end_offset = window_start + expected_window.len;"},
{"lineNum":"  349","line":"        const num_missing_items = expected.len - (window_start + expected_window.len);"},
{"lineNum":"  350","line":"        if (T == u8) {"},
{"lineNum":"  351","line":"            print(\"... truncated, indexes [\" ++ index_fmt ++ \"..] not shown, remaining bytes: \" ++ index_fmt ++ \" ...\\n\", .{ end_offset, num_missing_items });"},
{"lineNum":"  352","line":"        } else {"},
{"lineNum":"  353","line":"            print(\"... truncated, remaining items: \" ++ index_fmt ++ \" ...\\n\", .{num_missing_items});"},
{"lineNum":"  354","line":"        }"},
{"lineNum":"  355","line":"    }"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    // now reverse expected/actual and print again"},
{"lineNum":"  358","line":"    differ.expected = actual_window;"},
{"lineNum":"  359","line":"    differ.actual = expected_window;"},
{"lineNum":"  360","line":"    print(\"\\n============= instead found this: ==============  len: {} (0x{X})\\n\\n\", .{ actual.len, actual.len });"},
{"lineNum":"  361","line":"    if (window_start > 0) {"},
{"lineNum":"  362","line":"        if (T == u8) {"},
{"lineNum":"  363","line":"            print(\"... truncated, start index: \" ++ index_fmt ++ \" ...\\n\", .{window_start});"},
{"lineNum":"  364","line":"        } else {"},
{"lineNum":"  365","line":"            print(\"... truncated ...\\n\", .{});"},
{"lineNum":"  366","line":"        }"},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":"    differ.write(stderr.writer()) catch {};"},
{"lineNum":"  369","line":"    if (actual_truncated) {"},
{"lineNum":"  370","line":"        const end_offset = window_start + actual_window.len;"},
{"lineNum":"  371","line":"        const num_missing_items = actual.len - (window_start + actual_window.len);"},
{"lineNum":"  372","line":"        if (T == u8) {"},
{"lineNum":"  373","line":"            print(\"... truncated, indexes [\" ++ index_fmt ++ \"..] not shown, remaining bytes: \" ++ index_fmt ++ \" ...\\n\", .{ end_offset, num_missing_items });"},
{"lineNum":"  374","line":"        } else {"},
{"lineNum":"  375","line":"            print(\"... truncated, remaining items: \" ++ index_fmt ++ \" ...\\n\", .{num_missing_items});"},
{"lineNum":"  376","line":"        }"},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":"    print(\"\\n================================================\\n\\n\", .{});"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    return error.TestExpectedEqual;"},
{"lineNum":"  381","line":"}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"fn SliceDiffer(comptime T: type) type {"},
{"lineNum":"  384","line":"    return struct {"},
{"lineNum":"  385","line":"        start_index: usize,"},
{"lineNum":"  386","line":"        expected: []const T,"},
{"lineNum":"  387","line":"        actual: []const T,"},
{"lineNum":"  388","line":"        ttyconf: std.io.tty.Config,"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        const Self = @This();"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"        pub fn write(self: Self, writer: anytype) !void {"},
{"lineNum":"  393","line":"            for (self.expected, 0..) |value, i| {"},
{"lineNum":"  394","line":"                var full_index = self.start_index + i;"},
{"lineNum":"  395","line":"                const diff = if (i < self.actual.len) !std.meta.eql(self.actual[i], value) else true;"},
{"lineNum":"  396","line":"                if (diff) try self.ttyconf.setColor(writer, .red);"},
{"lineNum":"  397","line":"                try writer.print(\"[{}]: {any}\\n\", .{ full_index, value });"},
{"lineNum":"  398","line":"                if (diff) try self.ttyconf.setColor(writer, .reset);"},
{"lineNum":"  399","line":"            }"},
{"lineNum":"  400","line":"        }"},
{"lineNum":"  401","line":"    };"},
{"lineNum":"  402","line":"}"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"const BytesDiffer = struct {"},
{"lineNum":"  405","line":"    expected: []const u8,"},
{"lineNum":"  406","line":"    actual: []const u8,"},
{"lineNum":"  407","line":"    ttyconf: std.io.tty.Config,"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    pub fn write(self: BytesDiffer, writer: anytype) !void {"},
{"lineNum":"  410","line":"        var expected_iterator = ChunkIterator{ .bytes = self.expected };"},
{"lineNum":"  411","line":"        while (expected_iterator.next()) |chunk| {"},
{"lineNum":"  412","line":"            // to avoid having to calculate diffs twice per chunk"},
{"lineNum":"  413","line":"            var diffs: std.bit_set.IntegerBitSet(16) = .{ .mask = 0 };"},
{"lineNum":"  414","line":"            for (chunk, 0..) |byte, i| {"},
{"lineNum":"  415","line":"                var absolute_byte_index = (expected_iterator.index - chunk.len) + i;"},
{"lineNum":"  416","line":"                const diff = if (absolute_byte_index < self.actual.len) self.actual[absolute_byte_index] != byte else true;"},
{"lineNum":"  417","line":"                if (diff) diffs.set(i);"},
{"lineNum":"  418","line":"                try self.writeByteDiff(writer, \"{X:0>2} \", byte, diff);"},
{"lineNum":"  419","line":"                if (i == 7) try writer.writeByte(\' \');"},
{"lineNum":"  420","line":"            }"},
{"lineNum":"  421","line":"            try writer.writeByte(\' \');"},
{"lineNum":"  422","line":"            if (chunk.len < 16) {"},
{"lineNum":"  423","line":"                var missing_columns = (16 - chunk.len) * 3;"},
{"lineNum":"  424","line":"                if (chunk.len < 8) missing_columns += 1;"},
{"lineNum":"  425","line":"                try writer.writeByteNTimes(\' \', missing_columns);"},
{"lineNum":"  426","line":"            }"},
{"lineNum":"  427","line":"            for (chunk, 0..) |byte, i| {"},
{"lineNum":"  428","line":"                const byte_to_print = if (std.ascii.isPrint(byte)) byte else \'.\';"},
{"lineNum":"  429","line":"                try self.writeByteDiff(writer, \"{c}\", byte_to_print, diffs.isSet(i));"},
{"lineNum":"  430","line":"            }"},
{"lineNum":"  431","line":"            try writer.writeByte(\'\\n\');"},
{"lineNum":"  432","line":"        }"},
{"lineNum":"  433","line":"    }"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    fn writeByteDiff(self: BytesDiffer, writer: anytype, comptime fmt: []const u8, byte: u8, diff: bool) !void {"},
{"lineNum":"  436","line":"        if (diff) try self.ttyconf.setColor(writer, .red);"},
{"lineNum":"  437","line":"        try writer.print(fmt, .{byte});"},
{"lineNum":"  438","line":"        if (diff) try self.ttyconf.setColor(writer, .reset);"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    const ChunkIterator = struct {"},
{"lineNum":"  442","line":"        bytes: []const u8,"},
{"lineNum":"  443","line":"        index: usize = 0,"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"        pub fn next(self: *ChunkIterator) ?[]const u8 {"},
{"lineNum":"  446","line":"            if (self.index == self.bytes.len) return null;"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"            const start_index = self.index;"},
{"lineNum":"  449","line":"            const end_index = @min(self.bytes.len, start_index + 16);"},
{"lineNum":"  450","line":"            self.index = end_index;"},
{"lineNum":"  451","line":"            return self.bytes[start_index..end_index];"},
{"lineNum":"  452","line":"        }"},
{"lineNum":"  453","line":"    };"},
{"lineNum":"  454","line":"};"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"test {"},
{"lineNum":"  457","line":"    try expectEqualSlices(u8, \"foo\\x00\", \"foo\\x00\");"},
{"lineNum":"  458","line":"    try expectEqualSlices(u16, &[_]u16{ 100, 200, 300, 400 }, &[_]u16{ 100, 200, 300, 400 });"},
{"lineNum":"  459","line":"    const E = enum { foo, bar };"},
{"lineNum":"  460","line":"    const S = struct {"},
{"lineNum":"  461","line":"        v: E,"},
{"lineNum":"  462","line":"    };"},
{"lineNum":"  463","line":"    try expectEqualSlices("},
{"lineNum":"  464","line":"        S,"},
{"lineNum":"  465","line":"        &[_]S{ .{ .v = .foo }, .{ .v = .bar }, .{ .v = .foo }, .{ .v = .bar } },"},
{"lineNum":"  466","line":"        &[_]S{ .{ .v = .foo }, .{ .v = .bar }, .{ .v = .foo }, .{ .v = .bar } },"},
{"lineNum":"  467","line":"    );"},
{"lineNum":"  468","line":"}"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"/// This function is intended to be used only in tests. Checks that two slices or two arrays are equal,"},
{"lineNum":"  471","line":"/// including that their sentinel (if any) are the same. Will error if given another type."},
{"lineNum":"  472","line":"pub fn expectEqualSentinel(comptime T: type, comptime sentinel: T, expected: [:sentinel]const T, actual: [:sentinel]const T) !void {"},
{"lineNum":"  473","line":"    try expectEqualSlices(T, expected, actual);"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    const expected_value_sentinel = blk: {"},
{"lineNum":"  476","line":"        switch (@typeInfo(@TypeOf(expected))) {"},
{"lineNum":"  477","line":"            .Pointer => {"},
{"lineNum":"  478","line":"                break :blk expected[expected.len];"},
{"lineNum":"  479","line":"            },"},
{"lineNum":"  480","line":"            .Array => |array_info| {"},
{"lineNum":"  481","line":"                const indexable_outside_of_bounds = @as([]const array_info.child, &expected);"},
{"lineNum":"  482","line":"                break :blk indexable_outside_of_bounds[indexable_outside_of_bounds.len];"},
{"lineNum":"  483","line":"            },"},
{"lineNum":"  484","line":"            else => {},"},
{"lineNum":"  485","line":"        }"},
{"lineNum":"  486","line":"    };"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"    const actual_value_sentinel = blk: {"},
{"lineNum":"  489","line":"        switch (@typeInfo(@TypeOf(actual))) {"},
{"lineNum":"  490","line":"            .Pointer => {"},
{"lineNum":"  491","line":"                break :blk actual[actual.len];"},
{"lineNum":"  492","line":"            },"},
{"lineNum":"  493","line":"            .Array => |array_info| {"},
{"lineNum":"  494","line":"                const indexable_outside_of_bounds = @as([]const array_info.child, &actual);"},
{"lineNum":"  495","line":"                break :blk indexable_outside_of_bounds[indexable_outside_of_bounds.len];"},
{"lineNum":"  496","line":"            },"},
{"lineNum":"  497","line":"            else => {},"},
{"lineNum":"  498","line":"        }"},
{"lineNum":"  499","line":"    };"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    if (!std.meta.eql(sentinel, expected_value_sentinel)) {"},
{"lineNum":"  502","line":"        print(\"expectEqualSentinel: \'expected\' sentinel in memory is different from its type sentinel. type sentinel {}, in memory sentinel {}\\n\", .{ sentinel, expected_value_sentinel });"},
{"lineNum":"  503","line":"        return error.TestExpectedEqual;"},
{"lineNum":"  504","line":"    }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    if (!std.meta.eql(sentinel, actual_value_sentinel)) {"},
{"lineNum":"  507","line":"        print(\"expectEqualSentinel: \'actual\' sentinel in memory is different from its type sentinel. type sentinel {}, in memory sentinel {}\\n\", .{ sentinel, actual_value_sentinel });"},
{"lineNum":"  508","line":"        return error.TestExpectedEqual;"},
{"lineNum":"  509","line":"    }"},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"/// This function is intended to be used only in tests."},
{"lineNum":"  513","line":"/// When `ok` is false, returns a test failure error."},
{"lineNum":"  514","line":"pub fn expect(ok: bool) !void {","class":"lineCov","hits":"1","order":"2824","possible_hits":"1",},
{"lineNum":"  515","line":"    if (!ok) return error.TestUnexpectedResult;","class":"lineCov","hits":"1","order":"2825","possible_hits":"1",},
{"lineNum":"  516","line":"}"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"pub const TmpDir = struct {"},
{"lineNum":"  519","line":"    dir: std.fs.Dir,"},
{"lineNum":"  520","line":"    parent_dir: std.fs.Dir,"},
{"lineNum":"  521","line":"    sub_path: [sub_path_len]u8,"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"    const random_bytes_count = 12;"},
{"lineNum":"  524","line":"    const sub_path_len = std.fs.base64_encoder.calcSize(random_bytes_count);"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"    pub fn cleanup(self: *TmpDir) void {"},
{"lineNum":"  527","line":"        self.dir.close();"},
{"lineNum":"  528","line":"        self.parent_dir.deleteTree(&self.sub_path) catch {};"},
{"lineNum":"  529","line":"        self.parent_dir.close();"},
{"lineNum":"  530","line":"        self.* = undefined;"},
{"lineNum":"  531","line":"    }"},
{"lineNum":"  532","line":"};"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"pub const TmpIterableDir = struct {"},
{"lineNum":"  535","line":"    iterable_dir: std.fs.IterableDir,"},
{"lineNum":"  536","line":"    parent_dir: std.fs.Dir,"},
{"lineNum":"  537","line":"    sub_path: [sub_path_len]u8,"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    const random_bytes_count = 12;"},
{"lineNum":"  540","line":"    const sub_path_len = std.fs.base64_encoder.calcSize(random_bytes_count);"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    pub fn cleanup(self: *TmpIterableDir) void {"},
{"lineNum":"  543","line":"        self.iterable_dir.close();"},
{"lineNum":"  544","line":"        self.parent_dir.deleteTree(&self.sub_path) catch {};"},
{"lineNum":"  545","line":"        self.parent_dir.close();"},
{"lineNum":"  546","line":"        self.* = undefined;"},
{"lineNum":"  547","line":"    }"},
{"lineNum":"  548","line":"};"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"pub fn tmpDir(opts: std.fs.Dir.OpenDirOptions) TmpDir {"},
{"lineNum":"  551","line":"    var random_bytes: [TmpDir.random_bytes_count]u8 = undefined;"},
{"lineNum":"  552","line":"    std.crypto.random.bytes(&random_bytes);"},
{"lineNum":"  553","line":"    var sub_path: [TmpDir.sub_path_len]u8 = undefined;"},
{"lineNum":"  554","line":"    _ = std.fs.base64_encoder.encode(&sub_path, &random_bytes);"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"    var cwd = std.fs.cwd();"},
{"lineNum":"  557","line":"    var cache_dir = cwd.makeOpenPath(\"zig-cache\", .{}) catch"},
{"lineNum":"  558","line":"        @panic(\"unable to make tmp dir for testing: unable to make and open zig-cache dir\");"},
{"lineNum":"  559","line":"    defer cache_dir.close();"},
{"lineNum":"  560","line":"    var parent_dir = cache_dir.makeOpenPath(\"tmp\", .{}) catch"},
{"lineNum":"  561","line":"        @panic(\"unable to make tmp dir for testing: unable to make and open zig-cache/tmp dir\");"},
{"lineNum":"  562","line":"    var dir = parent_dir.makeOpenPath(&sub_path, opts) catch"},
{"lineNum":"  563","line":"        @panic(\"unable to make tmp dir for testing: unable to make and open the tmp dir\");"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    return .{"},
{"lineNum":"  566","line":"        .dir = dir,"},
{"lineNum":"  567","line":"        .parent_dir = parent_dir,"},
{"lineNum":"  568","line":"        .sub_path = sub_path,"},
{"lineNum":"  569","line":"    };"},
{"lineNum":"  570","line":"}"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"pub fn tmpIterableDir(opts: std.fs.Dir.OpenDirOptions) TmpIterableDir {"},
{"lineNum":"  573","line":"    var random_bytes: [TmpIterableDir.random_bytes_count]u8 = undefined;"},
{"lineNum":"  574","line":"    std.crypto.random.bytes(&random_bytes);"},
{"lineNum":"  575","line":"    var sub_path: [TmpIterableDir.sub_path_len]u8 = undefined;"},
{"lineNum":"  576","line":"    _ = std.fs.base64_encoder.encode(&sub_path, &random_bytes);"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    var cwd = std.fs.cwd();"},
{"lineNum":"  579","line":"    var cache_dir = cwd.makeOpenPath(\"zig-cache\", .{}) catch"},
{"lineNum":"  580","line":"        @panic(\"unable to make tmp dir for testing: unable to make and open zig-cache dir\");"},
{"lineNum":"  581","line":"    defer cache_dir.close();"},
{"lineNum":"  582","line":"    var parent_dir = cache_dir.makeOpenPath(\"tmp\", .{}) catch"},
{"lineNum":"  583","line":"        @panic(\"unable to make tmp dir for testing: unable to make and open zig-cache/tmp dir\");"},
{"lineNum":"  584","line":"    var dir = parent_dir.makeOpenPathIterable(&sub_path, opts) catch"},
{"lineNum":"  585","line":"        @panic(\"unable to make tmp dir for testing: unable to make and open the tmp dir\");"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    return .{"},
{"lineNum":"  588","line":"        .iterable_dir = dir,"},
{"lineNum":"  589","line":"        .parent_dir = parent_dir,"},
{"lineNum":"  590","line":"        .sub_path = sub_path,"},
{"lineNum":"  591","line":"    };"},
{"lineNum":"  592","line":"}"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"test \"expectEqual nested array\" {"},
{"lineNum":"  595","line":"    const a = [2][2]f32{"},
{"lineNum":"  596","line":"        [_]f32{ 1.0, 0.0 },"},
{"lineNum":"  597","line":"        [_]f32{ 0.0, 1.0 },"},
{"lineNum":"  598","line":"    };"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    const b = [2][2]f32{"},
{"lineNum":"  601","line":"        [_]f32{ 1.0, 0.0 },"},
{"lineNum":"  602","line":"        [_]f32{ 0.0, 1.0 },"},
{"lineNum":"  603","line":"    };"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    try expectEqual(a, b);"},
{"lineNum":"  606","line":"}"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"test \"expectEqual vector\" {"},
{"lineNum":"  609","line":"    var a: @Vector(4, u32) = @splat(4);"},
{"lineNum":"  610","line":"    var b: @Vector(4, u32) = @splat(4);"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"    try expectEqual(a, b);"},
{"lineNum":"  613","line":"}"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"pub fn expectEqualStrings(expected: []const u8, actual: []const u8) !void {","class":"lineCov","hits":"1","order":"2842","possible_hits":"1",},
{"lineNum":"  616","line":"    if (std.mem.indexOfDiff(u8, actual, expected)) |diff_index| {","class":"linePartCov","hits":"1","order":"2843","possible_hits":"2",},
{"lineNum":"  617","line":"        print(\"\\n====== expected this output: =========\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"        printWithVisibleNewlines(expected);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  619","line":"        print(\"\\n======== instead found this: =========\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  620","line":"        printWithVisibleNewlines(actual);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":"        print(\"\\n======================================\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"        var diff_line_number: usize = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"        for (expected[0..diff_index]) |value| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  625","line":"            if (value == \'\\n\') diff_line_number += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  626","line":"        }"},
{"lineNum":"  627","line":"        print(\"First difference occurs on line {d}:\\n\", .{diff_line_number});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"        print(\"expected:\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  630","line":"        printIndicatorLine(expected, diff_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"        print(\"found:\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"        printIndicatorLine(actual, diff_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"        return error.TestExpectedEqual;","class":"linePartCov","hits":"2","order":"2850","possible_hits":"3",},
{"lineNum":"  636","line":"    }"},
{"lineNum":"  637","line":"}"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"pub fn expectStringStartsWith(actual: []const u8, expected_starts_with: []const u8) !void {"},
{"lineNum":"  640","line":"    if (std.mem.startsWith(u8, actual, expected_starts_with))"},
{"lineNum":"  641","line":"        return;"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    const shortened_actual = if (actual.len >= expected_starts_with.len)"},
{"lineNum":"  644","line":"        actual[0..expected_starts_with.len]"},
{"lineNum":"  645","line":"    else"},
{"lineNum":"  646","line":"        actual;"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"    print(\"\\n====== expected to start with: =========\\n\", .{});"},
{"lineNum":"  649","line":"    printWithVisibleNewlines(expected_starts_with);"},
{"lineNum":"  650","line":"    print(\"\\n====== instead started with: ===========\\n\", .{});"},
{"lineNum":"  651","line":"    printWithVisibleNewlines(shortened_actual);"},
{"lineNum":"  652","line":"    print(\"\\n========= full output: ==============\\n\", .{});"},
{"lineNum":"  653","line":"    printWithVisibleNewlines(actual);"},
{"lineNum":"  654","line":"    print(\"\\n======================================\\n\", .{});"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"    return error.TestExpectedStartsWith;"},
{"lineNum":"  657","line":"}"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"pub fn expectStringEndsWith(actual: []const u8, expected_ends_with: []const u8) !void {"},
{"lineNum":"  660","line":"    if (std.mem.endsWith(u8, actual, expected_ends_with))"},
{"lineNum":"  661","line":"        return;"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    const shortened_actual = if (actual.len >= expected_ends_with.len)"},
{"lineNum":"  664","line":"        actual[(actual.len - expected_ends_with.len)..]"},
{"lineNum":"  665","line":"    else"},
{"lineNum":"  666","line":"        actual;"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"    print(\"\\n====== expected to end with: =========\\n\", .{});"},
{"lineNum":"  669","line":"    printWithVisibleNewlines(expected_ends_with);"},
{"lineNum":"  670","line":"    print(\"\\n====== instead ended with: ===========\\n\", .{});"},
{"lineNum":"  671","line":"    printWithVisibleNewlines(shortened_actual);"},
{"lineNum":"  672","line":"    print(\"\\n========= full output: ==============\\n\", .{});"},
{"lineNum":"  673","line":"    printWithVisibleNewlines(actual);"},
{"lineNum":"  674","line":"    print(\"\\n======================================\\n\", .{});"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    return error.TestExpectedEndsWith;"},
{"lineNum":"  677","line":"}"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"/// This function is intended to be used only in tests. When the two values are not"},
{"lineNum":"  680","line":"/// deeply equal, prints diagnostics to stderr to show exactly how they are not equal,"},
{"lineNum":"  681","line":"/// then returns a test failure error."},
{"lineNum":"  682","line":"/// `actual` is casted to the type of `expected`."},
{"lineNum":"  683","line":"///"},
{"lineNum":"  684","line":"/// Deeply equal is defined as follows:"},
{"lineNum":"  685","line":"/// Primitive types are deeply equal if they are equal using  `==` operator."},
{"lineNum":"  686","line":"/// Struct values are deeply equal if their corresponding fields are deeply equal."},
{"lineNum":"  687","line":"/// Container types(like Array/Slice/Vector) deeply equal when their corresponding elements are deeply equal."},
{"lineNum":"  688","line":"/// Pointer values are deeply equal if values they point to are deeply equal."},
{"lineNum":"  689","line":"///"},
{"lineNum":"  690","line":"/// Note: Self-referential structs are not supported (e.g. things like std.SinglyLinkedList)"},
{"lineNum":"  691","line":"pub fn expectEqualDeep(expected: anytype, actual: @TypeOf(expected)) !void {"},
{"lineNum":"  692","line":"    switch (@typeInfo(@TypeOf(actual))) {"},
{"lineNum":"  693","line":"        .NoReturn,"},
{"lineNum":"  694","line":"        .Opaque,"},
{"lineNum":"  695","line":"        .Frame,"},
{"lineNum":"  696","line":"        .AnyFrame,"},
{"lineNum":"  697","line":"        => @compileError(\"value of type \" ++ @typeName(@TypeOf(actual)) ++ \" encountered\"),"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"        .Undefined,"},
{"lineNum":"  700","line":"        .Null,"},
{"lineNum":"  701","line":"        .Void,"},
{"lineNum":"  702","line":"        => return,"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"        .Type => {"},
{"lineNum":"  705","line":"            if (actual != expected) {"},
{"lineNum":"  706","line":"                print(\"expected type {s}, found type {s}\\n\", .{ @typeName(expected), @typeName(actual) });"},
{"lineNum":"  707","line":"                return error.TestExpectedEqual;"},
{"lineNum":"  708","line":"            }"},
{"lineNum":"  709","line":"        },"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"        .Bool,"},
{"lineNum":"  712","line":"        .Int,"},
{"lineNum":"  713","line":"        .Float,"},
{"lineNum":"  714","line":"        .ComptimeFloat,"},
{"lineNum":"  715","line":"        .ComptimeInt,"},
{"lineNum":"  716","line":"        .EnumLiteral,"},
{"lineNum":"  717","line":"        .Enum,"},
{"lineNum":"  718","line":"        .Fn,"},
{"lineNum":"  719","line":"        .ErrorSet,"},
{"lineNum":"  720","line":"        => {"},
{"lineNum":"  721","line":"            if (actual != expected) {"},
{"lineNum":"  722","line":"                print(\"expected {}, found {}\\n\", .{ expected, actual });"},
{"lineNum":"  723","line":"                return error.TestExpectedEqual;"},
{"lineNum":"  724","line":"            }"},
{"lineNum":"  725","line":"        },"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"        .Pointer => |pointer| {"},
{"lineNum":"  728","line":"            switch (pointer.size) {"},
{"lineNum":"  729","line":"                // We have no idea what is behind those pointers, so the best we can do is `==` check."},
{"lineNum":"  730","line":"                .C, .Many => {"},
{"lineNum":"  731","line":"                    if (actual != expected) {"},
{"lineNum":"  732","line":"                        print(\"expected {*}, found {*}\\n\", .{ expected, actual });"},
{"lineNum":"  733","line":"                        return error.TestExpectedEqual;"},
{"lineNum":"  734","line":"                    }"},
{"lineNum":"  735","line":"                },"},
{"lineNum":"  736","line":"                .One => {"},
{"lineNum":"  737","line":"                    // Length of those pointers are runtime value, so the best we can do is `==` check."},
{"lineNum":"  738","line":"                    switch (@typeInfo(pointer.child)) {"},
{"lineNum":"  739","line":"                        .Fn, .Opaque => {"},
{"lineNum":"  740","line":"                            if (actual != expected) {"},
{"lineNum":"  741","line":"                                print(\"expected {*}, found {*}\\n\", .{ expected, actual });"},
{"lineNum":"  742","line":"                                return error.TestExpectedEqual;"},
{"lineNum":"  743","line":"                            }"},
{"lineNum":"  744","line":"                        },"},
{"lineNum":"  745","line":"                        else => try expectEqualDeep(expected.*, actual.*),"},
{"lineNum":"  746","line":"                    }"},
{"lineNum":"  747","line":"                },"},
{"lineNum":"  748","line":"                .Slice => {"},
{"lineNum":"  749","line":"                    if (expected.len != actual.len) {"},
{"lineNum":"  750","line":"                        print(\"Slice len not the same, expected {d}, found {d}\\n\", .{ expected.len, actual.len });"},
{"lineNum":"  751","line":"                        return error.TestExpectedEqual;"},
{"lineNum":"  752","line":"                    }"},
{"lineNum":"  753","line":"                    var i: usize = 0;"},
{"lineNum":"  754","line":"                    while (i < expected.len) : (i += 1) {"},
{"lineNum":"  755","line":"                        expectEqualDeep(expected[i], actual[i]) catch |e| {"},
{"lineNum":"  756","line":"                            print(\"index {d} incorrect. expected {any}, found {any}\\n\", .{"},
{"lineNum":"  757","line":"                                i, expected[i], actual[i],"},
{"lineNum":"  758","line":"                            });"},
{"lineNum":"  759","line":"                            return e;"},
{"lineNum":"  760","line":"                        };"},
{"lineNum":"  761","line":"                    }"},
{"lineNum":"  762","line":"                },"},
{"lineNum":"  763","line":"            }"},
{"lineNum":"  764","line":"        },"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"        .Array => |_| {"},
{"lineNum":"  767","line":"            if (expected.len != actual.len) {"},
{"lineNum":"  768","line":"                print(\"Array len not the same, expected {d}, found {d}\\n\", .{ expected.len, actual.len });"},
{"lineNum":"  769","line":"                return error.TestExpectedEqual;"},
{"lineNum":"  770","line":"            }"},
{"lineNum":"  771","line":"            var i: usize = 0;"},
{"lineNum":"  772","line":"            while (i < expected.len) : (i += 1) {"},
{"lineNum":"  773","line":"                expectEqualDeep(expected[i], actual[i]) catch |e| {"},
{"lineNum":"  774","line":"                    print(\"index {d} incorrect. expected {any}, found {any}\\n\", .{"},
{"lineNum":"  775","line":"                        i, expected[i], actual[i],"},
{"lineNum":"  776","line":"                    });"},
{"lineNum":"  777","line":"                    return e;"},
{"lineNum":"  778","line":"                };"},
{"lineNum":"  779","line":"            }"},
{"lineNum":"  780","line":"        },"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"        .Vector => |info| {"},
{"lineNum":"  783","line":"            if (info.len != @typeInfo(@TypeOf(actual)).Vector.len) {"},
{"lineNum":"  784","line":"                print(\"Vector len not the same, expected {d}, found {d}\\n\", .{ info.len, @typeInfo(@TypeOf(actual)).Vector.len });"},
{"lineNum":"  785","line":"                return error.TestExpectedEqual;"},
{"lineNum":"  786","line":"            }"},
{"lineNum":"  787","line":"            var i: usize = 0;"},
{"lineNum":"  788","line":"            while (i < info.len) : (i += 1) {"},
{"lineNum":"  789","line":"                expectEqualDeep(expected[i], actual[i]) catch |e| {"},
{"lineNum":"  790","line":"                    print(\"index {d} incorrect. expected {any}, found {any}\\n\", .{"},
{"lineNum":"  791","line":"                        i, expected[i], actual[i],"},
{"lineNum":"  792","line":"                    });"},
{"lineNum":"  793","line":"                    return e;"},
{"lineNum":"  794","line":"                };"},
{"lineNum":"  795","line":"            }"},
{"lineNum":"  796","line":"        },"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        .Struct => |structType| {"},
{"lineNum":"  799","line":"            inline for (structType.fields) |field| {"},
{"lineNum":"  800","line":"                expectEqualDeep(@field(expected, field.name), @field(actual, field.name)) catch |e| {"},
{"lineNum":"  801","line":"                    print(\"Field {s} incorrect. expected {any}, found {any}\\n\", .{ field.name, @field(expected, field.name), @field(actual, field.name) });"},
{"lineNum":"  802","line":"                    return e;"},
{"lineNum":"  803","line":"                };"},
{"lineNum":"  804","line":"            }"},
{"lineNum":"  805","line":"        },"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"        .Union => |union_info| {"},
{"lineNum":"  808","line":"            if (union_info.tag_type == null) {"},
{"lineNum":"  809","line":"                @compileError(\"Unable to compare untagged union values\");"},
{"lineNum":"  810","line":"            }"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"            const Tag = std.meta.Tag(@TypeOf(expected));"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"            const expectedTag = @as(Tag, expected);"},
{"lineNum":"  815","line":"            const actualTag = @as(Tag, actual);"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"            try expectEqual(expectedTag, actualTag);"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"            // we only reach this loop if the tags are equal"},
{"lineNum":"  820","line":"            switch (expected) {"},
{"lineNum":"  821","line":"                inline else => |val, tag| {"},
{"lineNum":"  822","line":"                    try expectEqualDeep(val, @field(actual, @tagName(tag)));"},
{"lineNum":"  823","line":"                },"},
{"lineNum":"  824","line":"            }"},
{"lineNum":"  825","line":"        },"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"        .Optional => {"},
{"lineNum":"  828","line":"            if (expected) |expected_payload| {"},
{"lineNum":"  829","line":"                if (actual) |actual_payload| {"},
{"lineNum":"  830","line":"                    try expectEqualDeep(expected_payload, actual_payload);"},
{"lineNum":"  831","line":"                } else {"},
{"lineNum":"  832","line":"                    print(\"expected {any}, found null\\n\", .{expected_payload});"},
{"lineNum":"  833","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  834","line":"                }"},
{"lineNum":"  835","line":"            } else {"},
{"lineNum":"  836","line":"                if (actual) |actual_payload| {"},
{"lineNum":"  837","line":"                    print(\"expected null, found {any}\\n\", .{actual_payload});"},
{"lineNum":"  838","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  839","line":"                }"},
{"lineNum":"  840","line":"            }"},
{"lineNum":"  841","line":"        },"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"        .ErrorUnion => {"},
{"lineNum":"  844","line":"            if (expected) |expected_payload| {"},
{"lineNum":"  845","line":"                if (actual) |actual_payload| {"},
{"lineNum":"  846","line":"                    try expectEqualDeep(expected_payload, actual_payload);"},
{"lineNum":"  847","line":"                } else |actual_err| {"},
{"lineNum":"  848","line":"                    print(\"expected {any}, found {any}\\n\", .{ expected_payload, actual_err });"},
{"lineNum":"  849","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  850","line":"                }"},
{"lineNum":"  851","line":"            } else |expected_err| {"},
{"lineNum":"  852","line":"                if (actual) |actual_payload| {"},
{"lineNum":"  853","line":"                    print(\"expected {any}, found {any}\\n\", .{ expected_err, actual_payload });"},
{"lineNum":"  854","line":"                    return error.TestExpectedEqual;"},
{"lineNum":"  855","line":"                } else |actual_err| {"},
{"lineNum":"  856","line":"                    try expectEqualDeep(expected_err, actual_err);"},
{"lineNum":"  857","line":"                }"},
{"lineNum":"  858","line":"            }"},
{"lineNum":"  859","line":"        },"},
{"lineNum":"  860","line":"    }"},
{"lineNum":"  861","line":"}"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"test \"expectEqualDeep primitive type\" {"},
{"lineNum":"  864","line":"    try expectEqualDeep(1, 1);"},
{"lineNum":"  865","line":"    try expectEqualDeep(true, true);"},
{"lineNum":"  866","line":"    try expectEqualDeep(1.5, 1.5);"},
{"lineNum":"  867","line":"    try expectEqualDeep(u8, u8);"},
{"lineNum":"  868","line":"    try expectEqualDeep(error.Bad, error.Bad);"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"    // optional"},
{"lineNum":"  871","line":"    {"},
{"lineNum":"  872","line":"        const foo: ?u32 = 1;"},
{"lineNum":"  873","line":"        const bar: ?u32 = 1;"},
{"lineNum":"  874","line":"        try expectEqualDeep(foo, bar);"},
{"lineNum":"  875","line":"        try expectEqualDeep(?u32, ?u32);"},
{"lineNum":"  876","line":"    }"},
{"lineNum":"  877","line":"    // function type"},
{"lineNum":"  878","line":"    {"},
{"lineNum":"  879","line":"        const fnType = struct {"},
{"lineNum":"  880","line":"            fn foo() void {"},
{"lineNum":"  881","line":"                unreachable;"},
{"lineNum":"  882","line":"            }"},
{"lineNum":"  883","line":"        }.foo;"},
{"lineNum":"  884","line":"        try expectEqualDeep(fnType, fnType);"},
{"lineNum":"  885","line":"    }"},
{"lineNum":"  886","line":"}"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"test \"expectEqualDeep pointer\" {"},
{"lineNum":"  889","line":"    const a = 1;"},
{"lineNum":"  890","line":"    const b = 1;"},
{"lineNum":"  891","line":"    try expectEqualDeep(&a, &b);"},
{"lineNum":"  892","line":"}"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"test \"expectEqualDeep composite type\" {"},
{"lineNum":"  895","line":"    try expectEqualDeep(\"abc\", \"abc\");"},
{"lineNum":"  896","line":"    const s1: []const u8 = \"abc\";"},
{"lineNum":"  897","line":"    const s2 = \"abcd\";"},
{"lineNum":"  898","line":"    const s3: []const u8 = s2[0..3];"},
{"lineNum":"  899","line":"    try expectEqualDeep(s1, s3);"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"    const TestStruct = struct { s: []const u8 };"},
{"lineNum":"  902","line":"    try expectEqualDeep(TestStruct{ .s = \"abc\" }, TestStruct{ .s = \"abc\" });"},
{"lineNum":"  903","line":"    try expectEqualDeep([_][]const u8{ \"a\", \"b\", \"c\" }, [_][]const u8{ \"a\", \"b\", \"c\" });"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"    // vector"},
{"lineNum":"  906","line":"    try expectEqualDeep(@as(@Vector(4, u32), @splat(4)), @as(@Vector(4, u32), @splat(4)));"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"    // nested array"},
{"lineNum":"  909","line":"    {"},
{"lineNum":"  910","line":"        const a = [2][2]f32{"},
{"lineNum":"  911","line":"            [_]f32{ 1.0, 0.0 },"},
{"lineNum":"  912","line":"            [_]f32{ 0.0, 1.0 },"},
{"lineNum":"  913","line":"        };"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"        const b = [2][2]f32{"},
{"lineNum":"  916","line":"            [_]f32{ 1.0, 0.0 },"},
{"lineNum":"  917","line":"            [_]f32{ 0.0, 1.0 },"},
{"lineNum":"  918","line":"        };"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"        try expectEqualDeep(a, b);"},
{"lineNum":"  921","line":"        try expectEqualDeep(&a, &b);"},
{"lineNum":"  922","line":"    }"},
{"lineNum":"  923","line":"}"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"fn printIndicatorLine(source: []const u8, indicator_index: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  926","line":"    const line_begin_index = if (std.mem.lastIndexOfScalar(u8, source[0..indicator_index], \'\\n\')) |line_begin|","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  927","line":"        line_begin + 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  928","line":"    else"},
{"lineNum":"  929","line":"        0;"},
{"lineNum":"  930","line":"    const line_end_index = if (std.mem.indexOfScalar(u8, source[indicator_index..], \'\\n\')) |line_end|","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  931","line":"        (indicator_index + line_end)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  932","line":"    else"},
{"lineNum":"  933","line":"        source.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"    printLine(source[line_begin_index..line_end_index]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  936","line":"    {"},
{"lineNum":"  937","line":"        var i: usize = line_begin_index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  938","line":"        while (i < indicator_index) : (i += 1)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  939","line":"            print(\" \", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  940","line":"    }"},
{"lineNum":"  941","line":"    if (indicator_index >= source.len)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  942","line":"        print(\"^ (end of string)\\n\", .{})","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"    else"},
{"lineNum":"  944","line":"        print(\"^ (\'\\\\x{x:0>2}\')\\n\", .{source[indicator_index]});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  945","line":"}"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"fn printWithVisibleNewlines(source: []const u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":"    var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  949","line":"    while (std.mem.indexOfScalar(u8, source[i..], \'\\n\')) |nl| : (i += nl + 1) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  950","line":"        printLine(source[i..][0..nl]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  951","line":"    }"},
{"lineNum":"  952","line":"    print(\"{s}␃\\n\", .{source[i..]}); // End of Text symbol (ETX)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  953","line":"}"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"fn printLine(line: []const u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  956","line":"    if (line.len != 0) switch (line[line.len - 1]) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  957","line":"        \' \', \'\\t\' => return print(\"{s}⏎\\n\", .{line}), // Carriage return symbol,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  958","line":"        else => {},"},
{"lineNum":"  959","line":"    };"},
{"lineNum":"  960","line":"    print(\"{s}\\n\", .{line});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"test {"},
{"lineNum":"  964","line":"    try expectEqualStrings(\"foo\", \"foo\");"},
{"lineNum":"  965","line":"}"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"/// Exhaustively check that allocation failures within `test_fn` are handled without"},
{"lineNum":"  968","line":"/// introducing memory leaks. If used with the `testing.allocator` as the `backing_allocator`,"},
{"lineNum":"  969","line":"/// it will also be able to detect double frees, etc (when runtime safety is enabled)."},
{"lineNum":"  970","line":"///"},
{"lineNum":"  971","line":"/// The provided `test_fn` must have a `std.mem.Allocator` as its first argument,"},
{"lineNum":"  972","line":"/// and must have a return type of `!void`. Any extra arguments of `test_fn` can"},
{"lineNum":"  973","line":"/// be provided via the `extra_args` tuple."},
{"lineNum":"  974","line":"///"},
{"lineNum":"  975","line":"/// Any relevant state shared between runs of `test_fn` *must* be reset within `test_fn`."},
{"lineNum":"  976","line":"///"},
{"lineNum":"  977","line":"/// The strategy employed is to:"},
{"lineNum":"  978","line":"/// - Run the test function once to get the total number of allocations."},
{"lineNum":"  979","line":"/// - Then, iterate and run the function X more times, incrementing"},
{"lineNum":"  980","line":"///   the failing index each iteration (where X is the total number of"},
{"lineNum":"  981","line":"///   allocations determined previously)"},
{"lineNum":"  982","line":"///"},
{"lineNum":"  983","line":"/// Expects that `test_fn` has a deterministic number of memory allocations:"},
{"lineNum":"  984","line":"/// - If an allocation was made to fail during a run of `test_fn`, but `test_fn`"},
{"lineNum":"  985","line":"///   didn\'t return `error.OutOfMemory`, then `error.SwallowedOutOfMemoryError`"},
{"lineNum":"  986","line":"///   is returned from `checkAllAllocationFailures`. You may want to ignore this"},
{"lineNum":"  987","line":"///   depending on whether or not the code you\'re testing includes some strategies"},
{"lineNum":"  988","line":"///   for recovering from `error.OutOfMemory`."},
{"lineNum":"  989","line":"/// - If a run of `test_fn` with an expected allocation failure executes without"},
{"lineNum":"  990","line":"///   an allocation failure being induced, then `error.NondeterministicMemoryUsage`"},
{"lineNum":"  991","line":"///   is returned. This error means that there are allocation points that won\'t be"},
{"lineNum":"  992","line":"///   tested by the strategy this function employs (that is, there are sometimes more"},
{"lineNum":"  993","line":"///   points of allocation than the initial run of `test_fn` detects)."},
{"lineNum":"  994","line":"///"},
{"lineNum":"  995","line":"/// ---"},
{"lineNum":"  996","line":"///"},
{"lineNum":"  997","line":"/// Here\'s an example using a simple test case that will cause a leak when the"},
{"lineNum":"  998","line":"/// allocation of `bar` fails (but will pass normally):"},
{"lineNum":"  999","line":"///"},
{"lineNum":" 1000","line":"/// ```zig"},
{"lineNum":" 1001","line":"/// test {"},
{"lineNum":" 1002","line":"///     const length: usize = 10;"},
{"lineNum":" 1003","line":"///     const allocator = std.testing.allocator;"},
{"lineNum":" 1004","line":"///     var foo = try allocator.alloc(u8, length);"},
{"lineNum":" 1005","line":"///     var bar = try allocator.alloc(u8, length);"},
{"lineNum":" 1006","line":"///"},
{"lineNum":" 1007","line":"///     allocator.free(foo);"},
{"lineNum":" 1008","line":"///     allocator.free(bar);"},
{"lineNum":" 1009","line":"/// }"},
{"lineNum":" 1010","line":"/// ```"},
{"lineNum":" 1011","line":"///"},
{"lineNum":" 1012","line":"/// The test case can be converted to something that this function can use by"},
{"lineNum":" 1013","line":"/// doing:"},
{"lineNum":" 1014","line":"///"},
{"lineNum":" 1015","line":"/// ```zig"},
{"lineNum":" 1016","line":"/// fn testImpl(allocator: std.mem.Allocator, length: usize) !void {"},
{"lineNum":" 1017","line":"///     var foo = try allocator.alloc(u8, length);"},
{"lineNum":" 1018","line":"///     var bar = try allocator.alloc(u8, length);"},
{"lineNum":" 1019","line":"///"},
{"lineNum":" 1020","line":"///     allocator.free(foo);"},
{"lineNum":" 1021","line":"///     allocator.free(bar);"},
{"lineNum":" 1022","line":"/// }"},
{"lineNum":" 1023","line":"///"},
{"lineNum":" 1024","line":"/// test {"},
{"lineNum":" 1025","line":"///     const length: usize = 10;"},
{"lineNum":" 1026","line":"///     const allocator = std.testing.allocator;"},
{"lineNum":" 1027","line":"///     try std.testing.checkAllAllocationFailures(allocator, testImpl, .{length});"},
{"lineNum":" 1028","line":"/// }"},
{"lineNum":" 1029","line":"/// ```"},
{"lineNum":" 1030","line":"///"},
{"lineNum":" 1031","line":"/// Running this test will show that `foo` is leaked when the allocation of"},
{"lineNum":" 1032","line":"/// `bar` fails. The simplest fix, in this case, would be to use defer like so:"},
{"lineNum":" 1033","line":"///"},
{"lineNum":" 1034","line":"/// ```zig"},
{"lineNum":" 1035","line":"/// fn testImpl(allocator: std.mem.Allocator, length: usize) !void {"},
{"lineNum":" 1036","line":"///     var foo = try allocator.alloc(u8, length);"},
{"lineNum":" 1037","line":"///     defer allocator.free(foo);"},
{"lineNum":" 1038","line":"///     var bar = try allocator.alloc(u8, length);"},
{"lineNum":" 1039","line":"///     defer allocator.free(bar);"},
{"lineNum":" 1040","line":"/// }"},
{"lineNum":" 1041","line":"/// ```"},
{"lineNum":" 1042","line":"pub fn checkAllAllocationFailures(backing_allocator: std.mem.Allocator, comptime test_fn: anytype, extra_args: anytype) !void {"},
{"lineNum":" 1043","line":"    switch (@typeInfo(@typeInfo(@TypeOf(test_fn)).Fn.return_type.?)) {"},
{"lineNum":" 1044","line":"        .ErrorUnion => |info| {"},
{"lineNum":" 1045","line":"            if (info.payload != void) {"},
{"lineNum":" 1046","line":"                @compileError(\"Return type must be !void\");"},
{"lineNum":" 1047","line":"            }"},
{"lineNum":" 1048","line":"        },"},
{"lineNum":" 1049","line":"        else => @compileError(\"Return type must be !void\"),"},
{"lineNum":" 1050","line":"    }"},
{"lineNum":" 1051","line":"    if (@typeInfo(@TypeOf(extra_args)) != .Struct) {"},
{"lineNum":" 1052","line":"        @compileError(\"Expected tuple or struct argument, found \" ++ @typeName(@TypeOf(extra_args)));"},
{"lineNum":" 1053","line":"    }"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"    const ArgsTuple = std.meta.ArgsTuple(@TypeOf(test_fn));"},
{"lineNum":" 1056","line":"    const fn_args_fields = @typeInfo(ArgsTuple).Struct.fields;"},
{"lineNum":" 1057","line":"    if (fn_args_fields.len == 0 or fn_args_fields[0].type != std.mem.Allocator) {"},
{"lineNum":" 1058","line":"        @compileError(\"The provided function must have an \" ++ @typeName(std.mem.Allocator) ++ \" as its first argument\");"},
{"lineNum":" 1059","line":"    }"},
{"lineNum":" 1060","line":"    const expected_args_tuple_len = fn_args_fields.len - 1;"},
{"lineNum":" 1061","line":"    if (extra_args.len != expected_args_tuple_len) {"},
{"lineNum":" 1062","line":"        @compileError(\"The provided function expects \" ++ std.fmt.comptimePrint(\"{d}\", .{expected_args_tuple_len}) ++ \" extra arguments, but the provided tuple contains \" ++ std.fmt.comptimePrint(\"{d}\", .{extra_args.len}));"},
{"lineNum":" 1063","line":"    }"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"    // Setup the tuple that will actually be used with @call (we\'ll need to insert"},
{"lineNum":" 1066","line":"    // the failing allocator in field @\"0\" before each @call)"},
{"lineNum":" 1067","line":"    var args: ArgsTuple = undefined;"},
{"lineNum":" 1068","line":"    inline for (@typeInfo(@TypeOf(extra_args)).Struct.fields, 0..) |field, i| {"},
{"lineNum":" 1069","line":"        const arg_i_str = comptime str: {"},
{"lineNum":" 1070","line":"            var str_buf: [100]u8 = undefined;"},
{"lineNum":" 1071","line":"            const args_i = i + 1;"},
{"lineNum":" 1072","line":"            const str_len = std.fmt.formatIntBuf(&str_buf, args_i, 10, .lower, .{});"},
{"lineNum":" 1073","line":"            break :str str_buf[0..str_len];"},
{"lineNum":" 1074","line":"        };"},
{"lineNum":" 1075","line":"        @field(args, arg_i_str) = @field(extra_args, field.name);"},
{"lineNum":" 1076","line":"    }"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"    // Try it once with unlimited memory, make sure it works"},
{"lineNum":" 1079","line":"    const needed_alloc_count = x: {"},
{"lineNum":" 1080","line":"        var failing_allocator_inst = std.testing.FailingAllocator.init(backing_allocator, std.math.maxInt(usize));"},
{"lineNum":" 1081","line":"        args.@\"0\" = failing_allocator_inst.allocator();"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"        try @call(.auto, test_fn, args);"},
{"lineNum":" 1084","line":"        break :x failing_allocator_inst.index;"},
{"lineNum":" 1085","line":"    };"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    var fail_index: usize = 0;"},
{"lineNum":" 1088","line":"    while (fail_index < needed_alloc_count) : (fail_index += 1) {"},
{"lineNum":" 1089","line":"        var failing_allocator_inst = std.testing.FailingAllocator.init(backing_allocator, fail_index);"},
{"lineNum":" 1090","line":"        args.@\"0\" = failing_allocator_inst.allocator();"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"        if (@call(.auto, test_fn, args)) |_| {"},
{"lineNum":" 1093","line":"            if (failing_allocator_inst.has_induced_failure) {"},
{"lineNum":" 1094","line":"                return error.SwallowedOutOfMemoryError;"},
{"lineNum":" 1095","line":"            } else {"},
{"lineNum":" 1096","line":"                return error.NondeterministicMemoryUsage;"},
{"lineNum":" 1097","line":"            }"},
{"lineNum":" 1098","line":"        } else |err| switch (err) {"},
{"lineNum":" 1099","line":"            error.OutOfMemory => {"},
{"lineNum":" 1100","line":"                if (failing_allocator_inst.allocated_bytes != failing_allocator_inst.freed_bytes) {"},
{"lineNum":" 1101","line":"                    print("},
{"lineNum":" 1102","line":"                        \"\\nfail_index: {d}/{d}\\nallocated bytes: {d}\\nfreed bytes: {d}\\nallocations: {d}\\ndeallocations: {d}\\nallocation that was made to fail: {}\","},
{"lineNum":" 1103","line":"                        .{"},
{"lineNum":" 1104","line":"                            fail_index,"},
{"lineNum":" 1105","line":"                            needed_alloc_count,"},
{"lineNum":" 1106","line":"                            failing_allocator_inst.allocated_bytes,"},
{"lineNum":" 1107","line":"                            failing_allocator_inst.freed_bytes,"},
{"lineNum":" 1108","line":"                            failing_allocator_inst.allocations,"},
{"lineNum":" 1109","line":"                            failing_allocator_inst.deallocations,"},
{"lineNum":" 1110","line":"                            failing_allocator_inst.getStackTrace(),"},
{"lineNum":" 1111","line":"                        },"},
{"lineNum":" 1112","line":"                    );"},
{"lineNum":" 1113","line":"                    return error.MemoryLeakDetected;"},
{"lineNum":" 1114","line":"                }"},
{"lineNum":" 1115","line":"            },"},
{"lineNum":" 1116","line":"            else => return err,"},
{"lineNum":" 1117","line":"        }"},
{"lineNum":" 1118","line":"    }"},
{"lineNum":" 1119","line":"}"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"/// Given a type, references all the declarations inside, so that the semantic analyzer sees them."},
{"lineNum":" 1122","line":"pub fn refAllDecls(comptime T: type) void {"},
{"lineNum":" 1123","line":"    if (!builtin.is_test) return;"},
{"lineNum":" 1124","line":"    inline for (comptime std.meta.declarations(T)) |decl| {"},
{"lineNum":" 1125","line":"        _ = &@field(T, decl.name);"},
{"lineNum":" 1126","line":"    }"},
{"lineNum":" 1127","line":"}"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"/// Given a type, recursively references all the declarations inside, so that the semantic analyzer sees them."},
{"lineNum":" 1130","line":"/// For deep types, you may use `@setEvalBranchQuota`."},
{"lineNum":" 1131","line":"pub fn refAllDeclsRecursive(comptime T: type) void {"},
{"lineNum":" 1132","line":"    if (!builtin.is_test) return;"},
{"lineNum":" 1133","line":"    inline for (comptime std.meta.declarations(T)) |decl| {"},
{"lineNum":" 1134","line":"        if (@TypeOf(@field(T, decl.name)) == type) {"},
{"lineNum":" 1135","line":"            switch (@typeInfo(@field(T, decl.name))) {"},
{"lineNum":" 1136","line":"                .Struct, .Enum, .Union, .Opaque => refAllDeclsRecursive(@field(T, decl.name)),"},
{"lineNum":" 1137","line":"                else => {},"},
{"lineNum":" 1138","line":"            }"},
{"lineNum":" 1139","line":"        }"},
{"lineNum":" 1140","line":"        _ = &@field(T, decl.name);"},
{"lineNum":" 1141","line":"    }"},
{"lineNum":" 1142","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 63, "covered" : 18,};
var merged_data = [];
