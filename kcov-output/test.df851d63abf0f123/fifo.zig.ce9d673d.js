var data = {lines:[
{"lineNum":"    1","line":"// FIFO of fixed size items"},
{"lineNum":"    2","line":"// Usually used for e.g. byte buffers"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const std = @import(\"std\");"},
{"lineNum":"    5","line":"const math = std.math;"},
{"lineNum":"    6","line":"const mem = std.mem;"},
{"lineNum":"    7","line":"const Allocator = mem.Allocator;"},
{"lineNum":"    8","line":"const debug = std.debug;"},
{"lineNum":"    9","line":"const assert = debug.assert;"},
{"lineNum":"   10","line":"const testing = std.testing;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"pub const LinearFifoBufferType = union(enum) {"},
{"lineNum":"   13","line":"    /// The buffer is internal to the fifo; it is of the specified size."},
{"lineNum":"   14","line":"    Static: usize,"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    /// The buffer is passed as a slice to the initialiser."},
{"lineNum":"   17","line":"    Slice,"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    /// The buffer is managed dynamically using a `mem.Allocator`."},
{"lineNum":"   20","line":"    Dynamic,"},
{"lineNum":"   21","line":"};"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"pub fn LinearFifo("},
{"lineNum":"   24","line":"    comptime T: type,"},
{"lineNum":"   25","line":"    comptime buffer_type: LinearFifoBufferType,"},
{"lineNum":"   26","line":") type {"},
{"lineNum":"   27","line":"    const autoalign = false;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    const powers_of_two = switch (buffer_type) {"},
{"lineNum":"   30","line":"        .Static => std.math.isPowerOfTwo(buffer_type.Static),"},
{"lineNum":"   31","line":"        .Slice => false, // Any size slice could be passed in"},
{"lineNum":"   32","line":"        .Dynamic => true, // This could be configurable in future"},
{"lineNum":"   33","line":"    };"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    return struct {"},
{"lineNum":"   36","line":"        allocator: if (buffer_type == .Dynamic) Allocator else void,"},
{"lineNum":"   37","line":"        buf: if (buffer_type == .Static) [buffer_type.Static]T else []T,"},
{"lineNum":"   38","line":"        head: usize,"},
{"lineNum":"   39","line":"        count: usize,"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        const Self = @This();"},
{"lineNum":"   42","line":"        pub const Reader = std.io.Reader(*Self, error{}, readFn);"},
{"lineNum":"   43","line":"        pub const Writer = std.io.Writer(*Self, error{OutOfMemory}, appendWrite);"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        // Type of Self argument for slice operations."},
{"lineNum":"   46","line":"        // If buffer is inline (Static) then we need to ensure we haven\'t"},
{"lineNum":"   47","line":"        // returned a slice into a copy on the stack"},
{"lineNum":"   48","line":"        const SliceSelfArg = if (buffer_type == .Static) *Self else Self;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        pub usingnamespace switch (buffer_type) {"},
{"lineNum":"   51","line":"            .Static => struct {"},
{"lineNum":"   52","line":"                pub fn init() Self {"},
{"lineNum":"   53","line":"                    return .{"},
{"lineNum":"   54","line":"                        .allocator = {},"},
{"lineNum":"   55","line":"                        .buf = undefined,"},
{"lineNum":"   56","line":"                        .head = 0,"},
{"lineNum":"   57","line":"                        .count = 0,"},
{"lineNum":"   58","line":"                    };"},
{"lineNum":"   59","line":"                }"},
{"lineNum":"   60","line":"            },"},
{"lineNum":"   61","line":"            .Slice => struct {"},
{"lineNum":"   62","line":"                pub fn init(buf: []T) Self {"},
{"lineNum":"   63","line":"                    return .{"},
{"lineNum":"   64","line":"                        .allocator = {},"},
{"lineNum":"   65","line":"                        .buf = buf,"},
{"lineNum":"   66","line":"                        .head = 0,"},
{"lineNum":"   67","line":"                        .count = 0,"},
{"lineNum":"   68","line":"                    };"},
{"lineNum":"   69","line":"                }"},
{"lineNum":"   70","line":"            },"},
{"lineNum":"   71","line":"            .Dynamic => struct {"},
{"lineNum":"   72","line":"                pub fn init(allocator: Allocator) Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"                    return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"                        .allocator = allocator,"},
{"lineNum":"   75","line":"                        .buf = &[_]T{},"},
{"lineNum":"   76","line":"                        .head = 0,"},
{"lineNum":"   77","line":"                        .count = 0,"},
{"lineNum":"   78","line":"                    };"},
{"lineNum":"   79","line":"                }"},
{"lineNum":"   80","line":"            },"},
{"lineNum":"   81","line":"        };"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        pub fn deinit(self: Self) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"            if (buffer_type == .Dynamic) self.allocator.free(self.buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        pub fn realign(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"            if (self.buf.len - self.head >= self.count) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":"                mem.copyForwards(T, self.buf[0..self.count], self.buf[self.head..][0..self.count]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   90","line":"                self.head = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"            } else {"},
{"lineNum":"   92","line":"                var tmp: [mem.page_size / 2 / @sizeOf(T)]T = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"                while (self.head != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"                    const n = @min(self.head, tmp.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"                    const m = self.buf.len - n;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"                    @memcpy(tmp[0..n], self.buf[0..n]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   98","line":"                    mem.copyForwards(T, self.buf[0..m], self.buf[n..][0..m]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"                    @memcpy(self.buf[m..][0..n], tmp[0..n]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  100","line":"                    self.head -= n;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  101","line":"                }"},
{"lineNum":"  102","line":"            }"},
{"lineNum":"  103","line":"            { // set unused area to undefined"},
{"lineNum":"  104","line":"                const unused = mem.sliceAsBytes(self.buf[self.count..]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  105","line":"                @memset(unused, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"            }"},
{"lineNum":"  107","line":"        }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        /// Reduce allocated capacity to `size`."},
{"lineNum":"  110","line":"        pub fn shrink(self: *Self, size: usize) void {"},
{"lineNum":"  111","line":"            assert(size >= self.count);"},
{"lineNum":"  112","line":"            if (buffer_type == .Dynamic) {"},
{"lineNum":"  113","line":"                self.realign();"},
{"lineNum":"  114","line":"                self.buf = self.allocator.realloc(self.buf, size) catch |e| switch (e) {"},
{"lineNum":"  115","line":"                    error.OutOfMemory => return, // no problem, capacity is still correct then."},
{"lineNum":"  116","line":"                };"},
{"lineNum":"  117","line":"            }"},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        /// Ensure that the buffer can fit at least `size` items"},
{"lineNum":"  121","line":"        pub fn ensureTotalCapacity(self: *Self, size: usize) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"            if (self.buf.len >= size) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"            if (buffer_type == .Dynamic) {"},
{"lineNum":"  124","line":"                self.realign();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"                const new_size = if (powers_of_two) math.ceilPowerOfTwo(usize, size) catch return error.OutOfMemory else size;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  126","line":"                self.buf = try self.allocator.realloc(self.buf, new_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"            } else {"},
{"lineNum":"  128","line":"                return error.OutOfMemory;"},
{"lineNum":"  129","line":"            }"},
{"lineNum":"  130","line":"        }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"        /// Makes sure at least `size` items are unused"},
{"lineNum":"  133","line":"        pub fn ensureUnusedCapacity(self: *Self, size: usize) error{OutOfMemory}!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"            if (self.writableLength() >= size) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"            return try self.ensureTotalCapacity(math.add(usize, self.count, size) catch return error.OutOfMemory);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"        }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"        /// Returns number of items currently in fifo"},
{"lineNum":"  140","line":"        pub fn readableLength(self: Self) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"            return self.count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        /// Returns a writable slice from the \'read\' end of the fifo"},
{"lineNum":"  145","line":"        fn readableSliceMut(self: SliceSelfArg, offset: usize) []T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"            if (offset > self.count) return &[_]T{};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"            var start = self.head + offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  149","line":"            if (start >= self.buf.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"                start -= self.buf.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"                return self.buf[start .. start + (self.count - offset)];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"            } else {"},
{"lineNum":"  153","line":"                const end = @min(self.head + self.count, self.buf.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":"                return self.buf[start..end];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"            }"},
{"lineNum":"  156","line":"        }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        /// Returns a readable slice from `offset`"},
{"lineNum":"  159","line":"        pub fn readableSlice(self: SliceSelfArg, offset: usize) []const T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"            return self.readableSliceMut(offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"        }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        pub fn readableSliceOfLen(self: *Self, len: usize) []const T {"},
{"lineNum":"  164","line":"            assert(len <= self.count);"},
{"lineNum":"  165","line":"            const buf = self.readableSlice(0);"},
{"lineNum":"  166","line":"            if (buf.len >= len) {"},
{"lineNum":"  167","line":"                return buf[0..len];"},
{"lineNum":"  168","line":"            } else {"},
{"lineNum":"  169","line":"                self.realign();"},
{"lineNum":"  170","line":"                return self.readableSlice(0)[0..len];"},
{"lineNum":"  171","line":"            }"},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        /// Discard first `count` items in the fifo"},
{"lineNum":"  175","line":"        pub fn discard(self: *Self, count: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"            assert(count <= self.count);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"            { // set old range to undefined. Note: may be wrapped around"},
{"lineNum":"  178","line":"                const slice = self.readableSliceMut(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"                if (slice.len >= count) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"                    const unused = mem.sliceAsBytes(slice[0..count]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  181","line":"                    @memset(unused, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"                } else {"},
{"lineNum":"  183","line":"                    const unused = mem.sliceAsBytes(slice[0..]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  184","line":"                    @memset(unused, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"                    const unused2 = mem.sliceAsBytes(self.readableSliceMut(slice.len)[0 .. count - slice.len]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  186","line":"                    @memset(unused2, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"                }"},
{"lineNum":"  188","line":"            }"},
{"lineNum":"  189","line":"            if (autoalign and self.count == count) {"},
{"lineNum":"  190","line":"                self.head = 0;"},
{"lineNum":"  191","line":"                self.count = 0;"},
{"lineNum":"  192","line":"            } else {"},
{"lineNum":"  193","line":"                var head = self.head + count;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"                if (powers_of_two) {"},
{"lineNum":"  195","line":"                    // Note it is safe to do a wrapping subtract as"},
{"lineNum":"  196","line":"                    // bitwise & with all 1s is a noop"},
{"lineNum":"  197","line":"                    head &= self.buf.len -% 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                } else {"},
{"lineNum":"  199","line":"                    head %= self.buf.len;"},
{"lineNum":"  200","line":"                }"},
{"lineNum":"  201","line":"                self.head = head;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"                self.count -= count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"            }"},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        /// Read the next item from the fifo"},
{"lineNum":"  207","line":"        pub fn readItem(self: *Self) ?T {"},
{"lineNum":"  208","line":"            if (self.count == 0) return null;"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"            const c = self.buf[self.head];"},
{"lineNum":"  211","line":"            self.discard(1);"},
{"lineNum":"  212","line":"            return c;"},
{"lineNum":"  213","line":"        }"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"        /// Read data from the fifo into `dst`, returns number of items copied."},
{"lineNum":"  216","line":"        pub fn read(self: *Self, dst: []T) usize {"},
{"lineNum":"  217","line":"            var dst_left = dst;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"            while (dst_left.len > 0) {"},
{"lineNum":"  220","line":"                const slice = self.readableSlice(0);"},
{"lineNum":"  221","line":"                if (slice.len == 0) break;"},
{"lineNum":"  222","line":"                const n = @min(slice.len, dst_left.len);"},
{"lineNum":"  223","line":"                @memcpy(dst_left[0..n], slice[0..n]);"},
{"lineNum":"  224","line":"                self.discard(n);"},
{"lineNum":"  225","line":"                dst_left = dst_left[n..];"},
{"lineNum":"  226","line":"            }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"            return dst.len - dst_left.len;"},
{"lineNum":"  229","line":"        }"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"        /// Same as `read` except it returns an error union"},
{"lineNum":"  232","line":"        /// The purpose of this function existing is to match `std.io.Reader` API."},
{"lineNum":"  233","line":"        fn readFn(self: *Self, dest: []u8) error{}!usize {"},
{"lineNum":"  234","line":"            return self.read(dest);"},
{"lineNum":"  235","line":"        }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        pub fn reader(self: *Self) Reader {"},
{"lineNum":"  238","line":"            return .{ .context = self };"},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"        /// Returns number of items available in fifo"},
{"lineNum":"  242","line":"        pub fn writableLength(self: Self) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"            return self.buf.len - self.count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"        }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"        /// Returns the first section of writable buffer"},
{"lineNum":"  247","line":"        /// Note that this may be of length 0"},
{"lineNum":"  248","line":"        pub fn writableSlice(self: SliceSelfArg, offset: usize) []T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"            if (offset > self.buf.len) return &[_]T{};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"            const tail = self.head + offset + self.count;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  252","line":"            if (tail < self.buf.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"                return self.buf[tail..];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"            } else {"},
{"lineNum":"  255","line":"                return self.buf[tail - self.buf.len ..][0 .. self.writableLength() - offset];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  256","line":"            }"},
{"lineNum":"  257","line":"        }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"        /// Returns a writable buffer of at least `size` items, allocating memory as needed."},
{"lineNum":"  260","line":"        /// Use `fifo.update` once you\'ve written data to it."},
{"lineNum":"  261","line":"        pub fn writableWithSize(self: *Self, size: usize) ![]T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"            try self.ensureUnusedCapacity(size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"            // try to avoid realigning buffer"},
{"lineNum":"  265","line":"            var slice = self.writableSlice(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"            if (slice.len < size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"                self.realign();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"                slice = self.writableSlice(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"            }"},
{"lineNum":"  270","line":"            return slice;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"        }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        /// Update the tail location of the buffer (usually follows use of writable/writableWithSize)"},
{"lineNum":"  274","line":"        pub fn update(self: *Self, count: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"            assert(self.count + count <= self.buf.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"            self.count += count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"        }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"        /// Appends the data in `src` to the fifo."},
{"lineNum":"  280","line":"        /// You must have ensured there is enough space."},
{"lineNum":"  281","line":"        pub fn writeAssumeCapacity(self: *Self, src: []const T) void {"},
{"lineNum":"  282","line":"            assert(self.writableLength() >= src.len);"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"            var src_left = src;"},
{"lineNum":"  285","line":"            while (src_left.len > 0) {"},
{"lineNum":"  286","line":"                const writable_slice = self.writableSlice(0);"},
{"lineNum":"  287","line":"                assert(writable_slice.len != 0);"},
{"lineNum":"  288","line":"                const n = @min(writable_slice.len, src_left.len);"},
{"lineNum":"  289","line":"                @memcpy(writable_slice[0..n], src_left[0..n]);"},
{"lineNum":"  290","line":"                self.update(n);"},
{"lineNum":"  291","line":"                src_left = src_left[n..];"},
{"lineNum":"  292","line":"            }"},
{"lineNum":"  293","line":"        }"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        /// Write a single item to the fifo"},
{"lineNum":"  296","line":"        pub fn writeItem(self: *Self, item: T) !void {"},
{"lineNum":"  297","line":"            try self.ensureUnusedCapacity(1);"},
{"lineNum":"  298","line":"            return self.writeItemAssumeCapacity(item);"},
{"lineNum":"  299","line":"        }"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"        pub fn writeItemAssumeCapacity(self: *Self, item: T) void {"},
{"lineNum":"  302","line":"            var tail = self.head + self.count;"},
{"lineNum":"  303","line":"            if (powers_of_two) {"},
{"lineNum":"  304","line":"                tail &= self.buf.len - 1;"},
{"lineNum":"  305","line":"            } else {"},
{"lineNum":"  306","line":"                tail %= self.buf.len;"},
{"lineNum":"  307","line":"            }"},
{"lineNum":"  308","line":"            self.buf[tail] = item;"},
{"lineNum":"  309","line":"            self.update(1);"},
{"lineNum":"  310","line":"        }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"        /// Appends the data in `src` to the fifo."},
{"lineNum":"  313","line":"        /// Allocates more memory as necessary"},
{"lineNum":"  314","line":"        pub fn write(self: *Self, src: []const T) !void {"},
{"lineNum":"  315","line":"            try self.ensureUnusedCapacity(src.len);"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"            return self.writeAssumeCapacity(src);"},
{"lineNum":"  318","line":"        }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"        /// Same as `write` except it returns the number of bytes written, which is always the same"},
{"lineNum":"  321","line":"        /// as `bytes.len`. The purpose of this function existing is to match `std.io.Writer` API."},
{"lineNum":"  322","line":"        fn appendWrite(self: *Self, bytes: []const u8) error{OutOfMemory}!usize {"},
{"lineNum":"  323","line":"            try self.write(bytes);"},
{"lineNum":"  324","line":"            return bytes.len;"},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        pub fn writer(self: *Self) Writer {"},
{"lineNum":"  328","line":"            return .{ .context = self };"},
{"lineNum":"  329","line":"        }"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"        /// Make `count` items available before the current read location"},
{"lineNum":"  332","line":"        fn rewind(self: *Self, count: usize) void {"},
{"lineNum":"  333","line":"            assert(self.writableLength() >= count);"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"            var head = self.head + (self.buf.len - count);"},
{"lineNum":"  336","line":"            if (powers_of_two) {"},
{"lineNum":"  337","line":"                head &= self.buf.len - 1;"},
{"lineNum":"  338","line":"            } else {"},
{"lineNum":"  339","line":"                head %= self.buf.len;"},
{"lineNum":"  340","line":"            }"},
{"lineNum":"  341","line":"            self.head = head;"},
{"lineNum":"  342","line":"            self.count += count;"},
{"lineNum":"  343","line":"        }"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"        /// Place data back into the read stream"},
{"lineNum":"  346","line":"        pub fn unget(self: *Self, src: []const T) !void {"},
{"lineNum":"  347","line":"            try self.ensureUnusedCapacity(src.len);"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"            self.rewind(src.len);"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"            const slice = self.readableSliceMut(0);"},
{"lineNum":"  352","line":"            if (src.len < slice.len) {"},
{"lineNum":"  353","line":"                @memcpy(slice[0..src.len], src);"},
{"lineNum":"  354","line":"            } else {"},
{"lineNum":"  355","line":"                @memcpy(slice, src[0..slice.len]);"},
{"lineNum":"  356","line":"                const slice2 = self.readableSliceMut(slice.len);"},
{"lineNum":"  357","line":"                @memcpy(slice2[0 .. src.len - slice.len], src[slice.len..]);"},
{"lineNum":"  358","line":"            }"},
{"lineNum":"  359","line":"        }"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"        /// Returns the item at `offset`."},
{"lineNum":"  362","line":"        /// Asserts offset is within bounds."},
{"lineNum":"  363","line":"        pub fn peekItem(self: Self, offset: usize) T {"},
{"lineNum":"  364","line":"            assert(offset < self.count);"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"            var index = self.head + offset;"},
{"lineNum":"  367","line":"            if (powers_of_two) {"},
{"lineNum":"  368","line":"                index &= self.buf.len - 1;"},
{"lineNum":"  369","line":"            } else {"},
{"lineNum":"  370","line":"                index %= self.buf.len;"},
{"lineNum":"  371","line":"            }"},
{"lineNum":"  372","line":"            return self.buf[index];"},
{"lineNum":"  373","line":"        }"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"        /// Pump data from a reader into a writer"},
{"lineNum":"  376","line":"        /// stops when reader returns 0 bytes (EOF)"},
{"lineNum":"  377","line":"        /// Buffer size must be set before calling; a buffer length of 0 is invalid."},
{"lineNum":"  378","line":"        pub fn pump(self: *Self, src_reader: anytype, dest_writer: anytype) !void {"},
{"lineNum":"  379","line":"            assert(self.buf.len > 0);"},
{"lineNum":"  380","line":"            while (true) {"},
{"lineNum":"  381","line":"                if (self.writableLength() > 0) {"},
{"lineNum":"  382","line":"                    const n = try src_reader.read(self.writableSlice(0));"},
{"lineNum":"  383","line":"                    if (n == 0) break; // EOF"},
{"lineNum":"  384","line":"                    self.update(n);"},
{"lineNum":"  385","line":"                }"},
{"lineNum":"  386","line":"                self.discard(try dest_writer.write(self.readableSlice(0)));"},
{"lineNum":"  387","line":"            }"},
{"lineNum":"  388","line":"            // flush remaining data"},
{"lineNum":"  389","line":"            while (self.readableLength() > 0) {"},
{"lineNum":"  390","line":"                self.discard(try dest_writer.write(self.readableSlice(0)));"},
{"lineNum":"  391","line":"            }"},
{"lineNum":"  392","line":"        }"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"        pub fn toOwnedSlice(self: *Self) Allocator.Error![]T {"},
{"lineNum":"  395","line":"            if (self.head != 0) self.realign();"},
{"lineNum":"  396","line":"            assert(self.head == 0);"},
{"lineNum":"  397","line":"            assert(self.count <= self.buf.len);"},
{"lineNum":"  398","line":"            const allocator = self.allocator;"},
{"lineNum":"  399","line":"            if (allocator.resize(self.buf, self.count)) {"},
{"lineNum":"  400","line":"                const result = self.buf[0..self.count];"},
{"lineNum":"  401","line":"                self.* = Self.init(allocator);"},
{"lineNum":"  402","line":"                return result;"},
{"lineNum":"  403","line":"            }"},
{"lineNum":"  404","line":"            const new_memory = try allocator.dupe(T, self.buf[0..self.count]);"},
{"lineNum":"  405","line":"            allocator.free(self.buf);"},
{"lineNum":"  406","line":"            self.* = Self.init(allocator);"},
{"lineNum":"  407","line":"            return new_memory;"},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":"    };"},
{"lineNum":"  410","line":"}"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"test \"LinearFifo(u8, .Dynamic) discard(0) from empty buffer should not error on overflow\" {"},
{"lineNum":"  413","line":"    var fifo = LinearFifo(u8, .Dynamic).init(testing.allocator);"},
{"lineNum":"  414","line":"    defer fifo.deinit();"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    // If overflow is not explicitly allowed this will crash in debug / safe mode"},
{"lineNum":"  417","line":"    fifo.discard(0);"},
{"lineNum":"  418","line":"}"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"test \"LinearFifo(u8, .Dynamic)\" {"},
{"lineNum":"  421","line":"    var fifo = LinearFifo(u8, .Dynamic).init(testing.allocator);"},
{"lineNum":"  422","line":"    defer fifo.deinit();"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    try fifo.write(\"HELLO\");"},
{"lineNum":"  425","line":"    try testing.expectEqual(@as(usize, 5), fifo.readableLength());"},
{"lineNum":"  426","line":"    try testing.expectEqualSlices(u8, \"HELLO\", fifo.readableSlice(0));"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    {"},
{"lineNum":"  429","line":"        var i: usize = 0;"},
{"lineNum":"  430","line":"        while (i < 5) : (i += 1) {"},
{"lineNum":"  431","line":"            try fifo.write(&[_]u8{fifo.peekItem(i)});"},
{"lineNum":"  432","line":"        }"},
{"lineNum":"  433","line":"        try testing.expectEqual(@as(usize, 10), fifo.readableLength());"},
{"lineNum":"  434","line":"        try testing.expectEqualSlices(u8, \"HELLOHELLO\", fifo.readableSlice(0));"},
{"lineNum":"  435","line":"    }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    {"},
{"lineNum":"  438","line":"        try testing.expectEqual(@as(u8, \'H\'), fifo.readItem().?);"},
{"lineNum":"  439","line":"        try testing.expectEqual(@as(u8, \'E\'), fifo.readItem().?);"},
{"lineNum":"  440","line":"        try testing.expectEqual(@as(u8, \'L\'), fifo.readItem().?);"},
{"lineNum":"  441","line":"        try testing.expectEqual(@as(u8, \'L\'), fifo.readItem().?);"},
{"lineNum":"  442","line":"        try testing.expectEqual(@as(u8, \'O\'), fifo.readItem().?);"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":"    try testing.expectEqual(@as(usize, 5), fifo.readableLength());"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    { // Writes that wrap around"},
{"lineNum":"  447","line":"        try testing.expectEqual(@as(usize, 11), fifo.writableLength());"},
{"lineNum":"  448","line":"        try testing.expectEqual(@as(usize, 6), fifo.writableSlice(0).len);"},
{"lineNum":"  449","line":"        fifo.writeAssumeCapacity(\"6<chars<11\");"},
{"lineNum":"  450","line":"        try testing.expectEqualSlices(u8, \"HELLO6<char\", fifo.readableSlice(0));"},
{"lineNum":"  451","line":"        try testing.expectEqualSlices(u8, \"s<11\", fifo.readableSlice(11));"},
{"lineNum":"  452","line":"        try testing.expectEqualSlices(u8, \"11\", fifo.readableSlice(13));"},
{"lineNum":"  453","line":"        try testing.expectEqualSlices(u8, \"\", fifo.readableSlice(15));"},
{"lineNum":"  454","line":"        fifo.discard(11);"},
{"lineNum":"  455","line":"        try testing.expectEqualSlices(u8, \"s<11\", fifo.readableSlice(0));"},
{"lineNum":"  456","line":"        fifo.discard(4);"},
{"lineNum":"  457","line":"        try testing.expectEqual(@as(usize, 0), fifo.readableLength());"},
{"lineNum":"  458","line":"    }"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    {"},
{"lineNum":"  461","line":"        const buf = try fifo.writableWithSize(12);"},
{"lineNum":"  462","line":"        try testing.expectEqual(@as(usize, 12), buf.len);"},
{"lineNum":"  463","line":"        var i: u8 = 0;"},
{"lineNum":"  464","line":"        while (i < 10) : (i += 1) {"},
{"lineNum":"  465","line":"            buf[i] = i + \'a\';"},
{"lineNum":"  466","line":"        }"},
{"lineNum":"  467","line":"        fifo.update(10);"},
{"lineNum":"  468","line":"        try testing.expectEqualSlices(u8, \"abcdefghij\", fifo.readableSlice(0));"},
{"lineNum":"  469","line":"    }"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    {"},
{"lineNum":"  472","line":"        try fifo.unget(\"prependedstring\");"},
{"lineNum":"  473","line":"        var result: [30]u8 = undefined;"},
{"lineNum":"  474","line":"        try testing.expectEqualSlices(u8, \"prependedstringabcdefghij\", result[0..fifo.read(&result)]);"},
{"lineNum":"  475","line":"        try fifo.unget(\"b\");"},
{"lineNum":"  476","line":"        try fifo.unget(\"a\");"},
{"lineNum":"  477","line":"        try testing.expectEqualSlices(u8, \"ab\", result[0..fifo.read(&result)]);"},
{"lineNum":"  478","line":"    }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    fifo.shrink(0);"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    {"},
{"lineNum":"  483","line":"        try fifo.writer().print(\"{s}, {s}!\", .{ \"Hello\", \"World\" });"},
{"lineNum":"  484","line":"        var result: [30]u8 = undefined;"},
{"lineNum":"  485","line":"        try testing.expectEqualSlices(u8, \"Hello, World!\", result[0..fifo.read(&result)]);"},
{"lineNum":"  486","line":"        try testing.expectEqual(@as(usize, 0), fifo.readableLength());"},
{"lineNum":"  487","line":"    }"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    {"},
{"lineNum":"  490","line":"        try fifo.writer().writeAll(\"This is a test\");"},
{"lineNum":"  491","line":"        var result: [30]u8 = undefined;"},
{"lineNum":"  492","line":"        try testing.expectEqualSlices(u8, \"This\", (try fifo.reader().readUntilDelimiterOrEof(&result, \' \')).?);"},
{"lineNum":"  493","line":"        try testing.expectEqualSlices(u8, \"is\", (try fifo.reader().readUntilDelimiterOrEof(&result, \' \')).?);"},
{"lineNum":"  494","line":"        try testing.expectEqualSlices(u8, \"a\", (try fifo.reader().readUntilDelimiterOrEof(&result, \' \')).?);"},
{"lineNum":"  495","line":"        try testing.expectEqualSlices(u8, \"test\", (try fifo.reader().readUntilDelimiterOrEof(&result, \' \')).?);"},
{"lineNum":"  496","line":"    }"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    {"},
{"lineNum":"  499","line":"        try fifo.ensureTotalCapacity(1);"},
{"lineNum":"  500","line":"        var in_fbs = std.io.fixedBufferStream(\"pump test\");"},
{"lineNum":"  501","line":"        var out_buf: [50]u8 = undefined;"},
{"lineNum":"  502","line":"        var out_fbs = std.io.fixedBufferStream(&out_buf);"},
{"lineNum":"  503","line":"        try fifo.pump(in_fbs.reader(), out_fbs.writer());"},
{"lineNum":"  504","line":"        try testing.expectEqualSlices(u8, in_fbs.buffer, out_fbs.getWritten());"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":"}"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"test \"LinearFifo\" {"},
{"lineNum":"  509","line":"    inline for ([_]type{ u1, u8, u16, u64 }) |T| {"},
{"lineNum":"  510","line":"        inline for ([_]LinearFifoBufferType{ LinearFifoBufferType{ .Static = 32 }, .Slice, .Dynamic }) |bt| {"},
{"lineNum":"  511","line":"            const FifoType = LinearFifo(T, bt);"},
{"lineNum":"  512","line":"            var buf: if (bt == .Slice) [32]T else void = undefined;"},
{"lineNum":"  513","line":"            var fifo = switch (bt) {"},
{"lineNum":"  514","line":"                .Static => FifoType.init(),"},
{"lineNum":"  515","line":"                .Slice => FifoType.init(buf[0..]),"},
{"lineNum":"  516","line":"                .Dynamic => FifoType.init(testing.allocator),"},
{"lineNum":"  517","line":"            };"},
{"lineNum":"  518","line":"            defer fifo.deinit();"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"            try fifo.write(&[_]T{ 0, 1, 1, 0, 1 });"},
{"lineNum":"  521","line":"            try testing.expectEqual(@as(usize, 5), fifo.readableLength());"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"            {"},
{"lineNum":"  524","line":"                try testing.expectEqual(@as(T, 0), fifo.readItem().?);"},
{"lineNum":"  525","line":"                try testing.expectEqual(@as(T, 1), fifo.readItem().?);"},
{"lineNum":"  526","line":"                try testing.expectEqual(@as(T, 1), fifo.readItem().?);"},
{"lineNum":"  527","line":"                try testing.expectEqual(@as(T, 0), fifo.readItem().?);"},
{"lineNum":"  528","line":"                try testing.expectEqual(@as(T, 1), fifo.readItem().?);"},
{"lineNum":"  529","line":"                try testing.expectEqual(@as(usize, 0), fifo.readableLength());"},
{"lineNum":"  530","line":"            }"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"            {"},
{"lineNum":"  533","line":"                try fifo.writeItem(1);"},
{"lineNum":"  534","line":"                try fifo.writeItem(1);"},
{"lineNum":"  535","line":"                try fifo.writeItem(1);"},
{"lineNum":"  536","line":"                try testing.expectEqual(@as(usize, 3), fifo.readableLength());"},
{"lineNum":"  537","line":"            }"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"            {"},
{"lineNum":"  540","line":"                var readBuf: [3]T = undefined;"},
{"lineNum":"  541","line":"                const n = fifo.read(&readBuf);"},
{"lineNum":"  542","line":"                try testing.expectEqual(@as(usize, 3), n); // NOTE: It should be the number of items."},
{"lineNum":"  543","line":"            }"},
{"lineNum":"  544","line":"        }"},
{"lineNum":"  545","line":"    }"},
{"lineNum":"  546","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 70, "covered" : 0,};
var merged_data = [];
