var data = {lines:[
{"lineNum":"    1","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    2","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    3","line":"const assert = std.debug.assert;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const testing = std.testing;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Euler\'s number (e)"},
{"lineNum":"    8","line":"pub const e = 2.71828182845904523536028747135266249775724709369995;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"/// Archimedes\' constant (π)"},
{"lineNum":"   11","line":"pub const pi = 3.14159265358979323846264338327950288419716939937510;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// Phi or Golden ratio constant (Φ) = (1 + sqrt(5))/2"},
{"lineNum":"   14","line":"pub const phi = 1.6180339887498948482045868343656381177203091798057628621;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"/// Circle constant (τ)"},
{"lineNum":"   17","line":"pub const tau = 2 * pi;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"/// log2(e)"},
{"lineNum":"   20","line":"pub const log2e = 1.442695040888963407359924681001892137;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// log10(e)"},
{"lineNum":"   23","line":"pub const log10e = 0.434294481903251827651128918916605082;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// ln(2)"},
{"lineNum":"   26","line":"pub const ln2 = 0.693147180559945309417232121458176568;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/// ln(10)"},
{"lineNum":"   29","line":"pub const ln10 = 2.302585092994045684017991454684364208;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"/// 2/sqrt(π)"},
{"lineNum":"   32","line":"pub const two_sqrtpi = 1.128379167095512573896158903121545172;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"/// sqrt(2)"},
{"lineNum":"   35","line":"pub const sqrt2 = 1.414213562373095048801688724209698079;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"/// 1/sqrt(2)"},
{"lineNum":"   38","line":"pub const sqrt1_2 = 0.707106781186547524400844362104849039;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub const floatExponentBits = @import(\"math/float.zig\").floatExponentBits;"},
{"lineNum":"   41","line":"pub const floatMantissaBits = @import(\"math/float.zig\").floatMantissaBits;"},
{"lineNum":"   42","line":"pub const floatFractionalBits = @import(\"math/float.zig\").floatFractionalBits;"},
{"lineNum":"   43","line":"pub const floatExponentMin = @import(\"math/float.zig\").floatExponentMin;"},
{"lineNum":"   44","line":"pub const floatExponentMax = @import(\"math/float.zig\").floatExponentMax;"},
{"lineNum":"   45","line":"pub const floatTrueMin = @import(\"math/float.zig\").floatTrueMin;"},
{"lineNum":"   46","line":"pub const floatMin = @import(\"math/float.zig\").floatMin;"},
{"lineNum":"   47","line":"pub const floatMax = @import(\"math/float.zig\").floatMax;"},
{"lineNum":"   48","line":"pub const floatEps = @import(\"math/float.zig\").floatEps;"},
{"lineNum":"   49","line":"pub const inf = @import(\"math/float.zig\").inf;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"pub const f16_true_min = @compileError(\"Deprecated: use `floatTrueMin(f16)` instead\");"},
{"lineNum":"   52","line":"pub const f32_true_min = @compileError(\"Deprecated: use `floatTrueMin(f32)` instead\");"},
{"lineNum":"   53","line":"pub const f64_true_min = @compileError(\"Deprecated: use `floatTrueMin(f64)` instead\");"},
{"lineNum":"   54","line":"pub const f80_true_min = @compileError(\"Deprecated: use `floatTrueMin(f80)` instead\");"},
{"lineNum":"   55","line":"pub const f128_true_min = @compileError(\"Deprecated: use `floatTrueMin(f128)` instead\");"},
{"lineNum":"   56","line":"pub const f16_min = @compileError(\"Deprecated: use `floatMin(f16)` instead\");"},
{"lineNum":"   57","line":"pub const f32_min = @compileError(\"Deprecated: use `floatMin(f32)` instead\");"},
{"lineNum":"   58","line":"pub const f64_min = @compileError(\"Deprecated: use `floatMin(f64)` instead\");"},
{"lineNum":"   59","line":"pub const f80_min = @compileError(\"Deprecated: use `floatMin(f80)` instead\");"},
{"lineNum":"   60","line":"pub const f128_min = @compileError(\"Deprecated: use `floatMin(f128)` instead\");"},
{"lineNum":"   61","line":"pub const f16_max = @compileError(\"Deprecated: use `floatMax(f16)` instead\");"},
{"lineNum":"   62","line":"pub const f32_max = @compileError(\"Deprecated: use `floatMax(f32)` instead\");"},
{"lineNum":"   63","line":"pub const f64_max = @compileError(\"Deprecated: use `floatMax(f64)` instead\");"},
{"lineNum":"   64","line":"pub const f80_max = @compileError(\"Deprecated: use `floatMax(f80)` instead\");"},
{"lineNum":"   65","line":"pub const f128_max = @compileError(\"Deprecated: use `floatMax(f128)` instead\");"},
{"lineNum":"   66","line":"pub const f16_epsilon = @compileError(\"Deprecated: use `floatEps(f16)` instead\");"},
{"lineNum":"   67","line":"pub const f32_epsilon = @compileError(\"Deprecated: use `floatEps(f32)` instead\");"},
{"lineNum":"   68","line":"pub const f64_epsilon = @compileError(\"Deprecated: use `floatEps(f64)` instead\");"},
{"lineNum":"   69","line":"pub const f80_epsilon = @compileError(\"Deprecated: use `floatEps(f80)` instead\");"},
{"lineNum":"   70","line":"pub const f128_epsilon = @compileError(\"Deprecated: use `floatEps(f128)` instead\");"},
{"lineNum":"   71","line":"pub const f16_toint = @compileError(\"Deprecated: use `1.0 / floatEps(f16)` instead\");"},
{"lineNum":"   72","line":"pub const f32_toint = @compileError(\"Deprecated: use `1.0 / floatEps(f32)` instead\");"},
{"lineNum":"   73","line":"pub const f64_toint = @compileError(\"Deprecated: use `1.0 / floatEps(f64)` instead\");"},
{"lineNum":"   74","line":"pub const f80_toint = @compileError(\"Deprecated: use `1.0 / floatEps(f80)` instead\");"},
{"lineNum":"   75","line":"pub const f128_toint = @compileError(\"Deprecated: use `1.0 / floatEps(f128)` instead\");"},
{"lineNum":"   76","line":"pub const inf_u16 = @compileError(\"Deprecated: use `@bitCast(u16, inf(f16))` instead\");"},
{"lineNum":"   77","line":"pub const inf_f16 = @compileError(\"Deprecated: use `inf(f16)` instead\");"},
{"lineNum":"   78","line":"pub const inf_u32 = @compileError(\"Deprecated: use `@bitCast(u32, inf(f32))` instead\");"},
{"lineNum":"   79","line":"pub const inf_f32 = @compileError(\"Deprecated: use `inf(f32)` instead\");"},
{"lineNum":"   80","line":"pub const inf_u64 = @compileError(\"Deprecated: use `@bitCast(u64, inf(f64))` instead\");"},
{"lineNum":"   81","line":"pub const inf_f64 = @compileError(\"Deprecated: use `inf(f64)` instead\");"},
{"lineNum":"   82","line":"pub const inf_f80 = @compileError(\"Deprecated: use `inf(f80)` instead\");"},
{"lineNum":"   83","line":"pub const inf_u128 = @compileError(\"Deprecated: use `@bitCast(u128, inf(f128))` instead\");"},
{"lineNum":"   84","line":"pub const inf_f128 = @compileError(\"Deprecated: use `inf(f128)` instead\");"},
{"lineNum":"   85","line":"pub const epsilon = @compileError(\"Deprecated: use `floatEps` instead\");"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"pub const nan_u16 = @as(u16, 0x7C01);"},
{"lineNum":"   88","line":"pub const nan_f16 = @as(f16, @bitCast(nan_u16));"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"pub const qnan_u16 = @as(u16, 0x7E00);"},
{"lineNum":"   91","line":"pub const qnan_f16 = @as(f16, @bitCast(qnan_u16));"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"pub const nan_u32 = @as(u32, 0x7F800001);"},
{"lineNum":"   94","line":"pub const nan_f32 = @as(f32, @bitCast(nan_u32));"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"pub const qnan_u32 = @as(u32, 0x7FC00000);"},
{"lineNum":"   97","line":"pub const qnan_f32 = @as(f32, @bitCast(qnan_u32));"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"pub const nan_u64 = @as(u64, 0x7FF << 52) | 1;"},
{"lineNum":"  100","line":"pub const nan_f64 = @as(f64, @bitCast(nan_u64));"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"pub const qnan_u64 = @as(u64, 0x7ff8000000000000);"},
{"lineNum":"  103","line":"pub const qnan_f64 = @as(f64, @bitCast(qnan_u64));"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"pub const nan_f80 = make_f80(F80{ .fraction = 0xA000000000000000, .exp = 0x7fff });"},
{"lineNum":"  106","line":"pub const qnan_f80 = make_f80(F80{ .fraction = 0xC000000000000000, .exp = 0x7fff });"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"pub const nan_u128 = @as(u128, 0x7fff0000000000000000000000000001);"},
{"lineNum":"  109","line":"pub const nan_f128 = @as(f128, @bitCast(nan_u128));"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"pub const qnan_u128 = @as(u128, 0x7fff8000000000000000000000000000);"},
{"lineNum":"  112","line":"pub const qnan_f128 = @as(f128, @bitCast(qnan_u128));"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"pub const nan = @import(\"math/nan.zig\").nan;"},
{"lineNum":"  115","line":"pub const snan = @import(\"math/nan.zig\").snan;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"/// Performs an approximate comparison of two floating point values `x` and `y`."},
{"lineNum":"  118","line":"/// Returns true if the absolute difference between them is less or equal than"},
{"lineNum":"  119","line":"/// the specified tolerance."},
{"lineNum":"  120","line":"///"},
{"lineNum":"  121","line":"/// The `tolerance` parameter is the absolute tolerance used when determining if"},
{"lineNum":"  122","line":"/// the two numbers are close enough; a good value for this parameter is a small"},
{"lineNum":"  123","line":"/// multiple of `floatEps(T)`."},
{"lineNum":"  124","line":"///"},
{"lineNum":"  125","line":"/// Note that this function is recommended for comparing small numbers"},
{"lineNum":"  126","line":"/// around zero; using `approxEqRel` is suggested otherwise."},
{"lineNum":"  127","line":"///"},
{"lineNum":"  128","line":"/// NaN values are never considered equal to any value."},
{"lineNum":"  129","line":"pub fn approxEqAbs(comptime T: type, x: T, y: T, tolerance: T) bool {"},
{"lineNum":"  130","line":"    assert(@typeInfo(T) == .Float);"},
{"lineNum":"  131","line":"    assert(tolerance >= 0);"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    // Fast path for equal values (and signed zeros and infinites)."},
{"lineNum":"  134","line":"    if (x == y)"},
{"lineNum":"  135","line":"        return true;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    if (isNan(x) or isNan(y))"},
{"lineNum":"  138","line":"        return false;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    return @fabs(x - y) <= tolerance;"},
{"lineNum":"  141","line":"}"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"/// Performs an approximate comparison of two floating point values `x` and `y`."},
{"lineNum":"  144","line":"/// Returns true if the absolute difference between them is less or equal than"},
{"lineNum":"  145","line":"/// `max(|x|, |y|) * tolerance`, where `tolerance` is a positive number greater"},
{"lineNum":"  146","line":"/// than zero."},
{"lineNum":"  147","line":"///"},
{"lineNum":"  148","line":"/// The `tolerance` parameter is the relative tolerance used when determining if"},
{"lineNum":"  149","line":"/// the two numbers are close enough; a good value for this parameter is usually"},
{"lineNum":"  150","line":"/// `sqrt(floatEps(T))`, meaning that the two numbers are considered equal if at"},
{"lineNum":"  151","line":"/// least half of the digits are equal."},
{"lineNum":"  152","line":"///"},
{"lineNum":"  153","line":"/// Note that for comparisons of small numbers around zero this function won\'t"},
{"lineNum":"  154","line":"/// give meaningful results, use `approxEqAbs` instead."},
{"lineNum":"  155","line":"///"},
{"lineNum":"  156","line":"/// NaN values are never considered equal to any value."},
{"lineNum":"  157","line":"pub fn approxEqRel(comptime T: type, x: T, y: T, tolerance: T) bool {"},
{"lineNum":"  158","line":"    assert(@typeInfo(T) == .Float);"},
{"lineNum":"  159","line":"    assert(tolerance > 0);"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    // Fast path for equal values (and signed zeros and infinites)."},
{"lineNum":"  162","line":"    if (x == y)"},
{"lineNum":"  163","line":"        return true;"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    if (isNan(x) or isNan(y))"},
{"lineNum":"  166","line":"        return false;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    return @fabs(x - y) <= @max(@fabs(x), @fabs(y)) * tolerance;"},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"test \"approxEqAbs and approxEqRel\" {"},
{"lineNum":"  172","line":"    inline for ([_]type{ f16, f32, f64, f128 }) |T| {"},
{"lineNum":"  173","line":"        const eps_value = comptime floatEps(T);"},
{"lineNum":"  174","line":"        const sqrt_eps_value = comptime sqrt(eps_value);"},
{"lineNum":"  175","line":"        const nan_value = comptime nan(T);"},
{"lineNum":"  176","line":"        const inf_value = comptime inf(T);"},
{"lineNum":"  177","line":"        const min_value = comptime floatMin(T);"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"        try testing.expect(approxEqAbs(T, 0.0, 0.0, eps_value));"},
{"lineNum":"  180","line":"        try testing.expect(approxEqAbs(T, -0.0, -0.0, eps_value));"},
{"lineNum":"  181","line":"        try testing.expect(approxEqAbs(T, 0.0, -0.0, eps_value));"},
{"lineNum":"  182","line":"        try testing.expect(approxEqRel(T, 1.0, 1.0, sqrt_eps_value));"},
{"lineNum":"  183","line":"        try testing.expect(!approxEqRel(T, 1.0, 0.0, sqrt_eps_value));"},
{"lineNum":"  184","line":"        try testing.expect(!approxEqAbs(T, 1.0 + 2 * eps_value, 1.0, eps_value));"},
{"lineNum":"  185","line":"        try testing.expect(approxEqAbs(T, 1.0 + 1 * eps_value, 1.0, eps_value));"},
{"lineNum":"  186","line":"        try testing.expect(!approxEqRel(T, 1.0, nan_value, sqrt_eps_value));"},
{"lineNum":"  187","line":"        try testing.expect(!approxEqRel(T, nan_value, nan_value, sqrt_eps_value));"},
{"lineNum":"  188","line":"        try testing.expect(approxEqRel(T, inf_value, inf_value, sqrt_eps_value));"},
{"lineNum":"  189","line":"        try testing.expect(approxEqRel(T, min_value, min_value, sqrt_eps_value));"},
{"lineNum":"  190","line":"        try testing.expect(approxEqRel(T, -min_value, -min_value, sqrt_eps_value));"},
{"lineNum":"  191","line":"        try testing.expect(approxEqAbs(T, min_value, 0.0, eps_value * 2));"},
{"lineNum":"  192","line":"        try testing.expect(approxEqAbs(T, -min_value, 0.0, eps_value * 2));"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":"}"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"pub fn doNotOptimizeAway(val: anytype) void {"},
{"lineNum":"  197","line":"    return mem.doNotOptimizeAway(val);"},
{"lineNum":"  198","line":"}"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"pub fn raiseInvalid() void {"},
{"lineNum":"  201","line":"    // Raise INVALID fpu exception"},
{"lineNum":"  202","line":"}"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"pub fn raiseUnderflow() void {"},
{"lineNum":"  205","line":"    // Raise UNDERFLOW fpu exception"},
{"lineNum":"  206","line":"}"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"pub fn raiseOverflow() void {"},
{"lineNum":"  209","line":"    // Raise OVERFLOW fpu exception"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"pub fn raiseInexact() void {"},
{"lineNum":"  213","line":"    // Raise INEXACT fpu exception"},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"pub fn raiseDivByZero() void {"},
{"lineNum":"  217","line":"    // Raise INEXACT fpu exception"},
{"lineNum":"  218","line":"}"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"pub const isNan = @import(\"math/isnan.zig\").isNan;"},
{"lineNum":"  221","line":"pub const isSignalNan = @import(\"math/isnan.zig\").isSignalNan;"},
{"lineNum":"  222","line":"pub const frexp = @import(\"math/frexp.zig\").frexp;"},
{"lineNum":"  223","line":"pub const Frexp = @import(\"math/frexp.zig\").Frexp;"},
{"lineNum":"  224","line":"pub const modf = @import(\"math/modf.zig\").modf;"},
{"lineNum":"  225","line":"pub const modf32_result = @import(\"math/modf.zig\").modf32_result;"},
{"lineNum":"  226","line":"pub const modf64_result = @import(\"math/modf.zig\").modf64_result;"},
{"lineNum":"  227","line":"pub const copysign = @import(\"math/copysign.zig\").copysign;"},
{"lineNum":"  228","line":"pub const isFinite = @import(\"math/isfinite.zig\").isFinite;"},
{"lineNum":"  229","line":"pub const isInf = @import(\"math/isinf.zig\").isInf;"},
{"lineNum":"  230","line":"pub const isPositiveInf = @import(\"math/isinf.zig\").isPositiveInf;"},
{"lineNum":"  231","line":"pub const isNegativeInf = @import(\"math/isinf.zig\").isNegativeInf;"},
{"lineNum":"  232","line":"pub const isNormal = @import(\"math/isnormal.zig\").isNormal;"},
{"lineNum":"  233","line":"pub const signbit = @import(\"math/signbit.zig\").signbit;"},
{"lineNum":"  234","line":"pub const scalbn = @import(\"math/scalbn.zig\").scalbn;"},
{"lineNum":"  235","line":"pub const ldexp = @import(\"math/ldexp.zig\").ldexp;"},
{"lineNum":"  236","line":"pub const pow = @import(\"math/pow.zig\").pow;"},
{"lineNum":"  237","line":"pub const powi = @import(\"math/powi.zig\").powi;"},
{"lineNum":"  238","line":"pub const sqrt = @import(\"math/sqrt.zig\").sqrt;"},
{"lineNum":"  239","line":"pub const cbrt = @import(\"math/cbrt.zig\").cbrt;"},
{"lineNum":"  240","line":"pub const acos = @import(\"math/acos.zig\").acos;"},
{"lineNum":"  241","line":"pub const asin = @import(\"math/asin.zig\").asin;"},
{"lineNum":"  242","line":"pub const atan = @import(\"math/atan.zig\").atan;"},
{"lineNum":"  243","line":"pub const atan2 = @import(\"math/atan2.zig\").atan2;"},
{"lineNum":"  244","line":"pub const hypot = @import(\"math/hypot.zig\").hypot;"},
{"lineNum":"  245","line":"pub const expm1 = @import(\"math/expm1.zig\").expm1;"},
{"lineNum":"  246","line":"pub const ilogb = @import(\"math/ilogb.zig\").ilogb;"},
{"lineNum":"  247","line":"pub const log = @import(\"math/log.zig\").log;"},
{"lineNum":"  248","line":"pub const log2 = @import(\"math/log2.zig\").log2;"},
{"lineNum":"  249","line":"pub const log10 = @import(\"math/log10.zig\").log10;"},
{"lineNum":"  250","line":"pub const log10_int = @import(\"math/log10.zig\").log10_int;"},
{"lineNum":"  251","line":"pub const log1p = @import(\"math/log1p.zig\").log1p;"},
{"lineNum":"  252","line":"pub const asinh = @import(\"math/asinh.zig\").asinh;"},
{"lineNum":"  253","line":"pub const acosh = @import(\"math/acosh.zig\").acosh;"},
{"lineNum":"  254","line":"pub const atanh = @import(\"math/atanh.zig\").atanh;"},
{"lineNum":"  255","line":"pub const sinh = @import(\"math/sinh.zig\").sinh;"},
{"lineNum":"  256","line":"pub const cosh = @import(\"math/cosh.zig\").cosh;"},
{"lineNum":"  257","line":"pub const tanh = @import(\"math/tanh.zig\").tanh;"},
{"lineNum":"  258","line":"pub const gcd = @import(\"math/gcd.zig\").gcd;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"/// Sine trigonometric function on a floating point number."},
{"lineNum":"  261","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":"  262","line":"/// This is the same as calling the builtin @sin"},
{"lineNum":"  263","line":"pub inline fn sin(value: anytype) @TypeOf(value) {"},
{"lineNum":"  264","line":"    return @sin(value);"},
{"lineNum":"  265","line":"}"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"/// Cosine trigonometric function on a floating point number."},
{"lineNum":"  268","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":"  269","line":"/// This is the same as calling the builtin @cos"},
{"lineNum":"  270","line":"pub inline fn cos(value: anytype) @TypeOf(value) {"},
{"lineNum":"  271","line":"    return @cos(value);"},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"/// Tangent trigonometric function on a floating point number."},
{"lineNum":"  275","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":"  276","line":"/// This is the same as calling the builtin @tan"},
{"lineNum":"  277","line":"pub inline fn tan(value: anytype) @TypeOf(value) {"},
{"lineNum":"  278","line":"    return @tan(value);"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"/// Converts an angle in radians to degrees. T must be a float type."},
{"lineNum":"  282","line":"pub fn radiansToDegrees(comptime T: type, angle_in_radians: T) T {"},
{"lineNum":"  283","line":"    if (@typeInfo(T) != .Float and @typeInfo(T) != .ComptimeFloat)"},
{"lineNum":"  284","line":"        @compileError(\"T must be a float type\");"},
{"lineNum":"  285","line":"    return angle_in_radians * 180.0 / pi;"},
{"lineNum":"  286","line":"}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"test \"radiansToDegrees\" {"},
{"lineNum":"  289","line":"    try std.testing.expectApproxEqAbs(@as(f32, 0), radiansToDegrees(f32, 0), 1e-6);"},
{"lineNum":"  290","line":"    try std.testing.expectApproxEqAbs(@as(f32, 90), radiansToDegrees(f32, pi / 2.0), 1e-6);"},
{"lineNum":"  291","line":"    try std.testing.expectApproxEqAbs(@as(f32, -45), radiansToDegrees(f32, -pi / 4.0), 1e-6);"},
{"lineNum":"  292","line":"    try std.testing.expectApproxEqAbs(@as(f32, 180), radiansToDegrees(f32, pi), 1e-6);"},
{"lineNum":"  293","line":"    try std.testing.expectApproxEqAbs(@as(f32, 360), radiansToDegrees(f32, 2.0 * pi), 1e-6);"},
{"lineNum":"  294","line":"}"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"/// Converts an angle in degrees to radians. T must be a float type."},
{"lineNum":"  297","line":"pub fn degreesToRadians(comptime T: type, angle_in_degrees: T) T {"},
{"lineNum":"  298","line":"    if (@typeInfo(T) != .Float and @typeInfo(T) != .ComptimeFloat)"},
{"lineNum":"  299","line":"        @compileError(\"T must be a float type\");"},
{"lineNum":"  300","line":"    return angle_in_degrees * pi / 180.0;"},
{"lineNum":"  301","line":"}"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"test \"degreesToRadians\" {"},
{"lineNum":"  304","line":"    try std.testing.expectApproxEqAbs(@as(f32, pi / 2.0), degreesToRadians(f32, 90), 1e-6);"},
{"lineNum":"  305","line":"    try std.testing.expectApproxEqAbs(@as(f32, -3 * pi / 2.0), degreesToRadians(f32, -270), 1e-6);"},
{"lineNum":"  306","line":"    try std.testing.expectApproxEqAbs(@as(f32, 2 * pi), degreesToRadians(f32, 360), 1e-6);"},
{"lineNum":"  307","line":"}"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"/// Base-e exponential function on a floating point number."},
{"lineNum":"  310","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":"  311","line":"/// This is the same as calling the builtin @exp"},
{"lineNum":"  312","line":"pub inline fn exp(value: anytype) @TypeOf(value) {"},
{"lineNum":"  313","line":"    return @exp(value);"},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"/// Base-2 exponential function on a floating point number."},
{"lineNum":"  317","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":"  318","line":"/// This is the same as calling the builtin @exp2"},
{"lineNum":"  319","line":"pub inline fn exp2(value: anytype) @TypeOf(value) {"},
{"lineNum":"  320","line":"    return @exp2(value);"},
{"lineNum":"  321","line":"}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"pub const complex = @import(\"math/complex.zig\");"},
{"lineNum":"  324","line":"pub const Complex = complex.Complex;"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"pub const big = @import(\"math/big.zig\");"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"test {"},
{"lineNum":"  329","line":"    _ = floatExponentBits;"},
{"lineNum":"  330","line":"    _ = floatMantissaBits;"},
{"lineNum":"  331","line":"    _ = floatFractionalBits;"},
{"lineNum":"  332","line":"    _ = floatExponentMin;"},
{"lineNum":"  333","line":"    _ = floatExponentMax;"},
{"lineNum":"  334","line":"    _ = floatTrueMin;"},
{"lineNum":"  335","line":"    _ = floatMin;"},
{"lineNum":"  336","line":"    _ = floatMax;"},
{"lineNum":"  337","line":"    _ = floatEps;"},
{"lineNum":"  338","line":"    _ = inf;"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    _ = nan_u16;"},
{"lineNum":"  341","line":"    _ = nan_f16;"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    _ = qnan_u16;"},
{"lineNum":"  344","line":"    _ = qnan_f16;"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    _ = nan_u32;"},
{"lineNum":"  347","line":"    _ = nan_f32;"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    _ = qnan_u32;"},
{"lineNum":"  350","line":"    _ = qnan_f32;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    _ = nan_u64;"},
{"lineNum":"  353","line":"    _ = nan_f64;"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    _ = qnan_u64;"},
{"lineNum":"  356","line":"    _ = qnan_f64;"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    _ = nan_f80;"},
{"lineNum":"  359","line":"    _ = qnan_f80;"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    _ = nan_u128;"},
{"lineNum":"  362","line":"    _ = nan_f128;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    _ = qnan_u128;"},
{"lineNum":"  365","line":"    _ = qnan_f128;"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"    _ = nan;"},
{"lineNum":"  368","line":"    _ = snan;"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    _ = isNan;"},
{"lineNum":"  371","line":"    _ = isSignalNan;"},
{"lineNum":"  372","line":"    _ = frexp;"},
{"lineNum":"  373","line":"    _ = Frexp;"},
{"lineNum":"  374","line":"    _ = modf;"},
{"lineNum":"  375","line":"    _ = modf32_result;"},
{"lineNum":"  376","line":"    _ = modf64_result;"},
{"lineNum":"  377","line":"    _ = copysign;"},
{"lineNum":"  378","line":"    _ = isFinite;"},
{"lineNum":"  379","line":"    _ = isInf;"},
{"lineNum":"  380","line":"    _ = isPositiveInf;"},
{"lineNum":"  381","line":"    _ = isNegativeInf;"},
{"lineNum":"  382","line":"    _ = isNormal;"},
{"lineNum":"  383","line":"    _ = signbit;"},
{"lineNum":"  384","line":"    _ = scalbn;"},
{"lineNum":"  385","line":"    _ = ldexp;"},
{"lineNum":"  386","line":"    _ = pow;"},
{"lineNum":"  387","line":"    _ = powi;"},
{"lineNum":"  388","line":"    _ = sqrt;"},
{"lineNum":"  389","line":"    _ = cbrt;"},
{"lineNum":"  390","line":"    _ = acos;"},
{"lineNum":"  391","line":"    _ = asin;"},
{"lineNum":"  392","line":"    _ = atan;"},
{"lineNum":"  393","line":"    _ = atan2;"},
{"lineNum":"  394","line":"    _ = hypot;"},
{"lineNum":"  395","line":"    _ = expm1;"},
{"lineNum":"  396","line":"    _ = ilogb;"},
{"lineNum":"  397","line":"    _ = log;"},
{"lineNum":"  398","line":"    _ = log2;"},
{"lineNum":"  399","line":"    _ = log10;"},
{"lineNum":"  400","line":"    _ = log10_int;"},
{"lineNum":"  401","line":"    _ = log1p;"},
{"lineNum":"  402","line":"    _ = asinh;"},
{"lineNum":"  403","line":"    _ = acosh;"},
{"lineNum":"  404","line":"    _ = atanh;"},
{"lineNum":"  405","line":"    _ = sinh;"},
{"lineNum":"  406","line":"    _ = cosh;"},
{"lineNum":"  407","line":"    _ = tanh;"},
{"lineNum":"  408","line":"    _ = gcd;"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    _ = complex;"},
{"lineNum":"  411","line":"    _ = Complex;"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    _ = big;"},
{"lineNum":"  414","line":"}"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"/// Given two types, returns the smallest one which is capable of holding the"},
{"lineNum":"  417","line":"/// full range of the minimum value."},
{"lineNum":"  418","line":"pub fn Min(comptime A: type, comptime B: type) type {"},
{"lineNum":"  419","line":"    switch (@typeInfo(A)) {"},
{"lineNum":"  420","line":"        .Int => |a_info| switch (@typeInfo(B)) {"},
{"lineNum":"  421","line":"            .Int => |b_info| if (a_info.signedness == .unsigned and b_info.signedness == .unsigned) {"},
{"lineNum":"  422","line":"                if (a_info.bits < b_info.bits) {"},
{"lineNum":"  423","line":"                    return A;"},
{"lineNum":"  424","line":"                } else {"},
{"lineNum":"  425","line":"                    return B;"},
{"lineNum":"  426","line":"                }"},
{"lineNum":"  427","line":"            },"},
{"lineNum":"  428","line":"            else => {},"},
{"lineNum":"  429","line":"        },"},
{"lineNum":"  430","line":"        else => {},"},
{"lineNum":"  431","line":"    }"},
{"lineNum":"  432","line":"    return @TypeOf(@as(A, 0) + @as(B, 0));"},
{"lineNum":"  433","line":"}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"pub const min = @compileError(\"deprecated; use @min instead\");"},
{"lineNum":"  436","line":"pub const max = @compileError(\"deprecated; use @max instead\");"},
{"lineNum":"  437","line":"pub const min3 = @compileError(\"deprecated; use @min instead\");"},
{"lineNum":"  438","line":"pub const max3 = @compileError(\"deprecated; use @max instead\");"},
{"lineNum":"  439","line":"pub const ln = @compileError(\"deprecated; use @log instead\");"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"/// Limit val to the inclusive range [lower, upper]."},
{"lineNum":"  442","line":"pub fn clamp(val: anytype, lower: anytype, upper: anytype) @TypeOf(val, lower, upper) {"},
{"lineNum":"  443","line":"    assert(lower <= upper);"},
{"lineNum":"  444","line":"    return @max(lower, @min(val, upper));"},
{"lineNum":"  445","line":"}"},
{"lineNum":"  446","line":"test \"clamp\" {"},
{"lineNum":"  447","line":"    // Within range"},
{"lineNum":"  448","line":"    try testing.expect(std.math.clamp(@as(i32, -1), @as(i32, -4), @as(i32, 7)) == -1);"},
{"lineNum":"  449","line":"    // Below"},
{"lineNum":"  450","line":"    try testing.expect(std.math.clamp(@as(i32, -5), @as(i32, -4), @as(i32, 7)) == -4);"},
{"lineNum":"  451","line":"    // Above"},
{"lineNum":"  452","line":"    try testing.expect(std.math.clamp(@as(i32, 8), @as(i32, -4), @as(i32, 7)) == 7);"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    // Floating point"},
{"lineNum":"  455","line":"    try testing.expect(std.math.clamp(@as(f32, 1.1), @as(f32, 0.0), @as(f32, 1.0)) == 1.0);"},
{"lineNum":"  456","line":"    try testing.expect(std.math.clamp(@as(f32, -127.5), @as(f32, -200), @as(f32, -100)) == -127.5);"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    // Mix of comptime and non-comptime"},
{"lineNum":"  459","line":"    var i: i32 = 1;"},
{"lineNum":"  460","line":"    try testing.expect(std.math.clamp(i, 0, 1) == 1);"},
{"lineNum":"  461","line":"}"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"/// Returns the product of a and b. Returns an error on overflow."},
{"lineNum":"  464","line":"pub fn mul(comptime T: type, a: T, b: T) (error{Overflow}!T) {","class":"lineCov","hits":"1","order":"224","possible_hits":"1",},
{"lineNum":"  465","line":"    if (T == comptime_int) return a * b;"},
{"lineNum":"  466","line":"    const ov = @mulWithOverflow(a, b);","class":"lineCov","hits":"1","order":"225","possible_hits":"1",},
{"lineNum":"  467","line":"    if (ov[1] != 0) return error.Overflow;","class":"linePartCov","hits":"1","order":"226","possible_hits":"2",},
{"lineNum":"  468","line":"    return ov[0];","class":"lineCov","hits":"1","order":"227","possible_hits":"1",},
{"lineNum":"  469","line":"}"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"/// Returns the sum of a and b. Returns an error on overflow."},
{"lineNum":"  472","line":"pub fn add(comptime T: type, a: T, b: T) (error{Overflow}!T) {","class":"linePartCov","hits":"1","order":"296","possible_hits":"4",},
{"lineNum":"  473","line":"    if (T == comptime_int) return a + b;"},
{"lineNum":"  474","line":"    const ov = @addWithOverflow(a, b);","class":"linePartCov","hits":"1","order":"297","possible_hits":"4",},
{"lineNum":"  475","line":"    if (ov[1] != 0) return error.Overflow;","class":"linePartCov","hits":"1","order":"298","possible_hits":"8",},
{"lineNum":"  476","line":"    return ov[0];","class":"linePartCov","hits":"1","order":"299","possible_hits":"4",},
{"lineNum":"  477","line":"}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"/// Returns a - b, or an error on overflow."},
{"lineNum":"  480","line":"pub fn sub(comptime T: type, a: T, b: T) (error{Overflow}!T) {","class":"linePartCov","hits":"1","order":"3020","possible_hits":"3",},
{"lineNum":"  481","line":"    if (T == comptime_int) return a - b;"},
{"lineNum":"  482","line":"    const ov = @subWithOverflow(a, b);","class":"linePartCov","hits":"1","order":"3021","possible_hits":"3",},
{"lineNum":"  483","line":"    if (ov[1] != 0) return error.Overflow;","class":"linePartCov","hits":"1","order":"3022","possible_hits":"6",},
{"lineNum":"  484","line":"    return ov[0];","class":"linePartCov","hits":"1","order":"3023","possible_hits":"3",},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"pub fn negate(x: anytype) !@TypeOf(x) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"    return sub(@TypeOf(x), 0, x);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  489","line":"}"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"/// Shifts a left by shift_amt. Returns an error on overflow. shift_amt"},
{"lineNum":"  492","line":"/// is unsigned."},
{"lineNum":"  493","line":"pub fn shlExact(comptime T: type, a: T, shift_amt: Log2Int(T)) !T {"},
{"lineNum":"  494","line":"    if (T == comptime_int) return a << shift_amt;"},
{"lineNum":"  495","line":"    const ov = @shlWithOverflow(a, shift_amt);"},
{"lineNum":"  496","line":"    if (ov[1] != 0) return error.Overflow;"},
{"lineNum":"  497","line":"    return ov[0];"},
{"lineNum":"  498","line":"}"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"/// Shifts left. Overflowed bits are truncated."},
{"lineNum":"  501","line":"/// A negative shift amount results in a right shift."},
{"lineNum":"  502","line":"pub fn shl(comptime T: type, a: T, shift_amt: anytype) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"    const abs_shift_amt = absCast(shift_amt);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    const casted_shift_amt = blk: {"},
{"lineNum":"  506","line":"        if (@typeInfo(T) == .Vector) {"},
{"lineNum":"  507","line":"            const C = @typeInfo(T).Vector.child;"},
{"lineNum":"  508","line":"            const len = @typeInfo(T).Vector.len;"},
{"lineNum":"  509","line":"            if (abs_shift_amt >= @typeInfo(C).Int.bits) return @splat(0);"},
{"lineNum":"  510","line":"            break :blk @as(@Vector(len, Log2Int(C)), @splat(@as(Log2Int(C), @intCast(abs_shift_amt))));"},
{"lineNum":"  511","line":"        } else {"},
{"lineNum":"  512","line":"            if (abs_shift_amt >= @typeInfo(T).Int.bits) return 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  513","line":"            break :blk @as(Log2Int(T), @intCast(abs_shift_amt));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  514","line":"        }"},
{"lineNum":"  515","line":"    };"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    if (@TypeOf(shift_amt) == comptime_int or @typeInfo(@TypeOf(shift_amt)).Int.signedness == .signed) {"},
{"lineNum":"  518","line":"        if (shift_amt < 0) {"},
{"lineNum":"  519","line":"            return a >> casted_shift_amt;"},
{"lineNum":"  520","line":"        }"},
{"lineNum":"  521","line":"    }"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"    return a << casted_shift_amt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  524","line":"}"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"test \"shl\" {"},
{"lineNum":"  527","line":"    if (builtin.zig_backend == .stage2_llvm and builtin.cpu.arch == .aarch64) {"},
{"lineNum":"  528","line":"        // https://github.com/ziglang/zig/issues/12012"},
{"lineNum":"  529","line":"        return error.SkipZigTest;"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":"    try testing.expect(shl(u8, 0b11111111, @as(usize, 3)) == 0b11111000);"},
{"lineNum":"  532","line":"    try testing.expect(shl(u8, 0b11111111, @as(usize, 8)) == 0);"},
{"lineNum":"  533","line":"    try testing.expect(shl(u8, 0b11111111, @as(usize, 9)) == 0);"},
{"lineNum":"  534","line":"    try testing.expect(shl(u8, 0b11111111, @as(isize, -2)) == 0b00111111);"},
{"lineNum":"  535","line":"    try testing.expect(shl(u8, 0b11111111, 3) == 0b11111000);"},
{"lineNum":"  536","line":"    try testing.expect(shl(u8, 0b11111111, 8) == 0);"},
{"lineNum":"  537","line":"    try testing.expect(shl(u8, 0b11111111, 9) == 0);"},
{"lineNum":"  538","line":"    try testing.expect(shl(u8, 0b11111111, -2) == 0b00111111);"},
{"lineNum":"  539","line":"    try testing.expect(shl(@Vector(1, u32), @Vector(1, u32){42}, @as(usize, 1))[0] == @as(u32, 42) << 1);"},
{"lineNum":"  540","line":"    try testing.expect(shl(@Vector(1, u32), @Vector(1, u32){42}, @as(isize, -1))[0] == @as(u32, 42) >> 1);"},
{"lineNum":"  541","line":"    try testing.expect(shl(@Vector(1, u32), @Vector(1, u32){42}, 33)[0] == 0);"},
{"lineNum":"  542","line":"}"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"/// Shifts right. Overflowed bits are truncated."},
{"lineNum":"  545","line":"/// A negative shift amount results in a left shift."},
{"lineNum":"  546","line":"pub fn shr(comptime T: type, a: T, shift_amt: anytype) T {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  547","line":"    const abs_shift_amt = absCast(shift_amt);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"    const casted_shift_amt = blk: {"},
{"lineNum":"  550","line":"        if (@typeInfo(T) == .Vector) {"},
{"lineNum":"  551","line":"            const C = @typeInfo(T).Vector.child;"},
{"lineNum":"  552","line":"            const len = @typeInfo(T).Vector.len;"},
{"lineNum":"  553","line":"            if (abs_shift_amt >= @typeInfo(C).Int.bits) return @splat(0);"},
{"lineNum":"  554","line":"            break :blk @as(@Vector(len, Log2Int(C)), @splat(@as(Log2Int(C), @intCast(abs_shift_amt))));"},
{"lineNum":"  555","line":"        } else {"},
{"lineNum":"  556","line":"            if (abs_shift_amt >= @typeInfo(T).Int.bits) return 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  557","line":"            break :blk @as(Log2Int(T), @intCast(abs_shift_amt));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  558","line":"        }"},
{"lineNum":"  559","line":"    };"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    if (@TypeOf(shift_amt) == comptime_int or @typeInfo(@TypeOf(shift_amt)).Int.signedness == .signed) {"},
{"lineNum":"  562","line":"        if (shift_amt < 0) {"},
{"lineNum":"  563","line":"            return a << casted_shift_amt;"},
{"lineNum":"  564","line":"        }"},
{"lineNum":"  565","line":"    }"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"    return a >> casted_shift_amt;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  568","line":"}"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"test \"shr\" {"},
{"lineNum":"  571","line":"    if (builtin.zig_backend == .stage2_llvm and builtin.cpu.arch == .aarch64) {"},
{"lineNum":"  572","line":"        // https://github.com/ziglang/zig/issues/12012"},
{"lineNum":"  573","line":"        return error.SkipZigTest;"},
{"lineNum":"  574","line":"    }"},
{"lineNum":"  575","line":"    try testing.expect(shr(u8, 0b11111111, @as(usize, 3)) == 0b00011111);"},
{"lineNum":"  576","line":"    try testing.expect(shr(u8, 0b11111111, @as(usize, 8)) == 0);"},
{"lineNum":"  577","line":"    try testing.expect(shr(u8, 0b11111111, @as(usize, 9)) == 0);"},
{"lineNum":"  578","line":"    try testing.expect(shr(u8, 0b11111111, @as(isize, -2)) == 0b11111100);"},
{"lineNum":"  579","line":"    try testing.expect(shr(u8, 0b11111111, 3) == 0b00011111);"},
{"lineNum":"  580","line":"    try testing.expect(shr(u8, 0b11111111, 8) == 0);"},
{"lineNum":"  581","line":"    try testing.expect(shr(u8, 0b11111111, 9) == 0);"},
{"lineNum":"  582","line":"    try testing.expect(shr(u8, 0b11111111, -2) == 0b11111100);"},
{"lineNum":"  583","line":"    try testing.expect(shr(@Vector(1, u32), @Vector(1, u32){42}, @as(usize, 1))[0] == @as(u32, 42) >> 1);"},
{"lineNum":"  584","line":"    try testing.expect(shr(@Vector(1, u32), @Vector(1, u32){42}, @as(isize, -1))[0] == @as(u32, 42) << 1);"},
{"lineNum":"  585","line":"    try testing.expect(shr(@Vector(1, u32), @Vector(1, u32){42}, 33)[0] == 0);"},
{"lineNum":"  586","line":"}"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"/// Rotates right. Only unsigned values can be rotated.  Negative shift"},
{"lineNum":"  589","line":"/// values result in shift modulo the bit count."},
{"lineNum":"  590","line":"pub fn rotr(comptime T: type, x: T, r: anytype) T {"},
{"lineNum":"  591","line":"    if (@typeInfo(T) == .Vector) {"},
{"lineNum":"  592","line":"        const C = @typeInfo(T).Vector.child;"},
{"lineNum":"  593","line":"        if (C == u0) return 0;"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"        if (@typeInfo(C).Int.signedness == .signed) {"},
{"lineNum":"  596","line":"            @compileError(\"cannot rotate signed integers\");"},
{"lineNum":"  597","line":"        }"},
{"lineNum":"  598","line":"        const ar = @as(Log2Int(C), @intCast(@mod(r, @typeInfo(C).Int.bits)));"},
{"lineNum":"  599","line":"        return (x >> @splat(ar)) | (x << @splat(1 + ~ar));"},
{"lineNum":"  600","line":"    } else if (@typeInfo(T).Int.signedness == .signed) {"},
{"lineNum":"  601","line":"        @compileError(\"cannot rotate signed integer\");"},
{"lineNum":"  602","line":"    } else {"},
{"lineNum":"  603","line":"        if (T == u0) return 0;"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"        if (isPowerOfTwo(@typeInfo(T).Int.bits)) {"},
{"lineNum":"  606","line":"            const ar = @as(Log2Int(T), @intCast(@mod(r, @typeInfo(T).Int.bits)));"},
{"lineNum":"  607","line":"            return x >> ar | x << (1 +% ~ar);"},
{"lineNum":"  608","line":"        } else {"},
{"lineNum":"  609","line":"            const ar = @mod(r, @typeInfo(T).Int.bits);"},
{"lineNum":"  610","line":"            return shr(T, x, ar) | shl(T, x, @typeInfo(T).Int.bits - ar);"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":"    }"},
{"lineNum":"  613","line":"}"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"test \"rotr\" {"},
{"lineNum":"  616","line":"    if (builtin.zig_backend == .stage2_llvm and builtin.cpu.arch == .aarch64) {"},
{"lineNum":"  617","line":"        // https://github.com/ziglang/zig/issues/12012"},
{"lineNum":"  618","line":"        return error.SkipZigTest;"},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":"    try testing.expect(rotr(u0, 0b0, @as(usize, 3)) == 0b0);"},
{"lineNum":"  621","line":"    try testing.expect(rotr(u5, 0b00001, @as(usize, 0)) == 0b00001);"},
{"lineNum":"  622","line":"    try testing.expect(rotr(u6, 0b000001, @as(usize, 7)) == 0b100000);"},
{"lineNum":"  623","line":"    try testing.expect(rotr(u8, 0b00000001, @as(usize, 0)) == 0b00000001);"},
{"lineNum":"  624","line":"    try testing.expect(rotr(u8, 0b00000001, @as(usize, 9)) == 0b10000000);"},
{"lineNum":"  625","line":"    try testing.expect(rotr(u8, 0b00000001, @as(usize, 8)) == 0b00000001);"},
{"lineNum":"  626","line":"    try testing.expect(rotr(u8, 0b00000001, @as(usize, 4)) == 0b00010000);"},
{"lineNum":"  627","line":"    try testing.expect(rotr(u8, 0b00000001, @as(isize, -1)) == 0b00000010);"},
{"lineNum":"  628","line":"    try testing.expect(rotr(@Vector(1, u32), @Vector(1, u32){1}, @as(usize, 1))[0] == @as(u32, 1) << 31);"},
{"lineNum":"  629","line":"    try testing.expect(rotr(@Vector(1, u32), @Vector(1, u32){1}, @as(isize, -1))[0] == @as(u32, 1) << 1);"},
{"lineNum":"  630","line":"}"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"/// Rotates left. Only unsigned values can be rotated.  Negative shift"},
{"lineNum":"  633","line":"/// values result in shift modulo the bit count."},
{"lineNum":"  634","line":"pub fn rotl(comptime T: type, x: T, r: anytype) T {"},
{"lineNum":"  635","line":"    if (@typeInfo(T) == .Vector) {"},
{"lineNum":"  636","line":"        const C = @typeInfo(T).Vector.child;"},
{"lineNum":"  637","line":"        if (C == u0) return 0;"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"        if (@typeInfo(C).Int.signedness == .signed) {"},
{"lineNum":"  640","line":"            @compileError(\"cannot rotate signed integers\");"},
{"lineNum":"  641","line":"        }"},
{"lineNum":"  642","line":"        const ar = @as(Log2Int(C), @intCast(@mod(r, @typeInfo(C).Int.bits)));"},
{"lineNum":"  643","line":"        return (x << @splat(ar)) | (x >> @splat(1 +% ~ar));"},
{"lineNum":"  644","line":"    } else if (@typeInfo(T).Int.signedness == .signed) {"},
{"lineNum":"  645","line":"        @compileError(\"cannot rotate signed integer\");"},
{"lineNum":"  646","line":"    } else {"},
{"lineNum":"  647","line":"        if (T == u0) return 0;"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"        if (isPowerOfTwo(@typeInfo(T).Int.bits)) {"},
{"lineNum":"  650","line":"            const ar = @as(Log2Int(T), @intCast(@mod(r, @typeInfo(T).Int.bits)));"},
{"lineNum":"  651","line":"            return x << ar | x >> 1 +% ~ar;"},
{"lineNum":"  652","line":"        } else {"},
{"lineNum":"  653","line":"            const ar = @mod(r, @typeInfo(T).Int.bits);"},
{"lineNum":"  654","line":"            return shl(T, x, ar) | shr(T, x, @typeInfo(T).Int.bits - ar);"},
{"lineNum":"  655","line":"        }"},
{"lineNum":"  656","line":"    }"},
{"lineNum":"  657","line":"}"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"test \"rotl\" {"},
{"lineNum":"  660","line":"    if (builtin.zig_backend == .stage2_llvm and builtin.cpu.arch == .aarch64) {"},
{"lineNum":"  661","line":"        // https://github.com/ziglang/zig/issues/12012"},
{"lineNum":"  662","line":"        return error.SkipZigTest;"},
{"lineNum":"  663","line":"    }"},
{"lineNum":"  664","line":"    try testing.expect(rotl(u0, 0b0, @as(usize, 3)) == 0b0);"},
{"lineNum":"  665","line":"    try testing.expect(rotl(u5, 0b00001, @as(usize, 0)) == 0b00001);"},
{"lineNum":"  666","line":"    try testing.expect(rotl(u6, 0b000001, @as(usize, 7)) == 0b000010);"},
{"lineNum":"  667","line":"    try testing.expect(rotl(u8, 0b00000001, @as(usize, 0)) == 0b00000001);"},
{"lineNum":"  668","line":"    try testing.expect(rotl(u8, 0b00000001, @as(usize, 9)) == 0b00000010);"},
{"lineNum":"  669","line":"    try testing.expect(rotl(u8, 0b00000001, @as(usize, 8)) == 0b00000001);"},
{"lineNum":"  670","line":"    try testing.expect(rotl(u8, 0b00000001, @as(usize, 4)) == 0b00010000);"},
{"lineNum":"  671","line":"    try testing.expect(rotl(u8, 0b00000001, @as(isize, -1)) == 0b10000000);"},
{"lineNum":"  672","line":"    try testing.expect(rotl(@Vector(1, u32), @Vector(1, u32){1 << 31}, @as(usize, 1))[0] == 1);"},
{"lineNum":"  673","line":"    try testing.expect(rotl(@Vector(1, u32), @Vector(1, u32){1 << 31}, @as(isize, -1))[0] == @as(u32, 1) << 30);"},
{"lineNum":"  674","line":"}"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"/// Returns an unsigned int type that can hold the number of bits in T"},
{"lineNum":"  677","line":"/// - 1. Suitable for 0-based bit indices of T."},
{"lineNum":"  678","line":"pub fn Log2Int(comptime T: type) type {"},
{"lineNum":"  679","line":"    // comptime ceil log2"},
{"lineNum":"  680","line":"    comptime var count = 0;"},
{"lineNum":"  681","line":"    comptime var s = @typeInfo(T).Int.bits - 1;"},
{"lineNum":"  682","line":"    inline while (s != 0) : (s >>= 1) {"},
{"lineNum":"  683","line":"        count += 1;"},
{"lineNum":"  684","line":"    }"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    return std.meta.Int(.unsigned, count);"},
{"lineNum":"  687","line":"}"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"/// Returns an unsigned int type that can hold the number of bits in T."},
{"lineNum":"  690","line":"pub fn Log2IntCeil(comptime T: type) type {"},
{"lineNum":"  691","line":"    // comptime ceil log2"},
{"lineNum":"  692","line":"    comptime var count = 0;"},
{"lineNum":"  693","line":"    comptime var s = @typeInfo(T).Int.bits;"},
{"lineNum":"  694","line":"    inline while (s != 0) : (s >>= 1) {"},
{"lineNum":"  695","line":"        count += 1;"},
{"lineNum":"  696","line":"    }"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    return std.meta.Int(.unsigned, count);"},
{"lineNum":"  699","line":"}"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"/// Returns the smallest integer type that can hold both from and to."},
{"lineNum":"  702","line":"pub fn IntFittingRange(comptime from: comptime_int, comptime to: comptime_int) type {"},
{"lineNum":"  703","line":"    assert(from <= to);"},
{"lineNum":"  704","line":"    if (from == 0 and to == 0) {"},
{"lineNum":"  705","line":"        return u0;"},
{"lineNum":"  706","line":"    }"},
{"lineNum":"  707","line":"    const signedness: std.builtin.Signedness = if (from < 0) .signed else .unsigned;"},
{"lineNum":"  708","line":"    const largest_positive_integer = @max(if (from < 0) (-from) - 1 else from, to); // two\'s complement"},
{"lineNum":"  709","line":"    const base = log2(largest_positive_integer);"},
{"lineNum":"  710","line":"    const upper = (1 << base) - 1;"},
{"lineNum":"  711","line":"    var magnitude_bits = if (upper >= largest_positive_integer) base else base + 1;"},
{"lineNum":"  712","line":"    if (signedness == .signed) {"},
{"lineNum":"  713","line":"        magnitude_bits += 1;"},
{"lineNum":"  714","line":"    }"},
{"lineNum":"  715","line":"    return std.meta.Int(signedness, magnitude_bits);"},
{"lineNum":"  716","line":"}"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"test \"IntFittingRange\" {"},
{"lineNum":"  719","line":"    try testing.expect(IntFittingRange(0, 0) == u0);"},
{"lineNum":"  720","line":"    try testing.expect(IntFittingRange(0, 1) == u1);"},
{"lineNum":"  721","line":"    try testing.expect(IntFittingRange(0, 2) == u2);"},
{"lineNum":"  722","line":"    try testing.expect(IntFittingRange(0, 3) == u2);"},
{"lineNum":"  723","line":"    try testing.expect(IntFittingRange(0, 4) == u3);"},
{"lineNum":"  724","line":"    try testing.expect(IntFittingRange(0, 7) == u3);"},
{"lineNum":"  725","line":"    try testing.expect(IntFittingRange(0, 8) == u4);"},
{"lineNum":"  726","line":"    try testing.expect(IntFittingRange(0, 9) == u4);"},
{"lineNum":"  727","line":"    try testing.expect(IntFittingRange(0, 15) == u4);"},
{"lineNum":"  728","line":"    try testing.expect(IntFittingRange(0, 16) == u5);"},
{"lineNum":"  729","line":"    try testing.expect(IntFittingRange(0, 17) == u5);"},
{"lineNum":"  730","line":"    try testing.expect(IntFittingRange(0, 4095) == u12);"},
{"lineNum":"  731","line":"    try testing.expect(IntFittingRange(2000, 4095) == u12);"},
{"lineNum":"  732","line":"    try testing.expect(IntFittingRange(0, 4096) == u13);"},
{"lineNum":"  733","line":"    try testing.expect(IntFittingRange(2000, 4096) == u13);"},
{"lineNum":"  734","line":"    try testing.expect(IntFittingRange(0, 4097) == u13);"},
{"lineNum":"  735","line":"    try testing.expect(IntFittingRange(2000, 4097) == u13);"},
{"lineNum":"  736","line":"    try testing.expect(IntFittingRange(0, 123456789123456798123456789) == u87);"},
{"lineNum":"  737","line":"    try testing.expect(IntFittingRange(0, 123456789123456798123456789123456789123456798123456789) == u177);"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"    try testing.expect(IntFittingRange(-1, -1) == i1);"},
{"lineNum":"  740","line":"    try testing.expect(IntFittingRange(-1, 0) == i1);"},
{"lineNum":"  741","line":"    try testing.expect(IntFittingRange(-1, 1) == i2);"},
{"lineNum":"  742","line":"    try testing.expect(IntFittingRange(-2, -2) == i2);"},
{"lineNum":"  743","line":"    try testing.expect(IntFittingRange(-2, -1) == i2);"},
{"lineNum":"  744","line":"    try testing.expect(IntFittingRange(-2, 0) == i2);"},
{"lineNum":"  745","line":"    try testing.expect(IntFittingRange(-2, 1) == i2);"},
{"lineNum":"  746","line":"    try testing.expect(IntFittingRange(-2, 2) == i3);"},
{"lineNum":"  747","line":"    try testing.expect(IntFittingRange(-1, 2) == i3);"},
{"lineNum":"  748","line":"    try testing.expect(IntFittingRange(-1, 3) == i3);"},
{"lineNum":"  749","line":"    try testing.expect(IntFittingRange(-1, 4) == i4);"},
{"lineNum":"  750","line":"    try testing.expect(IntFittingRange(-1, 7) == i4);"},
{"lineNum":"  751","line":"    try testing.expect(IntFittingRange(-1, 8) == i5);"},
{"lineNum":"  752","line":"    try testing.expect(IntFittingRange(-1, 9) == i5);"},
{"lineNum":"  753","line":"    try testing.expect(IntFittingRange(-1, 15) == i5);"},
{"lineNum":"  754","line":"    try testing.expect(IntFittingRange(-1, 16) == i6);"},
{"lineNum":"  755","line":"    try testing.expect(IntFittingRange(-1, 17) == i6);"},
{"lineNum":"  756","line":"    try testing.expect(IntFittingRange(-1, 4095) == i13);"},
{"lineNum":"  757","line":"    try testing.expect(IntFittingRange(-4096, 4095) == i13);"},
{"lineNum":"  758","line":"    try testing.expect(IntFittingRange(-1, 4096) == i14);"},
{"lineNum":"  759","line":"    try testing.expect(IntFittingRange(-4097, 4095) == i14);"},
{"lineNum":"  760","line":"    try testing.expect(IntFittingRange(-1, 4097) == i14);"},
{"lineNum":"  761","line":"    try testing.expect(IntFittingRange(-1, 123456789123456798123456789) == i88);"},
{"lineNum":"  762","line":"    try testing.expect(IntFittingRange(-1, 123456789123456798123456789123456789123456798123456789) == i178);"},
{"lineNum":"  763","line":"}"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"test \"overflow functions\" {"},
{"lineNum":"  766","line":"    try testOverflow();"},
{"lineNum":"  767","line":"    try comptime testOverflow();"},
{"lineNum":"  768","line":"}"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"fn testOverflow() !void {"},
{"lineNum":"  771","line":"    try testing.expect((mul(i32, 3, 4) catch unreachable) == 12);"},
{"lineNum":"  772","line":"    try testing.expect((add(i32, 3, 4) catch unreachable) == 7);"},
{"lineNum":"  773","line":"    try testing.expect((sub(i32, 3, 4) catch unreachable) == -1);"},
{"lineNum":"  774","line":"    try testing.expect((shlExact(i32, 0b11, 4) catch unreachable) == 0b110000);"},
{"lineNum":"  775","line":"}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"/// Returns the absolute value of x, where x is a value of a signed integer type."},
{"lineNum":"  778","line":"/// Does not convert and returns a value of a signed integer type."},
{"lineNum":"  779","line":"/// Use `absCast` if you want to convert the result and get an unsigned type."},
{"lineNum":"  780","line":"pub fn absInt(x: anytype) !@TypeOf(x) {"},
{"lineNum":"  781","line":"    const T = @TypeOf(x);"},
{"lineNum":"  782","line":"    return switch (@typeInfo(T)) {"},
{"lineNum":"  783","line":"        .Int => |info| {"},
{"lineNum":"  784","line":"            comptime assert(info.signedness == .signed); // must pass a signed integer to absInt"},
{"lineNum":"  785","line":"            if (x == minInt(T)) {"},
{"lineNum":"  786","line":"                return error.Overflow;"},
{"lineNum":"  787","line":"            } else {"},
{"lineNum":"  788","line":"                @setRuntimeSafety(false);"},
{"lineNum":"  789","line":"                return if (x < 0) -x else x;"},
{"lineNum":"  790","line":"            }"},
{"lineNum":"  791","line":"        },"},
{"lineNum":"  792","line":"        .Vector => |vinfo| blk: {"},
{"lineNum":"  793","line":"            switch (@typeInfo(vinfo.child)) {"},
{"lineNum":"  794","line":"                .Int => |info| {"},
{"lineNum":"  795","line":"                    comptime assert(info.signedness == .signed); // must pass a signed integer to absInt"},
{"lineNum":"  796","line":"                    if (@reduce(.Or, x == @as(T, @splat(minInt(vinfo.child))))) {"},
{"lineNum":"  797","line":"                        return error.Overflow;"},
{"lineNum":"  798","line":"                    }"},
{"lineNum":"  799","line":"                    const zero: T = @splat(0);"},
{"lineNum":"  800","line":"                    break :blk @select(vinfo.child, x > zero, x, -x);"},
{"lineNum":"  801","line":"                },"},
{"lineNum":"  802","line":"                else => @compileError(\"Expected vector of ints, found \" ++ @typeName(T)),"},
{"lineNum":"  803","line":"            }"},
{"lineNum":"  804","line":"        },"},
{"lineNum":"  805","line":"        else => @compileError(\"Expected an int or vector, found \" ++ @typeName(T)),"},
{"lineNum":"  806","line":"    };"},
{"lineNum":"  807","line":"}"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"test \"absInt\" {"},
{"lineNum":"  810","line":"    try testAbsInt();"},
{"lineNum":"  811","line":"    try comptime testAbsInt();"},
{"lineNum":"  812","line":"}"},
{"lineNum":"  813","line":"fn testAbsInt() !void {"},
{"lineNum":"  814","line":"    try testing.expect((absInt(@as(i32, -10)) catch unreachable) == 10);"},
{"lineNum":"  815","line":"    try testing.expect((absInt(@as(i32, 10)) catch unreachable) == 10);"},
{"lineNum":"  816","line":"    try testing.expectEqual(@Vector(3, i32){ 10, 10, 0 }, (absInt(@Vector(3, i32){ -10, 10, 0 }) catch unreachable));"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"    try testing.expectError(error.Overflow, absInt(@as(i32, minInt(i32))));"},
{"lineNum":"  819","line":"    try testing.expectError(error.Overflow, absInt(@Vector(3, i32){ 10, -10, minInt(i32) }));"},
{"lineNum":"  820","line":"}"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"/// Divide numerator by denominator, rounding toward zero. Returns an"},
{"lineNum":"  823","line":"/// error on overflow or when denominator is zero."},
{"lineNum":"  824","line":"pub fn divTrunc(comptime T: type, numerator: T, denominator: T) !T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  826","line":"    if (denominator == 0) return error.DivisionByZero;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  827","line":"    if (@typeInfo(T) == .Int and @typeInfo(T).Int.signedness == .signed and numerator == minInt(T) and denominator == -1) return error.Overflow;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  828","line":"    return @divTrunc(numerator, denominator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":"}"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"test \"divTrunc\" {"},
{"lineNum":"  832","line":"    try testDivTrunc();"},
{"lineNum":"  833","line":"    try comptime testDivTrunc();"},
{"lineNum":"  834","line":"}"},
{"lineNum":"  835","line":"fn testDivTrunc() !void {"},
{"lineNum":"  836","line":"    try testing.expect((divTrunc(i32, 5, 3) catch unreachable) == 1);"},
{"lineNum":"  837","line":"    try testing.expect((divTrunc(i32, -5, 3) catch unreachable) == -1);"},
{"lineNum":"  838","line":"    try testing.expectError(error.DivisionByZero, divTrunc(i8, -5, 0));"},
{"lineNum":"  839","line":"    try testing.expectError(error.Overflow, divTrunc(i8, -128, -1));"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    try testing.expect((divTrunc(f32, 5.0, 3.0) catch unreachable) == 1.0);"},
{"lineNum":"  842","line":"    try testing.expect((divTrunc(f32, -5.0, 3.0) catch unreachable) == -1.0);"},
{"lineNum":"  843","line":"}"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"/// Divide numerator by denominator, rounding toward negative"},
{"lineNum":"  846","line":"/// infinity. Returns an error on overflow or when denominator is"},
{"lineNum":"  847","line":"/// zero."},
{"lineNum":"  848","line":"pub fn divFloor(comptime T: type, numerator: T, denominator: T) !T {"},
{"lineNum":"  849","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  850","line":"    if (denominator == 0) return error.DivisionByZero;"},
{"lineNum":"  851","line":"    if (@typeInfo(T) == .Int and @typeInfo(T).Int.signedness == .signed and numerator == minInt(T) and denominator == -1) return error.Overflow;"},
{"lineNum":"  852","line":"    return @divFloor(numerator, denominator);"},
{"lineNum":"  853","line":"}"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"test \"divFloor\" {"},
{"lineNum":"  856","line":"    try testDivFloor();"},
{"lineNum":"  857","line":"    try comptime testDivFloor();"},
{"lineNum":"  858","line":"}"},
{"lineNum":"  859","line":"fn testDivFloor() !void {"},
{"lineNum":"  860","line":"    try testing.expect((divFloor(i32, 5, 3) catch unreachable) == 1);"},
{"lineNum":"  861","line":"    try testing.expect((divFloor(i32, -5, 3) catch unreachable) == -2);"},
{"lineNum":"  862","line":"    try testing.expectError(error.DivisionByZero, divFloor(i8, -5, 0));"},
{"lineNum":"  863","line":"    try testing.expectError(error.Overflow, divFloor(i8, -128, -1));"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"    try testing.expect((divFloor(f32, 5.0, 3.0) catch unreachable) == 1.0);"},
{"lineNum":"  866","line":"    try testing.expect((divFloor(f32, -5.0, 3.0) catch unreachable) == -2.0);"},
{"lineNum":"  867","line":"}"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"/// Divide numerator by denominator, rounding toward positive"},
{"lineNum":"  870","line":"/// infinity. Returns an error on overflow or when denominator is"},
{"lineNum":"  871","line":"/// zero."},
{"lineNum":"  872","line":"pub fn divCeil(comptime T: type, numerator: T, denominator: T) !T {"},
{"lineNum":"  873","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  874","line":"    if ((comptime std.meta.trait.isNumber(T)) and denominator == 0) return error.DivisionByZero;"},
{"lineNum":"  875","line":"    const info = @typeInfo(T);"},
{"lineNum":"  876","line":"    switch (info) {"},
{"lineNum":"  877","line":"        .ComptimeFloat, .Float => return @ceil(numerator / denominator),"},
{"lineNum":"  878","line":"        .ComptimeInt, .Int => {"},
{"lineNum":"  879","line":"            if (numerator < 0 and denominator < 0) {"},
{"lineNum":"  880","line":"                if (info == .Int and numerator == minInt(T) and denominator == -1)"},
{"lineNum":"  881","line":"                    return error.Overflow;"},
{"lineNum":"  882","line":"                return @divFloor(numerator + 1, denominator) + 1;"},
{"lineNum":"  883","line":"            }"},
{"lineNum":"  884","line":"            if (numerator > 0 and denominator > 0)"},
{"lineNum":"  885","line":"                return @divFloor(numerator - 1, denominator) + 1;"},
{"lineNum":"  886","line":"            return @divTrunc(numerator, denominator);"},
{"lineNum":"  887","line":"        },"},
{"lineNum":"  888","line":"        else => @compileError(\"divCeil unsupported on \" ++ @typeName(T)),"},
{"lineNum":"  889","line":"    }"},
{"lineNum":"  890","line":"}"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"test \"divCeil\" {"},
{"lineNum":"  893","line":"    try testDivCeil();"},
{"lineNum":"  894","line":"    try comptime testDivCeil();"},
{"lineNum":"  895","line":"}"},
{"lineNum":"  896","line":"fn testDivCeil() !void {"},
{"lineNum":"  897","line":"    try testing.expectEqual(@as(i32, 2), divCeil(i32, 5, 3) catch unreachable);"},
{"lineNum":"  898","line":"    try testing.expectEqual(@as(i32, -1), divCeil(i32, -5, 3) catch unreachable);"},
{"lineNum":"  899","line":"    try testing.expectEqual(@as(i32, -1), divCeil(i32, 5, -3) catch unreachable);"},
{"lineNum":"  900","line":"    try testing.expectEqual(@as(i32, 2), divCeil(i32, -5, -3) catch unreachable);"},
{"lineNum":"  901","line":"    try testing.expectEqual(@as(i32, 0), divCeil(i32, 0, 5) catch unreachable);"},
{"lineNum":"  902","line":"    try testing.expectEqual(@as(u32, 0), divCeil(u32, 0, 5) catch unreachable);"},
{"lineNum":"  903","line":"    try testing.expectError(error.DivisionByZero, divCeil(i8, -5, 0));"},
{"lineNum":"  904","line":"    try testing.expectError(error.Overflow, divCeil(i8, -128, -1));"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"    try testing.expectEqual(@as(f32, 0.0), divCeil(f32, 0.0, 5.0) catch unreachable);"},
{"lineNum":"  907","line":"    try testing.expectEqual(@as(f32, 2.0), divCeil(f32, 5.0, 3.0) catch unreachable);"},
{"lineNum":"  908","line":"    try testing.expectEqual(@as(f32, -1.0), divCeil(f32, -5.0, 3.0) catch unreachable);"},
{"lineNum":"  909","line":"    try testing.expectEqual(@as(f32, -1.0), divCeil(f32, 5.0, -3.0) catch unreachable);"},
{"lineNum":"  910","line":"    try testing.expectEqual(@as(f32, 2.0), divCeil(f32, -5.0, -3.0) catch unreachable);"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"    try testing.expectEqual(6, divCeil(comptime_int, 23, 4) catch unreachable);"},
{"lineNum":"  913","line":"    try testing.expectEqual(-5, divCeil(comptime_int, -23, 4) catch unreachable);"},
{"lineNum":"  914","line":"    try testing.expectEqual(-5, divCeil(comptime_int, 23, -4) catch unreachable);"},
{"lineNum":"  915","line":"    try testing.expectEqual(6, divCeil(comptime_int, -23, -4) catch unreachable);"},
{"lineNum":"  916","line":"    try testing.expectError(error.DivisionByZero, divCeil(comptime_int, 23, 0));"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"    try testing.expectEqual(6.0, divCeil(comptime_float, 23.0, 4.0) catch unreachable);"},
{"lineNum":"  919","line":"    try testing.expectEqual(-5.0, divCeil(comptime_float, -23.0, 4.0) catch unreachable);"},
{"lineNum":"  920","line":"    try testing.expectEqual(-5.0, divCeil(comptime_float, 23.0, -4.0) catch unreachable);"},
{"lineNum":"  921","line":"    try testing.expectEqual(6.0, divCeil(comptime_float, -23.0, -4.0) catch unreachable);"},
{"lineNum":"  922","line":"    try testing.expectError(error.DivisionByZero, divCeil(comptime_float, 23.0, 0.0));"},
{"lineNum":"  923","line":"}"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"/// Divide numerator by denominator. Return an error if quotient is"},
{"lineNum":"  926","line":"/// not an integer, denominator is zero, or on overflow."},
{"lineNum":"  927","line":"pub fn divExact(comptime T: type, numerator: T, denominator: T) !T {"},
{"lineNum":"  928","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  929","line":"    if (denominator == 0) return error.DivisionByZero;"},
{"lineNum":"  930","line":"    if (@typeInfo(T) == .Int and @typeInfo(T).Int.signedness == .signed and numerator == minInt(T) and denominator == -1) return error.Overflow;"},
{"lineNum":"  931","line":"    const result = @divTrunc(numerator, denominator);"},
{"lineNum":"  932","line":"    if (result * denominator != numerator) return error.UnexpectedRemainder;"},
{"lineNum":"  933","line":"    return result;"},
{"lineNum":"  934","line":"}"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"test \"divExact\" {"},
{"lineNum":"  937","line":"    try testDivExact();"},
{"lineNum":"  938","line":"    try comptime testDivExact();"},
{"lineNum":"  939","line":"}"},
{"lineNum":"  940","line":"fn testDivExact() !void {"},
{"lineNum":"  941","line":"    try testing.expect((divExact(i32, 10, 5) catch unreachable) == 2);"},
{"lineNum":"  942","line":"    try testing.expect((divExact(i32, -10, 5) catch unreachable) == -2);"},
{"lineNum":"  943","line":"    try testing.expectError(error.DivisionByZero, divExact(i8, -5, 0));"},
{"lineNum":"  944","line":"    try testing.expectError(error.Overflow, divExact(i8, -128, -1));"},
{"lineNum":"  945","line":"    try testing.expectError(error.UnexpectedRemainder, divExact(i32, 5, 2));"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"    try testing.expect((divExact(f32, 10.0, 5.0) catch unreachable) == 2.0);"},
{"lineNum":"  948","line":"    try testing.expect((divExact(f32, -10.0, 5.0) catch unreachable) == -2.0);"},
{"lineNum":"  949","line":"    try testing.expectError(error.UnexpectedRemainder, divExact(f32, 5.0, 2.0));"},
{"lineNum":"  950","line":"}"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"/// Returns numerator modulo denominator, or an error if denominator is"},
{"lineNum":"  953","line":"/// zero or negative. Negative numerators never result in negative"},
{"lineNum":"  954","line":"/// return values."},
{"lineNum":"  955","line":"pub fn mod(comptime T: type, numerator: T, denominator: T) !T {"},
{"lineNum":"  956","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  957","line":"    if (denominator == 0) return error.DivisionByZero;"},
{"lineNum":"  958","line":"    if (denominator < 0) return error.NegativeDenominator;"},
{"lineNum":"  959","line":"    return @mod(numerator, denominator);"},
{"lineNum":"  960","line":"}"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"test \"mod\" {"},
{"lineNum":"  963","line":"    try testMod();"},
{"lineNum":"  964","line":"    try comptime testMod();"},
{"lineNum":"  965","line":"}"},
{"lineNum":"  966","line":"fn testMod() !void {"},
{"lineNum":"  967","line":"    try testing.expect((mod(i32, -5, 3) catch unreachable) == 1);"},
{"lineNum":"  968","line":"    try testing.expect((mod(i32, 5, 3) catch unreachable) == 2);"},
{"lineNum":"  969","line":"    try testing.expectError(error.NegativeDenominator, mod(i32, 10, -1));"},
{"lineNum":"  970","line":"    try testing.expectError(error.DivisionByZero, mod(i32, 10, 0));"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"    try testing.expect((mod(f32, -5, 3) catch unreachable) == 1);"},
{"lineNum":"  973","line":"    try testing.expect((mod(f32, 5, 3) catch unreachable) == 2);"},
{"lineNum":"  974","line":"    try testing.expectError(error.NegativeDenominator, mod(f32, 10, -1));"},
{"lineNum":"  975","line":"    try testing.expectError(error.DivisionByZero, mod(f32, 10, 0));"},
{"lineNum":"  976","line":"}"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"/// Returns the remainder when numerator is divided by denominator, or"},
{"lineNum":"  979","line":"/// an error if denominator is zero or negative. Negative numerators"},
{"lineNum":"  980","line":"/// can give negative results."},
{"lineNum":"  981","line":"pub fn rem(comptime T: type, numerator: T, denominator: T) !T {"},
{"lineNum":"  982","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  983","line":"    if (denominator == 0) return error.DivisionByZero;"},
{"lineNum":"  984","line":"    if (denominator < 0) return error.NegativeDenominator;"},
{"lineNum":"  985","line":"    return @rem(numerator, denominator);"},
{"lineNum":"  986","line":"}"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"test \"rem\" {"},
{"lineNum":"  989","line":"    try testRem();"},
{"lineNum":"  990","line":"    try comptime testRem();"},
{"lineNum":"  991","line":"}"},
{"lineNum":"  992","line":"fn testRem() !void {"},
{"lineNum":"  993","line":"    try testing.expect((rem(i32, -5, 3) catch unreachable) == -2);"},
{"lineNum":"  994","line":"    try testing.expect((rem(i32, 5, 3) catch unreachable) == 2);"},
{"lineNum":"  995","line":"    try testing.expectError(error.NegativeDenominator, rem(i32, 10, -1));"},
{"lineNum":"  996","line":"    try testing.expectError(error.DivisionByZero, rem(i32, 10, 0));"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"    try testing.expect((rem(f32, -5, 3) catch unreachable) == -2);"},
{"lineNum":"  999","line":"    try testing.expect((rem(f32, 5, 3) catch unreachable) == 2);"},
{"lineNum":" 1000","line":"    try testing.expectError(error.NegativeDenominator, rem(f32, 10, -1));"},
{"lineNum":" 1001","line":"    try testing.expectError(error.DivisionByZero, rem(f32, 10, 0));"},
{"lineNum":" 1002","line":"}"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"/// Returns the absolute value of a floating point number."},
{"lineNum":" 1005","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":" 1006","line":"/// This is the same as calling the builtin @fabs"},
{"lineNum":" 1007","line":"pub inline fn fabs(value: anytype) @TypeOf(value) {"},
{"lineNum":" 1008","line":"    return @fabs(value);"},
{"lineNum":" 1009","line":"}"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"/// Returns the absolute value of the integer parameter."},
{"lineNum":" 1012","line":"/// Converts result type to unsigned if needed and returns a value of an unsigned integer type."},
{"lineNum":" 1013","line":"/// Use `absInt` if you want to keep your integer type signed."},
{"lineNum":" 1014","line":"pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {"},
{"lineNum":" 1015","line":"    .ComptimeInt => comptime_int,"},
{"lineNum":" 1016","line":"    .Int => |int_info| std.meta.Int(.unsigned, int_info.bits),"},
{"lineNum":" 1017","line":"    else => @compileError(\"absCast only accepts integers\"),"},
{"lineNum":" 1018","line":"} {","class":"linePartCov","hits":"3","order":"659","possible_hits":"8",},
{"lineNum":" 1019","line":"    switch (@typeInfo(@TypeOf(x))) {"},
{"lineNum":" 1020","line":"        .ComptimeInt => {"},
{"lineNum":" 1021","line":"            if (x < 0) {"},
{"lineNum":" 1022","line":"                return -x;"},
{"lineNum":" 1023","line":"            } else {"},
{"lineNum":" 1024","line":"                return x;"},
{"lineNum":" 1025","line":"            }"},
{"lineNum":" 1026","line":"        },"},
{"lineNum":" 1027","line":"        .Int => |int_info| {"},
{"lineNum":" 1028","line":"            if (int_info.signedness == .unsigned) return x;","class":"linePartCov","hits":"3","order":"660","possible_hits":"5",},
{"lineNum":" 1029","line":"            const Uint = std.meta.Int(.unsigned, int_info.bits);"},
{"lineNum":" 1030","line":"            if (x < 0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1031","line":"                return ~@as(Uint, @bitCast(x +% -1));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1032","line":"            } else {"},
{"lineNum":" 1033","line":"                return @as(Uint, @intCast(x));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1034","line":"            }"},
{"lineNum":" 1035","line":"        },"},
{"lineNum":" 1036","line":"        else => unreachable,"},
{"lineNum":" 1037","line":"    }"},
{"lineNum":" 1038","line":"}"},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"test \"absCast\" {"},
{"lineNum":" 1041","line":"    try testing.expectEqual(@as(u1, 1), absCast(@as(i1, -1)));"},
{"lineNum":" 1042","line":"    try testing.expectEqual(@as(u32, 999), absCast(@as(i32, -999)));"},
{"lineNum":" 1043","line":"    try testing.expectEqual(@as(u32, 999), absCast(@as(i32, 999)));"},
{"lineNum":" 1044","line":"    try testing.expectEqual(@as(u32, -minInt(i32)), absCast(@as(i32, minInt(i32))));"},
{"lineNum":" 1045","line":"    try testing.expectEqual(999, absCast(-999));"},
{"lineNum":" 1046","line":"}"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"/// Returns the negation of the integer parameter."},
{"lineNum":" 1049","line":"/// Result is a signed integer."},
{"lineNum":" 1050","line":"pub fn negateCast(x: anytype) !std.meta.Int(.signed, @bitSizeOf(@TypeOf(x))) {"},
{"lineNum":" 1051","line":"    if (@typeInfo(@TypeOf(x)).Int.signedness == .signed) return negate(x);"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"    const int = std.meta.Int(.signed, @bitSizeOf(@TypeOf(x)));"},
{"lineNum":" 1054","line":"    if (x > -minInt(int)) return error.Overflow;"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    if (x == -minInt(int)) return minInt(int);"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"    return -@as(int, @intCast(x));"},
{"lineNum":" 1059","line":"}"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"test \"negateCast\" {"},
{"lineNum":" 1062","line":"    try testing.expect((negateCast(@as(u32, 999)) catch unreachable) == -999);"},
{"lineNum":" 1063","line":"    try testing.expect(@TypeOf(negateCast(@as(u32, 999)) catch unreachable) == i32);"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"    try testing.expect((negateCast(@as(u32, -minInt(i32))) catch unreachable) == minInt(i32));"},
{"lineNum":" 1066","line":"    try testing.expect(@TypeOf(negateCast(@as(u32, -minInt(i32))) catch unreachable) == i32);"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    try testing.expectError(error.Overflow, negateCast(@as(u32, maxInt(i32) + 10)));"},
{"lineNum":" 1069","line":"}"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"/// Cast an integer to a different integer type. If the value doesn\'t fit,"},
{"lineNum":" 1072","line":"/// return null."},
{"lineNum":" 1073","line":"pub fn cast(comptime T: type, x: anytype) ?T {","class":"linePartCov","hits":"1","order":"1440","possible_hits":"7",},
{"lineNum":" 1074","line":"    comptime assert(@typeInfo(T) == .Int); // must pass an integer"},
{"lineNum":" 1075","line":"    const is_comptime = @TypeOf(x) == comptime_int;","class":"linePartCov","hits":"1","order":"1441","possible_hits":"7",},
{"lineNum":" 1076","line":"    comptime assert(is_comptime or @typeInfo(@TypeOf(x)) == .Int); // must pass an integer"},
{"lineNum":" 1077","line":"    if ((is_comptime or maxInt(@TypeOf(x)) > maxInt(T)) and x > maxInt(T)) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1078","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1079","line":"    } else if ((is_comptime or minInt(@TypeOf(x)) < minInt(T)) and x < minInt(T)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1080","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1081","line":"    } else {"},
{"lineNum":" 1082","line":"        return @as(T, @intCast(x));","class":"linePartCov","hits":"1","order":"1442","possible_hits":"7",},
{"lineNum":" 1083","line":"    }"},
{"lineNum":" 1084","line":"}"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"test \"cast\" {"},
{"lineNum":" 1087","line":"    try testing.expect(cast(u8, 300) == null);"},
{"lineNum":" 1088","line":"    try testing.expect(cast(u8, @as(u32, 300)) == null);"},
{"lineNum":" 1089","line":"    try testing.expect(cast(i8, -200) == null);"},
{"lineNum":" 1090","line":"    try testing.expect(cast(i8, @as(i32, -200)) == null);"},
{"lineNum":" 1091","line":"    try testing.expect(cast(u8, -1) == null);"},
{"lineNum":" 1092","line":"    try testing.expect(cast(u8, @as(i8, -1)) == null);"},
{"lineNum":" 1093","line":"    try testing.expect(cast(u64, -1) == null);"},
{"lineNum":" 1094","line":"    try testing.expect(cast(u64, @as(i8, -1)) == null);"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"    try testing.expect(cast(u8, 255).? == @as(u8, 255));"},
{"lineNum":" 1097","line":"    try testing.expect(cast(u8, @as(u32, 255)).? == @as(u8, 255));"},
{"lineNum":" 1098","line":"    try testing.expect(@TypeOf(cast(u8, 255).?) == u8);"},
{"lineNum":" 1099","line":"    try testing.expect(@TypeOf(cast(u8, @as(u32, 255)).?) == u8);"},
{"lineNum":" 1100","line":"}"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"pub const AlignCastError = error{UnalignedMemory};"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"fn AlignCastResult(comptime alignment: u29, comptime Ptr: type) type {"},
{"lineNum":" 1105","line":"    var ptr_info = @typeInfo(Ptr);"},
{"lineNum":" 1106","line":"    ptr_info.Pointer.alignment = alignment;"},
{"lineNum":" 1107","line":"    return @Type(ptr_info);"},
{"lineNum":" 1108","line":"}"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"/// Align cast a pointer but return an error if it\'s the wrong alignment"},
{"lineNum":" 1111","line":"pub fn alignCast(comptime alignment: u29, ptr: anytype) AlignCastError!AlignCastResult(alignment, @TypeOf(ptr)) {"},
{"lineNum":" 1112","line":"    const addr = @intFromPtr(ptr);"},
{"lineNum":" 1113","line":"    if (addr % alignment != 0) {"},
{"lineNum":" 1114","line":"        return error.UnalignedMemory;"},
{"lineNum":" 1115","line":"    }"},
{"lineNum":" 1116","line":"    return @alignCast(ptr);"},
{"lineNum":" 1117","line":"}"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"/// Asserts `int > 0`."},
{"lineNum":" 1120","line":"pub fn isPowerOfTwo(int: anytype) bool {","class":"lineCov","hits":"3","order":"53","possible_hits":"3",},
{"lineNum":" 1121","line":"    assert(int > 0);","class":"lineCov","hits":"3","order":"54","possible_hits":"3",},
{"lineNum":" 1122","line":"    return (int & (int - 1)) == 0;","class":"lineCov","hits":"3","order":"57","possible_hits":"3",},
{"lineNum":" 1123","line":"}"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"test isPowerOfTwo {"},
{"lineNum":" 1126","line":"    try testing.expect(isPowerOfTwo(@as(u8, 1)));"},
{"lineNum":" 1127","line":"    try testing.expect(isPowerOfTwo(2));"},
{"lineNum":" 1128","line":"    try testing.expect(!isPowerOfTwo(@as(i16, 3)));"},
{"lineNum":" 1129","line":"    try testing.expect(isPowerOfTwo(4));"},
{"lineNum":" 1130","line":"    try testing.expect(!isPowerOfTwo(@as(u32, 31)));"},
{"lineNum":" 1131","line":"    try testing.expect(isPowerOfTwo(32));"},
{"lineNum":" 1132","line":"    try testing.expect(!isPowerOfTwo(@as(i64, 63)));"},
{"lineNum":" 1133","line":"    try testing.expect(isPowerOfTwo(128));"},
{"lineNum":" 1134","line":"    try testing.expect(isPowerOfTwo(@as(u128, 256)));"},
{"lineNum":" 1135","line":"}"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"/// Aligns the given integer type bit width to a width divisible by 8."},
{"lineNum":" 1138","line":"pub fn ByteAlignedInt(comptime T: type) type {"},
{"lineNum":" 1139","line":"    const info = @typeInfo(T).Int;"},
{"lineNum":" 1140","line":"    const bits = (info.bits + 7) / 8 * 8;"},
{"lineNum":" 1141","line":"    const extended_type = std.meta.Int(info.signedness, bits);"},
{"lineNum":" 1142","line":"    return extended_type;"},
{"lineNum":" 1143","line":"}"},
{"lineNum":" 1144","line":""},
{"lineNum":" 1145","line":"test \"ByteAlignedInt\" {"},
{"lineNum":" 1146","line":"    try testing.expect(ByteAlignedInt(u0) == u0);"},
{"lineNum":" 1147","line":"    try testing.expect(ByteAlignedInt(i0) == i0);"},
{"lineNum":" 1148","line":"    try testing.expect(ByteAlignedInt(u3) == u8);"},
{"lineNum":" 1149","line":"    try testing.expect(ByteAlignedInt(u8) == u8);"},
{"lineNum":" 1150","line":"    try testing.expect(ByteAlignedInt(i111) == i112);"},
{"lineNum":" 1151","line":"    try testing.expect(ByteAlignedInt(u129) == u136);"},
{"lineNum":" 1152","line":"}"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"/// Rounds the given floating point number to an integer, away from zero."},
{"lineNum":" 1155","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":" 1156","line":"/// This is the same as calling the builtin @round"},
{"lineNum":" 1157","line":"pub inline fn round(value: anytype) @TypeOf(value) {"},
{"lineNum":" 1158","line":"    return @round(value);"},
{"lineNum":" 1159","line":"}"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"/// Rounds the given floating point number to an integer, towards zero."},
{"lineNum":" 1162","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":" 1163","line":"/// This is the same as calling the builtin @trunc"},
{"lineNum":" 1164","line":"pub inline fn trunc(value: anytype) @TypeOf(value) {"},
{"lineNum":" 1165","line":"    return @trunc(value);"},
{"lineNum":" 1166","line":"}"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"/// Returns the largest integral value not greater than the given floating point number."},
{"lineNum":" 1169","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":" 1170","line":"/// This is the same as calling the builtin @floor"},
{"lineNum":" 1171","line":"pub inline fn floor(value: anytype) @TypeOf(value) {"},
{"lineNum":" 1172","line":"    return @floor(value);"},
{"lineNum":" 1173","line":"}"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"/// Returns the nearest power of two less than or equal to value, or"},
{"lineNum":" 1176","line":"/// zero if value is less than or equal to zero."},
{"lineNum":" 1177","line":"pub fn floorPowerOfTwo(comptime T: type, value: T) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1178","line":"    const uT = std.meta.Int(.unsigned, @typeInfo(T).Int.bits);"},
{"lineNum":" 1179","line":"    if (value <= 0) return 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1180","line":"    return @as(T, 1) << log2_int(uT, @as(uT, @intCast(value)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1181","line":"}"},
{"lineNum":" 1182","line":""},
{"lineNum":" 1183","line":"test \"floorPowerOfTwo\" {"},
{"lineNum":" 1184","line":"    try testFloorPowerOfTwo();"},
{"lineNum":" 1185","line":"    try comptime testFloorPowerOfTwo();"},
{"lineNum":" 1186","line":"}"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"fn testFloorPowerOfTwo() !void {"},
{"lineNum":" 1189","line":"    try testing.expect(floorPowerOfTwo(u32, 63) == 32);"},
{"lineNum":" 1190","line":"    try testing.expect(floorPowerOfTwo(u32, 64) == 64);"},
{"lineNum":" 1191","line":"    try testing.expect(floorPowerOfTwo(u32, 65) == 64);"},
{"lineNum":" 1192","line":"    try testing.expect(floorPowerOfTwo(u32, 0) == 0);"},
{"lineNum":" 1193","line":"    try testing.expect(floorPowerOfTwo(u4, 7) == 4);"},
{"lineNum":" 1194","line":"    try testing.expect(floorPowerOfTwo(u4, 8) == 8);"},
{"lineNum":" 1195","line":"    try testing.expect(floorPowerOfTwo(u4, 9) == 8);"},
{"lineNum":" 1196","line":"    try testing.expect(floorPowerOfTwo(u4, 0) == 0);"},
{"lineNum":" 1197","line":"    try testing.expect(floorPowerOfTwo(i4, 7) == 4);"},
{"lineNum":" 1198","line":"    try testing.expect(floorPowerOfTwo(i4, -8) == 0);"},
{"lineNum":" 1199","line":"    try testing.expect(floorPowerOfTwo(i4, -1) == 0);"},
{"lineNum":" 1200","line":"    try testing.expect(floorPowerOfTwo(i4, 0) == 0);"},
{"lineNum":" 1201","line":"}"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"/// Returns the smallest integral value not less than the given floating point number."},
{"lineNum":" 1204","line":"/// Uses a dedicated hardware instruction when available."},
{"lineNum":" 1205","line":"/// This is the same as calling the builtin @ceil"},
{"lineNum":" 1206","line":"pub inline fn ceil(value: anytype) @TypeOf(value) {"},
{"lineNum":" 1207","line":"    return @ceil(value);"},
{"lineNum":" 1208","line":"}"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"/// Returns the next power of two (if the value is not already a power of two)."},
{"lineNum":" 1211","line":"/// Only unsigned integers can be used. Zero is not an allowed input."},
{"lineNum":" 1212","line":"/// Result is a type with 1 more bit than the input type."},
{"lineNum":" 1213","line":"pub fn ceilPowerOfTwoPromote(comptime T: type, value: T) std.meta.Int(@typeInfo(T).Int.signedness, @typeInfo(T).Int.bits + 1) {","class":"linePartCov","hits":"2","order":"940","possible_hits":"3",},
{"lineNum":" 1214","line":"    comptime assert(@typeInfo(T) == .Int);"},
{"lineNum":" 1215","line":"    comptime assert(@typeInfo(T).Int.signedness == .unsigned);"},
{"lineNum":" 1216","line":"    assert(value != 0);","class":"linePartCov","hits":"2","order":"941","possible_hits":"3",},
{"lineNum":" 1217","line":"    const PromotedType = std.meta.Int(@typeInfo(T).Int.signedness, @typeInfo(T).Int.bits + 1);"},
{"lineNum":" 1218","line":"    const ShiftType = std.math.Log2Int(PromotedType);"},
{"lineNum":" 1219","line":"    return @as(PromotedType, 1) << @as(ShiftType, @intCast(@typeInfo(T).Int.bits - @clz(value - 1)));","class":"linePartCov","hits":"2","order":"942","possible_hits":"3",},
{"lineNum":" 1220","line":"}"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"/// Returns the next power of two (if the value is not already a power of two)."},
{"lineNum":" 1223","line":"/// Only unsigned integers can be used. Zero is not an allowed input."},
{"lineNum":" 1224","line":"/// If the value doesn\'t fit, returns an error."},
{"lineNum":" 1225","line":"pub fn ceilPowerOfTwo(comptime T: type, value: T) (error{Overflow}!T) {","class":"linePartCov","hits":"2","order":"937","possible_hits":"3",},
{"lineNum":" 1226","line":"    comptime assert(@typeInfo(T) == .Int);"},
{"lineNum":" 1227","line":"    const info = @typeInfo(T).Int;"},
{"lineNum":" 1228","line":"    comptime assert(info.signedness == .unsigned);"},
{"lineNum":" 1229","line":"    const PromotedType = std.meta.Int(info.signedness, info.bits + 1);"},
{"lineNum":" 1230","line":"    const overflowBit = @as(PromotedType, 1) << info.bits;","class":"linePartCov","hits":"2","order":"938","possible_hits":"3",},
{"lineNum":" 1231","line":"    var x = ceilPowerOfTwoPromote(T, value);","class":"linePartCov","hits":"2","order":"939","possible_hits":"3",},
{"lineNum":" 1232","line":"    if (overflowBit & x != 0) {","class":"linePartCov","hits":"2","order":"943","possible_hits":"3",},
{"lineNum":" 1233","line":"        return error.Overflow;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1234","line":"    }"},
{"lineNum":" 1235","line":"    return @as(T, @intCast(x));","class":"linePartCov","hits":"4","order":"944","possible_hits":"6",},
{"lineNum":" 1236","line":"}"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"/// Returns the next power of two (if the value is not already a power"},
{"lineNum":" 1239","line":"/// of two). Only unsigned integers can be used. Zero is not an"},
{"lineNum":" 1240","line":"/// allowed input. Asserts that the value fits."},
{"lineNum":" 1241","line":"pub fn ceilPowerOfTwoAssert(comptime T: type, value: T) T {","class":"linePartCov","hits":"1","order":"2954","possible_hits":"2",},
{"lineNum":" 1242","line":"    return ceilPowerOfTwo(T, value) catch unreachable;","class":"linePartCov","hits":"1","order":"2955","possible_hits":"2",},
{"lineNum":" 1243","line":"}"},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"test \"ceilPowerOfTwoPromote\" {"},
{"lineNum":" 1246","line":"    try testCeilPowerOfTwoPromote();"},
{"lineNum":" 1247","line":"    try comptime testCeilPowerOfTwoPromote();"},
{"lineNum":" 1248","line":"}"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"fn testCeilPowerOfTwoPromote() !void {"},
{"lineNum":" 1251","line":"    try testing.expectEqual(@as(u33, 1), ceilPowerOfTwoPromote(u32, 1));"},
{"lineNum":" 1252","line":"    try testing.expectEqual(@as(u33, 2), ceilPowerOfTwoPromote(u32, 2));"},
{"lineNum":" 1253","line":"    try testing.expectEqual(@as(u33, 64), ceilPowerOfTwoPromote(u32, 63));"},
{"lineNum":" 1254","line":"    try testing.expectEqual(@as(u33, 64), ceilPowerOfTwoPromote(u32, 64));"},
{"lineNum":" 1255","line":"    try testing.expectEqual(@as(u33, 128), ceilPowerOfTwoPromote(u32, 65));"},
{"lineNum":" 1256","line":"    try testing.expectEqual(@as(u6, 8), ceilPowerOfTwoPromote(u5, 7));"},
{"lineNum":" 1257","line":"    try testing.expectEqual(@as(u6, 8), ceilPowerOfTwoPromote(u5, 8));"},
{"lineNum":" 1258","line":"    try testing.expectEqual(@as(u6, 16), ceilPowerOfTwoPromote(u5, 9));"},
{"lineNum":" 1259","line":"    try testing.expectEqual(@as(u5, 16), ceilPowerOfTwoPromote(u4, 9));"},
{"lineNum":" 1260","line":"}"},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"test \"ceilPowerOfTwo\" {"},
{"lineNum":" 1263","line":"    try testCeilPowerOfTwo();"},
{"lineNum":" 1264","line":"    try comptime testCeilPowerOfTwo();"},
{"lineNum":" 1265","line":"}"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"fn testCeilPowerOfTwo() !void {"},
{"lineNum":" 1268","line":"    try testing.expectEqual(@as(u32, 1), try ceilPowerOfTwo(u32, 1));"},
{"lineNum":" 1269","line":"    try testing.expectEqual(@as(u32, 2), try ceilPowerOfTwo(u32, 2));"},
{"lineNum":" 1270","line":"    try testing.expectEqual(@as(u32, 64), try ceilPowerOfTwo(u32, 63));"},
{"lineNum":" 1271","line":"    try testing.expectEqual(@as(u32, 64), try ceilPowerOfTwo(u32, 64));"},
{"lineNum":" 1272","line":"    try testing.expectEqual(@as(u32, 128), try ceilPowerOfTwo(u32, 65));"},
{"lineNum":" 1273","line":"    try testing.expectEqual(@as(u5, 8), try ceilPowerOfTwo(u5, 7));"},
{"lineNum":" 1274","line":"    try testing.expectEqual(@as(u5, 8), try ceilPowerOfTwo(u5, 8));"},
{"lineNum":" 1275","line":"    try testing.expectEqual(@as(u5, 16), try ceilPowerOfTwo(u5, 9));"},
{"lineNum":" 1276","line":"    try testing.expectError(error.Overflow, ceilPowerOfTwo(u4, 9));"},
{"lineNum":" 1277","line":"}"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"/// Return the log base 2 of integer value x, rounding down to the"},
{"lineNum":" 1280","line":"/// nearest integer."},
{"lineNum":" 1281","line":"pub fn log2_int(comptime T: type, x: T) Log2Int(T) {","class":"linePartCov","hits":"2","order":"234","possible_hits":"3",},
{"lineNum":" 1282","line":"    if (@typeInfo(T) != .Int or @typeInfo(T).Int.signedness != .unsigned)"},
{"lineNum":" 1283","line":"        @compileError(\"log2_int requires an unsigned integer, found \" ++ @typeName(T));"},
{"lineNum":" 1284","line":"    assert(x != 0);","class":"linePartCov","hits":"2","order":"235","possible_hits":"3",},
{"lineNum":" 1285","line":"    return @as(Log2Int(T), @intCast(@typeInfo(T).Int.bits - 1 - @clz(x)));","class":"linePartCov","hits":"2","order":"236","possible_hits":"3",},
{"lineNum":" 1286","line":"}"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"/// Return the log base 2 of integer value x, rounding up to the"},
{"lineNum":" 1289","line":"/// nearest integer."},
{"lineNum":" 1290","line":"pub fn log2_int_ceil(comptime T: type, x: T) Log2IntCeil(T) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1291","line":"    if (@typeInfo(T) != .Int or @typeInfo(T).Int.signedness != .unsigned)"},
{"lineNum":" 1292","line":"        @compileError(\"log2_int_ceil requires an unsigned integer, found \" ++ @typeName(T));"},
{"lineNum":" 1293","line":"    assert(x != 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1294","line":"    if (x == 1) return 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1295","line":"    const log2_val: Log2IntCeil(T) = log2_int(T, x - 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1296","line":"    return log2_val + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1297","line":"}"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"test \"std.math.log2_int_ceil\" {"},
{"lineNum":" 1300","line":"    try testing.expect(log2_int_ceil(u32, 1) == 0);"},
{"lineNum":" 1301","line":"    try testing.expect(log2_int_ceil(u32, 2) == 1);"},
{"lineNum":" 1302","line":"    try testing.expect(log2_int_ceil(u32, 3) == 2);"},
{"lineNum":" 1303","line":"    try testing.expect(log2_int_ceil(u32, 4) == 2);"},
{"lineNum":" 1304","line":"    try testing.expect(log2_int_ceil(u32, 5) == 3);"},
{"lineNum":" 1305","line":"    try testing.expect(log2_int_ceil(u32, 6) == 3);"},
{"lineNum":" 1306","line":"    try testing.expect(log2_int_ceil(u32, 7) == 3);"},
{"lineNum":" 1307","line":"    try testing.expect(log2_int_ceil(u32, 8) == 3);"},
{"lineNum":" 1308","line":"    try testing.expect(log2_int_ceil(u32, 9) == 4);"},
{"lineNum":" 1309","line":"    try testing.expect(log2_int_ceil(u32, 10) == 4);"},
{"lineNum":" 1310","line":"}"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"/// Cast a value to a different type. If the value doesn\'t fit in, or"},
{"lineNum":" 1313","line":"/// can\'t be perfectly represented by, the new type, it will be"},
{"lineNum":" 1314","line":"/// converted to the closest possible representation."},
{"lineNum":" 1315","line":"pub fn lossyCast(comptime T: type, value: anytype) T {"},
{"lineNum":" 1316","line":"    switch (@typeInfo(T)) {"},
{"lineNum":" 1317","line":"        .Float => {"},
{"lineNum":" 1318","line":"            switch (@typeInfo(@TypeOf(value))) {"},
{"lineNum":" 1319","line":"                .Int => return @as(T, @floatFromInt(value)),"},
{"lineNum":" 1320","line":"                .Float => return @as(T, @floatCast(value)),"},
{"lineNum":" 1321","line":"                .ComptimeInt => return @as(T, value),"},
{"lineNum":" 1322","line":"                .ComptimeFloat => return @as(T, value),"},
{"lineNum":" 1323","line":"                else => @compileError(\"bad type\"),"},
{"lineNum":" 1324","line":"            }"},
{"lineNum":" 1325","line":"        },"},
{"lineNum":" 1326","line":"        .Int => {"},
{"lineNum":" 1327","line":"            switch (@typeInfo(@TypeOf(value))) {"},
{"lineNum":" 1328","line":"                .Int, .ComptimeInt => {"},
{"lineNum":" 1329","line":"                    if (value >= maxInt(T)) {"},
{"lineNum":" 1330","line":"                        return @as(T, maxInt(T));"},
{"lineNum":" 1331","line":"                    } else if (value <= minInt(T)) {"},
{"lineNum":" 1332","line":"                        return @as(T, minInt(T));"},
{"lineNum":" 1333","line":"                    } else {"},
{"lineNum":" 1334","line":"                        return @as(T, @intCast(value));"},
{"lineNum":" 1335","line":"                    }"},
{"lineNum":" 1336","line":"                },"},
{"lineNum":" 1337","line":"                .Float, .ComptimeFloat => {"},
{"lineNum":" 1338","line":"                    if (value >= maxInt(T)) {"},
{"lineNum":" 1339","line":"                        return @as(T, maxInt(T));"},
{"lineNum":" 1340","line":"                    } else if (value <= minInt(T)) {"},
{"lineNum":" 1341","line":"                        return @as(T, minInt(T));"},
{"lineNum":" 1342","line":"                    } else {"},
{"lineNum":" 1343","line":"                        return @as(T, @intFromFloat(value));"},
{"lineNum":" 1344","line":"                    }"},
{"lineNum":" 1345","line":"                },"},
{"lineNum":" 1346","line":"                else => @compileError(\"bad type\"),"},
{"lineNum":" 1347","line":"            }"},
{"lineNum":" 1348","line":"        },"},
{"lineNum":" 1349","line":"        else => @compileError(\"bad result type\"),"},
{"lineNum":" 1350","line":"    }"},
{"lineNum":" 1351","line":"}"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"test \"lossyCast\" {"},
{"lineNum":" 1354","line":"    try testing.expect(lossyCast(i16, 70000.0) == @as(i16, 32767));"},
{"lineNum":" 1355","line":"    try testing.expect(lossyCast(u32, @as(i16, -255)) == @as(u32, 0));"},
{"lineNum":" 1356","line":"    try testing.expect(lossyCast(i9, @as(u32, 200)) == @as(i9, 200));"},
{"lineNum":" 1357","line":"    try testing.expect(lossyCast(u32, @as(f32, maxInt(u32))) == maxInt(u32));"},
{"lineNum":" 1358","line":"}"},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":"/// Performs linear interpolation between *a* and *b* based on *t*."},
{"lineNum":" 1361","line":"/// *t* must be in range 0.0 to 1.0. Supports floats and vectors of floats."},
{"lineNum":" 1362","line":"///"},
{"lineNum":" 1363","line":"/// This does not guarantee returning *b* if *t* is 1 due to floating-point errors."},
{"lineNum":" 1364","line":"/// This is monotonic."},
{"lineNum":" 1365","line":"pub fn lerp(a: anytype, b: anytype, t: anytype) @TypeOf(a, b, t) {"},
{"lineNum":" 1366","line":"    const Type = @TypeOf(a, b, t);"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"    switch (@typeInfo(Type)) {"},
{"lineNum":" 1369","line":"        .Float, .ComptimeFloat => assert(t >= 0 and t <= 1),"},
{"lineNum":" 1370","line":"        .Vector => {"},
{"lineNum":" 1371","line":"            const lower_bound = @reduce(.And, t >= @as(Type, @splat(0)));"},
{"lineNum":" 1372","line":"            const upper_bound = @reduce(.And, t <= @as(Type, @splat(1)));"},
{"lineNum":" 1373","line":"            assert(lower_bound and upper_bound);"},
{"lineNum":" 1374","line":"        },"},
{"lineNum":" 1375","line":"        else => comptime unreachable,"},
{"lineNum":" 1376","line":"    }"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"    return @mulAdd(Type, b - a, t, a);"},
{"lineNum":" 1379","line":"}"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"test \"lerp\" {"},
{"lineNum":" 1382","line":"    try testing.expectEqual(@as(f64, 75), lerp(50, 100, 0.5));"},
{"lineNum":" 1383","line":"    try testing.expectEqual(@as(f32, 43.75), lerp(50, 25, 0.25));"},
{"lineNum":" 1384","line":"    try testing.expectEqual(@as(f64, -31.25), lerp(-50, 25, 0.25));"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":"    try testing.expectApproxEqRel(@as(f32, -7.16067345e+03), lerp(-10000.12345, -5000.12345, 0.56789), 1e-19);"},
{"lineNum":" 1387","line":"    try testing.expectApproxEqRel(@as(f64, 7.010987590521e+62), lerp(0.123456789e-64, 0.123456789e64, 0.56789), 1e-33);"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"    try testing.expectEqual(@as(f32, 0.0), lerp(@as(f32, 1.0e8), 1.0, 1.0));"},
{"lineNum":" 1390","line":"    try testing.expectEqual(@as(f64, 0.0), lerp(@as(f64, 1.0e16), 1.0, 1.0));"},
{"lineNum":" 1391","line":"    try testing.expectEqual(@as(f32, 1.0), lerp(@as(f32, 1.0e7), 1.0, 1.0));"},
{"lineNum":" 1392","line":"    try testing.expectEqual(@as(f64, 1.0), lerp(@as(f64, 1.0e15), 1.0, 1.0));"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"    {"},
{"lineNum":" 1395","line":"        const a: @Vector(3, f32) = @splat(0);"},
{"lineNum":" 1396","line":"        const b: @Vector(3, f32) = @splat(50);"},
{"lineNum":" 1397","line":"        const t: @Vector(3, f32) = @splat(0.5);"},
{"lineNum":" 1398","line":"        try testing.expectEqual("},
{"lineNum":" 1399","line":"            lerp(a, b, t),"},
{"lineNum":" 1400","line":"            @Vector(3, f32){ 25, 25, 25 },"},
{"lineNum":" 1401","line":"        );"},
{"lineNum":" 1402","line":"    }"},
{"lineNum":" 1403","line":"    {"},
{"lineNum":" 1404","line":"        const a: @Vector(3, f64) = @splat(50);"},
{"lineNum":" 1405","line":"        const b: @Vector(3, f64) = @splat(100);"},
{"lineNum":" 1406","line":"        const t: @Vector(3, f64) = @splat(0.5);"},
{"lineNum":" 1407","line":"        try testing.expectEqual("},
{"lineNum":" 1408","line":"            lerp(a, b, t),"},
{"lineNum":" 1409","line":"            @Vector(3, f64){ 75, 75, 75 },"},
{"lineNum":" 1410","line":"        );"},
{"lineNum":" 1411","line":"    }"},
{"lineNum":" 1412","line":"}"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"/// Returns the maximum value of integer type T."},
{"lineNum":" 1415","line":"pub fn maxInt(comptime T: type) comptime_int {"},
{"lineNum":" 1416","line":"    const info = @typeInfo(T);"},
{"lineNum":" 1417","line":"    const bit_count = info.Int.bits;"},
{"lineNum":" 1418","line":"    if (bit_count == 0) return 0;"},
{"lineNum":" 1419","line":"    return (1 << (bit_count - @intFromBool(info.Int.signedness == .signed))) - 1;"},
{"lineNum":" 1420","line":"}"},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"/// Returns the minimum value of integer type T."},
{"lineNum":" 1423","line":"pub fn minInt(comptime T: type) comptime_int {"},
{"lineNum":" 1424","line":"    const info = @typeInfo(T);"},
{"lineNum":" 1425","line":"    const bit_count = info.Int.bits;"},
{"lineNum":" 1426","line":"    if (info.Int.signedness == .unsigned) return 0;"},
{"lineNum":" 1427","line":"    if (bit_count == 0) return 0;"},
{"lineNum":" 1428","line":"    return -(1 << (bit_count - 1));"},
{"lineNum":" 1429","line":"}"},
{"lineNum":" 1430","line":""},
{"lineNum":" 1431","line":"test \"minInt and maxInt\" {"},
{"lineNum":" 1432","line":"    try testing.expect(maxInt(u0) == 0);"},
{"lineNum":" 1433","line":"    try testing.expect(maxInt(u1) == 1);"},
{"lineNum":" 1434","line":"    try testing.expect(maxInt(u8) == 255);"},
{"lineNum":" 1435","line":"    try testing.expect(maxInt(u16) == 65535);"},
{"lineNum":" 1436","line":"    try testing.expect(maxInt(u32) == 4294967295);"},
{"lineNum":" 1437","line":"    try testing.expect(maxInt(u64) == 18446744073709551615);"},
{"lineNum":" 1438","line":"    try testing.expect(maxInt(u128) == 340282366920938463463374607431768211455);"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"    try testing.expect(maxInt(i0) == 0);"},
{"lineNum":" 1441","line":"    try testing.expect(maxInt(i1) == 0);"},
{"lineNum":" 1442","line":"    try testing.expect(maxInt(i8) == 127);"},
{"lineNum":" 1443","line":"    try testing.expect(maxInt(i16) == 32767);"},
{"lineNum":" 1444","line":"    try testing.expect(maxInt(i32) == 2147483647);"},
{"lineNum":" 1445","line":"    try testing.expect(maxInt(i63) == 4611686018427387903);"},
{"lineNum":" 1446","line":"    try testing.expect(maxInt(i64) == 9223372036854775807);"},
{"lineNum":" 1447","line":"    try testing.expect(maxInt(i128) == 170141183460469231731687303715884105727);"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"    try testing.expect(minInt(u0) == 0);"},
{"lineNum":" 1450","line":"    try testing.expect(minInt(u1) == 0);"},
{"lineNum":" 1451","line":"    try testing.expect(minInt(u8) == 0);"},
{"lineNum":" 1452","line":"    try testing.expect(minInt(u16) == 0);"},
{"lineNum":" 1453","line":"    try testing.expect(minInt(u32) == 0);"},
{"lineNum":" 1454","line":"    try testing.expect(minInt(u63) == 0);"},
{"lineNum":" 1455","line":"    try testing.expect(minInt(u64) == 0);"},
{"lineNum":" 1456","line":"    try testing.expect(minInt(u128) == 0);"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"    try testing.expect(minInt(i0) == 0);"},
{"lineNum":" 1459","line":"    try testing.expect(minInt(i1) == -1);"},
{"lineNum":" 1460","line":"    try testing.expect(minInt(i8) == -128);"},
{"lineNum":" 1461","line":"    try testing.expect(minInt(i16) == -32768);"},
{"lineNum":" 1462","line":"    try testing.expect(minInt(i32) == -2147483648);"},
{"lineNum":" 1463","line":"    try testing.expect(minInt(i63) == -4611686018427387904);"},
{"lineNum":" 1464","line":"    try testing.expect(minInt(i64) == -9223372036854775808);"},
{"lineNum":" 1465","line":"    try testing.expect(minInt(i128) == -170141183460469231731687303715884105728);"},
{"lineNum":" 1466","line":"}"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"test \"max value type\" {"},
{"lineNum":" 1469","line":"    const x: u32 = maxInt(i32);"},
{"lineNum":" 1470","line":"    try testing.expect(x == 2147483647);"},
{"lineNum":" 1471","line":"}"},
{"lineNum":" 1472","line":""},
{"lineNum":" 1473","line":"/// Multiply a and b. Return type is wide enough to guarantee no"},
{"lineNum":" 1474","line":"/// overflow."},
{"lineNum":" 1475","line":"pub fn mulWide(comptime T: type, a: T, b: T) std.meta.Int("},
{"lineNum":" 1476","line":"    @typeInfo(T).Int.signedness,"},
{"lineNum":" 1477","line":"    @typeInfo(T).Int.bits * 2,"},
{"lineNum":" 1478","line":") {"},
{"lineNum":" 1479","line":"    const ResultInt = std.meta.Int("},
{"lineNum":" 1480","line":"        @typeInfo(T).Int.signedness,"},
{"lineNum":" 1481","line":"        @typeInfo(T).Int.bits * 2,"},
{"lineNum":" 1482","line":"    );"},
{"lineNum":" 1483","line":"    return @as(ResultInt, a) * @as(ResultInt, b);"},
{"lineNum":" 1484","line":"}"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"test \"mulWide\" {"},
{"lineNum":" 1487","line":"    try testing.expect(mulWide(u8, 5, 5) == 25);"},
{"lineNum":" 1488","line":"    try testing.expect(mulWide(i8, 5, -5) == -25);"},
{"lineNum":" 1489","line":"    try testing.expect(mulWide(u8, 100, 100) == 10000);"},
{"lineNum":" 1490","line":"}"},
{"lineNum":" 1491","line":""},
{"lineNum":" 1492","line":"/// See also `CompareOperator`."},
{"lineNum":" 1493","line":"pub const Order = enum {"},
{"lineNum":" 1494","line":"    /// Greater than (`>`)"},
{"lineNum":" 1495","line":"    gt,"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"    /// Less than (`<`)"},
{"lineNum":" 1498","line":"    lt,"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"    /// Equal (`==`)"},
{"lineNum":" 1501","line":"    eq,"},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"    pub fn invert(self: Order) Order {"},
{"lineNum":" 1504","line":"        return switch (self) {"},
{"lineNum":" 1505","line":"            .lt => .gt,"},
{"lineNum":" 1506","line":"            .eq => .eq,"},
{"lineNum":" 1507","line":"            .gt => .lt,"},
{"lineNum":" 1508","line":"        };"},
{"lineNum":" 1509","line":"    }"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"    pub fn compare(self: Order, op: CompareOperator) bool {"},
{"lineNum":" 1512","line":"        return switch (self) {"},
{"lineNum":" 1513","line":"            .lt => switch (op) {"},
{"lineNum":" 1514","line":"                .lt => true,"},
{"lineNum":" 1515","line":"                .lte => true,"},
{"lineNum":" 1516","line":"                .eq => false,"},
{"lineNum":" 1517","line":"                .gte => false,"},
{"lineNum":" 1518","line":"                .gt => false,"},
{"lineNum":" 1519","line":"                .neq => true,"},
{"lineNum":" 1520","line":"            },"},
{"lineNum":" 1521","line":"            .eq => switch (op) {"},
{"lineNum":" 1522","line":"                .lt => false,"},
{"lineNum":" 1523","line":"                .lte => true,"},
{"lineNum":" 1524","line":"                .eq => true,"},
{"lineNum":" 1525","line":"                .gte => true,"},
{"lineNum":" 1526","line":"                .gt => false,"},
{"lineNum":" 1527","line":"                .neq => false,"},
{"lineNum":" 1528","line":"            },"},
{"lineNum":" 1529","line":"            .gt => switch (op) {"},
{"lineNum":" 1530","line":"                .lt => false,"},
{"lineNum":" 1531","line":"                .lte => false,"},
{"lineNum":" 1532","line":"                .eq => false,"},
{"lineNum":" 1533","line":"                .gte => true,"},
{"lineNum":" 1534","line":"                .gt => true,"},
{"lineNum":" 1535","line":"                .neq => true,"},
{"lineNum":" 1536","line":"            },"},
{"lineNum":" 1537","line":"        };"},
{"lineNum":" 1538","line":"    }"},
{"lineNum":" 1539","line":"};"},
{"lineNum":" 1540","line":""},
{"lineNum":" 1541","line":"/// Given two numbers, this function returns the order they are with respect to each other."},
{"lineNum":" 1542","line":"pub fn order(a: anytype, b: anytype) Order {","class":"lineCov","hits":"1","order":"541","possible_hits":"1",},
{"lineNum":" 1543","line":"    if (a == b) {","class":"lineCov","hits":"1","order":"542","possible_hits":"1",},
{"lineNum":" 1544","line":"        return .eq;","class":"lineCov","hits":"1","order":"543","possible_hits":"1",},
{"lineNum":" 1545","line":"    } else if (a < b) {","class":"lineCov","hits":"1","order":"546","possible_hits":"1",},
{"lineNum":" 1546","line":"        return .lt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1547","line":"    } else if (a > b) {","class":"lineCov","hits":"1","order":"547","possible_hits":"1",},
{"lineNum":" 1548","line":"        return .gt;","class":"lineCov","hits":"1","order":"548","possible_hits":"1",},
{"lineNum":" 1549","line":"    } else {"},
{"lineNum":" 1550","line":"        unreachable;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1551","line":"    }"},
{"lineNum":" 1552","line":"}"},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"/// See also `Order`."},
{"lineNum":" 1555","line":"pub const CompareOperator = enum {"},
{"lineNum":" 1556","line":"    /// Less than (`<`)"},
{"lineNum":" 1557","line":"    lt,"},
{"lineNum":" 1558","line":"    /// Less than or equal (`<=`)"},
{"lineNum":" 1559","line":"    lte,"},
{"lineNum":" 1560","line":"    /// Equal (`==`)"},
{"lineNum":" 1561","line":"    eq,"},
{"lineNum":" 1562","line":"    /// Greater than or equal (`>=`)"},
{"lineNum":" 1563","line":"    gte,"},
{"lineNum":" 1564","line":"    /// Greater than (`>`)"},
{"lineNum":" 1565","line":"    gt,"},
{"lineNum":" 1566","line":"    /// Not equal (`!=`)"},
{"lineNum":" 1567","line":"    neq,"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"    /// Reverse the direction of the comparison."},
{"lineNum":" 1570","line":"    /// Use when swapping the left and right hand operands."},
{"lineNum":" 1571","line":"    pub fn reverse(op: CompareOperator) CompareOperator {"},
{"lineNum":" 1572","line":"        return switch (op) {"},
{"lineNum":" 1573","line":"            .lt => .gt,"},
{"lineNum":" 1574","line":"            .lte => .gte,"},
{"lineNum":" 1575","line":"            .gt => .lt,"},
{"lineNum":" 1576","line":"            .gte => .lte,"},
{"lineNum":" 1577","line":"            .eq => .eq,"},
{"lineNum":" 1578","line":"            .neq => .neq,"},
{"lineNum":" 1579","line":"        };"},
{"lineNum":" 1580","line":"    }"},
{"lineNum":" 1581","line":"};"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"/// This function does the same thing as comparison operators, however the"},
{"lineNum":" 1584","line":"/// operator is a runtime-known enum value. Works on any operands that"},
{"lineNum":" 1585","line":"/// support comparison operators."},
{"lineNum":" 1586","line":"pub fn compare(a: anytype, op: CompareOperator, b: anytype) bool {"},
{"lineNum":" 1587","line":"    return switch (op) {"},
{"lineNum":" 1588","line":"        .lt => a < b,"},
{"lineNum":" 1589","line":"        .lte => a <= b,"},
{"lineNum":" 1590","line":"        .eq => a == b,"},
{"lineNum":" 1591","line":"        .neq => a != b,"},
{"lineNum":" 1592","line":"        .gt => a > b,"},
{"lineNum":" 1593","line":"        .gte => a >= b,"},
{"lineNum":" 1594","line":"    };"},
{"lineNum":" 1595","line":"}"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"test \"compare between signed and unsigned\" {"},
{"lineNum":" 1598","line":"    try testing.expect(compare(@as(i8, -1), .lt, @as(u8, 255)));"},
{"lineNum":" 1599","line":"    try testing.expect(compare(@as(i8, 2), .gt, @as(u8, 1)));"},
{"lineNum":" 1600","line":"    try testing.expect(!compare(@as(i8, -1), .gte, @as(u8, 255)));"},
{"lineNum":" 1601","line":"    try testing.expect(compare(@as(u8, 255), .gt, @as(i8, -1)));"},
{"lineNum":" 1602","line":"    try testing.expect(!compare(@as(u8, 255), .lte, @as(i8, -1)));"},
{"lineNum":" 1603","line":"    try testing.expect(compare(@as(i8, -1), .lt, @as(u9, 255)));"},
{"lineNum":" 1604","line":"    try testing.expect(!compare(@as(i8, -1), .gte, @as(u9, 255)));"},
{"lineNum":" 1605","line":"    try testing.expect(compare(@as(u9, 255), .gt, @as(i8, -1)));"},
{"lineNum":" 1606","line":"    try testing.expect(!compare(@as(u9, 255), .lte, @as(i8, -1)));"},
{"lineNum":" 1607","line":"    try testing.expect(compare(@as(i9, -1), .lt, @as(u8, 255)));"},
{"lineNum":" 1608","line":"    try testing.expect(!compare(@as(i9, -1), .gte, @as(u8, 255)));"},
{"lineNum":" 1609","line":"    try testing.expect(compare(@as(u8, 255), .gt, @as(i9, -1)));"},
{"lineNum":" 1610","line":"    try testing.expect(!compare(@as(u8, 255), .lte, @as(i9, -1)));"},
{"lineNum":" 1611","line":"    try testing.expect(compare(@as(u8, 1), .lt, @as(u8, 2)));"},
{"lineNum":" 1612","line":"    try testing.expect(@as(u8, @bitCast(@as(i8, -1))) == @as(u8, 255));"},
{"lineNum":" 1613","line":"    try testing.expect(!compare(@as(u8, 255), .eq, @as(i8, -1)));"},
{"lineNum":" 1614","line":"    try testing.expect(compare(@as(u8, 1), .eq, @as(u8, 1)));"},
{"lineNum":" 1615","line":"}"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"test \"order\" {"},
{"lineNum":" 1618","line":"    try testing.expect(order(0, 0) == .eq);"},
{"lineNum":" 1619","line":"    try testing.expect(order(1, 0) == .gt);"},
{"lineNum":" 1620","line":"    try testing.expect(order(-1, 0) == .lt);"},
{"lineNum":" 1621","line":"}"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"test \"order.invert\" {"},
{"lineNum":" 1624","line":"    try testing.expect(Order.invert(order(0, 0)) == .eq);"},
{"lineNum":" 1625","line":"    try testing.expect(Order.invert(order(1, 0)) == .lt);"},
{"lineNum":" 1626","line":"    try testing.expect(Order.invert(order(-1, 0)) == .gt);"},
{"lineNum":" 1627","line":"}"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"test \"order.compare\" {"},
{"lineNum":" 1630","line":"    try testing.expect(order(-1, 0).compare(.lt));"},
{"lineNum":" 1631","line":"    try testing.expect(order(-1, 0).compare(.lte));"},
{"lineNum":" 1632","line":"    try testing.expect(order(0, 0).compare(.lte));"},
{"lineNum":" 1633","line":"    try testing.expect(order(0, 0).compare(.eq));"},
{"lineNum":" 1634","line":"    try testing.expect(order(0, 0).compare(.gte));"},
{"lineNum":" 1635","line":"    try testing.expect(order(1, 0).compare(.gte));"},
{"lineNum":" 1636","line":"    try testing.expect(order(1, 0).compare(.gt));"},
{"lineNum":" 1637","line":"    try testing.expect(order(1, 0).compare(.neq));"},
{"lineNum":" 1638","line":"}"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"test \"compare.reverse\" {"},
{"lineNum":" 1641","line":"    inline for (@typeInfo(CompareOperator).Enum.fields) |op_field| {"},
{"lineNum":" 1642","line":"        const op = @as(CompareOperator, @enumFromInt(op_field.value));"},
{"lineNum":" 1643","line":"        try testing.expect(compare(2, op, 3) == compare(3, op.reverse(), 2));"},
{"lineNum":" 1644","line":"        try testing.expect(compare(3, op, 3) == compare(3, op.reverse(), 3));"},
{"lineNum":" 1645","line":"        try testing.expect(compare(4, op, 3) == compare(3, op.reverse(), 4));"},
{"lineNum":" 1646","line":"    }"},
{"lineNum":" 1647","line":"}"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"/// Returns a mask of all ones if value is true,"},
{"lineNum":" 1650","line":"/// and a mask of all zeroes if value is false."},
{"lineNum":" 1651","line":"/// Compiles to one instruction for register sized integers."},
{"lineNum":" 1652","line":"pub inline fn boolMask(comptime MaskInt: type, value: bool) MaskInt {"},
{"lineNum":" 1653","line":"    if (@typeInfo(MaskInt) != .Int)"},
{"lineNum":" 1654","line":"        @compileError(\"boolMask requires an integer mask type.\");"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"    if (MaskInt == u0 or MaskInt == i0)"},
{"lineNum":" 1657","line":"        @compileError(\"boolMask cannot convert to u0 or i0, they are too small.\");"},
{"lineNum":" 1658","line":""},
{"lineNum":" 1659","line":"    // The u1 and i1 cases tend to overflow,"},
{"lineNum":" 1660","line":"    // so we special case them here."},
{"lineNum":" 1661","line":"    if (MaskInt == u1) return @intFromBool(value);"},
{"lineNum":" 1662","line":"    if (MaskInt == i1) {"},
{"lineNum":" 1663","line":"        // The @as here is a workaround for #7950"},
{"lineNum":" 1664","line":"        return @as(i1, @bitCast(@as(u1, @intFromBool(value))));"},
{"lineNum":" 1665","line":"    }"},
{"lineNum":" 1666","line":""},
{"lineNum":" 1667","line":"    return -%@as(MaskInt, @intCast(@intFromBool(value)));"},
{"lineNum":" 1668","line":"}"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"test \"boolMask\" {"},
{"lineNum":" 1671","line":"    const runTest = struct {"},
{"lineNum":" 1672","line":"        fn runTest() !void {"},
{"lineNum":" 1673","line":"            try testing.expectEqual(@as(u1, 0), boolMask(u1, false));"},
{"lineNum":" 1674","line":"            try testing.expectEqual(@as(u1, 1), boolMask(u1, true));"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"            try testing.expectEqual(@as(i1, 0), boolMask(i1, false));"},
{"lineNum":" 1677","line":"            try testing.expectEqual(@as(i1, -1), boolMask(i1, true));"},
{"lineNum":" 1678","line":""},
{"lineNum":" 1679","line":"            try testing.expectEqual(@as(u13, 0), boolMask(u13, false));"},
{"lineNum":" 1680","line":"            try testing.expectEqual(@as(u13, 0x1FFF), boolMask(u13, true));"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"            try testing.expectEqual(@as(i13, 0), boolMask(i13, false));"},
{"lineNum":" 1683","line":"            try testing.expectEqual(@as(i13, -1), boolMask(i13, true));"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"            try testing.expectEqual(@as(u32, 0), boolMask(u32, false));"},
{"lineNum":" 1686","line":"            try testing.expectEqual(@as(u32, 0xFFFF_FFFF), boolMask(u32, true));"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"            try testing.expectEqual(@as(i32, 0), boolMask(i32, false));"},
{"lineNum":" 1689","line":"            try testing.expectEqual(@as(i32, -1), boolMask(i32, true));"},
{"lineNum":" 1690","line":"        }"},
{"lineNum":" 1691","line":"    }.runTest;"},
{"lineNum":" 1692","line":"    try runTest();"},
{"lineNum":" 1693","line":"    try comptime runTest();"},
{"lineNum":" 1694","line":"}"},
{"lineNum":" 1695","line":""},
{"lineNum":" 1696","line":"/// Return the mod of `num` with the smallest integer type"},
{"lineNum":" 1697","line":"pub fn comptimeMod(num: anytype, comptime denom: comptime_int) IntFittingRange(0, denom - 1) {"},
{"lineNum":" 1698","line":"    return @as(IntFittingRange(0, denom - 1), @intCast(@mod(num, denom)));"},
{"lineNum":" 1699","line":"}"},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"pub const F80 = struct {"},
{"lineNum":" 1702","line":"    fraction: u64,"},
{"lineNum":" 1703","line":"    exp: u16,"},
{"lineNum":" 1704","line":"};"},
{"lineNum":" 1705","line":""},
{"lineNum":" 1706","line":"pub fn make_f80(repr: F80) f80 {"},
{"lineNum":" 1707","line":"    const int = (@as(u80, repr.exp) << 64) | repr.fraction;"},
{"lineNum":" 1708","line":"    return @as(f80, @bitCast(int));"},
{"lineNum":" 1709","line":"}"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"pub fn break_f80(x: f80) F80 {"},
{"lineNum":" 1712","line":"    const int = @as(u80, @bitCast(x));"},
{"lineNum":" 1713","line":"    return .{"},
{"lineNum":" 1714","line":"        .fraction = @as(u64, @truncate(int)),"},
{"lineNum":" 1715","line":"        .exp = @as(u16, @truncate(int >> 64)),"},
{"lineNum":" 1716","line":"    };"},
{"lineNum":" 1717","line":"}"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"/// Returns -1, 0, or 1."},
{"lineNum":" 1720","line":"/// Supports integer and float types and vectors of integer and float types."},
{"lineNum":" 1721","line":"/// Unsigned integer types will always return 0 or 1."},
{"lineNum":" 1722","line":"/// Branchless."},
{"lineNum":" 1723","line":"pub inline fn sign(i: anytype) @TypeOf(i) {"},
{"lineNum":" 1724","line":"    const T = @TypeOf(i);"},
{"lineNum":" 1725","line":"    return switch (@typeInfo(T)) {"},
{"lineNum":" 1726","line":"        .Int, .ComptimeInt => @as(T, @intFromBool(i > 0)) - @as(T, @intFromBool(i < 0)),"},
{"lineNum":" 1727","line":"        .Float, .ComptimeFloat => @as(T, @floatFromInt(@intFromBool(i > 0))) - @as(T, @floatFromInt(@intFromBool(i < 0))),"},
{"lineNum":" 1728","line":"        .Vector => |vinfo| blk: {"},
{"lineNum":" 1729","line":"            switch (@typeInfo(vinfo.child)) {"},
{"lineNum":" 1730","line":"                .Int, .Float => {"},
{"lineNum":" 1731","line":"                    const zero: T = @splat(0);"},
{"lineNum":" 1732","line":"                    const one: T = @splat(1);"},
{"lineNum":" 1733","line":"                    break :blk @select(vinfo.child, i > zero, one, zero) - @select(vinfo.child, i < zero, one, zero);"},
{"lineNum":" 1734","line":"                },"},
{"lineNum":" 1735","line":"                else => @compileError(\"Expected vector of ints or floats, found \" ++ @typeName(T)),"},
{"lineNum":" 1736","line":"            }"},
{"lineNum":" 1737","line":"        },"},
{"lineNum":" 1738","line":"        else => @compileError(\"Expected an int, float or vector of one, found \" ++ @typeName(T)),"},
{"lineNum":" 1739","line":"    };"},
{"lineNum":" 1740","line":"}"},
{"lineNum":" 1741","line":""},
{"lineNum":" 1742","line":"fn testSign() !void {"},
{"lineNum":" 1743","line":"    // each of the following blocks checks the inputs"},
{"lineNum":" 1744","line":"    // 2, -2, 0, { 2, -2, 0 } provide expected output"},
{"lineNum":" 1745","line":"    // 1, -1, 0, { 1, -1, 0 } for the given T"},
{"lineNum":" 1746","line":"    // (negative values omitted for unsigned types)"},
{"lineNum":" 1747","line":"    {"},
{"lineNum":" 1748","line":"        const T = i8;"},
{"lineNum":" 1749","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1750","line":"        try std.testing.expectEqual(@as(T, -1), sign(@as(T, -2)));"},
{"lineNum":" 1751","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1752","line":"        try std.testing.expectEqual(@Vector(3, T){ 1, -1, 0 }, sign(@Vector(3, T){ 2, -2, 0 }));"},
{"lineNum":" 1753","line":"    }"},
{"lineNum":" 1754","line":"    {"},
{"lineNum":" 1755","line":"        const T = i32;"},
{"lineNum":" 1756","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1757","line":"        try std.testing.expectEqual(@as(T, -1), sign(@as(T, -2)));"},
{"lineNum":" 1758","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1759","line":"        try std.testing.expectEqual(@Vector(3, T){ 1, -1, 0 }, sign(@Vector(3, T){ 2, -2, 0 }));"},
{"lineNum":" 1760","line":"    }"},
{"lineNum":" 1761","line":"    {"},
{"lineNum":" 1762","line":"        const T = i64;"},
{"lineNum":" 1763","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1764","line":"        try std.testing.expectEqual(@as(T, -1), sign(@as(T, -2)));"},
{"lineNum":" 1765","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1766","line":"        try std.testing.expectEqual(@Vector(3, T){ 1, -1, 0 }, sign(@Vector(3, T){ 2, -2, 0 }));"},
{"lineNum":" 1767","line":"    }"},
{"lineNum":" 1768","line":"    {"},
{"lineNum":" 1769","line":"        const T = u8;"},
{"lineNum":" 1770","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1771","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1772","line":"        try std.testing.expectEqual(@Vector(2, T){ 1, 0 }, sign(@Vector(2, T){ 2, 0 }));"},
{"lineNum":" 1773","line":"    }"},
{"lineNum":" 1774","line":"    {"},
{"lineNum":" 1775","line":"        const T = u32;"},
{"lineNum":" 1776","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1777","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1778","line":"        try std.testing.expectEqual(@Vector(2, T){ 1, 0 }, sign(@Vector(2, T){ 2, 0 }));"},
{"lineNum":" 1779","line":"    }"},
{"lineNum":" 1780","line":"    {"},
{"lineNum":" 1781","line":"        const T = u64;"},
{"lineNum":" 1782","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1783","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1784","line":"        try std.testing.expectEqual(@Vector(2, T){ 1, 0 }, sign(@Vector(2, T){ 2, 0 }));"},
{"lineNum":" 1785","line":"    }"},
{"lineNum":" 1786","line":"    {"},
{"lineNum":" 1787","line":"        const T = f16;"},
{"lineNum":" 1788","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1789","line":"        try std.testing.expectEqual(@as(T, -1), sign(@as(T, -2)));"},
{"lineNum":" 1790","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1791","line":"        try std.testing.expectEqual(@Vector(3, T){ 1, -1, 0 }, sign(@Vector(3, T){ 2, -2, 0 }));"},
{"lineNum":" 1792","line":"    }"},
{"lineNum":" 1793","line":"    {"},
{"lineNum":" 1794","line":"        const T = f32;"},
{"lineNum":" 1795","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1796","line":"        try std.testing.expectEqual(@as(T, -1), sign(@as(T, -2)));"},
{"lineNum":" 1797","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1798","line":"        try std.testing.expectEqual(@Vector(3, T){ 1, -1, 0 }, sign(@Vector(3, T){ 2, -2, 0 }));"},
{"lineNum":" 1799","line":"    }"},
{"lineNum":" 1800","line":"    {"},
{"lineNum":" 1801","line":"        const T = f64;"},
{"lineNum":" 1802","line":"        try std.testing.expectEqual(@as(T, 1), sign(@as(T, 2)));"},
{"lineNum":" 1803","line":"        try std.testing.expectEqual(@as(T, -1), sign(@as(T, -2)));"},
{"lineNum":" 1804","line":"        try std.testing.expectEqual(@as(T, 0), sign(@as(T, 0)));"},
{"lineNum":" 1805","line":"        try std.testing.expectEqual(@Vector(3, T){ 1, -1, 0 }, sign(@Vector(3, T){ 2, -2, 0 }));"},
{"lineNum":" 1806","line":"    }"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"    // comptime_int"},
{"lineNum":" 1809","line":"    try std.testing.expectEqual(-1, sign(-10));"},
{"lineNum":" 1810","line":"    try std.testing.expectEqual(1, sign(10));"},
{"lineNum":" 1811","line":"    try std.testing.expectEqual(0, sign(0));"},
{"lineNum":" 1812","line":"    // comptime_float"},
{"lineNum":" 1813","line":"    try std.testing.expectEqual(-1.0, sign(-10.0));"},
{"lineNum":" 1814","line":"    try std.testing.expectEqual(1.0, sign(10.0));"},
{"lineNum":" 1815","line":"    try std.testing.expectEqual(0.0, sign(0.0));"},
{"lineNum":" 1816","line":"}"},
{"lineNum":" 1817","line":""},
{"lineNum":" 1818","line":"test \"sign\" {"},
{"lineNum":" 1819","line":"    if (builtin.zig_backend == .stage2_llvm) {"},
{"lineNum":" 1820","line":"        // https://github.com/ziglang/zig/issues/12012"},
{"lineNum":" 1821","line":"        return error.SkipZigTest;"},
{"lineNum":" 1822","line":"    }"},
{"lineNum":" 1823","line":"    try testSign();"},
{"lineNum":" 1824","line":"    try comptime testSign();"},
{"lineNum":" 1825","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 73, "covered" : 39,};
var merged_data = [];
