var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const os = std.os;"},
{"lineNum":"    6","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"    7","line":"const assert = std.debug.assert;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"pub const vtable = Allocator.VTable{"},
{"lineNum":"   10","line":"    .alloc = alloc,"},
{"lineNum":"   11","line":"    .resize = resize,"},
{"lineNum":"   12","line":"    .free = free,"},
{"lineNum":"   13","line":"};"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"fn alloc(_: *anyopaque, n: usize, log2_align: u8, ra: usize) ?[*]u8 {","class":"lineCov","hits":"1","order":"752","possible_hits":"1",},
{"lineNum":"   16","line":"    _ = ra;"},
{"lineNum":"   17","line":"    _ = log2_align;"},
{"lineNum":"   18","line":"    assert(n > 0);","class":"lineCov","hits":"1","order":"753","possible_hits":"1",},
{"lineNum":"   19","line":"    if (n > maxInt(usize) - (mem.page_size - 1)) return null;","class":"linePartCov","hits":"1","order":"754","possible_hits":"2",},
{"lineNum":"   20","line":"    const aligned_len = mem.alignForward(usize, n, mem.page_size);","class":"lineCov","hits":"1","order":"755","possible_hits":"1",},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"   23","line":"        const w = os.windows;"},
{"lineNum":"   24","line":"        const addr = w.VirtualAlloc("},
{"lineNum":"   25","line":"            null,"},
{"lineNum":"   26","line":"            aligned_len,"},
{"lineNum":"   27","line":"            w.MEM_COMMIT | w.MEM_RESERVE,"},
{"lineNum":"   28","line":"            w.PAGE_READWRITE,"},
{"lineNum":"   29","line":"        ) catch return null;"},
{"lineNum":"   30","line":"        return @ptrCast(addr);"},
{"lineNum":"   31","line":"    }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    const hint = @atomicLoad(@TypeOf(std.heap.next_mmap_addr_hint), &std.heap.next_mmap_addr_hint, .Unordered);","class":"lineCov","hits":"1","order":"756","possible_hits":"1",},
{"lineNum":"   34","line":"    const slice = os.mmap(","class":"lineCov","hits":"2","order":"757","possible_hits":"2",},
{"lineNum":"   35","line":"        hint,"},
{"lineNum":"   36","line":"        aligned_len,"},
{"lineNum":"   37","line":"        os.PROT.READ | os.PROT.WRITE,"},
{"lineNum":"   38","line":"        os.MAP.PRIVATE | os.MAP.ANONYMOUS,"},
{"lineNum":"   39","line":"        -1,"},
{"lineNum":"   40","line":"        0,"},
{"lineNum":"   41","line":"    ) catch return null;","class":"linePartCov","hits":"1","order":"768","possible_hits":"2",},
{"lineNum":"   42","line":"    assert(mem.isAligned(@intFromPtr(slice.ptr), mem.page_size));","class":"lineCov","hits":"1","order":"769","possible_hits":"1",},
{"lineNum":"   43","line":"    const new_hint: [*]align(mem.page_size) u8 = @alignCast(slice.ptr + aligned_len);","class":"lineCov","hits":"3","order":"774","possible_hits":"3",},
{"lineNum":"   44","line":"    _ = @cmpxchgStrong(@TypeOf(std.heap.next_mmap_addr_hint), &std.heap.next_mmap_addr_hint, hint, new_hint, .Monotonic, .Monotonic);","class":"lineCov","hits":"1","order":"775","possible_hits":"1",},
{"lineNum":"   45","line":"    return slice.ptr;","class":"lineCov","hits":"1","order":"776","possible_hits":"1",},
{"lineNum":"   46","line":"}"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"fn resize("},
{"lineNum":"   49","line":"    _: *anyopaque,"},
{"lineNum":"   50","line":"    buf_unaligned: []u8,"},
{"lineNum":"   51","line":"    log2_buf_align: u8,"},
{"lineNum":"   52","line":"    new_size: usize,"},
{"lineNum":"   53","line":"    return_address: usize,"},
{"lineNum":"   54","line":") bool {","class":"lineCov","hits":"1","order":"804","possible_hits":"1",},
{"lineNum":"   55","line":"    _ = log2_buf_align;"},
{"lineNum":"   56","line":"    _ = return_address;"},
{"lineNum":"   57","line":"    const new_size_aligned = mem.alignForward(usize, new_size, mem.page_size);","class":"lineCov","hits":"1","order":"805","possible_hits":"1",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"   60","line":"        const w = os.windows;"},
{"lineNum":"   61","line":"        if (new_size <= buf_unaligned.len) {"},
{"lineNum":"   62","line":"            const base_addr = @intFromPtr(buf_unaligned.ptr);"},
{"lineNum":"   63","line":"            const old_addr_end = base_addr + buf_unaligned.len;"},
{"lineNum":"   64","line":"            const new_addr_end = mem.alignForward(usize, base_addr + new_size, mem.page_size);"},
{"lineNum":"   65","line":"            if (old_addr_end > new_addr_end) {"},
{"lineNum":"   66","line":"                // For shrinking that is not releasing, we will only"},
{"lineNum":"   67","line":"                // decommit the pages not needed anymore."},
{"lineNum":"   68","line":"                w.VirtualFree("},
{"lineNum":"   69","line":"                    @as(*anyopaque, @ptrFromInt(new_addr_end)),"},
{"lineNum":"   70","line":"                    old_addr_end - new_addr_end,"},
{"lineNum":"   71","line":"                    w.MEM_DECOMMIT,"},
{"lineNum":"   72","line":"                );"},
{"lineNum":"   73","line":"            }"},
{"lineNum":"   74","line":"            return true;"},
{"lineNum":"   75","line":"        }"},
{"lineNum":"   76","line":"        const old_size_aligned = mem.alignForward(usize, buf_unaligned.len, mem.page_size);"},
{"lineNum":"   77","line":"        if (new_size_aligned <= old_size_aligned) {"},
{"lineNum":"   78","line":"            return true;"},
{"lineNum":"   79","line":"        }"},
{"lineNum":"   80","line":"        return false;"},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    const buf_aligned_len = mem.alignForward(usize, buf_unaligned.len, mem.page_size);","class":"lineCov","hits":"1","order":"806","possible_hits":"1",},
{"lineNum":"   84","line":"    if (new_size_aligned == buf_aligned_len)","class":"lineCov","hits":"1","order":"807","possible_hits":"1",},
{"lineNum":"   85","line":"        return true;","class":"lineCov","hits":"1","order":"808","possible_hits":"1",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    if (new_size_aligned < buf_aligned_len) {","class":"lineCov","hits":"1","order":"2474","possible_hits":"1",},
{"lineNum":"   88","line":"        const ptr = buf_unaligned.ptr + new_size_aligned;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"        // TODO: if the next_mmap_addr_hint is within the unmapped range, update it"},
{"lineNum":"   90","line":"        os.munmap(@alignCast(ptr[0 .. buf_aligned_len - new_size_aligned]));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   91","line":"        return true;","class":"linePartCov","hits":"1","order":"2475","possible_hits":"2",},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    // TODO: call mremap"},
{"lineNum":"   95","line":"    // TODO: if the next_mmap_addr_hint is within the remapped range, update it"},
{"lineNum":"   96","line":"    return false;","class":"lineCov","hits":"1","order":"2476","possible_hits":"1",},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"fn free(_: *anyopaque, slice: []u8, log2_buf_align: u8, return_address: usize) void {","class":"lineCov","hits":"1","order":"1499","possible_hits":"1",},
{"lineNum":"  100","line":"    _ = log2_buf_align;"},
{"lineNum":"  101","line":"    _ = return_address;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  104","line":"        os.windows.VirtualFree(slice.ptr, 0, os.windows.MEM_RELEASE);"},
{"lineNum":"  105","line":"    } else {"},
{"lineNum":"  106","line":"        const buf_aligned_len = mem.alignForward(usize, slice.len, mem.page_size);","class":"lineCov","hits":"1","order":"1500","possible_hits":"1",},
{"lineNum":"  107","line":"        os.munmap(@alignCast(slice.ptr[0..buf_aligned_len]));","class":"lineCov","hits":"1","order":"1501","possible_hits":"1",},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 24, "covered" : 22,};
var merged_data = [];
