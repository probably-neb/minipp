var data = {lines:[
{"lineNum":"    1","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    2","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    3","line":"const debug = std.debug;"},
{"lineNum":"    4","line":"const fs = std.fs;"},
{"lineNum":"    5","line":"const io = std.io;"},
{"lineNum":"    6","line":"const os = std.os;"},
{"lineNum":"    7","line":"const mem = std.mem;"},
{"lineNum":"    8","line":"const math = std.math;"},
{"lineNum":"    9","line":"const leb = @import(\"leb128.zig\");"},
{"lineNum":"   10","line":"const assert = std.debug.assert;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"pub const TAG = @import(\"dwarf/TAG.zig\");"},
{"lineNum":"   13","line":"pub const AT = @import(\"dwarf/AT.zig\");"},
{"lineNum":"   14","line":"pub const OP = @import(\"dwarf/OP.zig\");"},
{"lineNum":"   15","line":"pub const LANG = @import(\"dwarf/LANG.zig\");"},
{"lineNum":"   16","line":"pub const FORM = @import(\"dwarf/FORM.zig\");"},
{"lineNum":"   17","line":"pub const ATE = @import(\"dwarf/ATE.zig\");"},
{"lineNum":"   18","line":"pub const EH = @import(\"dwarf/EH.zig\");"},
{"lineNum":"   19","line":"pub const abi = @import(\"dwarf/abi.zig\");"},
{"lineNum":"   20","line":"pub const call_frame = @import(\"dwarf/call_frame.zig\");"},
{"lineNum":"   21","line":"pub const expressions = @import(\"dwarf/expressions.zig\");"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"pub const LLE = struct {"},
{"lineNum":"   24","line":"    pub const end_of_list = 0x00;"},
{"lineNum":"   25","line":"    pub const base_addressx = 0x01;"},
{"lineNum":"   26","line":"    pub const startx_endx = 0x02;"},
{"lineNum":"   27","line":"    pub const startx_length = 0x03;"},
{"lineNum":"   28","line":"    pub const offset_pair = 0x04;"},
{"lineNum":"   29","line":"    pub const default_location = 0x05;"},
{"lineNum":"   30","line":"    pub const base_address = 0x06;"},
{"lineNum":"   31","line":"    pub const start_end = 0x07;"},
{"lineNum":"   32","line":"    pub const start_length = 0x08;"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"pub const CFA = struct {"},
{"lineNum":"   36","line":"    pub const advance_loc = 0x40;"},
{"lineNum":"   37","line":"    pub const offset = 0x80;"},
{"lineNum":"   38","line":"    pub const restore = 0xc0;"},
{"lineNum":"   39","line":"    pub const nop = 0x00;"},
{"lineNum":"   40","line":"    pub const set_loc = 0x01;"},
{"lineNum":"   41","line":"    pub const advance_loc1 = 0x02;"},
{"lineNum":"   42","line":"    pub const advance_loc2 = 0x03;"},
{"lineNum":"   43","line":"    pub const advance_loc4 = 0x04;"},
{"lineNum":"   44","line":"    pub const offset_extended = 0x05;"},
{"lineNum":"   45","line":"    pub const restore_extended = 0x06;"},
{"lineNum":"   46","line":"    pub const @\"undefined\" = 0x07;"},
{"lineNum":"   47","line":"    pub const same_value = 0x08;"},
{"lineNum":"   48","line":"    pub const register = 0x09;"},
{"lineNum":"   49","line":"    pub const remember_state = 0x0a;"},
{"lineNum":"   50","line":"    pub const restore_state = 0x0b;"},
{"lineNum":"   51","line":"    pub const def_cfa = 0x0c;"},
{"lineNum":"   52","line":"    pub const def_cfa_register = 0x0d;"},
{"lineNum":"   53","line":"    pub const def_cfa_offset = 0x0e;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    // DWARF 3."},
{"lineNum":"   56","line":"    pub const def_cfa_expression = 0x0f;"},
{"lineNum":"   57","line":"    pub const expression = 0x10;"},
{"lineNum":"   58","line":"    pub const offset_extended_sf = 0x11;"},
{"lineNum":"   59","line":"    pub const def_cfa_sf = 0x12;"},
{"lineNum":"   60","line":"    pub const def_cfa_offset_sf = 0x13;"},
{"lineNum":"   61","line":"    pub const val_offset = 0x14;"},
{"lineNum":"   62","line":"    pub const val_offset_sf = 0x15;"},
{"lineNum":"   63","line":"    pub const val_expression = 0x16;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    pub const lo_user = 0x1c;"},
{"lineNum":"   66","line":"    pub const hi_user = 0x3f;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    // SGI/MIPS specific."},
{"lineNum":"   69","line":"    pub const MIPS_advance_loc8 = 0x1d;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    // GNU extensions."},
{"lineNum":"   72","line":"    pub const GNU_window_save = 0x2d;"},
{"lineNum":"   73","line":"    pub const GNU_args_size = 0x2e;"},
{"lineNum":"   74","line":"    pub const GNU_negative_offset_extended = 0x2f;"},
{"lineNum":"   75","line":"};"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"pub const CHILDREN = struct {"},
{"lineNum":"   78","line":"    pub const no = 0x00;"},
{"lineNum":"   79","line":"    pub const yes = 0x01;"},
{"lineNum":"   80","line":"};"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"pub const LNS = struct {"},
{"lineNum":"   83","line":"    pub const extended_op = 0x00;"},
{"lineNum":"   84","line":"    pub const copy = 0x01;"},
{"lineNum":"   85","line":"    pub const advance_pc = 0x02;"},
{"lineNum":"   86","line":"    pub const advance_line = 0x03;"},
{"lineNum":"   87","line":"    pub const set_file = 0x04;"},
{"lineNum":"   88","line":"    pub const set_column = 0x05;"},
{"lineNum":"   89","line":"    pub const negate_stmt = 0x06;"},
{"lineNum":"   90","line":"    pub const set_basic_block = 0x07;"},
{"lineNum":"   91","line":"    pub const const_add_pc = 0x08;"},
{"lineNum":"   92","line":"    pub const fixed_advance_pc = 0x09;"},
{"lineNum":"   93","line":"    pub const set_prologue_end = 0x0a;"},
{"lineNum":"   94","line":"    pub const set_epilogue_begin = 0x0b;"},
{"lineNum":"   95","line":"    pub const set_isa = 0x0c;"},
{"lineNum":"   96","line":"};"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"pub const LNE = struct {"},
{"lineNum":"   99","line":"    pub const end_sequence = 0x01;"},
{"lineNum":"  100","line":"    pub const set_address = 0x02;"},
{"lineNum":"  101","line":"    pub const define_file = 0x03;"},
{"lineNum":"  102","line":"    pub const set_discriminator = 0x04;"},
{"lineNum":"  103","line":"    pub const lo_user = 0x80;"},
{"lineNum":"  104","line":"    pub const hi_user = 0xff;"},
{"lineNum":"  105","line":"};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"pub const UT = struct {"},
{"lineNum":"  108","line":"    pub const compile = 0x01;"},
{"lineNum":"  109","line":"    pub const @\"type\" = 0x02;"},
{"lineNum":"  110","line":"    pub const partial = 0x03;"},
{"lineNum":"  111","line":"    pub const skeleton = 0x04;"},
{"lineNum":"  112","line":"    pub const split_compile = 0x05;"},
{"lineNum":"  113","line":"    pub const split_type = 0x06;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    pub const lo_user = 0x80;"},
{"lineNum":"  116","line":"    pub const hi_user = 0xff;"},
{"lineNum":"  117","line":"};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"pub const LNCT = struct {"},
{"lineNum":"  120","line":"    pub const path = 0x1;"},
{"lineNum":"  121","line":"    pub const directory_index = 0x2;"},
{"lineNum":"  122","line":"    pub const timestamp = 0x3;"},
{"lineNum":"  123","line":"    pub const size = 0x4;"},
{"lineNum":"  124","line":"    pub const MD5 = 0x5;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    pub const lo_user = 0x2000;"},
{"lineNum":"  127","line":"    pub const hi_user = 0x3fff;"},
{"lineNum":"  128","line":"};"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"pub const RLE = struct {"},
{"lineNum":"  131","line":"    pub const end_of_list = 0x00;"},
{"lineNum":"  132","line":"    pub const base_addressx = 0x01;"},
{"lineNum":"  133","line":"    pub const startx_endx = 0x02;"},
{"lineNum":"  134","line":"    pub const startx_length = 0x03;"},
{"lineNum":"  135","line":"    pub const offset_pair = 0x04;"},
{"lineNum":"  136","line":"    pub const base_address = 0x05;"},
{"lineNum":"  137","line":"    pub const start_end = 0x06;"},
{"lineNum":"  138","line":"    pub const start_length = 0x07;"},
{"lineNum":"  139","line":"};"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"pub const CC = enum(u8) {"},
{"lineNum":"  142","line":"    normal = 0x1,"},
{"lineNum":"  143","line":"    program = 0x2,"},
{"lineNum":"  144","line":"    nocall = 0x3,"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    pass_by_reference = 0x4,"},
{"lineNum":"  147","line":"    pass_by_value = 0x5,"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    GNU_renesas_sh = 0x40,"},
{"lineNum":"  150","line":"    GNU_borland_fastcall_i386 = 0x41,"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    pub const lo_user = 0x40;"},
{"lineNum":"  153","line":"    pub const hi_user = 0xff;"},
{"lineNum":"  154","line":"};"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"pub const Format = enum { @\"32\", @\"64\" };"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"const PcRange = struct {"},
{"lineNum":"  159","line":"    start: u64,"},
{"lineNum":"  160","line":"    end: u64,"},
{"lineNum":"  161","line":"};"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"const Func = struct {"},
{"lineNum":"  164","line":"    pc_range: ?PcRange,"},
{"lineNum":"  165","line":"    name: ?[]const u8,"},
{"lineNum":"  166","line":"};"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"pub const CompileUnit = struct {"},
{"lineNum":"  169","line":"    version: u16,"},
{"lineNum":"  170","line":"    is_64: bool,"},
{"lineNum":"  171","line":"    die: *Die,"},
{"lineNum":"  172","line":"    pc_range: ?PcRange,"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    str_offsets_base: usize,"},
{"lineNum":"  175","line":"    addr_base: usize,"},
{"lineNum":"  176","line":"    rnglists_base: usize,"},
{"lineNum":"  177","line":"    loclists_base: usize,"},
{"lineNum":"  178","line":"    frame_base: ?*const FormValue,"},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"const AbbrevTable = std.ArrayList(AbbrevTableEntry);"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"const AbbrevTableHeader = struct {"},
{"lineNum":"  184","line":"    // offset from .debug_abbrev"},
{"lineNum":"  185","line":"    offset: u64,"},
{"lineNum":"  186","line":"    table: AbbrevTable,"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    fn deinit(header: *AbbrevTableHeader) void {"},
{"lineNum":"  189","line":"        for (header.table.items) |*entry| {"},
{"lineNum":"  190","line":"            entry.deinit();"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":"        header.table.deinit();"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":"};"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"const AbbrevTableEntry = struct {"},
{"lineNum":"  197","line":"    has_children: bool,"},
{"lineNum":"  198","line":"    abbrev_code: u64,"},
{"lineNum":"  199","line":"    tag_id: u64,"},
{"lineNum":"  200","line":"    attrs: std.ArrayList(AbbrevAttr),"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    fn deinit(entry: *AbbrevTableEntry) void {"},
{"lineNum":"  203","line":"        entry.attrs.deinit();"},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":"};"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"const AbbrevAttr = struct {"},
{"lineNum":"  208","line":"    attr_id: u64,"},
{"lineNum":"  209","line":"    form_id: u64,"},
{"lineNum":"  210","line":"    /// Only valid if form_id is .implicit_const"},
{"lineNum":"  211","line":"    payload: i64,"},
{"lineNum":"  212","line":"};"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"pub const FormValue = union(enum) {"},
{"lineNum":"  215","line":"    Address: u64,"},
{"lineNum":"  216","line":"    AddrOffset: usize,"},
{"lineNum":"  217","line":"    Block: []u8,"},
{"lineNum":"  218","line":"    Const: Constant,"},
{"lineNum":"  219","line":"    ExprLoc: []u8,"},
{"lineNum":"  220","line":"    Flag: bool,"},
{"lineNum":"  221","line":"    SecOffset: u64,"},
{"lineNum":"  222","line":"    Ref: u64,"},
{"lineNum":"  223","line":"    RefAddr: u64,"},
{"lineNum":"  224","line":"    String: []const u8,"},
{"lineNum":"  225","line":"    StrPtr: u64,"},
{"lineNum":"  226","line":"    StrOffset: usize,"},
{"lineNum":"  227","line":"    LineStrPtr: u64,"},
{"lineNum":"  228","line":"    LocListOffset: u64,"},
{"lineNum":"  229","line":"    RangeListOffset: u64,"},
{"lineNum":"  230","line":"    data16: [16]u8,"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    fn getString(fv: FormValue, di: DwarfInfo) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"        switch (fv) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  234","line":"            .String => |s| return s,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"            .StrPtr => |off| return di.getString(off),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"            .LineStrPtr => |off| return di.getLineString(off),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"        }"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    fn getUInt(fv: FormValue, comptime U: type) !U {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  242","line":"        switch (fv) {","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  243","line":"            .Const => |c| {"},
{"lineNum":"  244","line":"                const int = try c.asUnsignedLe();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  245","line":"                return math.cast(U, int) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  246","line":"            },"},
{"lineNum":"  247","line":"            .SecOffset => |x| return math.cast(U, x) orelse return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  248","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  249","line":"        }"},
{"lineNum":"  250","line":"    }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    fn getData16(fv: FormValue) ![16]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"        switch (fv) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"            .data16 => |d| return d,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"        }"},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":"};"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"const Constant = struct {"},
{"lineNum":"  261","line":"    payload: u64,"},
{"lineNum":"  262","line":"    signed: bool,"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    fn asUnsignedLe(self: Constant) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"        if (self.signed) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"        return self.payload;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":"};"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"const Die = struct {"},
{"lineNum":"  271","line":"    // Arena for Die\'s Attr\'s and FormValue\'s."},
{"lineNum":"  272","line":"    arena: std.heap.ArenaAllocator,"},
{"lineNum":"  273","line":"    tag_id: u64,"},
{"lineNum":"  274","line":"    has_children: bool,"},
{"lineNum":"  275","line":"    attrs: std.ArrayListUnmanaged(Attr) = .{},"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    const Attr = struct {"},
{"lineNum":"  278","line":"        id: u64,"},
{"lineNum":"  279","line":"        value: FormValue,"},
{"lineNum":"  280","line":"    };"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    fn deinit(self: *Die, allocator: mem.Allocator) void {"},
{"lineNum":"  283","line":"        self.arena.deinit();"},
{"lineNum":"  284","line":"        self.attrs.deinit(allocator);"},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    fn getAttr(self: *const Die, id: u64) ?*const FormValue {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"        for (self.attrs.items) |*attr| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  289","line":"            if (attr.id == id) return &attr.value;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  290","line":"        }"},
{"lineNum":"  291","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"    }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    fn getAttrAddr("},
{"lineNum":"  295","line":"        self: *const Die,"},
{"lineNum":"  296","line":"        di: *const DwarfInfo,"},
{"lineNum":"  297","line":"        id: u64,"},
{"lineNum":"  298","line":"        compile_unit: CompileUnit,"},
{"lineNum":"  299","line":"    ) error{ InvalidDebugInfo, MissingDebugInfo }!u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  301","line":"        return switch (form_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  302","line":"            FormValue.Address => |value| value,"},
{"lineNum":"  303","line":"            FormValue.AddrOffset => |index| di.readDebugAddr(compile_unit, index),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"            else => error.InvalidDebugInfo,"},
{"lineNum":"  305","line":"        };"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    fn getAttrSecOffset(self: *const Die, id: u64) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"        return form_value.getUInt(u64);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    fn getAttrUnsignedLe(self: *const Die, id: u64) !u64 {"},
{"lineNum":"  314","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;"},
{"lineNum":"  315","line":"        return switch (form_value.*) {"},
{"lineNum":"  316","line":"            FormValue.Const => |value| value.asUnsignedLe(),"},
{"lineNum":"  317","line":"            else => error.InvalidDebugInfo,"},
{"lineNum":"  318","line":"        };"},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    fn getAttrRef(self: *const Die, id: u64) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  323","line":"        return switch (form_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  324","line":"            FormValue.Ref => |value| value,"},
{"lineNum":"  325","line":"            else => error.InvalidDebugInfo,"},
{"lineNum":"  326","line":"        };"},
{"lineNum":"  327","line":"    }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    pub fn getAttrString("},
{"lineNum":"  330","line":"        self: *const Die,"},
{"lineNum":"  331","line":"        di: *DwarfInfo,"},
{"lineNum":"  332","line":"        id: u64,"},
{"lineNum":"  333","line":"        opt_str: ?[]const u8,"},
{"lineNum":"  334","line":"        compile_unit: CompileUnit,"},
{"lineNum":"  335","line":"    ) error{ InvalidDebugInfo, MissingDebugInfo }![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  337","line":"        switch (form_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  338","line":"            FormValue.String => |value| return value,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"            FormValue.StrPtr => |offset| return di.getString(offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"            FormValue.StrOffset => |index| {"},
{"lineNum":"  341","line":"                const debug_str_offsets = di.section(.debug_str_offsets) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  342","line":"                if (compile_unit.str_offsets_base == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  343","line":"                if (compile_unit.is_64) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"                    const byte_offset = compile_unit.str_offsets_base + 8 * index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  345","line":"                    if (byte_offset + 8 > debug_str_offsets.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  346","line":"                    const offset = mem.readInt(u64, debug_str_offsets[byte_offset..][0..8], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  347","line":"                    return getStringGeneric(opt_str, offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  348","line":"                } else {"},
{"lineNum":"  349","line":"                    const byte_offset = compile_unit.str_offsets_base + 4 * index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  350","line":"                    if (byte_offset + 4 > debug_str_offsets.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  351","line":"                    const offset = mem.readInt(u32, debug_str_offsets[byte_offset..][0..4], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  352","line":"                    return getStringGeneric(opt_str, offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  353","line":"                }"},
{"lineNum":"  354","line":"            },"},
{"lineNum":"  355","line":"            FormValue.LineStrPtr => |offset| return di.getLineString(offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"        }"},
{"lineNum":"  358","line":"    }"},
{"lineNum":"  359","line":"};"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"const FileEntry = struct {"},
{"lineNum":"  362","line":"    path: []const u8,"},
{"lineNum":"  363","line":"    dir_index: u32 = 0,"},
{"lineNum":"  364","line":"    mtime: u64 = 0,"},
{"lineNum":"  365","line":"    size: u64 = 0,"},
{"lineNum":"  366","line":"    md5: [16]u8 = [1]u8{0} ** 16,"},
{"lineNum":"  367","line":"};"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"const LineNumberProgram = struct {"},
{"lineNum":"  370","line":"    address: u64,"},
{"lineNum":"  371","line":"    file: usize,"},
{"lineNum":"  372","line":"    line: i64,"},
{"lineNum":"  373","line":"    column: u64,"},
{"lineNum":"  374","line":"    version: u16,"},
{"lineNum":"  375","line":"    is_stmt: bool,"},
{"lineNum":"  376","line":"    basic_block: bool,"},
{"lineNum":"  377","line":"    end_sequence: bool,"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    default_is_stmt: bool,"},
{"lineNum":"  380","line":"    target_address: u64,"},
{"lineNum":"  381","line":"    include_dirs: []const FileEntry,"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    prev_valid: bool,"},
{"lineNum":"  384","line":"    prev_address: u64,"},
{"lineNum":"  385","line":"    prev_file: usize,"},
{"lineNum":"  386","line":"    prev_line: i64,"},
{"lineNum":"  387","line":"    prev_column: u64,"},
{"lineNum":"  388","line":"    prev_is_stmt: bool,"},
{"lineNum":"  389","line":"    prev_basic_block: bool,"},
{"lineNum":"  390","line":"    prev_end_sequence: bool,"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    // Reset the state machine following the DWARF specification"},
{"lineNum":"  393","line":"    pub fn reset(self: *LineNumberProgram) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"        self.address = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"        self.file = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"        self.line = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"        self.column = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"        self.is_stmt = self.default_is_stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"        self.basic_block = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"        self.end_sequence = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"        // Invalidate all the remaining fields"},
{"lineNum":"  402","line":"        self.prev_valid = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"        self.prev_address = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"        self.prev_file = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"        self.prev_line = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"        self.prev_column = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"        self.prev_is_stmt = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  408","line":"        self.prev_basic_block = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"        self.prev_end_sequence = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"    }"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    pub fn init("},
{"lineNum":"  413","line":"        is_stmt: bool,"},
{"lineNum":"  414","line":"        include_dirs: []const FileEntry,"},
{"lineNum":"  415","line":"        target_address: u64,"},
{"lineNum":"  416","line":"        version: u16,"},
{"lineNum":"  417","line":"    ) LineNumberProgram {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":"        return LineNumberProgram{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  419","line":"            .address = 0,"},
{"lineNum":"  420","line":"            .file = 1,"},
{"lineNum":"  421","line":"            .line = 1,"},
{"lineNum":"  422","line":"            .column = 0,"},
{"lineNum":"  423","line":"            .version = version,"},
{"lineNum":"  424","line":"            .is_stmt = is_stmt,"},
{"lineNum":"  425","line":"            .basic_block = false,"},
{"lineNum":"  426","line":"            .end_sequence = false,"},
{"lineNum":"  427","line":"            .include_dirs = include_dirs,"},
{"lineNum":"  428","line":"            .default_is_stmt = is_stmt,"},
{"lineNum":"  429","line":"            .target_address = target_address,"},
{"lineNum":"  430","line":"            .prev_valid = false,"},
{"lineNum":"  431","line":"            .prev_address = 0,"},
{"lineNum":"  432","line":"            .prev_file = undefined,"},
{"lineNum":"  433","line":"            .prev_line = undefined,"},
{"lineNum":"  434","line":"            .prev_column = undefined,"},
{"lineNum":"  435","line":"            .prev_is_stmt = undefined,"},
{"lineNum":"  436","line":"            .prev_basic_block = undefined,"},
{"lineNum":"  437","line":"            .prev_end_sequence = undefined,"},
{"lineNum":"  438","line":"        };"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    pub fn checkLineMatch("},
{"lineNum":"  442","line":"        self: *LineNumberProgram,"},
{"lineNum":"  443","line":"        allocator: mem.Allocator,"},
{"lineNum":"  444","line":"        file_entries: []const FileEntry,"},
{"lineNum":"  445","line":"    ) !?debug.LineInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  446","line":"        if (self.prev_valid and","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"            self.target_address >= self.prev_address and","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"            self.target_address < self.address)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  449","line":"        {"},
{"lineNum":"  450","line":"            const file_index = if (self.version >= 5) self.prev_file else i: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  451","line":"                if (self.prev_file == 0) return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  452","line":"                break :i self.prev_file - 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  453","line":"            };"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"            if (file_index >= file_entries.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  456","line":"            const file_entry = &file_entries[file_index];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"            if (file_entry.dir_index >= self.include_dirs.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  459","line":"            const dir_name = self.include_dirs[file_entry.dir_index].path;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"            const file_name = try fs.path.join(allocator, &[_][]const u8{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  462","line":"                dir_name, file_entry.path,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"            });"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"            return debug.LineInfo{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  466","line":"                .line = if (self.prev_line >= 0) @as(u64, @intCast(self.prev_line)) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  467","line":"                .column = self.prev_column,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"                .file_name = file_name,"},
{"lineNum":"  469","line":"            };"},
{"lineNum":"  470","line":"        }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        self.prev_valid = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"        self.prev_address = self.address;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":"        self.prev_file = self.file;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":"        self.prev_line = self.line;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":"        self.prev_column = self.column;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  477","line":"        self.prev_is_stmt = self.is_stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"        self.prev_basic_block = self.basic_block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"        self.prev_end_sequence = self.end_sequence;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"    }"},
{"lineNum":"  482","line":"};"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"fn readUnitLength(in_stream: anytype, endian: std.builtin.Endian, is_64: *bool) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"    const first_32_bits = try in_stream.readInt(u32, endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"    is_64.* = (first_32_bits == 0xffffffff);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  487","line":"    if (is_64.*) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"        return in_stream.readInt(u64, endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  489","line":"    } else {"},
{"lineNum":"  490","line":"        if (first_32_bits >= 0xfffffff0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  491","line":"        // TODO this cast should not be needed"},
{"lineNum":"  492","line":"        return @as(u64, first_32_bits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"    }"},
{"lineNum":"  494","line":"}"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  497","line":"fn readAllocBytes(allocator: mem.Allocator, in_stream: anytype, size: usize) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  498","line":"    const buf = try allocator.alloc(u8, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":"    errdefer allocator.free(buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"    if ((try nosuspend in_stream.read(buf)) < size) return error.EndOfFile;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  501","line":"    return buf;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":"}"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  505","line":"fn readAddress(in_stream: anytype, endian: std.builtin.Endian, is_64: bool) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":"    return nosuspend if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  507","line":"        try in_stream.readInt(u64, endian)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  508","line":"    else"},
{"lineNum":"  509","line":"        @as(u64, try in_stream.readInt(u32, endian));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"fn parseFormValueBlockLen(allocator: mem.Allocator, in_stream: anytype, size: usize) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"    const buf = try readAllocBytes(allocator, in_stream, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":"    return FormValue{ .Block = buf };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"}"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  518","line":"fn parseFormValueBlock(allocator: mem.Allocator, in_stream: anytype, endian: std.builtin.Endian, size: usize) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  519","line":"    const block_len = try nosuspend in_stream.readVarInt(usize, endian, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":"    return parseFormValueBlockLen(allocator, in_stream, block_len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"fn parseFormValueConstant(in_stream: anytype, signed: bool, endian: std.builtin.Endian, comptime size: i32) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  524","line":"    // TODO: Please forgive me, I\'ve worked around zig not properly spilling some intermediate values here."},
{"lineNum":"  525","line":"    // `nosuspend` should be removed from all the function calls once it is fixed."},
{"lineNum":"  526","line":"    return FormValue{","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  527","line":"        .Const = Constant{"},
{"lineNum":"  528","line":"            .signed = signed,"},
{"lineNum":"  529","line":"            .payload = switch (size) {"},
{"lineNum":"  530","line":"                1 => try nosuspend in_stream.readInt(u8, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  531","line":"                2 => try nosuspend in_stream.readInt(u16, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  532","line":"                4 => try nosuspend in_stream.readInt(u32, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  533","line":"                8 => try nosuspend in_stream.readInt(u64, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  534","line":"                -1 => blk: {"},
{"lineNum":"  535","line":"                    if (signed) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":"                        const x = try nosuspend leb.readILEB128(i64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  537","line":"                        break :blk @as(u64, @bitCast(x));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  538","line":"                    } else {"},
{"lineNum":"  539","line":"                        const x = try nosuspend leb.readULEB128(u64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  540","line":"                        break :blk x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":"                    }"},
{"lineNum":"  542","line":"                },"},
{"lineNum":"  543","line":"                else => @compileError(\"Invalid size\"),"},
{"lineNum":"  544","line":"            },"},
{"lineNum":"  545","line":"        },"},
{"lineNum":"  546","line":"    };"},
{"lineNum":"  547","line":"}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  550","line":"fn parseFormValueRef(in_stream: anytype, endian: std.builtin.Endian, size: i32) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  551","line":"    return FormValue{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  552","line":"        .Ref = switch (size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"            1 => try nosuspend in_stream.readInt(u8, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  554","line":"            2 => try nosuspend in_stream.readInt(u16, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  555","line":"            4 => try nosuspend in_stream.readInt(u32, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"            8 => try nosuspend in_stream.readInt(u64, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"            -1 => try nosuspend leb.readULEB128(u64, in_stream),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":"            else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  559","line":"        },"},
{"lineNum":"  560","line":"    };"},
{"lineNum":"  561","line":"}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  564","line":"fn parseFormValue(allocator: mem.Allocator, in_stream: anytype, form_id: u64, endian: std.builtin.Endian, is_64: bool) anyerror!FormValue {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  565","line":"    return switch (form_id) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  566","line":"        FORM.addr => FormValue{ .Address = try readAddress(in_stream, endian, @sizeOf(usize) == 8) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":"        FORM.addrx1 => return FormValue{ .AddrOffset = try in_stream.readInt(u8, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  568","line":"        FORM.addrx2 => return FormValue{ .AddrOffset = try in_stream.readInt(u16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"        FORM.addrx3 => return FormValue{ .AddrOffset = try in_stream.readInt(u24, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":"        FORM.addrx4 => return FormValue{ .AddrOffset = try in_stream.readInt(u32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  571","line":"        FORM.addrx => return FormValue{ .AddrOffset = try nosuspend leb.readULEB128(usize, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"        FORM.block1 => parseFormValueBlock(allocator, in_stream, endian, 1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  574","line":"        FORM.block2 => parseFormValueBlock(allocator, in_stream, endian, 2),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  575","line":"        FORM.block4 => parseFormValueBlock(allocator, in_stream, endian, 4),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  576","line":"        FORM.block => {"},
{"lineNum":"  577","line":"            const block_len = try nosuspend leb.readULEB128(usize, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":"            return parseFormValueBlockLen(allocator, in_stream, block_len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":"        },"},
{"lineNum":"  580","line":"        FORM.data1 => parseFormValueConstant(in_stream, false, endian, 1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  581","line":"        FORM.data2 => parseFormValueConstant(in_stream, false, endian, 2),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":"        FORM.data4 => parseFormValueConstant(in_stream, false, endian, 4),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  583","line":"        FORM.data8 => parseFormValueConstant(in_stream, false, endian, 8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":"        FORM.data16 => {"},
{"lineNum":"  585","line":"            var buf: [16]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":"            if ((try nosuspend in_stream.readAll(&buf)) < 16) return error.EndOfFile;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  587","line":"            return FormValue{ .data16 = buf };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  588","line":"        },"},
{"lineNum":"  589","line":"        FORM.udata, FORM.sdata => {"},
{"lineNum":"  590","line":"            const signed = form_id == FORM.sdata;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"            return parseFormValueConstant(in_stream, signed, endian, -1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"        },"},
{"lineNum":"  593","line":"        FORM.exprloc => {"},
{"lineNum":"  594","line":"            const size = try nosuspend leb.readULEB128(usize, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  595","line":"            const buf = try readAllocBytes(allocator, in_stream, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  596","line":"            return FormValue{ .ExprLoc = buf };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"        },"},
{"lineNum":"  598","line":"        FORM.flag => FormValue{ .Flag = (try nosuspend in_stream.readByte()) != 0 },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":"        FORM.flag_present => FormValue{ .Flag = true },"},
{"lineNum":"  600","line":"        FORM.sec_offset => FormValue{ .SecOffset = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"        FORM.ref1 => parseFormValueRef(in_stream, endian, 1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":"        FORM.ref2 => parseFormValueRef(in_stream, endian, 2),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"        FORM.ref4 => parseFormValueRef(in_stream, endian, 4),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"        FORM.ref8 => parseFormValueRef(in_stream, endian, 8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  606","line":"        FORM.ref_udata => parseFormValueRef(in_stream, endian, -1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"        FORM.ref_addr => FormValue{ .RefAddr = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":"        FORM.ref_sig8 => FormValue{ .Ref = try nosuspend in_stream.readInt(u64, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"        FORM.string => FormValue{ .String = try in_stream.readUntilDelimiterAlloc(allocator, 0, math.maxInt(usize)) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":"        FORM.strp => FormValue{ .StrPtr = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"        FORM.strx1 => return FormValue{ .StrOffset = try in_stream.readInt(u8, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"        FORM.strx2 => return FormValue{ .StrOffset = try in_stream.readInt(u16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":"        FORM.strx3 => return FormValue{ .StrOffset = try in_stream.readInt(u24, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  616","line":"        FORM.strx4 => return FormValue{ .StrOffset = try in_stream.readInt(u32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"        FORM.strx => return FormValue{ .StrOffset = try nosuspend leb.readULEB128(usize, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"        FORM.line_strp => FormValue{ .LineStrPtr = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  619","line":"        FORM.indirect => {"},
{"lineNum":"  620","line":"            const child_form_id = try nosuspend leb.readULEB128(u64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":"            if (true) {"},
{"lineNum":"  622","line":"                return parseFormValue(allocator, in_stream, child_form_id, endian, is_64);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"            }"},
{"lineNum":"  624","line":"            const F = @TypeOf(async parseFormValue(allocator, in_stream, child_form_id, endian, is_64));"},
{"lineNum":"  625","line":"            var frame = try allocator.create(F);"},
{"lineNum":"  626","line":"            defer allocator.destroy(frame);"},
{"lineNum":"  627","line":"            return await @asyncCall(frame, {}, parseFormValue, .{ allocator, in_stream, child_form_id, endian, is_64 });"},
{"lineNum":"  628","line":"        },"},
{"lineNum":"  629","line":"        FORM.implicit_const => FormValue{ .Const = Constant{ .signed = true, .payload = undefined } },"},
{"lineNum":"  630","line":"        FORM.loclistx => return FormValue{ .LocListOffset = try nosuspend leb.readULEB128(u64, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":"        FORM.rnglistx => return FormValue{ .RangeListOffset = try nosuspend leb.readULEB128(u64, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":"        else => {"},
{"lineNum":"  633","line":"            //std.debug.print(\"unrecognized form id: {x}\\n\", .{form_id});"},
{"lineNum":"  634","line":"            return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":"        },"},
{"lineNum":"  636","line":"    };"},
{"lineNum":"  637","line":"}"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"fn getAbbrevTableEntry(abbrev_table: *const AbbrevTable, abbrev_code: u64) ?*const AbbrevTableEntry {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":"    for (abbrev_table.items) |*table_entry| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  641","line":"        if (table_entry.abbrev_code == abbrev_code) return table_entry;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  642","line":"    }"},
{"lineNum":"  643","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":"}"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"pub const DwarfSection = enum {"},
{"lineNum":"  647","line":"    debug_info,"},
{"lineNum":"  648","line":"    debug_abbrev,"},
{"lineNum":"  649","line":"    debug_str,"},
{"lineNum":"  650","line":"    debug_str_offsets,"},
{"lineNum":"  651","line":"    debug_line,"},
{"lineNum":"  652","line":"    debug_line_str,"},
{"lineNum":"  653","line":"    debug_ranges,"},
{"lineNum":"  654","line":"    debug_loclists,"},
{"lineNum":"  655","line":"    debug_rnglists,"},
{"lineNum":"  656","line":"    debug_addr,"},
{"lineNum":"  657","line":"    debug_names,"},
{"lineNum":"  658","line":"    debug_frame,"},
{"lineNum":"  659","line":"    eh_frame,"},
{"lineNum":"  660","line":"    eh_frame_hdr,"},
{"lineNum":"  661","line":"};"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"pub const DwarfInfo = struct {"},
{"lineNum":"  664","line":"    pub const Section = struct {"},
{"lineNum":"  665","line":"        data: []const u8,"},
{"lineNum":"  666","line":"        // Module-relative virtual address."},
{"lineNum":"  667","line":"        // Only set if the section data was loaded from disk."},
{"lineNum":"  668","line":"        virtual_address: ?usize = null,"},
{"lineNum":"  669","line":"        // If `data` is owned by this DwarfInfo."},
{"lineNum":"  670","line":"        owned: bool,"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"        // For sections that are not memory mapped by the loader, this is an offset"},
{"lineNum":"  673","line":"        // from `data.ptr` to where the section would have been mapped. Otherwise,"},
{"lineNum":"  674","line":"        // `data` is directly backed by the section and the offset is zero."},
{"lineNum":"  675","line":"        pub fn virtualOffset(self: Section, base_address: usize) i64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  676","line":"            return if (self.virtual_address) |va|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"                @as(i64, @intCast(base_address + va)) -","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  678","line":"                    @as(i64, @intCast(@intFromPtr(self.data.ptr)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  679","line":"            else"},
{"lineNum":"  680","line":"                0;"},
{"lineNum":"  681","line":"        }"},
{"lineNum":"  682","line":"    };"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"    const num_sections = std.enums.directEnumArrayLen(DwarfSection, 0);"},
{"lineNum":"  685","line":"    pub const SectionArray = [num_sections]?Section;"},
{"lineNum":"  686","line":"    pub const null_section_array = [_]?Section{null} ** num_sections;"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"    endian: std.builtin.Endian,"},
{"lineNum":"  689","line":"    sections: SectionArray = null_section_array,"},
{"lineNum":"  690","line":"    is_macho: bool,"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"    // Filled later by the initializer"},
{"lineNum":"  693","line":"    abbrev_table_list: std.ArrayListUnmanaged(AbbrevTableHeader) = .{},"},
{"lineNum":"  694","line":"    compile_unit_list: std.ArrayListUnmanaged(CompileUnit) = .{},"},
{"lineNum":"  695","line":"    func_list: std.ArrayListUnmanaged(Func) = .{},"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"    eh_frame_hdr: ?ExceptionFrameHeader = null,"},
{"lineNum":"  698","line":"    // These lookup tables are only used if `eh_frame_hdr` is null"},
{"lineNum":"  699","line":"    cie_map: std.AutoArrayHashMapUnmanaged(u64, CommonInformationEntry) = .{},"},
{"lineNum":"  700","line":"    // Sorted by start_pc"},
{"lineNum":"  701","line":"    fde_list: std.ArrayListUnmanaged(FrameDescriptionEntry) = .{},"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"    pub fn section(di: DwarfInfo, dwarf_section: DwarfSection) ?[]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  704","line":"        return if (di.sections[@intFromEnum(dwarf_section)]) |s| s.data else null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    pub fn sectionVirtualOffset(di: DwarfInfo, dwarf_section: DwarfSection, base_address: usize) ?i64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"        return if (di.sections[@intFromEnum(dwarf_section)]) |s| s.virtualOffset(base_address) else null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  709","line":"    }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"    pub fn deinit(di: *DwarfInfo, allocator: mem.Allocator) void {"},
{"lineNum":"  712","line":"        for (di.sections) |opt_section| {"},
{"lineNum":"  713","line":"            if (opt_section) |s| if (s.owned) allocator.free(s.data);"},
{"lineNum":"  714","line":"        }"},
{"lineNum":"  715","line":"        for (di.abbrev_table_list.items) |*abbrev| {"},
{"lineNum":"  716","line":"            abbrev.deinit();"},
{"lineNum":"  717","line":"        }"},
{"lineNum":"  718","line":"        di.abbrev_table_list.deinit(allocator);"},
{"lineNum":"  719","line":"        for (di.compile_unit_list.items) |*cu| {"},
{"lineNum":"  720","line":"            cu.die.deinit(allocator);"},
{"lineNum":"  721","line":"            allocator.destroy(cu.die);"},
{"lineNum":"  722","line":"        }"},
{"lineNum":"  723","line":"        di.compile_unit_list.deinit(allocator);"},
{"lineNum":"  724","line":"        di.func_list.deinit(allocator);"},
{"lineNum":"  725","line":"        di.cie_map.deinit(allocator);"},
{"lineNum":"  726","line":"        di.fde_list.deinit(allocator);"},
{"lineNum":"  727","line":"    }"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"    pub fn getSymbolName(di: *DwarfInfo, address: u64) ?[]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  730","line":"        for (di.func_list.items) |*func| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  731","line":"            if (func.pc_range) |range| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  732","line":"                if (address >= range.start and address < range.end) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  733","line":"                    return func.name;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  734","line":"                }"},
{"lineNum":"  735","line":"            }"},
{"lineNum":"  736","line":"        }"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  739","line":"    }"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    fn scanAllFunctions(di: *DwarfInfo, allocator: mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  742","line":"        var stream = io.fixedBufferStream(di.section(.debug_info).?);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  743","line":"        const in = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  744","line":"        const seekable = stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  745","line":"        var this_unit_offset: u64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"        var tmp_arena = std.heap.ArenaAllocator.init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  748","line":"        defer tmp_arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"37",},
{"lineNum":"  749","line":"        const arena = tmp_arena.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"        while (this_unit_offset < try seekable.getEndPos()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  752","line":"            try seekable.seekTo(this_unit_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"            var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  755","line":"            const unit_length = try readUnitLength(in, di.endian, &is_64);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  756","line":"            if (unit_length == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  757","line":"            const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"            const version = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  760","line":"            if (version < 2 or version > 5) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"            var address_size: u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  763","line":"            var debug_abbrev_offset: u64 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  764","line":"            if (version >= 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  765","line":"                const unit_type = try in.readInt(u8, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  766","line":"                if (unit_type != UT.compile) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  767","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  768","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  769","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  770","line":"                else"},
{"lineNum":"  771","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  772","line":"            } else {"},
{"lineNum":"  773","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  775","line":"                else"},
{"lineNum":"  776","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  777","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  778","line":"            }"},
{"lineNum":"  779","line":"            if (address_size != @sizeOf(usize)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"            const compile_unit_pos = try seekable.getPos();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  782","line":"            const abbrev_table = try di.getAbbrevTable(allocator, debug_abbrev_offset);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"            try seekable.seekTo(compile_unit_pos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"            const next_unit_pos = this_unit_offset + next_offset;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"            var compile_unit: CompileUnit = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"            while ((try seekable.getPos()) < next_unit_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  791","line":"                var die_obj = (try di.parseDie(arena, in, abbrev_table, is_64)) orelse continue;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  792","line":"                const after_die_offset = try seekable.getPos();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"                switch (die_obj.tag_id) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  795","line":"                    TAG.compile_unit => {"},
{"lineNum":"  796","line":"                        compile_unit = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  797","line":"                            .version = version,"},
{"lineNum":"  798","line":"                            .is_64 = is_64,"},
{"lineNum":"  799","line":"                            .die = &die_obj,"},
{"lineNum":"  800","line":"                            .pc_range = null,"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"                            .str_offsets_base = if (die_obj.getAttr(AT.str_offsets_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  803","line":"                            .addr_base = if (die_obj.getAttr(AT.addr_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  804","line":"                            .rnglists_base = if (die_obj.getAttr(AT.rnglists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  805","line":"                            .loclists_base = if (die_obj.getAttr(AT.loclists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  806","line":"                            .frame_base = die_obj.getAttr(AT.frame_base),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  807","line":"                        };"},
{"lineNum":"  808","line":"                    },"},
{"lineNum":"  809","line":"                    TAG.subprogram, TAG.inlined_subroutine, TAG.subroutine, TAG.entry_point => {"},
{"lineNum":"  810","line":"                        const fn_name = x: {"},
{"lineNum":"  811","line":"                            var depth: i32 = 3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  812","line":"                            var this_die_obj = die_obj;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  813","line":"                            // Prevent endless loops"},
{"lineNum":"  814","line":"                            while (depth > 0) : (depth -= 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  815","line":"                                if (this_die_obj.getAttr(AT.name)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  816","line":"                                    break :x try this_die_obj.getAttrString(di, AT.name, di.section(.debug_str), compile_unit);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  817","line":"                                } else if (this_die_obj.getAttr(AT.abstract_origin)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  818","line":"                                    // Follow the DIE it points to and repeat"},
{"lineNum":"  819","line":"                                    const ref_offset = try this_die_obj.getAttrRef(AT.abstract_origin);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  820","line":"                                    if (ref_offset > next_offset) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  821","line":"                                    try seekable.seekTo(this_unit_offset + ref_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  822","line":"                                    this_die_obj = (try di.parseDie(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  823","line":"                                        arena,"},
{"lineNum":"  824","line":"                                        in,"},
{"lineNum":"  825","line":"                                        abbrev_table,"},
{"lineNum":"  826","line":"                                        is_64,"},
{"lineNum":"  827","line":"                                    )) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  828","line":"                                } else if (this_die_obj.getAttr(AT.specification)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":"                                    // Follow the DIE it points to and repeat"},
{"lineNum":"  830","line":"                                    const ref_offset = try this_die_obj.getAttrRef(AT.specification);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  831","line":"                                    if (ref_offset > next_offset) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  832","line":"                                    try seekable.seekTo(this_unit_offset + ref_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  833","line":"                                    this_die_obj = (try di.parseDie(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  834","line":"                                        arena,"},
{"lineNum":"  835","line":"                                        in,"},
{"lineNum":"  836","line":"                                        abbrev_table,"},
{"lineNum":"  837","line":"                                        is_64,"},
{"lineNum":"  838","line":"                                    )) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  839","line":"                                } else {"},
{"lineNum":"  840","line":"                                    break :x null;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  841","line":"                                }"},
{"lineNum":"  842","line":"                            }"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"                            break :x null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  845","line":"                        };"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"                        var range_added = if (die_obj.getAttrAddr(di, AT.low_pc, compile_unit)) |low_pc| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  848","line":"                            if (die_obj.getAttr(AT.high_pc)) |high_pc_value| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  849","line":"                                const pc_end = switch (high_pc_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  850","line":"                                    FormValue.Address => |value| value,"},
{"lineNum":"  851","line":"                                    FormValue.Const => |value| b: {"},
{"lineNum":"  852","line":"                                        const offset = try value.asUnsignedLe();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  853","line":"                                        break :b (low_pc + offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  854","line":"                                    },"},
{"lineNum":"  855","line":"                                    else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  856","line":"                                };"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"                                try di.func_list.append(allocator, Func{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  859","line":"                                    .name = fn_name,"},
{"lineNum":"  860","line":"                                    .pc_range = .{"},
{"lineNum":"  861","line":"                                        .start = low_pc,"},
{"lineNum":"  862","line":"                                        .end = pc_end,"},
{"lineNum":"  863","line":"                                    },"},
{"lineNum":"  864","line":"                                });"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"                                break :blk true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  867","line":"                            }"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"                            break :blk false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  870","line":"                        } else |err| blk: {"},
{"lineNum":"  871","line":"                            if (err != error.MissingDebugInfo) return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  872","line":"                            break :blk false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  873","line":"                        };"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"                        if (die_obj.getAttr(AT.ranges)) |ranges_value| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  876","line":"                            var iter = DebugRangeIterator.init(ranges_value, di, &compile_unit) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  877","line":"                                if (err != error.MissingDebugInfo) return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  878","line":"                                break :blk;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  879","line":"                            };"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"                            while (try iter.next()) |range| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  882","line":"                                range_added = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  883","line":"                                try di.func_list.append(allocator, Func{","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  884","line":"                                    .name = fn_name,"},
{"lineNum":"  885","line":"                                    .pc_range = .{"},
{"lineNum":"  886","line":"                                        .start = range.start_addr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  887","line":"                                        .end = range.end_addr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  888","line":"                                    },"},
{"lineNum":"  889","line":"                                });"},
{"lineNum":"  890","line":"                            }"},
{"lineNum":"  891","line":"                        }"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"                        if (fn_name != null and !range_added) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  894","line":"                            try di.func_list.append(allocator, Func{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  895","line":"                                .name = fn_name,"},
{"lineNum":"  896","line":"                                .pc_range = null,"},
{"lineNum":"  897","line":"                            });"},
{"lineNum":"  898","line":"                        }"},
{"lineNum":"  899","line":"                    },"},
{"lineNum":"  900","line":"                    else => {},"},
{"lineNum":"  901","line":"                }"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"                try seekable.seekTo(after_die_offset);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  904","line":"            }"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"            this_unit_offset += next_offset;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  907","line":"        }"},
{"lineNum":"  908","line":"    }"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"    fn scanAllCompileUnits(di: *DwarfInfo, allocator: mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  911","line":"        var stream = io.fixedBufferStream(di.section(.debug_info).?);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  912","line":"        const in = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":"        const seekable = stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  914","line":"        var this_unit_offset: u64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"        while (this_unit_offset < try seekable.getEndPos()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  917","line":"            try seekable.seekTo(this_unit_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"            var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  920","line":"            const unit_length = try readUnitLength(in, di.endian, &is_64);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  921","line":"            if (unit_length == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  922","line":"            const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"            const version = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  925","line":"            if (version < 2 or version > 5) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"            var address_size: u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  928","line":"            var debug_abbrev_offset: u64 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  929","line":"            if (version >= 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"                const unit_type = try in.readInt(u8, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  931","line":"                if (unit_type != UT.compile) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  932","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  933","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  934","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  935","line":"                else"},
{"lineNum":"  936","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  937","line":"            } else {"},
{"lineNum":"  938","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  940","line":"                else"},
{"lineNum":"  941","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  942","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  943","line":"            }"},
{"lineNum":"  944","line":"            if (address_size != @sizeOf(usize)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"            const compile_unit_pos = try seekable.getPos();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":"            const abbrev_table = try di.getAbbrevTable(allocator, debug_abbrev_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"            try seekable.seekTo(compile_unit_pos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"            const compile_unit_die = try allocator.create(Die);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"            errdefer allocator.destroy(compile_unit_die);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  953","line":"            compile_unit_die.* = (try di.parseDie(allocator, in, abbrev_table, is_64)) orelse","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  954","line":"                return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"            if (compile_unit_die.tag_id != TAG.compile_unit) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"            var compile_unit: CompileUnit = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  959","line":"                .version = version,"},
{"lineNum":"  960","line":"                .is_64 = is_64,"},
{"lineNum":"  961","line":"                .pc_range = null,"},
{"lineNum":"  962","line":"                .die = compile_unit_die,"},
{"lineNum":"  963","line":"                .str_offsets_base = if (compile_unit_die.getAttr(AT.str_offsets_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  964","line":"                .addr_base = if (compile_unit_die.getAttr(AT.addr_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  965","line":"                .rnglists_base = if (compile_unit_die.getAttr(AT.rnglists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  966","line":"                .loclists_base = if (compile_unit_die.getAttr(AT.loclists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  967","line":"                .frame_base = compile_unit_die.getAttr(AT.frame_base),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  968","line":"            };"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"            compile_unit.pc_range = x: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  971","line":"                if (compile_unit_die.getAttrAddr(di, AT.low_pc, compile_unit)) |low_pc| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  972","line":"                    if (compile_unit_die.getAttr(AT.high_pc)) |high_pc_value| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  973","line":"                        const pc_end = switch (high_pc_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  974","line":"                            FormValue.Address => |value| value,"},
{"lineNum":"  975","line":"                            FormValue.Const => |value| b: {"},
{"lineNum":"  976","line":"                                const offset = try value.asUnsignedLe();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  977","line":"                                break :b (low_pc + offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  978","line":"                            },"},
{"lineNum":"  979","line":"                            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  980","line":"                        };"},
{"lineNum":"  981","line":"                        break :x PcRange{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"                            .start = low_pc,"},
{"lineNum":"  983","line":"                            .end = pc_end,"},
{"lineNum":"  984","line":"                        };"},
{"lineNum":"  985","line":"                    } else {"},
{"lineNum":"  986","line":"                        break :x null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  987","line":"                    }"},
{"lineNum":"  988","line":"                } else |err| {"},
{"lineNum":"  989","line":"                    if (err != error.MissingDebugInfo) return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  990","line":"                    break :x null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  991","line":"                }"},
{"lineNum":"  992","line":"            };"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"            try di.compile_unit_list.append(allocator, compile_unit);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"            this_unit_offset += next_offset;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  997","line":"        }"},
{"lineNum":"  998","line":"    }"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"    const DebugRangeIterator = struct {"},
{"lineNum":" 1001","line":"        base_address: u64,"},
{"lineNum":" 1002","line":"        section_type: DwarfSection,"},
{"lineNum":" 1003","line":"        di: *const DwarfInfo,"},
{"lineNum":" 1004","line":"        compile_unit: *const CompileUnit,"},
{"lineNum":" 1005","line":"        stream: io.FixedBufferStream([]const u8),"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"        pub fn init(ranges_value: *const FormValue, di: *const DwarfInfo, compile_unit: *const CompileUnit) !@This() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1008","line":"            const section_type = if (compile_unit.version >= 5) DwarfSection.debug_rnglists else DwarfSection.debug_ranges;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1009","line":"            const debug_ranges = di.section(section_type) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"            const ranges_offset = switch (ranges_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1012","line":"                .SecOffset => |off| off,"},
{"lineNum":" 1013","line":"                .Const => |c| try c.asUnsignedLe(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1014","line":"                .RangeListOffset => |idx| off: {"},
{"lineNum":" 1015","line":"                    if (compile_unit.is_64) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1016","line":"                        const offset_loc = @as(usize, @intCast(compile_unit.rnglists_base + 8 * idx));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1017","line":"                        if (offset_loc + 8 > debug_ranges.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1018","line":"                        const offset = mem.readInt(u64, debug_ranges[offset_loc..][0..8], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1019","line":"                        break :off compile_unit.rnglists_base + offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1020","line":"                    } else {"},
{"lineNum":" 1021","line":"                        const offset_loc = @as(usize, @intCast(compile_unit.rnglists_base + 4 * idx));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1022","line":"                        if (offset_loc + 4 > debug_ranges.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1023","line":"                        const offset = mem.readInt(u32, debug_ranges[offset_loc..][0..4], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1024","line":"                        break :off compile_unit.rnglists_base + offset;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1025","line":"                    }"},
{"lineNum":" 1026","line":"                },"},
{"lineNum":" 1027","line":"                else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1028","line":"            };"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"            var stream = io.fixedBufferStream(debug_ranges);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1031","line":"            try stream.seekTo(ranges_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"            // All the addresses in the list are relative to the value"},
{"lineNum":" 1034","line":"            // specified by DW_AT.low_pc or to some other value encoded"},
{"lineNum":" 1035","line":"            // in the list itself."},
{"lineNum":" 1036","line":"            // If no starting value is specified use zero."},
{"lineNum":" 1037","line":"            var base_address = compile_unit.die.getAttrAddr(di, AT.low_pc, compile_unit.*) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1038","line":"                error.MissingDebugInfo => @as(u64, 0), // TODO https://github.com/ziglang/zig/issues/11135"},
{"lineNum":" 1039","line":"                else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1040","line":"            };"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"            return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1043","line":"                .base_address = base_address,"},
{"lineNum":" 1044","line":"                .section_type = section_type,"},
{"lineNum":" 1045","line":"                .di = di,"},
{"lineNum":" 1046","line":"                .compile_unit = compile_unit,"},
{"lineNum":" 1047","line":"                .stream = stream,"},
{"lineNum":" 1048","line":"            };"},
{"lineNum":" 1049","line":"        }"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"        // Returns the next range in the list, or null if the end was reached."},
{"lineNum":" 1052","line":"        pub fn next(self: *@This()) !?struct { start_addr: u64, end_addr: u64 } {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1053","line":"            const in = self.stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1054","line":"            switch (self.section_type) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1055","line":"                .debug_rnglists => {"},
{"lineNum":" 1056","line":"                    const kind = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1057","line":"                    switch (kind) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1058","line":"                        RLE.end_of_list => return null,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1059","line":"                        RLE.base_addressx => {"},
{"lineNum":" 1060","line":"                            const index = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1061","line":"                            self.base_address = try self.di.readDebugAddr(self.compile_unit.*, index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1062","line":"                            return try self.next();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1063","line":"                        },"},
{"lineNum":" 1064","line":"                        RLE.startx_endx => {"},
{"lineNum":" 1065","line":"                            const start_index = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1066","line":"                            const start_addr = try self.di.readDebugAddr(self.compile_unit.*, start_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"                            const end_index = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1069","line":"                            const end_addr = try self.di.readDebugAddr(self.compile_unit.*, end_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"                            return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1072","line":"                                .start_addr = start_addr,"},
{"lineNum":" 1073","line":"                                .end_addr = end_addr,"},
{"lineNum":" 1074","line":"                            };"},
{"lineNum":" 1075","line":"                        },"},
{"lineNum":" 1076","line":"                        RLE.startx_length => {"},
{"lineNum":" 1077","line":"                            const start_index = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1078","line":"                            const start_addr = try self.di.readDebugAddr(self.compile_unit.*, start_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"                            const len = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1081","line":"                            const end_addr = start_addr + len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"                            return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1084","line":"                                .start_addr = start_addr,"},
{"lineNum":" 1085","line":"                                .end_addr = end_addr,"},
{"lineNum":" 1086","line":"                            };"},
{"lineNum":" 1087","line":"                        },"},
{"lineNum":" 1088","line":"                        RLE.offset_pair => {"},
{"lineNum":" 1089","line":"                            const start_addr = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1090","line":"                            const end_addr = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"                            // This is the only kind that uses the base address"},
{"lineNum":" 1093","line":"                            return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1094","line":"                                .start_addr = self.base_address + start_addr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1095","line":"                                .end_addr = self.base_address + end_addr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1096","line":"                            };"},
{"lineNum":" 1097","line":"                        },"},
{"lineNum":" 1098","line":"                        RLE.base_address => {"},
{"lineNum":" 1099","line":"                            self.base_address = try in.readInt(usize, self.di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1100","line":"                            return try self.next();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1101","line":"                        },"},
{"lineNum":" 1102","line":"                        RLE.start_end => {"},
{"lineNum":" 1103","line":"                            const start_addr = try in.readInt(usize, self.di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1104","line":"                            const end_addr = try in.readInt(usize, self.di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"                            return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1107","line":"                                .start_addr = start_addr,"},
{"lineNum":" 1108","line":"                                .end_addr = end_addr,"},
{"lineNum":" 1109","line":"                            };"},
{"lineNum":" 1110","line":"                        },"},
{"lineNum":" 1111","line":"                        RLE.start_length => {"},
{"lineNum":" 1112","line":"                            const start_addr = try in.readInt(usize, self.di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1113","line":"                            const len = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1114","line":"                            const end_addr = start_addr + len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"                            return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1117","line":"                                .start_addr = start_addr,"},
{"lineNum":" 1118","line":"                                .end_addr = end_addr,"},
{"lineNum":" 1119","line":"                            };"},
{"lineNum":" 1120","line":"                        },"},
{"lineNum":" 1121","line":"                        else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1122","line":"                    }"},
{"lineNum":" 1123","line":"                },"},
{"lineNum":" 1124","line":"                .debug_ranges => {"},
{"lineNum":" 1125","line":"                    const start_addr = try in.readInt(usize, self.di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1126","line":"                    const end_addr = try in.readInt(usize, self.di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1127","line":"                    if (start_addr == 0 and end_addr == 0) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"                    // This entry selects a new value for the base address"},
{"lineNum":" 1130","line":"                    if (start_addr == math.maxInt(usize)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1131","line":"                        self.base_address = end_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1132","line":"                        return try self.next();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1133","line":"                    }"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":"                    return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1136","line":"                        .start_addr = self.base_address + start_addr,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1137","line":"                        .end_addr = self.base_address + end_addr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1138","line":"                    };"},
{"lineNum":" 1139","line":"                },"},
{"lineNum":" 1140","line":"                else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1141","line":"            }"},
{"lineNum":" 1142","line":"        }"},
{"lineNum":" 1143","line":"    };"},
{"lineNum":" 1144","line":""},
{"lineNum":" 1145","line":"    pub fn findCompileUnit(di: *const DwarfInfo, target_address: u64) !*const CompileUnit {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1146","line":"        for (di.compile_unit_list.items) |*compile_unit| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1147","line":"            if (compile_unit.pc_range) |range| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1148","line":"                if (target_address >= range.start and target_address < range.end) return compile_unit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1149","line":"            }"},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"            const ranges_value = compile_unit.die.getAttr(AT.ranges) orelse continue;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1152","line":"            var iter = DebugRangeIterator.init(ranges_value, di, compile_unit) catch continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1153","line":"            while (try iter.next()) |range| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1154","line":"                if (target_address >= range.start_addr and target_address < range.end_addr) return compile_unit;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1155","line":"            }"},
{"lineNum":" 1156","line":"        }"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"        return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1159","line":"    }"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"    /// Gets an already existing AbbrevTable given the abbrev_offset, or if not found,"},
{"lineNum":" 1162","line":"    /// seeks in the stream and parses it."},
{"lineNum":" 1163","line":"    fn getAbbrevTable(di: *DwarfInfo, allocator: mem.Allocator, abbrev_offset: u64) !*const AbbrevTable {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1164","line":"        for (di.abbrev_table_list.items) |*header| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1165","line":"            if (header.offset == abbrev_offset) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1166","line":"                return &header.table;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1167","line":"            }"},
{"lineNum":" 1168","line":"        }"},
{"lineNum":" 1169","line":"        try di.abbrev_table_list.append(allocator, AbbrevTableHeader{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1170","line":"            .offset = abbrev_offset,"},
{"lineNum":" 1171","line":"            .table = try di.parseAbbrevTable(allocator, abbrev_offset),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1172","line":"        });"},
{"lineNum":" 1173","line":"        return &di.abbrev_table_list.items[di.abbrev_table_list.items.len - 1].table;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1174","line":"    }"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"    fn parseAbbrevTable(di: *DwarfInfo, allocator: mem.Allocator, offset: u64) !AbbrevTable {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1177","line":"        var stream = io.fixedBufferStream(di.section(.debug_abbrev).?);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1178","line":"        const in = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1179","line":"        const seekable = stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"        try seekable.seekTo(offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1182","line":"        var result = AbbrevTable.init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1183","line":"        errdefer {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1184","line":"            for (result.items) |*entry| {","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1185","line":"                entry.attrs.deinit();","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 1186","line":"            }"},
{"lineNum":" 1187","line":"            result.deinit();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1188","line":"        }"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"        while (true) {"},
{"lineNum":" 1191","line":"            const abbrev_code = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1192","line":"            if (abbrev_code == 0) return result;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1193","line":"            try result.append(AbbrevTableEntry{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1194","line":"                .abbrev_code = abbrev_code,"},
{"lineNum":" 1195","line":"                .tag_id = try leb.readULEB128(u64, in),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1196","line":"                .has_children = (try in.readByte()) == CHILDREN.yes,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1197","line":"                .attrs = std.ArrayList(AbbrevAttr).init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1198","line":"            });"},
{"lineNum":" 1199","line":"            const attrs = &result.items[result.items.len - 1].attrs;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"            while (true) {"},
{"lineNum":" 1202","line":"                const attr_id = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1203","line":"                const form_id = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1204","line":"                if (attr_id == 0 and form_id == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1205","line":"                // DW_FORM_implicit_const stores its value immediately after the attribute pair :("},
{"lineNum":" 1206","line":"                const payload = if (form_id == FORM.implicit_const) try leb.readILEB128(i64, in) else undefined;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1207","line":"                try attrs.append(AbbrevAttr{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1208","line":"                    .attr_id = attr_id,"},
{"lineNum":" 1209","line":"                    .form_id = form_id,"},
{"lineNum":" 1210","line":"                    .payload = payload,"},
{"lineNum":" 1211","line":"                });"},
{"lineNum":" 1212","line":"            }"},
{"lineNum":" 1213","line":"        }"},
{"lineNum":" 1214","line":"    }"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"    fn parseDie("},
{"lineNum":" 1217","line":"        di: *DwarfInfo,"},
{"lineNum":" 1218","line":"        allocator: mem.Allocator,"},
{"lineNum":" 1219","line":"        in_stream: anytype,"},
{"lineNum":" 1220","line":"        abbrev_table: *const AbbrevTable,"},
{"lineNum":" 1221","line":"        is_64: bool,"},
{"lineNum":" 1222","line":"    ) !?Die {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1223","line":"        const abbrev_code = try leb.readULEB128(u64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1224","line":"        if (abbrev_code == 0) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1225","line":"        const table_entry = getAbbrevTableEntry(abbrev_table, abbrev_code) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"        var result = Die{"},
{"lineNum":" 1228","line":"            // Lives as long as the Die."},
{"lineNum":" 1229","line":"            .arena = std.heap.ArenaAllocator.init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1230","line":"            .tag_id = table_entry.tag_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1231","line":"            .has_children = table_entry.has_children,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1232","line":"        };"},
{"lineNum":" 1233","line":"        try result.attrs.resize(allocator, table_entry.attrs.items.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1234","line":"        for (table_entry.attrs.items, 0..) |attr, i| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1235","line":"            result.attrs.items[i] = Die.Attr{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1236","line":"                .id = attr.attr_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1237","line":"                .value = try parseFormValue(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1238","line":"                    result.arena.allocator(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1239","line":"                    in_stream,"},
{"lineNum":" 1240","line":"                    attr.form_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1241","line":"                    di.endian,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1242","line":"                    is_64,"},
{"lineNum":" 1243","line":"                ),"},
{"lineNum":" 1244","line":"            };"},
{"lineNum":" 1245","line":"            if (attr.form_id == FORM.implicit_const) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1246","line":"                result.attrs.items[i].value.Const.payload = @as(u64, @bitCast(attr.payload));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1247","line":"            }"},
{"lineNum":" 1248","line":"        }"},
{"lineNum":" 1249","line":"        return result;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1250","line":"    }"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"    pub fn getLineNumberInfo("},
{"lineNum":" 1253","line":"        di: *DwarfInfo,"},
{"lineNum":" 1254","line":"        allocator: mem.Allocator,"},
{"lineNum":" 1255","line":"        compile_unit: CompileUnit,"},
{"lineNum":" 1256","line":"        target_address: u64,"},
{"lineNum":" 1257","line":"    ) !debug.LineInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1258","line":"        var stream = io.fixedBufferStream(di.section(.debug_line).?);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1259","line":"        const in = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1260","line":"        const seekable = stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"        const compile_unit_cwd = try compile_unit.die.getAttrString(di, AT.comp_dir, di.section(.debug_line_str), compile_unit);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1263","line":"        const line_info_offset = try compile_unit.die.getAttrSecOffset(AT.stmt_list);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"        try seekable.seekTo(line_info_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"        var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1268","line":"        const unit_length = try readUnitLength(in, di.endian, &is_64);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1269","line":"        if (unit_length == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1270","line":"            return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1271","line":"        }"},
{"lineNum":" 1272","line":"        const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1273","line":""},
{"lineNum":" 1274","line":"        const version = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1275","line":"        if (version < 2) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"        var addr_size: u8 = if (is_64) 8 else 4;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1278","line":"        var seg_size: u8 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1279","line":"        if (version >= 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1280","line":"            addr_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1281","line":"            seg_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1282","line":"        }"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"        const prologue_length = if (is_64) try in.readInt(u64, di.endian) else try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1285","line":"        const prog_start_offset = (try seekable.getPos()) + prologue_length;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"        const minimum_instruction_length = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1288","line":"        if (minimum_instruction_length == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"        if (version >= 4) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1291","line":"            // maximum_operations_per_instruction"},
{"lineNum":" 1292","line":"            _ = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1293","line":"        }"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"        const default_is_stmt = (try in.readByte()) != 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1296","line":"        const line_base = try in.readByteSigned();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"        const line_range = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1299","line":"        if (line_range == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"        const opcode_base = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"        const standard_opcode_lengths = try allocator.alloc(u8, opcode_base - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1304","line":"        defer allocator.free(standard_opcode_lengths);","class":"lineNoCov","hits":"0","possible_hits":"57",},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"        {"},
{"lineNum":" 1307","line":"            var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1308","line":"            while (i < opcode_base - 1) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1309","line":"                standard_opcode_lengths[i] = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1310","line":"            }"},
{"lineNum":" 1311","line":"        }"},
{"lineNum":" 1312","line":""},
{"lineNum":" 1313","line":"        var tmp_arena = std.heap.ArenaAllocator.init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1314","line":"        defer tmp_arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"56",},
{"lineNum":" 1315","line":"        const arena = tmp_arena.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"        var include_directories = std.ArrayList(FileEntry).init(arena);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1318","line":"        var file_entries = std.ArrayList(FileEntry).init(arena);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"        if (version < 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1321","line":"            try include_directories.append(.{ .path = compile_unit_cwd });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"            while (true) {"},
{"lineNum":" 1324","line":"                const dir = try in.readUntilDelimiterAlloc(arena, 0, math.maxInt(usize));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1325","line":"                if (dir.len == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1326","line":"                try include_directories.append(.{ .path = dir });","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1327","line":"            }"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":"            while (true) {"},
{"lineNum":" 1330","line":"                const file_name = try in.readUntilDelimiterAlloc(arena, 0, math.maxInt(usize));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1331","line":"                if (file_name.len == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1332","line":"                const dir_index = try leb.readULEB128(u32, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1333","line":"                const mtime = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1334","line":"                const size = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1335","line":"                try file_entries.append(FileEntry{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1336","line":"                    .path = file_name,"},
{"lineNum":" 1337","line":"                    .dir_index = dir_index,"},
{"lineNum":" 1338","line":"                    .mtime = mtime,"},
{"lineNum":" 1339","line":"                    .size = size,"},
{"lineNum":" 1340","line":"                });"},
{"lineNum":" 1341","line":"            }"},
{"lineNum":" 1342","line":"        } else {"},
{"lineNum":" 1343","line":"            const FileEntFmt = struct {"},
{"lineNum":" 1344","line":"                content_type_code: u8,"},
{"lineNum":" 1345","line":"                form_code: u16,"},
{"lineNum":" 1346","line":"            };"},
{"lineNum":" 1347","line":"            {"},
{"lineNum":" 1348","line":"                var dir_ent_fmt_buf: [10]FileEntFmt = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1349","line":"                const directory_entry_format_count = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1350","line":"                if (directory_entry_format_count > dir_ent_fmt_buf.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1351","line":"                for (dir_ent_fmt_buf[0..directory_entry_format_count]) |*ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1352","line":"                    ent_fmt.* = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1353","line":"                        .content_type_code = try leb.readULEB128(u8, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1354","line":"                        .form_code = try leb.readULEB128(u16, in),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1355","line":"                    };"},
{"lineNum":" 1356","line":"                }"},
{"lineNum":" 1357","line":""},
{"lineNum":" 1358","line":"                const directories_count = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1359","line":"                try include_directories.ensureUnusedCapacity(directories_count);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1360","line":"                {"},
{"lineNum":" 1361","line":"                    var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1362","line":"                    while (i < directories_count) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1363","line":"                        var e: FileEntry = .{ .path = &.{} };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1364","line":"                        for (dir_ent_fmt_buf[0..directory_entry_format_count]) |ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1365","line":"                            const form_value = try parseFormValue(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1366","line":"                                arena,"},
{"lineNum":" 1367","line":"                                in,"},
{"lineNum":" 1368","line":"                                ent_fmt.form_code,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1369","line":"                                di.endian,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1370","line":"                                is_64,"},
{"lineNum":" 1371","line":"                            );"},
{"lineNum":" 1372","line":"                            switch (ent_fmt.content_type_code) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1373","line":"                                LNCT.path => e.path = try form_value.getString(di.*),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1374","line":"                                LNCT.directory_index => e.dir_index = try form_value.getUInt(u32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1375","line":"                                LNCT.timestamp => e.mtime = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1376","line":"                                LNCT.size => e.size = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1377","line":"                                LNCT.MD5 => e.md5 = try form_value.getData16(),","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1378","line":"                                else => continue,"},
{"lineNum":" 1379","line":"                            }"},
{"lineNum":" 1380","line":"                        }"},
{"lineNum":" 1381","line":"                        include_directories.appendAssumeCapacity(e);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1382","line":"                    }"},
{"lineNum":" 1383","line":"                }"},
{"lineNum":" 1384","line":"            }"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":"            var file_ent_fmt_buf: [10]FileEntFmt = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1387","line":"            const file_name_entry_format_count = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1388","line":"            if (file_name_entry_format_count > file_ent_fmt_buf.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1389","line":"            for (file_ent_fmt_buf[0..file_name_entry_format_count]) |*ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1390","line":"                ent_fmt.* = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1391","line":"                    .content_type_code = try leb.readULEB128(u8, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1392","line":"                    .form_code = try leb.readULEB128(u16, in),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1393","line":"                };"},
{"lineNum":" 1394","line":"            }"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"            const file_names_count = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1397","line":"            try file_entries.ensureUnusedCapacity(file_names_count);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1398","line":"            {"},
{"lineNum":" 1399","line":"                var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1400","line":"                while (i < file_names_count) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1401","line":"                    var e: FileEntry = .{ .path = &.{} };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1402","line":"                    for (file_ent_fmt_buf[0..file_name_entry_format_count]) |ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1403","line":"                        const form_value = try parseFormValue(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1404","line":"                            arena,"},
{"lineNum":" 1405","line":"                            in,"},
{"lineNum":" 1406","line":"                            ent_fmt.form_code,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1407","line":"                            di.endian,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1408","line":"                            is_64,"},
{"lineNum":" 1409","line":"                        );"},
{"lineNum":" 1410","line":"                        switch (ent_fmt.content_type_code) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1411","line":"                            LNCT.path => e.path = try form_value.getString(di.*),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1412","line":"                            LNCT.directory_index => e.dir_index = try form_value.getUInt(u32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1413","line":"                            LNCT.timestamp => e.mtime = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1414","line":"                            LNCT.size => e.size = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1415","line":"                            LNCT.MD5 => e.md5 = try form_value.getData16(),","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1416","line":"                            else => continue,"},
{"lineNum":" 1417","line":"                        }"},
{"lineNum":" 1418","line":"                    }"},
{"lineNum":" 1419","line":"                    file_entries.appendAssumeCapacity(e);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1420","line":"                }"},
{"lineNum":" 1421","line":"            }"},
{"lineNum":" 1422","line":"        }"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"        var prog = LineNumberProgram.init(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1425","line":"            default_is_stmt,"},
{"lineNum":" 1426","line":"            include_directories.items,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1427","line":"            target_address,"},
{"lineNum":" 1428","line":"            version,"},
{"lineNum":" 1429","line":"        );"},
{"lineNum":" 1430","line":""},
{"lineNum":" 1431","line":"        try seekable.seekTo(prog_start_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"        const next_unit_pos = line_info_offset + next_offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1434","line":""},
{"lineNum":" 1435","line":"        while ((try seekable.getPos()) < next_unit_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1436","line":"            const opcode = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"            if (opcode == LNS.extended_op) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1439","line":"                const op_size = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1440","line":"                if (op_size < 1) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1441","line":"                var sub_op = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1442","line":"                switch (sub_op) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1443","line":"                    LNE.end_sequence => {"},
{"lineNum":" 1444","line":"                        prog.end_sequence = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1445","line":"                        if (try prog.checkLineMatch(allocator, file_entries.items)) |info| return info;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1446","line":"                        prog.reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1447","line":"                    },"},
{"lineNum":" 1448","line":"                    LNE.set_address => {"},
{"lineNum":" 1449","line":"                        const addr = try in.readInt(usize, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1450","line":"                        prog.address = addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1451","line":"                    },"},
{"lineNum":" 1452","line":"                    LNE.define_file => {"},
{"lineNum":" 1453","line":"                        const path = try in.readUntilDelimiterAlloc(arena, 0, math.maxInt(usize));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1454","line":"                        const dir_index = try leb.readULEB128(u32, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1455","line":"                        const mtime = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1456","line":"                        const size = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1457","line":"                        try file_entries.append(FileEntry{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1458","line":"                            .path = path,"},
{"lineNum":" 1459","line":"                            .dir_index = dir_index,"},
{"lineNum":" 1460","line":"                            .mtime = mtime,"},
{"lineNum":" 1461","line":"                            .size = size,"},
{"lineNum":" 1462","line":"                        });"},
{"lineNum":" 1463","line":"                    },"},
{"lineNum":" 1464","line":"                    else => {"},
{"lineNum":" 1465","line":"                        const fwd_amt = math.cast(isize, op_size - 1) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1466","line":"                        try seekable.seekBy(fwd_amt);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1467","line":"                    },"},
{"lineNum":" 1468","line":"                }"},
{"lineNum":" 1469","line":"            } else if (opcode >= opcode_base) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1470","line":"                // special opcodes"},
{"lineNum":" 1471","line":"                const adjusted_opcode = opcode - opcode_base;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1472","line":"                const inc_addr = minimum_instruction_length * (adjusted_opcode / line_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1473","line":"                const inc_line = @as(i32, line_base) + @as(i32, adjusted_opcode % line_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1474","line":"                prog.line += inc_line;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1475","line":"                prog.address += inc_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1476","line":"                if (try prog.checkLineMatch(allocator, file_entries.items)) |info| return info;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1477","line":"                prog.basic_block = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1478","line":"            } else {"},
{"lineNum":" 1479","line":"                switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1480","line":"                    LNS.copy => {"},
{"lineNum":" 1481","line":"                        if (try prog.checkLineMatch(allocator, file_entries.items)) |info| return info;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1482","line":"                        prog.basic_block = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1483","line":"                    },"},
{"lineNum":" 1484","line":"                    LNS.advance_pc => {"},
{"lineNum":" 1485","line":"                        const arg = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1486","line":"                        prog.address += arg * minimum_instruction_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1487","line":"                    },"},
{"lineNum":" 1488","line":"                    LNS.advance_line => {"},
{"lineNum":" 1489","line":"                        const arg = try leb.readILEB128(i64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1490","line":"                        prog.line += arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1491","line":"                    },"},
{"lineNum":" 1492","line":"                    LNS.set_file => {"},
{"lineNum":" 1493","line":"                        const arg = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1494","line":"                        prog.file = arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1495","line":"                    },"},
{"lineNum":" 1496","line":"                    LNS.set_column => {"},
{"lineNum":" 1497","line":"                        const arg = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1498","line":"                        prog.column = arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1499","line":"                    },"},
{"lineNum":" 1500","line":"                    LNS.negate_stmt => {"},
{"lineNum":" 1501","line":"                        prog.is_stmt = !prog.is_stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1502","line":"                    },"},
{"lineNum":" 1503","line":"                    LNS.set_basic_block => {"},
{"lineNum":" 1504","line":"                        prog.basic_block = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1505","line":"                    },"},
{"lineNum":" 1506","line":"                    LNS.const_add_pc => {"},
{"lineNum":" 1507","line":"                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1508","line":"                        prog.address += inc_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1509","line":"                    },"},
{"lineNum":" 1510","line":"                    LNS.fixed_advance_pc => {"},
{"lineNum":" 1511","line":"                        const arg = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1512","line":"                        prog.address += arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1513","line":"                    },"},
{"lineNum":" 1514","line":"                    LNS.set_prologue_end => {},"},
{"lineNum":" 1515","line":"                    else => {"},
{"lineNum":" 1516","line":"                        if (opcode - 1 >= standard_opcode_lengths.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1517","line":"                        const len_bytes = standard_opcode_lengths[opcode - 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1518","line":"                        try seekable.seekBy(len_bytes);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1519","line":"                    },"},
{"lineNum":" 1520","line":"                }"},
{"lineNum":" 1521","line":"            }"},
{"lineNum":" 1522","line":"        }"},
{"lineNum":" 1523","line":""},
{"lineNum":" 1524","line":"        return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1525","line":"    }"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"    fn getString(di: DwarfInfo, offset: u64) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1528","line":"        return getStringGeneric(di.section(.debug_str), offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1529","line":"    }"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"    fn getLineString(di: DwarfInfo, offset: u64) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1532","line":"        return getStringGeneric(di.section(.debug_line_str), offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1533","line":"    }"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"    fn readDebugAddr(di: DwarfInfo, compile_unit: CompileUnit, index: u64) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1536","line":"        const debug_addr = di.section(.debug_addr) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"        // addr_base points to the first item after the header, however we"},
{"lineNum":" 1539","line":"        // need to read the header to know the size of each item. Empirically,"},
{"lineNum":" 1540","line":"        // it may disagree with is_64 on the compile unit."},
{"lineNum":" 1541","line":"        // The header is 8 or 12 bytes depending on is_64."},
{"lineNum":" 1542","line":"        if (compile_unit.addr_base < 8) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1543","line":""},
{"lineNum":" 1544","line":"        const version = mem.readInt(u16, debug_addr[compile_unit.addr_base - 4 ..][0..2], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1545","line":"        if (version != 5) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1546","line":""},
{"lineNum":" 1547","line":"        const addr_size = debug_addr[compile_unit.addr_base - 2];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1548","line":"        const seg_size = debug_addr[compile_unit.addr_base - 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"        const byte_offset = @as(usize, @intCast(compile_unit.addr_base + (addr_size + seg_size) * index));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1551","line":"        if (byte_offset + addr_size > debug_addr.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1552","line":"        return switch (addr_size) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1553","line":"            1 => debug_addr[byte_offset],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1554","line":"            2 => mem.readInt(u16, debug_addr[byte_offset..][0..2], di.endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1555","line":"            4 => mem.readInt(u32, debug_addr[byte_offset..][0..4], di.endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1556","line":"            8 => mem.readInt(u64, debug_addr[byte_offset..][0..8], di.endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1557","line":"            else => badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1558","line":"        };"},
{"lineNum":" 1559","line":"    }"},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"    /// If .eh_frame_hdr is present, then only the header needs to be parsed."},
{"lineNum":" 1562","line":"    ///"},
{"lineNum":" 1563","line":"    /// Otherwise, .eh_frame and .debug_frame are scanned and a sorted list"},
{"lineNum":" 1564","line":"    /// of FDEs is built for binary searching during unwinding."},
{"lineNum":" 1565","line":"    pub fn scanAllUnwindInfo(di: *DwarfInfo, allocator: mem.Allocator, base_address: usize) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1566","line":"        if (di.section(.eh_frame_hdr)) |eh_frame_hdr| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1567","line":"            var stream = io.fixedBufferStream(eh_frame_hdr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1568","line":"            const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"            const version = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1571","line":"            if (version != 1) break :blk;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1572","line":""},
{"lineNum":" 1573","line":"            const eh_frame_ptr_enc = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1574","line":"            if (eh_frame_ptr_enc == EH.PE.omit) break :blk;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1575","line":"            const fde_count_enc = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1576","line":"            if (fde_count_enc == EH.PE.omit) break :blk;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1577","line":"            const table_enc = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1578","line":"            if (table_enc == EH.PE.omit) break :blk;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1579","line":""},
{"lineNum":" 1580","line":"            const eh_frame_ptr = std.math.cast(usize, try readEhPointer(reader, eh_frame_ptr_enc, @sizeOf(usize), .{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1581","line":"                .pc_rel_base = @intFromPtr(&eh_frame_hdr[stream.pos]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1582","line":"                .follow_indirect = true,"},
{"lineNum":" 1583","line":"            }, builtin.cpu.arch.endian()) orelse return badDwarf()) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"            const fde_count = std.math.cast(usize, try readEhPointer(reader, fde_count_enc, @sizeOf(usize), .{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1586","line":"                .pc_rel_base = @intFromPtr(&eh_frame_hdr[stream.pos]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1587","line":"                .follow_indirect = true,"},
{"lineNum":" 1588","line":"            }, builtin.cpu.arch.endian()) orelse return badDwarf()) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1589","line":""},
{"lineNum":" 1590","line":"            const entry_size = try ExceptionFrameHeader.entrySize(table_enc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1591","line":"            const entries_len = fde_count * entry_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1592","line":"            if (entries_len > eh_frame_hdr.len - stream.pos) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"            di.eh_frame_hdr = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1595","line":"                .eh_frame_ptr = eh_frame_ptr,"},
{"lineNum":" 1596","line":"                .table_enc = table_enc,"},
{"lineNum":" 1597","line":"                .fde_count = fde_count,"},
{"lineNum":" 1598","line":"                .entries = eh_frame_hdr[stream.pos..][0..entries_len],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1599","line":"            };"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"            // No need to scan .eh_frame, we have a binary search table already"},
{"lineNum":" 1602","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1603","line":"        }"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"        const frame_sections = [2]DwarfSection{ .eh_frame, .debug_frame };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1606","line":"        for (frame_sections) |frame_section| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1607","line":"            if (di.section(frame_section)) |section_data| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1608","line":"                var stream = io.fixedBufferStream(section_data);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1609","line":"                while (stream.pos < stream.buffer.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1610","line":"                    const entry_header = try EntryHeader.read(&stream, frame_section, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1611","line":"                    switch (entry_header.type) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1612","line":"                        .cie => {"},
{"lineNum":" 1613","line":"                            const cie = try CommonInformationEntry.parse(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1614","line":"                                entry_header.entry_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1615","line":"                                di.sectionVirtualOffset(frame_section, base_address).?,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1616","line":"                                true,"},
{"lineNum":" 1617","line":"                                entry_header.is_64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1618","line":"                                frame_section,"},
{"lineNum":" 1619","line":"                                entry_header.length_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1620","line":"                                @sizeOf(usize),"},
{"lineNum":" 1621","line":"                                di.endian,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1622","line":"                            );"},
{"lineNum":" 1623","line":"                            try di.cie_map.put(allocator, entry_header.length_offset, cie);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1624","line":"                        },"},
{"lineNum":" 1625","line":"                        .fde => |cie_offset| {"},
{"lineNum":" 1626","line":"                            const cie = di.cie_map.get(cie_offset) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1627","line":"                            const fde = try FrameDescriptionEntry.parse(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1628","line":"                                entry_header.entry_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1629","line":"                                di.sectionVirtualOffset(frame_section, base_address).?,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1630","line":"                                true,"},
{"lineNum":" 1631","line":"                                cie,"},
{"lineNum":" 1632","line":"                                @sizeOf(usize),"},
{"lineNum":" 1633","line":"                                di.endian,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1634","line":"                            );"},
{"lineNum":" 1635","line":"                            try di.fde_list.append(allocator, fde);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1636","line":"                        },"},
{"lineNum":" 1637","line":"                        .terminator => break,"},
{"lineNum":" 1638","line":"                    }"},
{"lineNum":" 1639","line":"                }"},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"                std.mem.sortUnstable(FrameDescriptionEntry, di.fde_list.items, {}, struct {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1642","line":"                    fn lessThan(ctx: void, a: FrameDescriptionEntry, b: FrameDescriptionEntry) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1643","line":"                        _ = ctx;"},
{"lineNum":" 1644","line":"                        return a.pc_begin < b.pc_begin;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1645","line":"                    }"},
{"lineNum":" 1646","line":"                }.lessThan);"},
{"lineNum":" 1647","line":"            }"},
{"lineNum":" 1648","line":"        }"},
{"lineNum":" 1649","line":"    }"},
{"lineNum":" 1650","line":""},
{"lineNum":" 1651","line":"    /// Unwind a stack frame using DWARF unwinding info, updating the register context."},
{"lineNum":" 1652","line":"    ///"},
{"lineNum":" 1653","line":"    /// If `.eh_frame_hdr` is available, it will be used to binary search for the FDE."},
{"lineNum":" 1654","line":"    /// Otherwise, a linear scan of `.eh_frame` and `.debug_frame` is done to find the FDE."},
{"lineNum":" 1655","line":"    ///"},
{"lineNum":" 1656","line":"    /// `explicit_fde_offset` is for cases where the FDE offset is known, such as when __unwind_info"},
{"lineNum":" 1657","line":"    /// defers unwinding to DWARF. This is an offset into the `.eh_frame` section."},
{"lineNum":" 1658","line":"    pub fn unwindFrame(di: *const DwarfInfo, context: *UnwindContext, explicit_fde_offset: ?usize) !usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1659","line":"        if (!comptime abi.supportsUnwinding(builtin.target)) return error.UnsupportedCpuArchitecture;"},
{"lineNum":" 1660","line":"        if (context.pc == 0) return 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"        // Find the FDE and CIE"},
{"lineNum":" 1663","line":"        var cie: CommonInformationEntry = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1664","line":"        var fde: FrameDescriptionEntry = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"        if (explicit_fde_offset) |fde_offset| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1667","line":"            const dwarf_section: DwarfSection = .eh_frame;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1668","line":"            const frame_section = di.section(dwarf_section) orelse return error.MissingFDE;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1669","line":"            if (fde_offset >= frame_section.len) return error.MissingFDE;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"            var stream = io.fixedBufferStream(frame_section);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1672","line":"            try stream.seekTo(fde_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1673","line":""},
{"lineNum":" 1674","line":"            const fde_entry_header = try EntryHeader.read(&stream, dwarf_section, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1675","line":"            if (fde_entry_header.type != .fde) return error.MissingFDE;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1676","line":""},
{"lineNum":" 1677","line":"            const cie_offset = fde_entry_header.type.fde;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1678","line":"            try stream.seekTo(cie_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"            const cie_entry_header = try EntryHeader.read(&stream, dwarf_section, builtin.cpu.arch.endian());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1681","line":"            if (cie_entry_header.type != .cie) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"            cie = try CommonInformationEntry.parse(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1684","line":"                cie_entry_header.entry_bytes,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1685","line":"                0,"},
{"lineNum":" 1686","line":"                true,"},
{"lineNum":" 1687","line":"                cie_entry_header.is_64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1688","line":"                dwarf_section,"},
{"lineNum":" 1689","line":"                cie_entry_header.length_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1690","line":"                @sizeOf(usize),"},
{"lineNum":" 1691","line":"                builtin.cpu.arch.endian(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1692","line":"            );"},
{"lineNum":" 1693","line":""},
{"lineNum":" 1694","line":"            fde = try FrameDescriptionEntry.parse(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1695","line":"                fde_entry_header.entry_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1696","line":"                0,"},
{"lineNum":" 1697","line":"                true,"},
{"lineNum":" 1698","line":"                cie,"},
{"lineNum":" 1699","line":"                @sizeOf(usize),"},
{"lineNum":" 1700","line":"                builtin.cpu.arch.endian(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1701","line":"            );"},
{"lineNum":" 1702","line":"        } else if (di.eh_frame_hdr) |header| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1703","line":"            const eh_frame_len = if (di.section(.eh_frame)) |eh_frame| eh_frame.len else null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1704","line":"            try header.findEntry(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1705","line":"                context.isValidMemory,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1706","line":"                eh_frame_len,"},
{"lineNum":" 1707","line":"                @intFromPtr(di.section(.eh_frame_hdr).?.ptr),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1708","line":"                context.pc,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1709","line":"                &cie,"},
{"lineNum":" 1710","line":"                &fde,"},
{"lineNum":" 1711","line":"            );"},
{"lineNum":" 1712","line":"        } else {"},
{"lineNum":" 1713","line":"            const index = std.sort.binarySearch(FrameDescriptionEntry, context.pc, di.fde_list.items, {}, struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1714","line":"                pub fn compareFn(_: void, pc: usize, mid_item: FrameDescriptionEntry) std.math.Order {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1715","line":"                    if (pc < mid_item.pc_begin) return .lt;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"                    const range_end = mid_item.pc_begin + mid_item.pc_range;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1718","line":"                    if (pc < range_end) return .eq;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1719","line":""},
{"lineNum":" 1720","line":"                    return .gt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1721","line":"                }"},
{"lineNum":" 1722","line":"            }.compareFn);"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"            fde = if (index) |i| di.fde_list.items[i] else return error.MissingFDE;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1725","line":"            cie = di.cie_map.get(fde.cie_length_offset) orelse return error.MissingCIE;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1726","line":"        }"},
{"lineNum":" 1727","line":""},
{"lineNum":" 1728","line":"        var expression_context = .{"},
{"lineNum":" 1729","line":"            .is_64 = cie.is_64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1730","line":"            .isValidMemory = context.isValidMemory,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1731","line":"            .compile_unit = di.findCompileUnit(fde.pc_begin) catch null,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1732","line":"            .thread_context = context.thread_context,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1733","line":"            .reg_context = context.reg_context,"},
{"lineNum":" 1734","line":"            .cfa = context.cfa,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1735","line":"        };"},
{"lineNum":" 1736","line":""},
{"lineNum":" 1737","line":"        context.vm.reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1738","line":"        context.reg_context.eh_frame = cie.version != 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1739","line":"        context.reg_context.is_macho = di.is_macho;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"        const row = try context.vm.runToNative(context.allocator, context.pc, cie, fde);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1742","line":"        context.cfa = switch (row.cfa.rule) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1743","line":"            .val_offset => |offset| blk: {"},
{"lineNum":" 1744","line":"                const register = row.cfa.register orelse return error.InvalidCFARule;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1745","line":"                const value = mem.readIntSliceNative(usize, try abi.regBytes(context.thread_context, register, context.reg_context));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1746","line":"                break :blk try call_frame.applyOffset(value, offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1747","line":"            },"},
{"lineNum":" 1748","line":"            .expression => |expression| blk: {"},
{"lineNum":" 1749","line":"                context.stack_machine.reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1750","line":"                const value = try context.stack_machine.run(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1751","line":"                    expression,"},
{"lineNum":" 1752","line":"                    context.allocator,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1753","line":"                    expression_context,"},
{"lineNum":" 1754","line":"                    context.cfa,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1755","line":"                );"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"                if (value) |v| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1758","line":"                    if (v != .generic) return error.InvalidExpressionValue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1759","line":"                    break :blk v.generic;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1760","line":"                } else return error.NoExpressionValue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1761","line":"            },"},
{"lineNum":" 1762","line":"            else => return error.InvalidCFARule,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1763","line":"        };"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"        if (!context.isValidMemory(context.cfa.?)) return error.InvalidCFA;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1766","line":"        expression_context.cfa = context.cfa;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"        // Buffering the modifications is done because copying the thread context is not portable,"},
{"lineNum":" 1769","line":"        // some implementations (ie. darwin) use internal pointers to the mcontext."},
{"lineNum":" 1770","line":"        var arena = std.heap.ArenaAllocator.init(context.allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1771","line":"        defer arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1772","line":"        const update_allocator = arena.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1773","line":""},
{"lineNum":" 1774","line":"        const RegisterUpdate = struct {"},
{"lineNum":" 1775","line":"            // Backed by thread_context"},
{"lineNum":" 1776","line":"            dest: []u8,"},
{"lineNum":" 1777","line":"            // Backed by arena"},
{"lineNum":" 1778","line":"            src: []const u8,"},
{"lineNum":" 1779","line":"            prev: ?*@This(),"},
{"lineNum":" 1780","line":"        };"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"        var update_tail: ?*RegisterUpdate = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1783","line":"        var has_return_address = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1784","line":"        for (context.vm.rowColumns(row)) |column| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1785","line":"            if (column.register) |register| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1786","line":"                if (register == cie.return_address_register) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1787","line":"                    has_return_address = column.rule != .undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1788","line":"                }"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"                const dest = try abi.regBytes(context.thread_context, register, context.reg_context);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1791","line":"                const src = try update_allocator.alloc(u8, dest.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1792","line":""},
{"lineNum":" 1793","line":"                const prev = update_tail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1794","line":"                update_tail = try update_allocator.create(RegisterUpdate);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1795","line":"                update_tail.?.* = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1796","line":"                    .dest = dest,"},
{"lineNum":" 1797","line":"                    .src = src,"},
{"lineNum":" 1798","line":"                    .prev = prev,"},
{"lineNum":" 1799","line":"                };"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"                try column.resolveValue(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1802","line":"                    context,"},
{"lineNum":" 1803","line":"                    expression_context,"},
{"lineNum":" 1804","line":"                    src,"},
{"lineNum":" 1805","line":"                );"},
{"lineNum":" 1806","line":"            }"},
{"lineNum":" 1807","line":"        }"},
{"lineNum":" 1808","line":""},
{"lineNum":" 1809","line":"        // On all implemented architectures, the CFA is defined as being the previous frame\'s SP"},
{"lineNum":" 1810","line":"        (try abi.regValueNative(usize, context.thread_context, abi.spRegNum(context.reg_context), context.reg_context)).* = context.cfa.?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"        while (update_tail) |tail| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1813","line":"            @memcpy(tail.dest, tail.src);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1814","line":"            update_tail = tail.prev;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1815","line":"        }"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"        if (has_return_address) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1818","line":"            context.pc = abi.stripInstructionPtrAuthCode(mem.readIntSliceNative(usize, try abi.regBytes(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1819","line":"                context.thread_context,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1820","line":"                cie.return_address_register,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1821","line":"                context.reg_context,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1822","line":"            )));"},
{"lineNum":" 1823","line":"        } else {"},
{"lineNum":" 1824","line":"            context.pc = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1825","line":"        }"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"        (try abi.regValueNative(usize, context.thread_context, abi.ipRegNum(), context.reg_context)).* = context.pc;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1828","line":""},
{"lineNum":" 1829","line":"        // The call instruction will have pushed the address of the instruction that follows the call as the return address."},
{"lineNum":" 1830","line":"        // This next instruction may be past the end of the function if the caller was `noreturn` (ie. the last instruction in"},
{"lineNum":" 1831","line":"        // the function was the call). If we were to look up an FDE entry using the return address directly, it could end up"},
{"lineNum":" 1832","line":"        // either not finding an FDE at all, or using the next FDE in the program, producing incorrect results. To prevent this,"},
{"lineNum":" 1833","line":"        // we subtract one so that the next lookup is guaranteed to land inside the"},
{"lineNum":" 1834","line":"        //"},
{"lineNum":" 1835","line":"        // The exception to this rule is signal frames, where we return execution would be returned to the instruction"},
{"lineNum":" 1836","line":"        // that triggered the handler."},
{"lineNum":" 1837","line":"        const return_address = context.pc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1838","line":"        if (context.pc > 0 and !cie.isSignalFrame()) context.pc -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"        return return_address;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1841","line":"    }"},
{"lineNum":" 1842","line":"};"},
{"lineNum":" 1843","line":""},
{"lineNum":" 1844","line":"/// Returns the DWARF register number for an x86_64 register number found in compact unwind info"},
{"lineNum":" 1845","line":"fn compactUnwindToDwarfRegNumber(unwind_reg_number: u3) !u8 {"},
{"lineNum":" 1846","line":"    return switch (unwind_reg_number) {"},
{"lineNum":" 1847","line":"        1 => 3, // RBX"},
{"lineNum":" 1848","line":"        2 => 12, // R12"},
{"lineNum":" 1849","line":"        3 => 13, // R13"},
{"lineNum":" 1850","line":"        4 => 14, // R14"},
{"lineNum":" 1851","line":"        5 => 15, // R15"},
{"lineNum":" 1852","line":"        6 => 6, // RBP"},
{"lineNum":" 1853","line":"        else => error.InvalidUnwindRegisterNumber,"},
{"lineNum":" 1854","line":"    };"},
{"lineNum":" 1855","line":"}"},
{"lineNum":" 1856","line":""},
{"lineNum":" 1857","line":"const macho = std.macho;"},
{"lineNum":" 1858","line":""},
{"lineNum":" 1859","line":"/// Unwind a frame using MachO compact unwind info (from __unwind_info)."},
{"lineNum":" 1860","line":"/// If the compact encoding can\'t encode a way to unwind a frame, it will"},
{"lineNum":" 1861","line":"/// defer unwinding to DWARF, in which case `.eh_frame` will be used if available."},
{"lineNum":" 1862","line":"pub fn unwindFrameMachO(context: *UnwindContext, unwind_info: []const u8, eh_frame: ?[]const u8, module_base_address: usize) !usize {"},
{"lineNum":" 1863","line":"    const header = mem.bytesAsValue("},
{"lineNum":" 1864","line":"        macho.unwind_info_section_header,"},
{"lineNum":" 1865","line":"        unwind_info[0..@sizeOf(macho.unwind_info_section_header)],"},
{"lineNum":" 1866","line":"    );"},
{"lineNum":" 1867","line":"    const indices = mem.bytesAsSlice("},
{"lineNum":" 1868","line":"        macho.unwind_info_section_header_index_entry,"},
{"lineNum":" 1869","line":"        unwind_info[header.indexSectionOffset..][0 .. header.indexCount * @sizeOf(macho.unwind_info_section_header_index_entry)],"},
{"lineNum":" 1870","line":"    );"},
{"lineNum":" 1871","line":"    if (indices.len == 0) return error.MissingUnwindInfo;"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"    const mapped_pc = context.pc - module_base_address;"},
{"lineNum":" 1874","line":"    const second_level_index = blk: {"},
{"lineNum":" 1875","line":"        var left: usize = 0;"},
{"lineNum":" 1876","line":"        var len: usize = indices.len;"},
{"lineNum":" 1877","line":""},
{"lineNum":" 1878","line":"        while (len > 1) {"},
{"lineNum":" 1879","line":"            const mid = left + len / 2;"},
{"lineNum":" 1880","line":"            const offset = indices[mid].functionOffset;"},
{"lineNum":" 1881","line":"            if (mapped_pc < offset) {"},
{"lineNum":" 1882","line":"                len /= 2;"},
{"lineNum":" 1883","line":"            } else {"},
{"lineNum":" 1884","line":"                left = mid;"},
{"lineNum":" 1885","line":"                if (mapped_pc == offset) break;"},
{"lineNum":" 1886","line":"                len -= len / 2;"},
{"lineNum":" 1887","line":"            }"},
{"lineNum":" 1888","line":"        }"},
{"lineNum":" 1889","line":""},
{"lineNum":" 1890","line":"        // Last index is a sentinel containing the highest address as its functionOffset"},
{"lineNum":" 1891","line":"        if (indices[left].secondLevelPagesSectionOffset == 0) return error.MissingUnwindInfo;"},
{"lineNum":" 1892","line":"        break :blk &indices[left];"},
{"lineNum":" 1893","line":"    };"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"    const common_encodings = mem.bytesAsSlice("},
{"lineNum":" 1896","line":"        macho.compact_unwind_encoding_t,"},
{"lineNum":" 1897","line":"        unwind_info[header.commonEncodingsArraySectionOffset..][0 .. header.commonEncodingsArrayCount * @sizeOf(macho.compact_unwind_encoding_t)],"},
{"lineNum":" 1898","line":"    );"},
{"lineNum":" 1899","line":""},
{"lineNum":" 1900","line":"    const start_offset = second_level_index.secondLevelPagesSectionOffset;"},
{"lineNum":" 1901","line":"    const kind = mem.bytesAsValue("},
{"lineNum":" 1902","line":"        macho.UNWIND_SECOND_LEVEL,"},
{"lineNum":" 1903","line":"        unwind_info[start_offset..][0..@sizeOf(macho.UNWIND_SECOND_LEVEL)],"},
{"lineNum":" 1904","line":"    );"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"    const entry: struct {"},
{"lineNum":" 1907","line":"        function_offset: usize,"},
{"lineNum":" 1908","line":"        raw_encoding: u32,"},
{"lineNum":" 1909","line":"    } = switch (kind.*) {"},
{"lineNum":" 1910","line":"        .REGULAR => blk: {"},
{"lineNum":" 1911","line":"            const page_header = mem.bytesAsValue("},
{"lineNum":" 1912","line":"                macho.unwind_info_regular_second_level_page_header,"},
{"lineNum":" 1913","line":"                unwind_info[start_offset..][0..@sizeOf(macho.unwind_info_regular_second_level_page_header)],"},
{"lineNum":" 1914","line":"            );"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"            const entries = mem.bytesAsSlice("},
{"lineNum":" 1917","line":"                macho.unwind_info_regular_second_level_entry,"},
{"lineNum":" 1918","line":"                unwind_info[start_offset + page_header.entryPageOffset ..][0 .. page_header.entryCount * @sizeOf(macho.unwind_info_regular_second_level_entry)],"},
{"lineNum":" 1919","line":"            );"},
{"lineNum":" 1920","line":"            if (entries.len == 0) return error.InvalidUnwindInfo;"},
{"lineNum":" 1921","line":""},
{"lineNum":" 1922","line":"            var left: usize = 0;"},
{"lineNum":" 1923","line":"            var len: usize = entries.len;"},
{"lineNum":" 1924","line":"            while (len > 1) {"},
{"lineNum":" 1925","line":"                const mid = left + len / 2;"},
{"lineNum":" 1926","line":"                const offset = entries[mid].functionOffset;"},
{"lineNum":" 1927","line":"                if (mapped_pc < offset) {"},
{"lineNum":" 1928","line":"                    len /= 2;"},
{"lineNum":" 1929","line":"                } else {"},
{"lineNum":" 1930","line":"                    left = mid;"},
{"lineNum":" 1931","line":"                    if (mapped_pc == offset) break;"},
{"lineNum":" 1932","line":"                    len -= len / 2;"},
{"lineNum":" 1933","line":"                }"},
{"lineNum":" 1934","line":"            }"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"            break :blk .{"},
{"lineNum":" 1937","line":"                .function_offset = entries[left].functionOffset,"},
{"lineNum":" 1938","line":"                .raw_encoding = entries[left].encoding,"},
{"lineNum":" 1939","line":"            };"},
{"lineNum":" 1940","line":"        },"},
{"lineNum":" 1941","line":"        .COMPRESSED => blk: {"},
{"lineNum":" 1942","line":"            const page_header = mem.bytesAsValue("},
{"lineNum":" 1943","line":"                macho.unwind_info_compressed_second_level_page_header,"},
{"lineNum":" 1944","line":"                unwind_info[start_offset..][0..@sizeOf(macho.unwind_info_compressed_second_level_page_header)],"},
{"lineNum":" 1945","line":"            );"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"            const entries = mem.bytesAsSlice("},
{"lineNum":" 1948","line":"                macho.UnwindInfoCompressedEntry,"},
{"lineNum":" 1949","line":"                unwind_info[start_offset + page_header.entryPageOffset ..][0 .. page_header.entryCount * @sizeOf(macho.UnwindInfoCompressedEntry)],"},
{"lineNum":" 1950","line":"            );"},
{"lineNum":" 1951","line":"            if (entries.len == 0) return error.InvalidUnwindInfo;"},
{"lineNum":" 1952","line":""},
{"lineNum":" 1953","line":"            var left: usize = 0;"},
{"lineNum":" 1954","line":"            var len: usize = entries.len;"},
{"lineNum":" 1955","line":"            while (len > 1) {"},
{"lineNum":" 1956","line":"                const mid = left + len / 2;"},
{"lineNum":" 1957","line":"                const offset = second_level_index.functionOffset + entries[mid].funcOffset;"},
{"lineNum":" 1958","line":"                if (mapped_pc < offset) {"},
{"lineNum":" 1959","line":"                    len /= 2;"},
{"lineNum":" 1960","line":"                } else {"},
{"lineNum":" 1961","line":"                    left = mid;"},
{"lineNum":" 1962","line":"                    if (mapped_pc == offset) break;"},
{"lineNum":" 1963","line":"                    len -= len / 2;"},
{"lineNum":" 1964","line":"                }"},
{"lineNum":" 1965","line":"            }"},
{"lineNum":" 1966","line":""},
{"lineNum":" 1967","line":"            const entry = entries[left];"},
{"lineNum":" 1968","line":"            const function_offset = second_level_index.functionOffset + entry.funcOffset;"},
{"lineNum":" 1969","line":"            if (entry.encodingIndex < header.commonEncodingsArrayCount) {"},
{"lineNum":" 1970","line":"                if (entry.encodingIndex >= common_encodings.len) return error.InvalidUnwindInfo;"},
{"lineNum":" 1971","line":"                break :blk .{"},
{"lineNum":" 1972","line":"                    .function_offset = function_offset,"},
{"lineNum":" 1973","line":"                    .raw_encoding = common_encodings[entry.encodingIndex],"},
{"lineNum":" 1974","line":"                };"},
{"lineNum":" 1975","line":"            } else {"},
{"lineNum":" 1976","line":"                const local_index = try std.math.sub("},
{"lineNum":" 1977","line":"                    u8,"},
{"lineNum":" 1978","line":"                    entry.encodingIndex,"},
{"lineNum":" 1979","line":"                    std.math.cast(u8, header.commonEncodingsArrayCount) orelse return error.InvalidUnwindInfo,"},
{"lineNum":" 1980","line":"                );"},
{"lineNum":" 1981","line":"                const local_encodings = mem.bytesAsSlice("},
{"lineNum":" 1982","line":"                    macho.compact_unwind_encoding_t,"},
{"lineNum":" 1983","line":"                    unwind_info[start_offset + page_header.encodingsPageOffset ..][0 .. page_header.encodingsCount * @sizeOf(macho.compact_unwind_encoding_t)],"},
{"lineNum":" 1984","line":"                );"},
{"lineNum":" 1985","line":"                if (local_index >= local_encodings.len) return error.InvalidUnwindInfo;"},
{"lineNum":" 1986","line":"                break :blk .{"},
{"lineNum":" 1987","line":"                    .function_offset = function_offset,"},
{"lineNum":" 1988","line":"                    .raw_encoding = local_encodings[local_index],"},
{"lineNum":" 1989","line":"                };"},
{"lineNum":" 1990","line":"            }"},
{"lineNum":" 1991","line":"        },"},
{"lineNum":" 1992","line":"        else => return error.InvalidUnwindInfo,"},
{"lineNum":" 1993","line":"    };"},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"    if (entry.raw_encoding == 0) return error.NoUnwindInfo;"},
{"lineNum":" 1996","line":"    const reg_context = abi.RegisterContext{"},
{"lineNum":" 1997","line":"        .eh_frame = false,"},
{"lineNum":" 1998","line":"        .is_macho = true,"},
{"lineNum":" 1999","line":"    };"},
{"lineNum":" 2000","line":""},
{"lineNum":" 2001","line":"    const encoding: macho.CompactUnwindEncoding = @bitCast(entry.raw_encoding);"},
{"lineNum":" 2002","line":"    const new_ip = switch (builtin.cpu.arch) {"},
{"lineNum":" 2003","line":"        .x86_64 => switch (encoding.mode.x86_64) {"},
{"lineNum":" 2004","line":"            .OLD => return error.UnimplementedUnwindEncoding,"},
{"lineNum":" 2005","line":"            .RBP_FRAME => blk: {"},
{"lineNum":" 2006","line":"                const regs: [5]u3 = .{"},
{"lineNum":" 2007","line":"                    encoding.value.x86_64.frame.reg0,"},
{"lineNum":" 2008","line":"                    encoding.value.x86_64.frame.reg1,"},
{"lineNum":" 2009","line":"                    encoding.value.x86_64.frame.reg2,"},
{"lineNum":" 2010","line":"                    encoding.value.x86_64.frame.reg3,"},
{"lineNum":" 2011","line":"                    encoding.value.x86_64.frame.reg4,"},
{"lineNum":" 2012","line":"                };"},
{"lineNum":" 2013","line":""},
{"lineNum":" 2014","line":"                const frame_offset = encoding.value.x86_64.frame.frame_offset * @sizeOf(usize);"},
{"lineNum":" 2015","line":"                var max_reg: usize = 0;"},
{"lineNum":" 2016","line":"                inline for (regs, 0..) |reg, i| {"},
{"lineNum":" 2017","line":"                    if (reg > 0) max_reg = i;"},
{"lineNum":" 2018","line":"                }"},
{"lineNum":" 2019","line":""},
{"lineNum":" 2020","line":"                const fp = (try abi.regValueNative(usize, context.thread_context, abi.fpRegNum(reg_context), reg_context)).*;"},
{"lineNum":" 2021","line":"                const new_sp = fp + 2 * @sizeOf(usize);"},
{"lineNum":" 2022","line":""},
{"lineNum":" 2023","line":"                // Verify the stack range we\'re about to read register values from"},
{"lineNum":" 2024","line":"                if (!context.isValidMemory(new_sp) or !context.isValidMemory(fp - frame_offset + max_reg * @sizeOf(usize))) return error.InvalidUnwindInfo;"},
{"lineNum":" 2025","line":""},
{"lineNum":" 2026","line":"                const ip_ptr = fp + @sizeOf(usize);"},
{"lineNum":" 2027","line":"                const new_ip = @as(*const usize, @ptrFromInt(ip_ptr)).*;"},
{"lineNum":" 2028","line":"                const new_fp = @as(*const usize, @ptrFromInt(fp)).*;"},
{"lineNum":" 2029","line":""},
{"lineNum":" 2030","line":"                (try abi.regValueNative(usize, context.thread_context, abi.fpRegNum(reg_context), reg_context)).* = new_fp;"},
{"lineNum":" 2031","line":"                (try abi.regValueNative(usize, context.thread_context, abi.spRegNum(reg_context), reg_context)).* = new_sp;"},
{"lineNum":" 2032","line":"                (try abi.regValueNative(usize, context.thread_context, abi.ipRegNum(), reg_context)).* = new_ip;"},
{"lineNum":" 2033","line":""},
{"lineNum":" 2034","line":"                for (regs, 0..) |reg, i| {"},
{"lineNum":" 2035","line":"                    if (reg == 0) continue;"},
{"lineNum":" 2036","line":"                    const addr = fp - frame_offset + i * @sizeOf(usize);"},
{"lineNum":" 2037","line":"                    const reg_number = try compactUnwindToDwarfRegNumber(reg);"},
{"lineNum":" 2038","line":"                    (try abi.regValueNative(usize, context.thread_context, reg_number, reg_context)).* = @as(*const usize, @ptrFromInt(addr)).*;"},
{"lineNum":" 2039","line":"                }"},
{"lineNum":" 2040","line":""},
{"lineNum":" 2041","line":"                break :blk new_ip;"},
{"lineNum":" 2042","line":"            },"},
{"lineNum":" 2043","line":"            .STACK_IMMD,"},
{"lineNum":" 2044","line":"            .STACK_IND,"},
{"lineNum":" 2045","line":"            => blk: {"},
{"lineNum":" 2046","line":"                const sp = (try abi.regValueNative(usize, context.thread_context, abi.spRegNum(reg_context), reg_context)).*;"},
{"lineNum":" 2047","line":"                const stack_size = if (encoding.mode.x86_64 == .STACK_IMMD)"},
{"lineNum":" 2048","line":"                    @as(usize, encoding.value.x86_64.frameless.stack.direct.stack_size) * @sizeOf(usize)"},
{"lineNum":" 2049","line":"                else stack_size: {"},
{"lineNum":" 2050","line":"                    // In .STACK_IND, the stack size is inferred from the subq instruction at the beginning of the function."},
{"lineNum":" 2051","line":"                    const sub_offset_addr ="},
{"lineNum":" 2052","line":"                        module_base_address +"},
{"lineNum":" 2053","line":"                        entry.function_offset +"},
{"lineNum":" 2054","line":"                        encoding.value.x86_64.frameless.stack.indirect.sub_offset;"},
{"lineNum":" 2055","line":"                    if (!context.isValidMemory(sub_offset_addr)) return error.InvalidUnwindInfo;"},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"                    // `sub_offset_addr` points to the offset of the literal within the instruction"},
{"lineNum":" 2058","line":"                    const sub_operand = @as(*align(1) const u32, @ptrFromInt(sub_offset_addr)).*;"},
{"lineNum":" 2059","line":"                    break :stack_size sub_operand + @sizeOf(usize) * @as(usize, encoding.value.x86_64.frameless.stack.indirect.stack_adjust);"},
{"lineNum":" 2060","line":"                };"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"                // Decode the Lehmer-coded sequence of registers."},
{"lineNum":" 2063","line":"                // For a description of the encoding see lib/libc/include/any-macos.13-any/mach-o/compact_unwind_encoding.h"},
{"lineNum":" 2064","line":""},
{"lineNum":" 2065","line":"                // Decode the variable-based permutation number into its digits. Each digit represents"},
{"lineNum":" 2066","line":"                // an index into the list of register numbers that weren\'t yet used in the sequence at"},
{"lineNum":" 2067","line":"                // the time the digit was added."},
{"lineNum":" 2068","line":"                const reg_count = encoding.value.x86_64.frameless.stack_reg_count;"},
{"lineNum":" 2069","line":"                const ip_ptr = if (reg_count > 0) reg_blk: {"},
{"lineNum":" 2070","line":"                    var digits: [6]u3 = undefined;"},
{"lineNum":" 2071","line":"                    var accumulator: usize = encoding.value.x86_64.frameless.stack_reg_permutation;"},
{"lineNum":" 2072","line":"                    var base: usize = 2;"},
{"lineNum":" 2073","line":"                    for (0..reg_count) |i| {"},
{"lineNum":" 2074","line":"                        const div = accumulator / base;"},
{"lineNum":" 2075","line":"                        digits[digits.len - 1 - i] = @intCast(accumulator - base * div);"},
{"lineNum":" 2076","line":"                        accumulator = div;"},
{"lineNum":" 2077","line":"                        base += 1;"},
{"lineNum":" 2078","line":"                    }"},
{"lineNum":" 2079","line":""},
{"lineNum":" 2080","line":"                    const reg_numbers = [_]u3{ 1, 2, 3, 4, 5, 6 };"},
{"lineNum":" 2081","line":"                    var registers: [reg_numbers.len]u3 = undefined;"},
{"lineNum":" 2082","line":"                    var used_indices = [_]bool{false} ** reg_numbers.len;"},
{"lineNum":" 2083","line":"                    for (digits[digits.len - reg_count ..], 0..) |target_unused_index, i| {"},
{"lineNum":" 2084","line":"                        var unused_count: u8 = 0;"},
{"lineNum":" 2085","line":"                        const unused_index = for (used_indices, 0..) |used, index| {"},
{"lineNum":" 2086","line":"                            if (!used) {"},
{"lineNum":" 2087","line":"                                if (target_unused_index == unused_count) break index;"},
{"lineNum":" 2088","line":"                                unused_count += 1;"},
{"lineNum":" 2089","line":"                            }"},
{"lineNum":" 2090","line":"                        } else unreachable;"},
{"lineNum":" 2091","line":""},
{"lineNum":" 2092","line":"                        registers[i] = reg_numbers[unused_index];"},
{"lineNum":" 2093","line":"                        used_indices[unused_index] = true;"},
{"lineNum":" 2094","line":"                    }"},
{"lineNum":" 2095","line":""},
{"lineNum":" 2096","line":"                    var reg_addr = sp + stack_size - @sizeOf(usize) * @as(usize, reg_count + 1);"},
{"lineNum":" 2097","line":"                    if (!context.isValidMemory(reg_addr)) return error.InvalidUnwindInfo;"},
{"lineNum":" 2098","line":"                    for (0..reg_count) |i| {"},
{"lineNum":" 2099","line":"                        const reg_number = try compactUnwindToDwarfRegNumber(registers[i]);"},
{"lineNum":" 2100","line":"                        (try abi.regValueNative(usize, context.thread_context, reg_number, reg_context)).* = @as(*const usize, @ptrFromInt(reg_addr)).*;"},
{"lineNum":" 2101","line":"                        reg_addr += @sizeOf(usize);"},
{"lineNum":" 2102","line":"                    }"},
{"lineNum":" 2103","line":""},
{"lineNum":" 2104","line":"                    break :reg_blk reg_addr;"},
{"lineNum":" 2105","line":"                } else sp + stack_size - @sizeOf(usize);"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"                const new_ip = @as(*const usize, @ptrFromInt(ip_ptr)).*;"},
{"lineNum":" 2108","line":"                const new_sp = ip_ptr + @sizeOf(usize);"},
{"lineNum":" 2109","line":"                if (!context.isValidMemory(new_sp)) return error.InvalidUnwindInfo;"},
{"lineNum":" 2110","line":""},
{"lineNum":" 2111","line":"                (try abi.regValueNative(usize, context.thread_context, abi.spRegNum(reg_context), reg_context)).* = new_sp;"},
{"lineNum":" 2112","line":"                (try abi.regValueNative(usize, context.thread_context, abi.ipRegNum(), reg_context)).* = new_ip;"},
{"lineNum":" 2113","line":""},
{"lineNum":" 2114","line":"                break :blk new_ip;"},
{"lineNum":" 2115","line":"            },"},
{"lineNum":" 2116","line":"            .DWARF => {"},
{"lineNum":" 2117","line":"                return unwindFrameMachODwarf(context, eh_frame orelse return error.MissingEhFrame, @intCast(encoding.value.x86_64.dwarf));"},
{"lineNum":" 2118","line":"            },"},
{"lineNum":" 2119","line":"        },"},
{"lineNum":" 2120","line":"        .aarch64 => switch (encoding.mode.arm64) {"},
{"lineNum":" 2121","line":"            .OLD => return error.UnimplementedUnwindEncoding,"},
{"lineNum":" 2122","line":"            .FRAMELESS => blk: {"},
{"lineNum":" 2123","line":"                const sp = (try abi.regValueNative(usize, context.thread_context, abi.spRegNum(reg_context), reg_context)).*;"},
{"lineNum":" 2124","line":"                const new_sp = sp + encoding.value.arm64.frameless.stack_size * 16;"},
{"lineNum":" 2125","line":"                const new_ip = (try abi.regValueNative(usize, context.thread_context, 30, reg_context)).*;"},
{"lineNum":" 2126","line":"                if (!context.isValidMemory(new_sp)) return error.InvalidUnwindInfo;"},
{"lineNum":" 2127","line":"                (try abi.regValueNative(usize, context.thread_context, abi.spRegNum(reg_context), reg_context)).* = new_sp;"},
{"lineNum":" 2128","line":"                break :blk new_ip;"},
{"lineNum":" 2129","line":"            },"},
{"lineNum":" 2130","line":"            .DWARF => {"},
{"lineNum":" 2131","line":"                return unwindFrameMachODwarf(context, eh_frame orelse return error.MissingEhFrame, @intCast(encoding.value.arm64.dwarf));"},
{"lineNum":" 2132","line":"            },"},
{"lineNum":" 2133","line":"            .FRAME => blk: {"},
{"lineNum":" 2134","line":"                const fp = (try abi.regValueNative(usize, context.thread_context, abi.fpRegNum(reg_context), reg_context)).*;"},
{"lineNum":" 2135","line":"                const new_sp = fp + 16;"},
{"lineNum":" 2136","line":"                const ip_ptr = fp + @sizeOf(usize);"},
{"lineNum":" 2137","line":""},
{"lineNum":" 2138","line":"                const num_restored_pairs: usize ="},
{"lineNum":" 2139","line":"                    @popCount(@as(u5, @bitCast(encoding.value.arm64.frame.x_reg_pairs))) +"},
{"lineNum":" 2140","line":"                    @popCount(@as(u4, @bitCast(encoding.value.arm64.frame.d_reg_pairs)));"},
{"lineNum":" 2141","line":"                const min_reg_addr = fp - num_restored_pairs * 2 * @sizeOf(usize);"},
{"lineNum":" 2142","line":""},
{"lineNum":" 2143","line":"                if (!context.isValidMemory(new_sp) or !context.isValidMemory(min_reg_addr)) return error.InvalidUnwindInfo;"},
{"lineNum":" 2144","line":""},
{"lineNum":" 2145","line":"                var reg_addr = fp - @sizeOf(usize);"},
{"lineNum":" 2146","line":"                inline for (@typeInfo(@TypeOf(encoding.value.arm64.frame.x_reg_pairs)).Struct.fields, 0..) |field, i| {"},
{"lineNum":" 2147","line":"                    if (@field(encoding.value.arm64.frame.x_reg_pairs, field.name) != 0) {"},
{"lineNum":" 2148","line":"                        (try abi.regValueNative(usize, context.thread_context, 19 + i, reg_context)).* = @as(*const usize, @ptrFromInt(reg_addr)).*;"},
{"lineNum":" 2149","line":"                        reg_addr += @sizeOf(usize);"},
{"lineNum":" 2150","line":"                        (try abi.regValueNative(usize, context.thread_context, 20 + i, reg_context)).* = @as(*const usize, @ptrFromInt(reg_addr)).*;"},
{"lineNum":" 2151","line":"                        reg_addr += @sizeOf(usize);"},
{"lineNum":" 2152","line":"                    }"},
{"lineNum":" 2153","line":"                }"},
{"lineNum":" 2154","line":""},
{"lineNum":" 2155","line":"                inline for (@typeInfo(@TypeOf(encoding.value.arm64.frame.d_reg_pairs)).Struct.fields, 0..) |field, i| {"},
{"lineNum":" 2156","line":"                    if (@field(encoding.value.arm64.frame.d_reg_pairs, field.name) != 0) {"},
{"lineNum":" 2157","line":"                        // Only the lower half of the 128-bit V registers are restored during unwinding"},
{"lineNum":" 2158","line":"                        @memcpy("},
{"lineNum":" 2159","line":"                            try abi.regBytes(context.thread_context, 64 + 8 + i, context.reg_context),"},
{"lineNum":" 2160","line":"                            mem.asBytes(@as(*const usize, @ptrFromInt(reg_addr))),"},
{"lineNum":" 2161","line":"                        );"},
{"lineNum":" 2162","line":"                        reg_addr += @sizeOf(usize);"},
{"lineNum":" 2163","line":"                        @memcpy("},
{"lineNum":" 2164","line":"                            try abi.regBytes(context.thread_context, 64 + 9 + i, context.reg_context),"},
{"lineNum":" 2165","line":"                            mem.asBytes(@as(*const usize, @ptrFromInt(reg_addr))),"},
{"lineNum":" 2166","line":"                        );"},
{"lineNum":" 2167","line":"                        reg_addr += @sizeOf(usize);"},
{"lineNum":" 2168","line":"                    }"},
{"lineNum":" 2169","line":"                }"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"                const new_ip = @as(*const usize, @ptrFromInt(ip_ptr)).*;"},
{"lineNum":" 2172","line":"                const new_fp = @as(*const usize, @ptrFromInt(fp)).*;"},
{"lineNum":" 2173","line":""},
{"lineNum":" 2174","line":"                (try abi.regValueNative(usize, context.thread_context, abi.fpRegNum(reg_context), reg_context)).* = new_fp;"},
{"lineNum":" 2175","line":"                (try abi.regValueNative(usize, context.thread_context, abi.ipRegNum(), reg_context)).* = new_ip;"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"                break :blk new_ip;"},
{"lineNum":" 2178","line":"            },"},
{"lineNum":" 2179","line":"        },"},
{"lineNum":" 2180","line":"        else => return error.UnimplementedArch,"},
{"lineNum":" 2181","line":"    };"},
{"lineNum":" 2182","line":""},
{"lineNum":" 2183","line":"    context.pc = abi.stripInstructionPtrAuthCode(new_ip);"},
{"lineNum":" 2184","line":"    if (context.pc > 0) context.pc -= 1;"},
{"lineNum":" 2185","line":"    return new_ip;"},
{"lineNum":" 2186","line":"}"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"fn unwindFrameMachODwarf(context: *UnwindContext, eh_frame: []const u8, fde_offset: usize) !usize {"},
{"lineNum":" 2189","line":"    var di = DwarfInfo{"},
{"lineNum":" 2190","line":"        .endian = builtin.cpu.arch.endian(),"},
{"lineNum":" 2191","line":"        .is_macho = true,"},
{"lineNum":" 2192","line":"    };"},
{"lineNum":" 2193","line":"    defer di.deinit(context.allocator);"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"    di.sections[@intFromEnum(DwarfSection.eh_frame)] = .{"},
{"lineNum":" 2196","line":"        .data = eh_frame,"},
{"lineNum":" 2197","line":"        .owned = false,"},
{"lineNum":" 2198","line":"    };"},
{"lineNum":" 2199","line":""},
{"lineNum":" 2200","line":"    return di.unwindFrame(context, fde_offset);"},
{"lineNum":" 2201","line":"}"},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"pub const UnwindContext = struct {"},
{"lineNum":" 2204","line":"    allocator: mem.Allocator,"},
{"lineNum":" 2205","line":"    cfa: ?usize,"},
{"lineNum":" 2206","line":"    pc: usize,"},
{"lineNum":" 2207","line":"    thread_context: *debug.ThreadContext,"},
{"lineNum":" 2208","line":"    reg_context: abi.RegisterContext,"},
{"lineNum":" 2209","line":"    isValidMemory: *const fn (address: usize) bool,"},
{"lineNum":" 2210","line":"    vm: call_frame.VirtualMachine = .{},"},
{"lineNum":" 2211","line":"    stack_machine: expressions.StackMachine(.{ .call_frame_context = true }) = .{},"},
{"lineNum":" 2212","line":""},
{"lineNum":" 2213","line":"    pub fn init(allocator: mem.Allocator, thread_context: *const debug.ThreadContext, isValidMemory: *const fn (address: usize) bool) !UnwindContext {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2214","line":"        const pc = abi.stripInstructionPtrAuthCode((try abi.regValueNative(usize, thread_context, abi.ipRegNum(), null)).*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"        const context_copy = try allocator.create(debug.ThreadContext);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2217","line":"        debug.copyContext(thread_context, context_copy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"        return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2220","line":"            .allocator = allocator,"},
{"lineNum":" 2221","line":"            .cfa = null,"},
{"lineNum":" 2222","line":"            .pc = pc,"},
{"lineNum":" 2223","line":"            .thread_context = context_copy,"},
{"lineNum":" 2224","line":"            .reg_context = undefined,"},
{"lineNum":" 2225","line":"            .isValidMemory = isValidMemory,"},
{"lineNum":" 2226","line":"        };"},
{"lineNum":" 2227","line":"    }"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"    pub fn deinit(self: *UnwindContext) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2230","line":"        self.vm.deinit(self.allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2231","line":"        self.stack_machine.deinit(self.allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2232","line":"        self.allocator.destroy(self.thread_context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2233","line":"    }"},
{"lineNum":" 2234","line":""},
{"lineNum":" 2235","line":"    pub fn getFp(self: *const UnwindContext) !usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2236","line":"        return (try abi.regValueNative(usize, self.thread_context, abi.fpRegNum(self.reg_context), self.reg_context)).*;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2237","line":"    }"},
{"lineNum":" 2238","line":"};"},
{"lineNum":" 2239","line":""},
{"lineNum":" 2240","line":"/// Initialize DWARF info. The caller has the responsibility to initialize most"},
{"lineNum":" 2241","line":"/// the DwarfInfo fields before calling. `binary_mem` is the raw bytes of the"},
{"lineNum":" 2242","line":"/// main binary file (not the secondary debug info file)."},
{"lineNum":" 2243","line":"pub fn openDwarfDebugInfo(di: *DwarfInfo, allocator: mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2244","line":"    try di.scanAllFunctions(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2245","line":"    try di.scanAllCompileUnits(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2246","line":"}"},
{"lineNum":" 2247","line":""},
{"lineNum":" 2248","line":"/// This function is to make it handy to comment out the return and make it"},
{"lineNum":" 2249","line":"/// into a crash when working on this file."},
{"lineNum":" 2250","line":"fn badDwarf() error{InvalidDebugInfo} {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2251","line":"    //std.os.abort(); // can be handy to uncomment when working on this file"},
{"lineNum":" 2252","line":"    return error.InvalidDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2253","line":"}"},
{"lineNum":" 2254","line":""},
{"lineNum":" 2255","line":"fn missingDwarf() error{MissingDebugInfo} {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2256","line":"    //std.os.abort(); // can be handy to uncomment when working on this file"},
{"lineNum":" 2257","line":"    return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2258","line":"}"},
{"lineNum":" 2259","line":""},
{"lineNum":" 2260","line":"fn getStringGeneric(opt_str: ?[]const u8, offset: u64) ![:0]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2261","line":"    const str = opt_str orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2262","line":"    if (offset > str.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2263","line":"    const casted_offset = math.cast(usize, offset) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2264","line":"    // Valid strings always have a terminating zero byte"},
{"lineNum":" 2265","line":"    const last = mem.indexOfScalarPos(u8, str, casted_offset, 0) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2266","line":"    return str[casted_offset..last :0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2267","line":"}"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"const EhPointerContext = struct {"},
{"lineNum":" 2270","line":"    // The address of the pointer field itself"},
{"lineNum":" 2271","line":"    pc_rel_base: u64,"},
{"lineNum":" 2272","line":""},
{"lineNum":" 2273","line":"    // Whether or not to follow indirect pointers. This should only be"},
{"lineNum":" 2274","line":"    // used when decoding pointers at runtime using the current process\'s"},
{"lineNum":" 2275","line":"    // debug info"},
{"lineNum":" 2276","line":"    follow_indirect: bool,"},
{"lineNum":" 2277","line":""},
{"lineNum":" 2278","line":"    // These relative addressing modes are only used in specific cases, and"},
{"lineNum":" 2279","line":"    // might not be available / required in all parsing contexts"},
{"lineNum":" 2280","line":"    data_rel_base: ?u64 = null,"},
{"lineNum":" 2281","line":"    text_rel_base: ?u64 = null,"},
{"lineNum":" 2282","line":"    function_rel_base: ?u64 = null,"},
{"lineNum":" 2283","line":"};"},
{"lineNum":" 2284","line":""},
{"lineNum":" 2285","line":"fn readEhPointer(reader: anytype, enc: u8, addr_size_bytes: u8, ctx: EhPointerContext, endian: std.builtin.Endian) !?u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2286","line":"    if (enc == EH.PE.omit) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2287","line":""},
{"lineNum":" 2288","line":"    const value: union(enum) {"},
{"lineNum":" 2289","line":"        signed: i64,"},
{"lineNum":" 2290","line":"        unsigned: u64,"},
{"lineNum":" 2291","line":"    } = switch (enc & EH.PE.type_mask) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2292","line":"        EH.PE.absptr => .{"},
{"lineNum":" 2293","line":"            .unsigned = switch (addr_size_bytes) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2294","line":"                2 => try reader.readInt(u16, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2295","line":"                4 => try reader.readInt(u32, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2296","line":"                8 => try reader.readInt(u64, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2297","line":"                else => return error.InvalidAddrSize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2298","line":"            },"},
{"lineNum":" 2299","line":"        },"},
{"lineNum":" 2300","line":"        EH.PE.uleb128 => .{ .unsigned = try leb.readULEB128(u64, reader) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2301","line":"        EH.PE.udata2 => .{ .unsigned = try reader.readInt(u16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2302","line":"        EH.PE.udata4 => .{ .unsigned = try reader.readInt(u32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2303","line":"        EH.PE.udata8 => .{ .unsigned = try reader.readInt(u64, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2304","line":"        EH.PE.sleb128 => .{ .signed = try leb.readILEB128(i64, reader) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2305","line":"        EH.PE.sdata2 => .{ .signed = try reader.readInt(i16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2306","line":"        EH.PE.sdata4 => .{ .signed = try reader.readInt(i32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2307","line":"        EH.PE.sdata8 => .{ .signed = try reader.readInt(i64, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2308","line":"        else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2309","line":"    };"},
{"lineNum":" 2310","line":""},
{"lineNum":" 2311","line":"    var base = switch (enc & EH.PE.rel_mask) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2312","line":"        EH.PE.pcrel => ctx.pc_rel_base,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2313","line":"        EH.PE.textrel => ctx.text_rel_base orelse return error.PointerBaseNotSpecified,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2314","line":"        EH.PE.datarel => ctx.data_rel_base orelse return error.PointerBaseNotSpecified,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2315","line":"        EH.PE.funcrel => ctx.function_rel_base orelse return error.PointerBaseNotSpecified,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2316","line":"        else => null,"},
{"lineNum":" 2317","line":"    };"},
{"lineNum":" 2318","line":""},
{"lineNum":" 2319","line":"    const ptr: u64 = if (base) |b| switch (value) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2320","line":"        .signed => |s| @intCast(try math.add(i64, s, @as(i64, @intCast(b)))),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2321","line":"        // absptr can actually contain signed values in some cases (aarch64 MachO)"},
{"lineNum":" 2322","line":"        .unsigned => |u| u +% b,"},
{"lineNum":" 2323","line":"    } else switch (value) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2324","line":"        .signed => |s| @as(u64, @intCast(s)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2325","line":"        .unsigned => |u| u,"},
{"lineNum":" 2326","line":"    };"},
{"lineNum":" 2327","line":""},
{"lineNum":" 2328","line":"    if ((enc & EH.PE.indirect) > 0 and ctx.follow_indirect) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2329","line":"        if (@sizeOf(usize) != addr_size_bytes) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2330","line":"            // See the documentation for `follow_indirect`"},
{"lineNum":" 2331","line":"            return error.NonNativeIndirection;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2332","line":"        }"},
{"lineNum":" 2333","line":""},
{"lineNum":" 2334","line":"        const native_ptr = math.cast(usize, ptr) orelse return error.PointerOverflow;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2335","line":"        return switch (addr_size_bytes) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2336","line":"            2, 4, 8 => return @as(*const usize, @ptrFromInt(native_ptr)).*,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2337","line":"            else => return error.UnsupportedAddrSize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2338","line":"        };"},
{"lineNum":" 2339","line":"    } else {"},
{"lineNum":" 2340","line":"        return ptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2341","line":"    }"},
{"lineNum":" 2342","line":"}"},
{"lineNum":" 2343","line":""},
{"lineNum":" 2344","line":"/// This represents the decoded .eh_frame_hdr header"},
{"lineNum":" 2345","line":"pub const ExceptionFrameHeader = struct {"},
{"lineNum":" 2346","line":"    eh_frame_ptr: usize,"},
{"lineNum":" 2347","line":"    table_enc: u8,"},
{"lineNum":" 2348","line":"    fde_count: usize,"},
{"lineNum":" 2349","line":"    entries: []const u8,"},
{"lineNum":" 2350","line":""},
{"lineNum":" 2351","line":"    pub fn entrySize(table_enc: u8) !u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2352","line":"        return switch (table_enc & EH.PE.type_mask) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2353","line":"            EH.PE.udata2,"},
{"lineNum":" 2354","line":"            EH.PE.sdata2,"},
{"lineNum":" 2355","line":"            => 4,"},
{"lineNum":" 2356","line":"            EH.PE.udata4,"},
{"lineNum":" 2357","line":"            EH.PE.sdata4,"},
{"lineNum":" 2358","line":"            => 8,"},
{"lineNum":" 2359","line":"            EH.PE.udata8,"},
{"lineNum":" 2360","line":"            EH.PE.sdata8,"},
{"lineNum":" 2361","line":"            => 16,"},
{"lineNum":" 2362","line":"            // This is a binary search table, so all entries must be the same length"},
{"lineNum":" 2363","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2364","line":"        };"},
{"lineNum":" 2365","line":"    }"},
{"lineNum":" 2366","line":""},
{"lineNum":" 2367","line":"    fn isValidPtr("},
{"lineNum":" 2368","line":"        self: ExceptionFrameHeader,"},
{"lineNum":" 2369","line":"        ptr: usize,"},
{"lineNum":" 2370","line":"        isValidMemory: *const fn (address: usize) bool,"},
{"lineNum":" 2371","line":"        eh_frame_len: ?usize,"},
{"lineNum":" 2372","line":"    ) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2373","line":"        if (eh_frame_len) |len| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2374","line":"            return ptr >= self.eh_frame_ptr and ptr < self.eh_frame_ptr + len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2375","line":"        } else {"},
{"lineNum":" 2376","line":"            return isValidMemory(ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2377","line":"        }"},
{"lineNum":" 2378","line":"    }"},
{"lineNum":" 2379","line":""},
{"lineNum":" 2380","line":"    /// Find an entry by binary searching the eh_frame_hdr section."},
{"lineNum":" 2381","line":"    ///"},
{"lineNum":" 2382","line":"    /// Since the length of the eh_frame section (`eh_frame_len`) may not be known by the caller,"},
{"lineNum":" 2383","line":"    /// `isValidMemory` will be called before accessing any memory referenced by"},
{"lineNum":" 2384","line":"    /// the header entries. If `eh_frame_len` is provided, then these checks can be skipped."},
{"lineNum":" 2385","line":"    pub fn findEntry("},
{"lineNum":" 2386","line":"        self: ExceptionFrameHeader,"},
{"lineNum":" 2387","line":"        isValidMemory: *const fn (address: usize) bool,"},
{"lineNum":" 2388","line":"        eh_frame_len: ?usize,"},
{"lineNum":" 2389","line":"        eh_frame_hdr_ptr: usize,"},
{"lineNum":" 2390","line":"        pc: usize,"},
{"lineNum":" 2391","line":"        cie: *CommonInformationEntry,"},
{"lineNum":" 2392","line":"        fde: *FrameDescriptionEntry,"},
{"lineNum":" 2393","line":"    ) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2394","line":"        const entry_size = try entrySize(self.table_enc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2395","line":""},
{"lineNum":" 2396","line":"        var left: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2397","line":"        var len: usize = self.fde_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2398","line":""},
{"lineNum":" 2399","line":"        var stream = io.fixedBufferStream(self.entries);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2400","line":"        const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2401","line":""},
{"lineNum":" 2402","line":"        while (len > 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2403","line":"            const mid = left + len / 2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2404","line":""},
{"lineNum":" 2405","line":"            try stream.seekTo(mid * entry_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2406","line":"            const pc_begin = try readEhPointer(reader, self.table_enc, @sizeOf(usize), .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2407","line":"                .pc_rel_base = @intFromPtr(&self.entries[stream.pos]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2408","line":"                .follow_indirect = true,"},
{"lineNum":" 2409","line":"                .data_rel_base = eh_frame_hdr_ptr,"},
{"lineNum":" 2410","line":"            }, builtin.cpu.arch.endian()) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2411","line":""},
{"lineNum":" 2412","line":"            if (pc < pc_begin) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2413","line":"                len /= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2414","line":"            } else {"},
{"lineNum":" 2415","line":"                left = mid;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2416","line":"                if (pc == pc_begin) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2417","line":"                len -= len / 2;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2418","line":"            }"},
{"lineNum":" 2419","line":"        }"},
{"lineNum":" 2420","line":""},
{"lineNum":" 2421","line":"        if (len == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2422","line":"        try stream.seekTo(left * entry_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2423","line":""},
{"lineNum":" 2424","line":"        // Read past the pc_begin field of the entry"},
{"lineNum":" 2425","line":"        _ = try readEhPointer(reader, self.table_enc, @sizeOf(usize), .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2426","line":"            .pc_rel_base = @intFromPtr(&self.entries[stream.pos]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2427","line":"            .follow_indirect = true,"},
{"lineNum":" 2428","line":"            .data_rel_base = eh_frame_hdr_ptr,"},
{"lineNum":" 2429","line":"        }, builtin.cpu.arch.endian()) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2430","line":""},
{"lineNum":" 2431","line":"        const fde_ptr = math.cast(usize, try readEhPointer(reader, self.table_enc, @sizeOf(usize), .{","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2432","line":"            .pc_rel_base = @intFromPtr(&self.entries[stream.pos]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2433","line":"            .follow_indirect = true,"},
{"lineNum":" 2434","line":"            .data_rel_base = eh_frame_hdr_ptr,"},
{"lineNum":" 2435","line":"        }, builtin.cpu.arch.endian()) orelse return badDwarf()) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2436","line":""},
{"lineNum":" 2437","line":"        // Verify the length fields of the FDE header are readable"},
{"lineNum":" 2438","line":"        if (!self.isValidPtr(fde_ptr, isValidMemory, eh_frame_len) or fde_ptr < self.eh_frame_ptr) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2439","line":""},
{"lineNum":" 2440","line":"        var fde_entry_header_len: usize = 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2441","line":"        if (!self.isValidPtr(fde_ptr + 3, isValidMemory, eh_frame_len)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2442","line":"        if (self.isValidPtr(fde_ptr + 11, isValidMemory, eh_frame_len)) fde_entry_header_len = 12;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2443","line":""},
{"lineNum":" 2444","line":"        // Even if eh_frame_len is not specified, all ranges accssed are checked by isValidPtr"},
{"lineNum":" 2445","line":"        const eh_frame = @as([*]const u8, @ptrFromInt(self.eh_frame_ptr))[0 .. eh_frame_len orelse math.maxInt(u32)];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2446","line":""},
{"lineNum":" 2447","line":"        const fde_offset = fde_ptr - self.eh_frame_ptr;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2448","line":"        var eh_frame_stream = io.fixedBufferStream(eh_frame);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2449","line":"        try eh_frame_stream.seekTo(fde_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2450","line":""},
{"lineNum":" 2451","line":"        const fde_entry_header = try EntryHeader.read(&eh_frame_stream, .eh_frame, builtin.cpu.arch.endian());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2452","line":"        if (!self.isValidPtr(@intFromPtr(&fde_entry_header.entry_bytes[fde_entry_header.entry_bytes.len - 1]), isValidMemory, eh_frame_len)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2453","line":"        if (fde_entry_header.type != .fde) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2454","line":""},
{"lineNum":" 2455","line":"        // CIEs always come before FDEs (the offset is a subtraction), so we can assume this memory is readable"},
{"lineNum":" 2456","line":"        const cie_offset = fde_entry_header.type.fde;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2457","line":"        try eh_frame_stream.seekTo(cie_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2458","line":"        const cie_entry_header = try EntryHeader.read(&eh_frame_stream, .eh_frame, builtin.cpu.arch.endian());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2459","line":"        if (!self.isValidPtr(@intFromPtr(&cie_entry_header.entry_bytes[cie_entry_header.entry_bytes.len - 1]), isValidMemory, eh_frame_len)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2460","line":"        if (cie_entry_header.type != .cie) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2461","line":""},
{"lineNum":" 2462","line":"        cie.* = try CommonInformationEntry.parse(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2463","line":"            cie_entry_header.entry_bytes,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2464","line":"            0,"},
{"lineNum":" 2465","line":"            true,"},
{"lineNum":" 2466","line":"            cie_entry_header.is_64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2467","line":"            .eh_frame,"},
{"lineNum":" 2468","line":"            cie_entry_header.length_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2469","line":"            @sizeOf(usize),"},
{"lineNum":" 2470","line":"            builtin.cpu.arch.endian(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2471","line":"        );"},
{"lineNum":" 2472","line":""},
{"lineNum":" 2473","line":"        fde.* = try FrameDescriptionEntry.parse(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2474","line":"            fde_entry_header.entry_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2475","line":"            0,"},
{"lineNum":" 2476","line":"            true,"},
{"lineNum":" 2477","line":"            cie.*,"},
{"lineNum":" 2478","line":"            @sizeOf(usize),"},
{"lineNum":" 2479","line":"            builtin.cpu.arch.endian(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2480","line":"        );"},
{"lineNum":" 2481","line":"    }"},
{"lineNum":" 2482","line":"};"},
{"lineNum":" 2483","line":""},
{"lineNum":" 2484","line":"pub const EntryHeader = struct {"},
{"lineNum":" 2485","line":"    /// Offset of the length field in the backing buffer"},
{"lineNum":" 2486","line":"    length_offset: usize,"},
{"lineNum":" 2487","line":"    is_64: bool,"},
{"lineNum":" 2488","line":"    type: union(enum) {"},
{"lineNum":" 2489","line":"        cie,"},
{"lineNum":" 2490","line":"        /// Value is the offset of the corresponding CIE"},
{"lineNum":" 2491","line":"        fde: u64,"},
{"lineNum":" 2492","line":"        terminator: void,"},
{"lineNum":" 2493","line":"    },"},
{"lineNum":" 2494","line":"    /// The entry\'s contents, not including the ID field"},
{"lineNum":" 2495","line":"    entry_bytes: []const u8,"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"    /// Reads a header for either an FDE or a CIE, then advances the stream to the position after the trailing structure."},
{"lineNum":" 2498","line":"    /// `stream` must be a stream backed by either the .eh_frame or .debug_frame sections."},
{"lineNum":" 2499","line":"    pub fn read(stream: *std.io.FixedBufferStream([]const u8), dwarf_section: DwarfSection, endian: std.builtin.Endian) !EntryHeader {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2500","line":"        assert(dwarf_section == .eh_frame or dwarf_section == .debug_frame);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2501","line":""},
{"lineNum":" 2502","line":"        const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2503","line":"        const length_offset = stream.pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2504","line":""},
{"lineNum":" 2505","line":"        var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2506","line":"        const length = math.cast(usize, try readUnitLength(reader, endian, &is_64)) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2507","line":"        if (length == 0) return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2508","line":"            .length_offset = length_offset,"},
{"lineNum":" 2509","line":"            .is_64 = is_64,"},
{"lineNum":" 2510","line":"            .type = .{ .terminator = {} },"},
{"lineNum":" 2511","line":"            .entry_bytes = &.{},"},
{"lineNum":" 2512","line":"        };"},
{"lineNum":" 2513","line":""},
{"lineNum":" 2514","line":"        const id_len = @as(u8, if (is_64) 8 else 4);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2515","line":"        const id = if (is_64) try reader.readInt(u64, endian) else try reader.readInt(u32, endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2516","line":"        const entry_bytes = stream.buffer[stream.pos..][0 .. length - id_len];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2517","line":"        const cie_id: u64 = switch (dwarf_section) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2518","line":"            .eh_frame => CommonInformationEntry.eh_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2519","line":"            .debug_frame => if (is_64) CommonInformationEntry.dwarf64_id else CommonInformationEntry.dwarf32_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2520","line":"            else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2521","line":"        };"},
{"lineNum":" 2522","line":""},
{"lineNum":" 2523","line":"        const result = EntryHeader{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2524","line":"            .length_offset = length_offset,"},
{"lineNum":" 2525","line":"            .is_64 = is_64,"},
{"lineNum":" 2526","line":"            .type = if (id == cie_id) .{ .cie = {} } else .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2527","line":"                .fde = switch (dwarf_section) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2528","line":"                    .eh_frame => try std.math.sub(u64, stream.pos - id_len, id),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2529","line":"                    .debug_frame => id,"},
{"lineNum":" 2530","line":"                    else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2531","line":"                },"},
{"lineNum":" 2532","line":"            },"},
{"lineNum":" 2533","line":"            .entry_bytes = entry_bytes,"},
{"lineNum":" 2534","line":"        };"},
{"lineNum":" 2535","line":""},
{"lineNum":" 2536","line":"        stream.pos += entry_bytes.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2537","line":"        return result;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2538","line":"    }"},
{"lineNum":" 2539","line":""},
{"lineNum":" 2540","line":"    /// The length of the entry including the ID field, but not the length field itself"},
{"lineNum":" 2541","line":"    pub fn entryLength(self: EntryHeader) usize {"},
{"lineNum":" 2542","line":"        return self.entry_bytes.len + @as(u8, if (self.is_64) 8 else 4);"},
{"lineNum":" 2543","line":"    }"},
{"lineNum":" 2544","line":"};"},
{"lineNum":" 2545","line":""},
{"lineNum":" 2546","line":"pub const CommonInformationEntry = struct {"},
{"lineNum":" 2547","line":"    // Used in .eh_frame"},
{"lineNum":" 2548","line":"    pub const eh_id = 0;"},
{"lineNum":" 2549","line":""},
{"lineNum":" 2550","line":"    // Used in .debug_frame (DWARF32)"},
{"lineNum":" 2551","line":"    pub const dwarf32_id = math.maxInt(u32);"},
{"lineNum":" 2552","line":""},
{"lineNum":" 2553","line":"    // Used in .debug_frame (DWARF64)"},
{"lineNum":" 2554","line":"    pub const dwarf64_id = math.maxInt(u64);"},
{"lineNum":" 2555","line":""},
{"lineNum":" 2556","line":"    // Offset of the length field of this entry in the eh_frame section."},
{"lineNum":" 2557","line":"    // This is the key that FDEs use to reference CIEs."},
{"lineNum":" 2558","line":"    length_offset: u64,"},
{"lineNum":" 2559","line":"    version: u8,"},
{"lineNum":" 2560","line":"    address_size: u8,"},
{"lineNum":" 2561","line":"    is_64: bool,"},
{"lineNum":" 2562","line":""},
{"lineNum":" 2563","line":"    // Only present in version 4"},
{"lineNum":" 2564","line":"    segment_selector_size: ?u8,"},
{"lineNum":" 2565","line":""},
{"lineNum":" 2566","line":"    code_alignment_factor: u32,"},
{"lineNum":" 2567","line":"    data_alignment_factor: i32,"},
{"lineNum":" 2568","line":"    return_address_register: u8,"},
{"lineNum":" 2569","line":""},
{"lineNum":" 2570","line":"    aug_str: []const u8,"},
{"lineNum":" 2571","line":"    aug_data: []const u8,"},
{"lineNum":" 2572","line":"    lsda_pointer_enc: u8,"},
{"lineNum":" 2573","line":"    personality_enc: ?u8,"},
{"lineNum":" 2574","line":"    personality_routine_pointer: ?u64,"},
{"lineNum":" 2575","line":"    fde_pointer_enc: u8,"},
{"lineNum":" 2576","line":"    initial_instructions: []const u8,"},
{"lineNum":" 2577","line":""},
{"lineNum":" 2578","line":"    pub fn isSignalFrame(self: CommonInformationEntry) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2579","line":"        for (self.aug_str) |c| if (c == \'S\') return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2580","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2581","line":"    }"},
{"lineNum":" 2582","line":""},
{"lineNum":" 2583","line":"    pub fn addressesSignedWithBKey(self: CommonInformationEntry) bool {"},
{"lineNum":" 2584","line":"        for (self.aug_str) |c| if (c == \'B\') return true;"},
{"lineNum":" 2585","line":"        return false;"},
{"lineNum":" 2586","line":"    }"},
{"lineNum":" 2587","line":""},
{"lineNum":" 2588","line":"    pub fn mteTaggedFrame(self: CommonInformationEntry) bool {"},
{"lineNum":" 2589","line":"        for (self.aug_str) |c| if (c == \'G\') return true;"},
{"lineNum":" 2590","line":"        return false;"},
{"lineNum":" 2591","line":"    }"},
{"lineNum":" 2592","line":""},
{"lineNum":" 2593","line":"    /// This function expects to read the CIE starting with the version field."},
{"lineNum":" 2594","line":"    /// The returned struct references memory backed by cie_bytes."},
{"lineNum":" 2595","line":"    ///"},
{"lineNum":" 2596","line":"    /// See the FrameDescriptionEntry.parse documentation for the description"},
{"lineNum":" 2597","line":"    /// of `pc_rel_offset` and `is_runtime`."},
{"lineNum":" 2598","line":"    ///"},
{"lineNum":" 2599","line":"    /// `length_offset` specifies the offset of this CIE\'s length field in the"},
{"lineNum":" 2600","line":"    /// .eh_frame / .debug_frame section."},
{"lineNum":" 2601","line":"    pub fn parse("},
{"lineNum":" 2602","line":"        cie_bytes: []const u8,"},
{"lineNum":" 2603","line":"        pc_rel_offset: i64,"},
{"lineNum":" 2604","line":"        is_runtime: bool,"},
{"lineNum":" 2605","line":"        is_64: bool,"},
{"lineNum":" 2606","line":"        dwarf_section: DwarfSection,"},
{"lineNum":" 2607","line":"        length_offset: u64,"},
{"lineNum":" 2608","line":"        addr_size_bytes: u8,"},
{"lineNum":" 2609","line":"        endian: std.builtin.Endian,"},
{"lineNum":" 2610","line":"    ) !CommonInformationEntry {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2611","line":"        if (addr_size_bytes > 8) return error.UnsupportedAddrSize;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"        var stream = io.fixedBufferStream(cie_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2614","line":"        const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2615","line":""},
{"lineNum":" 2616","line":"        const version = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2617","line":"        switch (dwarf_section) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2618","line":"            .eh_frame => if (version != 1 and version != 3) return error.UnsupportedDwarfVersion,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2619","line":"            .debug_frame => if (version != 4) return error.UnsupportedDwarfVersion,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2620","line":"            else => return error.UnsupportedDwarfSection,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2621","line":"        }"},
{"lineNum":" 2622","line":""},
{"lineNum":" 2623","line":"        var has_eh_data = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2624","line":"        var has_aug_data = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2625","line":""},
{"lineNum":" 2626","line":"        var aug_str_len: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2627","line":"        var aug_str_start = stream.pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2628","line":"        var aug_byte = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2629","line":"        while (aug_byte != 0) : (aug_byte = try reader.readByte()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2630","line":"            switch (aug_byte) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2631","line":"                \'z\' => {"},
{"lineNum":" 2632","line":"                    if (aug_str_len != 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2633","line":"                    has_aug_data = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2634","line":"                },"},
{"lineNum":" 2635","line":"                \'e\' => {"},
{"lineNum":" 2636","line":"                    if (has_aug_data or aug_str_len != 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2637","line":"                    if (try reader.readByte() != \'h\') return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2638","line":"                    has_eh_data = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2639","line":"                },"},
{"lineNum":" 2640","line":"                else => if (has_eh_data) return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2641","line":"            }"},
{"lineNum":" 2642","line":""},
{"lineNum":" 2643","line":"            aug_str_len += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2644","line":"        }"},
{"lineNum":" 2645","line":""},
{"lineNum":" 2646","line":"        if (has_eh_data) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2647","line":"            // legacy data created by older versions of gcc - unsupported here"},
{"lineNum":" 2648","line":"            for (0..addr_size_bytes) |_| _ = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2649","line":"        }"},
{"lineNum":" 2650","line":""},
{"lineNum":" 2651","line":"        const address_size = if (version == 4) try reader.readByte() else addr_size_bytes;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2652","line":"        const segment_selector_size = if (version == 4) try reader.readByte() else null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2653","line":""},
{"lineNum":" 2654","line":"        const code_alignment_factor = try leb.readULEB128(u32, reader);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2655","line":"        const data_alignment_factor = try leb.readILEB128(i32, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2656","line":"        const return_address_register = if (version == 1) try reader.readByte() else try leb.readULEB128(u8, reader);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2657","line":""},
{"lineNum":" 2658","line":"        var lsda_pointer_enc: u8 = EH.PE.omit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2659","line":"        var personality_enc: ?u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2660","line":"        var personality_routine_pointer: ?u64 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2661","line":"        var fde_pointer_enc: u8 = EH.PE.absptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2662","line":""},
{"lineNum":" 2663","line":"        var aug_data: []const u8 = &[_]u8{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2664","line":"        const aug_str = if (has_aug_data) blk: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2665","line":"            const aug_data_len = try leb.readULEB128(usize, reader);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2666","line":"            const aug_data_start = stream.pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2667","line":"            aug_data = cie_bytes[aug_data_start..][0..aug_data_len];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2668","line":""},
{"lineNum":" 2669","line":"            const aug_str = cie_bytes[aug_str_start..][0..aug_str_len];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2670","line":"            for (aug_str[1..]) |byte| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2671","line":"                switch (byte) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2672","line":"                    \'L\' => {"},
{"lineNum":" 2673","line":"                        lsda_pointer_enc = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2674","line":"                    },"},
{"lineNum":" 2675","line":"                    \'P\' => {"},
{"lineNum":" 2676","line":"                        personality_enc = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2677","line":"                        personality_routine_pointer = try readEhPointer(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2678","line":"                            reader,"},
{"lineNum":" 2679","line":"                            personality_enc.?,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2680","line":"                            addr_size_bytes,"},
{"lineNum":" 2681","line":"                            .{"},
{"lineNum":" 2682","line":"                                .pc_rel_base = try pcRelBase(@intFromPtr(&cie_bytes[stream.pos]), pc_rel_offset),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2683","line":"                                .follow_indirect = is_runtime,"},
{"lineNum":" 2684","line":"                            },"},
{"lineNum":" 2685","line":"                            endian,"},
{"lineNum":" 2686","line":"                        );"},
{"lineNum":" 2687","line":"                    },"},
{"lineNum":" 2688","line":"                    \'R\' => {"},
{"lineNum":" 2689","line":"                        fde_pointer_enc = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2690","line":"                    },"},
{"lineNum":" 2691","line":"                    \'S\', \'B\', \'G\' => {},"},
{"lineNum":" 2692","line":"                    else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2693","line":"                }"},
{"lineNum":" 2694","line":"            }"},
{"lineNum":" 2695","line":""},
{"lineNum":" 2696","line":"            // aug_data_len can include padding so the CIE ends on an address boundary"},
{"lineNum":" 2697","line":"            try stream.seekTo(aug_data_start + aug_data_len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2698","line":"            break :blk aug_str;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2699","line":"        } else &[_]u8{};"},
{"lineNum":" 2700","line":""},
{"lineNum":" 2701","line":"        const initial_instructions = cie_bytes[stream.pos..];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2702","line":"        return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2703","line":"            .length_offset = length_offset,"},
{"lineNum":" 2704","line":"            .version = version,"},
{"lineNum":" 2705","line":"            .address_size = address_size,"},
{"lineNum":" 2706","line":"            .is_64 = is_64,"},
{"lineNum":" 2707","line":"            .segment_selector_size = segment_selector_size,"},
{"lineNum":" 2708","line":"            .code_alignment_factor = code_alignment_factor,"},
{"lineNum":" 2709","line":"            .data_alignment_factor = data_alignment_factor,"},
{"lineNum":" 2710","line":"            .return_address_register = return_address_register,"},
{"lineNum":" 2711","line":"            .aug_str = aug_str,"},
{"lineNum":" 2712","line":"            .aug_data = aug_data,"},
{"lineNum":" 2713","line":"            .lsda_pointer_enc = lsda_pointer_enc,"},
{"lineNum":" 2714","line":"            .personality_enc = personality_enc,"},
{"lineNum":" 2715","line":"            .personality_routine_pointer = personality_routine_pointer,"},
{"lineNum":" 2716","line":"            .fde_pointer_enc = fde_pointer_enc,"},
{"lineNum":" 2717","line":"            .initial_instructions = initial_instructions,"},
{"lineNum":" 2718","line":"        };"},
{"lineNum":" 2719","line":"    }"},
{"lineNum":" 2720","line":"};"},
{"lineNum":" 2721","line":""},
{"lineNum":" 2722","line":"pub const FrameDescriptionEntry = struct {"},
{"lineNum":" 2723","line":"    // Offset into eh_frame where the CIE for this FDE is stored"},
{"lineNum":" 2724","line":"    cie_length_offset: u64,"},
{"lineNum":" 2725","line":""},
{"lineNum":" 2726","line":"    pc_begin: u64,"},
{"lineNum":" 2727","line":"    pc_range: u64,"},
{"lineNum":" 2728","line":"    lsda_pointer: ?u64,"},
{"lineNum":" 2729","line":"    aug_data: []const u8,"},
{"lineNum":" 2730","line":"    instructions: []const u8,"},
{"lineNum":" 2731","line":""},
{"lineNum":" 2732","line":"    /// This function expects to read the FDE starting at the PC Begin field."},
{"lineNum":" 2733","line":"    /// The returned struct references memory backed by `fde_bytes`."},
{"lineNum":" 2734","line":"    ///"},
{"lineNum":" 2735","line":"    /// `pc_rel_offset` specifies an offset to be applied to pc_rel_base values"},
{"lineNum":" 2736","line":"    /// used when decoding pointers. This should be set to zero if fde_bytes is"},
{"lineNum":" 2737","line":"    /// backed by the memory of a .eh_frame / .debug_frame section in the running executable."},
{"lineNum":" 2738","line":"    /// Otherwise, it should be the relative offset to translate addresses from"},
{"lineNum":" 2739","line":"    /// where the section is currently stored in memory, to where it *would* be"},
{"lineNum":" 2740","line":"    /// stored at runtime: section base addr - backing data base ptr."},
{"lineNum":" 2741","line":"    ///"},
{"lineNum":" 2742","line":"    /// Similarly, `is_runtime` specifies this function is being called on a runtime"},
{"lineNum":" 2743","line":"    /// section, and so indirect pointers can be followed."},
{"lineNum":" 2744","line":"    pub fn parse("},
{"lineNum":" 2745","line":"        fde_bytes: []const u8,"},
{"lineNum":" 2746","line":"        pc_rel_offset: i64,"},
{"lineNum":" 2747","line":"        is_runtime: bool,"},
{"lineNum":" 2748","line":"        cie: CommonInformationEntry,"},
{"lineNum":" 2749","line":"        addr_size_bytes: u8,"},
{"lineNum":" 2750","line":"        endian: std.builtin.Endian,"},
{"lineNum":" 2751","line":"    ) !FrameDescriptionEntry {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2752","line":"        if (addr_size_bytes > 8) return error.InvalidAddrSize;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2753","line":""},
{"lineNum":" 2754","line":"        var stream = io.fixedBufferStream(fde_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2755","line":"        const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2756","line":""},
{"lineNum":" 2757","line":"        const pc_begin = try readEhPointer(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2758","line":"            reader,"},
{"lineNum":" 2759","line":"            cie.fde_pointer_enc,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2760","line":"            addr_size_bytes,"},
{"lineNum":" 2761","line":"            .{"},
{"lineNum":" 2762","line":"                .pc_rel_base = try pcRelBase(@intFromPtr(&fde_bytes[stream.pos]), pc_rel_offset),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2763","line":"                .follow_indirect = is_runtime,"},
{"lineNum":" 2764","line":"            },"},
{"lineNum":" 2765","line":"            endian,"},
{"lineNum":" 2766","line":"        ) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2767","line":""},
{"lineNum":" 2768","line":"        const pc_range = try readEhPointer(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2769","line":"            reader,"},
{"lineNum":" 2770","line":"            cie.fde_pointer_enc,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2771","line":"            addr_size_bytes,"},
{"lineNum":" 2772","line":"            .{"},
{"lineNum":" 2773","line":"                .pc_rel_base = 0,"},
{"lineNum":" 2774","line":"                .follow_indirect = false,"},
{"lineNum":" 2775","line":"            },"},
{"lineNum":" 2776","line":"            endian,"},
{"lineNum":" 2777","line":"        ) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2778","line":""},
{"lineNum":" 2779","line":"        var aug_data: []const u8 = &[_]u8{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2780","line":"        const lsda_pointer = if (cie.aug_str.len > 0) blk: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2781","line":"            const aug_data_len = try leb.readULEB128(usize, reader);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2782","line":"            const aug_data_start = stream.pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2783","line":"            aug_data = fde_bytes[aug_data_start..][0..aug_data_len];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2784","line":""},
{"lineNum":" 2785","line":"            const lsda_pointer = if (cie.lsda_pointer_enc != EH.PE.omit)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2786","line":"                try readEhPointer(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2787","line":"                    reader,"},
{"lineNum":" 2788","line":"                    cie.lsda_pointer_enc,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2789","line":"                    addr_size_bytes,"},
{"lineNum":" 2790","line":"                    .{"},
{"lineNum":" 2791","line":"                        .pc_rel_base = try pcRelBase(@intFromPtr(&fde_bytes[stream.pos]), pc_rel_offset),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2792","line":"                        .follow_indirect = is_runtime,"},
{"lineNum":" 2793","line":"                    },"},
{"lineNum":" 2794","line":"                    endian,"},
{"lineNum":" 2795","line":"                )"},
{"lineNum":" 2796","line":"            else"},
{"lineNum":" 2797","line":"                null;"},
{"lineNum":" 2798","line":""},
{"lineNum":" 2799","line":"            try stream.seekTo(aug_data_start + aug_data_len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2800","line":"            break :blk lsda_pointer;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2801","line":"        } else null;"},
{"lineNum":" 2802","line":""},
{"lineNum":" 2803","line":"        const instructions = fde_bytes[stream.pos..];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2804","line":"        return .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2805","line":"            .cie_length_offset = cie.length_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2806","line":"            .pc_begin = pc_begin,"},
{"lineNum":" 2807","line":"            .pc_range = pc_range,"},
{"lineNum":" 2808","line":"            .lsda_pointer = lsda_pointer,"},
{"lineNum":" 2809","line":"            .aug_data = aug_data,"},
{"lineNum":" 2810","line":"            .instructions = instructions,"},
{"lineNum":" 2811","line":"        };"},
{"lineNum":" 2812","line":"    }"},
{"lineNum":" 2813","line":"};"},
{"lineNum":" 2814","line":""},
{"lineNum":" 2815","line":"fn pcRelBase(field_ptr: usize, pc_rel_offset: i64) !usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2816","line":"    if (pc_rel_offset < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2817","line":"        return math.sub(usize, field_ptr, @as(usize, @intCast(-pc_rel_offset)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2818","line":"    } else {"},
{"lineNum":" 2819","line":"        return math.add(usize, field_ptr, @as(usize, @intCast(pc_rel_offset)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2820","line":"    }"},
{"lineNum":" 2821","line":"}"},
{"lineNum":" 2822","line":""},
{"lineNum":" 2823","line":"test {"},
{"lineNum":" 2824","line":"    std.testing.refAllDecls(@This());"},
{"lineNum":" 2825","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 989, "covered" : 0,};
var merged_data = [];
