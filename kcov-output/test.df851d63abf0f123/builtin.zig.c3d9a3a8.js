var data = {lines:[
{"lineNum":"    1","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"/// `explicit_subsystem` is missing when the subsystem is automatically detected,"},
{"lineNum":"    4","line":"/// so Zig standard library has the subsystem detection logic here. This should generally be"},
{"lineNum":"    5","line":"/// used rather than `explicit_subsystem`."},
{"lineNum":"    6","line":"/// On non-Windows targets, this is `null`."},
{"lineNum":"    7","line":"pub const subsystem: ?std.Target.SubSystem = blk: {"},
{"lineNum":"    8","line":"    if (@hasDecl(builtin, \"explicit_subsystem\")) break :blk builtin.explicit_subsystem;"},
{"lineNum":"    9","line":"    switch (builtin.os.tag) {"},
{"lineNum":"   10","line":"        .windows => {"},
{"lineNum":"   11","line":"            if (builtin.is_test) {"},
{"lineNum":"   12","line":"                break :blk std.Target.SubSystem.Console;"},
{"lineNum":"   13","line":"            }"},
{"lineNum":"   14","line":"            if (@hasDecl(root, \"main\") or"},
{"lineNum":"   15","line":"                @hasDecl(root, \"WinMain\") or"},
{"lineNum":"   16","line":"                @hasDecl(root, \"wWinMain\") or"},
{"lineNum":"   17","line":"                @hasDecl(root, \"WinMainCRTStartup\") or"},
{"lineNum":"   18","line":"                @hasDecl(root, \"wWinMainCRTStartup\"))"},
{"lineNum":"   19","line":"            {"},
{"lineNum":"   20","line":"                break :blk std.Target.SubSystem.Windows;"},
{"lineNum":"   21","line":"            } else {"},
{"lineNum":"   22","line":"                break :blk std.Target.SubSystem.Console;"},
{"lineNum":"   23","line":"            }"},
{"lineNum":"   24","line":"        },"},
{"lineNum":"   25","line":"        else => break :blk null,"},
{"lineNum":"   26","line":"    }"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"   30","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"   31","line":"pub const StackTrace = struct {"},
{"lineNum":"   32","line":"    index: usize,"},
{"lineNum":"   33","line":"    instruction_addresses: []usize,"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    pub fn format("},
{"lineNum":"   36","line":"        self: StackTrace,"},
{"lineNum":"   37","line":"        comptime fmt: []const u8,"},
{"lineNum":"   38","line":"        options: std.fmt.FormatOptions,"},
{"lineNum":"   39","line":"        writer: anytype,"},
{"lineNum":"   40","line":"    ) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"        if (fmt.len != 0) std.fmt.invalidFmtError(fmt, self);"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        // TODO: re-evaluate whether to use format() methods at all."},
{"lineNum":"   44","line":"        // Until then, avoid an error when using GeneralPurposeAllocator with WebAssembly"},
{"lineNum":"   45","line":"        // where it tries to call detectTTYConfig here."},
{"lineNum":"   46","line":"        if (builtin.os.tag == .freestanding) return;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        _ = options;"},
{"lineNum":"   49","line":"        var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"        defer arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   51","line":"        const debug_info = std.debug.getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":"            return writer.print(\"\\nUnable to print stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)});","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"        };"},
{"lineNum":"   54","line":"        const tty_config = std.io.tty.detectConfig(std.io.getStdErr());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"        try writer.writeAll(\"\\n\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   56","line":"        std.debug.writeStackTrace(self, writer, arena.allocator(), debug_info, tty_config) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   57","line":"            try writer.print(\"Unable to print stack trace: {s}\\n\", .{@errorName(err)});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"        };"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"   63","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"   64","line":"pub const GlobalLinkage = enum {"},
{"lineNum":"   65","line":"    Internal,"},
{"lineNum":"   66","line":"    Strong,"},
{"lineNum":"   67","line":"    Weak,"},
{"lineNum":"   68","line":"    LinkOnce,"},
{"lineNum":"   69","line":"};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"   72","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"   73","line":"pub const SymbolVisibility = enum {"},
{"lineNum":"   74","line":"    default,"},
{"lineNum":"   75","line":"    hidden,"},
{"lineNum":"   76","line":"    protected,"},
{"lineNum":"   77","line":"};"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"   80","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"   81","line":"pub const AtomicOrder = enum {"},
{"lineNum":"   82","line":"    Unordered,"},
{"lineNum":"   83","line":"    Monotonic,"},
{"lineNum":"   84","line":"    Acquire,"},
{"lineNum":"   85","line":"    Release,"},
{"lineNum":"   86","line":"    AcqRel,"},
{"lineNum":"   87","line":"    SeqCst,"},
{"lineNum":"   88","line":"};"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"   91","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"   92","line":"pub const ReduceOp = enum {"},
{"lineNum":"   93","line":"    And,"},
{"lineNum":"   94","line":"    Or,"},
{"lineNum":"   95","line":"    Xor,"},
{"lineNum":"   96","line":"    Min,"},
{"lineNum":"   97","line":"    Max,"},
{"lineNum":"   98","line":"    Add,"},
{"lineNum":"   99","line":"    Mul,"},
{"lineNum":"  100","line":"};"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  103","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  104","line":"pub const AtomicRmwOp = enum {"},
{"lineNum":"  105","line":"    Xchg,"},
{"lineNum":"  106","line":"    Add,"},
{"lineNum":"  107","line":"    Sub,"},
{"lineNum":"  108","line":"    And,"},
{"lineNum":"  109","line":"    Nand,"},
{"lineNum":"  110","line":"    Or,"},
{"lineNum":"  111","line":"    Xor,"},
{"lineNum":"  112","line":"    Max,"},
{"lineNum":"  113","line":"    Min,"},
{"lineNum":"  114","line":"};"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"/// The code model puts constraints on the location of symbols and the size of code and data."},
{"lineNum":"  117","line":"/// The selection of a code model is a trade off on speed and restrictions that needs to be selected on a per application basis to meet its requirements."},
{"lineNum":"  118","line":"/// A slightly more detailed explanation can be found in (for example) the [System V Application Binary Interface (x86_64)](https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf) 3.5.1."},
{"lineNum":"  119","line":"///"},
{"lineNum":"  120","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  121","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  122","line":"pub const CodeModel = enum {"},
{"lineNum":"  123","line":"    default,"},
{"lineNum":"  124","line":"    tiny,"},
{"lineNum":"  125","line":"    small,"},
{"lineNum":"  126","line":"    kernel,"},
{"lineNum":"  127","line":"    medium,"},
{"lineNum":"  128","line":"    large,"},
{"lineNum":"  129","line":"};"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  132","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  133","line":"pub const OptimizeMode = enum {"},
{"lineNum":"  134","line":"    Debug,"},
{"lineNum":"  135","line":"    ReleaseSafe,"},
{"lineNum":"  136","line":"    ReleaseFast,"},
{"lineNum":"  137","line":"    ReleaseSmall,"},
{"lineNum":"  138","line":"};"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"/// Deprecated; use OptimizeMode."},
{"lineNum":"  141","line":"pub const Mode = OptimizeMode;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  144","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  145","line":"pub const CallingConvention = enum(u8) {"},
{"lineNum":"  146","line":"    /// This is the default Zig calling convention used when not using `export` on `fn`"},
{"lineNum":"  147","line":"    /// and no other calling convention is specified."},
{"lineNum":"  148","line":"    Unspecified,"},
{"lineNum":"  149","line":"    /// Matches the C ABI for the target."},
{"lineNum":"  150","line":"    /// This is the default calling convention when using `export` on `fn`"},
{"lineNum":"  151","line":"    /// and no other calling convention is specified."},
{"lineNum":"  152","line":"    C,"},
{"lineNum":"  153","line":"    /// This makes a function not have any function prologue or epilogue,"},
{"lineNum":"  154","line":"    /// making the function itself uncallable in regular Zig code."},
{"lineNum":"  155","line":"    /// This can be useful when integrating with assembly."},
{"lineNum":"  156","line":"    Naked,"},
{"lineNum":"  157","line":"    /// Functions with this calling convention are called asynchronously,"},
{"lineNum":"  158","line":"    /// as if called as `async function()`."},
{"lineNum":"  159","line":"    Async,"},
{"lineNum":"  160","line":"    /// Functions with this calling convention are inlined at all call sites."},
{"lineNum":"  161","line":"    Inline,"},
{"lineNum":"  162","line":"    /// x86-only."},
{"lineNum":"  163","line":"    Interrupt,"},
{"lineNum":"  164","line":"    Signal,"},
{"lineNum":"  165","line":"    /// x86-only."},
{"lineNum":"  166","line":"    Stdcall,"},
{"lineNum":"  167","line":"    /// x86-only."},
{"lineNum":"  168","line":"    Fastcall,"},
{"lineNum":"  169","line":"    /// x86-only."},
{"lineNum":"  170","line":"    Vectorcall,"},
{"lineNum":"  171","line":"    /// x86-only."},
{"lineNum":"  172","line":"    Thiscall,"},
{"lineNum":"  173","line":"    /// ARM Procedure Call Standard (obsolete)"},
{"lineNum":"  174","line":"    /// ARM-only."},
{"lineNum":"  175","line":"    APCS,"},
{"lineNum":"  176","line":"    /// ARM Architecture Procedure Call Standard (current standard)"},
{"lineNum":"  177","line":"    /// ARM-only."},
{"lineNum":"  178","line":"    AAPCS,"},
{"lineNum":"  179","line":"    /// ARM Architecture Procedure Call Standard Vector Floating-Point"},
{"lineNum":"  180","line":"    /// ARM-only."},
{"lineNum":"  181","line":"    AAPCSVFP,"},
{"lineNum":"  182","line":"    /// x86-64-only."},
{"lineNum":"  183","line":"    SysV,"},
{"lineNum":"  184","line":"    /// x86-64-only."},
{"lineNum":"  185","line":"    Win64,"},
{"lineNum":"  186","line":"    /// AMD GPU, NVPTX, or SPIR-V kernel"},
{"lineNum":"  187","line":"    Kernel,"},
{"lineNum":"  188","line":"};"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  191","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  192","line":"pub const AddressSpace = enum(u5) {"},
{"lineNum":"  193","line":"    // CPU address spaces."},
{"lineNum":"  194","line":"    generic,"},
{"lineNum":"  195","line":"    gs,"},
{"lineNum":"  196","line":"    fs,"},
{"lineNum":"  197","line":"    ss,"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    // GPU address spaces."},
{"lineNum":"  200","line":"    global,"},
{"lineNum":"  201","line":"    constant,"},
{"lineNum":"  202","line":"    param,"},
{"lineNum":"  203","line":"    shared,"},
{"lineNum":"  204","line":"    local,"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    // AVR address spaces."},
{"lineNum":"  207","line":"    flash,"},
{"lineNum":"  208","line":"    flash1,"},
{"lineNum":"  209","line":"    flash2,"},
{"lineNum":"  210","line":"    flash3,"},
{"lineNum":"  211","line":"    flash4,"},
{"lineNum":"  212","line":"    flash5,"},
{"lineNum":"  213","line":"};"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  216","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  217","line":"pub const SourceLocation = struct {"},
{"lineNum":"  218","line":"    file: [:0]const u8,"},
{"lineNum":"  219","line":"    fn_name: [:0]const u8,"},
{"lineNum":"  220","line":"    line: u32,"},
{"lineNum":"  221","line":"    column: u32,"},
{"lineNum":"  222","line":"};"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"pub const TypeId = std.meta.Tag(Type);"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  227","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  228","line":"pub const Type = union(enum) {"},
{"lineNum":"  229","line":"    Type: void,"},
{"lineNum":"  230","line":"    Void: void,"},
{"lineNum":"  231","line":"    Bool: void,"},
{"lineNum":"  232","line":"    NoReturn: void,"},
{"lineNum":"  233","line":"    Int: Int,"},
{"lineNum":"  234","line":"    Float: Float,"},
{"lineNum":"  235","line":"    Pointer: Pointer,"},
{"lineNum":"  236","line":"    Array: Array,"},
{"lineNum":"  237","line":"    Struct: Struct,"},
{"lineNum":"  238","line":"    ComptimeFloat: void,"},
{"lineNum":"  239","line":"    ComptimeInt: void,"},
{"lineNum":"  240","line":"    Undefined: void,"},
{"lineNum":"  241","line":"    Null: void,"},
{"lineNum":"  242","line":"    Optional: Optional,"},
{"lineNum":"  243","line":"    ErrorUnion: ErrorUnion,"},
{"lineNum":"  244","line":"    ErrorSet: ErrorSet,"},
{"lineNum":"  245","line":"    Enum: Enum,"},
{"lineNum":"  246","line":"    Union: Union,"},
{"lineNum":"  247","line":"    Fn: Fn,"},
{"lineNum":"  248","line":"    Opaque: Opaque,"},
{"lineNum":"  249","line":"    Frame: Frame,"},
{"lineNum":"  250","line":"    AnyFrame: AnyFrame,"},
{"lineNum":"  251","line":"    Vector: Vector,"},
{"lineNum":"  252","line":"    EnumLiteral: void,"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  255","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  256","line":"    pub const Int = struct {"},
{"lineNum":"  257","line":"        signedness: Signedness,"},
{"lineNum":"  258","line":"        bits: u16,"},
{"lineNum":"  259","line":"    };"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  262","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  263","line":"    pub const Float = struct {"},
{"lineNum":"  264","line":"        bits: u16,"},
{"lineNum":"  265","line":"    };"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  268","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  269","line":"    pub const Pointer = struct {"},
{"lineNum":"  270","line":"        size: Size,"},
{"lineNum":"  271","line":"        is_const: bool,"},
{"lineNum":"  272","line":"        is_volatile: bool,"},
{"lineNum":"  273","line":"        /// TODO make this u16 instead of comptime_int"},
{"lineNum":"  274","line":"        alignment: comptime_int,"},
{"lineNum":"  275","line":"        address_space: AddressSpace,"},
{"lineNum":"  276","line":"        child: type,"},
{"lineNum":"  277","line":"        is_allowzero: bool,"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"        /// The type of the sentinel is the element type of the pointer, which is"},
{"lineNum":"  280","line":"        /// the value of the `child` field in this struct. However there is no way"},
{"lineNum":"  281","line":"        /// to refer to that type here, so we use pointer to `anyopaque`."},
{"lineNum":"  282","line":"        sentinel: ?*const anyopaque,"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"        /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  285","line":"        /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  286","line":"        pub const Size = enum(u2) {"},
{"lineNum":"  287","line":"            One,"},
{"lineNum":"  288","line":"            Many,"},
{"lineNum":"  289","line":"            Slice,"},
{"lineNum":"  290","line":"            C,"},
{"lineNum":"  291","line":"        };"},
{"lineNum":"  292","line":"    };"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  295","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  296","line":"    pub const Array = struct {"},
{"lineNum":"  297","line":"        len: comptime_int,"},
{"lineNum":"  298","line":"        child: type,"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"        /// The type of the sentinel is the element type of the array, which is"},
{"lineNum":"  301","line":"        /// the value of the `child` field in this struct. However there is no way"},
{"lineNum":"  302","line":"        /// to refer to that type here, so we use pointer to `anyopaque`."},
{"lineNum":"  303","line":"        sentinel: ?*const anyopaque,"},
{"lineNum":"  304","line":"    };"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  307","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  308","line":"    pub const ContainerLayout = enum(u2) {"},
{"lineNum":"  309","line":"        Auto,"},
{"lineNum":"  310","line":"        Extern,"},
{"lineNum":"  311","line":"        Packed,"},
{"lineNum":"  312","line":"    };"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  315","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  316","line":"    pub const StructField = struct {"},
{"lineNum":"  317","line":"        name: []const u8,"},
{"lineNum":"  318","line":"        type: type,"},
{"lineNum":"  319","line":"        default_value: ?*const anyopaque,"},
{"lineNum":"  320","line":"        is_comptime: bool,"},
{"lineNum":"  321","line":"        alignment: comptime_int,"},
{"lineNum":"  322","line":"    };"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  325","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  326","line":"    pub const Struct = struct {"},
{"lineNum":"  327","line":"        layout: ContainerLayout,"},
{"lineNum":"  328","line":"        /// Only valid if layout is .Packed"},
{"lineNum":"  329","line":"        backing_integer: ?type = null,"},
{"lineNum":"  330","line":"        fields: []const StructField,"},
{"lineNum":"  331","line":"        decls: []const Declaration,"},
{"lineNum":"  332","line":"        is_tuple: bool,"},
{"lineNum":"  333","line":"    };"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  336","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  337","line":"    pub const Optional = struct {"},
{"lineNum":"  338","line":"        child: type,"},
{"lineNum":"  339","line":"    };"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  342","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  343","line":"    pub const ErrorUnion = struct {"},
{"lineNum":"  344","line":"        error_set: type,"},
{"lineNum":"  345","line":"        payload: type,"},
{"lineNum":"  346","line":"    };"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  349","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  350","line":"    pub const Error = struct {"},
{"lineNum":"  351","line":"        name: []const u8,"},
{"lineNum":"  352","line":"    };"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  355","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  356","line":"    pub const ErrorSet = ?[]const Error;"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  359","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  360","line":"    pub const EnumField = struct {"},
{"lineNum":"  361","line":"        name: []const u8,"},
{"lineNum":"  362","line":"        value: comptime_int,"},
{"lineNum":"  363","line":"    };"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  366","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  367","line":"    pub const Enum = struct {"},
{"lineNum":"  368","line":"        tag_type: type,"},
{"lineNum":"  369","line":"        fields: []const EnumField,"},
{"lineNum":"  370","line":"        decls: []const Declaration,"},
{"lineNum":"  371","line":"        is_exhaustive: bool,"},
{"lineNum":"  372","line":"    };"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  375","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  376","line":"    pub const UnionField = struct {"},
{"lineNum":"  377","line":"        name: []const u8,"},
{"lineNum":"  378","line":"        type: type,"},
{"lineNum":"  379","line":"        alignment: comptime_int,"},
{"lineNum":"  380","line":"    };"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  383","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  384","line":"    pub const Union = struct {"},
{"lineNum":"  385","line":"        layout: ContainerLayout,"},
{"lineNum":"  386","line":"        tag_type: ?type,"},
{"lineNum":"  387","line":"        fields: []const UnionField,"},
{"lineNum":"  388","line":"        decls: []const Declaration,"},
{"lineNum":"  389","line":"    };"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  392","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  393","line":"    pub const Fn = struct {"},
{"lineNum":"  394","line":"        calling_convention: CallingConvention,"},
{"lineNum":"  395","line":"        alignment: comptime_int,"},
{"lineNum":"  396","line":"        is_generic: bool,"},
{"lineNum":"  397","line":"        is_var_args: bool,"},
{"lineNum":"  398","line":"        /// TODO change the language spec to make this not optional."},
{"lineNum":"  399","line":"        return_type: ?type,"},
{"lineNum":"  400","line":"        params: []const Param,"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"        /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  403","line":"        /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  404","line":"        pub const Param = struct {"},
{"lineNum":"  405","line":"            is_generic: bool,"},
{"lineNum":"  406","line":"            is_noalias: bool,"},
{"lineNum":"  407","line":"            type: ?type,"},
{"lineNum":"  408","line":"        };"},
{"lineNum":"  409","line":"    };"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  412","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  413","line":"    pub const Opaque = struct {"},
{"lineNum":"  414","line":"        decls: []const Declaration,"},
{"lineNum":"  415","line":"    };"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  418","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  419","line":"    pub const Frame = struct {"},
{"lineNum":"  420","line":"        function: *const anyopaque,"},
{"lineNum":"  421","line":"    };"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  424","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  425","line":"    pub const AnyFrame = struct {"},
{"lineNum":"  426","line":"        child: ?type,"},
{"lineNum":"  427","line":"    };"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  430","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  431","line":"    pub const Vector = struct {"},
{"lineNum":"  432","line":"        len: comptime_int,"},
{"lineNum":"  433","line":"        child: type,"},
{"lineNum":"  434","line":"    };"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    /// This data structure is used by the Zig language code generation and"},
{"lineNum":"  437","line":"    /// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  438","line":"    pub const Declaration = struct {"},
{"lineNum":"  439","line":"        name: []const u8,"},
{"lineNum":"  440","line":"    };"},
{"lineNum":"  441","line":"};"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  444","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  445","line":"pub const FloatMode = enum {"},
{"lineNum":"  446","line":"    Strict,"},
{"lineNum":"  447","line":"    Optimized,"},
{"lineNum":"  448","line":"};"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  451","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  452","line":"pub const Endian = enum {"},
{"lineNum":"  453","line":"    Big,"},
{"lineNum":"  454","line":"    Little,"},
{"lineNum":"  455","line":"};"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  458","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  459","line":"pub const Signedness = enum {"},
{"lineNum":"  460","line":"    signed,"},
{"lineNum":"  461","line":"    unsigned,"},
{"lineNum":"  462","line":"};"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  465","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  466","line":"pub const OutputMode = enum {"},
{"lineNum":"  467","line":"    Exe,"},
{"lineNum":"  468","line":"    Lib,"},
{"lineNum":"  469","line":"    Obj,"},
{"lineNum":"  470","line":"};"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  473","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  474","line":"pub const LinkMode = enum {"},
{"lineNum":"  475","line":"    Static,"},
{"lineNum":"  476","line":"    Dynamic,"},
{"lineNum":"  477","line":"};"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  480","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  481","line":"pub const WasiExecModel = enum {"},
{"lineNum":"  482","line":"    command,"},
{"lineNum":"  483","line":"    reactor,"},
{"lineNum":"  484","line":"};"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  487","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  488","line":"pub const CallModifier = enum {"},
{"lineNum":"  489","line":"    /// Equivalent to function call syntax."},
{"lineNum":"  490","line":"    auto,"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    /// Equivalent to async keyword used with function call syntax."},
{"lineNum":"  493","line":"    async_kw,"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    /// Prevents tail call optimization. This guarantees that the return"},
{"lineNum":"  496","line":"    /// address will point to the callsite, as opposed to the callsite\'s"},
{"lineNum":"  497","line":"    /// callsite. If the call is otherwise required to be tail-called"},
{"lineNum":"  498","line":"    /// or inlined, a compile error is emitted instead."},
{"lineNum":"  499","line":"    never_tail,"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    /// Guarantees that the call will not be inlined. If the call is"},
{"lineNum":"  502","line":"    /// otherwise required to be inlined, a compile error is emitted instead."},
{"lineNum":"  503","line":"    never_inline,"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    /// Asserts that the function call will not suspend. This allows a"},
{"lineNum":"  506","line":"    /// non-async function to call an async function."},
{"lineNum":"  507","line":"    no_async,"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    /// Guarantees that the call will be generated with tail call optimization."},
{"lineNum":"  510","line":"    /// If this is not possible, a compile error is emitted instead."},
{"lineNum":"  511","line":"    always_tail,"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"    /// Guarantees that the call will be inlined at the callsite."},
{"lineNum":"  514","line":"    /// If this is not possible, a compile error is emitted instead."},
{"lineNum":"  515","line":"    always_inline,"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    /// Evaluates the call at compile-time. If the call cannot be completed at"},
{"lineNum":"  518","line":"    /// compile-time, a compile error is emitted instead."},
{"lineNum":"  519","line":"    compile_time,"},
{"lineNum":"  520","line":"};"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  523","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  524","line":"pub const VaListAarch64 = extern struct {"},
{"lineNum":"  525","line":"    __stack: *anyopaque,"},
{"lineNum":"  526","line":"    __gr_top: *anyopaque,"},
{"lineNum":"  527","line":"    __vr_top: *anyopaque,"},
{"lineNum":"  528","line":"    __gr_offs: c_int,"},
{"lineNum":"  529","line":"    __vr_offs: c_int,"},
{"lineNum":"  530","line":"};"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  533","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  534","line":"pub const VaListHexagon = extern struct {"},
{"lineNum":"  535","line":"    __gpr: c_long,"},
{"lineNum":"  536","line":"    __fpr: c_long,"},
{"lineNum":"  537","line":"    __overflow_arg_area: *anyopaque,"},
{"lineNum":"  538","line":"    __reg_save_area: *anyopaque,"},
{"lineNum":"  539","line":"};"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  542","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  543","line":"pub const VaListPowerPc = extern struct {"},
{"lineNum":"  544","line":"    gpr: u8,"},
{"lineNum":"  545","line":"    fpr: u8,"},
{"lineNum":"  546","line":"    reserved: c_ushort,"},
{"lineNum":"  547","line":"    overflow_arg_area: *anyopaque,"},
{"lineNum":"  548","line":"    reg_save_area: *anyopaque,"},
{"lineNum":"  549","line":"};"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  552","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  553","line":"pub const VaListS390x = extern struct {"},
{"lineNum":"  554","line":"    __current_saved_reg_area_pointer: *anyopaque,"},
{"lineNum":"  555","line":"    __saved_reg_area_end_pointer: *anyopaque,"},
{"lineNum":"  556","line":"    __overflow_area_pointer: *anyopaque,"},
{"lineNum":"  557","line":"};"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  560","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  561","line":"pub const VaListX86_64 = extern struct {"},
{"lineNum":"  562","line":"    gp_offset: c_uint,"},
{"lineNum":"  563","line":"    fp_offset: c_uint,"},
{"lineNum":"  564","line":"    overflow_arg_area: *anyopaque,"},
{"lineNum":"  565","line":"    reg_save_area: *anyopaque,"},
{"lineNum":"  566","line":"};"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  569","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  570","line":"pub const VaList = switch (builtin.cpu.arch) {"},
{"lineNum":"  571","line":"    .aarch64, .aarch64_be => switch (builtin.os.tag) {"},
{"lineNum":"  572","line":"        .windows => *u8,"},
{"lineNum":"  573","line":"        .ios, .macos, .tvos, .watchos => *u8,"},
{"lineNum":"  574","line":"        else => @compileError(\"disabled due to miscompilations\"), // VaListAarch64,"},
{"lineNum":"  575","line":"    },"},
{"lineNum":"  576","line":"    .arm => switch (builtin.os.tag) {"},
{"lineNum":"  577","line":"        .ios, .macos, .tvos, .watchos => *u8,"},
{"lineNum":"  578","line":"        else => *anyopaque,"},
{"lineNum":"  579","line":"    },"},
{"lineNum":"  580","line":"    .amdgcn => *u8,"},
{"lineNum":"  581","line":"    .avr => *anyopaque,"},
{"lineNum":"  582","line":"    .bpfel, .bpfeb => *anyopaque,"},
{"lineNum":"  583","line":"    .hexagon => if (builtin.target.isMusl()) VaListHexagon else *u8,"},
{"lineNum":"  584","line":"    .mips, .mipsel, .mips64, .mips64el => *anyopaque,"},
{"lineNum":"  585","line":"    .riscv32, .riscv64 => *anyopaque,"},
{"lineNum":"  586","line":"    .powerpc, .powerpcle => switch (builtin.os.tag) {"},
{"lineNum":"  587","line":"        .ios, .macos, .tvos, .watchos, .aix => *u8,"},
{"lineNum":"  588","line":"        else => VaListPowerPc,"},
{"lineNum":"  589","line":"    },"},
{"lineNum":"  590","line":"    .powerpc64, .powerpc64le => *u8,"},
{"lineNum":"  591","line":"    .sparc, .sparcel, .sparc64 => *anyopaque,"},
{"lineNum":"  592","line":"    .spirv32, .spirv64 => *anyopaque,"},
{"lineNum":"  593","line":"    .s390x => VaListS390x,"},
{"lineNum":"  594","line":"    .wasm32, .wasm64 => *anyopaque,"},
{"lineNum":"  595","line":"    .x86 => *u8,"},
{"lineNum":"  596","line":"    .x86_64 => switch (builtin.os.tag) {"},
{"lineNum":"  597","line":"        .windows => @compileError(\"disabled due to miscompilations\"), // *u8,"},
{"lineNum":"  598","line":"        else => VaListX86_64,"},
{"lineNum":"  599","line":"    },"},
{"lineNum":"  600","line":"    else => @compileError(\"VaList not supported for this target yet\"),"},
{"lineNum":"  601","line":"};"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  604","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  605","line":"pub const PrefetchOptions = struct {"},
{"lineNum":"  606","line":"    /// Whether the prefetch should prepare for a read or a write."},
{"lineNum":"  607","line":"    rw: Rw = .read,"},
{"lineNum":"  608","line":"    /// The data\'s locality in an inclusive range from 0 to 3."},
{"lineNum":"  609","line":"    ///"},
{"lineNum":"  610","line":"    /// 0 means no temporal locality. That is, the data can be immediately"},
{"lineNum":"  611","line":"    /// dropped from the cache after it is accessed."},
{"lineNum":"  612","line":"    ///"},
{"lineNum":"  613","line":"    /// 3 means high temporal locality. That is, the data should be kept in"},
{"lineNum":"  614","line":"    /// the cache as it is likely to be accessed again soon."},
{"lineNum":"  615","line":"    locality: u2 = 3,"},
{"lineNum":"  616","line":"    /// The cache that the prefetch should be performed on."},
{"lineNum":"  617","line":"    cache: Cache = .data,"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"    pub const Rw = enum(u1) {"},
{"lineNum":"  620","line":"        read,"},
{"lineNum":"  621","line":"        write,"},
{"lineNum":"  622","line":"    };"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"    pub const Cache = enum(u1) {"},
{"lineNum":"  625","line":"        instruction,"},
{"lineNum":"  626","line":"        data,"},
{"lineNum":"  627","line":"    };"},
{"lineNum":"  628","line":"};"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  631","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  632","line":"pub const ExportOptions = struct {"},
{"lineNum":"  633","line":"    name: []const u8,"},
{"lineNum":"  634","line":"    linkage: GlobalLinkage = .Strong,"},
{"lineNum":"  635","line":"    section: ?[]const u8 = null,"},
{"lineNum":"  636","line":"    visibility: SymbolVisibility = .default,"},
{"lineNum":"  637","line":"};"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"/// This data structure is used by the Zig language code generation and"},
{"lineNum":"  640","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  641","line":"pub const ExternOptions = struct {"},
{"lineNum":"  642","line":"    name: []const u8,"},
{"lineNum":"  643","line":"    library_name: ?[]const u8 = null,"},
{"lineNum":"  644","line":"    linkage: GlobalLinkage = .Strong,"},
{"lineNum":"  645","line":"    is_thread_local: bool = false,"},
{"lineNum":"  646","line":"};"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"/// This enum is set by the compiler and communicates which compiler backend is"},
{"lineNum":"  649","line":"/// used to produce machine code."},
{"lineNum":"  650","line":"/// Think carefully before deciding to observe this value. Nearly all code should"},
{"lineNum":"  651","line":"/// be agnostic to the backend that implements the language. The use case"},
{"lineNum":"  652","line":"/// to use this value is to **work around problems with compiler implementations.**"},
{"lineNum":"  653","line":"///"},
{"lineNum":"  654","line":"/// Avoid failing the compilation if the compiler backend does not match a"},
{"lineNum":"  655","line":"/// whitelist of backends; rather one should detect that a known problem would"},
{"lineNum":"  656","line":"/// occur in a blacklist of backends."},
{"lineNum":"  657","line":"///"},
{"lineNum":"  658","line":"/// The enum is nonexhaustive so that alternate Zig language implementations may"},
{"lineNum":"  659","line":"/// choose a number as their tag (please use a random number generator rather"},
{"lineNum":"  660","line":"/// than a \"cute\" number) and codebases can interact with these values even if"},
{"lineNum":"  661","line":"/// this upstream enum does not have a name for the number. Of course, upstream"},
{"lineNum":"  662","line":"/// is happy to accept pull requests to add Zig implementations to this enum."},
{"lineNum":"  663","line":"///"},
{"lineNum":"  664","line":"/// This data structure is part of the Zig language specification."},
{"lineNum":"  665","line":"pub const CompilerBackend = enum(u64) {"},
{"lineNum":"  666","line":"    /// It is allowed for a compiler implementation to not reveal its identity,"},
{"lineNum":"  667","line":"    /// in which case this value is appropriate. Be cool and make sure your"},
{"lineNum":"  668","line":"    /// code supports `other` Zig compilers!"},
{"lineNum":"  669","line":"    other = 0,"},
{"lineNum":"  670","line":"    /// The original Zig compiler created in 2015 by Andrew Kelley. Implemented"},
{"lineNum":"  671","line":"    /// in C++. Used LLVM. Deleted from the ZSF ziglang/zig codebase on"},
{"lineNum":"  672","line":"    /// December 6th, 2022."},
{"lineNum":"  673","line":"    stage1 = 1,"},
{"lineNum":"  674","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  675","line":"    /// LLVM backend."},
{"lineNum":"  676","line":"    stage2_llvm = 2,"},
{"lineNum":"  677","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  678","line":"    /// backend that generates C source code."},
{"lineNum":"  679","line":"    /// Note that one can observe whether the compilation will output C code"},
{"lineNum":"  680","line":"    /// directly with `object_format` value rather than the `compiler_backend` value."},
{"lineNum":"  681","line":"    stage2_c = 3,"},
{"lineNum":"  682","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  683","line":"    /// WebAssembly backend."},
{"lineNum":"  684","line":"    stage2_wasm = 4,"},
{"lineNum":"  685","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  686","line":"    /// arm backend."},
{"lineNum":"  687","line":"    stage2_arm = 5,"},
{"lineNum":"  688","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  689","line":"    /// x86_64 backend."},
{"lineNum":"  690","line":"    stage2_x86_64 = 6,"},
{"lineNum":"  691","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  692","line":"    /// aarch64 backend."},
{"lineNum":"  693","line":"    stage2_aarch64 = 7,"},
{"lineNum":"  694","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  695","line":"    /// x86 backend."},
{"lineNum":"  696","line":"    stage2_x86 = 8,"},
{"lineNum":"  697","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  698","line":"    /// riscv64 backend."},
{"lineNum":"  699","line":"    stage2_riscv64 = 9,"},
{"lineNum":"  700","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  701","line":"    /// sparc64 backend."},
{"lineNum":"  702","line":"    stage2_sparc64 = 10,"},
{"lineNum":"  703","line":"    /// The reference implementation self-hosted compiler of Zig, using the"},
{"lineNum":"  704","line":"    /// spirv backend."},
{"lineNum":"  705","line":"    stage2_spirv64 = 11,"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    _,"},
{"lineNum":"  708","line":"};"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"/// This function type is used by the Zig language code generation and"},
{"lineNum":"  711","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  712","line":"pub const TestFn = struct {"},
{"lineNum":"  713","line":"    name: []const u8,"},
{"lineNum":"  714","line":"    func: *const fn () anyerror!void,"},
{"lineNum":"  715","line":"    async_frame_size: ?usize,"},
{"lineNum":"  716","line":"};"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"/// This function type is used by the Zig language code generation and"},
{"lineNum":"  719","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  720","line":"pub const PanicFn = fn ([]const u8, ?*StackTrace, ?usize) noreturn;"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"/// This function is used by the Zig language code generation and"},
{"lineNum":"  723","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  724","line":"pub const panic: PanicFn = if (@hasDecl(root, \"panic\"))"},
{"lineNum":"  725","line":"    root.panic"},
{"lineNum":"  726","line":"else if (@hasDecl(root, \"os\") and @hasDecl(root.os, \"panic\"))"},
{"lineNum":"  727","line":"    root.os.panic"},
{"lineNum":"  728","line":"else"},
{"lineNum":"  729","line":"    default_panic;"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"/// This function is used by the Zig language code generation and"},
{"lineNum":"  732","line":"/// therefore must be kept in sync with the compiler implementation."},
{"lineNum":"  733","line":"pub fn default_panic(msg: []const u8, error_return_trace: ?*StackTrace, ret_addr: ?usize) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":"    @setCold(true);"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"    // For backends that cannot handle the language features depended on by the"},
{"lineNum":"  737","line":"    // default panic handler, we have a simpler panic handler:"},
{"lineNum":"  738","line":"    if (builtin.zig_backend == .stage2_wasm or"},
{"lineNum":"  739","line":"        builtin.zig_backend == .stage2_arm or"},
{"lineNum":"  740","line":"        builtin.zig_backend == .stage2_aarch64 or"},
{"lineNum":"  741","line":"        builtin.zig_backend == .stage2_x86_64 or"},
{"lineNum":"  742","line":"        builtin.zig_backend == .stage2_x86 or"},
{"lineNum":"  743","line":"        builtin.zig_backend == .stage2_riscv64 or"},
{"lineNum":"  744","line":"        builtin.zig_backend == .stage2_sparc64 or"},
{"lineNum":"  745","line":"        builtin.zig_backend == .stage2_spirv64)"},
{"lineNum":"  746","line":"    {"},
{"lineNum":"  747","line":"        while (true) {"},
{"lineNum":"  748","line":"            @breakpoint();"},
{"lineNum":"  749","line":"        }"},
{"lineNum":"  750","line":"    }"},
{"lineNum":"  751","line":"    switch (builtin.os.tag) {"},
{"lineNum":"  752","line":"        .freestanding => {"},
{"lineNum":"  753","line":"            while (true) {"},
{"lineNum":"  754","line":"                @breakpoint();"},
{"lineNum":"  755","line":"            }"},
{"lineNum":"  756","line":"        },"},
{"lineNum":"  757","line":"        .wasi => {"},
{"lineNum":"  758","line":"            std.debug.print(\"{s}\", .{msg});"},
{"lineNum":"  759","line":"            std.os.abort();"},
{"lineNum":"  760","line":"        },"},
{"lineNum":"  761","line":"        .uefi => {"},
{"lineNum":"  762","line":"            const uefi = std.os.uefi;"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"            const ExitData = struct {"},
{"lineNum":"  765","line":"                pub fn create_exit_data(exit_msg: []const u8, exit_size: *usize) ![*:0]u16 {"},
{"lineNum":"  766","line":"                    // Need boot services for pool allocation"},
{"lineNum":"  767","line":"                    if (uefi.system_table.boot_services == null) {"},
{"lineNum":"  768","line":"                        return error.BootServicesUnavailable;"},
{"lineNum":"  769","line":"                    }"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"                    // ExitData buffer must be allocated using boot_services.allocatePool"},
{"lineNum":"  772","line":"                    var utf16: []u16 = try uefi.raw_pool_allocator.alloc(u16, 256);"},
{"lineNum":"  773","line":"                    errdefer uefi.raw_pool_allocator.free(utf16);"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"                    if (exit_msg.len > 255) {"},
{"lineNum":"  776","line":"                        return error.MessageTooLong;"},
{"lineNum":"  777","line":"                    }"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"                    var fmt: [256]u8 = undefined;"},
{"lineNum":"  780","line":"                    var slice = try std.fmt.bufPrint(&fmt, \"\\r\\nerr: {s}\\r\\n\", .{exit_msg});"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"                    var len = try std.unicode.utf8ToUtf16Le(utf16, slice);"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"                    utf16[len] = 0;"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"                    exit_size.* = 256;"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"                    return @as([*:0]u16, @ptrCast(utf16.ptr));"},
{"lineNum":"  789","line":"                }"},
{"lineNum":"  790","line":"            };"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"            var exit_size: usize = 0;"},
{"lineNum":"  793","line":"            var exit_data = ExitData.create_exit_data(msg, &exit_size) catch null;"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"            if (exit_data) |data| {"},
{"lineNum":"  796","line":"                if (uefi.system_table.std_err) |out| {"},
{"lineNum":"  797","line":"                    _ = out.setAttribute(uefi.protocols.SimpleTextOutputProtocol.red);"},
{"lineNum":"  798","line":"                    _ = out.outputString(data);"},
{"lineNum":"  799","line":"                    _ = out.setAttribute(uefi.protocols.SimpleTextOutputProtocol.white);"},
{"lineNum":"  800","line":"                }"},
{"lineNum":"  801","line":"            }"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"            if (uefi.system_table.boot_services) |bs| {"},
{"lineNum":"  804","line":"                _ = bs.exit(uefi.handle, .Aborted, exit_size, exit_data);"},
{"lineNum":"  805","line":"            }"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"            // Didn\'t have boot_services, just fallback to whatever."},
{"lineNum":"  808","line":"            std.os.abort();"},
{"lineNum":"  809","line":"        },"},
{"lineNum":"  810","line":"        .cuda, .amdhsa => std.os.abort(),"},
{"lineNum":"  811","line":"        else => {"},
{"lineNum":"  812","line":"            const first_trace_addr = ret_addr orelse @returnAddress();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  813","line":"            std.debug.panicImpl(error_return_trace, first_trace_addr, msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  814","line":"        },"},
{"lineNum":"  815","line":"    }"},
{"lineNum":"  816","line":"}"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"pub fn checkNonScalarSentinel(expected: anytype, actual: @TypeOf(expected)) void {"},
{"lineNum":"  819","line":"    if (!std.meta.eql(expected, actual)) {"},
{"lineNum":"  820","line":"        panicSentinelMismatch(expected, actual);"},
{"lineNum":"  821","line":"    }"},
{"lineNum":"  822","line":"}"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"pub fn panicSentinelMismatch(expected: anytype, actual: @TypeOf(expected)) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":"    @setCold(true);"},
{"lineNum":"  826","line":"    std.debug.panicExtra(null, @returnAddress(), \"sentinel mismatch: expected {any}, found {any}\", .{ expected, actual });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  827","line":"}"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"pub fn panicUnwrapError(st: ?*StackTrace, err: anyerror) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  830","line":"    @setCold(true);"},
{"lineNum":"  831","line":"    std.debug.panicExtra(st, @returnAddress(), \"attempt to unwrap error: {s}\", .{@errorName(err)});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"}"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"pub fn panicOutOfBounds(index: usize, len: usize) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  835","line":"    @setCold(true);"},
{"lineNum":"  836","line":"    std.debug.panicExtra(null, @returnAddress(), \"index out of bounds: index {d}, len {d}\", .{ index, len });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  837","line":"}"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"pub fn panicStartGreaterThanEnd(start: usize, end: usize) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  840","line":"    @setCold(true);"},
{"lineNum":"  841","line":"    std.debug.panicExtra(null, @returnAddress(), \"start index {d} is larger than end index {d}\", .{ start, end });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"}"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"pub fn panicInactiveUnionField(active: anytype, wanted: @TypeOf(active)) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  845","line":"    @setCold(true);"},
{"lineNum":"  846","line":"    std.debug.panicExtra(null, @returnAddress(), \"access of union field \'{s}\' while field \'{s}\' is active\", .{ @tagName(wanted), @tagName(active) });","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  847","line":"}"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"pub const panic_messages = struct {"},
{"lineNum":"  850","line":"    pub const unreach = \"reached unreachable code\";"},
{"lineNum":"  851","line":"    pub const unwrap_null = \"attempt to use null value\";"},
{"lineNum":"  852","line":"    pub const cast_to_null = \"cast causes pointer to be null\";"},
{"lineNum":"  853","line":"    pub const incorrect_alignment = \"incorrect alignment\";"},
{"lineNum":"  854","line":"    pub const invalid_error_code = \"invalid error code\";"},
{"lineNum":"  855","line":"    pub const cast_truncated_data = \"integer cast truncated bits\";"},
{"lineNum":"  856","line":"    pub const negative_to_unsigned = \"attempt to cast negative value to unsigned integer\";"},
{"lineNum":"  857","line":"    pub const integer_overflow = \"integer overflow\";"},
{"lineNum":"  858","line":"    pub const shl_overflow = \"left shift overflowed bits\";"},
{"lineNum":"  859","line":"    pub const shr_overflow = \"right shift overflowed bits\";"},
{"lineNum":"  860","line":"    pub const divide_by_zero = \"division by zero\";"},
{"lineNum":"  861","line":"    pub const exact_division_remainder = \"exact division produced remainder\";"},
{"lineNum":"  862","line":"    pub const inactive_union_field = \"access of inactive union field\";"},
{"lineNum":"  863","line":"    pub const integer_part_out_of_bounds = \"integer part of floating point value out of bounds\";"},
{"lineNum":"  864","line":"    pub const corrupt_switch = \"switch on corrupt value\";"},
{"lineNum":"  865","line":"    pub const shift_rhs_too_big = \"shift amount is greater than the type size\";"},
{"lineNum":"  866","line":"    pub const invalid_enum_value = \"invalid enum value\";"},
{"lineNum":"  867","line":"    pub const sentinel_mismatch = \"sentinel mismatch\";"},
{"lineNum":"  868","line":"    pub const unwrap_error = \"attempt to unwrap error\";"},
{"lineNum":"  869","line":"    pub const index_out_of_bounds = \"index out of bounds\";"},
{"lineNum":"  870","line":"    pub const start_index_greater_than_end = \"start index is larger than end index\";"},
{"lineNum":"  871","line":"    pub const for_len_mismatch = \"for loop over objects with non-equal lengths\";"},
{"lineNum":"  872","line":"    pub const memcpy_len_mismatch = \"@memcpy arguments have non-equal lengths\";"},
{"lineNum":"  873","line":"    pub const memcpy_alias = \"@memcpy arguments alias\";"},
{"lineNum":"  874","line":"    pub const noreturn_returned = \"\'noreturn\' function returned\";"},
{"lineNum":"  875","line":"};"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"pub noinline fn returnError(st: *StackTrace) void {","class":"lineCov","hits":"1","order":"1237","possible_hits":"1",},
{"lineNum":"  878","line":"    @setCold(true);"},
{"lineNum":"  879","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  880","line":"    addErrRetTraceAddr(st, @returnAddress());","class":"lineCov","hits":"1","order":"1238","possible_hits":"1",},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"pub inline fn addErrRetTraceAddr(st: *StackTrace, addr: usize) void {"},
{"lineNum":"  884","line":"    if (st.index < st.instruction_addresses.len)","class":"lineCov","hits":"1","order":"1239","possible_hits":"1",},
{"lineNum":"  885","line":"        st.instruction_addresses[st.index] = addr;","class":"lineCov","hits":"1","order":"1240","possible_hits":"1",},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"    st.index += 1;","class":"linePartCov","hits":"1","order":"1241","possible_hits":"2",},
{"lineNum":"  888","line":"}"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"const std = @import(\"std.zig\");"},
{"lineNum":"  891","line":"const root = @import(\"root\");"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 27, "covered" : 5,};
var merged_data = [];
