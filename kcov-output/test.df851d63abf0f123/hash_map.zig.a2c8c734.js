var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const assert = debug.assert;"},
{"lineNum":"    4","line":"const autoHash = std.hash.autoHash;"},
{"lineNum":"    5","line":"const debug = std.debug;"},
{"lineNum":"    6","line":"const math = std.math;"},
{"lineNum":"    7","line":"const mem = std.mem;"},
{"lineNum":"    8","line":"const meta = std.meta;"},
{"lineNum":"    9","line":"const trait = meta.trait;"},
{"lineNum":"   10","line":"const Allocator = mem.Allocator;"},
{"lineNum":"   11","line":"const Wyhash = std.hash.Wyhash;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"pub fn getAutoHashFn(comptime K: type, comptime Context: type) (fn (Context, K) u64) {"},
{"lineNum":"   14","line":"    comptime {"},
{"lineNum":"   15","line":"        assert(@hasDecl(std, \"StringHashMap\")); // detect when the following message needs updated"},
{"lineNum":"   16","line":"        if (K == []const u8) {"},
{"lineNum":"   17","line":"            @compileError(\"std.auto_hash.autoHash does not allow slices here (\" ++"},
{"lineNum":"   18","line":"                @typeName(K) ++"},
{"lineNum":"   19","line":"                \") because the intent is unclear. \" ++"},
{"lineNum":"   20","line":"                \"Consider using std.StringHashMap for hashing the contents of []const u8. \" ++"},
{"lineNum":"   21","line":"                \"Alternatively, consider using std.auto_hash.hash or providing your own hash function instead.\");"},
{"lineNum":"   22","line":"        }"},
{"lineNum":"   23","line":"    }"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    return struct {"},
{"lineNum":"   26","line":"        fn hash(ctx: Context, key: K) u64 {","class":"lineCov","hits":"1","order":"3056","possible_hits":"1",},
{"lineNum":"   27","line":"            _ = ctx;"},
{"lineNum":"   28","line":"            if (comptime trait.hasUniqueRepresentation(K)) {"},
{"lineNum":"   29","line":"                return Wyhash.hash(0, std.mem.asBytes(&key));","class":"lineCov","hits":"1","order":"3057","possible_hits":"1",},
{"lineNum":"   30","line":"            } else {"},
{"lineNum":"   31","line":"                var hasher = Wyhash.init(0);"},
{"lineNum":"   32","line":"                autoHash(&hasher, key);"},
{"lineNum":"   33","line":"                return hasher.final();"},
{"lineNum":"   34","line":"            }"},
{"lineNum":"   35","line":"        }"},
{"lineNum":"   36","line":"    }.hash;"},
{"lineNum":"   37","line":"}"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"pub fn getAutoEqlFn(comptime K: type, comptime Context: type) (fn (Context, K, K) bool) {"},
{"lineNum":"   40","line":"    return struct {"},
{"lineNum":"   41","line":"        fn eql(ctx: Context, a: K, b: K) bool {","class":"lineCov","hits":"1","order":"3102","possible_hits":"1",},
{"lineNum":"   42","line":"            _ = ctx;"},
{"lineNum":"   43","line":"            return meta.eql(a, b);","class":"lineCov","hits":"1","order":"3103","possible_hits":"1",},
{"lineNum":"   44","line":"        }"},
{"lineNum":"   45","line":"    }.eql;"},
{"lineNum":"   46","line":"}"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"pub fn AutoHashMap(comptime K: type, comptime V: type) type {"},
{"lineNum":"   49","line":"    return HashMap(K, V, AutoContext(K), default_max_load_percentage);"},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"pub fn AutoHashMapUnmanaged(comptime K: type, comptime V: type) type {"},
{"lineNum":"   53","line":"    return HashMapUnmanaged(K, V, AutoContext(K), default_max_load_percentage);"},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"pub fn AutoContext(comptime K: type) type {"},
{"lineNum":"   57","line":"    return struct {"},
{"lineNum":"   58","line":"        pub const hash = getAutoHashFn(K, @This());"},
{"lineNum":"   59","line":"        pub const eql = getAutoEqlFn(K, @This());"},
{"lineNum":"   60","line":"    };"},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"/// Builtin hashmap for strings as keys."},
{"lineNum":"   64","line":"/// Key memory is managed by the caller.  Keys and values"},
{"lineNum":"   65","line":"/// will not automatically be freed."},
{"lineNum":"   66","line":"pub fn StringHashMap(comptime V: type) type {"},
{"lineNum":"   67","line":"    return HashMap([]const u8, V, StringContext, default_max_load_percentage);"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"/// Key memory is managed by the caller.  Keys and values"},
{"lineNum":"   71","line":"/// will not automatically be freed."},
{"lineNum":"   72","line":"pub fn StringHashMapUnmanaged(comptime V: type) type {"},
{"lineNum":"   73","line":"    return HashMapUnmanaged([]const u8, V, StringContext, default_max_load_percentage);"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"pub const StringContext = struct {"},
{"lineNum":"   77","line":"    pub fn hash(self: @This(), s: []const u8) u64 {","class":"lineCov","hits":"1","order":"992","possible_hits":"1",},
{"lineNum":"   78","line":"        _ = self;"},
{"lineNum":"   79","line":"        return hashString(s);","class":"lineCov","hits":"1","order":"993","possible_hits":"1",},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":"    pub fn eql(self: @This(), a: []const u8, b: []const u8) bool {","class":"lineCov","hits":"1","order":"1748","possible_hits":"1",},
{"lineNum":"   82","line":"        _ = self;"},
{"lineNum":"   83","line":"        return eqlString(a, b);","class":"lineCov","hits":"1","order":"1749","possible_hits":"1",},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"};"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"pub fn eqlString(a: []const u8, b: []const u8) bool {","class":"lineCov","hits":"1","order":"1750","possible_hits":"1",},
{"lineNum":"   88","line":"    return mem.eql(u8, a, b);","class":"lineCov","hits":"1","order":"1751","possible_hits":"1",},
{"lineNum":"   89","line":"}"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"pub fn hashString(s: []const u8) u64 {","class":"lineCov","hits":"1","order":"994","possible_hits":"1",},
{"lineNum":"   92","line":"    return std.hash.Wyhash.hash(0, s);","class":"lineCov","hits":"1","order":"995","possible_hits":"1",},
{"lineNum":"   93","line":"}"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"pub const StringIndexContext = struct {"},
{"lineNum":"   96","line":"    bytes: *std.ArrayListUnmanaged(u8),"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    pub fn eql(self: @This(), a: u32, b: u32) bool {"},
{"lineNum":"   99","line":"        _ = self;"},
{"lineNum":"  100","line":"        return a == b;"},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    pub fn hash(self: @This(), x: u32) u64 {"},
{"lineNum":"  104","line":"        const x_slice = mem.sliceTo(@as([*:0]const u8, @ptrCast(self.bytes.items.ptr)) + x, 0);"},
{"lineNum":"  105","line":"        return hashString(x_slice);"},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":"};"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"pub const StringIndexAdapter = struct {"},
{"lineNum":"  110","line":"    bytes: *std.ArrayListUnmanaged(u8),"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    pub fn eql(self: @This(), a_slice: []const u8, b: u32) bool {"},
{"lineNum":"  113","line":"        const b_slice = mem.sliceTo(@as([*:0]const u8, @ptrCast(self.bytes.items.ptr)) + b, 0);"},
{"lineNum":"  114","line":"        return mem.eql(u8, a_slice, b_slice);"},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    pub fn hash(self: @This(), adapted_key: []const u8) u64 {"},
{"lineNum":"  118","line":"        _ = self;"},
{"lineNum":"  119","line":"        return hashString(adapted_key);"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":"};"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"pub const default_max_load_percentage = 80;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"/// This function issues a compile error with a helpful message if there"},
{"lineNum":"  126","line":"/// is a problem with the provided context type.  A context must have the following"},
{"lineNum":"  127","line":"/// member functions:"},
{"lineNum":"  128","line":"///   - hash(self, PseudoKey) Hash"},
{"lineNum":"  129","line":"///   - eql(self, PseudoKey, Key) bool"},
{"lineNum":"  130","line":"/// If you are passing a context to a *Adapted function, PseudoKey is the type"},
{"lineNum":"  131","line":"/// of the key parameter.  Otherwise, when creating a HashMap or HashMapUnmanaged"},
{"lineNum":"  132","line":"/// type, PseudoKey = Key = K."},
{"lineNum":"  133","line":"pub fn verifyContext("},
{"lineNum":"  134","line":"    comptime RawContext: type,"},
{"lineNum":"  135","line":"    comptime PseudoKey: type,"},
{"lineNum":"  136","line":"    comptime Key: type,"},
{"lineNum":"  137","line":"    comptime Hash: type,"},
{"lineNum":"  138","line":"    comptime is_array: bool,"},
{"lineNum":"  139","line":") void {"},
{"lineNum":"  140","line":"    comptime {"},
{"lineNum":"  141","line":"        var allow_const_ptr = false;"},
{"lineNum":"  142","line":"        var allow_mutable_ptr = false;"},
{"lineNum":"  143","line":"        // Context is the actual namespace type.  RawContext may be a pointer to Context."},
{"lineNum":"  144","line":"        var Context = RawContext;"},
{"lineNum":"  145","line":"        // Make sure the context is a namespace type which may have member functions"},
{"lineNum":"  146","line":"        switch (@typeInfo(Context)) {"},
{"lineNum":"  147","line":"            .Struct, .Union, .Enum => {},"},
{"lineNum":"  148","line":"            // Special-case .Opaque for a better error message"},
{"lineNum":"  149","line":"            .Opaque => @compileError(\"Hash context must be a type with hash and eql member functions.  Cannot use \" ++ @typeName(Context) ++ \" because it is opaque.  Use a pointer instead.\"),"},
{"lineNum":"  150","line":"            .Pointer => |ptr| {"},
{"lineNum":"  151","line":"                if (ptr.size != .One) {"},
{"lineNum":"  152","line":"                    @compileError(\"Hash context must be a type with hash and eql member functions.  Cannot use \" ++ @typeName(Context) ++ \" because it is not a single pointer.\");"},
{"lineNum":"  153","line":"                }"},
{"lineNum":"  154","line":"                Context = ptr.child;"},
{"lineNum":"  155","line":"                allow_const_ptr = true;"},
{"lineNum":"  156","line":"                allow_mutable_ptr = !ptr.is_const;"},
{"lineNum":"  157","line":"                switch (@typeInfo(Context)) {"},
{"lineNum":"  158","line":"                    .Struct, .Union, .Enum, .Opaque => {},"},
{"lineNum":"  159","line":"                    else => @compileError(\"Hash context must be a type with hash and eql member functions.  Cannot use \" ++ @typeName(Context)),"},
{"lineNum":"  160","line":"                }"},
{"lineNum":"  161","line":"            },"},
{"lineNum":"  162","line":"            else => @compileError(\"Hash context must be a type with hash and eql member functions.  Cannot use \" ++ @typeName(Context)),"},
{"lineNum":"  163","line":"        }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        // Keep track of multiple errors so we can report them all."},
{"lineNum":"  166","line":"        var errors: []const u8 = \"\";"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"        // Put common errors here, they will only be evaluated"},
{"lineNum":"  169","line":"        // if the error is actually triggered."},
{"lineNum":"  170","line":"        const lazy = struct {"},
{"lineNum":"  171","line":"            const prefix = \"\\n  \";"},
{"lineNum":"  172","line":"            const deep_prefix = prefix ++ \"  \";"},
{"lineNum":"  173","line":"            const hash_signature = \"fn (self, \" ++ @typeName(PseudoKey) ++ \") \" ++ @typeName(Hash);"},
{"lineNum":"  174","line":"            const index_param = if (is_array) \", b_index: usize\" else \"\";"},
{"lineNum":"  175","line":"            const eql_signature = \"fn (self, \" ++ @typeName(PseudoKey) ++ \", \" ++"},
{"lineNum":"  176","line":"                @typeName(Key) ++ index_param ++ \") bool\";"},
{"lineNum":"  177","line":"            const err_invalid_hash_signature = prefix ++ @typeName(Context) ++ \".hash must be \" ++ hash_signature ++"},
{"lineNum":"  178","line":"                deep_prefix ++ \"but is actually \" ++ @typeName(@TypeOf(Context.hash));"},
{"lineNum":"  179","line":"            const err_invalid_eql_signature = prefix ++ @typeName(Context) ++ \".eql must be \" ++ eql_signature ++"},
{"lineNum":"  180","line":"                deep_prefix ++ \"but is actually \" ++ @typeName(@TypeOf(Context.eql));"},
{"lineNum":"  181","line":"        };"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        // Verify Context.hash(self, PseudoKey) => Hash"},
{"lineNum":"  184","line":"        if (@hasDecl(Context, \"hash\")) {"},
{"lineNum":"  185","line":"            const hash = Context.hash;"},
{"lineNum":"  186","line":"            const info = @typeInfo(@TypeOf(hash));"},
{"lineNum":"  187","line":"            if (info == .Fn) {"},
{"lineNum":"  188","line":"                const func = info.Fn;"},
{"lineNum":"  189","line":"                if (func.params.len != 2) {"},
{"lineNum":"  190","line":"                    errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  191","line":"                } else {"},
{"lineNum":"  192","line":"                    var emitted_signature = false;"},
{"lineNum":"  193","line":"                    if (func.params[0].type) |Self| {"},
{"lineNum":"  194","line":"                        if (Self == Context) {"},
{"lineNum":"  195","line":"                            // pass, this is always fine."},
{"lineNum":"  196","line":"                        } else if (Self == *const Context) {"},
{"lineNum":"  197","line":"                            if (!allow_const_ptr) {"},
{"lineNum":"  198","line":"                                if (!emitted_signature) {"},
{"lineNum":"  199","line":"                                    errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  200","line":"                                    emitted_signature = true;"},
{"lineNum":"  201","line":"                                }"},
{"lineNum":"  202","line":"                                errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context) ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  203","line":"                                errors = errors ++ lazy.deep_prefix ++ \"Note: Cannot be a pointer because it is passed by value.\";"},
{"lineNum":"  204","line":"                            }"},
{"lineNum":"  205","line":"                        } else if (Self == *Context) {"},
{"lineNum":"  206","line":"                            if (!allow_mutable_ptr) {"},
{"lineNum":"  207","line":"                                if (!emitted_signature) {"},
{"lineNum":"  208","line":"                                    errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  209","line":"                                    emitted_signature = true;"},
{"lineNum":"  210","line":"                                }"},
{"lineNum":"  211","line":"                                if (!allow_const_ptr) {"},
{"lineNum":"  212","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context) ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  213","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"Note: Cannot be a pointer because it is passed by value.\";"},
{"lineNum":"  214","line":"                                } else {"},
{"lineNum":"  215","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context) ++ \" or \" ++ @typeName(*const Context) ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  216","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"Note: Cannot be non-const because it is passed by const pointer.\";"},
{"lineNum":"  217","line":"                                }"},
{"lineNum":"  218","line":"                            }"},
{"lineNum":"  219","line":"                        } else {"},
{"lineNum":"  220","line":"                            if (!emitted_signature) {"},
{"lineNum":"  221","line":"                                errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  222","line":"                                emitted_signature = true;"},
{"lineNum":"  223","line":"                            }"},
{"lineNum":"  224","line":"                            errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context);"},
{"lineNum":"  225","line":"                            if (allow_const_ptr) {"},
{"lineNum":"  226","line":"                                errors = errors ++ \" or \" ++ @typeName(*const Context);"},
{"lineNum":"  227","line":"                                if (allow_mutable_ptr) {"},
{"lineNum":"  228","line":"                                    errors = errors ++ \" or \" ++ @typeName(*Context);"},
{"lineNum":"  229","line":"                                }"},
{"lineNum":"  230","line":"                            }"},
{"lineNum":"  231","line":"                            errors = errors ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  232","line":"                        }"},
{"lineNum":"  233","line":"                    }"},
{"lineNum":"  234","line":"                    if (func.params[1].type != null and func.params[1].type.? != PseudoKey) {"},
{"lineNum":"  235","line":"                        if (!emitted_signature) {"},
{"lineNum":"  236","line":"                            errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  237","line":"                            emitted_signature = true;"},
{"lineNum":"  238","line":"                        }"},
{"lineNum":"  239","line":"                        errors = errors ++ lazy.deep_prefix ++ \"Second parameter must be \" ++ @typeName(PseudoKey) ++ \", but is \" ++ @typeName(func.params[1].type.?);"},
{"lineNum":"  240","line":"                    }"},
{"lineNum":"  241","line":"                    if (func.return_type != null and func.return_type.? != Hash) {"},
{"lineNum":"  242","line":"                        if (!emitted_signature) {"},
{"lineNum":"  243","line":"                            errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  244","line":"                            emitted_signature = true;"},
{"lineNum":"  245","line":"                        }"},
{"lineNum":"  246","line":"                        errors = errors ++ lazy.deep_prefix ++ \"Return type must be \" ++ @typeName(Hash) ++ \", but was \" ++ @typeName(func.return_type.?);"},
{"lineNum":"  247","line":"                    }"},
{"lineNum":"  248","line":"                    // If any of these are generic (null), we cannot verify them."},
{"lineNum":"  249","line":"                    // The call sites check the return type, but cannot check the"},
{"lineNum":"  250","line":"                    // parameters.  This may cause compile errors with generic hash/eql functions."},
{"lineNum":"  251","line":"                }"},
{"lineNum":"  252","line":"            } else {"},
{"lineNum":"  253","line":"                errors = errors ++ lazy.err_invalid_hash_signature;"},
{"lineNum":"  254","line":"            }"},
{"lineNum":"  255","line":"        } else {"},
{"lineNum":"  256","line":"            errors = errors ++ lazy.prefix ++ @typeName(Context) ++ \" must declare a hash function with signature \" ++ lazy.hash_signature;"},
{"lineNum":"  257","line":"        }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"        // Verify Context.eql(self, PseudoKey, Key) => bool"},
{"lineNum":"  260","line":"        if (@hasDecl(Context, \"eql\")) {"},
{"lineNum":"  261","line":"            const eql = Context.eql;"},
{"lineNum":"  262","line":"            const info = @typeInfo(@TypeOf(eql));"},
{"lineNum":"  263","line":"            if (info == .Fn) {"},
{"lineNum":"  264","line":"                const func = info.Fn;"},
{"lineNum":"  265","line":"                const args_len = if (is_array) 4 else 3;"},
{"lineNum":"  266","line":"                if (func.params.len != args_len) {"},
{"lineNum":"  267","line":"                    errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  268","line":"                } else {"},
{"lineNum":"  269","line":"                    var emitted_signature = false;"},
{"lineNum":"  270","line":"                    if (func.params[0].type) |Self| {"},
{"lineNum":"  271","line":"                        if (Self == Context) {"},
{"lineNum":"  272","line":"                            // pass, this is always fine."},
{"lineNum":"  273","line":"                        } else if (Self == *const Context) {"},
{"lineNum":"  274","line":"                            if (!allow_const_ptr) {"},
{"lineNum":"  275","line":"                                if (!emitted_signature) {"},
{"lineNum":"  276","line":"                                    errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  277","line":"                                    emitted_signature = true;"},
{"lineNum":"  278","line":"                                }"},
{"lineNum":"  279","line":"                                errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context) ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  280","line":"                                errors = errors ++ lazy.deep_prefix ++ \"Note: Cannot be a pointer because it is passed by value.\";"},
{"lineNum":"  281","line":"                            }"},
{"lineNum":"  282","line":"                        } else if (Self == *Context) {"},
{"lineNum":"  283","line":"                            if (!allow_mutable_ptr) {"},
{"lineNum":"  284","line":"                                if (!emitted_signature) {"},
{"lineNum":"  285","line":"                                    errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  286","line":"                                    emitted_signature = true;"},
{"lineNum":"  287","line":"                                }"},
{"lineNum":"  288","line":"                                if (!allow_const_ptr) {"},
{"lineNum":"  289","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context) ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  290","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"Note: Cannot be a pointer because it is passed by value.\";"},
{"lineNum":"  291","line":"                                } else {"},
{"lineNum":"  292","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context) ++ \" or \" ++ @typeName(*const Context) ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  293","line":"                                    errors = errors ++ lazy.deep_prefix ++ \"Note: Cannot be non-const because it is passed by const pointer.\";"},
{"lineNum":"  294","line":"                                }"},
{"lineNum":"  295","line":"                            }"},
{"lineNum":"  296","line":"                        } else {"},
{"lineNum":"  297","line":"                            if (!emitted_signature) {"},
{"lineNum":"  298","line":"                                errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  299","line":"                                emitted_signature = true;"},
{"lineNum":"  300","line":"                            }"},
{"lineNum":"  301","line":"                            errors = errors ++ lazy.deep_prefix ++ \"First parameter must be \" ++ @typeName(Context);"},
{"lineNum":"  302","line":"                            if (allow_const_ptr) {"},
{"lineNum":"  303","line":"                                errors = errors ++ \" or \" ++ @typeName(*const Context);"},
{"lineNum":"  304","line":"                                if (allow_mutable_ptr) {"},
{"lineNum":"  305","line":"                                    errors = errors ++ \" or \" ++ @typeName(*Context);"},
{"lineNum":"  306","line":"                                }"},
{"lineNum":"  307","line":"                            }"},
{"lineNum":"  308","line":"                            errors = errors ++ \", but is \" ++ @typeName(Self);"},
{"lineNum":"  309","line":"                        }"},
{"lineNum":"  310","line":"                    }"},
{"lineNum":"  311","line":"                    if (func.params[1].type.? != PseudoKey) {"},
{"lineNum":"  312","line":"                        if (!emitted_signature) {"},
{"lineNum":"  313","line":"                            errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  314","line":"                            emitted_signature = true;"},
{"lineNum":"  315","line":"                        }"},
{"lineNum":"  316","line":"                        errors = errors ++ lazy.deep_prefix ++ \"Second parameter must be \" ++ @typeName(PseudoKey) ++ \", but is \" ++ @typeName(func.params[1].type.?);"},
{"lineNum":"  317","line":"                    }"},
{"lineNum":"  318","line":"                    if (func.params[2].type.? != Key) {"},
{"lineNum":"  319","line":"                        if (!emitted_signature) {"},
{"lineNum":"  320","line":"                            errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  321","line":"                            emitted_signature = true;"},
{"lineNum":"  322","line":"                        }"},
{"lineNum":"  323","line":"                        errors = errors ++ lazy.deep_prefix ++ \"Third parameter must be \" ++ @typeName(Key) ++ \", but is \" ++ @typeName(func.params[2].type.?);"},
{"lineNum":"  324","line":"                    }"},
{"lineNum":"  325","line":"                    if (func.return_type.? != bool) {"},
{"lineNum":"  326","line":"                        if (!emitted_signature) {"},
{"lineNum":"  327","line":"                            errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  328","line":"                            emitted_signature = true;"},
{"lineNum":"  329","line":"                        }"},
{"lineNum":"  330","line":"                        errors = errors ++ lazy.deep_prefix ++ \"Return type must be bool, but was \" ++ @typeName(func.return_type.?);"},
{"lineNum":"  331","line":"                    }"},
{"lineNum":"  332","line":"                    // If any of these are generic (null), we cannot verify them."},
{"lineNum":"  333","line":"                    // The call sites check the return type, but cannot check the"},
{"lineNum":"  334","line":"                    // parameters.  This may cause compile errors with generic hash/eql functions."},
{"lineNum":"  335","line":"                }"},
{"lineNum":"  336","line":"            } else {"},
{"lineNum":"  337","line":"                errors = errors ++ lazy.err_invalid_eql_signature;"},
{"lineNum":"  338","line":"            }"},
{"lineNum":"  339","line":"        } else {"},
{"lineNum":"  340","line":"            errors = errors ++ lazy.prefix ++ @typeName(Context) ++ \" must declare a eql function with signature \" ++ lazy.eql_signature;"},
{"lineNum":"  341","line":"        }"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"        if (errors.len != 0) {"},
{"lineNum":"  344","line":"            // errors begins with a newline (from lazy.prefix)"},
{"lineNum":"  345","line":"            @compileError(\"Problems found with hash context type \" ++ @typeName(Context) ++ \":\" ++ errors);"},
{"lineNum":"  346","line":"        }"},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"/// General purpose hash table."},
{"lineNum":"  351","line":"/// No order is guaranteed and any modification invalidates live iterators."},
{"lineNum":"  352","line":"/// It provides fast operations (lookup, insertion, deletion) with quite high"},
{"lineNum":"  353","line":"/// load factors (up to 80% by default) for low memory usage."},
{"lineNum":"  354","line":"/// For a hash map that can be initialized directly that does not store an Allocator"},
{"lineNum":"  355","line":"/// field, see `HashMapUnmanaged`."},
{"lineNum":"  356","line":"/// If iterating over the table entries is a strong usecase and needs to be fast,"},
{"lineNum":"  357","line":"/// prefer the alternative `std.ArrayHashMap`."},
{"lineNum":"  358","line":"/// Context must be a struct type with two member functions:"},
{"lineNum":"  359","line":"///   hash(self, K) u64"},
{"lineNum":"  360","line":"///   eql(self, K, K) bool"},
{"lineNum":"  361","line":"/// Adapted variants of many functions are provided.  These variants"},
{"lineNum":"  362","line":"/// take a pseudo key instead of a key.  Their context must have the functions:"},
{"lineNum":"  363","line":"///   hash(self, PseudoKey) u64"},
{"lineNum":"  364","line":"///   eql(self, PseudoKey, K) bool"},
{"lineNum":"  365","line":"pub fn HashMap("},
{"lineNum":"  366","line":"    comptime K: type,"},
{"lineNum":"  367","line":"    comptime V: type,"},
{"lineNum":"  368","line":"    comptime Context: type,"},
{"lineNum":"  369","line":"    comptime max_load_percentage: u64,"},
{"lineNum":"  370","line":") type {"},
{"lineNum":"  371","line":"    return struct {"},
{"lineNum":"  372","line":"        unmanaged: Unmanaged,"},
{"lineNum":"  373","line":"        allocator: Allocator,"},
{"lineNum":"  374","line":"        ctx: Context,"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"        comptime {"},
{"lineNum":"  377","line":"            verifyContext(Context, K, K, u64, false);"},
{"lineNum":"  378","line":"        }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"        /// The type of the unmanaged hash map underlying this wrapper"},
{"lineNum":"  381","line":"        pub const Unmanaged = HashMapUnmanaged(K, V, Context, max_load_percentage);"},
{"lineNum":"  382","line":"        /// An entry, containing pointers to a key and value stored in the map"},
{"lineNum":"  383","line":"        pub const Entry = Unmanaged.Entry;"},
{"lineNum":"  384","line":"        /// A copy of a key and value which are no longer in the map"},
{"lineNum":"  385","line":"        pub const KV = Unmanaged.KV;"},
{"lineNum":"  386","line":"        /// The integer type that is the result of hashing"},
{"lineNum":"  387","line":"        pub const Hash = Unmanaged.Hash;"},
{"lineNum":"  388","line":"        /// The iterator type returned by iterator()"},
{"lineNum":"  389","line":"        pub const Iterator = Unmanaged.Iterator;"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"        pub const KeyIterator = Unmanaged.KeyIterator;"},
{"lineNum":"  392","line":"        pub const ValueIterator = Unmanaged.ValueIterator;"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"        /// The integer type used to store the size of the map"},
{"lineNum":"  395","line":"        pub const Size = Unmanaged.Size;"},
{"lineNum":"  396","line":"        /// The type returned from getOrPut and variants"},
{"lineNum":"  397","line":"        pub const GetOrPutResult = Unmanaged.GetOrPutResult;"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"        const Self = @This();"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"        /// Create a managed hash map with an empty context."},
{"lineNum":"  402","line":"        /// If the context is not zero-sized, you must use"},
{"lineNum":"  403","line":"        /// initContext(allocator, ctx) instead."},
{"lineNum":"  404","line":"        pub fn init(allocator: Allocator) Self {","class":"linePartCov","hits":"2","order":"832","possible_hits":"3",},
{"lineNum":"  405","line":"            if (@sizeOf(Context) != 0) {"},
{"lineNum":"  406","line":"                @compileError(\"Context must be specified! Call initContext(allocator, ctx) instead.\");"},
{"lineNum":"  407","line":"            }"},
{"lineNum":"  408","line":"            return .{","class":"linePartCov","hits":"2","order":"833","possible_hits":"3",},
{"lineNum":"  409","line":"                .unmanaged = .{},"},
{"lineNum":"  410","line":"                .allocator = allocator,"},
{"lineNum":"  411","line":"                .ctx = undefined, // ctx is zero-sized so this is safe."},
{"lineNum":"  412","line":"            };"},
{"lineNum":"  413","line":"        }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"        /// Create a managed hash map with a context"},
{"lineNum":"  416","line":"        pub fn initContext(allocator: Allocator, ctx: Context) Self {"},
{"lineNum":"  417","line":"            return .{"},
{"lineNum":"  418","line":"                .unmanaged = .{},"},
{"lineNum":"  419","line":"                .allocator = allocator,"},
{"lineNum":"  420","line":"                .ctx = ctx,"},
{"lineNum":"  421","line":"            };"},
{"lineNum":"  422","line":"        }"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"        /// Release the backing array and invalidate this map."},
{"lineNum":"  425","line":"        /// This does *not* deinit keys, values, or the context!"},
{"lineNum":"  426","line":"        /// If your keys or values need to be released, ensure"},
{"lineNum":"  427","line":"        /// that that is done before calling this function."},
{"lineNum":"  428","line":"        pub fn deinit(self: *Self) void {","class":"lineCov","hits":"1","order":"3302","possible_hits":"1",},
{"lineNum":"  429","line":"            self.unmanaged.deinit(self.allocator);","class":"lineCov","hits":"1","order":"3303","possible_hits":"1",},
{"lineNum":"  430","line":"            self.* = undefined;","class":"lineCov","hits":"1","order":"3304","possible_hits":"1",},
{"lineNum":"  431","line":"        }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"        /// Empty the map, but keep the backing allocation for future use."},
{"lineNum":"  434","line":"        /// This does *not* free keys or values! Be sure to"},
{"lineNum":"  435","line":"        /// release them if they need deinitialization before"},
{"lineNum":"  436","line":"        /// calling this function."},
{"lineNum":"  437","line":"        pub fn clearRetainingCapacity(self: *Self) void {"},
{"lineNum":"  438","line":"            return self.unmanaged.clearRetainingCapacity();"},
{"lineNum":"  439","line":"        }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"        /// Empty the map and release the backing allocation."},
{"lineNum":"  442","line":"        /// This does *not* free keys or values! Be sure to"},
{"lineNum":"  443","line":"        /// release them if they need deinitialization before"},
{"lineNum":"  444","line":"        /// calling this function."},
{"lineNum":"  445","line":"        pub fn clearAndFree(self: *Self) void {"},
{"lineNum":"  446","line":"            return self.unmanaged.clearAndFree(self.allocator);"},
{"lineNum":"  447","line":"        }"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"        /// Return the number of items in the map."},
{"lineNum":"  450","line":"        pub fn count(self: Self) Size {"},
{"lineNum":"  451","line":"            return self.unmanaged.count();"},
{"lineNum":"  452","line":"        }"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"        /// Create an iterator over the entries in the map."},
{"lineNum":"  455","line":"        /// The iterator is invalidated if the map is modified."},
{"lineNum":"  456","line":"        pub fn iterator(self: *const Self) Iterator {"},
{"lineNum":"  457","line":"            return self.unmanaged.iterator();"},
{"lineNum":"  458","line":"        }"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"        /// Create an iterator over the keys in the map."},
{"lineNum":"  461","line":"        /// The iterator is invalidated if the map is modified."},
{"lineNum":"  462","line":"        pub fn keyIterator(self: *const Self) KeyIterator {","class":"lineCov","hits":"1","order":"2709","possible_hits":"1",},
{"lineNum":"  463","line":"            return self.unmanaged.keyIterator();","class":"lineCov","hits":"1","order":"2710","possible_hits":"1",},
{"lineNum":"  464","line":"        }"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"        /// Create an iterator over the values in the map."},
{"lineNum":"  467","line":"        /// The iterator is invalidated if the map is modified."},
{"lineNum":"  468","line":"        pub fn valueIterator(self: *const Self) ValueIterator {"},
{"lineNum":"  469","line":"            return self.unmanaged.valueIterator();"},
{"lineNum":"  470","line":"        }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        /// If key exists this function cannot fail."},
{"lineNum":"  473","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  474","line":"        /// `Entry` pointers point to it, and found_existing is true."},
{"lineNum":"  475","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  476","line":"        /// the `Entry` pointers point to it. Caller should then initialize"},
{"lineNum":"  477","line":"        /// the value (but not the key)."},
{"lineNum":"  478","line":"        pub fn getOrPut(self: *Self, key: K) Allocator.Error!GetOrPutResult {"},
{"lineNum":"  479","line":"            return self.unmanaged.getOrPutContext(self.allocator, key, self.ctx);"},
{"lineNum":"  480","line":"        }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"        /// If key exists this function cannot fail."},
{"lineNum":"  483","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  484","line":"        /// `Entry` pointers point to it, and found_existing is true."},
{"lineNum":"  485","line":"        /// Otherwise, puts a new item with undefined key and value, and"},
{"lineNum":"  486","line":"        /// the `Entry` pointers point to it. Caller must then initialize"},
{"lineNum":"  487","line":"        /// the key and value."},
{"lineNum":"  488","line":"        pub fn getOrPutAdapted(self: *Self, key: anytype, ctx: anytype) Allocator.Error!GetOrPutResult {"},
{"lineNum":"  489","line":"            return self.unmanaged.getOrPutContextAdapted(self.allocator, key, ctx, self.ctx);"},
{"lineNum":"  490","line":"        }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  493","line":"        /// `Entry` pointers point to it, and found_existing is true."},
{"lineNum":"  494","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  495","line":"        /// the `Entry` pointers point to it. Caller should then initialize"},
{"lineNum":"  496","line":"        /// the value (but not the key)."},
{"lineNum":"  497","line":"        /// If a new entry needs to be stored, this function asserts there"},
{"lineNum":"  498","line":"        /// is enough capacity to store it."},
{"lineNum":"  499","line":"        pub fn getOrPutAssumeCapacity(self: *Self, key: K) GetOrPutResult {"},
{"lineNum":"  500","line":"            return self.unmanaged.getOrPutAssumeCapacityContext(key, self.ctx);"},
{"lineNum":"  501","line":"        }"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  504","line":"        /// `Entry` pointers point to it, and found_existing is true."},
{"lineNum":"  505","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  506","line":"        /// the `Entry` pointers point to it. Caller must then initialize"},
{"lineNum":"  507","line":"        /// the key and value."},
{"lineNum":"  508","line":"        /// If a new entry needs to be stored, this function asserts there"},
{"lineNum":"  509","line":"        /// is enough capacity to store it."},
{"lineNum":"  510","line":"        pub fn getOrPutAssumeCapacityAdapted(self: *Self, key: anytype, ctx: anytype) GetOrPutResult {"},
{"lineNum":"  511","line":"            return self.unmanaged.getOrPutAssumeCapacityAdapted(key, ctx);"},
{"lineNum":"  512","line":"        }"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"        pub fn getOrPutValue(self: *Self, key: K, value: V) Allocator.Error!Entry {"},
{"lineNum":"  515","line":"            return self.unmanaged.getOrPutValueContext(self.allocator, key, value, self.ctx);"},
{"lineNum":"  516","line":"        }"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"        /// Increases capacity, guaranteeing that insertions up until the"},
{"lineNum":"  519","line":"        /// `expected_count` will not cause an allocation, and therefore cannot fail."},
{"lineNum":"  520","line":"        pub fn ensureTotalCapacity(self: *Self, expected_count: Size) Allocator.Error!void {"},
{"lineNum":"  521","line":"            return self.unmanaged.ensureTotalCapacityContext(self.allocator, expected_count, self.ctx);"},
{"lineNum":"  522","line":"        }"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"        /// Increases capacity, guaranteeing that insertions up until"},
{"lineNum":"  525","line":"        /// `additional_count` **more** items will not cause an allocation, and"},
{"lineNum":"  526","line":"        /// therefore cannot fail."},
{"lineNum":"  527","line":"        pub fn ensureUnusedCapacity(self: *Self, additional_count: Size) Allocator.Error!void {"},
{"lineNum":"  528","line":"            return self.unmanaged.ensureUnusedCapacityContext(self.allocator, additional_count, self.ctx);"},
{"lineNum":"  529","line":"        }"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"        /// Returns the number of total elements which may be present before it is"},
{"lineNum":"  532","line":"        /// no longer guaranteed that no allocations will be performed."},
{"lineNum":"  533","line":"        pub fn capacity(self: *Self) Size {"},
{"lineNum":"  534","line":"            return self.unmanaged.capacity();"},
{"lineNum":"  535","line":"        }"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":"  538","line":"        /// existing data, see `getOrPut`."},
{"lineNum":"  539","line":"        pub fn put(self: *Self, key: K, value: V) Allocator.Error!void {","class":"lineCov","hits":"2","order":"918","possible_hits":"2",},
{"lineNum":"  540","line":"            return self.unmanaged.putContext(self.allocator, key, value, self.ctx);","class":"lineCov","hits":"2","order":"919","possible_hits":"2",},
{"lineNum":"  541","line":"        }"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"        /// Inserts a key-value pair into the hash map, asserting that no previous"},
{"lineNum":"  544","line":"        /// entry with the same key is already present"},
{"lineNum":"  545","line":"        pub fn putNoClobber(self: *Self, key: K, value: V) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"            return self.unmanaged.putNoClobberContext(self.allocator, key, value, self.ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"        }"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":"  550","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":"  551","line":"        /// existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":"  552","line":"        pub fn putAssumeCapacity(self: *Self, key: K, value: V) void {"},
{"lineNum":"  553","line":"            return self.unmanaged.putAssumeCapacityContext(key, value, self.ctx);"},
{"lineNum":"  554","line":"        }"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":"  557","line":"        /// Asserts that it does not clobber any existing data."},
{"lineNum":"  558","line":"        /// To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":"  559","line":"        pub fn putAssumeCapacityNoClobber(self: *Self, key: K, value: V) void {"},
{"lineNum":"  560","line":"            return self.unmanaged.putAssumeCapacityNoClobberContext(key, value, self.ctx);"},
{"lineNum":"  561","line":"        }"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":"  564","line":"        pub fn fetchPut(self: *Self, key: K, value: V) Allocator.Error!?KV {"},
{"lineNum":"  565","line":"            return self.unmanaged.fetchPutContext(self.allocator, key, value, self.ctx);"},
{"lineNum":"  566","line":"        }"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":"  569","line":"        /// If insertion happuns, asserts there is enough capacity without allocating."},
{"lineNum":"  570","line":"        pub fn fetchPutAssumeCapacity(self: *Self, key: K, value: V) ?KV {"},
{"lineNum":"  571","line":"            return self.unmanaged.fetchPutAssumeCapacityContext(key, value, self.ctx);"},
{"lineNum":"  572","line":"        }"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"        /// Removes a value from the map and returns the removed kv pair."},
{"lineNum":"  575","line":"        pub fn fetchRemove(self: *Self, key: K) ?KV {"},
{"lineNum":"  576","line":"            return self.unmanaged.fetchRemoveContext(key, self.ctx);"},
{"lineNum":"  577","line":"        }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"        pub fn fetchRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {"},
{"lineNum":"  580","line":"            return self.unmanaged.fetchRemoveAdapted(key, ctx);"},
{"lineNum":"  581","line":"        }"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"        /// Finds the value associated with a key in the map"},
{"lineNum":"  584","line":"        pub fn get(self: Self, key: K) ?V {","class":"linePartCov","hits":"1","order":"1777","possible_hits":"2",},
{"lineNum":"  585","line":"            return self.unmanaged.getContext(key, self.ctx);","class":"linePartCov","hits":"1","order":"1778","possible_hits":"2",},
{"lineNum":"  586","line":"        }"},
{"lineNum":"  587","line":"        pub fn getAdapted(self: Self, key: anytype, ctx: anytype) ?V {"},
{"lineNum":"  588","line":"            return self.unmanaged.getAdapted(key, ctx);"},
{"lineNum":"  589","line":"        }"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"        pub fn getPtr(self: Self, key: K) ?*V {"},
{"lineNum":"  592","line":"            return self.unmanaged.getPtrContext(key, self.ctx);"},
{"lineNum":"  593","line":"        }"},
{"lineNum":"  594","line":"        pub fn getPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*V {"},
{"lineNum":"  595","line":"            return self.unmanaged.getPtrAdapted(key, ctx);"},
{"lineNum":"  596","line":"        }"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"        /// Finds the actual key associated with an adapted key in the map"},
{"lineNum":"  599","line":"        pub fn getKey(self: Self, key: K) ?K {"},
{"lineNum":"  600","line":"            return self.unmanaged.getKeyContext(key, self.ctx);"},
{"lineNum":"  601","line":"        }"},
{"lineNum":"  602","line":"        pub fn getKeyAdapted(self: Self, key: anytype, ctx: anytype) ?K {"},
{"lineNum":"  603","line":"            return self.unmanaged.getKeyAdapted(key, ctx);"},
{"lineNum":"  604","line":"        }"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"        pub fn getKeyPtr(self: Self, key: K) ?*K {"},
{"lineNum":"  607","line":"            return self.unmanaged.getKeyPtrContext(key, self.ctx);"},
{"lineNum":"  608","line":"        }"},
{"lineNum":"  609","line":"        pub fn getKeyPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*K {"},
{"lineNum":"  610","line":"            return self.unmanaged.getKeyPtrAdapted(key, ctx);"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"        /// Finds the key and value associated with a key in the map"},
{"lineNum":"  614","line":"        pub fn getEntry(self: Self, key: K) ?Entry {"},
{"lineNum":"  615","line":"            return self.unmanaged.getEntryContext(key, self.ctx);"},
{"lineNum":"  616","line":"        }"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"        pub fn getEntryAdapted(self: Self, key: anytype, ctx: anytype) ?Entry {"},
{"lineNum":"  619","line":"            return self.unmanaged.getEntryAdapted(key, ctx);"},
{"lineNum":"  620","line":"        }"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"        /// Check if the map contains a key"},
{"lineNum":"  623","line":"        pub fn contains(self: Self, key: K) bool {","class":"lineCov","hits":"1","order":"1185","possible_hits":"1",},
{"lineNum":"  624","line":"            return self.unmanaged.containsContext(key, self.ctx);","class":"lineCov","hits":"1","order":"1186","possible_hits":"1",},
{"lineNum":"  625","line":"        }"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"        pub fn containsAdapted(self: Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":"  628","line":"            return self.unmanaged.containsAdapted(key, ctx);"},
{"lineNum":"  629","line":"        }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":"  632","line":"        /// the hash map, and this function returns true.  Otherwise this"},
{"lineNum":"  633","line":"        /// function returns false."},
{"lineNum":"  634","line":"        pub fn remove(self: *Self, key: K) bool {"},
{"lineNum":"  635","line":"            return self.unmanaged.removeContext(key, self.ctx);"},
{"lineNum":"  636","line":"        }"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"        pub fn removeAdapted(self: *Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":"  639","line":"            return self.unmanaged.removeAdapted(key, ctx);"},
{"lineNum":"  640","line":"        }"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"        /// Delete the entry with key pointed to by key_ptr from the hash map."},
{"lineNum":"  643","line":"        /// key_ptr is assumed to be a valid pointer to a key that is present"},
{"lineNum":"  644","line":"        /// in the hash map."},
{"lineNum":"  645","line":"        pub fn removeByPtr(self: *Self, key_ptr: *K) void {"},
{"lineNum":"  646","line":"            self.unmanaged.removeByPtr(key_ptr);"},
{"lineNum":"  647","line":"        }"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"        /// Creates a copy of this map, using the same allocator"},
{"lineNum":"  650","line":"        pub fn clone(self: Self) Allocator.Error!Self {"},
{"lineNum":"  651","line":"            var other = try self.unmanaged.cloneContext(self.allocator, self.ctx);"},
{"lineNum":"  652","line":"            return other.promoteContext(self.allocator, self.ctx);"},
{"lineNum":"  653","line":"        }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"        /// Creates a copy of this map, using a specified allocator"},
{"lineNum":"  656","line":"        pub fn cloneWithAllocator(self: Self, new_allocator: Allocator) Allocator.Error!Self {"},
{"lineNum":"  657","line":"            var other = try self.unmanaged.cloneContext(new_allocator, self.ctx);"},
{"lineNum":"  658","line":"            return other.promoteContext(new_allocator, self.ctx);"},
{"lineNum":"  659","line":"        }"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"        /// Creates a copy of this map, using a specified context"},
{"lineNum":"  662","line":"        pub fn cloneWithContext(self: Self, new_ctx: anytype) Allocator.Error!HashMap(K, V, @TypeOf(new_ctx), max_load_percentage) {"},
{"lineNum":"  663","line":"            var other = try self.unmanaged.cloneContext(self.allocator, new_ctx);"},
{"lineNum":"  664","line":"            return other.promoteContext(self.allocator, new_ctx);"},
{"lineNum":"  665","line":"        }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"        /// Creates a copy of this map, using a specified allocator and context."},
{"lineNum":"  668","line":"        pub fn cloneWithAllocatorAndContext("},
{"lineNum":"  669","line":"            self: Self,"},
{"lineNum":"  670","line":"            new_allocator: Allocator,"},
{"lineNum":"  671","line":"            new_ctx: anytype,"},
{"lineNum":"  672","line":"        ) Allocator.Error!HashMap(K, V, @TypeOf(new_ctx), max_load_percentage) {"},
{"lineNum":"  673","line":"            var other = try self.unmanaged.cloneContext(new_allocator, new_ctx);"},
{"lineNum":"  674","line":"            return other.promoteContext(new_allocator, new_ctx);"},
{"lineNum":"  675","line":"        }"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"        /// Set the map to an empty state, making deinitialization a no-op, and"},
{"lineNum":"  678","line":"        /// returning a copy of the original."},
{"lineNum":"  679","line":"        pub fn move(self: *Self) Self {"},
{"lineNum":"  680","line":"            const result = self.*;"},
{"lineNum":"  681","line":"            self.unmanaged = .{};"},
{"lineNum":"  682","line":"            return result;"},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":"    };"},
{"lineNum":"  685","line":"}"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"/// A HashMap based on open addressing and linear probing."},
{"lineNum":"  688","line":"/// A lookup or modification typically occurs only 2 cache misses."},
{"lineNum":"  689","line":"/// No order is guaranteed and any modification invalidates live iterators."},
{"lineNum":"  690","line":"/// It achieves good performance with quite high load factors (by default,"},
{"lineNum":"  691","line":"/// grow is triggered at 80% full) and only one byte of overhead per element."},
{"lineNum":"  692","line":"/// The struct itself is only 16 bytes for a small footprint. This comes at"},
{"lineNum":"  693","line":"/// the price of handling size with u32, which should be reasonable enough"},
{"lineNum":"  694","line":"/// for almost all uses."},
{"lineNum":"  695","line":"/// Deletions are achieved with tombstones."},
{"lineNum":"  696","line":"pub fn HashMapUnmanaged("},
{"lineNum":"  697","line":"    comptime K: type,"},
{"lineNum":"  698","line":"    comptime V: type,"},
{"lineNum":"  699","line":"    comptime Context: type,"},
{"lineNum":"  700","line":"    comptime max_load_percentage: u64,"},
{"lineNum":"  701","line":") type {"},
{"lineNum":"  702","line":"    if (max_load_percentage <= 0 or max_load_percentage >= 100)"},
{"lineNum":"  703","line":"        @compileError(\"max_load_percentage must be between 0 and 100.\");"},
{"lineNum":"  704","line":"    return struct {"},
{"lineNum":"  705","line":"        const Self = @This();"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"        comptime {"},
{"lineNum":"  708","line":"            verifyContext(Context, K, K, u64, false);"},
{"lineNum":"  709","line":"        }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"        // This is actually a midway pointer to the single buffer containing"},
{"lineNum":"  712","line":"        // a `Header` field, the `Metadata`s and `Entry`s."},
{"lineNum":"  713","line":"        // At `-@sizeOf(Header)` is the Header field."},
{"lineNum":"  714","line":"        // At `sizeOf(Metadata) * capacity + offset`, which is pointed to by"},
{"lineNum":"  715","line":"        // self.header().entries, is the array of entries."},
{"lineNum":"  716","line":"        // This means that the hashmap only holds one live allocation, to"},
{"lineNum":"  717","line":"        // reduce memory fragmentation and struct size."},
{"lineNum":"  718","line":"        /// Pointer to the metadata."},
{"lineNum":"  719","line":"        metadata: ?[*]Metadata = null,"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"        /// Current number of elements in the hashmap."},
{"lineNum":"  722","line":"        size: Size = 0,"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"        // Having a countdown to grow reduces the number of instructions to"},
{"lineNum":"  725","line":"        // execute when determining if the hashmap has enough capacity already."},
{"lineNum":"  726","line":"        /// Number of available slots before a grow is needed to satisfy the"},
{"lineNum":"  727","line":"        /// `max_load_percentage`."},
{"lineNum":"  728","line":"        available: Size = 0,"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"        // This is purely empirical and not a /very smart magic constant™/."},
{"lineNum":"  731","line":"        /// Capacity of the first grow when bootstrapping the hashmap."},
{"lineNum":"  732","line":"        const minimal_capacity = 8;"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"        // This hashmap is specially designed for sizes that fit in a u32."},
{"lineNum":"  735","line":"        pub const Size = u32;"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"        // u64 hashes guarantee us that the fingerprint bits will never be used"},
{"lineNum":"  738","line":"        // to compute the index of a slot, maximizing the use of entropy."},
{"lineNum":"  739","line":"        pub const Hash = u64;"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"        pub const Entry = struct {"},
{"lineNum":"  742","line":"            key_ptr: *K,"},
{"lineNum":"  743","line":"            value_ptr: *V,"},
{"lineNum":"  744","line":"        };"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"        pub const KV = struct {"},
{"lineNum":"  747","line":"            key: K,"},
{"lineNum":"  748","line":"            value: V,"},
{"lineNum":"  749","line":"        };"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"        const Header = struct {"},
{"lineNum":"  752","line":"            values: [*]V,"},
{"lineNum":"  753","line":"            keys: [*]K,"},
{"lineNum":"  754","line":"            capacity: Size,"},
{"lineNum":"  755","line":"        };"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"        /// Metadata for a slot. It can be in three states: empty, used or"},
{"lineNum":"  758","line":"        /// tombstone. Tombstones indicate that an entry was previously used,"},
{"lineNum":"  759","line":"        /// they are a simple way to handle removal."},
{"lineNum":"  760","line":"        /// To this state, we add 7 bits from the slot\'s key hash. These are"},
{"lineNum":"  761","line":"        /// used as a fast way to disambiguate between entries without"},
{"lineNum":"  762","line":"        /// having to use the equality function. If two fingerprints are"},
{"lineNum":"  763","line":"        /// different, we know that we don\'t have to compare the keys at all."},
{"lineNum":"  764","line":"        /// The 7 bits are the highest ones from a 64 bit hash. This way, not"},
{"lineNum":"  765","line":"        /// only we use the `log2(capacity)` lowest bits from the hash to determine"},
{"lineNum":"  766","line":"        /// a slot index, but we use 7 more bits to quickly resolve collisions"},
{"lineNum":"  767","line":"        /// when multiple elements with different hashes end up wanting to be in the same slot."},
{"lineNum":"  768","line":"        /// Not using the equality function means we don\'t have to read into"},
{"lineNum":"  769","line":"        /// the entries array, likely avoiding a cache miss and a potentially"},
{"lineNum":"  770","line":"        /// costly function call."},
{"lineNum":"  771","line":"        const Metadata = packed struct {"},
{"lineNum":"  772","line":"            const FingerPrint = u7;"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"            const free: FingerPrint = 0;"},
{"lineNum":"  775","line":"            const tombstone: FingerPrint = 1;"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"            fingerprint: FingerPrint = free,"},
{"lineNum":"  778","line":"            used: u1 = 0,"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"            const slot_free = @as(u8, @bitCast(Metadata{ .fingerprint = free }));"},
{"lineNum":"  781","line":"            const slot_tombstone = @as(u8, @bitCast(Metadata{ .fingerprint = tombstone }));"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"            pub fn isUsed(self: Metadata) bool {","class":"linePartCov","hits":"3","order":"1744","possible_hits":"5",},
{"lineNum":"  784","line":"                return self.used == 1;","class":"linePartCov","hits":"3","order":"1745","possible_hits":"5",},
{"lineNum":"  785","line":"            }"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"            pub fn isTombstone(self: Metadata) bool {","class":"linePartCov","hits":"3","order":"2245","possible_hits":"4",},
{"lineNum":"  788","line":"                return @as(u8, @bitCast(self)) == slot_tombstone;","class":"linePartCov","hits":"3","order":"2246","possible_hits":"4",},
{"lineNum":"  789","line":"            }"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"            pub fn isFree(self: Metadata) bool {","class":"linePartCov","hits":"3","order":"1036","possible_hits":"5",},
{"lineNum":"  792","line":"                return @as(u8, @bitCast(self)) == slot_free;","class":"linePartCov","hits":"3","order":"1037","possible_hits":"5",},
{"lineNum":"  793","line":"            }"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"            pub fn takeFingerprint(hash: Hash) FingerPrint {","class":"linePartCov","hits":"3","order":"1027","possible_hits":"5",},
{"lineNum":"  796","line":"                const hash_bits = @typeInfo(Hash).Int.bits;","class":"linePartCov","hits":"3","order":"1028","possible_hits":"5",},
{"lineNum":"  797","line":"                const fp_bits = @typeInfo(FingerPrint).Int.bits;","class":"linePartCov","hits":"3","order":"1029","possible_hits":"5",},
{"lineNum":"  798","line":"                return @as(FingerPrint, @truncate(hash >> (hash_bits - fp_bits)));","class":"linePartCov","hits":"3","order":"1030","possible_hits":"5",},
{"lineNum":"  799","line":"            }"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"            pub fn fill(self: *Metadata, fp: FingerPrint) void {","class":"linePartCov","hits":"3","order":"1042","possible_hits":"5",},
{"lineNum":"  802","line":"                self.used = 1;","class":"linePartCov","hits":"3","order":"1043","possible_hits":"5",},
{"lineNum":"  803","line":"                self.fingerprint = fp;","class":"linePartCov","hits":"3","order":"1044","possible_hits":"5",},
{"lineNum":"  804","line":"            }"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"            pub fn remove(self: *Metadata) void {","class":"linePartCov","hits":"1","order":"3182","possible_hits":"2",},
{"lineNum":"  807","line":"                self.used = 0;","class":"linePartCov","hits":"1","order":"3183","possible_hits":"2",},
{"lineNum":"  808","line":"                self.fingerprint = tombstone;","class":"linePartCov","hits":"1","order":"3184","possible_hits":"2",},
{"lineNum":"  809","line":"            }"},
{"lineNum":"  810","line":"        };"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"        comptime {"},
{"lineNum":"  813","line":"            assert(@sizeOf(Metadata) == 1);"},
{"lineNum":"  814","line":"            assert(@alignOf(Metadata) == 1);"},
{"lineNum":"  815","line":"        }"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"        pub const Iterator = struct {"},
{"lineNum":"  818","line":"            hm: *const Self,"},
{"lineNum":"  819","line":"            index: Size = 0,"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"            pub fn next(it: *Iterator) ?Entry {"},
{"lineNum":"  822","line":"                assert(it.index <= it.hm.capacity());"},
{"lineNum":"  823","line":"                if (it.hm.size == 0) return null;"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"                const cap = it.hm.capacity();"},
{"lineNum":"  826","line":"                const end = it.hm.metadata.? + cap;"},
{"lineNum":"  827","line":"                var metadata = it.hm.metadata.? + it.index;"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"                while (metadata != end) : ({"},
{"lineNum":"  830","line":"                    metadata += 1;"},
{"lineNum":"  831","line":"                    it.index += 1;"},
{"lineNum":"  832","line":"                }) {"},
{"lineNum":"  833","line":"                    if (metadata[0].isUsed()) {"},
{"lineNum":"  834","line":"                        const key = &it.hm.keys()[it.index];"},
{"lineNum":"  835","line":"                        const value = &it.hm.values()[it.index];"},
{"lineNum":"  836","line":"                        it.index += 1;"},
{"lineNum":"  837","line":"                        return Entry{ .key_ptr = key, .value_ptr = value };"},
{"lineNum":"  838","line":"                    }"},
{"lineNum":"  839","line":"                }"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"                return null;"},
{"lineNum":"  842","line":"            }"},
{"lineNum":"  843","line":"        };"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"        pub const KeyIterator = FieldIterator(K);"},
{"lineNum":"  846","line":"        pub const ValueIterator = FieldIterator(V);"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"        fn FieldIterator(comptime T: type) type {"},
{"lineNum":"  849","line":"            return struct {"},
{"lineNum":"  850","line":"                len: usize,"},
{"lineNum":"  851","line":"                metadata: [*]const Metadata,"},
{"lineNum":"  852","line":"                items: [*]T,"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"                pub fn next(self: *@This()) ?*T {","class":"lineCov","hits":"2","order":"1284","possible_hits":"2",},
{"lineNum":"  855","line":"                    while (self.len > 0) {","class":"lineCov","hits":"2","order":"1285","possible_hits":"2",},
{"lineNum":"  856","line":"                        self.len -= 1;","class":"linePartCov","hits":"1","order":"2717","possible_hits":"4",},
{"lineNum":"  857","line":"                        const used = self.metadata[0].isUsed();","class":"linePartCov","hits":"1","order":"2718","possible_hits":"2",},
{"lineNum":"  858","line":"                        const item = &self.items[0];","class":"linePartCov","hits":"1","order":"2719","possible_hits":"2",},
{"lineNum":"  859","line":"                        self.metadata += 1;","class":"linePartCov","hits":"1","order":"2720","possible_hits":"2",},
{"lineNum":"  860","line":"                        self.items += 1;","class":"linePartCov","hits":"1","order":"2721","possible_hits":"2",},
{"lineNum":"  861","line":"                        if (used) {","class":"linePartCov","hits":"1","order":"2722","possible_hits":"2",},
{"lineNum":"  862","line":"                            return item;","class":"linePartCov","hits":"3","order":"1286","possible_hits":"6",},
{"lineNum":"  863","line":"                        }"},
{"lineNum":"  864","line":"                    }"},
{"lineNum":"  865","line":"                    return null;","class":"linePartCov","hits":"1","order":"1287","possible_hits":"2",},
{"lineNum":"  866","line":"                }"},
{"lineNum":"  867","line":"            };"},
{"lineNum":"  868","line":"        }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"        pub const GetOrPutResult = struct {"},
{"lineNum":"  871","line":"            key_ptr: *K,"},
{"lineNum":"  872","line":"            value_ptr: *V,"},
{"lineNum":"  873","line":"            found_existing: bool,"},
{"lineNum":"  874","line":"        };"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"        pub const Managed = HashMap(K, V, Context, max_load_percentage);"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"        pub fn promote(self: Self, allocator: Allocator) Managed {"},
{"lineNum":"  879","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  880","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call promoteContext instead.\");"},
{"lineNum":"  881","line":"            return promoteContext(self, allocator, undefined);"},
{"lineNum":"  882","line":"        }"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"        pub fn promoteContext(self: Self, allocator: Allocator, ctx: Context) Managed {"},
{"lineNum":"  885","line":"            return .{"},
{"lineNum":"  886","line":"                .unmanaged = self,"},
{"lineNum":"  887","line":"                .allocator = allocator,"},
{"lineNum":"  888","line":"                .ctx = ctx,"},
{"lineNum":"  889","line":"            };"},
{"lineNum":"  890","line":"        }"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"        fn isUnderMaxLoadPercentage(size: Size, cap: Size) bool {"},
{"lineNum":"  893","line":"            return size * 100 < max_load_percentage * cap;"},
{"lineNum":"  894","line":"        }"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"        pub fn deinit(self: *Self, allocator: Allocator) void {","class":"linePartCov","hits":"4","order":"983","possible_hits":"5",},
{"lineNum":"  897","line":"            self.deallocate(allocator);","class":"linePartCov","hits":"4","order":"984","possible_hits":"5",},
{"lineNum":"  898","line":"            self.* = undefined;","class":"linePartCov","hits":"4","order":"987","possible_hits":"5",},
{"lineNum":"  899","line":"        }"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"        fn capacityForSize(size: Size) Size {","class":"linePartCov","hits":"3","order":"934","possible_hits":"5",},
{"lineNum":"  902","line":"            var new_cap: u32 = @truncate((@as(u64, size) * 100) / max_load_percentage + 1);","class":"linePartCov","hits":"3","order":"935","possible_hits":"5",},
{"lineNum":"  903","line":"            new_cap = math.ceilPowerOfTwo(u32, new_cap) catch unreachable;","class":"linePartCov","hits":"6","order":"936","possible_hits":"10",},
{"lineNum":"  904","line":"            return new_cap;","class":"linePartCov","hits":"3","order":"945","possible_hits":"5",},
{"lineNum":"  905","line":"        }"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"        pub fn ensureTotalCapacity(self: *Self, allocator: Allocator, new_size: Size) Allocator.Error!void {"},
{"lineNum":"  908","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  909","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call ensureTotalCapacityContext instead.\");"},
{"lineNum":"  910","line":"            return ensureTotalCapacityContext(self, allocator, new_size, undefined);"},
{"lineNum":"  911","line":"        }"},
{"lineNum":"  912","line":"        pub fn ensureTotalCapacityContext(self: *Self, allocator: Allocator, new_size: Size, ctx: Context) Allocator.Error!void {","class":"linePartCov","hits":"1","order":"2950","possible_hits":"2",},
{"lineNum":"  913","line":"            if (new_size > self.size)","class":"linePartCov","hits":"1","order":"2951","possible_hits":"2",},
{"lineNum":"  914","line":"                try self.growIfNeeded(allocator, new_size - self.size, ctx);","class":"linePartCov","hits":"1","order":"2952","possible_hits":"2",},
{"lineNum":"  915","line":"        }"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"        pub fn ensureUnusedCapacity(self: *Self, allocator: Allocator, additional_size: Size) Allocator.Error!void {","class":"linePartCov","hits":"1","order":"2944","possible_hits":"2",},
{"lineNum":"  918","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  919","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call ensureUnusedCapacityContext instead.\");"},
{"lineNum":"  920","line":"            return ensureUnusedCapacityContext(self, allocator, additional_size, undefined);","class":"linePartCov","hits":"1","order":"2945","possible_hits":"2",},
{"lineNum":"  921","line":"        }"},
{"lineNum":"  922","line":"        pub fn ensureUnusedCapacityContext(self: *Self, allocator: Allocator, additional_size: Size, ctx: Context) Allocator.Error!void {","class":"linePartCov","hits":"1","order":"2946","possible_hits":"2",},
{"lineNum":"  923","line":"            return ensureTotalCapacityContext(self, allocator, self.count() + additional_size, ctx);","class":"linePartCov","hits":"1","order":"2947","possible_hits":"2",},
{"lineNum":"  924","line":"        }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"        pub fn clearRetainingCapacity(self: *Self) void {"},
{"lineNum":"  927","line":"            if (self.metadata) |_| {"},
{"lineNum":"  928","line":"                self.initMetadatas();"},
{"lineNum":"  929","line":"                self.size = 0;"},
{"lineNum":"  930","line":"                self.available = @as(u32, @truncate((self.capacity() * max_load_percentage) / 100));"},
{"lineNum":"  931","line":"            }"},
{"lineNum":"  932","line":"        }"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"        pub fn clearAndFree(self: *Self, allocator: Allocator) void {"},
{"lineNum":"  935","line":"            self.deallocate(allocator);"},
{"lineNum":"  936","line":"            self.size = 0;"},
{"lineNum":"  937","line":"            self.available = 0;"},
{"lineNum":"  938","line":"        }"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"        pub fn count(self: *const Self) Size {","class":"linePartCov","hits":"1","order":"2948","possible_hits":"2",},
{"lineNum":"  941","line":"            return self.size;","class":"linePartCov","hits":"1","order":"2949","possible_hits":"2",},
{"lineNum":"  942","line":"        }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"        fn header(self: *const Self) *Header {","class":"linePartCov","hits":"3","order":"971","possible_hits":"5",},
{"lineNum":"  945","line":"            return @ptrCast(@as([*]Header, @ptrCast(@alignCast(self.metadata.?))) - 1);","class":"linePartCov","hits":"3","order":"972","possible_hits":"5",},
{"lineNum":"  946","line":"        }"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"        fn keys(self: *const Self) [*]K {","class":"linePartCov","hits":"3","order":"1046","possible_hits":"5",},
{"lineNum":"  949","line":"            return self.header().keys;","class":"linePartCov","hits":"3","order":"1047","possible_hits":"5",},
{"lineNum":"  950","line":"        }"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"        fn values(self: *const Self) [*]V {","class":"linePartCov","hits":"3","order":"1049","possible_hits":"5",},
{"lineNum":"  953","line":"            return self.header().values;","class":"linePartCov","hits":"3","order":"1050","possible_hits":"5",},
{"lineNum":"  954","line":"        }"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"        pub fn capacity(self: *const Self) Size {","class":"linePartCov","hits":"3","order":"930","possible_hits":"5",},
{"lineNum":"  957","line":"            if (self.metadata == null) return 0;","class":"linePartCov","hits":"6","order":"931","possible_hits":"10",},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"            return self.header().capacity;","class":"linePartCov","hits":"3","order":"970","possible_hits":"5",},
{"lineNum":"  960","line":"        }"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"        pub fn iterator(self: *const Self) Iterator {"},
{"lineNum":"  963","line":"            return .{ .hm = self };"},
{"lineNum":"  964","line":"        }"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"        pub fn keyIterator(self: *const Self) KeyIterator {","class":"lineCov","hits":"1","order":"2711","possible_hits":"1",},
{"lineNum":"  967","line":"            if (self.metadata) |metadata| {","class":"lineCov","hits":"1","order":"2712","possible_hits":"1",},
{"lineNum":"  968","line":"                return .{","class":"lineCov","hits":"2","order":"2713","possible_hits":"2",},
{"lineNum":"  969","line":"                    .len = self.capacity(),","class":"lineCov","hits":"1","order":"2714","possible_hits":"1",},
{"lineNum":"  970","line":"                    .metadata = metadata,"},
{"lineNum":"  971","line":"                    .items = self.keys(),","class":"lineCov","hits":"1","order":"2715","possible_hits":"1",},
{"lineNum":"  972","line":"                };"},
{"lineNum":"  973","line":"            } else {"},
{"lineNum":"  974","line":"                return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  975","line":"                    .len = 0,"},
{"lineNum":"  976","line":"                    .metadata = undefined,"},
{"lineNum":"  977","line":"                    .items = undefined,"},
{"lineNum":"  978","line":"                };"},
{"lineNum":"  979","line":"            }"},
{"lineNum":"  980","line":"        }"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"        pub fn valueIterator(self: *const Self) ValueIterator {","class":"lineCov","hits":"1","order":"1280","possible_hits":"1",},
{"lineNum":"  983","line":"            if (self.metadata) |metadata| {","class":"lineCov","hits":"1","order":"1281","possible_hits":"1",},
{"lineNum":"  984","line":"                return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  985","line":"                    .len = self.capacity(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  986","line":"                    .metadata = metadata,"},
{"lineNum":"  987","line":"                    .items = self.values(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  988","line":"                };"},
{"lineNum":"  989","line":"            } else {"},
{"lineNum":"  990","line":"                return .{","class":"lineCov","hits":"1","order":"1282","possible_hits":"1",},
{"lineNum":"  991","line":"                    .len = 0,"},
{"lineNum":"  992","line":"                    .metadata = undefined,"},
{"lineNum":"  993","line":"                    .items = undefined,"},
{"lineNum":"  994","line":"                };"},
{"lineNum":"  995","line":"            }"},
{"lineNum":"  996","line":"        }"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"        /// Insert an entry in the map. Assumes it is not already present."},
{"lineNum":"  999","line":"        pub fn putNoClobber(self: *Self, allocator: Allocator, key: K, value: V) Allocator.Error!void {"},
{"lineNum":" 1000","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1001","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putNoClobberContext instead.\");"},
{"lineNum":" 1002","line":"            return self.putNoClobberContext(allocator, key, value, undefined);"},
{"lineNum":" 1003","line":"        }"},
{"lineNum":" 1004","line":"        pub fn putNoClobberContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1005","line":"            assert(!self.containsContext(key, ctx));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1006","line":"            try self.growIfNeeded(allocator, 1, ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"            self.putAssumeCapacityNoClobberContext(key, value, ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1009","line":"        }"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":" 1012","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":" 1013","line":"        /// existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":" 1014","line":"        pub fn putAssumeCapacity(self: *Self, key: K, value: V) void {"},
{"lineNum":" 1015","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1016","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putAssumeCapacityContext instead.\");"},
{"lineNum":" 1017","line":"            return self.putAssumeCapacityContext(key, value, undefined);"},
{"lineNum":" 1018","line":"        }"},
{"lineNum":" 1019","line":"        pub fn putAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) void {"},
{"lineNum":" 1020","line":"            const gop = self.getOrPutAssumeCapacityContext(key, ctx);"},
{"lineNum":" 1021","line":"            gop.value_ptr.* = value;"},
{"lineNum":" 1022","line":"        }"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"        /// Insert an entry in the map. Assumes it is not already present,"},
{"lineNum":" 1025","line":"        /// and that no allocation is needed."},
{"lineNum":" 1026","line":"        pub fn putAssumeCapacityNoClobber(self: *Self, key: K, value: V) void {"},
{"lineNum":" 1027","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1028","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putAssumeCapacityNoClobberContext instead.\");"},
{"lineNum":" 1029","line":"            return self.putAssumeCapacityNoClobberContext(key, value, undefined);"},
{"lineNum":" 1030","line":"        }"},
{"lineNum":" 1031","line":"        pub fn putAssumeCapacityNoClobberContext(self: *Self, key: K, value: V, ctx: Context) void {","class":"linePartCov","hits":"1","order":"2613","possible_hits":"5",},
{"lineNum":" 1032","line":"            assert(!self.containsContext(key, ctx));","class":"linePartCov","hits":"1","order":"2614","possible_hits":"5",},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"            const hash = ctx.hash(key);","class":"linePartCov","hits":"1","order":"2615","possible_hits":"5",},
{"lineNum":" 1035","line":"            const mask = self.capacity() - 1;","class":"linePartCov","hits":"1","order":"2616","possible_hits":"5",},
{"lineNum":" 1036","line":"            var idx = @as(usize, @truncate(hash & mask));","class":"linePartCov","hits":"1","order":"2617","possible_hits":"5",},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"            var metadata = self.metadata.? + idx;","class":"linePartCov","hits":"1","order":"2618","possible_hits":"5",},
{"lineNum":" 1039","line":"            while (metadata[0].isUsed()) {","class":"linePartCov","hits":"1","order":"2619","possible_hits":"5",},
{"lineNum":" 1040","line":"                idx = (idx + 1) & mask;","class":"linePartCov","hits":"1","order":"2643","possible_hits":"10",},
{"lineNum":" 1041","line":"                metadata = self.metadata.? + idx;","class":"linePartCov","hits":"3","order":"2620","possible_hits":"15",},
{"lineNum":" 1042","line":"            }"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"            assert(self.available > 0);","class":"linePartCov","hits":"1","order":"2621","possible_hits":"5",},
{"lineNum":" 1045","line":"            self.available -= 1;","class":"linePartCov","hits":"1","order":"2622","possible_hits":"10",},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"            const fingerprint = Metadata.takeFingerprint(hash);","class":"linePartCov","hits":"1","order":"2623","possible_hits":"5",},
{"lineNum":" 1048","line":"            metadata[0].fill(fingerprint);","class":"linePartCov","hits":"1","order":"2624","possible_hits":"5",},
{"lineNum":" 1049","line":"            self.keys()[idx] = key;","class":"linePartCov","hits":"1","order":"2625","possible_hits":"5",},
{"lineNum":" 1050","line":"            self.values()[idx] = value;","class":"linePartCov","hits":"1","order":"2626","possible_hits":"5",},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"            self.size += 1;","class":"linePartCov","hits":"1","order":"2627","possible_hits":"5",},
{"lineNum":" 1053","line":"        }"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":" 1056","line":"        pub fn fetchPut(self: *Self, allocator: Allocator, key: K, value: V) Allocator.Error!?KV {"},
{"lineNum":" 1057","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1058","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchPutContext instead.\");"},
{"lineNum":" 1059","line":"            return self.fetchPutContext(allocator, key, value, undefined);"},
{"lineNum":" 1060","line":"        }"},
{"lineNum":" 1061","line":"        pub fn fetchPutContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!?KV {"},
{"lineNum":" 1062","line":"            const gop = try self.getOrPutContext(allocator, key, ctx);"},
{"lineNum":" 1063","line":"            var result: ?KV = null;"},
{"lineNum":" 1064","line":"            if (gop.found_existing) {"},
{"lineNum":" 1065","line":"                result = KV{"},
{"lineNum":" 1066","line":"                    .key = gop.key_ptr.*,"},
{"lineNum":" 1067","line":"                    .value = gop.value_ptr.*,"},
{"lineNum":" 1068","line":"                };"},
{"lineNum":" 1069","line":"            }"},
{"lineNum":" 1070","line":"            gop.value_ptr.* = value;"},
{"lineNum":" 1071","line":"            return result;"},
{"lineNum":" 1072","line":"        }"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":" 1075","line":"        /// If insertion happens, asserts there is enough capacity without allocating."},
{"lineNum":" 1076","line":"        pub fn fetchPutAssumeCapacity(self: *Self, key: K, value: V) ?KV {"},
{"lineNum":" 1077","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1078","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchPutAssumeCapacityContext instead.\");"},
{"lineNum":" 1079","line":"            return self.fetchPutAssumeCapacityContext(key, value, undefined);"},
{"lineNum":" 1080","line":"        }"},
{"lineNum":" 1081","line":"        pub fn fetchPutAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) ?KV {"},
{"lineNum":" 1082","line":"            const gop = self.getOrPutAssumeCapacityContext(key, ctx);"},
{"lineNum":" 1083","line":"            var result: ?KV = null;"},
{"lineNum":" 1084","line":"            if (gop.found_existing) {"},
{"lineNum":" 1085","line":"                result = KV{"},
{"lineNum":" 1086","line":"                    .key = gop.key_ptr.*,"},
{"lineNum":" 1087","line":"                    .value = gop.value_ptr.*,"},
{"lineNum":" 1088","line":"                };"},
{"lineNum":" 1089","line":"            }"},
{"lineNum":" 1090","line":"            gop.value_ptr.* = value;"},
{"lineNum":" 1091","line":"            return result;"},
{"lineNum":" 1092","line":"        }"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":" 1095","line":"        /// the hash map, and then returned from this function."},
{"lineNum":" 1096","line":"        pub fn fetchRemove(self: *Self, key: K) ?KV {"},
{"lineNum":" 1097","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1098","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchRemoveContext instead.\");"},
{"lineNum":" 1099","line":"            return self.fetchRemoveContext(key, undefined);"},
{"lineNum":" 1100","line":"        }"},
{"lineNum":" 1101","line":"        pub fn fetchRemoveContext(self: *Self, key: K, ctx: Context) ?KV {"},
{"lineNum":" 1102","line":"            return self.fetchRemoveAdapted(key, ctx);"},
{"lineNum":" 1103","line":"        }"},
{"lineNum":" 1104","line":"        pub fn fetchRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {"},
{"lineNum":" 1105","line":"            if (self.getIndex(key, ctx)) |idx| {"},
{"lineNum":" 1106","line":"                const old_key = &self.keys()[idx];"},
{"lineNum":" 1107","line":"                const old_val = &self.values()[idx];"},
{"lineNum":" 1108","line":"                const result = KV{"},
{"lineNum":" 1109","line":"                    .key = old_key.*,"},
{"lineNum":" 1110","line":"                    .value = old_val.*,"},
{"lineNum":" 1111","line":"                };"},
{"lineNum":" 1112","line":"                self.metadata.?[idx].remove();"},
{"lineNum":" 1113","line":"                old_key.* = undefined;"},
{"lineNum":" 1114","line":"                old_val.* = undefined;"},
{"lineNum":" 1115","line":"                self.size -= 1;"},
{"lineNum":" 1116","line":"                self.available += 1;"},
{"lineNum":" 1117","line":"                return result;"},
{"lineNum":" 1118","line":"            }"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"            return null;"},
{"lineNum":" 1121","line":"        }"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"        /// Find the index containing the data for the given key."},
{"lineNum":" 1124","line":"        /// Whether this function returns null is almost always"},
{"lineNum":" 1125","line":"        /// branched on after this function returns, and this function"},
{"lineNum":" 1126","line":"        /// returns null/not null from separate code paths.  We"},
{"lineNum":" 1127","line":"        /// want the optimizer to remove that branch and instead directly"},
{"lineNum":" 1128","line":"        /// fuse the basic blocks after the branch to the basic blocks"},
{"lineNum":" 1129","line":"        /// from this function.  To encourage that, this function is"},
{"lineNum":" 1130","line":"        /// marked as inline."},
{"lineNum":" 1131","line":"        inline fn getIndex(self: Self, key: anytype, ctx: anytype) ?usize {"},
{"lineNum":" 1132","line":"            comptime verifyContext(@TypeOf(ctx), @TypeOf(key), K, Hash, false);"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"            if (self.size == 0) {","class":"linePartCov","hits":"5","order":"1191","possible_hits":"13",},
{"lineNum":" 1135","line":"                return null;","class":"linePartCov","hits":"2","order":"1192","possible_hits":"13",},
{"lineNum":" 1136","line":"            }"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"            // If you get a compile error on this line, it means that your generic hash"},
{"lineNum":" 1139","line":"            // function is invalid for these parameters."},
{"lineNum":" 1140","line":"            const hash = ctx.hash(key);","class":"linePartCov","hits":"5","order":"1766","possible_hits":"13",},
{"lineNum":" 1141","line":"            // verifyContext can\'t verify the return type of generic hash functions,"},
{"lineNum":" 1142","line":"            // so we need to double-check it here."},
{"lineNum":" 1143","line":"            if (@TypeOf(hash) != Hash) {"},
{"lineNum":" 1144","line":"                @compileError(\"Context \" ++ @typeName(@TypeOf(ctx)) ++ \" has a generic hash function that returns the wrong type! \" ++ @typeName(Hash) ++ \" was expected, but found \" ++ @typeName(@TypeOf(hash)));"},
{"lineNum":" 1145","line":"            }"},
{"lineNum":" 1146","line":"            const mask = self.capacity() - 1;","class":"linePartCov","hits":"5","order":"1767","possible_hits":"26",},
{"lineNum":" 1147","line":"            const fingerprint = Metadata.takeFingerprint(hash);","class":"linePartCov","hits":"5","order":"1768","possible_hits":"13",},
{"lineNum":" 1148","line":"            // Don\'t loop indefinitely when there are no empty slots."},
{"lineNum":" 1149","line":"            var limit = self.capacity();","class":"linePartCov","hits":"5","order":"1769","possible_hits":"13",},
{"lineNum":" 1150","line":"            var idx = @as(usize, @truncate(hash & mask));","class":"linePartCov","hits":"5","order":"1770","possible_hits":"13",},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"            var metadata = self.metadata.? + idx;","class":"linePartCov","hits":"5","order":"1771","possible_hits":"13",},
{"lineNum":" 1153","line":"            while (!metadata[0].isFree() and limit != 0) {","class":"linePartCov","hits":"10","order":"1772","possible_hits":"26",},
{"lineNum":" 1154","line":"                if (metadata[0].isUsed() and metadata[0].fingerprint == fingerprint) {","class":"linePartCov","hits":"10","order":"1783","possible_hits":"26",},
{"lineNum":" 1155","line":"                    const test_key = &self.keys()[idx];","class":"linePartCov","hits":"4","order":"1784","possible_hits":"13",},
{"lineNum":" 1156","line":"                    // If you get a compile error on this line, it means that your generic eql"},
{"lineNum":" 1157","line":"                    // function is invalid for these parameters."},
{"lineNum":" 1158","line":"                    const eql = ctx.eql(key, test_key.*);","class":"linePartCov","hits":"4","order":"1785","possible_hits":"13",},
{"lineNum":" 1159","line":"                    // verifyContext can\'t verify the return type of generic eql functions,"},
{"lineNum":" 1160","line":"                    // so we need to double-check it here."},
{"lineNum":" 1161","line":"                    if (@TypeOf(eql) != bool) {"},
{"lineNum":" 1162","line":"                        @compileError(\"Context \" ++ @typeName(@TypeOf(ctx)) ++ \" has a generic eql function that returns the wrong type! bool was expected, but found \" ++ @typeName(@TypeOf(eql)));"},
{"lineNum":" 1163","line":"                    }"},
{"lineNum":" 1164","line":"                    if (eql) {","class":"linePartCov","hits":"4","order":"1786","possible_hits":"13",},
{"lineNum":" 1165","line":"                        return idx;","class":"linePartCov","hits":"5","order":"2640","possible_hits":"13",},
{"lineNum":" 1166","line":"                    }"},
{"lineNum":" 1167","line":"                }"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"                limit -= 1;","class":"linePartCov","hits":"5","order":"2641","possible_hits":"26",},
{"lineNum":" 1170","line":"                idx = (idx + 1) & mask;","class":"linePartCov","hits":"5","order":"2642","possible_hits":"13",},
{"lineNum":" 1171","line":"                metadata = self.metadata.? + idx;","class":"linePartCov","hits":"13","order":"1773","possible_hits":"39",},
{"lineNum":" 1172","line":"            }"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"            return null;","class":"linePartCov","hits":"11","order":"1193","possible_hits":"34",},
{"lineNum":" 1175","line":"        }"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"        pub fn getEntry(self: Self, key: K) ?Entry {","class":"linePartCov","hits":"1","order":"3096","possible_hits":"2",},
{"lineNum":" 1178","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1179","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getEntryContext instead.\");"},
{"lineNum":" 1180","line":"            return self.getEntryContext(key, undefined);","class":"linePartCov","hits":"1","order":"3097","possible_hits":"2",},
{"lineNum":" 1181","line":"        }"},
{"lineNum":" 1182","line":"        pub fn getEntryContext(self: Self, key: K, ctx: Context) ?Entry {","class":"linePartCov","hits":"1","order":"3098","possible_hits":"2",},
{"lineNum":" 1183","line":"            return self.getEntryAdapted(key, ctx);","class":"linePartCov","hits":"1","order":"3099","possible_hits":"2",},
{"lineNum":" 1184","line":"        }"},
{"lineNum":" 1185","line":"        pub fn getEntryAdapted(self: Self, key: anytype, ctx: anytype) ?Entry {","class":"linePartCov","hits":"1","order":"3100","possible_hits":"2",},
{"lineNum":" 1186","line":"            if (self.getIndex(key, ctx)) |idx| {","class":"linePartCov","hits":"1","order":"3101","possible_hits":"2",},
{"lineNum":" 1187","line":"                return Entry{","class":"linePartCov","hits":"2","order":"3106","possible_hits":"4",},
{"lineNum":" 1188","line":"                    .key_ptr = &self.keys()[idx],","class":"linePartCov","hits":"1","order":"3107","possible_hits":"2",},
{"lineNum":" 1189","line":"                    .value_ptr = &self.values()[idx],","class":"linePartCov","hits":"1","order":"3108","possible_hits":"2",},
{"lineNum":" 1190","line":"                };"},
{"lineNum":" 1191","line":"            }"},
{"lineNum":" 1192","line":"            return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1193","line":"        }"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"        /// Insert an entry if the associated key is not already present, otherwise update preexisting value."},
{"lineNum":" 1196","line":"        pub fn put(self: *Self, allocator: Allocator, key: K, value: V) Allocator.Error!void {"},
{"lineNum":" 1197","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1198","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putContext instead.\");"},
{"lineNum":" 1199","line":"            return self.putContext(allocator, key, value, undefined);"},
{"lineNum":" 1200","line":"        }"},
{"lineNum":" 1201","line":"        pub fn putContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!void {","class":"lineCov","hits":"2","order":"920","possible_hits":"2",},
{"lineNum":" 1202","line":"            const result = try self.getOrPutContext(allocator, key, ctx);","class":"lineCov","hits":"2","order":"921","possible_hits":"2",},
{"lineNum":" 1203","line":"            result.value_ptr.* = value;","class":"lineCov","hits":"2","order":"1058","possible_hits":"2",},
{"lineNum":" 1204","line":"        }"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"        /// Get an optional pointer to the actual key associated with adapted key, if present."},
{"lineNum":" 1207","line":"        pub fn getKeyPtr(self: Self, key: K) ?*K {"},
{"lineNum":" 1208","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1209","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getKeyPtrContext instead.\");"},
{"lineNum":" 1210","line":"            return self.getKeyPtrContext(key, undefined);"},
{"lineNum":" 1211","line":"        }"},
{"lineNum":" 1212","line":"        pub fn getKeyPtrContext(self: Self, key: K, ctx: Context) ?*K {"},
{"lineNum":" 1213","line":"            return self.getKeyPtrAdapted(key, ctx);"},
{"lineNum":" 1214","line":"        }"},
{"lineNum":" 1215","line":"        pub fn getKeyPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*K {"},
{"lineNum":" 1216","line":"            if (self.getIndex(key, ctx)) |idx| {"},
{"lineNum":" 1217","line":"                return &self.keys()[idx];"},
{"lineNum":" 1218","line":"            }"},
{"lineNum":" 1219","line":"            return null;"},
{"lineNum":" 1220","line":"        }"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"        /// Get a copy of the actual key associated with adapted key, if present."},
{"lineNum":" 1223","line":"        pub fn getKey(self: Self, key: K) ?K {"},
{"lineNum":" 1224","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1225","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getKeyContext instead.\");"},
{"lineNum":" 1226","line":"            return self.getKeyContext(key, undefined);"},
{"lineNum":" 1227","line":"        }"},
{"lineNum":" 1228","line":"        pub fn getKeyContext(self: Self, key: K, ctx: Context) ?K {"},
{"lineNum":" 1229","line":"            return self.getKeyAdapted(key, ctx);"},
{"lineNum":" 1230","line":"        }"},
{"lineNum":" 1231","line":"        pub fn getKeyAdapted(self: Self, key: anytype, ctx: anytype) ?K {"},
{"lineNum":" 1232","line":"            if (self.getIndex(key, ctx)) |idx| {"},
{"lineNum":" 1233","line":"                return self.keys()[idx];"},
{"lineNum":" 1234","line":"            }"},
{"lineNum":" 1235","line":"            return null;"},
{"lineNum":" 1236","line":"        }"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"        /// Get an optional pointer to the value associated with key, if present."},
{"lineNum":" 1239","line":"        pub fn getPtr(self: Self, key: K) ?*V {"},
{"lineNum":" 1240","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1241","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getPtrContext instead.\");"},
{"lineNum":" 1242","line":"            return self.getPtrContext(key, undefined);"},
{"lineNum":" 1243","line":"        }"},
{"lineNum":" 1244","line":"        pub fn getPtrContext(self: Self, key: K, ctx: Context) ?*V {"},
{"lineNum":" 1245","line":"            return self.getPtrAdapted(key, ctx);"},
{"lineNum":" 1246","line":"        }"},
{"lineNum":" 1247","line":"        pub fn getPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*V {"},
{"lineNum":" 1248","line":"            if (self.getIndex(key, ctx)) |idx| {"},
{"lineNum":" 1249","line":"                return &self.values()[idx];"},
{"lineNum":" 1250","line":"            }"},
{"lineNum":" 1251","line":"            return null;"},
{"lineNum":" 1252","line":"        }"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"        /// Get a copy of the value associated with key, if present."},
{"lineNum":" 1255","line":"        pub fn get(self: Self, key: K) ?V {"},
{"lineNum":" 1256","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1257","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getContext instead.\");"},
{"lineNum":" 1258","line":"            return self.getContext(key, undefined);"},
{"lineNum":" 1259","line":"        }"},
{"lineNum":" 1260","line":"        pub fn getContext(self: Self, key: K, ctx: Context) ?V {","class":"linePartCov","hits":"1","order":"1779","possible_hits":"2",},
{"lineNum":" 1261","line":"            return self.getAdapted(key, ctx);","class":"linePartCov","hits":"1","order":"1780","possible_hits":"2",},
{"lineNum":" 1262","line":"        }"},
{"lineNum":" 1263","line":"        pub fn getAdapted(self: Self, key: anytype, ctx: anytype) ?V {","class":"linePartCov","hits":"1","order":"1781","possible_hits":"2",},
{"lineNum":" 1264","line":"            if (self.getIndex(key, ctx)) |idx| {","class":"linePartCov","hits":"1","order":"1782","possible_hits":"2",},
{"lineNum":" 1265","line":"                return self.values()[idx];","class":"linePartCov","hits":"1","order":"1787","possible_hits":"2",},
{"lineNum":" 1266","line":"            }"},
{"lineNum":" 1267","line":"            return null;","class":"linePartCov","hits":"1","order":"2903","possible_hits":"2",},
{"lineNum":" 1268","line":"        }"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"        pub fn getOrPut(self: *Self, allocator: Allocator, key: K) Allocator.Error!GetOrPutResult {"},
{"lineNum":" 1271","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1272","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutContext instead.\");"},
{"lineNum":" 1273","line":"            return self.getOrPutContext(allocator, key, undefined);"},
{"lineNum":" 1274","line":"        }"},
{"lineNum":" 1275","line":"        pub fn getOrPutContext(self: *Self, allocator: Allocator, key: K, ctx: Context) Allocator.Error!GetOrPutResult {","class":"lineCov","hits":"2","order":"922","possible_hits":"2",},
{"lineNum":" 1276","line":"            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);","class":"lineCov","hits":"2","order":"923","possible_hits":"2",},
{"lineNum":" 1277","line":"            if (!gop.found_existing) {","class":"lineCov","hits":"2","order":"1055","possible_hits":"2",},
{"lineNum":" 1278","line":"                gop.key_ptr.* = key;","class":"lineCov","hits":"2","order":"1056","possible_hits":"2",},
{"lineNum":" 1279","line":"            }"},
{"lineNum":" 1280","line":"            return gop;","class":"lineCov","hits":"2","order":"1057","possible_hits":"2",},
{"lineNum":" 1281","line":"        }"},
{"lineNum":" 1282","line":"        pub fn getOrPutAdapted(self: *Self, allocator: Allocator, key: anytype, key_ctx: anytype) Allocator.Error!GetOrPutResult {"},
{"lineNum":" 1283","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1284","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutContextAdapted instead.\");"},
{"lineNum":" 1285","line":"            return self.getOrPutContextAdapted(allocator, key, key_ctx, undefined);"},
{"lineNum":" 1286","line":"        }"},
{"lineNum":" 1287","line":"        pub fn getOrPutContextAdapted(self: *Self, allocator: Allocator, key: anytype, key_ctx: anytype, ctx: Context) Allocator.Error!GetOrPutResult {","class":"lineCov","hits":"2","order":"924","possible_hits":"2",},
{"lineNum":" 1288","line":"            self.growIfNeeded(allocator, 1, ctx) catch |err| {","class":"lineCov","hits":"4","order":"925","possible_hits":"4",},
{"lineNum":" 1289","line":"                // If allocation fails, try to do the lookup anyway."},
{"lineNum":" 1290","line":"                // If we find an existing item, we can return it."},
{"lineNum":" 1291","line":"                // Otherwise return the error, we could not add another."},
{"lineNum":" 1292","line":"                const index = self.getIndex(key, key_ctx) orelse return err;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1293","line":"                return GetOrPutResult{","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1294","line":"                    .key_ptr = &self.keys()[index],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1295","line":"                    .value_ptr = &self.values()[index],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1296","line":"                    .found_existing = true,"},
{"lineNum":" 1297","line":"                };"},
{"lineNum":" 1298","line":"            };"},
{"lineNum":" 1299","line":"            return self.getOrPutAssumeCapacityAdapted(key, key_ctx);","class":"lineCov","hits":"2","order":"989","possible_hits":"2",},
{"lineNum":" 1300","line":"        }"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"        pub fn getOrPutAssumeCapacity(self: *Self, key: K) GetOrPutResult {","class":"linePartCov","hits":"1","order":"3052","possible_hits":"2",},
{"lineNum":" 1303","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1304","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutAssumeCapacityContext instead.\");"},
{"lineNum":" 1305","line":"            return self.getOrPutAssumeCapacityContext(key, undefined);","class":"linePartCov","hits":"1","order":"3053","possible_hits":"2",},
{"lineNum":" 1306","line":"        }"},
{"lineNum":" 1307","line":"        pub fn getOrPutAssumeCapacityContext(self: *Self, key: K, ctx: Context) GetOrPutResult {","class":"linePartCov","hits":"1","order":"3054","possible_hits":"2",},
{"lineNum":" 1308","line":"            const result = self.getOrPutAssumeCapacityAdapted(key, ctx);","class":"linePartCov","hits":"1","order":"3055","possible_hits":"2",},
{"lineNum":" 1309","line":"            if (!result.found_existing) {","class":"linePartCov","hits":"1","order":"3060","possible_hits":"2",},
{"lineNum":" 1310","line":"                result.key_ptr.* = key;","class":"linePartCov","hits":"1","order":"3061","possible_hits":"2",},
{"lineNum":" 1311","line":"            }"},
{"lineNum":" 1312","line":"            return result;","class":"linePartCov","hits":"1","order":"3062","possible_hits":"2",},
{"lineNum":" 1313","line":"        }"},
{"lineNum":" 1314","line":"        pub fn getOrPutAssumeCapacityAdapted(self: *Self, key: anytype, ctx: anytype) GetOrPutResult {","class":"linePartCov","hits":"3","order":"990","possible_hits":"4",},
{"lineNum":" 1315","line":"            comptime verifyContext(@TypeOf(ctx), @TypeOf(key), K, Hash, false);"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"            // If you get a compile error on this line, it means that your generic hash"},
{"lineNum":" 1318","line":"            // function is invalid for these parameters."},
{"lineNum":" 1319","line":"            const hash = ctx.hash(key);","class":"linePartCov","hits":"3","order":"991","possible_hits":"4",},
{"lineNum":" 1320","line":"            // verifyContext can\'t verify the return type of generic hash functions,"},
{"lineNum":" 1321","line":"            // so we need to double-check it here."},
{"lineNum":" 1322","line":"            if (@TypeOf(hash) != Hash) {"},
{"lineNum":" 1323","line":"                @compileError(\"Context \" ++ @typeName(@TypeOf(ctx)) ++ \" has a generic hash function that returns the wrong type! \" ++ @typeName(Hash) ++ \" was expected, but found \" ++ @typeName(@TypeOf(hash)));"},
{"lineNum":" 1324","line":"            }"},
{"lineNum":" 1325","line":"            const mask = self.capacity() - 1;","class":"linePartCov","hits":"3","order":"1025","possible_hits":"4",},
{"lineNum":" 1326","line":"            const fingerprint = Metadata.takeFingerprint(hash);","class":"linePartCov","hits":"3","order":"1026","possible_hits":"4",},
{"lineNum":" 1327","line":"            var limit = self.capacity();","class":"linePartCov","hits":"3","order":"1031","possible_hits":"4",},
{"lineNum":" 1328","line":"            var idx = @as(usize, @truncate(hash & mask));","class":"linePartCov","hits":"3","order":"1032","possible_hits":"4",},
{"lineNum":" 1329","line":""},
{"lineNum":" 1330","line":"            var first_tombstone_idx: usize = self.capacity(); // invalid index","class":"linePartCov","hits":"3","order":"1033","possible_hits":"4",},
{"lineNum":" 1331","line":"            var metadata = self.metadata.? + idx;","class":"linePartCov","hits":"3","order":"1034","possible_hits":"4",},
{"lineNum":" 1332","line":"            while (!metadata[0].isFree() and limit != 0) {","class":"linePartCov","hits":"6","order":"1035","possible_hits":"8",},
{"lineNum":" 1333","line":"                if (metadata[0].isUsed() and metadata[0].fingerprint == fingerprint) {","class":"linePartCov","hits":"6","order":"1743","possible_hits":"8",},
{"lineNum":" 1334","line":"                    const test_key = &self.keys()[idx];","class":"linePartCov","hits":"1","order":"1746","possible_hits":"4",},
{"lineNum":" 1335","line":"                    // If you get a compile error on this line, it means that your generic eql"},
{"lineNum":" 1336","line":"                    // function is invalid for these parameters."},
{"lineNum":" 1337","line":"                    const eql = ctx.eql(key, test_key.*);","class":"linePartCov","hits":"1","order":"1747","possible_hits":"4",},
{"lineNum":" 1338","line":"                    // verifyContext can\'t verify the return type of generic eql functions,"},
{"lineNum":" 1339","line":"                    // so we need to double-check it here."},
{"lineNum":" 1340","line":"                    if (@TypeOf(eql) != bool) {"},
{"lineNum":" 1341","line":"                        @compileError(\"Context \" ++ @typeName(@TypeOf(ctx)) ++ \" has a generic eql function that returns the wrong type! bool was expected, but found \" ++ @typeName(@TypeOf(eql)));"},
{"lineNum":" 1342","line":"                    }"},
{"lineNum":" 1343","line":"                    if (eql) {","class":"linePartCov","hits":"1","order":"1752","possible_hits":"4",},
{"lineNum":" 1344","line":"                        return GetOrPutResult{","class":"linePartCov","hits":"1","order":"1754","possible_hits":"8",},
{"lineNum":" 1345","line":"                            .key_ptr = test_key,"},
{"lineNum":" 1346","line":"                            .value_ptr = &self.values()[idx],","class":"linePartCov","hits":"1","order":"1753","possible_hits":"4",},
{"lineNum":" 1347","line":"                            .found_existing = true,"},
{"lineNum":" 1348","line":"                        };"},
{"lineNum":" 1349","line":"                    }"},
{"lineNum":" 1350","line":"                } else if (first_tombstone_idx == self.capacity() and metadata[0].isTombstone()) {","class":"linePartCov","hits":"6","order":"2244","possible_hits":"8",},
{"lineNum":" 1351","line":"                    first_tombstone_idx = idx;","class":"linePartCov","hits":"3","order":"2247","possible_hits":"8",},
{"lineNum":" 1352","line":"                }"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"                limit -= 1;","class":"linePartCov","hits":"3","order":"2248","possible_hits":"8",},
{"lineNum":" 1355","line":"                idx = (idx + 1) & mask;","class":"linePartCov","hits":"3","order":"2249","possible_hits":"4",},
{"lineNum":" 1356","line":"                metadata = self.metadata.? + idx;","class":"linePartCov","hits":"9","order":"1038","possible_hits":"12",},
{"lineNum":" 1357","line":"            }"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"            if (first_tombstone_idx < self.capacity()) {","class":"linePartCov","hits":"3","order":"1039","possible_hits":"4",},
{"lineNum":" 1360","line":"                // Cheap try to lower probing lengths after deletions. Recycle a tombstone."},
{"lineNum":" 1361","line":"                idx = first_tombstone_idx;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1362","line":"                metadata = self.metadata.? + idx;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1363","line":"            }"},
{"lineNum":" 1364","line":"            // We\'re using a slot previously free or a tombstone."},
{"lineNum":" 1365","line":"            self.available -= 1;","class":"linePartCov","hits":"3","order":"1040","possible_hits":"8",},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"            metadata[0].fill(fingerprint);","class":"linePartCov","hits":"3","order":"1041","possible_hits":"4",},
{"lineNum":" 1368","line":"            const new_key = &self.keys()[idx];","class":"linePartCov","hits":"3","order":"1045","possible_hits":"4",},
{"lineNum":" 1369","line":"            const new_value = &self.values()[idx];","class":"linePartCov","hits":"3","order":"1048","possible_hits":"4",},
{"lineNum":" 1370","line":"            new_key.* = undefined;","class":"linePartCov","hits":"3","order":"1051","possible_hits":"4",},
{"lineNum":" 1371","line":"            new_value.* = undefined;","class":"linePartCov","hits":"3","order":"1052","possible_hits":"4",},
{"lineNum":" 1372","line":"            self.size += 1;","class":"linePartCov","hits":"3","order":"1053","possible_hits":"4",},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"            return GetOrPutResult{","class":"linePartCov","hits":"3","order":"1054","possible_hits":"4",},
{"lineNum":" 1375","line":"                .key_ptr = new_key,"},
{"lineNum":" 1376","line":"                .value_ptr = new_value,"},
{"lineNum":" 1377","line":"                .found_existing = false,"},
{"lineNum":" 1378","line":"            };"},
{"lineNum":" 1379","line":"        }"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"        pub fn getOrPutValue(self: *Self, allocator: Allocator, key: K, value: V) Allocator.Error!Entry {"},
{"lineNum":" 1382","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1383","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutValueContext instead.\");"},
{"lineNum":" 1384","line":"            return self.getOrPutValueContext(allocator, key, value, undefined);"},
{"lineNum":" 1385","line":"        }"},
{"lineNum":" 1386","line":"        pub fn getOrPutValueContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!Entry {"},
{"lineNum":" 1387","line":"            const res = try self.getOrPutAdapted(allocator, key, ctx);"},
{"lineNum":" 1388","line":"            if (!res.found_existing) {"},
{"lineNum":" 1389","line":"                res.key_ptr.* = key;"},
{"lineNum":" 1390","line":"                res.value_ptr.* = value;"},
{"lineNum":" 1391","line":"            }"},
{"lineNum":" 1392","line":"            return Entry{ .key_ptr = res.key_ptr, .value_ptr = res.value_ptr };"},
{"lineNum":" 1393","line":"        }"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"        /// Return true if there is a value associated with key in the map."},
{"lineNum":" 1396","line":"        pub fn contains(self: *const Self, key: K) bool {"},
{"lineNum":" 1397","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1398","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call containsContext instead.\");"},
{"lineNum":" 1399","line":"            return self.containsContext(key, undefined);"},
{"lineNum":" 1400","line":"        }"},
{"lineNum":" 1401","line":"        pub fn containsContext(self: *const Self, key: K, ctx: Context) bool {","class":"linePartCov","hits":"2","order":"1187","possible_hits":"5",},
{"lineNum":" 1402","line":"            return self.containsAdapted(key, ctx);","class":"linePartCov","hits":"2","order":"1188","possible_hits":"5",},
{"lineNum":" 1403","line":"        }"},
{"lineNum":" 1404","line":"        pub fn containsAdapted(self: *const Self, key: anytype, ctx: anytype) bool {","class":"linePartCov","hits":"2","order":"1189","possible_hits":"5",},
{"lineNum":" 1405","line":"            return self.getIndex(key, ctx) != null;","class":"linePartCov","hits":"4","order":"1190","possible_hits":"10",},
{"lineNum":" 1406","line":"        }"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"        fn removeByIndex(self: *Self, idx: usize) void {","class":"linePartCov","hits":"1","order":"3180","possible_hits":"2",},
{"lineNum":" 1409","line":"            self.metadata.?[idx].remove();","class":"linePartCov","hits":"2","order":"3181","possible_hits":"4",},
{"lineNum":" 1410","line":"            self.keys()[idx] = undefined;","class":"linePartCov","hits":"1","order":"3185","possible_hits":"2",},
{"lineNum":" 1411","line":"            self.values()[idx] = undefined;","class":"linePartCov","hits":"1","order":"3186","possible_hits":"2",},
{"lineNum":" 1412","line":"            self.size -= 1;","class":"linePartCov","hits":"1","order":"3187","possible_hits":"4",},
{"lineNum":" 1413","line":"            self.available += 1;","class":"linePartCov","hits":"1","order":"3188","possible_hits":"2",},
{"lineNum":" 1414","line":"        }"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":" 1417","line":"        /// the hash map, and this function returns true.  Otherwise this"},
{"lineNum":" 1418","line":"        /// function returns false."},
{"lineNum":" 1419","line":"        pub fn remove(self: *Self, key: K) bool {","class":"linePartCov","hits":"1","order":"3173","possible_hits":"2",},
{"lineNum":" 1420","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1421","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call removeContext instead.\");"},
{"lineNum":" 1422","line":"            return self.removeContext(key, undefined);","class":"linePartCov","hits":"1","order":"3174","possible_hits":"2",},
{"lineNum":" 1423","line":"        }"},
{"lineNum":" 1424","line":"        pub fn removeContext(self: *Self, key: K, ctx: Context) bool {","class":"linePartCov","hits":"1","order":"3175","possible_hits":"2",},
{"lineNum":" 1425","line":"            return self.removeAdapted(key, ctx);","class":"linePartCov","hits":"1","order":"3176","possible_hits":"2",},
{"lineNum":" 1426","line":"        }"},
{"lineNum":" 1427","line":"        pub fn removeAdapted(self: *Self, key: anytype, ctx: anytype) bool {","class":"linePartCov","hits":"1","order":"3177","possible_hits":"2",},
{"lineNum":" 1428","line":"            if (self.getIndex(key, ctx)) |idx| {","class":"linePartCov","hits":"1","order":"3178","possible_hits":"2",},
{"lineNum":" 1429","line":"                self.removeByIndex(idx);","class":"linePartCov","hits":"1","order":"3179","possible_hits":"2",},
{"lineNum":" 1430","line":"                return true;","class":"linePartCov","hits":"1","order":"3189","possible_hits":"2",},
{"lineNum":" 1431","line":"            }"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1434","line":"        }"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"        /// Delete the entry with key pointed to by key_ptr from the hash map."},
{"lineNum":" 1437","line":"        /// key_ptr is assumed to be a valid pointer to a key that is present"},
{"lineNum":" 1438","line":"        /// in the hash map."},
{"lineNum":" 1439","line":"        pub fn removeByPtr(self: *Self, key_ptr: *K) void {"},
{"lineNum":" 1440","line":"            // TODO: replace with pointer subtraction once supported by zig"},
{"lineNum":" 1441","line":"            // if @sizeOf(K) == 0 then there is at most one item in the hash"},
{"lineNum":" 1442","line":"            // map, which is assumed to exist as key_ptr must be valid.  This"},
{"lineNum":" 1443","line":"            // item must be at index 0."},
{"lineNum":" 1444","line":"            const idx = if (@sizeOf(K) > 0)"},
{"lineNum":" 1445","line":"                (@intFromPtr(key_ptr) - @intFromPtr(self.keys())) / @sizeOf(K)"},
{"lineNum":" 1446","line":"            else"},
{"lineNum":" 1447","line":"                0;"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"            self.removeByIndex(idx);"},
{"lineNum":" 1450","line":"        }"},
{"lineNum":" 1451","line":""},
{"lineNum":" 1452","line":"        fn initMetadatas(self: *Self) void {","class":"linePartCov","hits":"3","order":"968","possible_hits":"5",},
{"lineNum":" 1453","line":"            @memset(@as([*]u8, @ptrCast(self.metadata.?))[0 .. @sizeOf(Metadata) * self.capacity()], 0);","class":"linePartCov","hits":"3","order":"969","possible_hits":"5",},
{"lineNum":" 1454","line":"        }"},
{"lineNum":" 1455","line":""},
{"lineNum":" 1456","line":"        // This counts the number of occupied slots (not counting tombstones), which is"},
{"lineNum":" 1457","line":"        // what has to stay under the max_load_percentage of capacity."},
{"lineNum":" 1458","line":"        fn load(self: *const Self) Size {","class":"linePartCov","hits":"3","order":"928","possible_hits":"5",},
{"lineNum":" 1459","line":"            const max_load = (self.capacity() * max_load_percentage) / 100;","class":"linePartCov","hits":"3","order":"929","possible_hits":"5",},
{"lineNum":" 1460","line":"            assert(max_load >= self.available);","class":"linePartCov","hits":"3","order":"932","possible_hits":"5",},
{"lineNum":" 1461","line":"            return @as(Size, @truncate(max_load - self.available));","class":"linePartCov","hits":"3","order":"933","possible_hits":"5",},
{"lineNum":" 1462","line":"        }"},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"        fn growIfNeeded(self: *Self, allocator: Allocator, new_count: Size, ctx: Context) Allocator.Error!void {","class":"linePartCov","hits":"3","order":"926","possible_hits":"5",},
{"lineNum":" 1465","line":"            if (new_count > self.available) {","class":"linePartCov","hits":"3","order":"927","possible_hits":"5",},
{"lineNum":" 1466","line":"                try self.grow(allocator, capacityForSize(self.load() + new_count), ctx);","class":"linePartCov","hits":"3","order":"988","possible_hits":"5",},
{"lineNum":" 1467","line":"            }"},
{"lineNum":" 1468","line":"        }"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"        pub fn clone(self: Self, allocator: Allocator) Allocator.Error!Self {"},
{"lineNum":" 1471","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1472","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call cloneContext instead.\");"},
{"lineNum":" 1473","line":"            return self.cloneContext(allocator, @as(Context, undefined));"},
{"lineNum":" 1474","line":"        }"},
{"lineNum":" 1475","line":"        pub fn cloneContext(self: Self, allocator: Allocator, new_ctx: anytype) Allocator.Error!HashMapUnmanaged(K, V, @TypeOf(new_ctx), max_load_percentage) {"},
{"lineNum":" 1476","line":"            var other = HashMapUnmanaged(K, V, @TypeOf(new_ctx), max_load_percentage){};"},
{"lineNum":" 1477","line":"            if (self.size == 0)"},
{"lineNum":" 1478","line":"                return other;"},
{"lineNum":" 1479","line":""},
{"lineNum":" 1480","line":"            const new_cap = capacityForSize(self.size);"},
{"lineNum":" 1481","line":"            try other.allocate(allocator, new_cap);"},
{"lineNum":" 1482","line":"            other.initMetadatas();"},
{"lineNum":" 1483","line":"            other.available = @truncate((new_cap * max_load_percentage) / 100);"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"            var i: Size = 0;"},
{"lineNum":" 1486","line":"            var metadata = self.metadata.?;"},
{"lineNum":" 1487","line":"            var keys_ptr = self.keys();"},
{"lineNum":" 1488","line":"            var values_ptr = self.values();"},
{"lineNum":" 1489","line":"            while (i < self.capacity()) : (i += 1) {"},
{"lineNum":" 1490","line":"                if (metadata[i].isUsed()) {"},
{"lineNum":" 1491","line":"                    other.putAssumeCapacityNoClobberContext(keys_ptr[i], values_ptr[i], new_ctx);"},
{"lineNum":" 1492","line":"                    if (other.size == self.size)"},
{"lineNum":" 1493","line":"                        break;"},
{"lineNum":" 1494","line":"                }"},
{"lineNum":" 1495","line":"            }"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"            return other;"},
{"lineNum":" 1498","line":"        }"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"        /// Set the map to an empty state, making deinitialization a no-op, and"},
{"lineNum":" 1501","line":"        /// returning a copy of the original."},
{"lineNum":" 1502","line":"        pub fn move(self: *Self) Self {"},
{"lineNum":" 1503","line":"            const result = self.*;"},
{"lineNum":" 1504","line":"            self.* = .{};"},
{"lineNum":" 1505","line":"            return result;"},
{"lineNum":" 1506","line":"        }"},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"        fn grow(self: *Self, allocator: Allocator, new_capacity: Size, ctx: Context) Allocator.Error!void {","class":"linePartCov","hits":"3","order":"946","possible_hits":"5",},
{"lineNum":" 1509","line":"            @setCold(true);"},
{"lineNum":" 1510","line":"            const new_cap = @max(new_capacity, minimal_capacity);","class":"linePartCov","hits":"3","order":"947","possible_hits":"5",},
{"lineNum":" 1511","line":"            assert(new_cap > self.capacity());","class":"linePartCov","hits":"3","order":"948","possible_hits":"5",},
{"lineNum":" 1512","line":"            assert(std.math.isPowerOfTwo(new_cap));","class":"linePartCov","hits":"3","order":"949","possible_hits":"5",},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"            var map = Self{};","class":"linePartCov","hits":"3","order":"950","possible_hits":"5",},
{"lineNum":" 1515","line":"            defer map.deinit(allocator);","class":"linePartCov","hits":"3","order":"982","possible_hits":"10",},
{"lineNum":" 1516","line":"            try map.allocate(allocator, new_cap);","class":"linePartCov","hits":"3","order":"951","possible_hits":"10",},
{"lineNum":" 1517","line":"            map.initMetadatas();","class":"linePartCov","hits":"3","order":"967","possible_hits":"5",},
{"lineNum":" 1518","line":"            map.available = @truncate((new_cap * max_load_percentage) / 100);","class":"linePartCov","hits":"3","order":"973","possible_hits":"5",},
{"lineNum":" 1519","line":""},
{"lineNum":" 1520","line":"            if (self.size != 0) {","class":"linePartCov","hits":"3","order":"974","possible_hits":"5",},
{"lineNum":" 1521","line":"                const old_capacity = self.capacity();","class":"linePartCov","hits":"1","order":"2606","possible_hits":"5",},
{"lineNum":" 1522","line":"                var i: Size = 0;","class":"linePartCov","hits":"1","order":"2607","possible_hits":"5",},
{"lineNum":" 1523","line":"                var metadata = self.metadata.?;","class":"linePartCov","hits":"3","order":"2608","possible_hits":"15",},
{"lineNum":" 1524","line":"                var keys_ptr = self.keys();","class":"linePartCov","hits":"1","order":"2609","possible_hits":"5",},
{"lineNum":" 1525","line":"                var values_ptr = self.values();","class":"linePartCov","hits":"1","order":"2610","possible_hits":"5",},
{"lineNum":" 1526","line":"                while (i < old_capacity) : (i += 1) {","class":"linePartCov","hits":"4","order":"975","possible_hits":"20",},
{"lineNum":" 1527","line":"                    if (metadata[i].isUsed()) {","class":"linePartCov","hits":"1","order":"2611","possible_hits":"5",},
{"lineNum":" 1528","line":"                        map.putAssumeCapacityNoClobberContext(keys_ptr[i], values_ptr[i], ctx);","class":"linePartCov","hits":"1","order":"2612","possible_hits":"5",},
{"lineNum":" 1529","line":"                        if (map.size == self.size)","class":"linePartCov","hits":"1","order":"2628","possible_hits":"5",},
{"lineNum":" 1530","line":"                            break;"},
{"lineNum":" 1531","line":"                    }"},
{"lineNum":" 1532","line":"                }"},
{"lineNum":" 1533","line":"            }"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"            self.size = 0;","class":"linePartCov","hits":"3","order":"976","possible_hits":"5",},
{"lineNum":" 1536","line":"            std.mem.swap(Self, self, &map);","class":"linePartCov","hits":"3","order":"977","possible_hits":"5",},
{"lineNum":" 1537","line":"        }"},
{"lineNum":" 1538","line":""},
{"lineNum":" 1539","line":"        fn allocate(self: *Self, allocator: Allocator, new_capacity: Size) Allocator.Error!void {","class":"linePartCov","hits":"3","order":"952","possible_hits":"5",},
{"lineNum":" 1540","line":"            const header_align = @alignOf(Header);"},
{"lineNum":" 1541","line":"            const key_align = if (@sizeOf(K) == 0) 1 else @alignOf(K);"},
{"lineNum":" 1542","line":"            const val_align = if (@sizeOf(V) == 0) 1 else @alignOf(V);"},
{"lineNum":" 1543","line":"            const max_align = comptime @max(header_align, key_align, val_align);"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"            const meta_size = @sizeOf(Header) + new_capacity * @sizeOf(Metadata);","class":"linePartCov","hits":"3","order":"953","possible_hits":"5",},
{"lineNum":" 1546","line":"            comptime assert(@alignOf(Metadata) == 1);"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"            const keys_start = std.mem.alignForward(usize, meta_size, key_align);","class":"linePartCov","hits":"3","order":"954","possible_hits":"5",},
{"lineNum":" 1549","line":"            const keys_end = keys_start + new_capacity * @sizeOf(K);","class":"linePartCov","hits":"3","order":"955","possible_hits":"5",},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"            const vals_start = std.mem.alignForward(usize, keys_end, val_align);","class":"linePartCov","hits":"3","order":"956","possible_hits":"5",},
{"lineNum":" 1552","line":"            const vals_end = vals_start + new_capacity * @sizeOf(V);","class":"linePartCov","hits":"3","order":"957","possible_hits":"5",},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"            const total_size = std.mem.alignForward(usize, vals_end, max_align);","class":"linePartCov","hits":"3","order":"958","possible_hits":"5",},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"            const slice = try allocator.alignedAlloc(u8, max_align, total_size);","class":"linePartCov","hits":"3","order":"959","possible_hits":"5",},
{"lineNum":" 1557","line":"            const ptr = @intFromPtr(slice.ptr);","class":"linePartCov","hits":"3","order":"960","possible_hits":"5",},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"            const metadata = ptr + @sizeOf(Header);","class":"linePartCov","hits":"3","order":"961","possible_hits":"5",},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"            const hdr = @as(*Header, @ptrFromInt(ptr));","class":"linePartCov","hits":"6","order":"962","possible_hits":"10",},
{"lineNum":" 1562","line":"            if (@sizeOf([*]V) != 0) {"},
{"lineNum":" 1563","line":"                hdr.values = @as([*]V, @ptrFromInt(ptr + vals_start));","class":"linePartCov","hits":"6","order":"963","possible_hits":"15",},
{"lineNum":" 1564","line":"            }"},
{"lineNum":" 1565","line":"            if (@sizeOf([*]K) != 0) {"},
{"lineNum":" 1566","line":"                hdr.keys = @as([*]K, @ptrFromInt(ptr + keys_start));","class":"linePartCov","hits":"6","order":"964","possible_hits":"15",},
{"lineNum":" 1567","line":"            }"},
{"lineNum":" 1568","line":"            hdr.capacity = new_capacity;","class":"linePartCov","hits":"3","order":"965","possible_hits":"5",},
{"lineNum":" 1569","line":"            self.metadata = @as([*]Metadata, @ptrFromInt(metadata));","class":"linePartCov","hits":"6","order":"966","possible_hits":"10",},
{"lineNum":" 1570","line":"        }"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"        fn deallocate(self: *Self, allocator: Allocator) void {","class":"linePartCov","hits":"4","order":"985","possible_hits":"5",},
{"lineNum":" 1573","line":"            if (self.metadata == null) return;","class":"linePartCov","hits":"8","order":"986","possible_hits":"10",},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"            const header_align = @alignOf(Header);"},
{"lineNum":" 1576","line":"            const key_align = if (@sizeOf(K) == 0) 1 else @alignOf(K);"},
{"lineNum":" 1577","line":"            const val_align = if (@sizeOf(V) == 0) 1 else @alignOf(V);"},
{"lineNum":" 1578","line":"            const max_align = comptime @max(header_align, key_align, val_align);"},
{"lineNum":" 1579","line":""},
{"lineNum":" 1580","line":"            const cap = self.capacity();","class":"linePartCov","hits":"2","order":"2629","possible_hits":"5",},
{"lineNum":" 1581","line":"            const meta_size = @sizeOf(Header) + cap * @sizeOf(Metadata);","class":"linePartCov","hits":"2","order":"2630","possible_hits":"10",},
{"lineNum":" 1582","line":"            comptime assert(@alignOf(Metadata) == 1);"},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":"            const keys_start = std.mem.alignForward(usize, meta_size, key_align);","class":"linePartCov","hits":"2","order":"2631","possible_hits":"5",},
{"lineNum":" 1585","line":"            const keys_end = keys_start + cap * @sizeOf(K);","class":"linePartCov","hits":"2","order":"2632","possible_hits":"5",},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"            const vals_start = std.mem.alignForward(usize, keys_end, val_align);","class":"linePartCov","hits":"2","order":"2633","possible_hits":"5",},
{"lineNum":" 1588","line":"            const vals_end = vals_start + cap * @sizeOf(V);","class":"linePartCov","hits":"2","order":"2634","possible_hits":"5",},
{"lineNum":" 1589","line":""},
{"lineNum":" 1590","line":"            const total_size = std.mem.alignForward(usize, vals_end, max_align);","class":"linePartCov","hits":"2","order":"2635","possible_hits":"5",},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"            const slice = @as([*]align(max_align) u8, @ptrFromInt(@intFromPtr(self.header())))[0..total_size];","class":"linePartCov","hits":"4","order":"2636","possible_hits":"10",},
{"lineNum":" 1593","line":"            allocator.free(slice);","class":"linePartCov","hits":"2","order":"2637","possible_hits":"5",},
{"lineNum":" 1594","line":""},
{"lineNum":" 1595","line":"            self.metadata = null;","class":"linePartCov","hits":"2","order":"2638","possible_hits":"5",},
{"lineNum":" 1596","line":"            self.available = 0;","class":"linePartCov","hits":"2","order":"2639","possible_hits":"5",},
{"lineNum":" 1597","line":"        }"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"        /// This function is used in the debugger pretty formatters in tools/ to fetch the"},
{"lineNum":" 1600","line":"        /// header type to facilitate fancy debug printing for this type."},
{"lineNum":" 1601","line":"        fn dbHelper(self: *Self, hdr: *Header, entry: *Entry) void {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1602","line":"            _ = self;"},
{"lineNum":" 1603","line":"            _ = hdr;"},
{"lineNum":" 1604","line":"            _ = entry;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1605","line":"        }"},
{"lineNum":" 1606","line":""},
{"lineNum":" 1607","line":"        comptime {"},
{"lineNum":" 1608","line":"            if (builtin.mode == .Debug) {"},
{"lineNum":" 1609","line":"                _ = &dbHelper;"},
{"lineNum":" 1610","line":"            }"},
{"lineNum":" 1611","line":"        }"},
{"lineNum":" 1612","line":"    };"},
{"lineNum":" 1613","line":"}"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"const testing = std.testing;"},
{"lineNum":" 1616","line":"const expect = std.testing.expect;"},
{"lineNum":" 1617","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"test \"std.hash_map basic usage\" {"},
{"lineNum":" 1620","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1621","line":"    defer map.deinit();"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"    const count = 5;"},
{"lineNum":" 1624","line":"    var i: u32 = 0;"},
{"lineNum":" 1625","line":"    var total: u32 = 0;"},
{"lineNum":" 1626","line":"    while (i < count) : (i += 1) {"},
{"lineNum":" 1627","line":"        try map.put(i, i);"},
{"lineNum":" 1628","line":"        total += i;"},
{"lineNum":" 1629","line":"    }"},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"    var sum: u32 = 0;"},
{"lineNum":" 1632","line":"    var it = map.iterator();"},
{"lineNum":" 1633","line":"    while (it.next()) |kv| {"},
{"lineNum":" 1634","line":"        sum += kv.key_ptr.*;"},
{"lineNum":" 1635","line":"    }"},
{"lineNum":" 1636","line":"    try expectEqual(total, sum);"},
{"lineNum":" 1637","line":""},
{"lineNum":" 1638","line":"    i = 0;"},
{"lineNum":" 1639","line":"    sum = 0;"},
{"lineNum":" 1640","line":"    while (i < count) : (i += 1) {"},
{"lineNum":" 1641","line":"        try expectEqual(i, map.get(i).?);"},
{"lineNum":" 1642","line":"        sum += map.get(i).?;"},
{"lineNum":" 1643","line":"    }"},
{"lineNum":" 1644","line":"    try expectEqual(total, sum);"},
{"lineNum":" 1645","line":"}"},
{"lineNum":" 1646","line":""},
{"lineNum":" 1647","line":"test \"std.hash_map ensureTotalCapacity\" {"},
{"lineNum":" 1648","line":"    var map = AutoHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 1649","line":"    defer map.deinit();"},
{"lineNum":" 1650","line":""},
{"lineNum":" 1651","line":"    try map.ensureTotalCapacity(20);"},
{"lineNum":" 1652","line":"    const initial_capacity = map.capacity();"},
{"lineNum":" 1653","line":"    try testing.expect(initial_capacity >= 20);"},
{"lineNum":" 1654","line":"    var i: i32 = 0;"},
{"lineNum":" 1655","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 1656","line":"        try testing.expect(map.fetchPutAssumeCapacity(i, i + 10) == null);"},
{"lineNum":" 1657","line":"    }"},
{"lineNum":" 1658","line":"    // shouldn\'t resize from putAssumeCapacity"},
{"lineNum":" 1659","line":"    try testing.expect(initial_capacity == map.capacity());"},
{"lineNum":" 1660","line":"}"},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"test \"std.hash_map ensureUnusedCapacity with tombstones\" {"},
{"lineNum":" 1663","line":"    var map = AutoHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 1664","line":"    defer map.deinit();"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"    var i: i32 = 0;"},
{"lineNum":" 1667","line":"    while (i < 100) : (i += 1) {"},
{"lineNum":" 1668","line":"        try map.ensureUnusedCapacity(1);"},
{"lineNum":" 1669","line":"        map.putAssumeCapacity(i, i);"},
{"lineNum":" 1670","line":"        _ = map.remove(i);"},
{"lineNum":" 1671","line":"    }"},
{"lineNum":" 1672","line":"}"},
{"lineNum":" 1673","line":""},
{"lineNum":" 1674","line":"test \"std.hash_map clearRetainingCapacity\" {"},
{"lineNum":" 1675","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1676","line":"    defer map.deinit();"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"    map.clearRetainingCapacity();"},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"    try map.put(1, 1);"},
{"lineNum":" 1681","line":"    try expectEqual(map.get(1).?, 1);"},
{"lineNum":" 1682","line":"    try expectEqual(map.count(), 1);"},
{"lineNum":" 1683","line":""},
{"lineNum":" 1684","line":"    map.clearRetainingCapacity();"},
{"lineNum":" 1685","line":"    map.putAssumeCapacity(1, 1);"},
{"lineNum":" 1686","line":"    try expectEqual(map.get(1).?, 1);"},
{"lineNum":" 1687","line":"    try expectEqual(map.count(), 1);"},
{"lineNum":" 1688","line":""},
{"lineNum":" 1689","line":"    const cap = map.capacity();"},
{"lineNum":" 1690","line":"    try expect(cap > 0);"},
{"lineNum":" 1691","line":""},
{"lineNum":" 1692","line":"    map.clearRetainingCapacity();"},
{"lineNum":" 1693","line":"    map.clearRetainingCapacity();"},
{"lineNum":" 1694","line":"    try expectEqual(map.count(), 0);"},
{"lineNum":" 1695","line":"    try expectEqual(map.capacity(), cap);"},
{"lineNum":" 1696","line":"    try expect(!map.contains(1));"},
{"lineNum":" 1697","line":"}"},
{"lineNum":" 1698","line":""},
{"lineNum":" 1699","line":"test \"std.hash_map grow\" {"},
{"lineNum":" 1700","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1701","line":"    defer map.deinit();"},
{"lineNum":" 1702","line":""},
{"lineNum":" 1703","line":"    const growTo = 12456;"},
{"lineNum":" 1704","line":""},
{"lineNum":" 1705","line":"    var i: u32 = 0;"},
{"lineNum":" 1706","line":"    while (i < growTo) : (i += 1) {"},
{"lineNum":" 1707","line":"        try map.put(i, i);"},
{"lineNum":" 1708","line":"    }"},
{"lineNum":" 1709","line":"    try expectEqual(map.count(), growTo);"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"    i = 0;"},
{"lineNum":" 1712","line":"    var it = map.iterator();"},
{"lineNum":" 1713","line":"    while (it.next()) |kv| {"},
{"lineNum":" 1714","line":"        try expectEqual(kv.key_ptr.*, kv.value_ptr.*);"},
{"lineNum":" 1715","line":"        i += 1;"},
{"lineNum":" 1716","line":"    }"},
{"lineNum":" 1717","line":"    try expectEqual(i, growTo);"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"    i = 0;"},
{"lineNum":" 1720","line":"    while (i < growTo) : (i += 1) {"},
{"lineNum":" 1721","line":"        try expectEqual(map.get(i).?, i);"},
{"lineNum":" 1722","line":"    }"},
{"lineNum":" 1723","line":"}"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"test \"std.hash_map clone\" {"},
{"lineNum":" 1726","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1727","line":"    defer map.deinit();"},
{"lineNum":" 1728","line":""},
{"lineNum":" 1729","line":"    var a = try map.clone();"},
{"lineNum":" 1730","line":"    defer a.deinit();"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"    try expectEqual(a.count(), 0);"},
{"lineNum":" 1733","line":""},
{"lineNum":" 1734","line":"    try a.put(1, 1);"},
{"lineNum":" 1735","line":"    try a.put(2, 2);"},
{"lineNum":" 1736","line":"    try a.put(3, 3);"},
{"lineNum":" 1737","line":""},
{"lineNum":" 1738","line":"    var b = try a.clone();"},
{"lineNum":" 1739","line":"    defer b.deinit();"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"    try expectEqual(b.count(), 3);"},
{"lineNum":" 1742","line":"    try expectEqual(b.get(1).?, 1);"},
{"lineNum":" 1743","line":"    try expectEqual(b.get(2).?, 2);"},
{"lineNum":" 1744","line":"    try expectEqual(b.get(3).?, 3);"},
{"lineNum":" 1745","line":""},
{"lineNum":" 1746","line":"    var original = AutoHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 1747","line":"    defer original.deinit();"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"    var i: u8 = 0;"},
{"lineNum":" 1750","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 1751","line":"        try original.putNoClobber(i, i * 10);"},
{"lineNum":" 1752","line":"    }"},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"    var copy = try original.clone();"},
{"lineNum":" 1755","line":"    defer copy.deinit();"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"    i = 0;"},
{"lineNum":" 1758","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 1759","line":"        try testing.expect(copy.get(i).? == i * 10);"},
{"lineNum":" 1760","line":"    }"},
{"lineNum":" 1761","line":"}"},
{"lineNum":" 1762","line":""},
{"lineNum":" 1763","line":"test \"std.hash_map ensureTotalCapacity with existing elements\" {"},
{"lineNum":" 1764","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1765","line":"    defer map.deinit();"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"    try map.put(0, 0);"},
{"lineNum":" 1768","line":"    try expectEqual(map.count(), 1);"},
{"lineNum":" 1769","line":"    try expectEqual(map.capacity(), @TypeOf(map).Unmanaged.minimal_capacity);"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"    try map.ensureTotalCapacity(65);"},
{"lineNum":" 1772","line":"    try expectEqual(map.count(), 1);"},
{"lineNum":" 1773","line":"    try expectEqual(map.capacity(), 128);"},
{"lineNum":" 1774","line":"}"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"test \"std.hash_map ensureTotalCapacity satisfies max load factor\" {"},
{"lineNum":" 1777","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1778","line":"    defer map.deinit();"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"    try map.ensureTotalCapacity(127);"},
{"lineNum":" 1781","line":"    try expectEqual(map.capacity(), 256);"},
{"lineNum":" 1782","line":"}"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"test \"std.hash_map remove\" {"},
{"lineNum":" 1785","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1786","line":"    defer map.deinit();"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":"    var i: u32 = 0;"},
{"lineNum":" 1789","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1790","line":"        try map.put(i, i);"},
{"lineNum":" 1791","line":"    }"},
{"lineNum":" 1792","line":""},
{"lineNum":" 1793","line":"    i = 0;"},
{"lineNum":" 1794","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1795","line":"        if (i % 3 == 0) {"},
{"lineNum":" 1796","line":"            _ = map.remove(i);"},
{"lineNum":" 1797","line":"        }"},
{"lineNum":" 1798","line":"    }"},
{"lineNum":" 1799","line":"    try expectEqual(map.count(), 10);"},
{"lineNum":" 1800","line":"    var it = map.iterator();"},
{"lineNum":" 1801","line":"    while (it.next()) |kv| {"},
{"lineNum":" 1802","line":"        try expectEqual(kv.key_ptr.*, kv.value_ptr.*);"},
{"lineNum":" 1803","line":"        try expect(kv.key_ptr.* % 3 != 0);"},
{"lineNum":" 1804","line":"    }"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"    i = 0;"},
{"lineNum":" 1807","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1808","line":"        if (i % 3 == 0) {"},
{"lineNum":" 1809","line":"            try expect(!map.contains(i));"},
{"lineNum":" 1810","line":"        } else {"},
{"lineNum":" 1811","line":"            try expectEqual(map.get(i).?, i);"},
{"lineNum":" 1812","line":"        }"},
{"lineNum":" 1813","line":"    }"},
{"lineNum":" 1814","line":"}"},
{"lineNum":" 1815","line":""},
{"lineNum":" 1816","line":"test \"std.hash_map reverse removes\" {"},
{"lineNum":" 1817","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1818","line":"    defer map.deinit();"},
{"lineNum":" 1819","line":""},
{"lineNum":" 1820","line":"    var i: u32 = 0;"},
{"lineNum":" 1821","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1822","line":"        try map.putNoClobber(i, i);"},
{"lineNum":" 1823","line":"    }"},
{"lineNum":" 1824","line":""},
{"lineNum":" 1825","line":"    i = 16;"},
{"lineNum":" 1826","line":"    while (i > 0) : (i -= 1) {"},
{"lineNum":" 1827","line":"        _ = map.remove(i - 1);"},
{"lineNum":" 1828","line":"        try expect(!map.contains(i - 1));"},
{"lineNum":" 1829","line":"        var j: u32 = 0;"},
{"lineNum":" 1830","line":"        while (j < i - 1) : (j += 1) {"},
{"lineNum":" 1831","line":"            try expectEqual(map.get(j).?, j);"},
{"lineNum":" 1832","line":"        }"},
{"lineNum":" 1833","line":"    }"},
{"lineNum":" 1834","line":""},
{"lineNum":" 1835","line":"    try expectEqual(map.count(), 0);"},
{"lineNum":" 1836","line":"}"},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"test \"std.hash_map multiple removes on same metadata\" {"},
{"lineNum":" 1839","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1840","line":"    defer map.deinit();"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"    var i: u32 = 0;"},
{"lineNum":" 1843","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1844","line":"        try map.put(i, i);"},
{"lineNum":" 1845","line":"    }"},
{"lineNum":" 1846","line":""},
{"lineNum":" 1847","line":"    _ = map.remove(7);"},
{"lineNum":" 1848","line":"    _ = map.remove(15);"},
{"lineNum":" 1849","line":"    _ = map.remove(14);"},
{"lineNum":" 1850","line":"    _ = map.remove(13);"},
{"lineNum":" 1851","line":"    try expect(!map.contains(7));"},
{"lineNum":" 1852","line":"    try expect(!map.contains(15));"},
{"lineNum":" 1853","line":"    try expect(!map.contains(14));"},
{"lineNum":" 1854","line":"    try expect(!map.contains(13));"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"    i = 0;"},
{"lineNum":" 1857","line":"    while (i < 13) : (i += 1) {"},
{"lineNum":" 1858","line":"        if (i == 7) {"},
{"lineNum":" 1859","line":"            try expect(!map.contains(i));"},
{"lineNum":" 1860","line":"        } else {"},
{"lineNum":" 1861","line":"            try expectEqual(map.get(i).?, i);"},
{"lineNum":" 1862","line":"        }"},
{"lineNum":" 1863","line":"    }"},
{"lineNum":" 1864","line":""},
{"lineNum":" 1865","line":"    try map.put(15, 15);"},
{"lineNum":" 1866","line":"    try map.put(13, 13);"},
{"lineNum":" 1867","line":"    try map.put(14, 14);"},
{"lineNum":" 1868","line":"    try map.put(7, 7);"},
{"lineNum":" 1869","line":"    i = 0;"},
{"lineNum":" 1870","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1871","line":"        try expectEqual(map.get(i).?, i);"},
{"lineNum":" 1872","line":"    }"},
{"lineNum":" 1873","line":"}"},
{"lineNum":" 1874","line":""},
{"lineNum":" 1875","line":"test \"std.hash_map put and remove loop in random order\" {"},
{"lineNum":" 1876","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1877","line":"    defer map.deinit();"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"    var keys = std.ArrayList(u32).init(std.testing.allocator);"},
{"lineNum":" 1880","line":"    defer keys.deinit();"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"    const size = 32;"},
{"lineNum":" 1883","line":"    const iterations = 100;"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"    var i: u32 = 0;"},
{"lineNum":" 1886","line":"    while (i < size) : (i += 1) {"},
{"lineNum":" 1887","line":"        try keys.append(i);"},
{"lineNum":" 1888","line":"    }"},
{"lineNum":" 1889","line":"    var prng = std.rand.DefaultPrng.init(0);"},
{"lineNum":" 1890","line":"    const random = prng.random();"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"    while (i < iterations) : (i += 1) {"},
{"lineNum":" 1893","line":"        random.shuffle(u32, keys.items);"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"        for (keys.items) |key| {"},
{"lineNum":" 1896","line":"            try map.put(key, key);"},
{"lineNum":" 1897","line":"        }"},
{"lineNum":" 1898","line":"        try expectEqual(map.count(), size);"},
{"lineNum":" 1899","line":""},
{"lineNum":" 1900","line":"        for (keys.items) |key| {"},
{"lineNum":" 1901","line":"            _ = map.remove(key);"},
{"lineNum":" 1902","line":"        }"},
{"lineNum":" 1903","line":"        try expectEqual(map.count(), 0);"},
{"lineNum":" 1904","line":"    }"},
{"lineNum":" 1905","line":"}"},
{"lineNum":" 1906","line":""},
{"lineNum":" 1907","line":"test \"std.hash_map remove one million elements in random order\" {"},
{"lineNum":" 1908","line":"    const Map = AutoHashMap(u32, u32);"},
{"lineNum":" 1909","line":"    const n = 1000 * 1000;"},
{"lineNum":" 1910","line":"    var map = Map.init(std.heap.page_allocator);"},
{"lineNum":" 1911","line":"    defer map.deinit();"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"    var keys = std.ArrayList(u32).init(std.heap.page_allocator);"},
{"lineNum":" 1914","line":"    defer keys.deinit();"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"    var i: u32 = 0;"},
{"lineNum":" 1917","line":"    while (i < n) : (i += 1) {"},
{"lineNum":" 1918","line":"        keys.append(i) catch unreachable;"},
{"lineNum":" 1919","line":"    }"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"    var prng = std.rand.DefaultPrng.init(0);"},
{"lineNum":" 1922","line":"    const random = prng.random();"},
{"lineNum":" 1923","line":"    random.shuffle(u32, keys.items);"},
{"lineNum":" 1924","line":""},
{"lineNum":" 1925","line":"    for (keys.items) |key| {"},
{"lineNum":" 1926","line":"        map.put(key, key) catch unreachable;"},
{"lineNum":" 1927","line":"    }"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"    random.shuffle(u32, keys.items);"},
{"lineNum":" 1930","line":"    i = 0;"},
{"lineNum":" 1931","line":"    while (i < n) : (i += 1) {"},
{"lineNum":" 1932","line":"        const key = keys.items[i];"},
{"lineNum":" 1933","line":"        _ = map.remove(key);"},
{"lineNum":" 1934","line":"    }"},
{"lineNum":" 1935","line":"}"},
{"lineNum":" 1936","line":""},
{"lineNum":" 1937","line":"test \"std.hash_map put\" {"},
{"lineNum":" 1938","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1939","line":"    defer map.deinit();"},
{"lineNum":" 1940","line":""},
{"lineNum":" 1941","line":"    var i: u32 = 0;"},
{"lineNum":" 1942","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1943","line":"        try map.put(i, i);"},
{"lineNum":" 1944","line":"    }"},
{"lineNum":" 1945","line":""},
{"lineNum":" 1946","line":"    i = 0;"},
{"lineNum":" 1947","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1948","line":"        try expectEqual(map.get(i).?, i);"},
{"lineNum":" 1949","line":"    }"},
{"lineNum":" 1950","line":""},
{"lineNum":" 1951","line":"    i = 0;"},
{"lineNum":" 1952","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1953","line":"        try map.put(i, i * 16 + 1);"},
{"lineNum":" 1954","line":"    }"},
{"lineNum":" 1955","line":""},
{"lineNum":" 1956","line":"    i = 0;"},
{"lineNum":" 1957","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 1958","line":"        try expectEqual(map.get(i).?, i * 16 + 1);"},
{"lineNum":" 1959","line":"    }"},
{"lineNum":" 1960","line":"}"},
{"lineNum":" 1961","line":""},
{"lineNum":" 1962","line":"test \"std.hash_map putAssumeCapacity\" {"},
{"lineNum":" 1963","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1964","line":"    defer map.deinit();"},
{"lineNum":" 1965","line":""},
{"lineNum":" 1966","line":"    try map.ensureTotalCapacity(20);"},
{"lineNum":" 1967","line":"    var i: u32 = 0;"},
{"lineNum":" 1968","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 1969","line":"        map.putAssumeCapacityNoClobber(i, i);"},
{"lineNum":" 1970","line":"    }"},
{"lineNum":" 1971","line":""},
{"lineNum":" 1972","line":"    i = 0;"},
{"lineNum":" 1973","line":"    var sum = i;"},
{"lineNum":" 1974","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 1975","line":"        sum += map.getPtr(i).?.*;"},
{"lineNum":" 1976","line":"    }"},
{"lineNum":" 1977","line":"    try expectEqual(sum, 190);"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"    i = 0;"},
{"lineNum":" 1980","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 1981","line":"        map.putAssumeCapacity(i, 1);"},
{"lineNum":" 1982","line":"    }"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"    i = 0;"},
{"lineNum":" 1985","line":"    sum = i;"},
{"lineNum":" 1986","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 1987","line":"        sum += map.get(i).?;"},
{"lineNum":" 1988","line":"    }"},
{"lineNum":" 1989","line":"    try expectEqual(sum, 20);"},
{"lineNum":" 1990","line":"}"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"test \"std.hash_map repeat putAssumeCapacity/remove\" {"},
{"lineNum":" 1993","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 1994","line":"    defer map.deinit();"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"    try map.ensureTotalCapacity(20);"},
{"lineNum":" 1997","line":"    const limit = map.unmanaged.available;"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"    var i: u32 = 0;"},
{"lineNum":" 2000","line":"    while (i < limit) : (i += 1) {"},
{"lineNum":" 2001","line":"        map.putAssumeCapacityNoClobber(i, i);"},
{"lineNum":" 2002","line":"    }"},
{"lineNum":" 2003","line":""},
{"lineNum":" 2004","line":"    // Repeatedly delete/insert an entry without resizing the map."},
{"lineNum":" 2005","line":"    // Put to different keys so entries don\'t land in the just-freed slot."},
{"lineNum":" 2006","line":"    i = 0;"},
{"lineNum":" 2007","line":"    while (i < 10 * limit) : (i += 1) {"},
{"lineNum":" 2008","line":"        try testing.expect(map.remove(i));"},
{"lineNum":" 2009","line":"        if (i % 2 == 0) {"},
{"lineNum":" 2010","line":"            map.putAssumeCapacityNoClobber(limit + i, i);"},
{"lineNum":" 2011","line":"        } else {"},
{"lineNum":" 2012","line":"            map.putAssumeCapacity(limit + i, i);"},
{"lineNum":" 2013","line":"        }"},
{"lineNum":" 2014","line":"    }"},
{"lineNum":" 2015","line":""},
{"lineNum":" 2016","line":"    i = 9 * limit;"},
{"lineNum":" 2017","line":"    while (i < 10 * limit) : (i += 1) {"},
{"lineNum":" 2018","line":"        try expectEqual(map.get(limit + i), i);"},
{"lineNum":" 2019","line":"    }"},
{"lineNum":" 2020","line":"    try expectEqual(map.unmanaged.available, 0);"},
{"lineNum":" 2021","line":"    try expectEqual(map.unmanaged.count(), limit);"},
{"lineNum":" 2022","line":"}"},
{"lineNum":" 2023","line":""},
{"lineNum":" 2024","line":"test \"std.hash_map getOrPut\" {"},
{"lineNum":" 2025","line":"    var map = AutoHashMap(u32, u32).init(std.testing.allocator);"},
{"lineNum":" 2026","line":"    defer map.deinit();"},
{"lineNum":" 2027","line":""},
{"lineNum":" 2028","line":"    var i: u32 = 0;"},
{"lineNum":" 2029","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 2030","line":"        try map.put(i * 2, 2);"},
{"lineNum":" 2031","line":"    }"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"    i = 0;"},
{"lineNum":" 2034","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 2035","line":"        _ = try map.getOrPutValue(i, 1);"},
{"lineNum":" 2036","line":"    }"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"    i = 0;"},
{"lineNum":" 2039","line":"    var sum = i;"},
{"lineNum":" 2040","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 2041","line":"        sum += map.get(i).?;"},
{"lineNum":" 2042","line":"    }"},
{"lineNum":" 2043","line":""},
{"lineNum":" 2044","line":"    try expectEqual(sum, 30);"},
{"lineNum":" 2045","line":"}"},
{"lineNum":" 2046","line":""},
{"lineNum":" 2047","line":"test \"std.hash_map basic hash map usage\" {"},
{"lineNum":" 2048","line":"    var map = AutoHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2049","line":"    defer map.deinit();"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"    try testing.expect((try map.fetchPut(1, 11)) == null);"},
{"lineNum":" 2052","line":"    try testing.expect((try map.fetchPut(2, 22)) == null);"},
{"lineNum":" 2053","line":"    try testing.expect((try map.fetchPut(3, 33)) == null);"},
{"lineNum":" 2054","line":"    try testing.expect((try map.fetchPut(4, 44)) == null);"},
{"lineNum":" 2055","line":""},
{"lineNum":" 2056","line":"    try map.putNoClobber(5, 55);"},
{"lineNum":" 2057","line":"    try testing.expect((try map.fetchPut(5, 66)).?.value == 55);"},
{"lineNum":" 2058","line":"    try testing.expect((try map.fetchPut(5, 55)).?.value == 66);"},
{"lineNum":" 2059","line":""},
{"lineNum":" 2060","line":"    const gop1 = try map.getOrPut(5);"},
{"lineNum":" 2061","line":"    try testing.expect(gop1.found_existing == true);"},
{"lineNum":" 2062","line":"    try testing.expect(gop1.value_ptr.* == 55);"},
{"lineNum":" 2063","line":"    gop1.value_ptr.* = 77;"},
{"lineNum":" 2064","line":"    try testing.expect(map.getEntry(5).?.value_ptr.* == 77);"},
{"lineNum":" 2065","line":""},
{"lineNum":" 2066","line":"    const gop2 = try map.getOrPut(99);"},
{"lineNum":" 2067","line":"    try testing.expect(gop2.found_existing == false);"},
{"lineNum":" 2068","line":"    gop2.value_ptr.* = 42;"},
{"lineNum":" 2069","line":"    try testing.expect(map.getEntry(99).?.value_ptr.* == 42);"},
{"lineNum":" 2070","line":""},
{"lineNum":" 2071","line":"    const gop3 = try map.getOrPutValue(5, 5);"},
{"lineNum":" 2072","line":"    try testing.expect(gop3.value_ptr.* == 77);"},
{"lineNum":" 2073","line":""},
{"lineNum":" 2074","line":"    const gop4 = try map.getOrPutValue(100, 41);"},
{"lineNum":" 2075","line":"    try testing.expect(gop4.value_ptr.* == 41);"},
{"lineNum":" 2076","line":""},
{"lineNum":" 2077","line":"    try testing.expect(map.contains(2));"},
{"lineNum":" 2078","line":"    try testing.expect(map.getEntry(2).?.value_ptr.* == 22);"},
{"lineNum":" 2079","line":"    try testing.expect(map.get(2).? == 22);"},
{"lineNum":" 2080","line":""},
{"lineNum":" 2081","line":"    const rmv1 = map.fetchRemove(2);"},
{"lineNum":" 2082","line":"    try testing.expect(rmv1.?.key == 2);"},
{"lineNum":" 2083","line":"    try testing.expect(rmv1.?.value == 22);"},
{"lineNum":" 2084","line":"    try testing.expect(map.fetchRemove(2) == null);"},
{"lineNum":" 2085","line":"    try testing.expect(map.remove(2) == false);"},
{"lineNum":" 2086","line":"    try testing.expect(map.getEntry(2) == null);"},
{"lineNum":" 2087","line":"    try testing.expect(map.get(2) == null);"},
{"lineNum":" 2088","line":""},
{"lineNum":" 2089","line":"    try testing.expect(map.remove(3) == true);"},
{"lineNum":" 2090","line":"}"},
{"lineNum":" 2091","line":""},
{"lineNum":" 2092","line":"test \"std.hash_map getOrPutAdapted\" {"},
{"lineNum":" 2093","line":"    const AdaptedContext = struct {"},
{"lineNum":" 2094","line":"        fn eql(self: @This(), adapted_key: []const u8, test_key: u64) bool {"},
{"lineNum":" 2095","line":"            _ = self;"},
{"lineNum":" 2096","line":"            return std.fmt.parseInt(u64, adapted_key, 10) catch unreachable == test_key;"},
{"lineNum":" 2097","line":"        }"},
{"lineNum":" 2098","line":"        fn hash(self: @This(), adapted_key: []const u8) u64 {"},
{"lineNum":" 2099","line":"            _ = self;"},
{"lineNum":" 2100","line":"            const key = std.fmt.parseInt(u64, adapted_key, 10) catch unreachable;"},
{"lineNum":" 2101","line":"            return (AutoContext(u64){}).hash(key);"},
{"lineNum":" 2102","line":"        }"},
{"lineNum":" 2103","line":"    };"},
{"lineNum":" 2104","line":"    var map = AutoHashMap(u64, u64).init(testing.allocator);"},
{"lineNum":" 2105","line":"    defer map.deinit();"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"    const keys = [_][]const u8{"},
{"lineNum":" 2108","line":"        \"1231\","},
{"lineNum":" 2109","line":"        \"4564\","},
{"lineNum":" 2110","line":"        \"7894\","},
{"lineNum":" 2111","line":"        \"1132\","},
{"lineNum":" 2112","line":"        \"65235\","},
{"lineNum":" 2113","line":"        \"95462\","},
{"lineNum":" 2114","line":"        \"0112305\","},
{"lineNum":" 2115","line":"        \"00658\","},
{"lineNum":" 2116","line":"        \"0\","},
{"lineNum":" 2117","line":"        \"2\","},
{"lineNum":" 2118","line":"    };"},
{"lineNum":" 2119","line":""},
{"lineNum":" 2120","line":"    var real_keys: [keys.len]u64 = undefined;"},
{"lineNum":" 2121","line":""},
{"lineNum":" 2122","line":"    inline for (keys, 0..) |key_str, i| {"},
{"lineNum":" 2123","line":"        const result = try map.getOrPutAdapted(key_str, AdaptedContext{});"},
{"lineNum":" 2124","line":"        try testing.expect(!result.found_existing);"},
{"lineNum":" 2125","line":"        real_keys[i] = std.fmt.parseInt(u64, key_str, 10) catch unreachable;"},
{"lineNum":" 2126","line":"        result.key_ptr.* = real_keys[i];"},
{"lineNum":" 2127","line":"        result.value_ptr.* = i * 2;"},
{"lineNum":" 2128","line":"    }"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"    try testing.expectEqual(map.count(), keys.len);"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"    inline for (keys, 0..) |key_str, i| {"},
{"lineNum":" 2133","line":"        const result = map.getOrPutAssumeCapacityAdapted(key_str, AdaptedContext{});"},
{"lineNum":" 2134","line":"        try testing.expect(result.found_existing);"},
{"lineNum":" 2135","line":"        try testing.expectEqual(real_keys[i], result.key_ptr.*);"},
{"lineNum":" 2136","line":"        try testing.expectEqual(@as(u64, i) * 2, result.value_ptr.*);"},
{"lineNum":" 2137","line":"        try testing.expectEqual(real_keys[i], map.getKeyAdapted(key_str, AdaptedContext{}).?);"},
{"lineNum":" 2138","line":"    }"},
{"lineNum":" 2139","line":"}"},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":"test \"std.hash_map ensureUnusedCapacity\" {"},
{"lineNum":" 2142","line":"    var map = AutoHashMap(u64, u64).init(testing.allocator);"},
{"lineNum":" 2143","line":"    defer map.deinit();"},
{"lineNum":" 2144","line":""},
{"lineNum":" 2145","line":"    try map.ensureUnusedCapacity(32);"},
{"lineNum":" 2146","line":"    const capacity = map.capacity();"},
{"lineNum":" 2147","line":"    try map.ensureUnusedCapacity(32);"},
{"lineNum":" 2148","line":""},
{"lineNum":" 2149","line":"    // Repeated ensureUnusedCapacity() calls with no insertions between"},
{"lineNum":" 2150","line":"    // should not change the capacity."},
{"lineNum":" 2151","line":"    try testing.expectEqual(capacity, map.capacity());"},
{"lineNum":" 2152","line":"}"},
{"lineNum":" 2153","line":""},
{"lineNum":" 2154","line":"test \"std.hash_map removeByPtr\" {"},
{"lineNum":" 2155","line":"    var map = AutoHashMap(i32, u64).init(testing.allocator);"},
{"lineNum":" 2156","line":"    defer map.deinit();"},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"    var i: i32 = undefined;"},
{"lineNum":" 2159","line":""},
{"lineNum":" 2160","line":"    i = 0;"},
{"lineNum":" 2161","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 2162","line":"        try map.put(i, 0);"},
{"lineNum":" 2163","line":"    }"},
{"lineNum":" 2164","line":""},
{"lineNum":" 2165","line":"    try testing.expect(map.count() == 10);"},
{"lineNum":" 2166","line":""},
{"lineNum":" 2167","line":"    i = 0;"},
{"lineNum":" 2168","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 2169","line":"        const key_ptr = map.getKeyPtr(i);"},
{"lineNum":" 2170","line":"        try testing.expect(key_ptr != null);"},
{"lineNum":" 2171","line":""},
{"lineNum":" 2172","line":"        if (key_ptr) |ptr| {"},
{"lineNum":" 2173","line":"            map.removeByPtr(ptr);"},
{"lineNum":" 2174","line":"        }"},
{"lineNum":" 2175","line":"    }"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"    try testing.expect(map.count() == 0);"},
{"lineNum":" 2178","line":"}"},
{"lineNum":" 2179","line":""},
{"lineNum":" 2180","line":"test \"std.hash_map removeByPtr 0 sized key\" {"},
{"lineNum":" 2181","line":"    var map = AutoHashMap(u0, u64).init(testing.allocator);"},
{"lineNum":" 2182","line":"    defer map.deinit();"},
{"lineNum":" 2183","line":""},
{"lineNum":" 2184","line":"    try map.put(0, 0);"},
{"lineNum":" 2185","line":""},
{"lineNum":" 2186","line":"    try testing.expect(map.count() == 1);"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"    const key_ptr = map.getKeyPtr(0);"},
{"lineNum":" 2189","line":"    try testing.expect(key_ptr != null);"},
{"lineNum":" 2190","line":""},
{"lineNum":" 2191","line":"    if (key_ptr) |ptr| {"},
{"lineNum":" 2192","line":"        map.removeByPtr(ptr);"},
{"lineNum":" 2193","line":"    }"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"    try testing.expect(map.count() == 0);"},
{"lineNum":" 2196","line":"}"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"test \"std.hash_map repeat fetchRemove\" {"},
{"lineNum":" 2199","line":"    var map = AutoHashMapUnmanaged(u64, void){};"},
{"lineNum":" 2200","line":"    defer map.deinit(testing.allocator);"},
{"lineNum":" 2201","line":""},
{"lineNum":" 2202","line":"    try map.ensureTotalCapacity(testing.allocator, 4);"},
{"lineNum":" 2203","line":""},
{"lineNum":" 2204","line":"    map.putAssumeCapacity(0, {});"},
{"lineNum":" 2205","line":"    map.putAssumeCapacity(1, {});"},
{"lineNum":" 2206","line":"    map.putAssumeCapacity(2, {});"},
{"lineNum":" 2207","line":"    map.putAssumeCapacity(3, {});"},
{"lineNum":" 2208","line":""},
{"lineNum":" 2209","line":"    // fetchRemove() should make slots available."},
{"lineNum":" 2210","line":"    var i: usize = 0;"},
{"lineNum":" 2211","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 2212","line":"        try testing.expect(map.fetchRemove(3) != null);"},
{"lineNum":" 2213","line":"        map.putAssumeCapacity(3, {});"},
{"lineNum":" 2214","line":"    }"},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"    try testing.expect(map.get(0) != null);"},
{"lineNum":" 2217","line":"    try testing.expect(map.get(1) != null);"},
{"lineNum":" 2218","line":"    try testing.expect(map.get(2) != null);"},
{"lineNum":" 2219","line":"    try testing.expect(map.get(3) != null);"},
{"lineNum":" 2220","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 276, "covered" : 256,};
var merged_data = [];
