var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const root = @import(\"root\");"},
{"lineNum":"    4","line":"const os = std.os;"},
{"lineNum":"    5","line":"const mem = std.mem;"},
{"lineNum":"    6","line":"const base64 = std.base64;"},
{"lineNum":"    7","line":"const crypto = std.crypto;"},
{"lineNum":"    8","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    9","line":"const assert = std.debug.assert;"},
{"lineNum":"   10","line":"const math = std.math;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"const is_darwin = builtin.os.tag.isDarwin();"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"pub const has_executable_bit = switch (builtin.os.tag) {"},
{"lineNum":"   15","line":"    .windows, .wasi => false,"},
{"lineNum":"   16","line":"    else => true,"},
{"lineNum":"   17","line":"};"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"pub const path = @import(\"fs/path.zig\");"},
{"lineNum":"   20","line":"pub const File = @import(\"fs/file.zig\").File;"},
{"lineNum":"   21","line":"pub const wasi = @import(\"fs/wasi.zig\");"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"// TODO audit these APIs with respect to Dir and absolute paths"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"pub const realpath = os.realpath;"},
{"lineNum":"   26","line":"pub const realpathZ = os.realpathZ;"},
{"lineNum":"   27","line":"pub const realpathW = os.realpathW;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"pub const getAppDataDir = @import(\"fs/get_app_data_dir.zig\").getAppDataDir;"},
{"lineNum":"   30","line":"pub const GetAppDataDirError = @import(\"fs/get_app_data_dir.zig\").GetAppDataDirError;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"pub const Watch = @import(\"fs/watch.zig\").Watch;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"/// This represents the maximum size of a UTF-8 encoded file path that the"},
{"lineNum":"   35","line":"/// operating system will accept. Paths, including those returned from file"},
{"lineNum":"   36","line":"/// system operations, may be longer than this length, but such paths cannot"},
{"lineNum":"   37","line":"/// be successfully passed back in other file system operations. However,"},
{"lineNum":"   38","line":"/// all path components returned by file system operations are assumed to"},
{"lineNum":"   39","line":"/// fit into a UTF-8 encoded array of this length."},
{"lineNum":"   40","line":"/// The byte count includes room for a null sentinel byte."},
{"lineNum":"   41","line":"pub const MAX_PATH_BYTES = switch (builtin.os.tag) {"},
{"lineNum":"   42","line":"    .linux, .macos, .ios, .freebsd, .openbsd, .netbsd, .dragonfly, .haiku, .solaris, .plan9 => os.PATH_MAX,"},
{"lineNum":"   43","line":"    // Each UTF-16LE character may be expanded to 3 UTF-8 bytes."},
{"lineNum":"   44","line":"    // If it would require 4 UTF-8 bytes, then there would be a surrogate"},
{"lineNum":"   45","line":"    // pair in the UTF-16LE, and we (over)account 3 bytes for it that way."},
{"lineNum":"   46","line":"    // +1 for the null byte at the end, which can be encoded in 1 byte."},
{"lineNum":"   47","line":"    .windows => os.windows.PATH_MAX_WIDE * 3 + 1,"},
{"lineNum":"   48","line":"    // TODO work out what a reasonable value we should use here"},
{"lineNum":"   49","line":"    .wasi => 4096,"},
{"lineNum":"   50","line":"    else => if (@hasDecl(root, \"os\") and @hasDecl(root.os, \"PATH_MAX\"))"},
{"lineNum":"   51","line":"        root.os.PATH_MAX"},
{"lineNum":"   52","line":"    else"},
{"lineNum":"   53","line":"        @compileError(\"PATH_MAX not implemented for \" ++ @tagName(builtin.os.tag)),"},
{"lineNum":"   54","line":"};"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"/// This represents the maximum size of a UTF-8 encoded file name component that"},
{"lineNum":"   57","line":"/// the platform\'s common file systems support. File name components returned by file system"},
{"lineNum":"   58","line":"/// operations are likely to fit into a UTF-8 encoded array of this length, but"},
{"lineNum":"   59","line":"/// (depending on the platform) this assumption may not hold for every configuration."},
{"lineNum":"   60","line":"/// The byte count does not include a null sentinel byte."},
{"lineNum":"   61","line":"pub const MAX_NAME_BYTES = switch (builtin.os.tag) {"},
{"lineNum":"   62","line":"    .linux, .macos, .ios, .freebsd, .openbsd, .netbsd, .dragonfly => os.NAME_MAX,"},
{"lineNum":"   63","line":"    // Haiku\'s NAME_MAX includes the null terminator, so subtract one."},
{"lineNum":"   64","line":"    .haiku => os.NAME_MAX - 1,"},
{"lineNum":"   65","line":"    .solaris => os.system.MAXNAMLEN,"},
{"lineNum":"   66","line":"    // Each UTF-16LE character may be expanded to 3 UTF-8 bytes."},
{"lineNum":"   67","line":"    // If it would require 4 UTF-8 bytes, then there would be a surrogate"},
{"lineNum":"   68","line":"    // pair in the UTF-16LE, and we (over)account 3 bytes for it that way."},
{"lineNum":"   69","line":"    .windows => os.windows.NAME_MAX * 3,"},
{"lineNum":"   70","line":"    // For WASI, the MAX_NAME will depend on the host OS, so it needs to be"},
{"lineNum":"   71","line":"    // as large as the largest MAX_NAME_BYTES (Windows) in order to work on any host OS."},
{"lineNum":"   72","line":"    // TODO determine if this is a reasonable approach"},
{"lineNum":"   73","line":"    .wasi => os.windows.NAME_MAX * 3,"},
{"lineNum":"   74","line":"    else => if (@hasDecl(root, \"os\") and @hasDecl(root.os, \"NAME_MAX\"))"},
{"lineNum":"   75","line":"        root.os.NAME_MAX"},
{"lineNum":"   76","line":"    else"},
{"lineNum":"   77","line":"        @compileError(\"NAME_MAX not implemented for \" ++ @tagName(builtin.os.tag)),"},
{"lineNum":"   78","line":"};"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"pub const base64_alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".*;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"/// Base64 encoder, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem."},
{"lineNum":"   83","line":"pub const base64_encoder = base64.Base64Encoder.init(base64_alphabet, null);"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"/// Base64 decoder, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem."},
{"lineNum":"   86","line":"pub const base64_decoder = base64.Base64Decoder.init(base64_alphabet, null);"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"/// Whether or not async file system syscalls need a dedicated thread because the operating"},
{"lineNum":"   89","line":"/// system does not support non-blocking I/O on the file system."},
{"lineNum":"   90","line":"pub const need_async_thread = std.io.is_async and switch (builtin.os.tag) {"},
{"lineNum":"   91","line":"    .windows, .other => false,"},
{"lineNum":"   92","line":"    else => true,"},
{"lineNum":"   93","line":"};"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"/// TODO remove the allocator requirement from this API"},
{"lineNum":"   96","line":"pub fn atomicSymLink(allocator: Allocator, existing_path: []const u8, new_path: []const u8) !void {"},
{"lineNum":"   97","line":"    if (cwd().symLink(existing_path, new_path, .{})) {"},
{"lineNum":"   98","line":"        return;"},
{"lineNum":"   99","line":"    } else |err| switch (err) {"},
{"lineNum":"  100","line":"        error.PathAlreadyExists => {},"},
{"lineNum":"  101","line":"        else => return err, // TODO zig should know this set does not include PathAlreadyExists"},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    const dirname = path.dirname(new_path) orelse \".\";"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    var rand_buf: [AtomicFile.RANDOM_BYTES]u8 = undefined;"},
{"lineNum":"  107","line":"    const tmp_path = try allocator.alloc(u8, dirname.len + 1 + base64_encoder.calcSize(rand_buf.len));"},
{"lineNum":"  108","line":"    defer allocator.free(tmp_path);"},
{"lineNum":"  109","line":"    @memcpy(tmp_path[0..dirname.len], dirname);"},
{"lineNum":"  110","line":"    tmp_path[dirname.len] = path.sep;"},
{"lineNum":"  111","line":"    while (true) {"},
{"lineNum":"  112","line":"        crypto.random.bytes(rand_buf[0..]);"},
{"lineNum":"  113","line":"        _ = base64_encoder.encode(tmp_path[dirname.len + 1 ..], &rand_buf);"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        if (cwd().symLink(existing_path, tmp_path, .{})) {"},
{"lineNum":"  116","line":"            return cwd().rename(tmp_path, new_path);"},
{"lineNum":"  117","line":"        } else |err| switch (err) {"},
{"lineNum":"  118","line":"            error.PathAlreadyExists => continue,"},
{"lineNum":"  119","line":"            else => return err, // TODO zig should know this set does not include PathAlreadyExists"},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":"}"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"pub const PrevStatus = enum {"},
{"lineNum":"  125","line":"    stale,"},
{"lineNum":"  126","line":"    fresh,"},
{"lineNum":"  127","line":"};"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"pub const CopyFileOptions = struct {"},
{"lineNum":"  130","line":"    /// When this is `null` the mode is copied from the source file."},
{"lineNum":"  131","line":"    override_mode: ?File.Mode = null,"},
{"lineNum":"  132","line":"};"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"/// Same as `Dir.updateFile`, except asserts that both `source_path` and `dest_path`"},
{"lineNum":"  135","line":"/// are absolute. See `Dir.updateFile` for a function that operates on both"},
{"lineNum":"  136","line":"/// absolute and relative paths."},
{"lineNum":"  137","line":"pub fn updateFileAbsolute("},
{"lineNum":"  138","line":"    source_path: []const u8,"},
{"lineNum":"  139","line":"    dest_path: []const u8,"},
{"lineNum":"  140","line":"    args: CopyFileOptions,"},
{"lineNum":"  141","line":") !PrevStatus {"},
{"lineNum":"  142","line":"    assert(path.isAbsolute(source_path));"},
{"lineNum":"  143","line":"    assert(path.isAbsolute(dest_path));"},
{"lineNum":"  144","line":"    const my_cwd = cwd();"},
{"lineNum":"  145","line":"    return Dir.updateFile(my_cwd, source_path, my_cwd, dest_path, args);"},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"/// Same as `Dir.copyFile`, except asserts that both `source_path` and `dest_path`"},
{"lineNum":"  149","line":"/// are absolute. See `Dir.copyFile` for a function that operates on both"},
{"lineNum":"  150","line":"/// absolute and relative paths."},
{"lineNum":"  151","line":"pub fn copyFileAbsolute(source_path: []const u8, dest_path: []const u8, args: CopyFileOptions) !void {"},
{"lineNum":"  152","line":"    assert(path.isAbsolute(source_path));"},
{"lineNum":"  153","line":"    assert(path.isAbsolute(dest_path));"},
{"lineNum":"  154","line":"    const my_cwd = cwd();"},
{"lineNum":"  155","line":"    return Dir.copyFile(my_cwd, source_path, my_cwd, dest_path, args);"},
{"lineNum":"  156","line":"}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"pub const AtomicFile = struct {"},
{"lineNum":"  159","line":"    file: File,"},
{"lineNum":"  160","line":"    // TODO either replace this with rand_buf or use []u16 on Windows"},
{"lineNum":"  161","line":"    tmp_path_buf: [TMP_PATH_LEN:0]u8,"},
{"lineNum":"  162","line":"    dest_basename: []const u8,"},
{"lineNum":"  163","line":"    file_open: bool,"},
{"lineNum":"  164","line":"    file_exists: bool,"},
{"lineNum":"  165","line":"    close_dir_on_deinit: bool,"},
{"lineNum":"  166","line":"    dir: Dir,"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    const InitError = File.OpenError;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    const RANDOM_BYTES = 12;"},
{"lineNum":"  171","line":"    const TMP_PATH_LEN = base64_encoder.calcSize(RANDOM_BYTES);"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    /// Note that the `Dir.atomicFile` API may be more handy than this lower-level function."},
{"lineNum":"  174","line":"    pub fn init("},
{"lineNum":"  175","line":"        dest_basename: []const u8,"},
{"lineNum":"  176","line":"        mode: File.Mode,"},
{"lineNum":"  177","line":"        dir: Dir,"},
{"lineNum":"  178","line":"        close_dir_on_deinit: bool,"},
{"lineNum":"  179","line":"    ) InitError!AtomicFile {"},
{"lineNum":"  180","line":"        var rand_buf: [RANDOM_BYTES]u8 = undefined;"},
{"lineNum":"  181","line":"        var tmp_path_buf: [TMP_PATH_LEN:0]u8 = undefined;"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        while (true) {"},
{"lineNum":"  184","line":"            crypto.random.bytes(rand_buf[0..]);"},
{"lineNum":"  185","line":"            const tmp_path = base64_encoder.encode(&tmp_path_buf, &rand_buf);"},
{"lineNum":"  186","line":"            tmp_path_buf[tmp_path.len] = 0;"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"            const file = dir.createFile("},
{"lineNum":"  189","line":"                tmp_path,"},
{"lineNum":"  190","line":"                .{ .mode = mode, .exclusive = true },"},
{"lineNum":"  191","line":"            ) catch |err| switch (err) {"},
{"lineNum":"  192","line":"                error.PathAlreadyExists => continue,"},
{"lineNum":"  193","line":"                else => |e| return e,"},
{"lineNum":"  194","line":"            };"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"            return AtomicFile{"},
{"lineNum":"  197","line":"                .file = file,"},
{"lineNum":"  198","line":"                .tmp_path_buf = tmp_path_buf,"},
{"lineNum":"  199","line":"                .dest_basename = dest_basename,"},
{"lineNum":"  200","line":"                .file_open = true,"},
{"lineNum":"  201","line":"                .file_exists = true,"},
{"lineNum":"  202","line":"                .close_dir_on_deinit = close_dir_on_deinit,"},
{"lineNum":"  203","line":"                .dir = dir,"},
{"lineNum":"  204","line":"            };"},
{"lineNum":"  205","line":"        }"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    /// always call deinit, even after successful finish()"},
{"lineNum":"  209","line":"    pub fn deinit(self: *AtomicFile) void {"},
{"lineNum":"  210","line":"        if (self.file_open) {"},
{"lineNum":"  211","line":"            self.file.close();"},
{"lineNum":"  212","line":"            self.file_open = false;"},
{"lineNum":"  213","line":"        }"},
{"lineNum":"  214","line":"        if (self.file_exists) {"},
{"lineNum":"  215","line":"            self.dir.deleteFile(&self.tmp_path_buf) catch {};"},
{"lineNum":"  216","line":"            self.file_exists = false;"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":"        if (self.close_dir_on_deinit) {"},
{"lineNum":"  219","line":"            self.dir.close();"},
{"lineNum":"  220","line":"        }"},
{"lineNum":"  221","line":"        self.* = undefined;"},
{"lineNum":"  222","line":"    }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    pub const FinishError = std.os.RenameError;"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    pub fn finish(self: *AtomicFile) FinishError!void {"},
{"lineNum":"  227","line":"        assert(self.file_exists);"},
{"lineNum":"  228","line":"        if (self.file_open) {"},
{"lineNum":"  229","line":"            self.file.close();"},
{"lineNum":"  230","line":"            self.file_open = false;"},
{"lineNum":"  231","line":"        }"},
{"lineNum":"  232","line":"        try os.renameat(self.dir.fd, self.tmp_path_buf[0..], self.dir.fd, self.dest_basename);"},
{"lineNum":"  233","line":"        self.file_exists = false;"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"};"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"const default_new_dir_mode = 0o755;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"/// Create a new directory, based on an absolute path."},
{"lineNum":"  240","line":"/// Asserts that the path is absolute. See `Dir.makeDir` for a function that operates"},
{"lineNum":"  241","line":"/// on both absolute and relative paths."},
{"lineNum":"  242","line":"pub fn makeDirAbsolute(absolute_path: []const u8) !void {"},
{"lineNum":"  243","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":"  244","line":"    return os.mkdir(absolute_path, default_new_dir_mode);"},
{"lineNum":"  245","line":"}"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"/// Same as `makeDirAbsolute` except the parameter is a null-terminated UTF-8-encoded string."},
{"lineNum":"  248","line":"pub fn makeDirAbsoluteZ(absolute_path_z: [*:0]const u8) !void {"},
{"lineNum":"  249","line":"    assert(path.isAbsoluteZ(absolute_path_z));"},
{"lineNum":"  250","line":"    return os.mkdirZ(absolute_path_z, default_new_dir_mode);"},
{"lineNum":"  251","line":"}"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"/// Same as `makeDirAbsolute` except the parameter is a null-terminated WTF-16-encoded string."},
{"lineNum":"  254","line":"pub fn makeDirAbsoluteW(absolute_path_w: [*:0]const u16) !void {"},
{"lineNum":"  255","line":"    assert(path.isAbsoluteWindowsW(absolute_path_w));"},
{"lineNum":"  256","line":"    return os.mkdirW(absolute_path_w, default_new_dir_mode);"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"/// Same as `Dir.deleteDir` except the path is absolute."},
{"lineNum":"  260","line":"pub fn deleteDirAbsolute(dir_path: []const u8) !void {"},
{"lineNum":"  261","line":"    assert(path.isAbsolute(dir_path));"},
{"lineNum":"  262","line":"    return os.rmdir(dir_path);"},
{"lineNum":"  263","line":"}"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"/// Same as `deleteDirAbsolute` except the path parameter is null-terminated."},
{"lineNum":"  266","line":"pub fn deleteDirAbsoluteZ(dir_path: [*:0]const u8) !void {"},
{"lineNum":"  267","line":"    assert(path.isAbsoluteZ(dir_path));"},
{"lineNum":"  268","line":"    return os.rmdirZ(dir_path);"},
{"lineNum":"  269","line":"}"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"/// Same as `deleteDirAbsolute` except the path parameter is WTF-16 and target OS is assumed Windows."},
{"lineNum":"  272","line":"pub fn deleteDirAbsoluteW(dir_path: [*:0]const u16) !void {"},
{"lineNum":"  273","line":"    assert(path.isAbsoluteWindowsW(dir_path));"},
{"lineNum":"  274","line":"    return os.rmdirW(dir_path);"},
{"lineNum":"  275","line":"}"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"/// Same as `Dir.rename` except the paths are absolute."},
{"lineNum":"  278","line":"pub fn renameAbsolute(old_path: []const u8, new_path: []const u8) !void {"},
{"lineNum":"  279","line":"    assert(path.isAbsolute(old_path));"},
{"lineNum":"  280","line":"    assert(path.isAbsolute(new_path));"},
{"lineNum":"  281","line":"    return os.rename(old_path, new_path);"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"/// Same as `renameAbsolute` except the path parameters are null-terminated."},
{"lineNum":"  285","line":"pub fn renameAbsoluteZ(old_path: [*:0]const u8, new_path: [*:0]const u8) !void {"},
{"lineNum":"  286","line":"    assert(path.isAbsoluteZ(old_path));"},
{"lineNum":"  287","line":"    assert(path.isAbsoluteZ(new_path));"},
{"lineNum":"  288","line":"    return os.renameZ(old_path, new_path);"},
{"lineNum":"  289","line":"}"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"/// Same as `renameAbsolute` except the path parameters are WTF-16 and target OS is assumed Windows."},
{"lineNum":"  292","line":"pub fn renameAbsoluteW(old_path: [*:0]const u16, new_path: [*:0]const u16) !void {"},
{"lineNum":"  293","line":"    assert(path.isAbsoluteWindowsW(old_path));"},
{"lineNum":"  294","line":"    assert(path.isAbsoluteWindowsW(new_path));"},
{"lineNum":"  295","line":"    return os.renameW(old_path, new_path);"},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"/// Same as `Dir.rename`, except `new_sub_path` is relative to `new_dir`"},
{"lineNum":"  299","line":"pub fn rename(old_dir: Dir, old_sub_path: []const u8, new_dir: Dir, new_sub_path: []const u8) !void {"},
{"lineNum":"  300","line":"    return os.renameat(old_dir.fd, old_sub_path, new_dir.fd, new_sub_path);"},
{"lineNum":"  301","line":"}"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"/// Same as `rename` except the parameters are null-terminated."},
{"lineNum":"  304","line":"pub fn renameZ(old_dir: Dir, old_sub_path_z: [*:0]const u8, new_dir: Dir, new_sub_path_z: [*:0]const u8) !void {"},
{"lineNum":"  305","line":"    return os.renameatZ(old_dir.fd, old_sub_path_z, new_dir.fd, new_sub_path_z);"},
{"lineNum":"  306","line":"}"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"/// Same as `rename` except the parameters are UTF16LE, NT prefixed."},
{"lineNum":"  309","line":"/// This function is Windows-only."},
{"lineNum":"  310","line":"pub fn renameW(old_dir: Dir, old_sub_path_w: []const u16, new_dir: Dir, new_sub_path_w: []const u16) !void {"},
{"lineNum":"  311","line":"    return os.renameatW(old_dir.fd, old_sub_path_w, new_dir.fd, new_sub_path_w);"},
{"lineNum":"  312","line":"}"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"/// A directory that can be iterated. It is *NOT* legal to initialize this with a regular `Dir`"},
{"lineNum":"  315","line":"/// that has been opened without iteration permission."},
{"lineNum":"  316","line":"pub const IterableDir = struct {"},
{"lineNum":"  317","line":"    dir: Dir,"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    pub const Entry = struct {"},
{"lineNum":"  320","line":"        name: []const u8,"},
{"lineNum":"  321","line":"        kind: Kind,"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"        pub const Kind = File.Kind;"},
{"lineNum":"  324","line":"    };"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    const IteratorError = error{ AccessDenied, SystemResources } || os.UnexpectedError;"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    pub const Iterator = switch (builtin.os.tag) {"},
{"lineNum":"  329","line":"        .macos, .ios, .freebsd, .netbsd, .dragonfly, .openbsd, .solaris => struct {"},
{"lineNum":"  330","line":"            dir: Dir,"},
{"lineNum":"  331","line":"            seek: i64,"},
{"lineNum":"  332","line":"            buf: [1024]u8, // TODO align(@alignOf(os.system.dirent)),"},
{"lineNum":"  333","line":"            index: usize,"},
{"lineNum":"  334","line":"            end_index: usize,"},
{"lineNum":"  335","line":"            first_iter: bool,"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"            const Self = @This();"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"            pub const Error = IteratorError;"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"            /// Memory such as file names referenced in this returned entry becomes invalid"},
{"lineNum":"  342","line":"            /// with subsequent calls to `next`, as well as when this `Dir` is deinitialized."},
{"lineNum":"  343","line":"            pub fn next(self: *Self) Error!?Entry {"},
{"lineNum":"  344","line":"                switch (builtin.os.tag) {"},
{"lineNum":"  345","line":"                    .macos, .ios => return self.nextDarwin(),"},
{"lineNum":"  346","line":"                    .freebsd, .netbsd, .dragonfly, .openbsd => return self.nextBsd(),"},
{"lineNum":"  347","line":"                    .solaris => return self.nextSolaris(),"},
{"lineNum":"  348","line":"                    else => @compileError(\"unimplemented\"),"},
{"lineNum":"  349","line":"                }"},
{"lineNum":"  350","line":"            }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"            fn nextDarwin(self: *Self) !?Entry {"},
{"lineNum":"  353","line":"                start_over: while (true) {"},
{"lineNum":"  354","line":"                    if (self.index >= self.end_index) {"},
{"lineNum":"  355","line":"                        if (self.first_iter) {"},
{"lineNum":"  356","line":"                            std.os.lseek_SET(self.dir.fd, 0) catch unreachable; // EBADF here likely means that the Dir was not opened with iteration permissions"},
{"lineNum":"  357","line":"                            self.first_iter = false;"},
{"lineNum":"  358","line":"                        }"},
{"lineNum":"  359","line":"                        const rc = os.system.__getdirentries64("},
{"lineNum":"  360","line":"                            self.dir.fd,"},
{"lineNum":"  361","line":"                            &self.buf,"},
{"lineNum":"  362","line":"                            self.buf.len,"},
{"lineNum":"  363","line":"                            &self.seek,"},
{"lineNum":"  364","line":"                        );"},
{"lineNum":"  365","line":"                        if (rc == 0) return null;"},
{"lineNum":"  366","line":"                        if (rc < 0) {"},
{"lineNum":"  367","line":"                            switch (os.errno(rc)) {"},
{"lineNum":"  368","line":"                                .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  369","line":"                                .FAULT => unreachable,"},
{"lineNum":"  370","line":"                                .NOTDIR => unreachable,"},
{"lineNum":"  371","line":"                                .INVAL => unreachable,"},
{"lineNum":"  372","line":"                                else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  373","line":"                            }"},
{"lineNum":"  374","line":"                        }"},
{"lineNum":"  375","line":"                        self.index = 0;"},
{"lineNum":"  376","line":"                        self.end_index = @as(usize, @intCast(rc));"},
{"lineNum":"  377","line":"                    }"},
{"lineNum":"  378","line":"                    const darwin_entry = @as(*align(1) os.system.dirent, @ptrCast(&self.buf[self.index]));"},
{"lineNum":"  379","line":"                    const next_index = self.index + darwin_entry.reclen();"},
{"lineNum":"  380","line":"                    self.index = next_index;"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"                    const name = @as([*]u8, @ptrCast(&darwin_entry.d_name))[0..darwin_entry.d_namlen];"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"                    if (mem.eql(u8, name, \".\") or mem.eql(u8, name, \"..\") or (darwin_entry.d_ino == 0)) {"},
{"lineNum":"  385","line":"                        continue :start_over;"},
{"lineNum":"  386","line":"                    }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"                    const entry_kind: Entry.Kind = switch (darwin_entry.d_type) {"},
{"lineNum":"  389","line":"                        os.DT.BLK => .block_device,"},
{"lineNum":"  390","line":"                        os.DT.CHR => .character_device,"},
{"lineNum":"  391","line":"                        os.DT.DIR => .directory,"},
{"lineNum":"  392","line":"                        os.DT.FIFO => .named_pipe,"},
{"lineNum":"  393","line":"                        os.DT.LNK => .sym_link,"},
{"lineNum":"  394","line":"                        os.DT.REG => .file,"},
{"lineNum":"  395","line":"                        os.DT.SOCK => .unix_domain_socket,"},
{"lineNum":"  396","line":"                        os.DT.WHT => .whiteout,"},
{"lineNum":"  397","line":"                        else => .unknown,"},
{"lineNum":"  398","line":"                    };"},
{"lineNum":"  399","line":"                    return Entry{"},
{"lineNum":"  400","line":"                        .name = name,"},
{"lineNum":"  401","line":"                        .kind = entry_kind,"},
{"lineNum":"  402","line":"                    };"},
{"lineNum":"  403","line":"                }"},
{"lineNum":"  404","line":"            }"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            fn nextSolaris(self: *Self) !?Entry {"},
{"lineNum":"  407","line":"                start_over: while (true) {"},
{"lineNum":"  408","line":"                    if (self.index >= self.end_index) {"},
{"lineNum":"  409","line":"                        if (self.first_iter) {"},
{"lineNum":"  410","line":"                            std.os.lseek_SET(self.dir.fd, 0) catch unreachable; // EBADF here likely means that the Dir was not opened with iteration permissions"},
{"lineNum":"  411","line":"                            self.first_iter = false;"},
{"lineNum":"  412","line":"                        }"},
{"lineNum":"  413","line":"                        const rc = os.system.getdents(self.dir.fd, &self.buf, self.buf.len);"},
{"lineNum":"  414","line":"                        switch (os.errno(rc)) {"},
{"lineNum":"  415","line":"                            .SUCCESS => {},"},
{"lineNum":"  416","line":"                            .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  417","line":"                            .FAULT => unreachable,"},
{"lineNum":"  418","line":"                            .NOTDIR => unreachable,"},
{"lineNum":"  419","line":"                            .INVAL => unreachable,"},
{"lineNum":"  420","line":"                            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  421","line":"                        }"},
{"lineNum":"  422","line":"                        if (rc == 0) return null;"},
{"lineNum":"  423","line":"                        self.index = 0;"},
{"lineNum":"  424","line":"                        self.end_index = @as(usize, @intCast(rc));"},
{"lineNum":"  425","line":"                    }"},
{"lineNum":"  426","line":"                    const entry = @as(*align(1) os.system.dirent, @ptrCast(&self.buf[self.index]));"},
{"lineNum":"  427","line":"                    const next_index = self.index + entry.reclen();"},
{"lineNum":"  428","line":"                    self.index = next_index;"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"                    const name = mem.sliceTo(@as([*:0]u8, @ptrCast(&entry.d_name)), 0);"},
{"lineNum":"  431","line":"                    if (mem.eql(u8, name, \".\") or mem.eql(u8, name, \"..\"))"},
{"lineNum":"  432","line":"                        continue :start_over;"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"                    // Solaris dirent doesn\'t expose d_type, so we have to call stat to get it."},
{"lineNum":"  435","line":"                    const stat_info = os.fstatat("},
{"lineNum":"  436","line":"                        self.dir.fd,"},
{"lineNum":"  437","line":"                        name,"},
{"lineNum":"  438","line":"                        os.AT.SYMLINK_NOFOLLOW,"},
{"lineNum":"  439","line":"                    ) catch |err| switch (err) {"},
{"lineNum":"  440","line":"                        error.NameTooLong => unreachable,"},
{"lineNum":"  441","line":"                        error.SymLinkLoop => unreachable,"},
{"lineNum":"  442","line":"                        error.FileNotFound => unreachable, // lost the race"},
{"lineNum":"  443","line":"                        else => |e| return e,"},
{"lineNum":"  444","line":"                    };"},
{"lineNum":"  445","line":"                    const entry_kind: Entry.Kind = switch (stat_info.mode & os.S.IFMT) {"},
{"lineNum":"  446","line":"                        os.S.IFIFO => .named_pipe,"},
{"lineNum":"  447","line":"                        os.S.IFCHR => .character_device,"},
{"lineNum":"  448","line":"                        os.S.IFDIR => .directory,"},
{"lineNum":"  449","line":"                        os.S.IFBLK => .block_device,"},
{"lineNum":"  450","line":"                        os.S.IFREG => .file,"},
{"lineNum":"  451","line":"                        os.S.IFLNK => .sym_link,"},
{"lineNum":"  452","line":"                        os.S.IFSOCK => .unix_domain_socket,"},
{"lineNum":"  453","line":"                        os.S.IFDOOR => .door,"},
{"lineNum":"  454","line":"                        os.S.IFPORT => .event_port,"},
{"lineNum":"  455","line":"                        else => .unknown,"},
{"lineNum":"  456","line":"                    };"},
{"lineNum":"  457","line":"                    return Entry{"},
{"lineNum":"  458","line":"                        .name = name,"},
{"lineNum":"  459","line":"                        .kind = entry_kind,"},
{"lineNum":"  460","line":"                    };"},
{"lineNum":"  461","line":"                }"},
{"lineNum":"  462","line":"            }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"            fn nextBsd(self: *Self) !?Entry {"},
{"lineNum":"  465","line":"                start_over: while (true) {"},
{"lineNum":"  466","line":"                    if (self.index >= self.end_index) {"},
{"lineNum":"  467","line":"                        if (self.first_iter) {"},
{"lineNum":"  468","line":"                            std.os.lseek_SET(self.dir.fd, 0) catch unreachable; // EBADF here likely means that the Dir was not opened with iteration permissions"},
{"lineNum":"  469","line":"                            self.first_iter = false;"},
{"lineNum":"  470","line":"                        }"},
{"lineNum":"  471","line":"                        const rc = if (builtin.os.tag == .netbsd)"},
{"lineNum":"  472","line":"                            os.system.__getdents30(self.dir.fd, &self.buf, self.buf.len)"},
{"lineNum":"  473","line":"                        else"},
{"lineNum":"  474","line":"                            os.system.getdents(self.dir.fd, &self.buf, self.buf.len);"},
{"lineNum":"  475","line":"                        switch (os.errno(rc)) {"},
{"lineNum":"  476","line":"                            .SUCCESS => {},"},
{"lineNum":"  477","line":"                            .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  478","line":"                            .FAULT => unreachable,"},
{"lineNum":"  479","line":"                            .NOTDIR => unreachable,"},
{"lineNum":"  480","line":"                            .INVAL => unreachable,"},
{"lineNum":"  481","line":"                            // Introduced in freebsd 13.2: directory unlinked but still open."},
{"lineNum":"  482","line":"                            // To be consistent, iteration ends if the directory being iterated is deleted during iteration."},
{"lineNum":"  483","line":"                            .NOENT => return null,"},
{"lineNum":"  484","line":"                            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  485","line":"                        }"},
{"lineNum":"  486","line":"                        if (rc == 0) return null;"},
{"lineNum":"  487","line":"                        self.index = 0;"},
{"lineNum":"  488","line":"                        self.end_index = @as(usize, @intCast(rc));"},
{"lineNum":"  489","line":"                    }"},
{"lineNum":"  490","line":"                    const bsd_entry = @as(*align(1) os.system.dirent, @ptrCast(&self.buf[self.index]));"},
{"lineNum":"  491","line":"                    const next_index = self.index + bsd_entry.reclen();"},
{"lineNum":"  492","line":"                    self.index = next_index;"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"                    const name = @as([*]u8, @ptrCast(&bsd_entry.d_name))[0..bsd_entry.d_namlen];"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"                    const skip_zero_fileno = switch (builtin.os.tag) {"},
{"lineNum":"  497","line":"                        // d_fileno=0 is used to mark invalid entries or deleted files."},
{"lineNum":"  498","line":"                        .openbsd, .netbsd => true,"},
{"lineNum":"  499","line":"                        else => false,"},
{"lineNum":"  500","line":"                    };"},
{"lineNum":"  501","line":"                    if (mem.eql(u8, name, \".\") or mem.eql(u8, name, \"..\") or"},
{"lineNum":"  502","line":"                        (skip_zero_fileno and bsd_entry.d_fileno == 0))"},
{"lineNum":"  503","line":"                    {"},
{"lineNum":"  504","line":"                        continue :start_over;"},
{"lineNum":"  505","line":"                    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"                    const entry_kind: Entry.Kind = switch (bsd_entry.d_type) {"},
{"lineNum":"  508","line":"                        os.DT.BLK => .block_device,"},
{"lineNum":"  509","line":"                        os.DT.CHR => .character_device,"},
{"lineNum":"  510","line":"                        os.DT.DIR => .directory,"},
{"lineNum":"  511","line":"                        os.DT.FIFO => .named_pipe,"},
{"lineNum":"  512","line":"                        os.DT.LNK => .sym_link,"},
{"lineNum":"  513","line":"                        os.DT.REG => .file,"},
{"lineNum":"  514","line":"                        os.DT.SOCK => .unix_domain_socket,"},
{"lineNum":"  515","line":"                        os.DT.WHT => .whiteout,"},
{"lineNum":"  516","line":"                        else => .unknown,"},
{"lineNum":"  517","line":"                    };"},
{"lineNum":"  518","line":"                    return Entry{"},
{"lineNum":"  519","line":"                        .name = name,"},
{"lineNum":"  520","line":"                        .kind = entry_kind,"},
{"lineNum":"  521","line":"                    };"},
{"lineNum":"  522","line":"                }"},
{"lineNum":"  523","line":"            }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"            pub fn reset(self: *Self) void {"},
{"lineNum":"  526","line":"                self.index = 0;"},
{"lineNum":"  527","line":"                self.end_index = 0;"},
{"lineNum":"  528","line":"                self.first_iter = true;"},
{"lineNum":"  529","line":"            }"},
{"lineNum":"  530","line":"        },"},
{"lineNum":"  531","line":"        .haiku => struct {"},
{"lineNum":"  532","line":"            dir: Dir,"},
{"lineNum":"  533","line":"            buf: [1024]u8, // TODO align(@alignOf(os.dirent64)),"},
{"lineNum":"  534","line":"            index: usize,"},
{"lineNum":"  535","line":"            end_index: usize,"},
{"lineNum":"  536","line":"            first_iter: bool,"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"            const Self = @This();"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"            pub const Error = IteratorError;"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"            /// Memory such as file names referenced in this returned entry becomes invalid"},
{"lineNum":"  543","line":"            /// with subsequent calls to `next`, as well as when this `Dir` is deinitialized."},
{"lineNum":"  544","line":"            pub fn next(self: *Self) Error!?Entry {"},
{"lineNum":"  545","line":"                start_over: while (true) {"},
{"lineNum":"  546","line":"                    // TODO: find a better max"},
{"lineNum":"  547","line":"                    const HAIKU_MAX_COUNT = 10000;"},
{"lineNum":"  548","line":"                    if (self.index >= self.end_index) {"},
{"lineNum":"  549","line":"                        if (self.first_iter) {"},
{"lineNum":"  550","line":"                            std.os.lseek_SET(self.dir.fd, 0) catch unreachable; // EBADF here likely means that the Dir was not opened with iteration permissions"},
{"lineNum":"  551","line":"                            self.first_iter = false;"},
{"lineNum":"  552","line":"                        }"},
{"lineNum":"  553","line":"                        const rc = os.system._kern_read_dir("},
{"lineNum":"  554","line":"                            self.dir.fd,"},
{"lineNum":"  555","line":"                            &self.buf,"},
{"lineNum":"  556","line":"                            self.buf.len,"},
{"lineNum":"  557","line":"                            HAIKU_MAX_COUNT,"},
{"lineNum":"  558","line":"                        );"},
{"lineNum":"  559","line":"                        if (rc == 0) return null;"},
{"lineNum":"  560","line":"                        if (rc < 0) {"},
{"lineNum":"  561","line":"                            switch (os.errno(rc)) {"},
{"lineNum":"  562","line":"                                .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  563","line":"                                .FAULT => unreachable,"},
{"lineNum":"  564","line":"                                .NOTDIR => unreachable,"},
{"lineNum":"  565","line":"                                .INVAL => unreachable,"},
{"lineNum":"  566","line":"                                else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  567","line":"                            }"},
{"lineNum":"  568","line":"                        }"},
{"lineNum":"  569","line":"                        self.index = 0;"},
{"lineNum":"  570","line":"                        self.end_index = @as(usize, @intCast(rc));"},
{"lineNum":"  571","line":"                    }"},
{"lineNum":"  572","line":"                    const haiku_entry = @as(*align(1) os.system.dirent, @ptrCast(&self.buf[self.index]));"},
{"lineNum":"  573","line":"                    const next_index = self.index + haiku_entry.reclen();"},
{"lineNum":"  574","line":"                    self.index = next_index;"},
{"lineNum":"  575","line":"                    const name = mem.sliceTo(@as([*:0]u8, @ptrCast(&haiku_entry.d_name)), 0);"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"                    if (mem.eql(u8, name, \".\") or mem.eql(u8, name, \"..\") or (haiku_entry.d_ino == 0)) {"},
{"lineNum":"  578","line":"                        continue :start_over;"},
{"lineNum":"  579","line":"                    }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"                    var stat_info: os.Stat = undefined;"},
{"lineNum":"  582","line":"                    const rc = os.system._kern_read_stat("},
{"lineNum":"  583","line":"                        self.dir.fd,"},
{"lineNum":"  584","line":"                        &haiku_entry.d_name,"},
{"lineNum":"  585","line":"                        false,"},
{"lineNum":"  586","line":"                        &stat_info,"},
{"lineNum":"  587","line":"                        0,"},
{"lineNum":"  588","line":"                    );"},
{"lineNum":"  589","line":"                    if (rc != 0) {"},
{"lineNum":"  590","line":"                        switch (os.errno(rc)) {"},
{"lineNum":"  591","line":"                            .SUCCESS => {},"},
{"lineNum":"  592","line":"                            .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  593","line":"                            .FAULT => unreachable,"},
{"lineNum":"  594","line":"                            .NOTDIR => unreachable,"},
{"lineNum":"  595","line":"                            .INVAL => unreachable,"},
{"lineNum":"  596","line":"                            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  597","line":"                        }"},
{"lineNum":"  598","line":"                    }"},
{"lineNum":"  599","line":"                    const statmode = stat_info.mode & os.S.IFMT;"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"                    const entry_kind: Entry.Kind = switch (statmode) {"},
{"lineNum":"  602","line":"                        os.S.IFDIR => .directory,"},
{"lineNum":"  603","line":"                        os.S.IFBLK => .block_device,"},
{"lineNum":"  604","line":"                        os.S.IFCHR => .character_device,"},
{"lineNum":"  605","line":"                        os.S.IFLNK => .sym_link,"},
{"lineNum":"  606","line":"                        os.S.IFREG => .file,"},
{"lineNum":"  607","line":"                        os.S.IFIFO => .named_pipe,"},
{"lineNum":"  608","line":"                        else => .unknown,"},
{"lineNum":"  609","line":"                    };"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"                    return Entry{"},
{"lineNum":"  612","line":"                        .name = name,"},
{"lineNum":"  613","line":"                        .kind = entry_kind,"},
{"lineNum":"  614","line":"                    };"},
{"lineNum":"  615","line":"                }"},
{"lineNum":"  616","line":"            }"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"            pub fn reset(self: *Self) void {"},
{"lineNum":"  619","line":"                self.index = 0;"},
{"lineNum":"  620","line":"                self.end_index = 0;"},
{"lineNum":"  621","line":"                self.first_iter = true;"},
{"lineNum":"  622","line":"            }"},
{"lineNum":"  623","line":"        },"},
{"lineNum":"  624","line":"        .linux => struct {"},
{"lineNum":"  625","line":"            dir: Dir,"},
{"lineNum":"  626","line":"            // The if guard is solely there to prevent compile errors from missing `linux.dirent64`"},
{"lineNum":"  627","line":"            // definition when compiling for other OSes. It doesn\'t do anything when compiling for Linux."},
{"lineNum":"  628","line":"            buf: [1024]u8 align(if (builtin.os.tag != .linux) 1 else @alignOf(linux.dirent64)),"},
{"lineNum":"  629","line":"            index: usize,"},
{"lineNum":"  630","line":"            end_index: usize,"},
{"lineNum":"  631","line":"            first_iter: bool,"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"            const Self = @This();"},
{"lineNum":"  634","line":"            const linux = os.linux;"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"            pub const Error = IteratorError;"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"            /// Memory such as file names referenced in this returned entry becomes invalid"},
{"lineNum":"  639","line":"            /// with subsequent calls to `next`, as well as when this `Dir` is deinitialized."},
{"lineNum":"  640","line":"            pub fn next(self: *Self) Error!?Entry {"},
{"lineNum":"  641","line":"                return self.nextLinux() catch |err| switch (err) {"},
{"lineNum":"  642","line":"                    // To be consistent across platforms, iteration ends if the directory being iterated is deleted during iteration."},
{"lineNum":"  643","line":"                    // This matches the behavior of non-Linux UNIX platforms."},
{"lineNum":"  644","line":"                    error.DirNotFound => null,"},
{"lineNum":"  645","line":"                    else => |e| return e,"},
{"lineNum":"  646","line":"                };"},
{"lineNum":"  647","line":"            }"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"            pub const ErrorLinux = error{DirNotFound} || IteratorError;"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"            /// Implementation of `next` that can return `error.DirNotFound` if the directory being"},
{"lineNum":"  652","line":"            /// iterated was deleted during iteration (this error is Linux specific)."},
{"lineNum":"  653","line":"            pub fn nextLinux(self: *Self) ErrorLinux!?Entry {"},
{"lineNum":"  654","line":"                start_over: while (true) {"},
{"lineNum":"  655","line":"                    if (self.index >= self.end_index) {"},
{"lineNum":"  656","line":"                        if (self.first_iter) {"},
{"lineNum":"  657","line":"                            std.os.lseek_SET(self.dir.fd, 0) catch unreachable; // EBADF here likely means that the Dir was not opened with iteration permissions"},
{"lineNum":"  658","line":"                            self.first_iter = false;"},
{"lineNum":"  659","line":"                        }"},
{"lineNum":"  660","line":"                        const rc = linux.getdents64(self.dir.fd, &self.buf, self.buf.len);"},
{"lineNum":"  661","line":"                        switch (linux.getErrno(rc)) {"},
{"lineNum":"  662","line":"                            .SUCCESS => {},"},
{"lineNum":"  663","line":"                            .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  664","line":"                            .FAULT => unreachable,"},
{"lineNum":"  665","line":"                            .NOTDIR => unreachable,"},
{"lineNum":"  666","line":"                            .NOENT => return error.DirNotFound, // The directory being iterated was deleted during iteration."},
{"lineNum":"  667","line":"                            .INVAL => return error.Unexpected, // Linux may in some cases return EINVAL when reading /proc/$PID/net."},
{"lineNum":"  668","line":"                            .ACCES => return error.AccessDenied, // Do not have permission to iterate this directory."},
{"lineNum":"  669","line":"                            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  670","line":"                        }"},
{"lineNum":"  671","line":"                        if (rc == 0) return null;"},
{"lineNum":"  672","line":"                        self.index = 0;"},
{"lineNum":"  673","line":"                        self.end_index = rc;"},
{"lineNum":"  674","line":"                    }"},
{"lineNum":"  675","line":"                    const linux_entry = @as(*align(1) linux.dirent64, @ptrCast(&self.buf[self.index]));"},
{"lineNum":"  676","line":"                    const next_index = self.index + linux_entry.reclen();"},
{"lineNum":"  677","line":"                    self.index = next_index;"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"                    const name = mem.sliceTo(@as([*:0]u8, @ptrCast(&linux_entry.d_name)), 0);"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"                    // skip . and .. entries"},
{"lineNum":"  682","line":"                    if (mem.eql(u8, name, \".\") or mem.eql(u8, name, \"..\")) {"},
{"lineNum":"  683","line":"                        continue :start_over;"},
{"lineNum":"  684","line":"                    }"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"                    const entry_kind: Entry.Kind = switch (linux_entry.d_type) {"},
{"lineNum":"  687","line":"                        linux.DT.BLK => .block_device,"},
{"lineNum":"  688","line":"                        linux.DT.CHR => .character_device,"},
{"lineNum":"  689","line":"                        linux.DT.DIR => .directory,"},
{"lineNum":"  690","line":"                        linux.DT.FIFO => .named_pipe,"},
{"lineNum":"  691","line":"                        linux.DT.LNK => .sym_link,"},
{"lineNum":"  692","line":"                        linux.DT.REG => .file,"},
{"lineNum":"  693","line":"                        linux.DT.SOCK => .unix_domain_socket,"},
{"lineNum":"  694","line":"                        else => .unknown,"},
{"lineNum":"  695","line":"                    };"},
{"lineNum":"  696","line":"                    return Entry{"},
{"lineNum":"  697","line":"                        .name = name,"},
{"lineNum":"  698","line":"                        .kind = entry_kind,"},
{"lineNum":"  699","line":"                    };"},
{"lineNum":"  700","line":"                }"},
{"lineNum":"  701","line":"            }"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"            pub fn reset(self: *Self) void {"},
{"lineNum":"  704","line":"                self.index = 0;"},
{"lineNum":"  705","line":"                self.end_index = 0;"},
{"lineNum":"  706","line":"                self.first_iter = true;"},
{"lineNum":"  707","line":"            }"},
{"lineNum":"  708","line":"        },"},
{"lineNum":"  709","line":"        .windows => struct {"},
{"lineNum":"  710","line":"            dir: Dir,"},
{"lineNum":"  711","line":"            buf: [1024]u8 align(@alignOf(os.windows.FILE_BOTH_DIR_INFORMATION)),"},
{"lineNum":"  712","line":"            index: usize,"},
{"lineNum":"  713","line":"            end_index: usize,"},
{"lineNum":"  714","line":"            first_iter: bool,"},
{"lineNum":"  715","line":"            name_data: [MAX_NAME_BYTES]u8,"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"            const Self = @This();"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"            pub const Error = IteratorError;"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"            /// Memory such as file names referenced in this returned entry becomes invalid"},
{"lineNum":"  722","line":"            /// with subsequent calls to `next`, as well as when this `Dir` is deinitialized."},
{"lineNum":"  723","line":"            pub fn next(self: *Self) Error!?Entry {"},
{"lineNum":"  724","line":"                while (true) {"},
{"lineNum":"  725","line":"                    const w = os.windows;"},
{"lineNum":"  726","line":"                    if (self.index >= self.end_index) {"},
{"lineNum":"  727","line":"                        var io: w.IO_STATUS_BLOCK = undefined;"},
{"lineNum":"  728","line":"                        const rc = w.ntdll.NtQueryDirectoryFile("},
{"lineNum":"  729","line":"                            self.dir.fd,"},
{"lineNum":"  730","line":"                            null,"},
{"lineNum":"  731","line":"                            null,"},
{"lineNum":"  732","line":"                            null,"},
{"lineNum":"  733","line":"                            &io,"},
{"lineNum":"  734","line":"                            &self.buf,"},
{"lineNum":"  735","line":"                            self.buf.len,"},
{"lineNum":"  736","line":"                            .FileBothDirectoryInformation,"},
{"lineNum":"  737","line":"                            w.FALSE,"},
{"lineNum":"  738","line":"                            null,"},
{"lineNum":"  739","line":"                            if (self.first_iter) @as(w.BOOLEAN, w.TRUE) else @as(w.BOOLEAN, w.FALSE),"},
{"lineNum":"  740","line":"                        );"},
{"lineNum":"  741","line":"                        self.first_iter = false;"},
{"lineNum":"  742","line":"                        if (io.Information == 0) return null;"},
{"lineNum":"  743","line":"                        self.index = 0;"},
{"lineNum":"  744","line":"                        self.end_index = io.Information;"},
{"lineNum":"  745","line":"                        switch (rc) {"},
{"lineNum":"  746","line":"                            .SUCCESS => {},"},
{"lineNum":"  747","line":"                            .ACCESS_DENIED => return error.AccessDenied, // Double-check that the Dir was opened with iteration ability"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"                            else => return w.unexpectedStatus(rc),"},
{"lineNum":"  750","line":"                        }"},
{"lineNum":"  751","line":"                    }"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"                    const dir_info: *w.FILE_BOTH_DIR_INFORMATION = @ptrCast(@alignCast(&self.buf[self.index]));"},
{"lineNum":"  754","line":"                    if (dir_info.NextEntryOffset != 0) {"},
{"lineNum":"  755","line":"                        self.index += dir_info.NextEntryOffset;"},
{"lineNum":"  756","line":"                    } else {"},
{"lineNum":"  757","line":"                        self.index = self.buf.len;"},
{"lineNum":"  758","line":"                    }"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"                    const name_utf16le = @as([*]u16, @ptrCast(&dir_info.FileName))[0 .. dir_info.FileNameLength / 2];"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"                    if (mem.eql(u16, name_utf16le, &[_]u16{\'.\'}) or mem.eql(u16, name_utf16le, &[_]u16{ \'.\', \'.\' }))"},
{"lineNum":"  763","line":"                        continue;"},
{"lineNum":"  764","line":"                    // Trust that Windows gives us valid UTF-16LE"},
{"lineNum":"  765","line":"                    const name_utf8_len = std.unicode.utf16leToUtf8(self.name_data[0..], name_utf16le) catch unreachable;"},
{"lineNum":"  766","line":"                    const name_utf8 = self.name_data[0..name_utf8_len];"},
{"lineNum":"  767","line":"                    const kind: Entry.Kind = blk: {"},
{"lineNum":"  768","line":"                        const attrs = dir_info.FileAttributes;"},
{"lineNum":"  769","line":"                        if (attrs & w.FILE_ATTRIBUTE_DIRECTORY != 0) break :blk .directory;"},
{"lineNum":"  770","line":"                        if (attrs & w.FILE_ATTRIBUTE_REPARSE_POINT != 0) break :blk .sym_link;"},
{"lineNum":"  771","line":"                        break :blk .file;"},
{"lineNum":"  772","line":"                    };"},
{"lineNum":"  773","line":"                    return Entry{"},
{"lineNum":"  774","line":"                        .name = name_utf8,"},
{"lineNum":"  775","line":"                        .kind = kind,"},
{"lineNum":"  776","line":"                    };"},
{"lineNum":"  777","line":"                }"},
{"lineNum":"  778","line":"            }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"            pub fn reset(self: *Self) void {"},
{"lineNum":"  781","line":"                self.index = 0;"},
{"lineNum":"  782","line":"                self.end_index = 0;"},
{"lineNum":"  783","line":"                self.first_iter = true;"},
{"lineNum":"  784","line":"            }"},
{"lineNum":"  785","line":"        },"},
{"lineNum":"  786","line":"        .wasi => struct {"},
{"lineNum":"  787","line":"            dir: Dir,"},
{"lineNum":"  788","line":"            buf: [1024]u8, // TODO align(@alignOf(os.wasi.dirent_t)),"},
{"lineNum":"  789","line":"            cookie: u64,"},
{"lineNum":"  790","line":"            index: usize,"},
{"lineNum":"  791","line":"            end_index: usize,"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"            const Self = @This();"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"            pub const Error = IteratorError;"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"            /// Memory such as file names referenced in this returned entry becomes invalid"},
{"lineNum":"  798","line":"            /// with subsequent calls to `next`, as well as when this `Dir` is deinitialized."},
{"lineNum":"  799","line":"            pub fn next(self: *Self) Error!?Entry {"},
{"lineNum":"  800","line":"                return self.nextWasi() catch |err| switch (err) {"},
{"lineNum":"  801","line":"                    // To be consistent across platforms, iteration ends if the directory being iterated is deleted during iteration."},
{"lineNum":"  802","line":"                    // This matches the behavior of non-Linux UNIX platforms."},
{"lineNum":"  803","line":"                    error.DirNotFound => null,"},
{"lineNum":"  804","line":"                    else => |e| return e,"},
{"lineNum":"  805","line":"                };"},
{"lineNum":"  806","line":"            }"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"            pub const ErrorWasi = error{DirNotFound} || IteratorError;"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"            /// Implementation of `next` that can return platform-dependent errors depending on the host platform."},
{"lineNum":"  811","line":"            /// When the host platform is Linux, `error.DirNotFound` can be returned if the directory being"},
{"lineNum":"  812","line":"            /// iterated was deleted during iteration."},
{"lineNum":"  813","line":"            pub fn nextWasi(self: *Self) ErrorWasi!?Entry {"},
{"lineNum":"  814","line":"                // We intentinally use fd_readdir even when linked with libc,"},
{"lineNum":"  815","line":"                // since its implementation is exactly the same as below,"},
{"lineNum":"  816","line":"                // and we avoid the code complexity here."},
{"lineNum":"  817","line":"                const w = os.wasi;"},
{"lineNum":"  818","line":"                start_over: while (true) {"},
{"lineNum":"  819","line":"                    // According to the WASI spec, the last entry might be truncated,"},
{"lineNum":"  820","line":"                    // so we need to check if the left buffer contains the whole dirent."},
{"lineNum":"  821","line":"                    if (self.end_index - self.index < @sizeOf(w.dirent_t)) {"},
{"lineNum":"  822","line":"                        var bufused: usize = undefined;"},
{"lineNum":"  823","line":"                        switch (w.fd_readdir(self.dir.fd, &self.buf, self.buf.len, self.cookie, &bufused)) {"},
{"lineNum":"  824","line":"                            .SUCCESS => {},"},
{"lineNum":"  825","line":"                            .BADF => unreachable, // Dir is invalid or was opened without iteration ability"},
{"lineNum":"  826","line":"                            .FAULT => unreachable,"},
{"lineNum":"  827","line":"                            .NOTDIR => unreachable,"},
{"lineNum":"  828","line":"                            .INVAL => unreachable,"},
{"lineNum":"  829","line":"                            .NOENT => return error.DirNotFound, // The directory being iterated was deleted during iteration."},
{"lineNum":"  830","line":"                            .NOTCAPABLE => return error.AccessDenied,"},
{"lineNum":"  831","line":"                            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  832","line":"                        }"},
{"lineNum":"  833","line":"                        if (bufused == 0) return null;"},
{"lineNum":"  834","line":"                        self.index = 0;"},
{"lineNum":"  835","line":"                        self.end_index = bufused;"},
{"lineNum":"  836","line":"                    }"},
{"lineNum":"  837","line":"                    const entry = @as(*align(1) w.dirent_t, @ptrCast(&self.buf[self.index]));"},
{"lineNum":"  838","line":"                    const entry_size = @sizeOf(w.dirent_t);"},
{"lineNum":"  839","line":"                    const name_index = self.index + entry_size;"},
{"lineNum":"  840","line":"                    if (name_index + entry.d_namlen > self.end_index) {"},
{"lineNum":"  841","line":"                        // This case, the name is truncated, so we need to call readdir to store the entire name."},
{"lineNum":"  842","line":"                        self.end_index = self.index; // Force fd_readdir in the next loop."},
{"lineNum":"  843","line":"                        continue :start_over;"},
{"lineNum":"  844","line":"                    }"},
{"lineNum":"  845","line":"                    const name = self.buf[name_index .. name_index + entry.d_namlen];"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"                    const next_index = name_index + entry.d_namlen;"},
{"lineNum":"  848","line":"                    self.index = next_index;"},
{"lineNum":"  849","line":"                    self.cookie = entry.d_next;"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"                    // skip . and .. entries"},
{"lineNum":"  852","line":"                    if (mem.eql(u8, name, \".\") or mem.eql(u8, name, \"..\")) {"},
{"lineNum":"  853","line":"                        continue :start_over;"},
{"lineNum":"  854","line":"                    }"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"                    const entry_kind: Entry.Kind = switch (entry.d_type) {"},
{"lineNum":"  857","line":"                        .BLOCK_DEVICE => .block_device,"},
{"lineNum":"  858","line":"                        .CHARACTER_DEVICE => .character_device,"},
{"lineNum":"  859","line":"                        .DIRECTORY => .directory,"},
{"lineNum":"  860","line":"                        .SYMBOLIC_LINK => .sym_link,"},
{"lineNum":"  861","line":"                        .REGULAR_FILE => .file,"},
{"lineNum":"  862","line":"                        .SOCKET_STREAM, .SOCKET_DGRAM => .unix_domain_socket,"},
{"lineNum":"  863","line":"                        else => .unknown,"},
{"lineNum":"  864","line":"                    };"},
{"lineNum":"  865","line":"                    return Entry{"},
{"lineNum":"  866","line":"                        .name = name,"},
{"lineNum":"  867","line":"                        .kind = entry_kind,"},
{"lineNum":"  868","line":"                    };"},
{"lineNum":"  869","line":"                }"},
{"lineNum":"  870","line":"            }"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"            pub fn reset(self: *Self) void {"},
{"lineNum":"  873","line":"                self.index = 0;"},
{"lineNum":"  874","line":"                self.end_index = 0;"},
{"lineNum":"  875","line":"                self.cookie = os.wasi.DIRCOOKIE_START;"},
{"lineNum":"  876","line":"            }"},
{"lineNum":"  877","line":"        },"},
{"lineNum":"  878","line":"        else => @compileError(\"unimplemented\"),"},
{"lineNum":"  879","line":"    };"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"    pub fn iterate(self: IterableDir) Iterator {"},
{"lineNum":"  882","line":"        return self.iterateImpl(true);"},
{"lineNum":"  883","line":"    }"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"    /// Like `iterate`, but will not reset the directory cursor before the first"},
{"lineNum":"  886","line":"    /// iteration. This should only be used in cases where it is known that the"},
{"lineNum":"  887","line":"    /// `IterableDir` has not had its cursor modified yet (e.g. it was just opened)."},
{"lineNum":"  888","line":"    pub fn iterateAssumeFirstIteration(self: IterableDir) Iterator {"},
{"lineNum":"  889","line":"        return self.iterateImpl(false);"},
{"lineNum":"  890","line":"    }"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    fn iterateImpl(self: IterableDir, first_iter_start_value: bool) Iterator {"},
{"lineNum":"  893","line":"        switch (builtin.os.tag) {"},
{"lineNum":"  894","line":"            .macos,"},
{"lineNum":"  895","line":"            .ios,"},
{"lineNum":"  896","line":"            .freebsd,"},
{"lineNum":"  897","line":"            .netbsd,"},
{"lineNum":"  898","line":"            .dragonfly,"},
{"lineNum":"  899","line":"            .openbsd,"},
{"lineNum":"  900","line":"            .solaris,"},
{"lineNum":"  901","line":"            => return Iterator{"},
{"lineNum":"  902","line":"                .dir = self.dir,"},
{"lineNum":"  903","line":"                .seek = 0,"},
{"lineNum":"  904","line":"                .index = 0,"},
{"lineNum":"  905","line":"                .end_index = 0,"},
{"lineNum":"  906","line":"                .buf = undefined,"},
{"lineNum":"  907","line":"                .first_iter = first_iter_start_value,"},
{"lineNum":"  908","line":"            },"},
{"lineNum":"  909","line":"            .linux, .haiku => return Iterator{"},
{"lineNum":"  910","line":"                .dir = self.dir,"},
{"lineNum":"  911","line":"                .index = 0,"},
{"lineNum":"  912","line":"                .end_index = 0,"},
{"lineNum":"  913","line":"                .buf = undefined,"},
{"lineNum":"  914","line":"                .first_iter = first_iter_start_value,"},
{"lineNum":"  915","line":"            },"},
{"lineNum":"  916","line":"            .windows => return Iterator{"},
{"lineNum":"  917","line":"                .dir = self.dir,"},
{"lineNum":"  918","line":"                .index = 0,"},
{"lineNum":"  919","line":"                .end_index = 0,"},
{"lineNum":"  920","line":"                .first_iter = first_iter_start_value,"},
{"lineNum":"  921","line":"                .buf = undefined,"},
{"lineNum":"  922","line":"                .name_data = undefined,"},
{"lineNum":"  923","line":"            },"},
{"lineNum":"  924","line":"            .wasi => return Iterator{"},
{"lineNum":"  925","line":"                .dir = self.dir,"},
{"lineNum":"  926","line":"                .cookie = os.wasi.DIRCOOKIE_START,"},
{"lineNum":"  927","line":"                .index = 0,"},
{"lineNum":"  928","line":"                .end_index = 0,"},
{"lineNum":"  929","line":"                .buf = undefined,"},
{"lineNum":"  930","line":"            },"},
{"lineNum":"  931","line":"            else => @compileError(\"unimplemented\"),"},
{"lineNum":"  932","line":"        }"},
{"lineNum":"  933","line":"    }"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"    pub const Walker = struct {"},
{"lineNum":"  936","line":"        stack: std.ArrayList(StackItem),"},
{"lineNum":"  937","line":"        name_buffer: std.ArrayList(u8),"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"        pub const WalkerEntry = struct {"},
{"lineNum":"  940","line":"            /// The containing directory. This can be used to operate directly on `basename`"},
{"lineNum":"  941","line":"            /// rather than `path`, avoiding `error.NameTooLong` for deeply nested paths."},
{"lineNum":"  942","line":"            /// The directory remains open until `next` or `deinit` is called."},
{"lineNum":"  943","line":"            dir: Dir,"},
{"lineNum":"  944","line":"            basename: []const u8,"},
{"lineNum":"  945","line":"            path: []const u8,"},
{"lineNum":"  946","line":"            kind: IterableDir.Entry.Kind,"},
{"lineNum":"  947","line":"        };"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"        const StackItem = struct {"},
{"lineNum":"  950","line":"            iter: IterableDir.Iterator,"},
{"lineNum":"  951","line":"            dirname_len: usize,"},
{"lineNum":"  952","line":"        };"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"        /// After each call to this function, and on deinit(), the memory returned"},
{"lineNum":"  955","line":"        /// from this function becomes invalid. A copy must be made in order to keep"},
{"lineNum":"  956","line":"        /// a reference to the path."},
{"lineNum":"  957","line":"        pub fn next(self: *Walker) !?WalkerEntry {"},
{"lineNum":"  958","line":"            while (self.stack.items.len != 0) {"},
{"lineNum":"  959","line":"                // `top` and `containing` become invalid after appending to `self.stack`"},
{"lineNum":"  960","line":"                var top = &self.stack.items[self.stack.items.len - 1];"},
{"lineNum":"  961","line":"                var containing = top;"},
{"lineNum":"  962","line":"                var dirname_len = top.dirname_len;"},
{"lineNum":"  963","line":"                if (top.iter.next() catch |err| {"},
{"lineNum":"  964","line":"                    // If we get an error, then we want the user to be able to continue"},
{"lineNum":"  965","line":"                    // walking if they want, which means that we need to pop the directory"},
{"lineNum":"  966","line":"                    // that errored from the stack. Otherwise, all future `next` calls would"},
{"lineNum":"  967","line":"                    // likely just fail with the same error."},
{"lineNum":"  968","line":"                    var item = self.stack.pop();"},
{"lineNum":"  969","line":"                    if (self.stack.items.len != 0) {"},
{"lineNum":"  970","line":"                        item.iter.dir.close();"},
{"lineNum":"  971","line":"                    }"},
{"lineNum":"  972","line":"                    return err;"},
{"lineNum":"  973","line":"                }) |base| {"},
{"lineNum":"  974","line":"                    self.name_buffer.shrinkRetainingCapacity(dirname_len);"},
{"lineNum":"  975","line":"                    if (self.name_buffer.items.len != 0) {"},
{"lineNum":"  976","line":"                        try self.name_buffer.append(path.sep);"},
{"lineNum":"  977","line":"                        dirname_len += 1;"},
{"lineNum":"  978","line":"                    }"},
{"lineNum":"  979","line":"                    try self.name_buffer.appendSlice(base.name);"},
{"lineNum":"  980","line":"                    if (base.kind == .directory) {"},
{"lineNum":"  981","line":"                        var new_dir = top.iter.dir.openIterableDir(base.name, .{}) catch |err| switch (err) {"},
{"lineNum":"  982","line":"                            error.NameTooLong => unreachable, // no path sep in base.name"},
{"lineNum":"  983","line":"                            else => |e| return e,"},
{"lineNum":"  984","line":"                        };"},
{"lineNum":"  985","line":"                        {"},
{"lineNum":"  986","line":"                            errdefer new_dir.close();"},
{"lineNum":"  987","line":"                            try self.stack.append(StackItem{"},
{"lineNum":"  988","line":"                                .iter = new_dir.iterateAssumeFirstIteration(),"},
{"lineNum":"  989","line":"                                .dirname_len = self.name_buffer.items.len,"},
{"lineNum":"  990","line":"                            });"},
{"lineNum":"  991","line":"                            top = &self.stack.items[self.stack.items.len - 1];"},
{"lineNum":"  992","line":"                            containing = &self.stack.items[self.stack.items.len - 2];"},
{"lineNum":"  993","line":"                        }"},
{"lineNum":"  994","line":"                    }"},
{"lineNum":"  995","line":"                    return WalkerEntry{"},
{"lineNum":"  996","line":"                        .dir = containing.iter.dir,"},
{"lineNum":"  997","line":"                        .basename = self.name_buffer.items[dirname_len..],"},
{"lineNum":"  998","line":"                        .path = self.name_buffer.items,"},
{"lineNum":"  999","line":"                        .kind = base.kind,"},
{"lineNum":" 1000","line":"                    };"},
{"lineNum":" 1001","line":"                } else {"},
{"lineNum":" 1002","line":"                    var item = self.stack.pop();"},
{"lineNum":" 1003","line":"                    if (self.stack.items.len != 0) {"},
{"lineNum":" 1004","line":"                        item.iter.dir.close();"},
{"lineNum":" 1005","line":"                    }"},
{"lineNum":" 1006","line":"                }"},
{"lineNum":" 1007","line":"            }"},
{"lineNum":" 1008","line":"            return null;"},
{"lineNum":" 1009","line":"        }"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"        pub fn deinit(self: *Walker) void {"},
{"lineNum":" 1012","line":"            // Close any remaining directories except the initial one (which is always at index 0)"},
{"lineNum":" 1013","line":"            if (self.stack.items.len > 1) {"},
{"lineNum":" 1014","line":"                for (self.stack.items[1..]) |*item| {"},
{"lineNum":" 1015","line":"                    item.iter.dir.close();"},
{"lineNum":" 1016","line":"                }"},
{"lineNum":" 1017","line":"            }"},
{"lineNum":" 1018","line":"            self.stack.deinit();"},
{"lineNum":" 1019","line":"            self.name_buffer.deinit();"},
{"lineNum":" 1020","line":"        }"},
{"lineNum":" 1021","line":"    };"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"    /// Recursively iterates over a directory."},
{"lineNum":" 1024","line":"    /// Must call `Walker.deinit` when done."},
{"lineNum":" 1025","line":"    /// The order of returned file system entries is undefined."},
{"lineNum":" 1026","line":"    /// `self` will not be closed after walking it."},
{"lineNum":" 1027","line":"    pub fn walk(self: IterableDir, allocator: Allocator) !Walker {"},
{"lineNum":" 1028","line":"        var name_buffer = std.ArrayList(u8).init(allocator);"},
{"lineNum":" 1029","line":"        errdefer name_buffer.deinit();"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"        var stack = std.ArrayList(Walker.StackItem).init(allocator);"},
{"lineNum":" 1032","line":"        errdefer stack.deinit();"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"        try stack.append(Walker.StackItem{"},
{"lineNum":" 1035","line":"            .iter = self.iterate(),"},
{"lineNum":" 1036","line":"            .dirname_len = 0,"},
{"lineNum":" 1037","line":"        });"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"        return Walker{"},
{"lineNum":" 1040","line":"            .stack = stack,"},
{"lineNum":" 1041","line":"            .name_buffer = name_buffer,"},
{"lineNum":" 1042","line":"        };"},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"    pub fn close(self: *IterableDir) void {"},
{"lineNum":" 1046","line":"        self.dir.close();"},
{"lineNum":" 1047","line":"        self.* = undefined;"},
{"lineNum":" 1048","line":"    }"},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"    pub const ChmodError = File.ChmodError;"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"    /// Changes the mode of the directory."},
{"lineNum":" 1053","line":"    /// The process must have the correct privileges in order to do this"},
{"lineNum":" 1054","line":"    /// successfully, or must have the effective user ID matching the owner"},
{"lineNum":" 1055","line":"    /// of the directory."},
{"lineNum":" 1056","line":"    pub fn chmod(self: IterableDir, new_mode: File.Mode) ChmodError!void {"},
{"lineNum":" 1057","line":"        const file: File = .{"},
{"lineNum":" 1058","line":"            .handle = self.dir.fd,"},
{"lineNum":" 1059","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 1060","line":"        };"},
{"lineNum":" 1061","line":"        try file.chmod(new_mode);"},
{"lineNum":" 1062","line":"    }"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"    /// Changes the owner and group of the directory."},
{"lineNum":" 1065","line":"    /// The process must have the correct privileges in order to do this"},
{"lineNum":" 1066","line":"    /// successfully. The group may be changed by the owner of the directory to"},
{"lineNum":" 1067","line":"    /// any group of which the owner is a member. If the"},
{"lineNum":" 1068","line":"    /// owner or group is specified as `null`, the ID is not changed."},
{"lineNum":" 1069","line":"    pub fn chown(self: IterableDir, owner: ?File.Uid, group: ?File.Gid) ChownError!void {"},
{"lineNum":" 1070","line":"        const file: File = .{"},
{"lineNum":" 1071","line":"            .handle = self.dir.fd,"},
{"lineNum":" 1072","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 1073","line":"        };"},
{"lineNum":" 1074","line":"        try file.chown(owner, group);"},
{"lineNum":" 1075","line":"    }"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"    pub const ChownError = File.ChownError;"},
{"lineNum":" 1078","line":"};"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"pub const Dir = struct {"},
{"lineNum":" 1081","line":"    fd: os.fd_t,"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"    pub const iterate = @compileError(\"only \'IterableDir\' can be iterated; \'IterableDir\' can be obtained with \'openIterableDir\'\");"},
{"lineNum":" 1084","line":"    pub const walk = @compileError(\"only \'IterableDir\' can be walked; \'IterableDir\' can be obtained with \'openIterableDir\'\");"},
{"lineNum":" 1085","line":"    pub const chmod = @compileError(\"only \'IterableDir\' can have its mode changed; \'IterableDir\' can be obtained with \'openIterableDir\'\");"},
{"lineNum":" 1086","line":"    pub const chown = @compileError(\"only \'IterableDir\' can have its owner changed; \'IterableDir\' can be obtained with \'openIterableDir\'\");"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    pub const OpenError = error{"},
{"lineNum":" 1089","line":"        FileNotFound,"},
{"lineNum":" 1090","line":"        NotDir,"},
{"lineNum":" 1091","line":"        InvalidHandle,"},
{"lineNum":" 1092","line":"        AccessDenied,"},
{"lineNum":" 1093","line":"        SymLinkLoop,"},
{"lineNum":" 1094","line":"        ProcessFdQuotaExceeded,"},
{"lineNum":" 1095","line":"        NameTooLong,"},
{"lineNum":" 1096","line":"        SystemFdQuotaExceeded,"},
{"lineNum":" 1097","line":"        NoDevice,"},
{"lineNum":" 1098","line":"        SystemResources,"},
{"lineNum":" 1099","line":"        InvalidUtf8,"},
{"lineNum":" 1100","line":"        BadPathName,"},
{"lineNum":" 1101","line":"        DeviceBusy,"},
{"lineNum":" 1102","line":"        /// On Windows, `\\\\server` or `\\\\server\\share` was not found."},
{"lineNum":" 1103","line":"        NetworkNotFound,"},
{"lineNum":" 1104","line":"    } || os.UnexpectedError;"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"    pub fn close(self: *Dir) void {"},
{"lineNum":" 1107","line":"        if (need_async_thread) {"},
{"lineNum":" 1108","line":"            std.event.Loop.instance.?.close(self.fd);"},
{"lineNum":" 1109","line":"        } else {"},
{"lineNum":" 1110","line":"            os.close(self.fd);"},
{"lineNum":" 1111","line":"        }"},
{"lineNum":" 1112","line":"        self.* = undefined;"},
{"lineNum":" 1113","line":"    }"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    /// Opens a file for reading or writing, without attempting to create a new file."},
{"lineNum":" 1116","line":"    /// To create a new file, see `createFile`."},
{"lineNum":" 1117","line":"    /// Call `File.close` to release the resource."},
{"lineNum":" 1118","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 1119","line":"    pub fn openFile(self: Dir, sub_path: []const u8, flags: File.OpenFlags) File.OpenError!File {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1120","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1121","line":"            const path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 1122","line":"            return self.openFileW(path_w.span(), flags);"},
{"lineNum":" 1123","line":"        }"},
{"lineNum":" 1124","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1125","line":"            return self.openFileWasi(sub_path, flags);"},
{"lineNum":" 1126","line":"        }"},
{"lineNum":" 1127","line":"        const path_c = try os.toPosixPath(sub_path);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1128","line":"        return self.openFileZ(&path_c, flags);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1129","line":"    }"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"    /// Same as `openFile` but WASI only."},
{"lineNum":" 1132","line":"    pub fn openFileWasi(self: Dir, sub_path: []const u8, flags: File.OpenFlags) File.OpenError!File {"},
{"lineNum":" 1133","line":"        const w = os.wasi;"},
{"lineNum":" 1134","line":"        var fdflags: w.fdflags_t = 0x0;"},
{"lineNum":" 1135","line":"        var base: w.rights_t = 0x0;"},
{"lineNum":" 1136","line":"        if (flags.isRead()) {"},
{"lineNum":" 1137","line":"            base |= w.RIGHT.FD_READ | w.RIGHT.FD_TELL | w.RIGHT.FD_SEEK | w.RIGHT.FD_FILESTAT_GET;"},
{"lineNum":" 1138","line":"        }"},
{"lineNum":" 1139","line":"        if (flags.isWrite()) {"},
{"lineNum":" 1140","line":"            fdflags |= w.FDFLAG.APPEND;"},
{"lineNum":" 1141","line":"            base |= w.RIGHT.FD_WRITE |"},
{"lineNum":" 1142","line":"                w.RIGHT.FD_TELL |"},
{"lineNum":" 1143","line":"                w.RIGHT.FD_SEEK |"},
{"lineNum":" 1144","line":"                w.RIGHT.FD_DATASYNC |"},
{"lineNum":" 1145","line":"                w.RIGHT.FD_FDSTAT_SET_FLAGS |"},
{"lineNum":" 1146","line":"                w.RIGHT.FD_SYNC |"},
{"lineNum":" 1147","line":"                w.RIGHT.FD_ALLOCATE |"},
{"lineNum":" 1148","line":"                w.RIGHT.FD_ADVISE |"},
{"lineNum":" 1149","line":"                w.RIGHT.FD_FILESTAT_SET_TIMES |"},
{"lineNum":" 1150","line":"                w.RIGHT.FD_FILESTAT_SET_SIZE;"},
{"lineNum":" 1151","line":"        }"},
{"lineNum":" 1152","line":"        const fd = try os.openatWasi(self.fd, sub_path, 0x0, 0x0, fdflags, base, 0x0);"},
{"lineNum":" 1153","line":"        return File{ .handle = fd };"},
{"lineNum":" 1154","line":"    }"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"    /// Same as `openFile` but the path parameter is null-terminated."},
{"lineNum":" 1157","line":"    pub fn openFileZ(self: Dir, sub_path: [*:0]const u8, flags: File.OpenFlags) File.OpenError!File {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1158","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1159","line":"            const path_w = try os.windows.cStrToPrefixedFileW(sub_path);"},
{"lineNum":" 1160","line":"            return self.openFileW(path_w.span(), flags);"},
{"lineNum":" 1161","line":"        }"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"        var os_flags: u32 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1164","line":"        if (@hasDecl(os.O, \"CLOEXEC\")) os_flags = os.O.CLOEXEC;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"        // Use the O locking flags if the os supports them to acquire the lock"},
{"lineNum":" 1167","line":"        // atomically."},
{"lineNum":" 1168","line":"        const has_flock_open_flags = @hasDecl(os.O, \"EXLOCK\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1169","line":"        if (has_flock_open_flags) {"},
{"lineNum":" 1170","line":"            // Note that the O.NONBLOCK flag is removed after the openat() call"},
{"lineNum":" 1171","line":"            // is successful."},
{"lineNum":" 1172","line":"            const nonblocking_lock_flag: u32 = if (flags.lock_nonblocking)"},
{"lineNum":" 1173","line":"                os.O.NONBLOCK"},
{"lineNum":" 1174","line":"            else"},
{"lineNum":" 1175","line":"                0;"},
{"lineNum":" 1176","line":"            os_flags |= switch (flags.lock) {"},
{"lineNum":" 1177","line":"                .none => @as(u32, 0),"},
{"lineNum":" 1178","line":"                .shared => os.O.SHLOCK | nonblocking_lock_flag,"},
{"lineNum":" 1179","line":"                .exclusive => os.O.EXLOCK | nonblocking_lock_flag,"},
{"lineNum":" 1180","line":"            };"},
{"lineNum":" 1181","line":"        }"},
{"lineNum":" 1182","line":"        if (@hasDecl(os.O, \"LARGEFILE\")) {"},
{"lineNum":" 1183","line":"            os_flags |= os.O.LARGEFILE;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1184","line":"        }"},
{"lineNum":" 1185","line":"        if (@hasDecl(os.O, \"NOCTTY\") and !flags.allow_ctty) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1186","line":"            os_flags |= os.O.NOCTTY;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1187","line":"        }"},
{"lineNum":" 1188","line":"        os_flags |= switch (flags.mode) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1189","line":"            .read_only => @as(u32, os.O.RDONLY),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1190","line":"            .write_only => @as(u32, os.O.WRONLY),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1191","line":"            .read_write => @as(u32, os.O.RDWR),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1192","line":"        };"},
{"lineNum":" 1193","line":"        const fd = if (flags.intended_io_mode != .blocking)"},
{"lineNum":" 1194","line":"            try std.event.Loop.instance.?.openatZ(self.fd, sub_path, os_flags, 0)"},
{"lineNum":" 1195","line":"        else"},
{"lineNum":" 1196","line":"            try os.openatZ(self.fd, sub_path, os_flags, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1197","line":"        errdefer os.close(fd);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"        // WASI doesn\'t have os.flock so we intetinally check OS prior to the inner if block"},
{"lineNum":" 1200","line":"        // since it is not compiltime-known and we need to avoid undefined symbol in Wasm."},
{"lineNum":" 1201","line":"        if (@hasDecl(os.system, \"LOCK\") and builtin.target.os.tag != .wasi) {"},
{"lineNum":" 1202","line":"            if (!has_flock_open_flags and flags.lock != .none) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1203","line":"                // TODO: integrate async I/O"},
{"lineNum":" 1204","line":"                const lock_nonblocking = if (flags.lock_nonblocking) os.LOCK.NB else @as(i32, 0);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1205","line":"                try os.flock(fd, switch (flags.lock) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1206","line":"                    .none => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1207","line":"                    .shared => os.LOCK.SH | lock_nonblocking,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1208","line":"                    .exclusive => os.LOCK.EX | lock_nonblocking,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1209","line":"                });"},
{"lineNum":" 1210","line":"            }"},
{"lineNum":" 1211","line":"        }"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"        if (has_flock_open_flags and flags.lock_nonblocking) {"},
{"lineNum":" 1214","line":"            var fl_flags = os.fcntl(fd, os.F.GETFL, 0) catch |err| switch (err) {"},
{"lineNum":" 1215","line":"                error.FileBusy => unreachable,"},
{"lineNum":" 1216","line":"                error.Locked => unreachable,"},
{"lineNum":" 1217","line":"                error.PermissionDenied => unreachable,"},
{"lineNum":" 1218","line":"                error.DeadLock => unreachable,"},
{"lineNum":" 1219","line":"                error.LockedRegionLimitExceeded => unreachable,"},
{"lineNum":" 1220","line":"                else => |e| return e,"},
{"lineNum":" 1221","line":"            };"},
{"lineNum":" 1222","line":"            fl_flags &= ~@as(usize, os.O.NONBLOCK);"},
{"lineNum":" 1223","line":"            _ = os.fcntl(fd, os.F.SETFL, fl_flags) catch |err| switch (err) {"},
{"lineNum":" 1224","line":"                error.FileBusy => unreachable,"},
{"lineNum":" 1225","line":"                error.Locked => unreachable,"},
{"lineNum":" 1226","line":"                error.PermissionDenied => unreachable,"},
{"lineNum":" 1227","line":"                error.DeadLock => unreachable,"},
{"lineNum":" 1228","line":"                error.LockedRegionLimitExceeded => unreachable,"},
{"lineNum":" 1229","line":"                else => |e| return e,"},
{"lineNum":" 1230","line":"            };"},
{"lineNum":" 1231","line":"        }"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"        return File{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1234","line":"            .handle = fd,"},
{"lineNum":" 1235","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 1236","line":"            .intended_io_mode = flags.intended_io_mode,"},
{"lineNum":" 1237","line":"        };"},
{"lineNum":" 1238","line":"    }"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"    /// Same as `openFile` but Windows-only and the path parameter is"},
{"lineNum":" 1241","line":"    /// [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded."},
{"lineNum":" 1242","line":"    pub fn openFileW(self: Dir, sub_path_w: []const u16, flags: File.OpenFlags) File.OpenError!File {"},
{"lineNum":" 1243","line":"        const w = os.windows;"},
{"lineNum":" 1244","line":"        const file: File = .{"},
{"lineNum":" 1245","line":"            .handle = try w.OpenFile(sub_path_w, .{"},
{"lineNum":" 1246","line":"                .dir = self.fd,"},
{"lineNum":" 1247","line":"                .access_mask = w.SYNCHRONIZE |"},
{"lineNum":" 1248","line":"                    (if (flags.isRead()) @as(u32, w.GENERIC_READ) else 0) |"},
{"lineNum":" 1249","line":"                    (if (flags.isWrite()) @as(u32, w.GENERIC_WRITE) else 0),"},
{"lineNum":" 1250","line":"                .creation = w.FILE_OPEN,"},
{"lineNum":" 1251","line":"                .io_mode = flags.intended_io_mode,"},
{"lineNum":" 1252","line":"            }),"},
{"lineNum":" 1253","line":"            .capable_io_mode = std.io.default_mode,"},
{"lineNum":" 1254","line":"            .intended_io_mode = flags.intended_io_mode,"},
{"lineNum":" 1255","line":"        };"},
{"lineNum":" 1256","line":"        errdefer file.close();"},
{"lineNum":" 1257","line":"        var io: w.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1258","line":"        const range_off: w.LARGE_INTEGER = 0;"},
{"lineNum":" 1259","line":"        const range_len: w.LARGE_INTEGER = 1;"},
{"lineNum":" 1260","line":"        const exclusive = switch (flags.lock) {"},
{"lineNum":" 1261","line":"            .none => return file,"},
{"lineNum":" 1262","line":"            .shared => false,"},
{"lineNum":" 1263","line":"            .exclusive => true,"},
{"lineNum":" 1264","line":"        };"},
{"lineNum":" 1265","line":"        try w.LockFile("},
{"lineNum":" 1266","line":"            file.handle,"},
{"lineNum":" 1267","line":"            null,"},
{"lineNum":" 1268","line":"            null,"},
{"lineNum":" 1269","line":"            null,"},
{"lineNum":" 1270","line":"            &io,"},
{"lineNum":" 1271","line":"            &range_off,"},
{"lineNum":" 1272","line":"            &range_len,"},
{"lineNum":" 1273","line":"            null,"},
{"lineNum":" 1274","line":"            @intFromBool(flags.lock_nonblocking),"},
{"lineNum":" 1275","line":"            @intFromBool(exclusive),"},
{"lineNum":" 1276","line":"        );"},
{"lineNum":" 1277","line":"        return file;"},
{"lineNum":" 1278","line":"    }"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"    /// Creates, opens, or overwrites a file with write access."},
{"lineNum":" 1281","line":"    /// Call `File.close` on the result when done."},
{"lineNum":" 1282","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 1283","line":"    pub fn createFile(self: Dir, sub_path: []const u8, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 1284","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1285","line":"            const path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 1286","line":"            return self.createFileW(path_w.span(), flags);"},
{"lineNum":" 1287","line":"        }"},
{"lineNum":" 1288","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1289","line":"            return self.createFileWasi(sub_path, flags);"},
{"lineNum":" 1290","line":"        }"},
{"lineNum":" 1291","line":"        const path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 1292","line":"        return self.createFileZ(&path_c, flags);"},
{"lineNum":" 1293","line":"    }"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"    /// Same as `createFile` but WASI only."},
{"lineNum":" 1296","line":"    pub fn createFileWasi(self: Dir, sub_path: []const u8, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 1297","line":"        const w = os.wasi;"},
{"lineNum":" 1298","line":"        var oflags = w.O.CREAT;"},
{"lineNum":" 1299","line":"        var base: w.rights_t = w.RIGHT.FD_WRITE |"},
{"lineNum":" 1300","line":"            w.RIGHT.FD_DATASYNC |"},
{"lineNum":" 1301","line":"            w.RIGHT.FD_SEEK |"},
{"lineNum":" 1302","line":"            w.RIGHT.FD_TELL |"},
{"lineNum":" 1303","line":"            w.RIGHT.FD_FDSTAT_SET_FLAGS |"},
{"lineNum":" 1304","line":"            w.RIGHT.FD_SYNC |"},
{"lineNum":" 1305","line":"            w.RIGHT.FD_ALLOCATE |"},
{"lineNum":" 1306","line":"            w.RIGHT.FD_ADVISE |"},
{"lineNum":" 1307","line":"            w.RIGHT.FD_FILESTAT_SET_TIMES |"},
{"lineNum":" 1308","line":"            w.RIGHT.FD_FILESTAT_SET_SIZE |"},
{"lineNum":" 1309","line":"            w.RIGHT.FD_FILESTAT_GET;"},
{"lineNum":" 1310","line":"        if (flags.read) {"},
{"lineNum":" 1311","line":"            base |= w.RIGHT.FD_READ;"},
{"lineNum":" 1312","line":"        }"},
{"lineNum":" 1313","line":"        if (flags.truncate) {"},
{"lineNum":" 1314","line":"            oflags |= w.O.TRUNC;"},
{"lineNum":" 1315","line":"        }"},
{"lineNum":" 1316","line":"        if (flags.exclusive) {"},
{"lineNum":" 1317","line":"            oflags |= w.O.EXCL;"},
{"lineNum":" 1318","line":"        }"},
{"lineNum":" 1319","line":"        const fd = try os.openatWasi(self.fd, sub_path, 0x0, oflags, 0x0, base, 0x0);"},
{"lineNum":" 1320","line":"        return File{ .handle = fd };"},
{"lineNum":" 1321","line":"    }"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"    /// Same as `createFile` but the path parameter is null-terminated."},
{"lineNum":" 1324","line":"    pub fn createFileZ(self: Dir, sub_path_c: [*:0]const u8, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 1325","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1326","line":"            const path_w = try os.windows.cStrToPrefixedFileW(sub_path_c);"},
{"lineNum":" 1327","line":"            return self.createFileW(path_w.span(), flags);"},
{"lineNum":" 1328","line":"        }"},
{"lineNum":" 1329","line":""},
{"lineNum":" 1330","line":"        // Use the O locking flags if the os supports them to acquire the lock"},
{"lineNum":" 1331","line":"        // atomically."},
{"lineNum":" 1332","line":"        const has_flock_open_flags = @hasDecl(os.O, \"EXLOCK\");"},
{"lineNum":" 1333","line":"        // Note that the O.NONBLOCK flag is removed after the openat() call"},
{"lineNum":" 1334","line":"        // is successful."},
{"lineNum":" 1335","line":"        const nonblocking_lock_flag: u32 = if (has_flock_open_flags and flags.lock_nonblocking)"},
{"lineNum":" 1336","line":"            os.O.NONBLOCK"},
{"lineNum":" 1337","line":"        else"},
{"lineNum":" 1338","line":"            0;"},
{"lineNum":" 1339","line":"        const lock_flag: u32 = if (has_flock_open_flags) switch (flags.lock) {"},
{"lineNum":" 1340","line":"            .none => @as(u32, 0),"},
{"lineNum":" 1341","line":"            .shared => os.O.SHLOCK | nonblocking_lock_flag,"},
{"lineNum":" 1342","line":"            .exclusive => os.O.EXLOCK | nonblocking_lock_flag,"},
{"lineNum":" 1343","line":"        } else 0;"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":"        const O_LARGEFILE = if (@hasDecl(os.O, \"LARGEFILE\")) os.O.LARGEFILE else 0;"},
{"lineNum":" 1346","line":"        const os_flags = lock_flag | O_LARGEFILE | os.O.CREAT | os.O.CLOEXEC |"},
{"lineNum":" 1347","line":"            (if (flags.truncate) @as(u32, os.O.TRUNC) else 0) |"},
{"lineNum":" 1348","line":"            (if (flags.read) @as(u32, os.O.RDWR) else os.O.WRONLY) |"},
{"lineNum":" 1349","line":"            (if (flags.exclusive) @as(u32, os.O.EXCL) else 0);"},
{"lineNum":" 1350","line":"        const fd = if (flags.intended_io_mode != .blocking)"},
{"lineNum":" 1351","line":"            try std.event.Loop.instance.?.openatZ(self.fd, sub_path_c, os_flags, flags.mode)"},
{"lineNum":" 1352","line":"        else"},
{"lineNum":" 1353","line":"            try os.openatZ(self.fd, sub_path_c, os_flags, flags.mode);"},
{"lineNum":" 1354","line":"        errdefer os.close(fd);"},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"        // WASI doesn\'t have os.flock so we intetinally check OS prior to the inner if block"},
{"lineNum":" 1357","line":"        // since it is not compiltime-known and we need to avoid undefined symbol in Wasm."},
{"lineNum":" 1358","line":"        if (builtin.target.os.tag != .wasi) {"},
{"lineNum":" 1359","line":"            if (!has_flock_open_flags and flags.lock != .none) {"},
{"lineNum":" 1360","line":"                // TODO: integrate async I/O"},
{"lineNum":" 1361","line":"                const lock_nonblocking = if (flags.lock_nonblocking) os.LOCK.NB else @as(i32, 0);"},
{"lineNum":" 1362","line":"                try os.flock(fd, switch (flags.lock) {"},
{"lineNum":" 1363","line":"                    .none => unreachable,"},
{"lineNum":" 1364","line":"                    .shared => os.LOCK.SH | lock_nonblocking,"},
{"lineNum":" 1365","line":"                    .exclusive => os.LOCK.EX | lock_nonblocking,"},
{"lineNum":" 1366","line":"                });"},
{"lineNum":" 1367","line":"            }"},
{"lineNum":" 1368","line":"        }"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"        if (has_flock_open_flags and flags.lock_nonblocking) {"},
{"lineNum":" 1371","line":"            var fl_flags = os.fcntl(fd, os.F.GETFL, 0) catch |err| switch (err) {"},
{"lineNum":" 1372","line":"                error.FileBusy => unreachable,"},
{"lineNum":" 1373","line":"                error.Locked => unreachable,"},
{"lineNum":" 1374","line":"                error.PermissionDenied => unreachable,"},
{"lineNum":" 1375","line":"                error.DeadLock => unreachable,"},
{"lineNum":" 1376","line":"                error.LockedRegionLimitExceeded => unreachable,"},
{"lineNum":" 1377","line":"                else => |e| return e,"},
{"lineNum":" 1378","line":"            };"},
{"lineNum":" 1379","line":"            fl_flags &= ~@as(usize, os.O.NONBLOCK);"},
{"lineNum":" 1380","line":"            _ = os.fcntl(fd, os.F.SETFL, fl_flags) catch |err| switch (err) {"},
{"lineNum":" 1381","line":"                error.FileBusy => unreachable,"},
{"lineNum":" 1382","line":"                error.Locked => unreachable,"},
{"lineNum":" 1383","line":"                error.PermissionDenied => unreachable,"},
{"lineNum":" 1384","line":"                error.DeadLock => unreachable,"},
{"lineNum":" 1385","line":"                error.LockedRegionLimitExceeded => unreachable,"},
{"lineNum":" 1386","line":"                else => |e| return e,"},
{"lineNum":" 1387","line":"            };"},
{"lineNum":" 1388","line":"        }"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"        return File{"},
{"lineNum":" 1391","line":"            .handle = fd,"},
{"lineNum":" 1392","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 1393","line":"            .intended_io_mode = flags.intended_io_mode,"},
{"lineNum":" 1394","line":"        };"},
{"lineNum":" 1395","line":"    }"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"    /// Same as `createFile` but Windows-only and the path parameter is"},
{"lineNum":" 1398","line":"    /// [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded."},
{"lineNum":" 1399","line":"    pub fn createFileW(self: Dir, sub_path_w: []const u16, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 1400","line":"        const w = os.windows;"},
{"lineNum":" 1401","line":"        const read_flag = if (flags.read) @as(u32, w.GENERIC_READ) else 0;"},
{"lineNum":" 1402","line":"        const file: File = .{"},
{"lineNum":" 1403","line":"            .handle = try os.windows.OpenFile(sub_path_w, .{"},
{"lineNum":" 1404","line":"                .dir = self.fd,"},
{"lineNum":" 1405","line":"                .access_mask = w.SYNCHRONIZE | w.GENERIC_WRITE | read_flag,"},
{"lineNum":" 1406","line":"                .creation = if (flags.exclusive)"},
{"lineNum":" 1407","line":"                    @as(u32, w.FILE_CREATE)"},
{"lineNum":" 1408","line":"                else if (flags.truncate)"},
{"lineNum":" 1409","line":"                    @as(u32, w.FILE_OVERWRITE_IF)"},
{"lineNum":" 1410","line":"                else"},
{"lineNum":" 1411","line":"                    @as(u32, w.FILE_OPEN_IF),"},
{"lineNum":" 1412","line":"                .io_mode = flags.intended_io_mode,"},
{"lineNum":" 1413","line":"            }),"},
{"lineNum":" 1414","line":"            .capable_io_mode = std.io.default_mode,"},
{"lineNum":" 1415","line":"            .intended_io_mode = flags.intended_io_mode,"},
{"lineNum":" 1416","line":"        };"},
{"lineNum":" 1417","line":"        errdefer file.close();"},
{"lineNum":" 1418","line":"        var io: w.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1419","line":"        const range_off: w.LARGE_INTEGER = 0;"},
{"lineNum":" 1420","line":"        const range_len: w.LARGE_INTEGER = 1;"},
{"lineNum":" 1421","line":"        const exclusive = switch (flags.lock) {"},
{"lineNum":" 1422","line":"            .none => return file,"},
{"lineNum":" 1423","line":"            .shared => false,"},
{"lineNum":" 1424","line":"            .exclusive => true,"},
{"lineNum":" 1425","line":"        };"},
{"lineNum":" 1426","line":"        try w.LockFile("},
{"lineNum":" 1427","line":"            file.handle,"},
{"lineNum":" 1428","line":"            null,"},
{"lineNum":" 1429","line":"            null,"},
{"lineNum":" 1430","line":"            null,"},
{"lineNum":" 1431","line":"            &io,"},
{"lineNum":" 1432","line":"            &range_off,"},
{"lineNum":" 1433","line":"            &range_len,"},
{"lineNum":" 1434","line":"            null,"},
{"lineNum":" 1435","line":"            @intFromBool(flags.lock_nonblocking),"},
{"lineNum":" 1436","line":"            @intFromBool(exclusive),"},
{"lineNum":" 1437","line":"        );"},
{"lineNum":" 1438","line":"        return file;"},
{"lineNum":" 1439","line":"    }"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"    /// Creates a single directory with a relative or absolute path."},
{"lineNum":" 1442","line":"    /// To create multiple directories to make an entire path, see `makePath`."},
{"lineNum":" 1443","line":"    /// To operate on only absolute paths, see `makeDirAbsolute`."},
{"lineNum":" 1444","line":"    pub fn makeDir(self: Dir, sub_path: []const u8) !void {"},
{"lineNum":" 1445","line":"        try os.mkdirat(self.fd, sub_path, default_new_dir_mode);"},
{"lineNum":" 1446","line":"    }"},
{"lineNum":" 1447","line":""},
{"lineNum":" 1448","line":"    /// Creates a single directory with a relative or absolute null-terminated UTF-8-encoded path."},
{"lineNum":" 1449","line":"    /// To create multiple directories to make an entire path, see `makePath`."},
{"lineNum":" 1450","line":"    /// To operate on only absolute paths, see `makeDirAbsoluteZ`."},
{"lineNum":" 1451","line":"    pub fn makeDirZ(self: Dir, sub_path: [*:0]const u8) !void {"},
{"lineNum":" 1452","line":"        try os.mkdiratZ(self.fd, sub_path, default_new_dir_mode);"},
{"lineNum":" 1453","line":"    }"},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"    /// Creates a single directory with a relative or absolute null-terminated WTF-16-encoded path."},
{"lineNum":" 1456","line":"    /// To create multiple directories to make an entire path, see `makePath`."},
{"lineNum":" 1457","line":"    /// To operate on only absolute paths, see `makeDirAbsoluteW`."},
{"lineNum":" 1458","line":"    pub fn makeDirW(self: Dir, sub_path: [*:0]const u16) !void {"},
{"lineNum":" 1459","line":"        try os.mkdiratW(self.fd, sub_path, default_new_dir_mode);"},
{"lineNum":" 1460","line":"    }"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"    /// Calls makeDir recursively to make an entire path. Returns success if the path"},
{"lineNum":" 1463","line":"    /// already exists and is a directory."},
{"lineNum":" 1464","line":"    /// This function is not atomic, and if it returns an error, the file system may"},
{"lineNum":" 1465","line":"    /// have been modified regardless."},
{"lineNum":" 1466","line":"    pub fn makePath(self: Dir, sub_path: []const u8) !void {"},
{"lineNum":" 1467","line":"        var it = try path.componentIterator(sub_path);"},
{"lineNum":" 1468","line":"        var component = it.last() orelse return;"},
{"lineNum":" 1469","line":"        while (true) {"},
{"lineNum":" 1470","line":"            self.makeDir(component.path) catch |err| switch (err) {"},
{"lineNum":" 1471","line":"                error.PathAlreadyExists => {"},
{"lineNum":" 1472","line":"                    // TODO stat the file and return an error if it\'s not a directory"},
{"lineNum":" 1473","line":"                    // this is important because otherwise a dangling symlink"},
{"lineNum":" 1474","line":"                    // could cause an infinite loop"},
{"lineNum":" 1475","line":"                },"},
{"lineNum":" 1476","line":"                error.FileNotFound => |e| {"},
{"lineNum":" 1477","line":"                    component = it.previous() orelse return e;"},
{"lineNum":" 1478","line":"                    continue;"},
{"lineNum":" 1479","line":"                },"},
{"lineNum":" 1480","line":"                else => |e| return e,"},
{"lineNum":" 1481","line":"            };"},
{"lineNum":" 1482","line":"            component = it.next() orelse return;"},
{"lineNum":" 1483","line":"        }"},
{"lineNum":" 1484","line":"    }"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"    /// This function performs `makePath`, followed by `openDir`."},
{"lineNum":" 1487","line":"    /// If supported by the OS, this operation is atomic. It is not atomic on"},
{"lineNum":" 1488","line":"    /// all operating systems."},
{"lineNum":" 1489","line":"    pub fn makeOpenPath(self: Dir, sub_path: []const u8, open_dir_options: OpenDirOptions) !Dir {"},
{"lineNum":" 1490","line":"        // TODO improve this implementation on Windows; we can avoid 1 call to NtClose"},
{"lineNum":" 1491","line":"        try self.makePath(sub_path);"},
{"lineNum":" 1492","line":"        return self.openDir(sub_path, open_dir_options);"},
{"lineNum":" 1493","line":"    }"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"    /// This function performs `makePath`, followed by `openIterableDir`."},
{"lineNum":" 1496","line":"    /// If supported by the OS, this operation is atomic. It is not atomic on"},
{"lineNum":" 1497","line":"    /// all operating systems."},
{"lineNum":" 1498","line":"    pub fn makeOpenPathIterable(self: Dir, sub_path: []const u8, open_dir_options: OpenDirOptions) !IterableDir {"},
{"lineNum":" 1499","line":"        // TODO improve this implementation on Windows; we can avoid 1 call to NtClose"},
{"lineNum":" 1500","line":"        try self.makePath(sub_path);"},
{"lineNum":" 1501","line":"        return self.openIterableDir(sub_path, open_dir_options);"},
{"lineNum":" 1502","line":"    }"},
{"lineNum":" 1503","line":""},
{"lineNum":" 1504","line":"    ///  This function returns the canonicalized absolute pathname of"},
{"lineNum":" 1505","line":"    /// `pathname` relative to this `Dir`. If `pathname` is absolute, ignores this"},
{"lineNum":" 1506","line":"    /// `Dir` handle and returns the canonicalized absolute pathname of `pathname`"},
{"lineNum":" 1507","line":"    /// argument."},
{"lineNum":" 1508","line":"    /// This function is not universally supported by all platforms."},
{"lineNum":" 1509","line":"    /// Currently supported hosts are: Linux, macOS, and Windows."},
{"lineNum":" 1510","line":"    /// See also `Dir.realpathZ`, `Dir.realpathW`, and `Dir.realpathAlloc`."},
{"lineNum":" 1511","line":"    pub fn realpath(self: Dir, pathname: []const u8, out_buffer: []u8) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1512","line":"        if (builtin.os.tag == .wasi) {"},
{"lineNum":" 1513","line":"            @compileError(\"realpath is not available on WASI\");"},
{"lineNum":" 1514","line":"        }"},
{"lineNum":" 1515","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1516","line":"            const pathname_w = try os.windows.sliceToPrefixedFileW(pathname);"},
{"lineNum":" 1517","line":"            return self.realpathW(pathname_w.span(), out_buffer);"},
{"lineNum":" 1518","line":"        }"},
{"lineNum":" 1519","line":"        const pathname_c = try os.toPosixPath(pathname);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1520","line":"        return self.realpathZ(&pathname_c, out_buffer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1521","line":"    }"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"    /// Same as `Dir.realpath` except `pathname` is null-terminated."},
{"lineNum":" 1524","line":"    /// See also `Dir.realpath`, `realpathZ`."},
{"lineNum":" 1525","line":"    pub fn realpathZ(self: Dir, pathname: [*:0]const u8, out_buffer: []u8) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1526","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1527","line":"            const pathname_w = try os.windows.cStrToPrefixedFileW(pathname);"},
{"lineNum":" 1528","line":"            return self.realpathW(pathname_w.span(), out_buffer);"},
{"lineNum":" 1529","line":"        }"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"        const flags = if (builtin.os.tag == .linux) os.O.PATH | os.O.NONBLOCK | os.O.CLOEXEC else os.O.NONBLOCK | os.O.CLOEXEC;"},
{"lineNum":" 1532","line":"        const fd = os.openatZ(self.fd, pathname, flags, 0) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1533","line":"            error.FileLocksNotSupported => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1534","line":"            else => |e| return e,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1535","line":"        };"},
{"lineNum":" 1536","line":"        defer os.close(fd);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"        // Use of MAX_PATH_BYTES here is valid as the realpath function does not"},
{"lineNum":" 1539","line":"        // have a variant that takes an arbitrary-size buffer."},
{"lineNum":" 1540","line":"        // TODO(#4812): Consider reimplementing realpath or using the POSIX.1-2008"},
{"lineNum":" 1541","line":"        // NULL out parameter (GNU\'s canonicalize_file_name) to handle overelong"},
{"lineNum":" 1542","line":"        // paths. musl supports passing NULL but restricts the output to PATH_MAX"},
{"lineNum":" 1543","line":"        // anyway."},
{"lineNum":" 1544","line":"        var buffer: [MAX_PATH_BYTES]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1545","line":"        const out_path = try os.getFdPath(fd, &buffer);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1546","line":""},
{"lineNum":" 1547","line":"        if (out_path.len > out_buffer.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1548","line":"            return error.NameTooLong;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1549","line":"        }"},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"        const result = out_buffer[0..out_path.len];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1552","line":"        @memcpy(result, out_path);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1553","line":"        return result;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1554","line":"    }"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"    /// Windows-only. Same as `Dir.realpath` except `pathname` is WTF16 encoded."},
{"lineNum":" 1557","line":"    /// See also `Dir.realpath`, `realpathW`."},
{"lineNum":" 1558","line":"    pub fn realpathW(self: Dir, pathname: []const u16, out_buffer: []u8) ![]u8 {"},
{"lineNum":" 1559","line":"        const w = os.windows;"},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"        const access_mask = w.GENERIC_READ | w.SYNCHRONIZE;"},
{"lineNum":" 1562","line":"        const share_access = w.FILE_SHARE_READ;"},
{"lineNum":" 1563","line":"        const creation = w.FILE_OPEN;"},
{"lineNum":" 1564","line":"        const h_file = blk: {"},
{"lineNum":" 1565","line":"            const res = w.OpenFile(pathname, .{"},
{"lineNum":" 1566","line":"                .dir = self.fd,"},
{"lineNum":" 1567","line":"                .access_mask = access_mask,"},
{"lineNum":" 1568","line":"                .share_access = share_access,"},
{"lineNum":" 1569","line":"                .creation = creation,"},
{"lineNum":" 1570","line":"                .io_mode = .blocking,"},
{"lineNum":" 1571","line":"            }) catch |err| switch (err) {"},
{"lineNum":" 1572","line":"                error.IsDir => break :blk w.OpenFile(pathname, .{"},
{"lineNum":" 1573","line":"                    .dir = self.fd,"},
{"lineNum":" 1574","line":"                    .access_mask = access_mask,"},
{"lineNum":" 1575","line":"                    .share_access = share_access,"},
{"lineNum":" 1576","line":"                    .creation = creation,"},
{"lineNum":" 1577","line":"                    .io_mode = .blocking,"},
{"lineNum":" 1578","line":"                    .filter = .dir_only,"},
{"lineNum":" 1579","line":"                }) catch |er| switch (er) {"},
{"lineNum":" 1580","line":"                    error.WouldBlock => unreachable,"},
{"lineNum":" 1581","line":"                    else => |e2| return e2,"},
{"lineNum":" 1582","line":"                },"},
{"lineNum":" 1583","line":"                error.WouldBlock => unreachable,"},
{"lineNum":" 1584","line":"                else => |e| return e,"},
{"lineNum":" 1585","line":"            };"},
{"lineNum":" 1586","line":"            break :blk res;"},
{"lineNum":" 1587","line":"        };"},
{"lineNum":" 1588","line":"        defer w.CloseHandle(h_file);"},
{"lineNum":" 1589","line":""},
{"lineNum":" 1590","line":"        // Use of MAX_PATH_BYTES here is valid as the realpath function does not"},
{"lineNum":" 1591","line":"        // have a variant that takes an arbitrary-size buffer."},
{"lineNum":" 1592","line":"        // TODO(#4812): Consider reimplementing realpath or using the POSIX.1-2008"},
{"lineNum":" 1593","line":"        // NULL out parameter (GNU\'s canonicalize_file_name) to handle overelong"},
{"lineNum":" 1594","line":"        // paths. musl supports passing NULL but restricts the output to PATH_MAX"},
{"lineNum":" 1595","line":"        // anyway."},
{"lineNum":" 1596","line":"        var buffer: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 1597","line":"        const out_path = try os.getFdPath(h_file, &buffer);"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"        if (out_path.len > out_buffer.len) {"},
{"lineNum":" 1600","line":"            return error.NameTooLong;"},
{"lineNum":" 1601","line":"        }"},
{"lineNum":" 1602","line":""},
{"lineNum":" 1603","line":"        const result = out_buffer[0..out_path.len];"},
{"lineNum":" 1604","line":"        @memcpy(result, out_path);"},
{"lineNum":" 1605","line":"        return result;"},
{"lineNum":" 1606","line":"    }"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"    /// Same as `Dir.realpath` except caller must free the returned memory."},
{"lineNum":" 1609","line":"    /// See also `Dir.realpath`."},
{"lineNum":" 1610","line":"    pub fn realpathAlloc(self: Dir, allocator: Allocator, pathname: []const u8) ![]u8 {"},
{"lineNum":" 1611","line":"        // Use of MAX_PATH_BYTES here is valid as the realpath function does not"},
{"lineNum":" 1612","line":"        // have a variant that takes an arbitrary-size buffer."},
{"lineNum":" 1613","line":"        // TODO(#4812): Consider reimplementing realpath or using the POSIX.1-2008"},
{"lineNum":" 1614","line":"        // NULL out parameter (GNU\'s canonicalize_file_name) to handle overelong"},
{"lineNum":" 1615","line":"        // paths. musl supports passing NULL but restricts the output to PATH_MAX"},
{"lineNum":" 1616","line":"        // anyway."},
{"lineNum":" 1617","line":"        var buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 1618","line":"        return allocator.dupe(u8, try self.realpath(pathname, buf[0..]));"},
{"lineNum":" 1619","line":"    }"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"    /// Changes the current working directory to the open directory handle."},
{"lineNum":" 1622","line":"    /// This modifies global state and can have surprising effects in multi-"},
{"lineNum":" 1623","line":"    /// threaded applications. Most applications and especially libraries should"},
{"lineNum":" 1624","line":"    /// not call this function as a general rule, however it can have use cases"},
{"lineNum":" 1625","line":"    /// in, for example, implementing a shell, or child process execution."},
{"lineNum":" 1626","line":"    /// Not all targets support this. For example, WASI does not have the concept"},
{"lineNum":" 1627","line":"    /// of a current working directory."},
{"lineNum":" 1628","line":"    pub fn setAsCwd(self: Dir) !void {"},
{"lineNum":" 1629","line":"        if (builtin.os.tag == .wasi) {"},
{"lineNum":" 1630","line":"            @compileError(\"changing cwd is not currently possible in WASI\");"},
{"lineNum":" 1631","line":"        }"},
{"lineNum":" 1632","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1633","line":"            var dir_path_buffer: [os.windows.PATH_MAX_WIDE]u16 = undefined;"},
{"lineNum":" 1634","line":"            var dir_path = try os.windows.GetFinalPathNameByHandle(self.fd, .{}, &dir_path_buffer);"},
{"lineNum":" 1635","line":"            if (builtin.link_libc) {"},
{"lineNum":" 1636","line":"                return os.chdirW(dir_path);"},
{"lineNum":" 1637","line":"            }"},
{"lineNum":" 1638","line":"            return os.windows.SetCurrentDirectory(dir_path);"},
{"lineNum":" 1639","line":"        }"},
{"lineNum":" 1640","line":"        try os.fchdir(self.fd);"},
{"lineNum":" 1641","line":"    }"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"    pub const OpenDirOptions = struct {"},
{"lineNum":" 1644","line":"        /// `true` means the opened directory can be used as the `Dir` parameter"},
{"lineNum":" 1645","line":"        /// for functions which operate based on an open directory handle. When `false`,"},
{"lineNum":" 1646","line":"        /// such operations are Illegal Behavior."},
{"lineNum":" 1647","line":"        access_sub_paths: bool = true,"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"        /// `true` means it won\'t dereference the symlinks."},
{"lineNum":" 1650","line":"        no_follow: bool = false,"},
{"lineNum":" 1651","line":"    };"},
{"lineNum":" 1652","line":""},
{"lineNum":" 1653","line":"    /// Opens a directory at the given path. The directory is a system resource that remains"},
{"lineNum":" 1654","line":"    /// open until `close` is called on the result."},
{"lineNum":" 1655","line":"    ///"},
{"lineNum":" 1656","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 1657","line":"    pub fn openDir(self: Dir, sub_path: []const u8, args: OpenDirOptions) OpenError!Dir {"},
{"lineNum":" 1658","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1659","line":"            const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 1660","line":"            return self.openDirW(sub_path_w.span().ptr, args, false);"},
{"lineNum":" 1661","line":"        } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1662","line":"            return self.openDirWasi(sub_path, args);"},
{"lineNum":" 1663","line":"        } else {"},
{"lineNum":" 1664","line":"            const sub_path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 1665","line":"            return self.openDirZ(&sub_path_c, args, false);"},
{"lineNum":" 1666","line":"        }"},
{"lineNum":" 1667","line":"    }"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"    /// Opens an iterable directory at the given path. The directory is a system resource that remains"},
{"lineNum":" 1670","line":"    /// open until `close` is called on the result."},
{"lineNum":" 1671","line":"    ///"},
{"lineNum":" 1672","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 1673","line":"    pub fn openIterableDir(self: Dir, sub_path: []const u8, args: OpenDirOptions) OpenError!IterableDir {"},
{"lineNum":" 1674","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1675","line":"            const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 1676","line":"            return IterableDir{ .dir = try self.openDirW(sub_path_w.span().ptr, args, true) };"},
{"lineNum":" 1677","line":"        } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1678","line":"            return IterableDir{ .dir = try self.openDirWasi(sub_path, args) };"},
{"lineNum":" 1679","line":"        } else {"},
{"lineNum":" 1680","line":"            const sub_path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 1681","line":"            return IterableDir{ .dir = try self.openDirZ(&sub_path_c, args, true) };"},
{"lineNum":" 1682","line":"        }"},
{"lineNum":" 1683","line":"    }"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"    /// Same as `openDir` except only WASI."},
{"lineNum":" 1686","line":"    pub fn openDirWasi(self: Dir, sub_path: []const u8, args: OpenDirOptions) OpenError!Dir {"},
{"lineNum":" 1687","line":"        const w = os.wasi;"},
{"lineNum":" 1688","line":"        var base: w.rights_t = w.RIGHT.FD_FILESTAT_GET | w.RIGHT.FD_FDSTAT_SET_FLAGS | w.RIGHT.FD_FILESTAT_SET_TIMES;"},
{"lineNum":" 1689","line":"        if (args.access_sub_paths) {"},
{"lineNum":" 1690","line":"            base |= w.RIGHT.FD_READDIR |"},
{"lineNum":" 1691","line":"                w.RIGHT.PATH_CREATE_DIRECTORY |"},
{"lineNum":" 1692","line":"                w.RIGHT.PATH_CREATE_FILE |"},
{"lineNum":" 1693","line":"                w.RIGHT.PATH_LINK_SOURCE |"},
{"lineNum":" 1694","line":"                w.RIGHT.PATH_LINK_TARGET |"},
{"lineNum":" 1695","line":"                w.RIGHT.PATH_OPEN |"},
{"lineNum":" 1696","line":"                w.RIGHT.PATH_READLINK |"},
{"lineNum":" 1697","line":"                w.RIGHT.PATH_RENAME_SOURCE |"},
{"lineNum":" 1698","line":"                w.RIGHT.PATH_RENAME_TARGET |"},
{"lineNum":" 1699","line":"                w.RIGHT.PATH_FILESTAT_GET |"},
{"lineNum":" 1700","line":"                w.RIGHT.PATH_FILESTAT_SET_SIZE |"},
{"lineNum":" 1701","line":"                w.RIGHT.PATH_FILESTAT_SET_TIMES |"},
{"lineNum":" 1702","line":"                w.RIGHT.PATH_SYMLINK |"},
{"lineNum":" 1703","line":"                w.RIGHT.PATH_REMOVE_DIRECTORY |"},
{"lineNum":" 1704","line":"                w.RIGHT.PATH_UNLINK_FILE;"},
{"lineNum":" 1705","line":"        }"},
{"lineNum":" 1706","line":"        const symlink_flags: w.lookupflags_t = if (args.no_follow) 0x0 else w.LOOKUP_SYMLINK_FOLLOW;"},
{"lineNum":" 1707","line":"        // TODO do we really need all the rights here?"},
{"lineNum":" 1708","line":"        const inheriting: w.rights_t = w.RIGHT.ALL ^ w.RIGHT.SOCK_SHUTDOWN;"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"        const result = os.openatWasi("},
{"lineNum":" 1711","line":"            self.fd,"},
{"lineNum":" 1712","line":"            sub_path,"},
{"lineNum":" 1713","line":"            symlink_flags,"},
{"lineNum":" 1714","line":"            w.O.DIRECTORY,"},
{"lineNum":" 1715","line":"            0x0,"},
{"lineNum":" 1716","line":"            base,"},
{"lineNum":" 1717","line":"            inheriting,"},
{"lineNum":" 1718","line":"        );"},
{"lineNum":" 1719","line":"        const fd = result catch |err| switch (err) {"},
{"lineNum":" 1720","line":"            error.FileTooBig => unreachable, // can\'t happen for directories"},
{"lineNum":" 1721","line":"            error.IsDir => unreachable, // we\'re providing O.DIRECTORY"},
{"lineNum":" 1722","line":"            error.NoSpaceLeft => unreachable, // not providing O.CREAT"},
{"lineNum":" 1723","line":"            error.PathAlreadyExists => unreachable, // not providing O.CREAT"},
{"lineNum":" 1724","line":"            error.FileLocksNotSupported => unreachable, // locking folders is not supported"},
{"lineNum":" 1725","line":"            error.WouldBlock => unreachable, // can\'t happen for directories"},
{"lineNum":" 1726","line":"            error.FileBusy => unreachable, // can\'t happen for directories"},
{"lineNum":" 1727","line":"            else => |e| return e,"},
{"lineNum":" 1728","line":"        };"},
{"lineNum":" 1729","line":"        return Dir{ .fd = fd };"},
{"lineNum":" 1730","line":"    }"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"    /// Same as `openDir` except the parameter is null-terminated."},
{"lineNum":" 1733","line":"    pub fn openDirZ(self: Dir, sub_path_c: [*:0]const u8, args: OpenDirOptions, iterable: bool) OpenError!Dir {"},
{"lineNum":" 1734","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1735","line":"            const sub_path_w = try os.windows.cStrToPrefixedFileW(sub_path_c);"},
{"lineNum":" 1736","line":"            return self.openDirW(sub_path_w.span().ptr, args, iterable);"},
{"lineNum":" 1737","line":"        }"},
{"lineNum":" 1738","line":"        const symlink_flags: u32 = if (args.no_follow) os.O.NOFOLLOW else 0x0;"},
{"lineNum":" 1739","line":"        if (!iterable) {"},
{"lineNum":" 1740","line":"            const O_PATH = if (@hasDecl(os.O, \"PATH\")) os.O.PATH else 0;"},
{"lineNum":" 1741","line":"            return self.openDirFlagsZ(sub_path_c, os.O.DIRECTORY | os.O.RDONLY | os.O.CLOEXEC | O_PATH | symlink_flags);"},
{"lineNum":" 1742","line":"        } else {"},
{"lineNum":" 1743","line":"            return self.openDirFlagsZ(sub_path_c, os.O.DIRECTORY | os.O.RDONLY | os.O.CLOEXEC | symlink_flags);"},
{"lineNum":" 1744","line":"        }"},
{"lineNum":" 1745","line":"    }"},
{"lineNum":" 1746","line":""},
{"lineNum":" 1747","line":"    /// Same as `openDir` except the path parameter is WTF-16 encoded, NT-prefixed."},
{"lineNum":" 1748","line":"    /// This function asserts the target OS is Windows."},
{"lineNum":" 1749","line":"    pub fn openDirW(self: Dir, sub_path_w: [*:0]const u16, args: OpenDirOptions, iterable: bool) OpenError!Dir {"},
{"lineNum":" 1750","line":"        const w = os.windows;"},
{"lineNum":" 1751","line":"        // TODO remove some of these flags if args.access_sub_paths is false"},
{"lineNum":" 1752","line":"        const base_flags = w.STANDARD_RIGHTS_READ | w.FILE_READ_ATTRIBUTES | w.FILE_READ_EA |"},
{"lineNum":" 1753","line":"            w.SYNCHRONIZE | w.FILE_TRAVERSE;"},
{"lineNum":" 1754","line":"        const flags: u32 = if (iterable) base_flags | w.FILE_LIST_DIRECTORY else base_flags;"},
{"lineNum":" 1755","line":"        var dir = try self.openDirAccessMaskW(sub_path_w, flags, args.no_follow);"},
{"lineNum":" 1756","line":"        return dir;"},
{"lineNum":" 1757","line":"    }"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"    /// `flags` must contain `os.O.DIRECTORY`."},
{"lineNum":" 1760","line":"    fn openDirFlagsZ(self: Dir, sub_path_c: [*:0]const u8, flags: u32) OpenError!Dir {"},
{"lineNum":" 1761","line":"        const result = if (need_async_thread)"},
{"lineNum":" 1762","line":"            std.event.Loop.instance.?.openatZ(self.fd, sub_path_c, flags, 0)"},
{"lineNum":" 1763","line":"        else"},
{"lineNum":" 1764","line":"            os.openatZ(self.fd, sub_path_c, flags, 0);"},
{"lineNum":" 1765","line":"        const fd = result catch |err| switch (err) {"},
{"lineNum":" 1766","line":"            error.FileTooBig => unreachable, // can\'t happen for directories"},
{"lineNum":" 1767","line":"            error.IsDir => unreachable, // we\'re providing O.DIRECTORY"},
{"lineNum":" 1768","line":"            error.NoSpaceLeft => unreachable, // not providing O.CREAT"},
{"lineNum":" 1769","line":"            error.PathAlreadyExists => unreachable, // not providing O.CREAT"},
{"lineNum":" 1770","line":"            error.FileLocksNotSupported => unreachable, // locking folders is not supported"},
{"lineNum":" 1771","line":"            error.WouldBlock => unreachable, // can\'t happen for directories"},
{"lineNum":" 1772","line":"            error.FileBusy => unreachable, // can\'t happen for directories"},
{"lineNum":" 1773","line":"            else => |e| return e,"},
{"lineNum":" 1774","line":"        };"},
{"lineNum":" 1775","line":"        return Dir{ .fd = fd };"},
{"lineNum":" 1776","line":"    }"},
{"lineNum":" 1777","line":""},
{"lineNum":" 1778","line":"    fn openDirAccessMaskW(self: Dir, sub_path_w: [*:0]const u16, access_mask: u32, no_follow: bool) OpenError!Dir {"},
{"lineNum":" 1779","line":"        const w = os.windows;"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"        var result = Dir{"},
{"lineNum":" 1782","line":"            .fd = undefined,"},
{"lineNum":" 1783","line":"        };"},
{"lineNum":" 1784","line":""},
{"lineNum":" 1785","line":"        const path_len_bytes = @as(u16, @intCast(mem.sliceTo(sub_path_w, 0).len * 2));"},
{"lineNum":" 1786","line":"        var nt_name = w.UNICODE_STRING{"},
{"lineNum":" 1787","line":"            .Length = path_len_bytes,"},
{"lineNum":" 1788","line":"            .MaximumLength = path_len_bytes,"},
{"lineNum":" 1789","line":"            .Buffer = @constCast(sub_path_w),"},
{"lineNum":" 1790","line":"        };"},
{"lineNum":" 1791","line":"        var attr = w.OBJECT_ATTRIBUTES{"},
{"lineNum":" 1792","line":"            .Length = @sizeOf(w.OBJECT_ATTRIBUTES),"},
{"lineNum":" 1793","line":"            .RootDirectory = if (path.isAbsoluteWindowsW(sub_path_w)) null else self.fd,"},
{"lineNum":" 1794","line":"            .Attributes = 0, // Note we do not use OBJ_CASE_INSENSITIVE here."},
{"lineNum":" 1795","line":"            .ObjectName = &nt_name,"},
{"lineNum":" 1796","line":"            .SecurityDescriptor = null,"},
{"lineNum":" 1797","line":"            .SecurityQualityOfService = null,"},
{"lineNum":" 1798","line":"        };"},
{"lineNum":" 1799","line":"        const open_reparse_point: w.DWORD = if (no_follow) w.FILE_OPEN_REPARSE_POINT else 0x0;"},
{"lineNum":" 1800","line":"        var io: w.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1801","line":"        const rc = w.ntdll.NtCreateFile("},
{"lineNum":" 1802","line":"            &result.fd,"},
{"lineNum":" 1803","line":"            access_mask,"},
{"lineNum":" 1804","line":"            &attr,"},
{"lineNum":" 1805","line":"            &io,"},
{"lineNum":" 1806","line":"            null,"},
{"lineNum":" 1807","line":"            0,"},
{"lineNum":" 1808","line":"            w.FILE_SHARE_READ | w.FILE_SHARE_WRITE,"},
{"lineNum":" 1809","line":"            w.FILE_OPEN,"},
{"lineNum":" 1810","line":"            w.FILE_DIRECTORY_FILE | w.FILE_SYNCHRONOUS_IO_NONALERT | w.FILE_OPEN_FOR_BACKUP_INTENT | open_reparse_point,"},
{"lineNum":" 1811","line":"            null,"},
{"lineNum":" 1812","line":"            0,"},
{"lineNum":" 1813","line":"        );"},
{"lineNum":" 1814","line":"        switch (rc) {"},
{"lineNum":" 1815","line":"            .SUCCESS => return result,"},
{"lineNum":" 1816","line":"            .OBJECT_NAME_INVALID => unreachable,"},
{"lineNum":" 1817","line":"            .OBJECT_NAME_NOT_FOUND => return error.FileNotFound,"},
{"lineNum":" 1818","line":"            .OBJECT_PATH_NOT_FOUND => return error.FileNotFound,"},
{"lineNum":" 1819","line":"            .NOT_A_DIRECTORY => return error.NotDir,"},
{"lineNum":" 1820","line":"            // This can happen if the directory has \'List folder contents\' permission set to \'Deny\'"},
{"lineNum":" 1821","line":"            // and the directory is trying to be opened for iteration."},
{"lineNum":" 1822","line":"            .ACCESS_DENIED => return error.AccessDenied,"},
{"lineNum":" 1823","line":"            .INVALID_PARAMETER => unreachable,"},
{"lineNum":" 1824","line":"            else => return w.unexpectedStatus(rc),"},
{"lineNum":" 1825","line":"        }"},
{"lineNum":" 1826","line":"    }"},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"    pub const DeleteFileError = os.UnlinkError;"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"    /// Delete a file name and possibly the file it refers to, based on an open directory handle."},
{"lineNum":" 1831","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 1832","line":"    pub fn deleteFile(self: Dir, sub_path: []const u8) DeleteFileError!void {"},
{"lineNum":" 1833","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1834","line":"            const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 1835","line":"            return self.deleteFileW(sub_path_w.span());"},
{"lineNum":" 1836","line":"        } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1837","line":"            os.unlinkat(self.fd, sub_path, 0) catch |err| switch (err) {"},
{"lineNum":" 1838","line":"                error.DirNotEmpty => unreachable, // not passing AT.REMOVEDIR"},
{"lineNum":" 1839","line":"                else => |e| return e,"},
{"lineNum":" 1840","line":"            };"},
{"lineNum":" 1841","line":"        } else {"},
{"lineNum":" 1842","line":"            const sub_path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 1843","line":"            return self.deleteFileZ(&sub_path_c);"},
{"lineNum":" 1844","line":"        }"},
{"lineNum":" 1845","line":"    }"},
{"lineNum":" 1846","line":""},
{"lineNum":" 1847","line":"    /// Same as `deleteFile` except the parameter is null-terminated."},
{"lineNum":" 1848","line":"    pub fn deleteFileZ(self: Dir, sub_path_c: [*:0]const u8) DeleteFileError!void {"},
{"lineNum":" 1849","line":"        os.unlinkatZ(self.fd, sub_path_c, 0) catch |err| switch (err) {"},
{"lineNum":" 1850","line":"            error.DirNotEmpty => unreachable, // not passing AT.REMOVEDIR"},
{"lineNum":" 1851","line":"            error.AccessDenied => |e| switch (builtin.os.tag) {"},
{"lineNum":" 1852","line":"                // non-Linux POSIX systems return EPERM when trying to delete a directory, so"},
{"lineNum":" 1853","line":"                // we need to handle that case specifically and translate the error"},
{"lineNum":" 1854","line":"                .macos, .ios, .freebsd, .netbsd, .dragonfly, .openbsd, .solaris => {"},
{"lineNum":" 1855","line":"                    // Don\'t follow symlinks to match unlinkat (which acts on symlinks rather than follows them)"},
{"lineNum":" 1856","line":"                    const fstat = os.fstatatZ(self.fd, sub_path_c, os.AT.SYMLINK_NOFOLLOW) catch return e;"},
{"lineNum":" 1857","line":"                    const is_dir = fstat.mode & os.S.IFMT == os.S.IFDIR;"},
{"lineNum":" 1858","line":"                    return if (is_dir) error.IsDir else e;"},
{"lineNum":" 1859","line":"                },"},
{"lineNum":" 1860","line":"                else => return e,"},
{"lineNum":" 1861","line":"            },"},
{"lineNum":" 1862","line":"            else => |e| return e,"},
{"lineNum":" 1863","line":"        };"},
{"lineNum":" 1864","line":"    }"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"    /// Same as `deleteFile` except the parameter is WTF-16 encoded."},
{"lineNum":" 1867","line":"    pub fn deleteFileW(self: Dir, sub_path_w: []const u16) DeleteFileError!void {"},
{"lineNum":" 1868","line":"        os.unlinkatW(self.fd, sub_path_w, 0) catch |err| switch (err) {"},
{"lineNum":" 1869","line":"            error.DirNotEmpty => unreachable, // not passing AT.REMOVEDIR"},
{"lineNum":" 1870","line":"            else => |e| return e,"},
{"lineNum":" 1871","line":"        };"},
{"lineNum":" 1872","line":"    }"},
{"lineNum":" 1873","line":""},
{"lineNum":" 1874","line":"    pub const DeleteDirError = error{"},
{"lineNum":" 1875","line":"        DirNotEmpty,"},
{"lineNum":" 1876","line":"        FileNotFound,"},
{"lineNum":" 1877","line":"        AccessDenied,"},
{"lineNum":" 1878","line":"        FileBusy,"},
{"lineNum":" 1879","line":"        FileSystem,"},
{"lineNum":" 1880","line":"        SymLinkLoop,"},
{"lineNum":" 1881","line":"        NameTooLong,"},
{"lineNum":" 1882","line":"        NotDir,"},
{"lineNum":" 1883","line":"        SystemResources,"},
{"lineNum":" 1884","line":"        ReadOnlyFileSystem,"},
{"lineNum":" 1885","line":"        InvalidUtf8,"},
{"lineNum":" 1886","line":"        BadPathName,"},
{"lineNum":" 1887","line":"        /// On Windows, `\\\\server` or `\\\\server\\share` was not found."},
{"lineNum":" 1888","line":"        NetworkNotFound,"},
{"lineNum":" 1889","line":"        Unexpected,"},
{"lineNum":" 1890","line":"    };"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"    /// Returns `error.DirNotEmpty` if the directory is not empty."},
{"lineNum":" 1893","line":"    /// To delete a directory recursively, see `deleteTree`."},
{"lineNum":" 1894","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 1895","line":"    pub fn deleteDir(self: Dir, sub_path: []const u8) DeleteDirError!void {"},
{"lineNum":" 1896","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1897","line":"            const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 1898","line":"            return self.deleteDirW(sub_path_w.span());"},
{"lineNum":" 1899","line":"        } else if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1900","line":"            os.unlinkat(self.fd, sub_path, os.AT.REMOVEDIR) catch |err| switch (err) {"},
{"lineNum":" 1901","line":"                error.IsDir => unreachable, // not possible since we pass AT.REMOVEDIR"},
{"lineNum":" 1902","line":"                else => |e| return e,"},
{"lineNum":" 1903","line":"            };"},
{"lineNum":" 1904","line":"        } else {"},
{"lineNum":" 1905","line":"            const sub_path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 1906","line":"            return self.deleteDirZ(&sub_path_c);"},
{"lineNum":" 1907","line":"        }"},
{"lineNum":" 1908","line":"    }"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"    /// Same as `deleteDir` except the parameter is null-terminated."},
{"lineNum":" 1911","line":"    pub fn deleteDirZ(self: Dir, sub_path_c: [*:0]const u8) DeleteDirError!void {"},
{"lineNum":" 1912","line":"        os.unlinkatZ(self.fd, sub_path_c, os.AT.REMOVEDIR) catch |err| switch (err) {"},
{"lineNum":" 1913","line":"            error.IsDir => unreachable, // not possible since we pass AT.REMOVEDIR"},
{"lineNum":" 1914","line":"            else => |e| return e,"},
{"lineNum":" 1915","line":"        };"},
{"lineNum":" 1916","line":"    }"},
{"lineNum":" 1917","line":""},
{"lineNum":" 1918","line":"    /// Same as `deleteDir` except the parameter is UTF16LE, NT prefixed."},
{"lineNum":" 1919","line":"    /// This function is Windows-only."},
{"lineNum":" 1920","line":"    pub fn deleteDirW(self: Dir, sub_path_w: []const u16) DeleteDirError!void {"},
{"lineNum":" 1921","line":"        os.unlinkatW(self.fd, sub_path_w, os.AT.REMOVEDIR) catch |err| switch (err) {"},
{"lineNum":" 1922","line":"            error.IsDir => unreachable, // not possible since we pass AT.REMOVEDIR"},
{"lineNum":" 1923","line":"            else => |e| return e,"},
{"lineNum":" 1924","line":"        };"},
{"lineNum":" 1925","line":"    }"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"    pub const RenameError = os.RenameError;"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"    /// Change the name or location of a file or directory."},
{"lineNum":" 1930","line":"    /// If new_sub_path already exists, it will be replaced."},
{"lineNum":" 1931","line":"    /// Renaming a file over an existing directory or a directory"},
{"lineNum":" 1932","line":"    /// over an existing file will fail with `error.IsDir` or `error.NotDir`"},
{"lineNum":" 1933","line":"    pub fn rename(self: Dir, old_sub_path: []const u8, new_sub_path: []const u8) RenameError!void {"},
{"lineNum":" 1934","line":"        return os.renameat(self.fd, old_sub_path, self.fd, new_sub_path);"},
{"lineNum":" 1935","line":"    }"},
{"lineNum":" 1936","line":""},
{"lineNum":" 1937","line":"    /// Same as `rename` except the parameters are null-terminated."},
{"lineNum":" 1938","line":"    pub fn renameZ(self: Dir, old_sub_path_z: [*:0]const u8, new_sub_path_z: [*:0]const u8) RenameError!void {"},
{"lineNum":" 1939","line":"        return os.renameatZ(self.fd, old_sub_path_z, self.fd, new_sub_path_z);"},
{"lineNum":" 1940","line":"    }"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"    /// Same as `rename` except the parameters are UTF16LE, NT prefixed."},
{"lineNum":" 1943","line":"    /// This function is Windows-only."},
{"lineNum":" 1944","line":"    pub fn renameW(self: Dir, old_sub_path_w: []const u16, new_sub_path_w: []const u16) RenameError!void {"},
{"lineNum":" 1945","line":"        return os.renameatW(self.fd, old_sub_path_w, self.fd, new_sub_path_w);"},
{"lineNum":" 1946","line":"    }"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"    /// Creates a symbolic link named `sym_link_path` which contains the string `target_path`."},
{"lineNum":" 1949","line":"    /// A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent"},
{"lineNum":" 1950","line":"    /// one; the latter case is known as a dangling link."},
{"lineNum":" 1951","line":"    /// If `sym_link_path` exists, it will not be overwritten."},
{"lineNum":" 1952","line":"    pub fn symLink("},
{"lineNum":" 1953","line":"        self: Dir,"},
{"lineNum":" 1954","line":"        target_path: []const u8,"},
{"lineNum":" 1955","line":"        sym_link_path: []const u8,"},
{"lineNum":" 1956","line":"        flags: SymLinkFlags,"},
{"lineNum":" 1957","line":"    ) !void {"},
{"lineNum":" 1958","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 1959","line":"            return self.symLinkWasi(target_path, sym_link_path, flags);"},
{"lineNum":" 1960","line":"        }"},
{"lineNum":" 1961","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1962","line":"            const target_path_w = try os.windows.sliceToPrefixedFileW(target_path);"},
{"lineNum":" 1963","line":"            const sym_link_path_w = try os.windows.sliceToPrefixedFileW(sym_link_path);"},
{"lineNum":" 1964","line":"            return self.symLinkW(target_path_w.span(), sym_link_path_w.span(), flags);"},
{"lineNum":" 1965","line":"        }"},
{"lineNum":" 1966","line":"        const target_path_c = try os.toPosixPath(target_path);"},
{"lineNum":" 1967","line":"        const sym_link_path_c = try os.toPosixPath(sym_link_path);"},
{"lineNum":" 1968","line":"        return self.symLinkZ(&target_path_c, &sym_link_path_c, flags);"},
{"lineNum":" 1969","line":"    }"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"    /// WASI-only. Same as `symLink` except targeting WASI."},
{"lineNum":" 1972","line":"    pub fn symLinkWasi("},
{"lineNum":" 1973","line":"        self: Dir,"},
{"lineNum":" 1974","line":"        target_path: []const u8,"},
{"lineNum":" 1975","line":"        sym_link_path: []const u8,"},
{"lineNum":" 1976","line":"        _: SymLinkFlags,"},
{"lineNum":" 1977","line":"    ) !void {"},
{"lineNum":" 1978","line":"        return os.symlinkat(target_path, self.fd, sym_link_path);"},
{"lineNum":" 1979","line":"    }"},
{"lineNum":" 1980","line":""},
{"lineNum":" 1981","line":"    /// Same as `symLink`, except the pathname parameters are null-terminated."},
{"lineNum":" 1982","line":"    pub fn symLinkZ("},
{"lineNum":" 1983","line":"        self: Dir,"},
{"lineNum":" 1984","line":"        target_path_c: [*:0]const u8,"},
{"lineNum":" 1985","line":"        sym_link_path_c: [*:0]const u8,"},
{"lineNum":" 1986","line":"        flags: SymLinkFlags,"},
{"lineNum":" 1987","line":"    ) !void {"},
{"lineNum":" 1988","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 1989","line":"            const target_path_w = try os.windows.cStrToPrefixedFileW(target_path_c);"},
{"lineNum":" 1990","line":"            const sym_link_path_w = try os.windows.cStrToPrefixedFileW(sym_link_path_c);"},
{"lineNum":" 1991","line":"            return self.symLinkW(target_path_w.span(), sym_link_path_w.span(), flags);"},
{"lineNum":" 1992","line":"        }"},
{"lineNum":" 1993","line":"        return os.symlinkatZ(target_path_c, self.fd, sym_link_path_c);"},
{"lineNum":" 1994","line":"    }"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"    /// Windows-only. Same as `symLink` except the pathname parameters"},
{"lineNum":" 1997","line":"    /// are null-terminated, WTF16 encoded."},
{"lineNum":" 1998","line":"    pub fn symLinkW("},
{"lineNum":" 1999","line":"        self: Dir,"},
{"lineNum":" 2000","line":"        target_path_w: []const u16,"},
{"lineNum":" 2001","line":"        sym_link_path_w: []const u16,"},
{"lineNum":" 2002","line":"        flags: SymLinkFlags,"},
{"lineNum":" 2003","line":"    ) !void {"},
{"lineNum":" 2004","line":"        return os.windows.CreateSymbolicLink(self.fd, sym_link_path_w, target_path_w, flags.is_directory);"},
{"lineNum":" 2005","line":"    }"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"    /// Read value of a symbolic link."},
{"lineNum":" 2008","line":"    /// The return value is a slice of `buffer`, from index `0`."},
{"lineNum":" 2009","line":"    /// Asserts that the path parameter has no null bytes."},
{"lineNum":" 2010","line":"    pub fn readLink(self: Dir, sub_path: []const u8, buffer: []u8) ![]u8 {"},
{"lineNum":" 2011","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":" 2012","line":"            return self.readLinkWasi(sub_path, buffer);"},
{"lineNum":" 2013","line":"        }"},
{"lineNum":" 2014","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 2015","line":"            const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 2016","line":"            return self.readLinkW(sub_path_w.span(), buffer);"},
{"lineNum":" 2017","line":"        }"},
{"lineNum":" 2018","line":"        const sub_path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 2019","line":"        return self.readLinkZ(&sub_path_c, buffer);"},
{"lineNum":" 2020","line":"    }"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"    /// WASI-only. Same as `readLink` except targeting WASI."},
{"lineNum":" 2023","line":"    pub fn readLinkWasi(self: Dir, sub_path: []const u8, buffer: []u8) ![]u8 {"},
{"lineNum":" 2024","line":"        return os.readlinkat(self.fd, sub_path, buffer);"},
{"lineNum":" 2025","line":"    }"},
{"lineNum":" 2026","line":""},
{"lineNum":" 2027","line":"    /// Same as `readLink`, except the `pathname` parameter is null-terminated."},
{"lineNum":" 2028","line":"    pub fn readLinkZ(self: Dir, sub_path_c: [*:0]const u8, buffer: []u8) ![]u8 {"},
{"lineNum":" 2029","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 2030","line":"            const sub_path_w = try os.windows.cStrToPrefixedFileW(sub_path_c);"},
{"lineNum":" 2031","line":"            return self.readLinkW(sub_path_w.span(), buffer);"},
{"lineNum":" 2032","line":"        }"},
{"lineNum":" 2033","line":"        return os.readlinkatZ(self.fd, sub_path_c, buffer);"},
{"lineNum":" 2034","line":"    }"},
{"lineNum":" 2035","line":""},
{"lineNum":" 2036","line":"    /// Windows-only. Same as `readLink` except the pathname parameter"},
{"lineNum":" 2037","line":"    /// is null-terminated, WTF16 encoded."},
{"lineNum":" 2038","line":"    pub fn readLinkW(self: Dir, sub_path_w: []const u16, buffer: []u8) ![]u8 {"},
{"lineNum":" 2039","line":"        return os.windows.ReadLink(self.fd, sub_path_w, buffer);"},
{"lineNum":" 2040","line":"    }"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"    /// Read all of file contents using a preallocated buffer."},
{"lineNum":" 2043","line":"    /// The returned slice has the same pointer as `buffer`. If the length matches `buffer.len`"},
{"lineNum":" 2044","line":"    /// the situation is ambiguous. It could either mean that the entire file was read, and"},
{"lineNum":" 2045","line":"    /// it exactly fits the buffer, or it could mean the buffer was not big enough for the"},
{"lineNum":" 2046","line":"    /// entire file."},
{"lineNum":" 2047","line":"    pub fn readFile(self: Dir, file_path: []const u8, buffer: []u8) ![]u8 {"},
{"lineNum":" 2048","line":"        var file = try self.openFile(file_path, .{});"},
{"lineNum":" 2049","line":"        defer file.close();"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"        const end_index = try file.readAll(buffer);"},
{"lineNum":" 2052","line":"        return buffer[0..end_index];"},
{"lineNum":" 2053","line":"    }"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"    /// On success, caller owns returned buffer."},
{"lineNum":" 2056","line":"    /// If the file is larger than `max_bytes`, returns `error.FileTooBig`."},
{"lineNum":" 2057","line":"    pub fn readFileAlloc(self: Dir, allocator: mem.Allocator, file_path: []const u8, max_bytes: usize) ![]u8 {"},
{"lineNum":" 2058","line":"        return self.readFileAllocOptions(allocator, file_path, max_bytes, null, @alignOf(u8), null);"},
{"lineNum":" 2059","line":"    }"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"    /// On success, caller owns returned buffer."},
{"lineNum":" 2062","line":"    /// If the file is larger than `max_bytes`, returns `error.FileTooBig`."},
{"lineNum":" 2063","line":"    /// If `size_hint` is specified the initial buffer size is calculated using"},
{"lineNum":" 2064","line":"    /// that value, otherwise the effective file size is used instead."},
{"lineNum":" 2065","line":"    /// Allows specifying alignment and a sentinel value."},
{"lineNum":" 2066","line":"    pub fn readFileAllocOptions("},
{"lineNum":" 2067","line":"        self: Dir,"},
{"lineNum":" 2068","line":"        allocator: mem.Allocator,"},
{"lineNum":" 2069","line":"        file_path: []const u8,"},
{"lineNum":" 2070","line":"        max_bytes: usize,"},
{"lineNum":" 2071","line":"        size_hint: ?usize,"},
{"lineNum":" 2072","line":"        comptime alignment: u29,"},
{"lineNum":" 2073","line":"        comptime optional_sentinel: ?u8,"},
{"lineNum":" 2074","line":"    ) !(if (optional_sentinel) |s| [:s]align(alignment) u8 else []align(alignment) u8) {"},
{"lineNum":" 2075","line":"        var file = try self.openFile(file_path, .{});"},
{"lineNum":" 2076","line":"        defer file.close();"},
{"lineNum":" 2077","line":""},
{"lineNum":" 2078","line":"        // If the file size doesn\'t fit a usize it\'ll be certainly greater than"},
{"lineNum":" 2079","line":"        // `max_bytes`"},
{"lineNum":" 2080","line":"        const stat_size = size_hint orelse math.cast(usize, try file.getEndPos()) orelse"},
{"lineNum":" 2081","line":"            return error.FileTooBig;"},
{"lineNum":" 2082","line":""},
{"lineNum":" 2083","line":"        return file.readToEndAllocOptions(allocator, max_bytes, stat_size, alignment, optional_sentinel);"},
{"lineNum":" 2084","line":"    }"},
{"lineNum":" 2085","line":""},
{"lineNum":" 2086","line":"    pub const DeleteTreeError = error{"},
{"lineNum":" 2087","line":"        InvalidHandle,"},
{"lineNum":" 2088","line":"        AccessDenied,"},
{"lineNum":" 2089","line":"        FileTooBig,"},
{"lineNum":" 2090","line":"        SymLinkLoop,"},
{"lineNum":" 2091","line":"        ProcessFdQuotaExceeded,"},
{"lineNum":" 2092","line":"        NameTooLong,"},
{"lineNum":" 2093","line":"        SystemFdQuotaExceeded,"},
{"lineNum":" 2094","line":"        NoDevice,"},
{"lineNum":" 2095","line":"        SystemResources,"},
{"lineNum":" 2096","line":"        ReadOnlyFileSystem,"},
{"lineNum":" 2097","line":"        FileSystem,"},
{"lineNum":" 2098","line":"        FileBusy,"},
{"lineNum":" 2099","line":"        DeviceBusy,"},
{"lineNum":" 2100","line":""},
{"lineNum":" 2101","line":"        /// One of the path components was not a directory."},
{"lineNum":" 2102","line":"        /// This error is unreachable if `sub_path` does not contain a path separator."},
{"lineNum":" 2103","line":"        NotDir,"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"        /// On Windows, file paths must be valid Unicode."},
{"lineNum":" 2106","line":"        InvalidUtf8,"},
{"lineNum":" 2107","line":""},
{"lineNum":" 2108","line":"        /// On Windows, file paths cannot contain these characters:"},
{"lineNum":" 2109","line":"        /// \'/\', \'*\', \'?\', \'\"\', \'<\', \'>\', \'|\'"},
{"lineNum":" 2110","line":"        BadPathName,"},
{"lineNum":" 2111","line":""},
{"lineNum":" 2112","line":"        /// On Windows, `\\\\server` or `\\\\server\\share` was not found."},
{"lineNum":" 2113","line":"        NetworkNotFound,"},
{"lineNum":" 2114","line":"    } || os.UnexpectedError;"},
{"lineNum":" 2115","line":""},
{"lineNum":" 2116","line":"    /// Whether `full_path` describes a symlink, file, or directory, this function"},
{"lineNum":" 2117","line":"    /// removes it. If it cannot be removed because it is a non-empty directory,"},
{"lineNum":" 2118","line":"    /// this function recursively removes its entries and then tries again."},
{"lineNum":" 2119","line":"    /// This operation is not atomic on most file systems."},
{"lineNum":" 2120","line":"    pub fn deleteTree(self: Dir, sub_path: []const u8) DeleteTreeError!void {"},
{"lineNum":" 2121","line":"        var initial_iterable_dir = (try self.deleteTreeOpenInitialSubpath(sub_path, .file)) orelse return;"},
{"lineNum":" 2122","line":""},
{"lineNum":" 2123","line":"        const StackItem = struct {"},
{"lineNum":" 2124","line":"            name: []const u8,"},
{"lineNum":" 2125","line":"            parent_dir: Dir,"},
{"lineNum":" 2126","line":"            iter: IterableDir.Iterator,"},
{"lineNum":" 2127","line":"        };"},
{"lineNum":" 2128","line":""},
{"lineNum":" 2129","line":"        var stack = std.BoundedArray(StackItem, 16){};"},
{"lineNum":" 2130","line":"        defer {"},
{"lineNum":" 2131","line":"            for (stack.slice()) |*item| {"},
{"lineNum":" 2132","line":"                item.iter.dir.close();"},
{"lineNum":" 2133","line":"            }"},
{"lineNum":" 2134","line":"        }"},
{"lineNum":" 2135","line":""},
{"lineNum":" 2136","line":"        stack.appendAssumeCapacity(StackItem{"},
{"lineNum":" 2137","line":"            .name = sub_path,"},
{"lineNum":" 2138","line":"            .parent_dir = self,"},
{"lineNum":" 2139","line":"            .iter = initial_iterable_dir.iterateAssumeFirstIteration(),"},
{"lineNum":" 2140","line":"        });"},
{"lineNum":" 2141","line":""},
{"lineNum":" 2142","line":"        process_stack: while (stack.len != 0) {"},
{"lineNum":" 2143","line":"            var top = &(stack.slice()[stack.len - 1]);"},
{"lineNum":" 2144","line":"            while (try top.iter.next()) |entry| {"},
{"lineNum":" 2145","line":"                var treat_as_dir = entry.kind == .directory;"},
{"lineNum":" 2146","line":"                handle_entry: while (true) {"},
{"lineNum":" 2147","line":"                    if (treat_as_dir) {"},
{"lineNum":" 2148","line":"                        if (stack.ensureUnusedCapacity(1)) {"},
{"lineNum":" 2149","line":"                            var iterable_dir = top.iter.dir.openIterableDir(entry.name, .{ .no_follow = true }) catch |err| switch (err) {"},
{"lineNum":" 2150","line":"                                error.NotDir => {"},
{"lineNum":" 2151","line":"                                    treat_as_dir = false;"},
{"lineNum":" 2152","line":"                                    continue :handle_entry;"},
{"lineNum":" 2153","line":"                                },"},
{"lineNum":" 2154","line":"                                error.FileNotFound => {"},
{"lineNum":" 2155","line":"                                    // That\'s fine, we were trying to remove this directory anyway."},
{"lineNum":" 2156","line":"                                    break :handle_entry;"},
{"lineNum":" 2157","line":"                                },"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"                                error.InvalidHandle,"},
{"lineNum":" 2160","line":"                                error.AccessDenied,"},
{"lineNum":" 2161","line":"                                error.SymLinkLoop,"},
{"lineNum":" 2162","line":"                                error.ProcessFdQuotaExceeded,"},
{"lineNum":" 2163","line":"                                error.NameTooLong,"},
{"lineNum":" 2164","line":"                                error.SystemFdQuotaExceeded,"},
{"lineNum":" 2165","line":"                                error.NoDevice,"},
{"lineNum":" 2166","line":"                                error.SystemResources,"},
{"lineNum":" 2167","line":"                                error.Unexpected,"},
{"lineNum":" 2168","line":"                                error.InvalidUtf8,"},
{"lineNum":" 2169","line":"                                error.BadPathName,"},
{"lineNum":" 2170","line":"                                error.NetworkNotFound,"},
{"lineNum":" 2171","line":"                                error.DeviceBusy,"},
{"lineNum":" 2172","line":"                                => |e| return e,"},
{"lineNum":" 2173","line":"                            };"},
{"lineNum":" 2174","line":"                            stack.appendAssumeCapacity(StackItem{"},
{"lineNum":" 2175","line":"                                .name = entry.name,"},
{"lineNum":" 2176","line":"                                .parent_dir = top.iter.dir,"},
{"lineNum":" 2177","line":"                                .iter = iterable_dir.iterateAssumeFirstIteration(),"},
{"lineNum":" 2178","line":"                            });"},
{"lineNum":" 2179","line":"                            continue :process_stack;"},
{"lineNum":" 2180","line":"                        } else |_| {"},
{"lineNum":" 2181","line":"                            try top.iter.dir.deleteTreeMinStackSizeWithKindHint(entry.name, entry.kind);"},
{"lineNum":" 2182","line":"                            break :handle_entry;"},
{"lineNum":" 2183","line":"                        }"},
{"lineNum":" 2184","line":"                    } else {"},
{"lineNum":" 2185","line":"                        if (top.iter.dir.deleteFile(entry.name)) {"},
{"lineNum":" 2186","line":"                            break :handle_entry;"},
{"lineNum":" 2187","line":"                        } else |err| switch (err) {"},
{"lineNum":" 2188","line":"                            error.FileNotFound => break :handle_entry,"},
{"lineNum":" 2189","line":""},
{"lineNum":" 2190","line":"                            // Impossible because we do not pass any path separators."},
{"lineNum":" 2191","line":"                            error.NotDir => unreachable,"},
{"lineNum":" 2192","line":""},
{"lineNum":" 2193","line":"                            error.IsDir => {"},
{"lineNum":" 2194","line":"                                treat_as_dir = true;"},
{"lineNum":" 2195","line":"                                continue :handle_entry;"},
{"lineNum":" 2196","line":"                            },"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"                            error.AccessDenied,"},
{"lineNum":" 2199","line":"                            error.InvalidUtf8,"},
{"lineNum":" 2200","line":"                            error.SymLinkLoop,"},
{"lineNum":" 2201","line":"                            error.NameTooLong,"},
{"lineNum":" 2202","line":"                            error.SystemResources,"},
{"lineNum":" 2203","line":"                            error.ReadOnlyFileSystem,"},
{"lineNum":" 2204","line":"                            error.FileSystem,"},
{"lineNum":" 2205","line":"                            error.FileBusy,"},
{"lineNum":" 2206","line":"                            error.BadPathName,"},
{"lineNum":" 2207","line":"                            error.NetworkNotFound,"},
{"lineNum":" 2208","line":"                            error.Unexpected,"},
{"lineNum":" 2209","line":"                            => |e| return e,"},
{"lineNum":" 2210","line":"                        }"},
{"lineNum":" 2211","line":"                    }"},
{"lineNum":" 2212","line":"                }"},
{"lineNum":" 2213","line":"            }"},
{"lineNum":" 2214","line":""},
{"lineNum":" 2215","line":"            // On Windows, we can\'t delete until the dir\'s handle has been closed, so"},
{"lineNum":" 2216","line":"            // close it before we try to delete."},
{"lineNum":" 2217","line":"            top.iter.dir.close();"},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"            // In order to avoid double-closing the directory when cleaning up"},
{"lineNum":" 2220","line":"            // the stack in the case of an error, we save the relevant portions and"},
{"lineNum":" 2221","line":"            // pop the value from the stack."},
{"lineNum":" 2222","line":"            const parent_dir = top.parent_dir;"},
{"lineNum":" 2223","line":"            const name = top.name;"},
{"lineNum":" 2224","line":"            _ = stack.pop();"},
{"lineNum":" 2225","line":""},
{"lineNum":" 2226","line":"            var need_to_retry: bool = false;"},
{"lineNum":" 2227","line":"            parent_dir.deleteDir(name) catch |err| switch (err) {"},
{"lineNum":" 2228","line":"                error.FileNotFound => {},"},
{"lineNum":" 2229","line":"                error.DirNotEmpty => need_to_retry = true,"},
{"lineNum":" 2230","line":"                else => |e| return e,"},
{"lineNum":" 2231","line":"            };"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"            if (need_to_retry) {"},
{"lineNum":" 2234","line":"                // Since we closed the handle that the previous iterator used, we"},
{"lineNum":" 2235","line":"                // need to re-open the dir and re-create the iterator."},
{"lineNum":" 2236","line":"                var iterable_dir = iterable_dir: {"},
{"lineNum":" 2237","line":"                    var treat_as_dir = true;"},
{"lineNum":" 2238","line":"                    handle_entry: while (true) {"},
{"lineNum":" 2239","line":"                        if (treat_as_dir) {"},
{"lineNum":" 2240","line":"                            break :iterable_dir parent_dir.openIterableDir(name, .{ .no_follow = true }) catch |err| switch (err) {"},
{"lineNum":" 2241","line":"                                error.NotDir => {"},
{"lineNum":" 2242","line":"                                    treat_as_dir = false;"},
{"lineNum":" 2243","line":"                                    continue :handle_entry;"},
{"lineNum":" 2244","line":"                                },"},
{"lineNum":" 2245","line":"                                error.FileNotFound => {"},
{"lineNum":" 2246","line":"                                    // That\'s fine, we were trying to remove this directory anyway."},
{"lineNum":" 2247","line":"                                    continue :process_stack;"},
{"lineNum":" 2248","line":"                                },"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"                                error.InvalidHandle,"},
{"lineNum":" 2251","line":"                                error.AccessDenied,"},
{"lineNum":" 2252","line":"                                error.SymLinkLoop,"},
{"lineNum":" 2253","line":"                                error.ProcessFdQuotaExceeded,"},
{"lineNum":" 2254","line":"                                error.NameTooLong,"},
{"lineNum":" 2255","line":"                                error.SystemFdQuotaExceeded,"},
{"lineNum":" 2256","line":"                                error.NoDevice,"},
{"lineNum":" 2257","line":"                                error.SystemResources,"},
{"lineNum":" 2258","line":"                                error.Unexpected,"},
{"lineNum":" 2259","line":"                                error.InvalidUtf8,"},
{"lineNum":" 2260","line":"                                error.BadPathName,"},
{"lineNum":" 2261","line":"                                error.NetworkNotFound,"},
{"lineNum":" 2262","line":"                                error.DeviceBusy,"},
{"lineNum":" 2263","line":"                                => |e| return e,"},
{"lineNum":" 2264","line":"                            };"},
{"lineNum":" 2265","line":"                        } else {"},
{"lineNum":" 2266","line":"                            if (parent_dir.deleteFile(name)) {"},
{"lineNum":" 2267","line":"                                continue :process_stack;"},
{"lineNum":" 2268","line":"                            } else |err| switch (err) {"},
{"lineNum":" 2269","line":"                                error.FileNotFound => continue :process_stack,"},
{"lineNum":" 2270","line":""},
{"lineNum":" 2271","line":"                                // Impossible because we do not pass any path separators."},
{"lineNum":" 2272","line":"                                error.NotDir => unreachable,"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":"                                error.IsDir => {"},
{"lineNum":" 2275","line":"                                    treat_as_dir = true;"},
{"lineNum":" 2276","line":"                                    continue :handle_entry;"},
{"lineNum":" 2277","line":"                                },"},
{"lineNum":" 2278","line":""},
{"lineNum":" 2279","line":"                                error.AccessDenied,"},
{"lineNum":" 2280","line":"                                error.InvalidUtf8,"},
{"lineNum":" 2281","line":"                                error.SymLinkLoop,"},
{"lineNum":" 2282","line":"                                error.NameTooLong,"},
{"lineNum":" 2283","line":"                                error.SystemResources,"},
{"lineNum":" 2284","line":"                                error.ReadOnlyFileSystem,"},
{"lineNum":" 2285","line":"                                error.FileSystem,"},
{"lineNum":" 2286","line":"                                error.FileBusy,"},
{"lineNum":" 2287","line":"                                error.BadPathName,"},
{"lineNum":" 2288","line":"                                error.NetworkNotFound,"},
{"lineNum":" 2289","line":"                                error.Unexpected,"},
{"lineNum":" 2290","line":"                                => |e| return e,"},
{"lineNum":" 2291","line":"                            }"},
{"lineNum":" 2292","line":"                        }"},
{"lineNum":" 2293","line":"                    }"},
{"lineNum":" 2294","line":"                };"},
{"lineNum":" 2295","line":"                // We know there is room on the stack since we are just re-adding"},
{"lineNum":" 2296","line":"                // the StackItem that we previously popped."},
{"lineNum":" 2297","line":"                stack.appendAssumeCapacity(StackItem{"},
{"lineNum":" 2298","line":"                    .name = name,"},
{"lineNum":" 2299","line":"                    .parent_dir = parent_dir,"},
{"lineNum":" 2300","line":"                    .iter = iterable_dir.iterateAssumeFirstIteration(),"},
{"lineNum":" 2301","line":"                });"},
{"lineNum":" 2302","line":"                continue :process_stack;"},
{"lineNum":" 2303","line":"            }"},
{"lineNum":" 2304","line":"        }"},
{"lineNum":" 2305","line":"    }"},
{"lineNum":" 2306","line":""},
{"lineNum":" 2307","line":"    /// Like `deleteTree`, but only keeps one `Iterator` active at a time to minimize the function\'s stack size."},
{"lineNum":" 2308","line":"    /// This is slower than `deleteTree` but uses less stack space."},
{"lineNum":" 2309","line":"    pub fn deleteTreeMinStackSize(self: Dir, sub_path: []const u8) DeleteTreeError!void {"},
{"lineNum":" 2310","line":"        return self.deleteTreeMinStackSizeWithKindHint(sub_path, .file);"},
{"lineNum":" 2311","line":"    }"},
{"lineNum":" 2312","line":""},
{"lineNum":" 2313","line":"    fn deleteTreeMinStackSizeWithKindHint(self: Dir, sub_path: []const u8, kind_hint: File.Kind) DeleteTreeError!void {"},
{"lineNum":" 2314","line":"        start_over: while (true) {"},
{"lineNum":" 2315","line":"            var iterable_dir = (try self.deleteTreeOpenInitialSubpath(sub_path, kind_hint)) orelse return;"},
{"lineNum":" 2316","line":"            var cleanup_dir_parent: ?IterableDir = null;"},
{"lineNum":" 2317","line":"            defer if (cleanup_dir_parent) |*d| d.close();"},
{"lineNum":" 2318","line":""},
{"lineNum":" 2319","line":"            var cleanup_dir = true;"},
{"lineNum":" 2320","line":"            defer if (cleanup_dir) iterable_dir.close();"},
{"lineNum":" 2321","line":""},
{"lineNum":" 2322","line":"            // Valid use of MAX_PATH_BYTES because dir_name_buf will only"},
{"lineNum":" 2323","line":"            // ever store a single path component that was returned from the"},
{"lineNum":" 2324","line":"            // filesystem."},
{"lineNum":" 2325","line":"            var dir_name_buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 2326","line":"            var dir_name: []const u8 = sub_path;"},
{"lineNum":" 2327","line":""},
{"lineNum":" 2328","line":"            // Here we must avoid recursion, in order to provide O(1) memory guarantee of this function."},
{"lineNum":" 2329","line":"            // Go through each entry and if it is not a directory, delete it. If it is a directory,"},
{"lineNum":" 2330","line":"            // open it, and close the original directory. Repeat. Then start the entire operation over."},
{"lineNum":" 2331","line":""},
{"lineNum":" 2332","line":"            scan_dir: while (true) {"},
{"lineNum":" 2333","line":"                var dir_it = iterable_dir.iterateAssumeFirstIteration();"},
{"lineNum":" 2334","line":"                dir_it: while (try dir_it.next()) |entry| {"},
{"lineNum":" 2335","line":"                    var treat_as_dir = entry.kind == .directory;"},
{"lineNum":" 2336","line":"                    handle_entry: while (true) {"},
{"lineNum":" 2337","line":"                        if (treat_as_dir) {"},
{"lineNum":" 2338","line":"                            const new_dir = iterable_dir.dir.openIterableDir(entry.name, .{ .no_follow = true }) catch |err| switch (err) {"},
{"lineNum":" 2339","line":"                                error.NotDir => {"},
{"lineNum":" 2340","line":"                                    treat_as_dir = false;"},
{"lineNum":" 2341","line":"                                    continue :handle_entry;"},
{"lineNum":" 2342","line":"                                },"},
{"lineNum":" 2343","line":"                                error.FileNotFound => {"},
{"lineNum":" 2344","line":"                                    // That\'s fine, we were trying to remove this directory anyway."},
{"lineNum":" 2345","line":"                                    continue :dir_it;"},
{"lineNum":" 2346","line":"                                },"},
{"lineNum":" 2347","line":""},
{"lineNum":" 2348","line":"                                error.InvalidHandle,"},
{"lineNum":" 2349","line":"                                error.AccessDenied,"},
{"lineNum":" 2350","line":"                                error.SymLinkLoop,"},
{"lineNum":" 2351","line":"                                error.ProcessFdQuotaExceeded,"},
{"lineNum":" 2352","line":"                                error.NameTooLong,"},
{"lineNum":" 2353","line":"                                error.SystemFdQuotaExceeded,"},
{"lineNum":" 2354","line":"                                error.NoDevice,"},
{"lineNum":" 2355","line":"                                error.SystemResources,"},
{"lineNum":" 2356","line":"                                error.Unexpected,"},
{"lineNum":" 2357","line":"                                error.InvalidUtf8,"},
{"lineNum":" 2358","line":"                                error.BadPathName,"},
{"lineNum":" 2359","line":"                                error.NetworkNotFound,"},
{"lineNum":" 2360","line":"                                error.DeviceBusy,"},
{"lineNum":" 2361","line":"                                => |e| return e,"},
{"lineNum":" 2362","line":"                            };"},
{"lineNum":" 2363","line":"                            if (cleanup_dir_parent) |*d| d.close();"},
{"lineNum":" 2364","line":"                            cleanup_dir_parent = iterable_dir;"},
{"lineNum":" 2365","line":"                            iterable_dir = new_dir;"},
{"lineNum":" 2366","line":"                            const result = dir_name_buf[0..entry.name.len];"},
{"lineNum":" 2367","line":"                            @memcpy(result, entry.name);"},
{"lineNum":" 2368","line":"                            dir_name = result;"},
{"lineNum":" 2369","line":"                            continue :scan_dir;"},
{"lineNum":" 2370","line":"                        } else {"},
{"lineNum":" 2371","line":"                            if (iterable_dir.dir.deleteFile(entry.name)) {"},
{"lineNum":" 2372","line":"                                continue :dir_it;"},
{"lineNum":" 2373","line":"                            } else |err| switch (err) {"},
{"lineNum":" 2374","line":"                                error.FileNotFound => continue :dir_it,"},
{"lineNum":" 2375","line":""},
{"lineNum":" 2376","line":"                                // Impossible because we do not pass any path separators."},
{"lineNum":" 2377","line":"                                error.NotDir => unreachable,"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"                                error.IsDir => {"},
{"lineNum":" 2380","line":"                                    treat_as_dir = true;"},
{"lineNum":" 2381","line":"                                    continue :handle_entry;"},
{"lineNum":" 2382","line":"                                },"},
{"lineNum":" 2383","line":""},
{"lineNum":" 2384","line":"                                error.AccessDenied,"},
{"lineNum":" 2385","line":"                                error.InvalidUtf8,"},
{"lineNum":" 2386","line":"                                error.SymLinkLoop,"},
{"lineNum":" 2387","line":"                                error.NameTooLong,"},
{"lineNum":" 2388","line":"                                error.SystemResources,"},
{"lineNum":" 2389","line":"                                error.ReadOnlyFileSystem,"},
{"lineNum":" 2390","line":"                                error.FileSystem,"},
{"lineNum":" 2391","line":"                                error.FileBusy,"},
{"lineNum":" 2392","line":"                                error.BadPathName,"},
{"lineNum":" 2393","line":"                                error.NetworkNotFound,"},
{"lineNum":" 2394","line":"                                error.Unexpected,"},
{"lineNum":" 2395","line":"                                => |e| return e,"},
{"lineNum":" 2396","line":"                            }"},
{"lineNum":" 2397","line":"                        }"},
{"lineNum":" 2398","line":"                    }"},
{"lineNum":" 2399","line":"                }"},
{"lineNum":" 2400","line":"                // Reached the end of the directory entries, which means we successfully deleted all of them."},
{"lineNum":" 2401","line":"                // Now to remove the directory itself."},
{"lineNum":" 2402","line":"                iterable_dir.close();"},
{"lineNum":" 2403","line":"                cleanup_dir = false;"},
{"lineNum":" 2404","line":""},
{"lineNum":" 2405","line":"                if (cleanup_dir_parent) |d| {"},
{"lineNum":" 2406","line":"                    d.dir.deleteDir(dir_name) catch |err| switch (err) {"},
{"lineNum":" 2407","line":"                        // These two things can happen due to file system race conditions."},
{"lineNum":" 2408","line":"                        error.FileNotFound, error.DirNotEmpty => continue :start_over,"},
{"lineNum":" 2409","line":"                        else => |e| return e,"},
{"lineNum":" 2410","line":"                    };"},
{"lineNum":" 2411","line":"                    continue :start_over;"},
{"lineNum":" 2412","line":"                } else {"},
{"lineNum":" 2413","line":"                    self.deleteDir(sub_path) catch |err| switch (err) {"},
{"lineNum":" 2414","line":"                        error.FileNotFound => return,"},
{"lineNum":" 2415","line":"                        error.DirNotEmpty => continue :start_over,"},
{"lineNum":" 2416","line":"                        else => |e| return e,"},
{"lineNum":" 2417","line":"                    };"},
{"lineNum":" 2418","line":"                    return;"},
{"lineNum":" 2419","line":"                }"},
{"lineNum":" 2420","line":"            }"},
{"lineNum":" 2421","line":"        }"},
{"lineNum":" 2422","line":"    }"},
{"lineNum":" 2423","line":""},
{"lineNum":" 2424","line":"    /// On successful delete, returns null."},
{"lineNum":" 2425","line":"    fn deleteTreeOpenInitialSubpath(self: Dir, sub_path: []const u8, kind_hint: File.Kind) !?IterableDir {"},
{"lineNum":" 2426","line":"        return iterable_dir: {"},
{"lineNum":" 2427","line":"            // Treat as a file by default"},
{"lineNum":" 2428","line":"            var treat_as_dir = kind_hint == .directory;"},
{"lineNum":" 2429","line":""},
{"lineNum":" 2430","line":"            handle_entry: while (true) {"},
{"lineNum":" 2431","line":"                if (treat_as_dir) {"},
{"lineNum":" 2432","line":"                    break :iterable_dir self.openIterableDir(sub_path, .{ .no_follow = true }) catch |err| switch (err) {"},
{"lineNum":" 2433","line":"                        error.NotDir => {"},
{"lineNum":" 2434","line":"                            treat_as_dir = false;"},
{"lineNum":" 2435","line":"                            continue :handle_entry;"},
{"lineNum":" 2436","line":"                        },"},
{"lineNum":" 2437","line":"                        error.FileNotFound => {"},
{"lineNum":" 2438","line":"                            // That\'s fine, we were trying to remove this directory anyway."},
{"lineNum":" 2439","line":"                            return null;"},
{"lineNum":" 2440","line":"                        },"},
{"lineNum":" 2441","line":""},
{"lineNum":" 2442","line":"                        error.InvalidHandle,"},
{"lineNum":" 2443","line":"                        error.AccessDenied,"},
{"lineNum":" 2444","line":"                        error.SymLinkLoop,"},
{"lineNum":" 2445","line":"                        error.ProcessFdQuotaExceeded,"},
{"lineNum":" 2446","line":"                        error.NameTooLong,"},
{"lineNum":" 2447","line":"                        error.SystemFdQuotaExceeded,"},
{"lineNum":" 2448","line":"                        error.NoDevice,"},
{"lineNum":" 2449","line":"                        error.SystemResources,"},
{"lineNum":" 2450","line":"                        error.Unexpected,"},
{"lineNum":" 2451","line":"                        error.InvalidUtf8,"},
{"lineNum":" 2452","line":"                        error.BadPathName,"},
{"lineNum":" 2453","line":"                        error.DeviceBusy,"},
{"lineNum":" 2454","line":"                        error.NetworkNotFound,"},
{"lineNum":" 2455","line":"                        => |e| return e,"},
{"lineNum":" 2456","line":"                    };"},
{"lineNum":" 2457","line":"                } else {"},
{"lineNum":" 2458","line":"                    if (self.deleteFile(sub_path)) {"},
{"lineNum":" 2459","line":"                        return null;"},
{"lineNum":" 2460","line":"                    } else |err| switch (err) {"},
{"lineNum":" 2461","line":"                        error.FileNotFound => return null,"},
{"lineNum":" 2462","line":""},
{"lineNum":" 2463","line":"                        error.IsDir => {"},
{"lineNum":" 2464","line":"                            treat_as_dir = true;"},
{"lineNum":" 2465","line":"                            continue :handle_entry;"},
{"lineNum":" 2466","line":"                        },"},
{"lineNum":" 2467","line":""},
{"lineNum":" 2468","line":"                        error.AccessDenied,"},
{"lineNum":" 2469","line":"                        error.InvalidUtf8,"},
{"lineNum":" 2470","line":"                        error.SymLinkLoop,"},
{"lineNum":" 2471","line":"                        error.NameTooLong,"},
{"lineNum":" 2472","line":"                        error.SystemResources,"},
{"lineNum":" 2473","line":"                        error.ReadOnlyFileSystem,"},
{"lineNum":" 2474","line":"                        error.NotDir,"},
{"lineNum":" 2475","line":"                        error.FileSystem,"},
{"lineNum":" 2476","line":"                        error.FileBusy,"},
{"lineNum":" 2477","line":"                        error.BadPathName,"},
{"lineNum":" 2478","line":"                        error.NetworkNotFound,"},
{"lineNum":" 2479","line":"                        error.Unexpected,"},
{"lineNum":" 2480","line":"                        => |e| return e,"},
{"lineNum":" 2481","line":"                    }"},
{"lineNum":" 2482","line":"                }"},
{"lineNum":" 2483","line":"            }"},
{"lineNum":" 2484","line":"        };"},
{"lineNum":" 2485","line":"    }"},
{"lineNum":" 2486","line":""},
{"lineNum":" 2487","line":"    /// Writes content to the file system, creating a new file if it does not exist, truncating"},
{"lineNum":" 2488","line":"    /// if it already exists."},
{"lineNum":" 2489","line":"    pub fn writeFile(self: Dir, sub_path: []const u8, data: []const u8) !void {"},
{"lineNum":" 2490","line":"        var file = try self.createFile(sub_path, .{});"},
{"lineNum":" 2491","line":"        defer file.close();"},
{"lineNum":" 2492","line":"        try file.writeAll(data);"},
{"lineNum":" 2493","line":"    }"},
{"lineNum":" 2494","line":""},
{"lineNum":" 2495","line":"    pub const AccessError = os.AccessError;"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"    /// Test accessing `path`."},
{"lineNum":" 2498","line":"    /// `path` is UTF-8-encoded."},
{"lineNum":" 2499","line":"    /// Be careful of Time-Of-Check-Time-Of-Use race conditions when using this function."},
{"lineNum":" 2500","line":"    /// For example, instead of testing if a file exists and then opening it, just"},
{"lineNum":" 2501","line":"    /// open it and handle the error for file not found."},
{"lineNum":" 2502","line":"    pub fn access(self: Dir, sub_path: []const u8, flags: File.OpenFlags) AccessError!void {"},
{"lineNum":" 2503","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 2504","line":"            const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path);"},
{"lineNum":" 2505","line":"            return self.accessW(sub_path_w.span().ptr, flags);"},
{"lineNum":" 2506","line":"        }"},
{"lineNum":" 2507","line":"        const path_c = try os.toPosixPath(sub_path);"},
{"lineNum":" 2508","line":"        return self.accessZ(&path_c, flags);"},
{"lineNum":" 2509","line":"    }"},
{"lineNum":" 2510","line":""},
{"lineNum":" 2511","line":"    /// Same as `access` except the path parameter is null-terminated."},
{"lineNum":" 2512","line":"    pub fn accessZ(self: Dir, sub_path: [*:0]const u8, flags: File.OpenFlags) AccessError!void {"},
{"lineNum":" 2513","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":" 2514","line":"            const sub_path_w = try os.windows.cStrToPrefixedFileW(sub_path);"},
{"lineNum":" 2515","line":"            return self.accessW(sub_path_w.span().ptr, flags);"},
{"lineNum":" 2516","line":"        }"},
{"lineNum":" 2517","line":"        const os_mode = switch (flags.mode) {"},
{"lineNum":" 2518","line":"            .read_only => @as(u32, os.F_OK),"},
{"lineNum":" 2519","line":"            .write_only => @as(u32, os.W_OK),"},
{"lineNum":" 2520","line":"            .read_write => @as(u32, os.R_OK | os.W_OK),"},
{"lineNum":" 2521","line":"        };"},
{"lineNum":" 2522","line":"        const result = if (need_async_thread and flags.intended_io_mode != .blocking)"},
{"lineNum":" 2523","line":"            std.event.Loop.instance.?.faccessatZ(self.fd, sub_path, os_mode, 0)"},
{"lineNum":" 2524","line":"        else"},
{"lineNum":" 2525","line":"            os.faccessatZ(self.fd, sub_path, os_mode, 0);"},
{"lineNum":" 2526","line":"        return result;"},
{"lineNum":" 2527","line":"    }"},
{"lineNum":" 2528","line":""},
{"lineNum":" 2529","line":"    /// Same as `access` except asserts the target OS is Windows and the path parameter is"},
{"lineNum":" 2530","line":"    /// * WTF-16 encoded"},
{"lineNum":" 2531","line":"    /// * null-terminated"},
{"lineNum":" 2532","line":"    /// * NtDll prefixed"},
{"lineNum":" 2533","line":"    /// TODO currently this ignores `flags`."},
{"lineNum":" 2534","line":"    pub fn accessW(self: Dir, sub_path_w: [*:0]const u16, flags: File.OpenFlags) AccessError!void {"},
{"lineNum":" 2535","line":"        _ = flags;"},
{"lineNum":" 2536","line":"        return os.faccessatW(self.fd, sub_path_w, 0, 0);"},
{"lineNum":" 2537","line":"    }"},
{"lineNum":" 2538","line":""},
{"lineNum":" 2539","line":"    /// Check the file size, mtime, and mode of `source_path` and `dest_path`. If they are equal, does nothing."},
{"lineNum":" 2540","line":"    /// Otherwise, atomically copies `source_path` to `dest_path`. The destination file gains the mtime,"},
{"lineNum":" 2541","line":"    /// atime, and mode of the source file so that the next call to `updateFile` will not need a copy."},
{"lineNum":" 2542","line":"    /// Returns the previous status of the file before updating."},
{"lineNum":" 2543","line":"    /// If any of the directories do not exist for dest_path, they are created."},
{"lineNum":" 2544","line":"    pub fn updateFile("},
{"lineNum":" 2545","line":"        source_dir: Dir,"},
{"lineNum":" 2546","line":"        source_path: []const u8,"},
{"lineNum":" 2547","line":"        dest_dir: Dir,"},
{"lineNum":" 2548","line":"        dest_path: []const u8,"},
{"lineNum":" 2549","line":"        options: CopyFileOptions,"},
{"lineNum":" 2550","line":"    ) !PrevStatus {"},
{"lineNum":" 2551","line":"        var src_file = try source_dir.openFile(source_path, .{});"},
{"lineNum":" 2552","line":"        defer src_file.close();"},
{"lineNum":" 2553","line":""},
{"lineNum":" 2554","line":"        const src_stat = try src_file.stat();"},
{"lineNum":" 2555","line":"        const actual_mode = options.override_mode orelse src_stat.mode;"},
{"lineNum":" 2556","line":"        check_dest_stat: {"},
{"lineNum":" 2557","line":"            const dest_stat = blk: {"},
{"lineNum":" 2558","line":"                var dest_file = dest_dir.openFile(dest_path, .{}) catch |err| switch (err) {"},
{"lineNum":" 2559","line":"                    error.FileNotFound => break :check_dest_stat,"},
{"lineNum":" 2560","line":"                    else => |e| return e,"},
{"lineNum":" 2561","line":"                };"},
{"lineNum":" 2562","line":"                defer dest_file.close();"},
{"lineNum":" 2563","line":""},
{"lineNum":" 2564","line":"                break :blk try dest_file.stat();"},
{"lineNum":" 2565","line":"            };"},
{"lineNum":" 2566","line":""},
{"lineNum":" 2567","line":"            if (src_stat.size == dest_stat.size and"},
{"lineNum":" 2568","line":"                src_stat.mtime == dest_stat.mtime and"},
{"lineNum":" 2569","line":"                actual_mode == dest_stat.mode)"},
{"lineNum":" 2570","line":"            {"},
{"lineNum":" 2571","line":"                return PrevStatus.fresh;"},
{"lineNum":" 2572","line":"            }"},
{"lineNum":" 2573","line":"        }"},
{"lineNum":" 2574","line":""},
{"lineNum":" 2575","line":"        if (path.dirname(dest_path)) |dirname| {"},
{"lineNum":" 2576","line":"            try dest_dir.makePath(dirname);"},
{"lineNum":" 2577","line":"        }"},
{"lineNum":" 2578","line":""},
{"lineNum":" 2579","line":"        var atomic_file = try dest_dir.atomicFile(dest_path, .{ .mode = actual_mode });"},
{"lineNum":" 2580","line":"        defer atomic_file.deinit();"},
{"lineNum":" 2581","line":""},
{"lineNum":" 2582","line":"        try atomic_file.file.writeFileAll(src_file, .{ .in_len = src_stat.size });"},
{"lineNum":" 2583","line":"        try atomic_file.file.updateTimes(src_stat.atime, src_stat.mtime);"},
{"lineNum":" 2584","line":"        try atomic_file.finish();"},
{"lineNum":" 2585","line":"        return PrevStatus.stale;"},
{"lineNum":" 2586","line":"    }"},
{"lineNum":" 2587","line":""},
{"lineNum":" 2588","line":"    pub const CopyFileError = File.OpenError || File.StatError || AtomicFile.InitError || CopyFileRawError || AtomicFile.FinishError;"},
{"lineNum":" 2589","line":""},
{"lineNum":" 2590","line":"    /// Guaranteed to be atomic."},
{"lineNum":" 2591","line":"    /// On Linux, until https://patchwork.kernel.org/patch/9636735/ is merged and readily available,"},
{"lineNum":" 2592","line":"    /// there is a possibility of power loss or application termination leaving temporary files present"},
{"lineNum":" 2593","line":"    /// in the same directory as dest_path."},
{"lineNum":" 2594","line":"    pub fn copyFile(source_dir: Dir, source_path: []const u8, dest_dir: Dir, dest_path: []const u8, options: CopyFileOptions) CopyFileError!void {"},
{"lineNum":" 2595","line":"        var in_file = try source_dir.openFile(source_path, .{});"},
{"lineNum":" 2596","line":"        defer in_file.close();"},
{"lineNum":" 2597","line":""},
{"lineNum":" 2598","line":"        var size: ?u64 = null;"},
{"lineNum":" 2599","line":"        const mode = options.override_mode orelse blk: {"},
{"lineNum":" 2600","line":"            const st = try in_file.stat();"},
{"lineNum":" 2601","line":"            size = st.size;"},
{"lineNum":" 2602","line":"            break :blk st.mode;"},
{"lineNum":" 2603","line":"        };"},
{"lineNum":" 2604","line":""},
{"lineNum":" 2605","line":"        var atomic_file = try dest_dir.atomicFile(dest_path, .{ .mode = mode });"},
{"lineNum":" 2606","line":"        defer atomic_file.deinit();"},
{"lineNum":" 2607","line":""},
{"lineNum":" 2608","line":"        try copy_file(in_file.handle, atomic_file.file.handle, size);"},
{"lineNum":" 2609","line":"        try atomic_file.finish();"},
{"lineNum":" 2610","line":"    }"},
{"lineNum":" 2611","line":""},
{"lineNum":" 2612","line":"    pub const AtomicFileOptions = struct {"},
{"lineNum":" 2613","line":"        mode: File.Mode = File.default_mode,"},
{"lineNum":" 2614","line":"    };"},
{"lineNum":" 2615","line":""},
{"lineNum":" 2616","line":"    /// Directly access the `.file` field, and then call `AtomicFile.finish`"},
{"lineNum":" 2617","line":"    /// to atomically replace `dest_path` with contents."},
{"lineNum":" 2618","line":"    /// Always call `AtomicFile.deinit` to clean up, regardless of whether `AtomicFile.finish` succeeded."},
{"lineNum":" 2619","line":"    /// `dest_path` must remain valid until `AtomicFile.deinit` is called."},
{"lineNum":" 2620","line":"    pub fn atomicFile(self: Dir, dest_path: []const u8, options: AtomicFileOptions) !AtomicFile {"},
{"lineNum":" 2621","line":"        if (path.dirname(dest_path)) |dirname| {"},
{"lineNum":" 2622","line":"            const dir = try self.openDir(dirname, .{});"},
{"lineNum":" 2623","line":"            return AtomicFile.init(path.basename(dest_path), options.mode, dir, true);"},
{"lineNum":" 2624","line":"        } else {"},
{"lineNum":" 2625","line":"            return AtomicFile.init(dest_path, options.mode, self, false);"},
{"lineNum":" 2626","line":"        }"},
{"lineNum":" 2627","line":"    }"},
{"lineNum":" 2628","line":""},
{"lineNum":" 2629","line":"    pub const Stat = File.Stat;"},
{"lineNum":" 2630","line":"    pub const StatError = File.StatError;"},
{"lineNum":" 2631","line":""},
{"lineNum":" 2632","line":"    pub fn stat(self: Dir) StatError!Stat {"},
{"lineNum":" 2633","line":"        const file: File = .{"},
{"lineNum":" 2634","line":"            .handle = self.fd,"},
{"lineNum":" 2635","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 2636","line":"        };"},
{"lineNum":" 2637","line":"        return file.stat();"},
{"lineNum":" 2638","line":"    }"},
{"lineNum":" 2639","line":""},
{"lineNum":" 2640","line":"    pub const StatFileError = File.OpenError || File.StatError || os.FStatAtError;"},
{"lineNum":" 2641","line":""},
{"lineNum":" 2642","line":"    /// Returns metadata for a file inside the directory."},
{"lineNum":" 2643","line":"    ///"},
{"lineNum":" 2644","line":"    /// On Windows, this requires three syscalls. On other operating systems, it"},
{"lineNum":" 2645","line":"    /// only takes one."},
{"lineNum":" 2646","line":"    ///"},
{"lineNum":" 2647","line":"    /// Symlinks are followed."},
{"lineNum":" 2648","line":"    ///"},
{"lineNum":" 2649","line":"    /// `sub_path` may be absolute, in which case `self` is ignored."},
{"lineNum":" 2650","line":"    pub fn statFile(self: Dir, sub_path: []const u8) StatFileError!Stat {"},
{"lineNum":" 2651","line":"        switch (builtin.os.tag) {"},
{"lineNum":" 2652","line":"            .windows => {"},
{"lineNum":" 2653","line":"                var file = try self.openFile(sub_path, .{});"},
{"lineNum":" 2654","line":"                defer file.close();"},
{"lineNum":" 2655","line":"                return file.stat();"},
{"lineNum":" 2656","line":"            },"},
{"lineNum":" 2657","line":"            .wasi => {"},
{"lineNum":" 2658","line":"                const st = try os.fstatatWasi(self.fd, sub_path, os.wasi.LOOKUP_SYMLINK_FOLLOW);"},
{"lineNum":" 2659","line":"                return Stat.fromSystem(st);"},
{"lineNum":" 2660","line":"            },"},
{"lineNum":" 2661","line":"            else => {"},
{"lineNum":" 2662","line":"                const st = try os.fstatat(self.fd, sub_path, 0);"},
{"lineNum":" 2663","line":"                return Stat.fromSystem(st);"},
{"lineNum":" 2664","line":"            },"},
{"lineNum":" 2665","line":"        }"},
{"lineNum":" 2666","line":"    }"},
{"lineNum":" 2667","line":""},
{"lineNum":" 2668","line":"    const Permissions = File.Permissions;"},
{"lineNum":" 2669","line":"    pub const SetPermissionsError = File.SetPermissionsError;"},
{"lineNum":" 2670","line":""},
{"lineNum":" 2671","line":"    /// Sets permissions according to the provided `Permissions` struct."},
{"lineNum":" 2672","line":"    /// This method is *NOT* available on WASI"},
{"lineNum":" 2673","line":"    pub fn setPermissions(self: Dir, permissions: Permissions) SetPermissionsError!void {"},
{"lineNum":" 2674","line":"        const file: File = .{"},
{"lineNum":" 2675","line":"            .handle = self.fd,"},
{"lineNum":" 2676","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 2677","line":"        };"},
{"lineNum":" 2678","line":"        try file.setPermissions(permissions);"},
{"lineNum":" 2679","line":"    }"},
{"lineNum":" 2680","line":""},
{"lineNum":" 2681","line":"    const Metadata = File.Metadata;"},
{"lineNum":" 2682","line":"    pub const MetadataError = File.MetadataError;"},
{"lineNum":" 2683","line":""},
{"lineNum":" 2684","line":"    /// Returns a `Metadata` struct, representing the permissions on the directory"},
{"lineNum":" 2685","line":"    pub fn metadata(self: Dir) MetadataError!Metadata {"},
{"lineNum":" 2686","line":"        const file: File = .{"},
{"lineNum":" 2687","line":"            .handle = self.fd,"},
{"lineNum":" 2688","line":"            .capable_io_mode = .blocking,"},
{"lineNum":" 2689","line":"        };"},
{"lineNum":" 2690","line":"        return try file.metadata();"},
{"lineNum":" 2691","line":"    }"},
{"lineNum":" 2692","line":"};"},
{"lineNum":" 2693","line":""},
{"lineNum":" 2694","line":"/// Returns a handle to the current working directory. It is not opened with iteration capability."},
{"lineNum":" 2695","line":"/// Closing the returned `Dir` is checked illegal behavior. Iterating over the result is illegal behavior."},
{"lineNum":" 2696","line":"/// On POSIX targets, this function is comptime-callable."},
{"lineNum":" 2697","line":"pub fn cwd() Dir {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2698","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":" 2699","line":"        return Dir{ .fd = os.windows.peb().ProcessParameters.CurrentDirectory.Handle };"},
{"lineNum":" 2700","line":"    } else if (builtin.os.tag == .wasi) {"},
{"lineNum":" 2701","line":"        return std.options.wasiCwd();"},
{"lineNum":" 2702","line":"    } else {"},
{"lineNum":" 2703","line":"        return Dir{ .fd = os.AT.FDCWD };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2704","line":"    }"},
{"lineNum":" 2705","line":"}"},
{"lineNum":" 2706","line":""},
{"lineNum":" 2707","line":"pub fn defaultWasiCwd() Dir {"},
{"lineNum":" 2708","line":"    // Expect the first preopen to be current working directory."},
{"lineNum":" 2709","line":"    return .{ .fd = 3 };"},
{"lineNum":" 2710","line":"}"},
{"lineNum":" 2711","line":""},
{"lineNum":" 2712","line":"/// Opens a directory at the given path. The directory is a system resource that remains"},
{"lineNum":" 2713","line":"/// open until `close` is called on the result."},
{"lineNum":" 2714","line":"/// See `openDirAbsoluteZ` for a function that accepts a null-terminated path."},
{"lineNum":" 2715","line":"///"},
{"lineNum":" 2716","line":"/// Asserts that the path parameter has no null bytes."},
{"lineNum":" 2717","line":"pub fn openDirAbsolute(absolute_path: []const u8, flags: Dir.OpenDirOptions) File.OpenError!Dir {"},
{"lineNum":" 2718","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":" 2719","line":"    return cwd().openDir(absolute_path, flags);"},
{"lineNum":" 2720","line":"}"},
{"lineNum":" 2721","line":""},
{"lineNum":" 2722","line":"/// Same as `openDirAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2723","line":"pub fn openDirAbsoluteZ(absolute_path_c: [*:0]const u8, flags: Dir.OpenDirOptions) File.OpenError!Dir {"},
{"lineNum":" 2724","line":"    assert(path.isAbsoluteZ(absolute_path_c));"},
{"lineNum":" 2725","line":"    return cwd().openDirZ(absolute_path_c, flags, false);"},
{"lineNum":" 2726","line":"}"},
{"lineNum":" 2727","line":"/// Same as `openDirAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2728","line":"pub fn openDirAbsoluteW(absolute_path_c: [*:0]const u16, flags: Dir.OpenDirOptions) File.OpenError!Dir {"},
{"lineNum":" 2729","line":"    assert(path.isAbsoluteWindowsW(absolute_path_c));"},
{"lineNum":" 2730","line":"    return cwd().openDirW(absolute_path_c, flags, false);"},
{"lineNum":" 2731","line":"}"},
{"lineNum":" 2732","line":""},
{"lineNum":" 2733","line":"/// Opens a directory at the given path. The directory is a system resource that remains"},
{"lineNum":" 2734","line":"/// open until `close` is called on the result."},
{"lineNum":" 2735","line":"/// See `openIterableDirAbsoluteZ` for a function that accepts a null-terminated path."},
{"lineNum":" 2736","line":"///"},
{"lineNum":" 2737","line":"/// Asserts that the path parameter has no null bytes."},
{"lineNum":" 2738","line":"pub fn openIterableDirAbsolute(absolute_path: []const u8, flags: Dir.OpenDirOptions) File.OpenError!IterableDir {"},
{"lineNum":" 2739","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":" 2740","line":"    return cwd().openIterableDir(absolute_path, flags);"},
{"lineNum":" 2741","line":"}"},
{"lineNum":" 2742","line":""},
{"lineNum":" 2743","line":"/// Same as `openIterableDirAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2744","line":"pub fn openIterableDirAbsoluteZ(absolute_path_c: [*:0]const u8, flags: Dir.OpenDirOptions) File.OpenError!IterableDir {"},
{"lineNum":" 2745","line":"    assert(path.isAbsoluteZ(absolute_path_c));"},
{"lineNum":" 2746","line":"    return IterableDir{ .dir = try cwd().openDirZ(absolute_path_c, flags, true) };"},
{"lineNum":" 2747","line":"}"},
{"lineNum":" 2748","line":"/// Same as `openIterableDirAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2749","line":"pub fn openIterableDirAbsoluteW(absolute_path_c: [*:0]const u16, flags: Dir.OpenDirOptions) File.OpenError!IterableDir {"},
{"lineNum":" 2750","line":"    assert(path.isAbsoluteWindowsW(absolute_path_c));"},
{"lineNum":" 2751","line":"    return IterableDir{ .dir = try cwd().openDirW(absolute_path_c, flags, true) };"},
{"lineNum":" 2752","line":"}"},
{"lineNum":" 2753","line":""},
{"lineNum":" 2754","line":"/// Opens a file for reading or writing, without attempting to create a new file, based on an absolute path."},
{"lineNum":" 2755","line":"/// Call `File.close` to release the resource."},
{"lineNum":" 2756","line":"/// Asserts that the path is absolute. See `Dir.openFile` for a function that"},
{"lineNum":" 2757","line":"/// operates on both absolute and relative paths."},
{"lineNum":" 2758","line":"/// Asserts that the path parameter has no null bytes. See `openFileAbsoluteZ` for a function"},
{"lineNum":" 2759","line":"/// that accepts a null-terminated path."},
{"lineNum":" 2760","line":"pub fn openFileAbsolute(absolute_path: []const u8, flags: File.OpenFlags) File.OpenError!File {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2761","line":"    assert(path.isAbsolute(absolute_path));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2762","line":"    return cwd().openFile(absolute_path, flags);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2763","line":"}"},
{"lineNum":" 2764","line":""},
{"lineNum":" 2765","line":"/// Same as `openFileAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2766","line":"pub fn openFileAbsoluteZ(absolute_path_c: [*:0]const u8, flags: File.OpenFlags) File.OpenError!File {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2767","line":"    assert(path.isAbsoluteZ(absolute_path_c));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2768","line":"    return cwd().openFileZ(absolute_path_c, flags);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2769","line":"}"},
{"lineNum":" 2770","line":""},
{"lineNum":" 2771","line":"/// Same as `openFileAbsolute` but the path parameter is WTF-16-encoded."},
{"lineNum":" 2772","line":"pub fn openFileAbsoluteW(absolute_path_w: []const u16, flags: File.OpenFlags) File.OpenError!File {"},
{"lineNum":" 2773","line":"    assert(path.isAbsoluteWindowsWTF16(absolute_path_w));"},
{"lineNum":" 2774","line":"    return cwd().openFileW(absolute_path_w, flags);"},
{"lineNum":" 2775","line":"}"},
{"lineNum":" 2776","line":""},
{"lineNum":" 2777","line":"/// Test accessing `path`."},
{"lineNum":" 2778","line":"/// `path` is UTF-8-encoded."},
{"lineNum":" 2779","line":"/// Be careful of Time-Of-Check-Time-Of-Use race conditions when using this function."},
{"lineNum":" 2780","line":"/// For example, instead of testing if a file exists and then opening it, just"},
{"lineNum":" 2781","line":"/// open it and handle the error for file not found."},
{"lineNum":" 2782","line":"/// See `accessAbsoluteZ` for a function that accepts a null-terminated path."},
{"lineNum":" 2783","line":"pub fn accessAbsolute(absolute_path: []const u8, flags: File.OpenFlags) Dir.AccessError!void {"},
{"lineNum":" 2784","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":" 2785","line":"    try cwd().access(absolute_path, flags);"},
{"lineNum":" 2786","line":"}"},
{"lineNum":" 2787","line":"/// Same as `accessAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2788","line":"pub fn accessAbsoluteZ(absolute_path: [*:0]const u8, flags: File.OpenFlags) Dir.AccessError!void {"},
{"lineNum":" 2789","line":"    assert(path.isAbsoluteZ(absolute_path));"},
{"lineNum":" 2790","line":"    try cwd().accessZ(absolute_path, flags);"},
{"lineNum":" 2791","line":"}"},
{"lineNum":" 2792","line":"/// Same as `accessAbsolute` but the path parameter is WTF-16 encoded."},
{"lineNum":" 2793","line":"pub fn accessAbsoluteW(absolute_path: [*:0]const 16, flags: File.OpenFlags) Dir.AccessError!void {"},
{"lineNum":" 2794","line":"    assert(path.isAbsoluteWindowsW(absolute_path));"},
{"lineNum":" 2795","line":"    try cwd().accessW(absolute_path, flags);"},
{"lineNum":" 2796","line":"}"},
{"lineNum":" 2797","line":""},
{"lineNum":" 2798","line":"/// Creates, opens, or overwrites a file with write access, based on an absolute path."},
{"lineNum":" 2799","line":"/// Call `File.close` to release the resource."},
{"lineNum":" 2800","line":"/// Asserts that the path is absolute. See `Dir.createFile` for a function that"},
{"lineNum":" 2801","line":"/// operates on both absolute and relative paths."},
{"lineNum":" 2802","line":"/// Asserts that the path parameter has no null bytes. See `createFileAbsoluteC` for a function"},
{"lineNum":" 2803","line":"/// that accepts a null-terminated path."},
{"lineNum":" 2804","line":"pub fn createFileAbsolute(absolute_path: []const u8, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 2805","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":" 2806","line":"    return cwd().createFile(absolute_path, flags);"},
{"lineNum":" 2807","line":"}"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"/// Same as `createFileAbsolute` but the path parameter is null-terminated."},
{"lineNum":" 2810","line":"pub fn createFileAbsoluteZ(absolute_path_c: [*:0]const u8, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 2811","line":"    assert(path.isAbsoluteZ(absolute_path_c));"},
{"lineNum":" 2812","line":"    return cwd().createFileZ(absolute_path_c, flags);"},
{"lineNum":" 2813","line":"}"},
{"lineNum":" 2814","line":""},
{"lineNum":" 2815","line":"/// Same as `createFileAbsolute` but the path parameter is WTF-16 encoded."},
{"lineNum":" 2816","line":"pub fn createFileAbsoluteW(absolute_path_w: [*:0]const u16, flags: File.CreateFlags) File.OpenError!File {"},
{"lineNum":" 2817","line":"    assert(path.isAbsoluteWindowsW(absolute_path_w));"},
{"lineNum":" 2818","line":"    return cwd().createFileW(absolute_path_w, flags);"},
{"lineNum":" 2819","line":"}"},
{"lineNum":" 2820","line":""},
{"lineNum":" 2821","line":"/// Delete a file name and possibly the file it refers to, based on an absolute path."},
{"lineNum":" 2822","line":"/// Asserts that the path is absolute. See `Dir.deleteFile` for a function that"},
{"lineNum":" 2823","line":"/// operates on both absolute and relative paths."},
{"lineNum":" 2824","line":"/// Asserts that the path parameter has no null bytes."},
{"lineNum":" 2825","line":"pub fn deleteFileAbsolute(absolute_path: []const u8) Dir.DeleteFileError!void {"},
{"lineNum":" 2826","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":" 2827","line":"    return cwd().deleteFile(absolute_path);"},
{"lineNum":" 2828","line":"}"},
{"lineNum":" 2829","line":""},
{"lineNum":" 2830","line":"/// Same as `deleteFileAbsolute` except the parameter is null-terminated."},
{"lineNum":" 2831","line":"pub fn deleteFileAbsoluteZ(absolute_path_c: [*:0]const u8) Dir.DeleteFileError!void {"},
{"lineNum":" 2832","line":"    assert(path.isAbsoluteZ(absolute_path_c));"},
{"lineNum":" 2833","line":"    return cwd().deleteFileZ(absolute_path_c);"},
{"lineNum":" 2834","line":"}"},
{"lineNum":" 2835","line":""},
{"lineNum":" 2836","line":"/// Same as `deleteFileAbsolute` except the parameter is WTF-16 encoded."},
{"lineNum":" 2837","line":"pub fn deleteFileAbsoluteW(absolute_path_w: [*:0]const u16) Dir.DeleteFileError!void {"},
{"lineNum":" 2838","line":"    assert(path.isAbsoluteWindowsW(absolute_path_w));"},
{"lineNum":" 2839","line":"    return cwd().deleteFileW(absolute_path_w);"},
{"lineNum":" 2840","line":"}"},
{"lineNum":" 2841","line":""},
{"lineNum":" 2842","line":"/// Removes a symlink, file, or directory."},
{"lineNum":" 2843","line":"/// This is equivalent to `Dir.deleteTree` with the base directory."},
{"lineNum":" 2844","line":"/// Asserts that the path is absolute. See `Dir.deleteTree` for a function that"},
{"lineNum":" 2845","line":"/// operates on both absolute and relative paths."},
{"lineNum":" 2846","line":"/// Asserts that the path parameter has no null bytes."},
{"lineNum":" 2847","line":"pub fn deleteTreeAbsolute(absolute_path: []const u8) !void {"},
{"lineNum":" 2848","line":"    assert(path.isAbsolute(absolute_path));"},
{"lineNum":" 2849","line":"    const dirname = path.dirname(absolute_path) orelse return error{"},
{"lineNum":" 2850","line":"        /// Attempt to remove the root file system path."},
{"lineNum":" 2851","line":"        /// This error is unreachable if `absolute_path` is relative."},
{"lineNum":" 2852","line":"        CannotDeleteRootDirectory,"},
{"lineNum":" 2853","line":"    }.CannotDeleteRootDirectory;"},
{"lineNum":" 2854","line":""},
{"lineNum":" 2855","line":"    var dir = try cwd().openDir(dirname, .{});"},
{"lineNum":" 2856","line":"    defer dir.close();"},
{"lineNum":" 2857","line":""},
{"lineNum":" 2858","line":"    return dir.deleteTree(path.basename(absolute_path));"},
{"lineNum":" 2859","line":"}"},
{"lineNum":" 2860","line":""},
{"lineNum":" 2861","line":"/// Same as `Dir.readLink`, except it asserts the path is absolute."},
{"lineNum":" 2862","line":"pub fn readLinkAbsolute(pathname: []const u8, buffer: *[MAX_PATH_BYTES]u8) ![]u8 {"},
{"lineNum":" 2863","line":"    assert(path.isAbsolute(pathname));"},
{"lineNum":" 2864","line":"    return os.readlink(pathname, buffer);"},
{"lineNum":" 2865","line":"}"},
{"lineNum":" 2866","line":""},
{"lineNum":" 2867","line":"/// Windows-only. Same as `readlinkW`, except the path parameter is null-terminated, WTF16"},
{"lineNum":" 2868","line":"/// encoded."},
{"lineNum":" 2869","line":"pub fn readlinkAbsoluteW(pathname_w: [*:0]const u16, buffer: *[MAX_PATH_BYTES]u8) ![]u8 {"},
{"lineNum":" 2870","line":"    assert(path.isAbsoluteWindowsW(pathname_w));"},
{"lineNum":" 2871","line":"    return os.readlinkW(pathname_w, buffer);"},
{"lineNum":" 2872","line":"}"},
{"lineNum":" 2873","line":""},
{"lineNum":" 2874","line":"/// Same as `readLink`, except the path parameter is null-terminated."},
{"lineNum":" 2875","line":"pub fn readLinkAbsoluteZ(pathname_c: [*:0]const u8, buffer: *[MAX_PATH_BYTES]u8) ![]u8 {"},
{"lineNum":" 2876","line":"    assert(path.isAbsoluteZ(pathname_c));"},
{"lineNum":" 2877","line":"    return os.readlinkZ(pathname_c, buffer);"},
{"lineNum":" 2878","line":"}"},
{"lineNum":" 2879","line":""},
{"lineNum":" 2880","line":"/// Use with `Dir.symLink` and `symLinkAbsolute` to specify whether the symlink"},
{"lineNum":" 2881","line":"/// will point to a file or a directory. This value is ignored on all hosts"},
{"lineNum":" 2882","line":"/// except Windows where creating symlinks to different resource types, requires"},
{"lineNum":" 2883","line":"/// different flags. By default, `symLinkAbsolute` is assumed to point to a file."},
{"lineNum":" 2884","line":"pub const SymLinkFlags = struct {"},
{"lineNum":" 2885","line":"    is_directory: bool = false,"},
{"lineNum":" 2886","line":"};"},
{"lineNum":" 2887","line":""},
{"lineNum":" 2888","line":"/// Creates a symbolic link named `sym_link_path` which contains the string `target_path`."},
{"lineNum":" 2889","line":"/// A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent"},
{"lineNum":" 2890","line":"/// one; the latter case is known as a dangling link."},
{"lineNum":" 2891","line":"/// If `sym_link_path` exists, it will not be overwritten."},
{"lineNum":" 2892","line":"/// See also `symLinkAbsoluteZ` and `symLinkAbsoluteW`."},
{"lineNum":" 2893","line":"pub fn symLinkAbsolute(target_path: []const u8, sym_link_path: []const u8, flags: SymLinkFlags) !void {"},
{"lineNum":" 2894","line":"    assert(path.isAbsolute(target_path));"},
{"lineNum":" 2895","line":"    assert(path.isAbsolute(sym_link_path));"},
{"lineNum":" 2896","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":" 2897","line":"        const target_path_w = try os.windows.sliceToPrefixedFileW(target_path);"},
{"lineNum":" 2898","line":"        const sym_link_path_w = try os.windows.sliceToPrefixedFileW(sym_link_path);"},
{"lineNum":" 2899","line":"        return os.windows.CreateSymbolicLink(null, sym_link_path_w.span(), target_path_w.span(), flags.is_directory);"},
{"lineNum":" 2900","line":"    }"},
{"lineNum":" 2901","line":"    return os.symlink(target_path, sym_link_path);"},
{"lineNum":" 2902","line":"}"},
{"lineNum":" 2903","line":""},
{"lineNum":" 2904","line":"/// Windows-only. Same as `symLinkAbsolute` except the parameters are null-terminated, WTF16 encoded."},
{"lineNum":" 2905","line":"/// Note that this function will by default try creating a symbolic link to a file. If you would"},
{"lineNum":" 2906","line":"/// like to create a symbolic link to a directory, specify this with `SymLinkFlags{ .is_directory = true }`."},
{"lineNum":" 2907","line":"/// See also `symLinkAbsolute`, `symLinkAbsoluteZ`."},
{"lineNum":" 2908","line":"pub fn symLinkAbsoluteW(target_path_w: []const u16, sym_link_path_w: []const u16, flags: SymLinkFlags) !void {"},
{"lineNum":" 2909","line":"    assert(path.isAbsoluteWindowsWTF16(target_path_w));"},
{"lineNum":" 2910","line":"    assert(path.isAbsoluteWindowsWTF16(sym_link_path_w));"},
{"lineNum":" 2911","line":"    return os.windows.CreateSymbolicLink(null, sym_link_path_w, target_path_w, flags.is_directory);"},
{"lineNum":" 2912","line":"}"},
{"lineNum":" 2913","line":""},
{"lineNum":" 2914","line":"/// Same as `symLinkAbsolute` except the parameters are null-terminated pointers."},
{"lineNum":" 2915","line":"/// See also `symLinkAbsolute`."},
{"lineNum":" 2916","line":"pub fn symLinkAbsoluteZ(target_path_c: [*:0]const u8, sym_link_path_c: [*:0]const u8, flags: SymLinkFlags) !void {"},
{"lineNum":" 2917","line":"    assert(path.isAbsoluteZ(target_path_c));"},
{"lineNum":" 2918","line":"    assert(path.isAbsoluteZ(sym_link_path_c));"},
{"lineNum":" 2919","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":" 2920","line":"        const target_path_w = try os.windows.cStrToWin32PrefixedFileW(target_path_c);"},
{"lineNum":" 2921","line":"        const sym_link_path_w = try os.windows.cStrToWin32PrefixedFileW(sym_link_path_c);"},
{"lineNum":" 2922","line":"        return os.windows.CreateSymbolicLink(sym_link_path_w.span(), target_path_w.span(), flags.is_directory);"},
{"lineNum":" 2923","line":"    }"},
{"lineNum":" 2924","line":"    return os.symlinkZ(target_path_c, sym_link_path_c);"},
{"lineNum":" 2925","line":"}"},
{"lineNum":" 2926","line":""},
{"lineNum":" 2927","line":"pub const OpenSelfExeError = error{"},
{"lineNum":" 2928","line":"    SharingViolation,"},
{"lineNum":" 2929","line":"    PathAlreadyExists,"},
{"lineNum":" 2930","line":"    FileNotFound,"},
{"lineNum":" 2931","line":"    AccessDenied,"},
{"lineNum":" 2932","line":"    PipeBusy,"},
{"lineNum":" 2933","line":"    NameTooLong,"},
{"lineNum":" 2934","line":"    /// On Windows, file paths must be valid Unicode."},
{"lineNum":" 2935","line":"    InvalidUtf8,"},
{"lineNum":" 2936","line":"    /// On Windows, file paths cannot contain these characters:"},
{"lineNum":" 2937","line":"    /// \'/\', \'*\', \'?\', \'\"\', \'<\', \'>\', \'|\'"},
{"lineNum":" 2938","line":"    BadPathName,"},
{"lineNum":" 2939","line":"    Unexpected,"},
{"lineNum":" 2940","line":"} || os.OpenError || SelfExePathError || os.FlockError;"},
{"lineNum":" 2941","line":""},
{"lineNum":" 2942","line":"pub fn openSelfExe(flags: File.OpenFlags) OpenSelfExeError!File {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2943","line":"    if (builtin.os.tag == .linux) {"},
{"lineNum":" 2944","line":"        return openFileAbsoluteZ(\"/proc/self/exe\", flags);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2945","line":"    }"},
{"lineNum":" 2946","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":" 2947","line":"        const wide_slice = selfExePathW();"},
{"lineNum":" 2948","line":"        const prefixed_path_w = try os.windows.wToPrefixedFileW(wide_slice);"},
{"lineNum":" 2949","line":"        return cwd().openFileW(prefixed_path_w.span(), flags);"},
{"lineNum":" 2950","line":"    }"},
{"lineNum":" 2951","line":"    // Use of MAX_PATH_BYTES here is valid as the resulting path is immediately"},
{"lineNum":" 2952","line":"    // opened with no modification."},
{"lineNum":" 2953","line":"    var buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 2954","line":"    const self_exe_path = try selfExePath(&buf);"},
{"lineNum":" 2955","line":"    buf[self_exe_path.len] = 0;"},
{"lineNum":" 2956","line":"    return openFileAbsoluteZ(buf[0..self_exe_path.len :0].ptr, flags);"},
{"lineNum":" 2957","line":"}"},
{"lineNum":" 2958","line":""},
{"lineNum":" 2959","line":"pub const SelfExePathError = os.ReadLinkError || os.SysCtlError || os.RealPathError;"},
{"lineNum":" 2960","line":""},
{"lineNum":" 2961","line":"/// `selfExePath` except allocates the result on the heap."},
{"lineNum":" 2962","line":"/// Caller owns returned memory."},
{"lineNum":" 2963","line":"pub fn selfExePathAlloc(allocator: Allocator) ![]u8 {"},
{"lineNum":" 2964","line":"    // Use of MAX_PATH_BYTES here is justified as, at least on one tested Linux"},
{"lineNum":" 2965","line":"    // system, readlink will completely fail to return a result larger than"},
{"lineNum":" 2966","line":"    // PATH_MAX even if given a sufficiently large buffer. This makes it"},
{"lineNum":" 2967","line":"    // fundamentally impossible to get the selfExePath of a program running in"},
{"lineNum":" 2968","line":"    // a very deeply nested directory chain in this way."},
{"lineNum":" 2969","line":"    // TODO(#4812): Investigate other systems and whether it is possible to get"},
{"lineNum":" 2970","line":"    // this path by trying larger and larger buffers until one succeeds."},
{"lineNum":" 2971","line":"    var buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 2972","line":"    return allocator.dupe(u8, try selfExePath(&buf));"},
{"lineNum":" 2973","line":"}"},
{"lineNum":" 2974","line":""},
{"lineNum":" 2975","line":"/// Get the path to the current executable."},
{"lineNum":" 2976","line":"/// If you only need the directory, use selfExeDirPath."},
{"lineNum":" 2977","line":"/// If you only want an open file handle, use openSelfExe."},
{"lineNum":" 2978","line":"/// This function may return an error if the current executable"},
{"lineNum":" 2979","line":"/// was deleted after spawning."},
{"lineNum":" 2980","line":"/// Returned value is a slice of out_buffer."},
{"lineNum":" 2981","line":"///"},
{"lineNum":" 2982","line":"/// On Linux, depends on procfs being mounted. If the currently executing binary has"},
{"lineNum":" 2983","line":"/// been deleted, the file path looks something like `/a/b/c/exe (deleted)`."},
{"lineNum":" 2984","line":"/// TODO make the return type of this a null terminated pointer"},
{"lineNum":" 2985","line":"pub fn selfExePath(out_buffer: []u8) SelfExePathError![]u8 {"},
{"lineNum":" 2986","line":"    if (is_darwin) {"},
{"lineNum":" 2987","line":"        // Note that _NSGetExecutablePath() will return \"a path\" to"},
{"lineNum":" 2988","line":"        // the executable not a \"real path\" to the executable."},
{"lineNum":" 2989","line":"        var symlink_path_buf: [MAX_PATH_BYTES:0]u8 = undefined;"},
{"lineNum":" 2990","line":"        var u32_len: u32 = MAX_PATH_BYTES + 1; // include the sentinel"},
{"lineNum":" 2991","line":"        const rc = std.c._NSGetExecutablePath(&symlink_path_buf, &u32_len);"},
{"lineNum":" 2992","line":"        if (rc != 0) return error.NameTooLong;"},
{"lineNum":" 2993","line":""},
{"lineNum":" 2994","line":"        var real_path_buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 2995","line":"        const real_path = try std.os.realpathZ(&symlink_path_buf, &real_path_buf);"},
{"lineNum":" 2996","line":"        if (real_path.len > out_buffer.len) return error.NameTooLong;"},
{"lineNum":" 2997","line":"        const result = out_buffer[0..real_path.len];"},
{"lineNum":" 2998","line":"        @memcpy(result, real_path);"},
{"lineNum":" 2999","line":"        return result;"},
{"lineNum":" 3000","line":"    }"},
{"lineNum":" 3001","line":"    switch (builtin.os.tag) {"},
{"lineNum":" 3002","line":"        .linux => return os.readlinkZ(\"/proc/self/exe\", out_buffer),"},
{"lineNum":" 3003","line":"        .solaris => return os.readlinkZ(\"/proc/self/path/a.out\", out_buffer),"},
{"lineNum":" 3004","line":"        .freebsd, .dragonfly => {"},
{"lineNum":" 3005","line":"            var mib = [4]c_int{ os.CTL.KERN, os.KERN.PROC, os.KERN.PROC_PATHNAME, -1 };"},
{"lineNum":" 3006","line":"            var out_len: usize = out_buffer.len;"},
{"lineNum":" 3007","line":"            try os.sysctl(&mib, out_buffer.ptr, &out_len, null, 0);"},
{"lineNum":" 3008","line":"            // TODO could this slice from 0 to out_len instead?"},
{"lineNum":" 3009","line":"            return mem.sliceTo(out_buffer, 0);"},
{"lineNum":" 3010","line":"        },"},
{"lineNum":" 3011","line":"        .netbsd => {"},
{"lineNum":" 3012","line":"            var mib = [4]c_int{ os.CTL.KERN, os.KERN.PROC_ARGS, -1, os.KERN.PROC_PATHNAME };"},
{"lineNum":" 3013","line":"            var out_len: usize = out_buffer.len;"},
{"lineNum":" 3014","line":"            try os.sysctl(&mib, out_buffer.ptr, &out_len, null, 0);"},
{"lineNum":" 3015","line":"            // TODO could this slice from 0 to out_len instead?"},
{"lineNum":" 3016","line":"            return mem.sliceTo(out_buffer, 0);"},
{"lineNum":" 3017","line":"        },"},
{"lineNum":" 3018","line":"        .openbsd, .haiku => {"},
{"lineNum":" 3019","line":"            // OpenBSD doesn\'t support getting the path of a running process, so try to guess it"},
{"lineNum":" 3020","line":"            if (os.argv.len == 0)"},
{"lineNum":" 3021","line":"                return error.FileNotFound;"},
{"lineNum":" 3022","line":""},
{"lineNum":" 3023","line":"            const argv0 = mem.span(os.argv[0]);"},
{"lineNum":" 3024","line":"            if (mem.indexOf(u8, argv0, \"/\") != null) {"},
{"lineNum":" 3025","line":"                // argv[0] is a path (relative or absolute): use realpath(3) directly"},
{"lineNum":" 3026","line":"                var real_path_buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 3027","line":"                const real_path = try os.realpathZ(os.argv[0], &real_path_buf);"},
{"lineNum":" 3028","line":"                if (real_path.len > out_buffer.len)"},
{"lineNum":" 3029","line":"                    return error.NameTooLong;"},
{"lineNum":" 3030","line":"                const result = out_buffer[0..real_path.len];"},
{"lineNum":" 3031","line":"                @memcpy(result, real_path);"},
{"lineNum":" 3032","line":"                return result;"},
{"lineNum":" 3033","line":"            } else if (argv0.len != 0) {"},
{"lineNum":" 3034","line":"                // argv[0] is not empty (and not a path): search it inside PATH"},
{"lineNum":" 3035","line":"                const PATH = std.os.getenvZ(\"PATH\") orelse return error.FileNotFound;"},
{"lineNum":" 3036","line":"                var path_it = mem.tokenizeScalar(u8, PATH, path.delimiter);"},
{"lineNum":" 3037","line":"                while (path_it.next()) |a_path| {"},
{"lineNum":" 3038","line":"                    var resolved_path_buf: [MAX_PATH_BYTES - 1:0]u8 = undefined;"},
{"lineNum":" 3039","line":"                    const resolved_path = std.fmt.bufPrintZ(&resolved_path_buf, \"{s}/{s}\", .{"},
{"lineNum":" 3040","line":"                        a_path,"},
{"lineNum":" 3041","line":"                        os.argv[0],"},
{"lineNum":" 3042","line":"                    }) catch continue;"},
{"lineNum":" 3043","line":""},
{"lineNum":" 3044","line":"                    var real_path_buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 3045","line":"                    if (os.realpathZ(resolved_path, &real_path_buf)) |real_path| {"},
{"lineNum":" 3046","line":"                        // found a file, and hope it is the right file"},
{"lineNum":" 3047","line":"                        if (real_path.len > out_buffer.len)"},
{"lineNum":" 3048","line":"                            return error.NameTooLong;"},
{"lineNum":" 3049","line":"                        const result = out_buffer[0..real_path.len];"},
{"lineNum":" 3050","line":"                        @memcpy(result, real_path);"},
{"lineNum":" 3051","line":"                        return result;"},
{"lineNum":" 3052","line":"                    } else |_| continue;"},
{"lineNum":" 3053","line":"                }"},
{"lineNum":" 3054","line":"            }"},
{"lineNum":" 3055","line":"            return error.FileNotFound;"},
{"lineNum":" 3056","line":"        },"},
{"lineNum":" 3057","line":"        .windows => {"},
{"lineNum":" 3058","line":"            const utf16le_slice = selfExePathW();"},
{"lineNum":" 3059","line":"            // Trust that Windows gives us valid UTF-16LE."},
{"lineNum":" 3060","line":"            const end_index = std.unicode.utf16leToUtf8(out_buffer, utf16le_slice) catch unreachable;"},
{"lineNum":" 3061","line":"            return out_buffer[0..end_index];"},
{"lineNum":" 3062","line":"        },"},
{"lineNum":" 3063","line":"        .wasi => @compileError(\"std.fs.selfExePath not supported for WASI. Use std.fs.selfExePathAlloc instead.\"),"},
{"lineNum":" 3064","line":"        else => @compileError(\"std.fs.selfExePath not supported for this target\"),"},
{"lineNum":" 3065","line":"    }"},
{"lineNum":" 3066","line":"}"},
{"lineNum":" 3067","line":""},
{"lineNum":" 3068","line":"/// The result is UTF16LE-encoded."},
{"lineNum":" 3069","line":"pub fn selfExePathW() [:0]const u16 {"},
{"lineNum":" 3070","line":"    const image_path_name = &os.windows.peb().ProcessParameters.ImagePathName;"},
{"lineNum":" 3071","line":"    return image_path_name.Buffer[0 .. image_path_name.Length / 2 :0];"},
{"lineNum":" 3072","line":"}"},
{"lineNum":" 3073","line":""},
{"lineNum":" 3074","line":"/// `selfExeDirPath` except allocates the result on the heap."},
{"lineNum":" 3075","line":"/// Caller owns returned memory."},
{"lineNum":" 3076","line":"pub fn selfExeDirPathAlloc(allocator: Allocator) ![]u8 {"},
{"lineNum":" 3077","line":"    // Use of MAX_PATH_BYTES here is justified as, at least on one tested Linux"},
{"lineNum":" 3078","line":"    // system, readlink will completely fail to return a result larger than"},
{"lineNum":" 3079","line":"    // PATH_MAX even if given a sufficiently large buffer. This makes it"},
{"lineNum":" 3080","line":"    // fundamentally impossible to get the selfExeDirPath of a program running"},
{"lineNum":" 3081","line":"    // in a very deeply nested directory chain in this way."},
{"lineNum":" 3082","line":"    // TODO(#4812): Investigate other systems and whether it is possible to get"},
{"lineNum":" 3083","line":"    // this path by trying larger and larger buffers until one succeeds."},
{"lineNum":" 3084","line":"    var buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 3085","line":"    return allocator.dupe(u8, try selfExeDirPath(&buf));"},
{"lineNum":" 3086","line":"}"},
{"lineNum":" 3087","line":""},
{"lineNum":" 3088","line":"/// Get the directory path that contains the current executable."},
{"lineNum":" 3089","line":"/// Returned value is a slice of out_buffer."},
{"lineNum":" 3090","line":"pub fn selfExeDirPath(out_buffer: []u8) SelfExePathError![]const u8 {"},
{"lineNum":" 3091","line":"    const self_exe_path = try selfExePath(out_buffer);"},
{"lineNum":" 3092","line":"    // Assume that the OS APIs return absolute paths, and therefore dirname"},
{"lineNum":" 3093","line":"    // will not return null."},
{"lineNum":" 3094","line":"    return path.dirname(self_exe_path).?;"},
{"lineNum":" 3095","line":"}"},
{"lineNum":" 3096","line":""},
{"lineNum":" 3097","line":"/// `realpath`, except caller must free the returned memory."},
{"lineNum":" 3098","line":"/// See also `Dir.realpath`."},
{"lineNum":" 3099","line":"pub fn realpathAlloc(allocator: Allocator, pathname: []const u8) ![]u8 {"},
{"lineNum":" 3100","line":"    // Use of MAX_PATH_BYTES here is valid as the realpath function does not"},
{"lineNum":" 3101","line":"    // have a variant that takes an arbitrary-size buffer."},
{"lineNum":" 3102","line":"    // TODO(#4812): Consider reimplementing realpath or using the POSIX.1-2008"},
{"lineNum":" 3103","line":"    // NULL out parameter (GNU\'s canonicalize_file_name) to handle overelong"},
{"lineNum":" 3104","line":"    // paths. musl supports passing NULL but restricts the output to PATH_MAX"},
{"lineNum":" 3105","line":"    // anyway."},
{"lineNum":" 3106","line":"    var buf: [MAX_PATH_BYTES]u8 = undefined;"},
{"lineNum":" 3107","line":"    return allocator.dupe(u8, try os.realpath(pathname, &buf));"},
{"lineNum":" 3108","line":"}"},
{"lineNum":" 3109","line":""},
{"lineNum":" 3110","line":"const CopyFileRawError = error{SystemResources} || os.CopyFileRangeError || os.SendFileError;"},
{"lineNum":" 3111","line":""},
{"lineNum":" 3112","line":"// Transfer all the data between two file descriptors in the most efficient way."},
{"lineNum":" 3113","line":"// The copy starts at offset 0, the initial offsets are preserved."},
{"lineNum":" 3114","line":"// No metadata is transferred over."},
{"lineNum":" 3115","line":"fn copy_file(fd_in: os.fd_t, fd_out: os.fd_t, maybe_size: ?u64) CopyFileRawError!void {"},
{"lineNum":" 3116","line":"    if (comptime builtin.target.isDarwin()) {"},
{"lineNum":" 3117","line":"        const rc = os.system.fcopyfile(fd_in, fd_out, null, os.system.COPYFILE_DATA);"},
{"lineNum":" 3118","line":"        switch (os.errno(rc)) {"},
{"lineNum":" 3119","line":"            .SUCCESS => return,"},
{"lineNum":" 3120","line":"            .INVAL => unreachable,"},
{"lineNum":" 3121","line":"            .NOMEM => return error.SystemResources,"},
{"lineNum":" 3122","line":"            // The source file is not a directory, symbolic link, or regular file."},
{"lineNum":" 3123","line":"            // Try with the fallback path before giving up."},
{"lineNum":" 3124","line":"            .OPNOTSUPP => {},"},
{"lineNum":" 3125","line":"            else => |err| return os.unexpectedErrno(err),"},
{"lineNum":" 3126","line":"        }"},
{"lineNum":" 3127","line":"    }"},
{"lineNum":" 3128","line":""},
{"lineNum":" 3129","line":"    if (builtin.os.tag == .linux) {"},
{"lineNum":" 3130","line":"        // Try copy_file_range first as that works at the FS level and is the"},
{"lineNum":" 3131","line":"        // most efficient method (if available)."},
{"lineNum":" 3132","line":"        var offset: u64 = 0;"},
{"lineNum":" 3133","line":"        cfr_loop: while (true) {"},
{"lineNum":" 3134","line":"            // The kernel checks the u64 value `offset+count` for overflow, use"},
{"lineNum":" 3135","line":"            // a 32 bit value so that the syscall won\'t return EINVAL except for"},
{"lineNum":" 3136","line":"            // impossibly large files (> 2^64-1 - 2^32-1)."},
{"lineNum":" 3137","line":"            const amt = try os.copy_file_range(fd_in, offset, fd_out, offset, math.maxInt(u32), 0);"},
{"lineNum":" 3138","line":"            // Terminate as soon as we have copied size bytes or no bytes"},
{"lineNum":" 3139","line":"            if (maybe_size) |s| {"},
{"lineNum":" 3140","line":"                if (s == amt) break :cfr_loop;"},
{"lineNum":" 3141","line":"            }"},
{"lineNum":" 3142","line":"            if (amt == 0) break :cfr_loop;"},
{"lineNum":" 3143","line":"            offset += amt;"},
{"lineNum":" 3144","line":"        }"},
{"lineNum":" 3145","line":"        return;"},
{"lineNum":" 3146","line":"    }"},
{"lineNum":" 3147","line":""},
{"lineNum":" 3148","line":"    // Sendfile is a zero-copy mechanism iff the OS supports it, otherwise the"},
{"lineNum":" 3149","line":"    // fallback code will copy the contents chunk by chunk."},
{"lineNum":" 3150","line":"    const empty_iovec = [0]os.iovec_const{};"},
{"lineNum":" 3151","line":"    var offset: u64 = 0;"},
{"lineNum":" 3152","line":"    sendfile_loop: while (true) {"},
{"lineNum":" 3153","line":"        const amt = try os.sendfile(fd_out, fd_in, offset, 0, &empty_iovec, &empty_iovec, 0);"},
{"lineNum":" 3154","line":"        // Terminate as soon as we have copied size bytes or no bytes"},
{"lineNum":" 3155","line":"        if (maybe_size) |s| {"},
{"lineNum":" 3156","line":"            if (s == amt) break :sendfile_loop;"},
{"lineNum":" 3157","line":"        }"},
{"lineNum":" 3158","line":"        if (amt == 0) break :sendfile_loop;"},
{"lineNum":" 3159","line":"        offset += amt;"},
{"lineNum":" 3160","line":"    }"},
{"lineNum":" 3161","line":"}"},
{"lineNum":" 3162","line":""},
{"lineNum":" 3163","line":"test {"},
{"lineNum":" 3164","line":"    if (builtin.os.tag != .wasi) {"},
{"lineNum":" 3165","line":"        _ = &makeDirAbsolute;"},
{"lineNum":" 3166","line":"        _ = &makeDirAbsoluteZ;"},
{"lineNum":" 3167","line":"        _ = &copyFileAbsolute;"},
{"lineNum":" 3168","line":"        _ = &updateFileAbsolute;"},
{"lineNum":" 3169","line":"    }"},
{"lineNum":" 3170","line":"    _ = &Dir.copyFile;"},
{"lineNum":" 3171","line":"    _ = @import(\"fs/test.zig\");"},
{"lineNum":" 3172","line":"    _ = @import(\"fs/path.zig\");"},
{"lineNum":" 3173","line":"    _ = @import(\"fs/file.zig\");"},
{"lineNum":" 3174","line":"    _ = @import(\"fs/get_app_data_dir.zig\");"},
{"lineNum":" 3175","line":"    _ = @import(\"fs/watch.zig\");"},
{"lineNum":" 3176","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 48, "covered" : 0,};
var merged_data = [];
