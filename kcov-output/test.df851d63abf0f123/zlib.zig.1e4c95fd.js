var data = {lines:[
{"lineNum":"    1","line":"//"},
{"lineNum":"    2","line":"// Compressor/Decompressor for ZLIB data streams (RFC1950)"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const std = @import(\"std\");"},
{"lineNum":"    5","line":"const io = std.io;"},
{"lineNum":"    6","line":"const fs = std.fs;"},
{"lineNum":"    7","line":"const testing = std.testing;"},
{"lineNum":"    8","line":"const mem = std.mem;"},
{"lineNum":"    9","line":"const deflate = std.compress.deflate;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// Zlib header format as specified in RFC1950"},
{"lineNum":"   12","line":"const ZLibHeader = packed struct {"},
{"lineNum":"   13","line":"    checksum: u5,"},
{"lineNum":"   14","line":"    preset_dict: u1,"},
{"lineNum":"   15","line":"    compression_level: u2,"},
{"lineNum":"   16","line":"    compression_method: u4,"},
{"lineNum":"   17","line":"    compression_info: u4,"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    const DEFLATE = 8;"},
{"lineNum":"   20","line":"    const WINDOW_32K = 7;"},
{"lineNum":"   21","line":"};"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"pub fn DecompressStream(comptime ReaderType: type) type {"},
{"lineNum":"   24","line":"    return struct {"},
{"lineNum":"   25","line":"        const Self = @This();"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        pub const Error = ReaderType.Error ||"},
{"lineNum":"   28","line":"            deflate.Decompressor(ReaderType).Error ||"},
{"lineNum":"   29","line":"            error{ WrongChecksum, Unsupported };"},
{"lineNum":"   30","line":"        pub const Reader = io.Reader(*Self, Error, read);"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        allocator: mem.Allocator,"},
{"lineNum":"   33","line":"        inflater: deflate.Decompressor(ReaderType),"},
{"lineNum":"   34","line":"        in_reader: ReaderType,"},
{"lineNum":"   35","line":"        hasher: std.hash.Adler32,"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        fn init(allocator: mem.Allocator, source: ReaderType) !Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"            // Zlib header format is specified in RFC1950"},
{"lineNum":"   39","line":"            const header_u16 = try source.readIntBig(u16);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"            // verify the header checksum"},
{"lineNum":"   42","line":"            if (header_u16 % 31 != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"                return error.BadHeader;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"            const header = @as(ZLibHeader, @bitCast(header_u16));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"            // The CM field must be 8 to indicate the use of DEFLATE"},
{"lineNum":"   47","line":"            if (header.compression_method != ZLibHeader.DEFLATE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"                return error.InvalidCompression;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"            // CINFO is the base-2 logarithm of the LZ77 window size, minus 8."},
{"lineNum":"   50","line":"            // Values above 7 are unspecified and therefore rejected."},
{"lineNum":"   51","line":"            if (header.compression_info > ZLibHeader.WINDOW_32K)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"                return error.InvalidWindowSize;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"            const dictionary = null;"},
{"lineNum":"   55","line":"            // TODO: Support this case"},
{"lineNum":"   56","line":"            if (header.preset_dict != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"                return error.Unsupported;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"            return Self{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"                .allocator = allocator,"},
{"lineNum":"   61","line":"                .inflater = try deflate.decompressor(allocator, source, dictionary),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":"                .in_reader = source,"},
{"lineNum":"   63","line":"                .hasher = std.hash.Adler32.init(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"            };"},
{"lineNum":"   65","line":"        }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        pub fn deinit(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"            self.inflater.deinit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        // Implements the io.Reader interface"},
{"lineNum":"   72","line":"        pub fn read(self: *Self, buffer: []u8) Error!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"            if (buffer.len == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"                return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"            // Read from the compressed stream and update the computed checksum"},
{"lineNum":"   77","line":"            const r = try self.inflater.read(buffer);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"            if (r != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"                self.hasher.update(buffer[0..r]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   80","line":"                return r;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"            }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"            // We\'ve reached the end of stream, check if the checksum matches"},
{"lineNum":"   84","line":"            const hash = try self.in_reader.readIntBig(u32);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":"            if (hash != self.hasher.final())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"                return error.WrongChecksum;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"            return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"        }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        pub fn reader(self: *Self) Reader {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"            return .{ .context = self };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"    };"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"pub fn decompressStream(allocator: mem.Allocator, reader: anytype) !DecompressStream(@TypeOf(reader)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"    return DecompressStream(@TypeOf(reader)).init(allocator, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"}"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"pub const CompressionLevel = enum(u2) {"},
{"lineNum":"  102","line":"    no_compression = 0,"},
{"lineNum":"  103","line":"    fastest = 1,"},
{"lineNum":"  104","line":"    default = 2,"},
{"lineNum":"  105","line":"    maximum = 3,"},
{"lineNum":"  106","line":"};"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"pub const CompressStreamOptions = struct {"},
{"lineNum":"  109","line":"    level: CompressionLevel = .default,"},
{"lineNum":"  110","line":"};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"pub fn CompressStream(comptime WriterType: type) type {"},
{"lineNum":"  113","line":"    return struct {"},
{"lineNum":"  114","line":"        const Self = @This();"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"        const Error = WriterType.Error ||"},
{"lineNum":"  117","line":"            deflate.Compressor(WriterType).Error;"},
{"lineNum":"  118","line":"        pub const Writer = io.Writer(*Self, Error, write);"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        allocator: mem.Allocator,"},
{"lineNum":"  121","line":"        deflator: deflate.Compressor(WriterType),"},
{"lineNum":"  122","line":"        in_writer: WriterType,"},
{"lineNum":"  123","line":"        hasher: std.hash.Adler32,"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        fn init(allocator: mem.Allocator, dest: WriterType, options: CompressStreamOptions) !Self {"},
{"lineNum":"  126","line":"            var header = ZLibHeader{"},
{"lineNum":"  127","line":"                .compression_info = ZLibHeader.WINDOW_32K,"},
{"lineNum":"  128","line":"                .compression_method = ZLibHeader.DEFLATE,"},
{"lineNum":"  129","line":"                .compression_level = @intFromEnum(options.level),"},
{"lineNum":"  130","line":"                .preset_dict = 0,"},
{"lineNum":"  131","line":"                .checksum = 0,"},
{"lineNum":"  132","line":"            };"},
{"lineNum":"  133","line":"            header.checksum = @as(u5, @truncate(31 - @as(u16, @bitCast(header)) % 31));"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            try dest.writeIntBig(u16, @as(u16, @bitCast(header)));"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"            const compression_level: deflate.Compression = switch (options.level) {"},
{"lineNum":"  138","line":"                .no_compression => .no_compression,"},
{"lineNum":"  139","line":"                .fastest => .best_speed,"},
{"lineNum":"  140","line":"                .default => .default_compression,"},
{"lineNum":"  141","line":"                .maximum => .best_compression,"},
{"lineNum":"  142","line":"            };"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"            return Self{"},
{"lineNum":"  145","line":"                .allocator = allocator,"},
{"lineNum":"  146","line":"                .deflator = try deflate.compressor(allocator, dest, .{ .level = compression_level }),"},
{"lineNum":"  147","line":"                .in_writer = dest,"},
{"lineNum":"  148","line":"                .hasher = std.hash.Adler32.init(),"},
{"lineNum":"  149","line":"            };"},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"        pub fn write(self: *Self, bytes: []const u8) Error!usize {"},
{"lineNum":"  153","line":"            if (bytes.len == 0) {"},
{"lineNum":"  154","line":"                return 0;"},
{"lineNum":"  155","line":"            }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"            const w = try self.deflator.write(bytes);"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"            self.hasher.update(bytes[0..w]);"},
{"lineNum":"  160","line":"            return w;"},
{"lineNum":"  161","line":"        }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        pub fn writer(self: *Self) Writer {"},
{"lineNum":"  164","line":"            return .{ .context = self };"},
{"lineNum":"  165","line":"        }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        pub fn deinit(self: *Self) void {"},
{"lineNum":"  168","line":"            self.deflator.deinit();"},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        pub fn finish(self: *Self) !void {"},
{"lineNum":"  172","line":"            const hash = self.hasher.final();"},
{"lineNum":"  173","line":"            try self.deflator.close();"},
{"lineNum":"  174","line":"            try self.in_writer.writeIntBig(u32, hash);"},
{"lineNum":"  175","line":"        }"},
{"lineNum":"  176","line":"    };"},
{"lineNum":"  177","line":"}"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"pub fn compressStream(allocator: mem.Allocator, writer: anytype, options: CompressStreamOptions) !CompressStream(@TypeOf(writer)) {"},
{"lineNum":"  180","line":"    return CompressStream(@TypeOf(writer)).init(allocator, writer, options);"},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"fn testDecompress(data: []const u8, expected: []const u8) !void {"},
{"lineNum":"  184","line":"    var in_stream = io.fixedBufferStream(data);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    var zlib_stream = try decompressStream(testing.allocator, in_stream.reader());"},
{"lineNum":"  187","line":"    defer zlib_stream.deinit();"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    // Read and decompress the whole file"},
{"lineNum":"  190","line":"    const buf = try zlib_stream.reader().readAllAlloc(testing.allocator, std.math.maxInt(usize));"},
{"lineNum":"  191","line":"    defer testing.allocator.free(buf);"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    // Check against the reference"},
{"lineNum":"  194","line":"    try testing.expectEqualSlices(u8, expected, buf);"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"// All the test cases are obtained by compressing the RFC1951 text"},
{"lineNum":"  198","line":"//"},
{"lineNum":"  199","line":"// https://tools.ietf.org/rfc/rfc1951.txt length=36944 bytes"},
{"lineNum":"  200","line":"// SHA256=5ebf4b5b7fe1c3a0c0ab9aa3ac8c0f3853a7dc484905e76e03b0b0f301350009"},
{"lineNum":"  201","line":"test \"compressed data\" {"},
{"lineNum":"  202","line":"    const rfc1951_txt = @embedFile(\"testdata/rfc1951.txt\");"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    // Compressed with compression level = 0"},
{"lineNum":"  205","line":"    try testDecompress("},
{"lineNum":"  206","line":"        @embedFile(\"testdata/rfc1951.txt.z.0\"),"},
{"lineNum":"  207","line":"        rfc1951_txt,"},
{"lineNum":"  208","line":"    );"},
{"lineNum":"  209","line":"    // Compressed with compression level = 9"},
{"lineNum":"  210","line":"    try testDecompress("},
{"lineNum":"  211","line":"        @embedFile(\"testdata/rfc1951.txt.z.9\"),"},
{"lineNum":"  212","line":"        rfc1951_txt,"},
{"lineNum":"  213","line":"    );"},
{"lineNum":"  214","line":"    // Compressed with compression level = 9 and fixed Huffman codes"},
{"lineNum":"  215","line":"    try testDecompress("},
{"lineNum":"  216","line":"        @embedFile(\"testdata/rfc1951.txt.fixed.z.9\"),"},
{"lineNum":"  217","line":"        rfc1951_txt,"},
{"lineNum":"  218","line":"    );"},
{"lineNum":"  219","line":"}"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"test \"don\'t read past deflate stream\'s end\" {"},
{"lineNum":"  222","line":"    try testDecompress(&[_]u8{"},
{"lineNum":"  223","line":"        0x08, 0xd7, 0x63, 0xf8, 0xcf, 0xc0, 0xc0, 0x00, 0xc1, 0xff,"},
{"lineNum":"  224","line":"        0xff, 0x43, 0x30, 0x03, 0x03, 0xc3, 0xff, 0xff, 0xff, 0x01,"},
{"lineNum":"  225","line":"        0x83, 0x95, 0x0b, 0xf5,"},
{"lineNum":"  226","line":"    }, &[_]u8{"},
{"lineNum":"  227","line":"        0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,"},
{"lineNum":"  228","line":"        0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,"},
{"lineNum":"  229","line":"        0x00, 0x00, 0xff, 0xff, 0xff,"},
{"lineNum":"  230","line":"    });"},
{"lineNum":"  231","line":"}"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"test \"sanity checks\" {"},
{"lineNum":"  234","line":"    // Truncated header"},
{"lineNum":"  235","line":"    try testing.expectError("},
{"lineNum":"  236","line":"        error.EndOfStream,"},
{"lineNum":"  237","line":"        testDecompress(&[_]u8{0x78}, \"\"),"},
{"lineNum":"  238","line":"    );"},
{"lineNum":"  239","line":"    // Failed FCHECK check"},
{"lineNum":"  240","line":"    try testing.expectError("},
{"lineNum":"  241","line":"        error.BadHeader,"},
{"lineNum":"  242","line":"        testDecompress(&[_]u8{ 0x78, 0x9D }, \"\"),"},
{"lineNum":"  243","line":"    );"},
{"lineNum":"  244","line":"    // Wrong CM"},
{"lineNum":"  245","line":"    try testing.expectError("},
{"lineNum":"  246","line":"        error.InvalidCompression,"},
{"lineNum":"  247","line":"        testDecompress(&[_]u8{ 0x79, 0x94 }, \"\"),"},
{"lineNum":"  248","line":"    );"},
{"lineNum":"  249","line":"    // Wrong CINFO"},
{"lineNum":"  250","line":"    try testing.expectError("},
{"lineNum":"  251","line":"        error.InvalidWindowSize,"},
{"lineNum":"  252","line":"        testDecompress(&[_]u8{ 0x88, 0x98 }, \"\"),"},
{"lineNum":"  253","line":"    );"},
{"lineNum":"  254","line":"    // Wrong checksum"},
{"lineNum":"  255","line":"    try testing.expectError("},
{"lineNum":"  256","line":"        error.WrongChecksum,"},
{"lineNum":"  257","line":"        testDecompress(&[_]u8{ 0x78, 0xda, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, \"\"),"},
{"lineNum":"  258","line":"    );"},
{"lineNum":"  259","line":"    // Truncated checksum"},
{"lineNum":"  260","line":"    try testing.expectError("},
{"lineNum":"  261","line":"        error.EndOfStream,"},
{"lineNum":"  262","line":"        testDecompress(&[_]u8{ 0x78, 0xda, 0x03, 0x00, 0x00 }, \"\"),"},
{"lineNum":"  263","line":"    );"},
{"lineNum":"  264","line":"}"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"test \"compress data\" {"},
{"lineNum":"  267","line":"    const allocator = testing.allocator;"},
{"lineNum":"  268","line":"    const rfc1951_txt = @embedFile(\"testdata/rfc1951.txt\");"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    for (std.meta.tags(CompressionLevel)) |level| {"},
{"lineNum":"  271","line":"        var compressed_data = std.ArrayList(u8).init(allocator);"},
{"lineNum":"  272","line":"        defer compressed_data.deinit();"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        var compressor = try compressStream(allocator, compressed_data.writer(), .{ .level = level });"},
{"lineNum":"  275","line":"        defer compressor.deinit();"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"        try compressor.writer().writeAll(rfc1951_txt);"},
{"lineNum":"  278","line":"        try compressor.finish();"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"        try testDecompress(compressed_data.items, rfc1951_txt);"},
{"lineNum":"  281","line":"    }"},
{"lineNum":"  282","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
