var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const mem = std.mem;"},
{"lineNum":"    4","line":"const Version = std.SemanticVersion;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"pub const Target = struct {"},
{"lineNum":"    7","line":"    cpu: Cpu,"},
{"lineNum":"    8","line":"    os: Os,"},
{"lineNum":"    9","line":"    abi: Abi,"},
{"lineNum":"   10","line":"    ofmt: ObjectFormat,"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"    pub const Os = struct {"},
{"lineNum":"   13","line":"        tag: Tag,"},
{"lineNum":"   14","line":"        version_range: VersionRange,"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"        pub const Tag = enum {"},
{"lineNum":"   17","line":"            freestanding,"},
{"lineNum":"   18","line":"            ananas,"},
{"lineNum":"   19","line":"            cloudabi,"},
{"lineNum":"   20","line":"            dragonfly,"},
{"lineNum":"   21","line":"            freebsd,"},
{"lineNum":"   22","line":"            fuchsia,"},
{"lineNum":"   23","line":"            ios,"},
{"lineNum":"   24","line":"            kfreebsd,"},
{"lineNum":"   25","line":"            linux,"},
{"lineNum":"   26","line":"            lv2,"},
{"lineNum":"   27","line":"            macos,"},
{"lineNum":"   28","line":"            netbsd,"},
{"lineNum":"   29","line":"            openbsd,"},
{"lineNum":"   30","line":"            solaris,"},
{"lineNum":"   31","line":"            windows,"},
{"lineNum":"   32","line":"            zos,"},
{"lineNum":"   33","line":"            haiku,"},
{"lineNum":"   34","line":"            minix,"},
{"lineNum":"   35","line":"            rtems,"},
{"lineNum":"   36","line":"            nacl,"},
{"lineNum":"   37","line":"            aix,"},
{"lineNum":"   38","line":"            cuda,"},
{"lineNum":"   39","line":"            nvcl,"},
{"lineNum":"   40","line":"            amdhsa,"},
{"lineNum":"   41","line":"            ps4,"},
{"lineNum":"   42","line":"            ps5,"},
{"lineNum":"   43","line":"            elfiamcu,"},
{"lineNum":"   44","line":"            tvos,"},
{"lineNum":"   45","line":"            watchos,"},
{"lineNum":"   46","line":"            driverkit,"},
{"lineNum":"   47","line":"            mesa3d,"},
{"lineNum":"   48","line":"            contiki,"},
{"lineNum":"   49","line":"            amdpal,"},
{"lineNum":"   50","line":"            hermit,"},
{"lineNum":"   51","line":"            hurd,"},
{"lineNum":"   52","line":"            wasi,"},
{"lineNum":"   53","line":"            emscripten,"},
{"lineNum":"   54","line":"            shadermodel,"},
{"lineNum":"   55","line":"            uefi,"},
{"lineNum":"   56","line":"            opencl,"},
{"lineNum":"   57","line":"            glsl450,"},
{"lineNum":"   58","line":"            vulkan,"},
{"lineNum":"   59","line":"            plan9,"},
{"lineNum":"   60","line":"            other,"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"            pub inline fn isDarwin(tag: Tag) bool {"},
{"lineNum":"   63","line":"                return switch (tag) {"},
{"lineNum":"   64","line":"                    .ios, .macos, .watchos, .tvos => true,"},
{"lineNum":"   65","line":"                    else => false,"},
{"lineNum":"   66","line":"                };"},
{"lineNum":"   67","line":"            }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"            pub inline fn isBSD(tag: Tag) bool {"},
{"lineNum":"   70","line":"                return tag.isDarwin() or switch (tag) {"},
{"lineNum":"   71","line":"                    .kfreebsd, .freebsd, .openbsd, .netbsd, .dragonfly => true,"},
{"lineNum":"   72","line":"                    else => false,"},
{"lineNum":"   73","line":"                };"},
{"lineNum":"   74","line":"            }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"            pub fn dynamicLibSuffix(tag: Tag) [:0]const u8 {"},
{"lineNum":"   77","line":"                if (tag.isDarwin()) {"},
{"lineNum":"   78","line":"                    return \".dylib\";"},
{"lineNum":"   79","line":"                }"},
{"lineNum":"   80","line":"                switch (tag) {"},
{"lineNum":"   81","line":"                    .windows => return \".dll\","},
{"lineNum":"   82","line":"                    else => return \".so\","},
{"lineNum":"   83","line":"                }"},
{"lineNum":"   84","line":"            }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            pub fn defaultVersionRange(tag: Tag, arch: Cpu.Arch) Os {"},
{"lineNum":"   87","line":"                return .{"},
{"lineNum":"   88","line":"                    .tag = tag,"},
{"lineNum":"   89","line":"                    .version_range = VersionRange.default(tag, arch),"},
{"lineNum":"   90","line":"                };"},
{"lineNum":"   91","line":"            }"},
{"lineNum":"   92","line":"        };"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"        /// Based on NTDDI version constants from"},
{"lineNum":"   95","line":"        /// https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt"},
{"lineNum":"   96","line":"        pub const WindowsVersion = enum(u32) {"},
{"lineNum":"   97","line":"            nt4 = 0x04000000,"},
{"lineNum":"   98","line":"            win2k = 0x05000000,"},
{"lineNum":"   99","line":"            xp = 0x05010000,"},
{"lineNum":"  100","line":"            ws2003 = 0x05020000,"},
{"lineNum":"  101","line":"            vista = 0x06000000,"},
{"lineNum":"  102","line":"            win7 = 0x06010000,"},
{"lineNum":"  103","line":"            win8 = 0x06020000,"},
{"lineNum":"  104","line":"            win8_1 = 0x06030000,"},
{"lineNum":"  105","line":"            win10 = 0x0A000000, //aka win10_th1"},
{"lineNum":"  106","line":"            win10_th2 = 0x0A000001,"},
{"lineNum":"  107","line":"            win10_rs1 = 0x0A000002,"},
{"lineNum":"  108","line":"            win10_rs2 = 0x0A000003,"},
{"lineNum":"  109","line":"            win10_rs3 = 0x0A000004,"},
{"lineNum":"  110","line":"            win10_rs4 = 0x0A000005,"},
{"lineNum":"  111","line":"            win10_rs5 = 0x0A000006,"},
{"lineNum":"  112","line":"            win10_19h1 = 0x0A000007,"},
{"lineNum":"  113","line":"            win10_vb = 0x0A000008, //aka win10_19h2"},
{"lineNum":"  114","line":"            win10_mn = 0x0A000009, //aka win10_20h1"},
{"lineNum":"  115","line":"            win10_fe = 0x0A00000A, //aka win10_20h2"},
{"lineNum":"  116","line":"            _,"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"            /// Latest Windows version that the Zig Standard Library is aware of"},
{"lineNum":"  119","line":"            pub const latest = WindowsVersion.win10_fe;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"            /// Compared against build numbers reported by the runtime to distinguish win10 versions,"},
{"lineNum":"  122","line":"            /// where 0x0A000000 + index corresponds to the WindowsVersion u32 value."},
{"lineNum":"  123","line":"            pub const known_win10_build_numbers = [_]u32{"},
{"lineNum":"  124","line":"                10240, //win10 aka win10_th1"},
{"lineNum":"  125","line":"                10586, //win10_th2"},
{"lineNum":"  126","line":"                14393, //win10_rs1"},
{"lineNum":"  127","line":"                15063, //win10_rs2"},
{"lineNum":"  128","line":"                16299, //win10_rs3"},
{"lineNum":"  129","line":"                17134, //win10_rs4"},
{"lineNum":"  130","line":"                17763, //win10_rs5"},
{"lineNum":"  131","line":"                18362, //win10_19h1"},
{"lineNum":"  132","line":"                18363, //win10_vb aka win10_19h2"},
{"lineNum":"  133","line":"                19041, //win10_mn aka win10_20h1"},
{"lineNum":"  134","line":"                19042, //win10_fe aka win10_20h2"},
{"lineNum":"  135","line":"            };"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"            /// Returns whether the first version `self` is newer (greater) than or equal to the second version `ver`."},
{"lineNum":"  138","line":"            pub inline fn isAtLeast(self: WindowsVersion, ver: WindowsVersion) bool {"},
{"lineNum":"  139","line":"                return @intFromEnum(self) >= @intFromEnum(ver);"},
{"lineNum":"  140","line":"            }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"            pub const Range = struct {"},
{"lineNum":"  143","line":"                min: WindowsVersion,"},
{"lineNum":"  144","line":"                max: WindowsVersion,"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"                pub inline fn includesVersion(self: Range, ver: WindowsVersion) bool {"},
{"lineNum":"  147","line":"                    return @intFromEnum(ver) >= @intFromEnum(self.min) and @intFromEnum(ver) <= @intFromEnum(self.max);"},
{"lineNum":"  148","line":"                }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"                /// Checks if system is guaranteed to be at least `version` or older than `version`."},
{"lineNum":"  151","line":"                /// Returns `null` if a runtime check is required."},
{"lineNum":"  152","line":"                pub inline fn isAtLeast(self: Range, ver: WindowsVersion) ?bool {"},
{"lineNum":"  153","line":"                    if (@intFromEnum(self.min) >= @intFromEnum(ver)) return true;"},
{"lineNum":"  154","line":"                    if (@intFromEnum(self.max) < @intFromEnum(ver)) return false;"},
{"lineNum":"  155","line":"                    return null;"},
{"lineNum":"  156","line":"                }"},
{"lineNum":"  157","line":"            };"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"            /// This function is defined to serialize a Zig source code representation of this"},
{"lineNum":"  160","line":"            /// type, that, when parsed, will deserialize into the same data."},
{"lineNum":"  161","line":"            pub fn format("},
{"lineNum":"  162","line":"                self: WindowsVersion,"},
{"lineNum":"  163","line":"                comptime fmt: []const u8,"},
{"lineNum":"  164","line":"                _: std.fmt.FormatOptions,"},
{"lineNum":"  165","line":"                out_stream: anytype,"},
{"lineNum":"  166","line":"            ) !void {"},
{"lineNum":"  167","line":"                if (comptime std.mem.eql(u8, fmt, \"s\")) {"},
{"lineNum":"  168","line":"                    if (@intFromEnum(self) >= @intFromEnum(WindowsVersion.nt4) and @intFromEnum(self) <= @intFromEnum(WindowsVersion.latest)) {"},
{"lineNum":"  169","line":"                        try std.fmt.format(out_stream, \".{s}\", .{@tagName(self)});"},
{"lineNum":"  170","line":"                    } else {"},
{"lineNum":"  171","line":"                        // TODO this code path breaks zig triples, but it is used in `builtin`"},
{"lineNum":"  172","line":"                        try std.fmt.format(out_stream, \"@enumFromInt(Target.Os.WindowsVersion, 0x{X:0>8})\", .{@intFromEnum(self)});"},
{"lineNum":"  173","line":"                    }"},
{"lineNum":"  174","line":"                } else if (fmt.len == 0) {"},
{"lineNum":"  175","line":"                    if (@intFromEnum(self) >= @intFromEnum(WindowsVersion.nt4) and @intFromEnum(self) <= @intFromEnum(WindowsVersion.latest)) {"},
{"lineNum":"  176","line":"                        try std.fmt.format(out_stream, \"WindowsVersion.{s}\", .{@tagName(self)});"},
{"lineNum":"  177","line":"                    } else {"},
{"lineNum":"  178","line":"                        try std.fmt.format(out_stream, \"WindowsVersion(0x{X:0>8})\", .{@intFromEnum(self)});"},
{"lineNum":"  179","line":"                    }"},
{"lineNum":"  180","line":"                } else {"},
{"lineNum":"  181","line":"                    std.fmt.invalidFmtError(fmt, self);"},
{"lineNum":"  182","line":"                }"},
{"lineNum":"  183","line":"            }"},
{"lineNum":"  184","line":"        };"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"        pub const LinuxVersionRange = struct {"},
{"lineNum":"  187","line":"            range: Version.Range,"},
{"lineNum":"  188","line":"            glibc: Version,"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"            pub inline fn includesVersion(self: LinuxVersionRange, ver: Version) bool {"},
{"lineNum":"  191","line":"                return self.range.includesVersion(ver);"},
{"lineNum":"  192","line":"            }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"            /// Checks if system is guaranteed to be at least `version` or older than `version`."},
{"lineNum":"  195","line":"            /// Returns `null` if a runtime check is required."},
{"lineNum":"  196","line":"            pub inline fn isAtLeast(self: LinuxVersionRange, ver: Version) ?bool {"},
{"lineNum":"  197","line":"                return self.range.isAtLeast(ver);"},
{"lineNum":"  198","line":"            }"},
{"lineNum":"  199","line":"        };"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"        /// The version ranges here represent the minimum OS version to be supported"},
{"lineNum":"  202","line":"        /// and the maximum OS version to be supported. The default values represent"},
{"lineNum":"  203","line":"        /// the range that the Zig Standard Library bases its abstractions on."},
{"lineNum":"  204","line":"        ///"},
{"lineNum":"  205","line":"        /// The minimum version of the range is the main setting to tweak for a target."},
{"lineNum":"  206","line":"        /// Usually, the maximum target OS version will remain the default, which is"},
{"lineNum":"  207","line":"        /// the latest released version of the OS."},
{"lineNum":"  208","line":"        ///"},
{"lineNum":"  209","line":"        /// To test at compile time if the target is guaranteed to support a given OS feature,"},
{"lineNum":"  210","line":"        /// one should check that the minimum version of the range is greater than or equal to"},
{"lineNum":"  211","line":"        /// the version the feature was introduced in."},
{"lineNum":"  212","line":"        ///"},
{"lineNum":"  213","line":"        /// To test at compile time if the target certainly will not support a given OS feature,"},
{"lineNum":"  214","line":"        /// one should check that the maximum version of the range is less than the version the"},
{"lineNum":"  215","line":"        /// feature was introduced in."},
{"lineNum":"  216","line":"        ///"},
{"lineNum":"  217","line":"        /// If neither of these cases apply, a runtime check should be used to determine if the"},
{"lineNum":"  218","line":"        /// target supports a given OS feature."},
{"lineNum":"  219","line":"        ///"},
{"lineNum":"  220","line":"        /// Binaries built with a given maximum version will continue to function on newer"},
{"lineNum":"  221","line":"        /// operating system versions. However, such a binary may not take full advantage of the"},
{"lineNum":"  222","line":"        /// newer operating system APIs."},
{"lineNum":"  223","line":"        ///"},
{"lineNum":"  224","line":"        /// See `Os.isAtLeast`."},
{"lineNum":"  225","line":"        pub const VersionRange = union {"},
{"lineNum":"  226","line":"            none: void,"},
{"lineNum":"  227","line":"            semver: Version.Range,"},
{"lineNum":"  228","line":"            linux: LinuxVersionRange,"},
{"lineNum":"  229","line":"            windows: WindowsVersion.Range,"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"            /// The default `VersionRange` represents the range that the Zig Standard Library"},
{"lineNum":"  232","line":"            /// bases its abstractions on."},
{"lineNum":"  233","line":"            pub fn default(tag: Tag, arch: Cpu.Arch) VersionRange {"},
{"lineNum":"  234","line":"                switch (tag) {"},
{"lineNum":"  235","line":"                    .freestanding,"},
{"lineNum":"  236","line":"                    .ananas,"},
{"lineNum":"  237","line":"                    .cloudabi,"},
{"lineNum":"  238","line":"                    .fuchsia,"},
{"lineNum":"  239","line":"                    .kfreebsd,"},
{"lineNum":"  240","line":"                    .lv2,"},
{"lineNum":"  241","line":"                    .zos,"},
{"lineNum":"  242","line":"                    .haiku,"},
{"lineNum":"  243","line":"                    .minix,"},
{"lineNum":"  244","line":"                    .rtems,"},
{"lineNum":"  245","line":"                    .nacl,"},
{"lineNum":"  246","line":"                    .aix,"},
{"lineNum":"  247","line":"                    .cuda,"},
{"lineNum":"  248","line":"                    .nvcl,"},
{"lineNum":"  249","line":"                    .amdhsa,"},
{"lineNum":"  250","line":"                    .ps4,"},
{"lineNum":"  251","line":"                    .ps5,"},
{"lineNum":"  252","line":"                    .elfiamcu,"},
{"lineNum":"  253","line":"                    .mesa3d,"},
{"lineNum":"  254","line":"                    .contiki,"},
{"lineNum":"  255","line":"                    .amdpal,"},
{"lineNum":"  256","line":"                    .hermit,"},
{"lineNum":"  257","line":"                    .hurd,"},
{"lineNum":"  258","line":"                    .wasi,"},
{"lineNum":"  259","line":"                    .emscripten,"},
{"lineNum":"  260","line":"                    .driverkit,"},
{"lineNum":"  261","line":"                    .shadermodel,"},
{"lineNum":"  262","line":"                    .uefi,"},
{"lineNum":"  263","line":"                    .opencl, // TODO: OpenCL versions"},
{"lineNum":"  264","line":"                    .glsl450, // TODO: GLSL versions"},
{"lineNum":"  265","line":"                    .vulkan,"},
{"lineNum":"  266","line":"                    .plan9,"},
{"lineNum":"  267","line":"                    .other,"},
{"lineNum":"  268","line":"                    => return .{ .none = {} },"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"                    .freebsd => return .{"},
{"lineNum":"  271","line":"                        .semver = Version.Range{"},
{"lineNum":"  272","line":"                            .min = .{ .major = 12, .minor = 0, .patch = 0 },"},
{"lineNum":"  273","line":"                            .max = .{ .major = 13, .minor = 1, .patch = 0 },"},
{"lineNum":"  274","line":"                        },"},
{"lineNum":"  275","line":"                    },"},
{"lineNum":"  276","line":"                    .macos => return switch (arch) {"},
{"lineNum":"  277","line":"                        .aarch64 => VersionRange{"},
{"lineNum":"  278","line":"                            .semver = .{"},
{"lineNum":"  279","line":"                                .min = .{ .major = 11, .minor = 7, .patch = 1 },"},
{"lineNum":"  280","line":"                                .max = .{ .major = 13, .minor = 3, .patch = 0 },"},
{"lineNum":"  281","line":"                            },"},
{"lineNum":"  282","line":"                        },"},
{"lineNum":"  283","line":"                        .x86_64 => VersionRange{"},
{"lineNum":"  284","line":"                            .semver = .{"},
{"lineNum":"  285","line":"                                .min = .{ .major = 11, .minor = 7, .patch = 1 },"},
{"lineNum":"  286","line":"                                .max = .{ .major = 13, .minor = 3, .patch = 0 },"},
{"lineNum":"  287","line":"                            },"},
{"lineNum":"  288","line":"                        },"},
{"lineNum":"  289","line":"                        else => unreachable,"},
{"lineNum":"  290","line":"                    },"},
{"lineNum":"  291","line":"                    .ios => return .{"},
{"lineNum":"  292","line":"                        .semver = .{"},
{"lineNum":"  293","line":"                            .min = .{ .major = 12, .minor = 0, .patch = 0 },"},
{"lineNum":"  294","line":"                            .max = .{ .major = 13, .minor = 4, .patch = 0 },"},
{"lineNum":"  295","line":"                        },"},
{"lineNum":"  296","line":"                    },"},
{"lineNum":"  297","line":"                    .watchos => return .{"},
{"lineNum":"  298","line":"                        .semver = .{"},
{"lineNum":"  299","line":"                            .min = .{ .major = 6, .minor = 0, .patch = 0 },"},
{"lineNum":"  300","line":"                            .max = .{ .major = 6, .minor = 2, .patch = 0 },"},
{"lineNum":"  301","line":"                        },"},
{"lineNum":"  302","line":"                    },"},
{"lineNum":"  303","line":"                    .tvos => return .{"},
{"lineNum":"  304","line":"                        .semver = .{"},
{"lineNum":"  305","line":"                            .min = .{ .major = 13, .minor = 0, .patch = 0 },"},
{"lineNum":"  306","line":"                            .max = .{ .major = 13, .minor = 4, .patch = 0 },"},
{"lineNum":"  307","line":"                        },"},
{"lineNum":"  308","line":"                    },"},
{"lineNum":"  309","line":"                    .netbsd => return .{"},
{"lineNum":"  310","line":"                        .semver = .{"},
{"lineNum":"  311","line":"                            .min = .{ .major = 8, .minor = 0, .patch = 0 },"},
{"lineNum":"  312","line":"                            .max = .{ .major = 10, .minor = 0, .patch = 0 },"},
{"lineNum":"  313","line":"                        },"},
{"lineNum":"  314","line":"                    },"},
{"lineNum":"  315","line":"                    .openbsd => return .{"},
{"lineNum":"  316","line":"                        .semver = .{"},
{"lineNum":"  317","line":"                            .min = .{ .major = 6, .minor = 8, .patch = 0 },"},
{"lineNum":"  318","line":"                            .max = .{ .major = 7, .minor = 2, .patch = 0 },"},
{"lineNum":"  319","line":"                        },"},
{"lineNum":"  320","line":"                    },"},
{"lineNum":"  321","line":"                    .dragonfly => return .{"},
{"lineNum":"  322","line":"                        .semver = .{"},
{"lineNum":"  323","line":"                            .min = .{ .major = 5, .minor = 8, .patch = 0 },"},
{"lineNum":"  324","line":"                            .max = .{ .major = 6, .minor = 4, .patch = 0 },"},
{"lineNum":"  325","line":"                        },"},
{"lineNum":"  326","line":"                    },"},
{"lineNum":"  327","line":"                    .solaris => return .{"},
{"lineNum":"  328","line":"                        .semver = .{"},
{"lineNum":"  329","line":"                            .min = .{ .major = 5, .minor = 11, .patch = 0 },"},
{"lineNum":"  330","line":"                            .max = .{ .major = 5, .minor = 11, .patch = 0 },"},
{"lineNum":"  331","line":"                        },"},
{"lineNum":"  332","line":"                    },"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"                    .linux => return .{"},
{"lineNum":"  335","line":"                        .linux = .{"},
{"lineNum":"  336","line":"                            .range = .{"},
{"lineNum":"  337","line":"                                .min = .{ .major = 3, .minor = 16, .patch = 0 },"},
{"lineNum":"  338","line":"                                .max = .{ .major = 5, .minor = 10, .patch = 81 },"},
{"lineNum":"  339","line":"                            },"},
{"lineNum":"  340","line":"                            .glibc = .{ .major = 2, .minor = 19, .patch = 0 },"},
{"lineNum":"  341","line":"                        },"},
{"lineNum":"  342","line":"                    },"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"                    .windows => return .{"},
{"lineNum":"  345","line":"                        .windows = .{"},
{"lineNum":"  346","line":"                            .min = .win8_1,"},
{"lineNum":"  347","line":"                            .max = WindowsVersion.latest,"},
{"lineNum":"  348","line":"                        },"},
{"lineNum":"  349","line":"                    },"},
{"lineNum":"  350","line":"                }"},
{"lineNum":"  351","line":"            }"},
{"lineNum":"  352","line":"        };"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"        pub const TaggedVersionRange = union(enum) {"},
{"lineNum":"  355","line":"            none: void,"},
{"lineNum":"  356","line":"            semver: Version.Range,"},
{"lineNum":"  357","line":"            linux: LinuxVersionRange,"},
{"lineNum":"  358","line":"            windows: WindowsVersion.Range,"},
{"lineNum":"  359","line":"        };"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"        /// Provides a tagged union. `Target` does not store the tag because it is"},
{"lineNum":"  362","line":"        /// redundant with the OS tag; this function abstracts that part away."},
{"lineNum":"  363","line":"        pub inline fn getVersionRange(self: Os) TaggedVersionRange {"},
{"lineNum":"  364","line":"            switch (self.tag) {"},
{"lineNum":"  365","line":"                .linux => return TaggedVersionRange{ .linux = self.version_range.linux },"},
{"lineNum":"  366","line":"                .windows => return TaggedVersionRange{ .windows = self.version_range.windows },"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"                .freebsd,"},
{"lineNum":"  369","line":"                .macos,"},
{"lineNum":"  370","line":"                .ios,"},
{"lineNum":"  371","line":"                .tvos,"},
{"lineNum":"  372","line":"                .watchos,"},
{"lineNum":"  373","line":"                .netbsd,"},
{"lineNum":"  374","line":"                .openbsd,"},
{"lineNum":"  375","line":"                .dragonfly,"},
{"lineNum":"  376","line":"                .solaris,"},
{"lineNum":"  377","line":"                => return TaggedVersionRange{ .semver = self.version_range.semver },"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"                else => return .none,"},
{"lineNum":"  380","line":"            }"},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"        /// Checks if system is guaranteed to be at least `version` or older than `version`."},
{"lineNum":"  384","line":"        /// Returns `null` if a runtime check is required."},
{"lineNum":"  385","line":"        pub inline fn isAtLeast(self: Os, comptime tag: Tag, version: anytype) ?bool {"},
{"lineNum":"  386","line":"            if (self.tag != tag) return false;"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"            return switch (tag) {"},
{"lineNum":"  389","line":"                .linux => self.version_range.linux.isAtLeast(version),"},
{"lineNum":"  390","line":"                .windows => self.version_range.windows.isAtLeast(version),"},
{"lineNum":"  391","line":"                else => self.version_range.semver.isAtLeast(version),"},
{"lineNum":"  392","line":"            };"},
{"lineNum":"  393","line":"        }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        /// On Darwin, we always link libSystem which contains libc."},
{"lineNum":"  396","line":"        /// Similarly on FreeBSD and NetBSD we always link system libc"},
{"lineNum":"  397","line":"        /// since this is the stable syscall interface."},
{"lineNum":"  398","line":"        pub inline fn requiresLibC(os: Os) bool {"},
{"lineNum":"  399","line":"            return switch (os.tag) {"},
{"lineNum":"  400","line":"                .freebsd,"},
{"lineNum":"  401","line":"                .netbsd,"},
{"lineNum":"  402","line":"                .macos,"},
{"lineNum":"  403","line":"                .ios,"},
{"lineNum":"  404","line":"                .tvos,"},
{"lineNum":"  405","line":"                .watchos,"},
{"lineNum":"  406","line":"                .dragonfly,"},
{"lineNum":"  407","line":"                .openbsd,"},
{"lineNum":"  408","line":"                .haiku,"},
{"lineNum":"  409","line":"                .solaris,"},
{"lineNum":"  410","line":"                => true,"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"                .linux,"},
{"lineNum":"  413","line":"                .windows,"},
{"lineNum":"  414","line":"                .freestanding,"},
{"lineNum":"  415","line":"                .ananas,"},
{"lineNum":"  416","line":"                .cloudabi,"},
{"lineNum":"  417","line":"                .fuchsia,"},
{"lineNum":"  418","line":"                .kfreebsd,"},
{"lineNum":"  419","line":"                .lv2,"},
{"lineNum":"  420","line":"                .zos,"},
{"lineNum":"  421","line":"                .minix,"},
{"lineNum":"  422","line":"                .rtems,"},
{"lineNum":"  423","line":"                .nacl,"},
{"lineNum":"  424","line":"                .aix,"},
{"lineNum":"  425","line":"                .cuda,"},
{"lineNum":"  426","line":"                .nvcl,"},
{"lineNum":"  427","line":"                .amdhsa,"},
{"lineNum":"  428","line":"                .ps4,"},
{"lineNum":"  429","line":"                .ps5,"},
{"lineNum":"  430","line":"                .elfiamcu,"},
{"lineNum":"  431","line":"                .mesa3d,"},
{"lineNum":"  432","line":"                .contiki,"},
{"lineNum":"  433","line":"                .amdpal,"},
{"lineNum":"  434","line":"                .hermit,"},
{"lineNum":"  435","line":"                .hurd,"},
{"lineNum":"  436","line":"                .wasi,"},
{"lineNum":"  437","line":"                .emscripten,"},
{"lineNum":"  438","line":"                .driverkit,"},
{"lineNum":"  439","line":"                .shadermodel,"},
{"lineNum":"  440","line":"                .uefi,"},
{"lineNum":"  441","line":"                .opencl,"},
{"lineNum":"  442","line":"                .glsl450,"},
{"lineNum":"  443","line":"                .vulkan,"},
{"lineNum":"  444","line":"                .plan9,"},
{"lineNum":"  445","line":"                .other,"},
{"lineNum":"  446","line":"                => false,"},
{"lineNum":"  447","line":"            };"},
{"lineNum":"  448","line":"        }"},
{"lineNum":"  449","line":"    };"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    pub const aarch64 = @import(\"target/aarch64.zig\");"},
{"lineNum":"  452","line":"    pub const arc = @import(\"target/arc.zig\");"},
{"lineNum":"  453","line":"    pub const amdgpu = @import(\"target/amdgpu.zig\");"},
{"lineNum":"  454","line":"    pub const arm = @import(\"target/arm.zig\");"},
{"lineNum":"  455","line":"    pub const avr = @import(\"target/avr.zig\");"},
{"lineNum":"  456","line":"    pub const bpf = @import(\"target/bpf.zig\");"},
{"lineNum":"  457","line":"    pub const csky = @import(\"target/csky.zig\");"},
{"lineNum":"  458","line":"    pub const hexagon = @import(\"target/hexagon.zig\");"},
{"lineNum":"  459","line":"    pub const loongarch = @import(\"target/loongarch.zig\");"},
{"lineNum":"  460","line":"    pub const m68k = @import(\"target/m68k.zig\");"},
{"lineNum":"  461","line":"    pub const mips = @import(\"target/mips.zig\");"},
{"lineNum":"  462","line":"    pub const msp430 = @import(\"target/msp430.zig\");"},
{"lineNum":"  463","line":"    pub const nvptx = @import(\"target/nvptx.zig\");"},
{"lineNum":"  464","line":"    pub const powerpc = @import(\"target/powerpc.zig\");"},
{"lineNum":"  465","line":"    pub const riscv = @import(\"target/riscv.zig\");"},
{"lineNum":"  466","line":"    pub const sparc = @import(\"target/sparc.zig\");"},
{"lineNum":"  467","line":"    pub const spirv = @import(\"target/spirv.zig\");"},
{"lineNum":"  468","line":"    pub const s390x = @import(\"target/s390x.zig\");"},
{"lineNum":"  469","line":"    pub const ve = @import(\"target/ve.zig\");"},
{"lineNum":"  470","line":"    pub const wasm = @import(\"target/wasm.zig\");"},
{"lineNum":"  471","line":"    pub const x86 = @import(\"target/x86.zig\");"},
{"lineNum":"  472","line":"    pub const xtensa = @import(\"target/xtensa.zig\");"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    pub const Abi = enum {"},
{"lineNum":"  475","line":"        none,"},
{"lineNum":"  476","line":"        gnu,"},
{"lineNum":"  477","line":"        gnuabin32,"},
{"lineNum":"  478","line":"        gnuabi64,"},
{"lineNum":"  479","line":"        gnueabi,"},
{"lineNum":"  480","line":"        gnueabihf,"},
{"lineNum":"  481","line":"        gnuf32,"},
{"lineNum":"  482","line":"        gnuf64,"},
{"lineNum":"  483","line":"        gnusf,"},
{"lineNum":"  484","line":"        gnux32,"},
{"lineNum":"  485","line":"        gnuilp32,"},
{"lineNum":"  486","line":"        code16,"},
{"lineNum":"  487","line":"        eabi,"},
{"lineNum":"  488","line":"        eabihf,"},
{"lineNum":"  489","line":"        android,"},
{"lineNum":"  490","line":"        musl,"},
{"lineNum":"  491","line":"        musleabi,"},
{"lineNum":"  492","line":"        musleabihf,"},
{"lineNum":"  493","line":"        muslx32,"},
{"lineNum":"  494","line":"        msvc,"},
{"lineNum":"  495","line":"        itanium,"},
{"lineNum":"  496","line":"        cygnus,"},
{"lineNum":"  497","line":"        coreclr,"},
{"lineNum":"  498","line":"        simulator,"},
{"lineNum":"  499","line":"        macabi,"},
{"lineNum":"  500","line":"        pixel,"},
{"lineNum":"  501","line":"        vertex,"},
{"lineNum":"  502","line":"        geometry,"},
{"lineNum":"  503","line":"        hull,"},
{"lineNum":"  504","line":"        domain,"},
{"lineNum":"  505","line":"        compute,"},
{"lineNum":"  506","line":"        library,"},
{"lineNum":"  507","line":"        raygeneration,"},
{"lineNum":"  508","line":"        intersection,"},
{"lineNum":"  509","line":"        anyhit,"},
{"lineNum":"  510","line":"        closesthit,"},
{"lineNum":"  511","line":"        miss,"},
{"lineNum":"  512","line":"        callable,"},
{"lineNum":"  513","line":"        mesh,"},
{"lineNum":"  514","line":"        amplification,"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"        pub fn default(arch: Cpu.Arch, target_os: Os) Abi {"},
{"lineNum":"  517","line":"            if (arch.isWasm()) {"},
{"lineNum":"  518","line":"                return .musl;"},
{"lineNum":"  519","line":"            }"},
{"lineNum":"  520","line":"            switch (target_os.tag) {"},
{"lineNum":"  521","line":"                .freestanding,"},
{"lineNum":"  522","line":"                .ananas,"},
{"lineNum":"  523","line":"                .cloudabi,"},
{"lineNum":"  524","line":"                .dragonfly,"},
{"lineNum":"  525","line":"                .lv2,"},
{"lineNum":"  526","line":"                .solaris,"},
{"lineNum":"  527","line":"                .zos,"},
{"lineNum":"  528","line":"                .minix,"},
{"lineNum":"  529","line":"                .rtems,"},
{"lineNum":"  530","line":"                .nacl,"},
{"lineNum":"  531","line":"                .aix,"},
{"lineNum":"  532","line":"                .cuda,"},
{"lineNum":"  533","line":"                .nvcl,"},
{"lineNum":"  534","line":"                .amdhsa,"},
{"lineNum":"  535","line":"                .ps4,"},
{"lineNum":"  536","line":"                .ps5,"},
{"lineNum":"  537","line":"                .elfiamcu,"},
{"lineNum":"  538","line":"                .mesa3d,"},
{"lineNum":"  539","line":"                .contiki,"},
{"lineNum":"  540","line":"                .amdpal,"},
{"lineNum":"  541","line":"                .hermit,"},
{"lineNum":"  542","line":"                .other,"},
{"lineNum":"  543","line":"                => return .eabi,"},
{"lineNum":"  544","line":"                .openbsd,"},
{"lineNum":"  545","line":"                .freebsd,"},
{"lineNum":"  546","line":"                .fuchsia,"},
{"lineNum":"  547","line":"                .kfreebsd,"},
{"lineNum":"  548","line":"                .netbsd,"},
{"lineNum":"  549","line":"                .hurd,"},
{"lineNum":"  550","line":"                .haiku,"},
{"lineNum":"  551","line":"                .windows,"},
{"lineNum":"  552","line":"                => return .gnu,"},
{"lineNum":"  553","line":"                .uefi => return .msvc,"},
{"lineNum":"  554","line":"                .linux,"},
{"lineNum":"  555","line":"                .wasi,"},
{"lineNum":"  556","line":"                .emscripten,"},
{"lineNum":"  557","line":"                => return .musl,"},
{"lineNum":"  558","line":"                .opencl, // TODO: SPIR-V ABIs with Linkage capability"},
{"lineNum":"  559","line":"                .glsl450,"},
{"lineNum":"  560","line":"                .vulkan,"},
{"lineNum":"  561","line":"                .plan9, // TODO specify abi"},
{"lineNum":"  562","line":"                .macos,"},
{"lineNum":"  563","line":"                .ios,"},
{"lineNum":"  564","line":"                .tvos,"},
{"lineNum":"  565","line":"                .watchos,"},
{"lineNum":"  566","line":"                .driverkit,"},
{"lineNum":"  567","line":"                .shadermodel,"},
{"lineNum":"  568","line":"                => return .none,"},
{"lineNum":"  569","line":"            }"},
{"lineNum":"  570","line":"        }"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"        pub inline fn isGnu(abi: Abi) bool {"},
{"lineNum":"  573","line":"            return switch (abi) {"},
{"lineNum":"  574","line":"                .gnu, .gnuabin32, .gnuabi64, .gnueabi, .gnueabihf, .gnux32 => true,"},
{"lineNum":"  575","line":"                else => false,"},
{"lineNum":"  576","line":"            };"},
{"lineNum":"  577","line":"        }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"        pub inline fn isMusl(abi: Abi) bool {"},
{"lineNum":"  580","line":"            return switch (abi) {"},
{"lineNum":"  581","line":"                .musl, .musleabi, .musleabihf => true,"},
{"lineNum":"  582","line":"                else => false,"},
{"lineNum":"  583","line":"            };"},
{"lineNum":"  584","line":"        }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"        pub inline fn floatAbi(abi: Abi) FloatAbi {"},
{"lineNum":"  587","line":"            return switch (abi) {"},
{"lineNum":"  588","line":"                .gnueabihf,"},
{"lineNum":"  589","line":"                .eabihf,"},
{"lineNum":"  590","line":"                .musleabihf,"},
{"lineNum":"  591","line":"                => .hard,"},
{"lineNum":"  592","line":"                else => .soft,"},
{"lineNum":"  593","line":"            };"},
{"lineNum":"  594","line":"        }"},
{"lineNum":"  595","line":"    };"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    pub const ObjectFormat = enum {"},
{"lineNum":"  598","line":"        /// Common Object File Format (Windows)"},
{"lineNum":"  599","line":"        coff,"},
{"lineNum":"  600","line":"        /// DirectX Container"},
{"lineNum":"  601","line":"        dxcontainer,"},
{"lineNum":"  602","line":"        /// Executable and Linking Format"},
{"lineNum":"  603","line":"        elf,"},
{"lineNum":"  604","line":"        /// macOS relocatables"},
{"lineNum":"  605","line":"        macho,"},
{"lineNum":"  606","line":"        /// Standard, Portable Intermediate Representation V"},
{"lineNum":"  607","line":"        spirv,"},
{"lineNum":"  608","line":"        /// WebAssembly"},
{"lineNum":"  609","line":"        wasm,"},
{"lineNum":"  610","line":"        /// C source code"},
{"lineNum":"  611","line":"        c,"},
{"lineNum":"  612","line":"        /// Intel IHEX"},
{"lineNum":"  613","line":"        hex,"},
{"lineNum":"  614","line":"        /// Machine code with no metadata."},
{"lineNum":"  615","line":"        raw,"},
{"lineNum":"  616","line":"        /// Plan 9 from Bell Labs"},
{"lineNum":"  617","line":"        plan9,"},
{"lineNum":"  618","line":"        /// Nvidia PTX format"},
{"lineNum":"  619","line":"        nvptx,"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        pub fn fileExt(of: ObjectFormat, cpu_arch: Cpu.Arch) [:0]const u8 {"},
{"lineNum":"  622","line":"            return switch (of) {"},
{"lineNum":"  623","line":"                .coff => \".obj\","},
{"lineNum":"  624","line":"                .elf, .macho, .wasm => \".o\","},
{"lineNum":"  625","line":"                .c => \".c\","},
{"lineNum":"  626","line":"                .spirv => \".spv\","},
{"lineNum":"  627","line":"                .hex => \".ihex\","},
{"lineNum":"  628","line":"                .raw => \".bin\","},
{"lineNum":"  629","line":"                .plan9 => plan9Ext(cpu_arch),"},
{"lineNum":"  630","line":"                .nvptx => \".ptx\","},
{"lineNum":"  631","line":"                .dxcontainer => \".dxil\","},
{"lineNum":"  632","line":"            };"},
{"lineNum":"  633","line":"        }"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"        pub fn default(os_tag: Os.Tag, cpu_arch: Cpu.Arch) ObjectFormat {"},
{"lineNum":"  636","line":"            return switch (os_tag) {"},
{"lineNum":"  637","line":"                .windows, .uefi => .coff,"},
{"lineNum":"  638","line":"                .ios, .macos, .watchos, .tvos => .macho,"},
{"lineNum":"  639","line":"                .plan9 => .plan9,"},
{"lineNum":"  640","line":"                else => return switch (cpu_arch) {"},
{"lineNum":"  641","line":"                    .wasm32, .wasm64 => .wasm,"},
{"lineNum":"  642","line":"                    .spirv32, .spirv64 => .spirv,"},
{"lineNum":"  643","line":"                    .nvptx, .nvptx64 => .nvptx,"},
{"lineNum":"  644","line":"                    else => .elf,"},
{"lineNum":"  645","line":"                },"},
{"lineNum":"  646","line":"            };"},
{"lineNum":"  647","line":"        }"},
{"lineNum":"  648","line":"    };"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    pub const SubSystem = enum {"},
{"lineNum":"  651","line":"        Console,"},
{"lineNum":"  652","line":"        Windows,"},
{"lineNum":"  653","line":"        Posix,"},
{"lineNum":"  654","line":"        Native,"},
{"lineNum":"  655","line":"        EfiApplication,"},
{"lineNum":"  656","line":"        EfiBootServiceDriver,"},
{"lineNum":"  657","line":"        EfiRom,"},
{"lineNum":"  658","line":"        EfiRuntimeDriver,"},
{"lineNum":"  659","line":"    };"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"    pub const Cpu = struct {"},
{"lineNum":"  662","line":"        /// Architecture"},
{"lineNum":"  663","line":"        arch: Arch,"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"        /// The CPU model to target. It has a set of features"},
{"lineNum":"  666","line":"        /// which are overridden with the `features` field."},
{"lineNum":"  667","line":"        model: *const Model,"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"        /// An explicit list of the entire CPU feature set. It may differ from the specific CPU model\'s features."},
{"lineNum":"  670","line":"        features: Feature.Set,"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"        pub const Feature = struct {"},
{"lineNum":"  673","line":"            /// The bit index into `Set`. Has a default value of `undefined` because the canonical"},
{"lineNum":"  674","line":"            /// structures are populated via comptime logic."},
{"lineNum":"  675","line":"            index: Set.Index = undefined,"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"            /// Has a default value of `undefined` because the canonical"},
{"lineNum":"  678","line":"            /// structures are populated via comptime logic."},
{"lineNum":"  679","line":"            name: []const u8 = undefined,"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"            /// If this corresponds to an LLVM-recognized feature, this will be populated;"},
{"lineNum":"  682","line":"            /// otherwise null."},
{"lineNum":"  683","line":"            llvm_name: ?[:0]const u8,"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"            /// Human-friendly UTF-8 text."},
{"lineNum":"  686","line":"            description: []const u8,"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"            /// Sparse `Set` of features this depends on."},
{"lineNum":"  689","line":"            dependencies: Set,"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"            /// A bit set of all the features."},
{"lineNum":"  692","line":"            pub const Set = struct {"},
{"lineNum":"  693","line":"                ints: [usize_count]usize,"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"                pub const needed_bit_count = 288;"},
{"lineNum":"  696","line":"                pub const byte_count = (needed_bit_count + 7) / 8;"},
{"lineNum":"  697","line":"                pub const usize_count = (byte_count + (@sizeOf(usize) - 1)) / @sizeOf(usize);"},
{"lineNum":"  698","line":"                pub const Index = std.math.Log2Int(std.meta.Int(.unsigned, usize_count * @bitSizeOf(usize)));"},
{"lineNum":"  699","line":"                pub const ShiftInt = std.math.Log2Int(usize);"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"                pub const empty = Set{ .ints = [1]usize{0} ** usize_count };"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"                pub fn isEmpty(set: Set) bool {"},
{"lineNum":"  704","line":"                    return for (set.ints) |x| {"},
{"lineNum":"  705","line":"                        if (x != 0) break false;"},
{"lineNum":"  706","line":"                    } else true;"},
{"lineNum":"  707","line":"                }"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"                pub fn isEnabled(set: Set, arch_feature_index: Index) bool {"},
{"lineNum":"  710","line":"                    const usize_index = arch_feature_index / @bitSizeOf(usize);"},
{"lineNum":"  711","line":"                    const bit_index = @as(ShiftInt, @intCast(arch_feature_index % @bitSizeOf(usize)));"},
{"lineNum":"  712","line":"                    return (set.ints[usize_index] & (@as(usize, 1) << bit_index)) != 0;"},
{"lineNum":"  713","line":"                }"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"                /// Adds the specified feature but not its dependencies."},
{"lineNum":"  716","line":"                pub fn addFeature(set: *Set, arch_feature_index: Index) void {"},
{"lineNum":"  717","line":"                    const usize_index = arch_feature_index / @bitSizeOf(usize);"},
{"lineNum":"  718","line":"                    const bit_index = @as(ShiftInt, @intCast(arch_feature_index % @bitSizeOf(usize)));"},
{"lineNum":"  719","line":"                    set.ints[usize_index] |= @as(usize, 1) << bit_index;"},
{"lineNum":"  720","line":"                }"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"                /// Adds the specified feature set but not its dependencies."},
{"lineNum":"  723","line":"                pub fn addFeatureSet(set: *Set, other_set: Set) void {"},
{"lineNum":"  724","line":"                    set.ints = @as(@Vector(usize_count, usize), set.ints) | @as(@Vector(usize_count, usize), other_set.ints);"},
{"lineNum":"  725","line":"                }"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"                /// Removes the specified feature but not its dependents."},
{"lineNum":"  728","line":"                pub fn removeFeature(set: *Set, arch_feature_index: Index) void {"},
{"lineNum":"  729","line":"                    const usize_index = arch_feature_index / @bitSizeOf(usize);"},
{"lineNum":"  730","line":"                    const bit_index = @as(ShiftInt, @intCast(arch_feature_index % @bitSizeOf(usize)));"},
{"lineNum":"  731","line":"                    set.ints[usize_index] &= ~(@as(usize, 1) << bit_index);"},
{"lineNum":"  732","line":"                }"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"                /// Removes the specified feature but not its dependents."},
{"lineNum":"  735","line":"                pub fn removeFeatureSet(set: *Set, other_set: Set) void {"},
{"lineNum":"  736","line":"                    set.ints = @as(@Vector(usize_count, usize), set.ints) & ~@as(@Vector(usize_count, usize), other_set.ints);"},
{"lineNum":"  737","line":"                }"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"                pub fn populateDependencies(set: *Set, all_features_list: []const Cpu.Feature) void {"},
{"lineNum":"  740","line":"                    @setEvalBranchQuota(1000000);"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"                    var old = set.ints;"},
{"lineNum":"  743","line":"                    while (true) {"},
{"lineNum":"  744","line":"                        for (all_features_list, 0..) |feature, index_usize| {"},
{"lineNum":"  745","line":"                            const index = @as(Index, @intCast(index_usize));"},
{"lineNum":"  746","line":"                            if (set.isEnabled(index)) {"},
{"lineNum":"  747","line":"                                set.addFeatureSet(feature.dependencies);"},
{"lineNum":"  748","line":"                            }"},
{"lineNum":"  749","line":"                        }"},
{"lineNum":"  750","line":"                        const nothing_changed = mem.eql(usize, &old, &set.ints);"},
{"lineNum":"  751","line":"                        if (nothing_changed) return;"},
{"lineNum":"  752","line":"                        old = set.ints;"},
{"lineNum":"  753","line":"                    }"},
{"lineNum":"  754","line":"                }"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"                pub fn asBytes(set: *const Set) *const [byte_count]u8 {"},
{"lineNum":"  757","line":"                    return @as(*const [byte_count]u8, @ptrCast(&set.ints));"},
{"lineNum":"  758","line":"                }"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"                pub fn eql(set: Set, other_set: Set) bool {"},
{"lineNum":"  761","line":"                    return mem.eql(usize, &set.ints, &other_set.ints);"},
{"lineNum":"  762","line":"                }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"                pub fn isSuperSetOf(set: Set, other_set: Set) bool {"},
{"lineNum":"  765","line":"                    const V = @Vector(usize_count, usize);"},
{"lineNum":"  766","line":"                    const set_v: V = set.ints;"},
{"lineNum":"  767","line":"                    const other_v: V = other_set.ints;"},
{"lineNum":"  768","line":"                    return @reduce(.And, (set_v & other_v) == other_v);"},
{"lineNum":"  769","line":"                }"},
{"lineNum":"  770","line":"            };"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"            pub fn feature_set_fns(comptime F: type) type {"},
{"lineNum":"  773","line":"                return struct {"},
{"lineNum":"  774","line":"                    /// Populates only the feature bits specified."},
{"lineNum":"  775","line":"                    pub fn featureSet(features: []const F) Set {"},
{"lineNum":"  776","line":"                        var x = Set.empty;"},
{"lineNum":"  777","line":"                        for (features) |feature| {"},
{"lineNum":"  778","line":"                            x.addFeature(@intFromEnum(feature));"},
{"lineNum":"  779","line":"                        }"},
{"lineNum":"  780","line":"                        return x;"},
{"lineNum":"  781","line":"                    }"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"                    /// Returns true if the specified feature is enabled."},
{"lineNum":"  784","line":"                    pub fn featureSetHas(set: Set, feature: F) bool {"},
{"lineNum":"  785","line":"                        return set.isEnabled(@intFromEnum(feature));"},
{"lineNum":"  786","line":"                    }"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"                    /// Returns true if any specified feature is enabled."},
{"lineNum":"  789","line":"                    pub fn featureSetHasAny(set: Set, features: anytype) bool {"},
{"lineNum":"  790","line":"                        comptime std.debug.assert(std.meta.trait.isIndexable(@TypeOf(features)));"},
{"lineNum":"  791","line":"                        inline for (features) |feature| {"},
{"lineNum":"  792","line":"                            if (set.isEnabled(@intFromEnum(@as(F, feature)))) return true;"},
{"lineNum":"  793","line":"                        }"},
{"lineNum":"  794","line":"                        return false;"},
{"lineNum":"  795","line":"                    }"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"                    /// Returns true if every specified feature is enabled."},
{"lineNum":"  798","line":"                    pub fn featureSetHasAll(set: Set, features: anytype) bool {"},
{"lineNum":"  799","line":"                        comptime std.debug.assert(std.meta.trait.isIndexable(@TypeOf(features)));"},
{"lineNum":"  800","line":"                        inline for (features) |feature| {"},
{"lineNum":"  801","line":"                            if (!set.isEnabled(@intFromEnum(@as(F, feature)))) return false;"},
{"lineNum":"  802","line":"                        }"},
{"lineNum":"  803","line":"                        return true;"},
{"lineNum":"  804","line":"                    }"},
{"lineNum":"  805","line":"                };"},
{"lineNum":"  806","line":"            }"},
{"lineNum":"  807","line":"        };"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"        pub const Arch = enum {"},
{"lineNum":"  810","line":"            arm,"},
{"lineNum":"  811","line":"            armeb,"},
{"lineNum":"  812","line":"            aarch64,"},
{"lineNum":"  813","line":"            aarch64_be,"},
{"lineNum":"  814","line":"            aarch64_32,"},
{"lineNum":"  815","line":"            arc,"},
{"lineNum":"  816","line":"            avr,"},
{"lineNum":"  817","line":"            bpfel,"},
{"lineNum":"  818","line":"            bpfeb,"},
{"lineNum":"  819","line":"            csky,"},
{"lineNum":"  820","line":"            dxil,"},
{"lineNum":"  821","line":"            hexagon,"},
{"lineNum":"  822","line":"            loongarch32,"},
{"lineNum":"  823","line":"            loongarch64,"},
{"lineNum":"  824","line":"            m68k,"},
{"lineNum":"  825","line":"            mips,"},
{"lineNum":"  826","line":"            mipsel,"},
{"lineNum":"  827","line":"            mips64,"},
{"lineNum":"  828","line":"            mips64el,"},
{"lineNum":"  829","line":"            msp430,"},
{"lineNum":"  830","line":"            powerpc,"},
{"lineNum":"  831","line":"            powerpcle,"},
{"lineNum":"  832","line":"            powerpc64,"},
{"lineNum":"  833","line":"            powerpc64le,"},
{"lineNum":"  834","line":"            r600,"},
{"lineNum":"  835","line":"            amdgcn,"},
{"lineNum":"  836","line":"            riscv32,"},
{"lineNum":"  837","line":"            riscv64,"},
{"lineNum":"  838","line":"            sparc,"},
{"lineNum":"  839","line":"            sparc64,"},
{"lineNum":"  840","line":"            sparcel,"},
{"lineNum":"  841","line":"            s390x,"},
{"lineNum":"  842","line":"            tce,"},
{"lineNum":"  843","line":"            tcele,"},
{"lineNum":"  844","line":"            thumb,"},
{"lineNum":"  845","line":"            thumbeb,"},
{"lineNum":"  846","line":"            x86,"},
{"lineNum":"  847","line":"            x86_64,"},
{"lineNum":"  848","line":"            xcore,"},
{"lineNum":"  849","line":"            xtensa,"},
{"lineNum":"  850","line":"            nvptx,"},
{"lineNum":"  851","line":"            nvptx64,"},
{"lineNum":"  852","line":"            le32,"},
{"lineNum":"  853","line":"            le64,"},
{"lineNum":"  854","line":"            amdil,"},
{"lineNum":"  855","line":"            amdil64,"},
{"lineNum":"  856","line":"            hsail,"},
{"lineNum":"  857","line":"            hsail64,"},
{"lineNum":"  858","line":"            spir,"},
{"lineNum":"  859","line":"            spir64,"},
{"lineNum":"  860","line":"            spirv32,"},
{"lineNum":"  861","line":"            spirv64,"},
{"lineNum":"  862","line":"            kalimba,"},
{"lineNum":"  863","line":"            shave,"},
{"lineNum":"  864","line":"            lanai,"},
{"lineNum":"  865","line":"            wasm32,"},
{"lineNum":"  866","line":"            wasm64,"},
{"lineNum":"  867","line":"            renderscript32,"},
{"lineNum":"  868","line":"            renderscript64,"},
{"lineNum":"  869","line":"            ve,"},
{"lineNum":"  870","line":"            // Stage1 currently assumes that architectures above this comment"},
{"lineNum":"  871","line":"            // map one-to-one with the ZigLLVM_ArchType enum."},
{"lineNum":"  872","line":"            spu_2,"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"            pub inline fn isX86(arch: Arch) bool {"},
{"lineNum":"  875","line":"                return switch (arch) {"},
{"lineNum":"  876","line":"                    .x86, .x86_64 => true,"},
{"lineNum":"  877","line":"                    else => false,"},
{"lineNum":"  878","line":"                };"},
{"lineNum":"  879","line":"            }"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"            pub inline fn isARM(arch: Arch) bool {"},
{"lineNum":"  882","line":"                return switch (arch) {"},
{"lineNum":"  883","line":"                    .arm, .armeb => true,"},
{"lineNum":"  884","line":"                    else => false,"},
{"lineNum":"  885","line":"                };"},
{"lineNum":"  886","line":"            }"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"            pub inline fn isAARCH64(arch: Arch) bool {"},
{"lineNum":"  889","line":"                return switch (arch) {"},
{"lineNum":"  890","line":"                    .aarch64, .aarch64_be, .aarch64_32 => true,"},
{"lineNum":"  891","line":"                    else => false,"},
{"lineNum":"  892","line":"                };"},
{"lineNum":"  893","line":"            }"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"            pub inline fn isThumb(arch: Arch) bool {"},
{"lineNum":"  896","line":"                return switch (arch) {"},
{"lineNum":"  897","line":"                    .thumb, .thumbeb => true,"},
{"lineNum":"  898","line":"                    else => false,"},
{"lineNum":"  899","line":"                };"},
{"lineNum":"  900","line":"            }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"            pub inline fn isArmOrThumb(arch: Arch) bool {"},
{"lineNum":"  903","line":"                return arch.isARM() or arch.isThumb();"},
{"lineNum":"  904","line":"            }"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"            pub inline fn isWasm(arch: Arch) bool {"},
{"lineNum":"  907","line":"                return switch (arch) {"},
{"lineNum":"  908","line":"                    .wasm32, .wasm64 => true,"},
{"lineNum":"  909","line":"                    else => false,"},
{"lineNum":"  910","line":"                };"},
{"lineNum":"  911","line":"            }"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"            pub inline fn isRISCV(arch: Arch) bool {"},
{"lineNum":"  914","line":"                return switch (arch) {"},
{"lineNum":"  915","line":"                    .riscv32, .riscv64 => true,"},
{"lineNum":"  916","line":"                    else => false,"},
{"lineNum":"  917","line":"                };"},
{"lineNum":"  918","line":"            }"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"            pub inline fn isMIPS(arch: Arch) bool {"},
{"lineNum":"  921","line":"                return switch (arch) {"},
{"lineNum":"  922","line":"                    .mips, .mipsel, .mips64, .mips64el => true,"},
{"lineNum":"  923","line":"                    else => false,"},
{"lineNum":"  924","line":"                };"},
{"lineNum":"  925","line":"            }"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"            pub inline fn isPPC(arch: Arch) bool {"},
{"lineNum":"  928","line":"                return switch (arch) {"},
{"lineNum":"  929","line":"                    .powerpc, .powerpcle => true,"},
{"lineNum":"  930","line":"                    else => false,"},
{"lineNum":"  931","line":"                };"},
{"lineNum":"  932","line":"            }"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"            pub inline fn isPPC64(arch: Arch) bool {"},
{"lineNum":"  935","line":"                return switch (arch) {"},
{"lineNum":"  936","line":"                    .powerpc64, .powerpc64le => true,"},
{"lineNum":"  937","line":"                    else => false,"},
{"lineNum":"  938","line":"                };"},
{"lineNum":"  939","line":"            }"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"            pub inline fn isSPARC(arch: Arch) bool {"},
{"lineNum":"  942","line":"                return switch (arch) {"},
{"lineNum":"  943","line":"                    .sparc, .sparcel, .sparc64 => true,"},
{"lineNum":"  944","line":"                    else => false,"},
{"lineNum":"  945","line":"                };"},
{"lineNum":"  946","line":"            }"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"            pub inline fn isSpirV(arch: Arch) bool {"},
{"lineNum":"  949","line":"                return switch (arch) {"},
{"lineNum":"  950","line":"                    .spirv32, .spirv64 => true,"},
{"lineNum":"  951","line":"                    else => false,"},
{"lineNum":"  952","line":"                };"},
{"lineNum":"  953","line":"            }"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"            pub inline fn isBpf(arch: Arch) bool {"},
{"lineNum":"  956","line":"                return switch (arch) {"},
{"lineNum":"  957","line":"                    .bpfel, .bpfeb => true,"},
{"lineNum":"  958","line":"                    else => false,"},
{"lineNum":"  959","line":"                };"},
{"lineNum":"  960","line":"            }"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"            pub inline fn isNvptx(arch: Arch) bool {"},
{"lineNum":"  963","line":"                return switch (arch) {"},
{"lineNum":"  964","line":"                    .nvptx, .nvptx64 => true,"},
{"lineNum":"  965","line":"                    else => false,"},
{"lineNum":"  966","line":"                };"},
{"lineNum":"  967","line":"            }"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"            pub fn parseCpuModel(arch: Arch, cpu_name: []const u8) !*const Cpu.Model {"},
{"lineNum":"  970","line":"                for (arch.allCpuModels()) |cpu| {"},
{"lineNum":"  971","line":"                    if (mem.eql(u8, cpu_name, cpu.name)) {"},
{"lineNum":"  972","line":"                        return cpu;"},
{"lineNum":"  973","line":"                    }"},
{"lineNum":"  974","line":"                }"},
{"lineNum":"  975","line":"                return error.UnknownCpuModel;"},
{"lineNum":"  976","line":"            }"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"            pub inline fn toElfMachine(arch: Arch) std.elf.EM {"},
{"lineNum":"  979","line":"                return switch (arch) {"},
{"lineNum":"  980","line":"                    .avr => .AVR,"},
{"lineNum":"  981","line":"                    .msp430 => .MSP430,"},
{"lineNum":"  982","line":"                    .arc => .ARC,"},
{"lineNum":"  983","line":"                    .arm => .ARM,"},
{"lineNum":"  984","line":"                    .armeb => .ARM,"},
{"lineNum":"  985","line":"                    .hexagon => .HEXAGON,"},
{"lineNum":"  986","line":"                    .dxil => .NONE,"},
{"lineNum":"  987","line":"                    .m68k => .@\"68K\","},
{"lineNum":"  988","line":"                    .le32 => .NONE,"},
{"lineNum":"  989","line":"                    .mips => .MIPS,"},
{"lineNum":"  990","line":"                    .mipsel => .MIPS_RS3_LE,"},
{"lineNum":"  991","line":"                    .powerpc, .powerpcle => .PPC,"},
{"lineNum":"  992","line":"                    .r600 => .NONE,"},
{"lineNum":"  993","line":"                    .riscv32 => .RISCV,"},
{"lineNum":"  994","line":"                    .sparc => .SPARC,"},
{"lineNum":"  995","line":"                    .sparcel => .SPARC,"},
{"lineNum":"  996","line":"                    .tce => .NONE,"},
{"lineNum":"  997","line":"                    .tcele => .NONE,"},
{"lineNum":"  998","line":"                    .thumb => .ARM,"},
{"lineNum":"  999","line":"                    .thumbeb => .ARM,"},
{"lineNum":" 1000","line":"                    .x86 => .@\"386\","},
{"lineNum":" 1001","line":"                    .xcore => .XCORE,"},
{"lineNum":" 1002","line":"                    .xtensa => .XTENSA,"},
{"lineNum":" 1003","line":"                    .nvptx => .NONE,"},
{"lineNum":" 1004","line":"                    .amdil => .NONE,"},
{"lineNum":" 1005","line":"                    .hsail => .NONE,"},
{"lineNum":" 1006","line":"                    .spir => .NONE,"},
{"lineNum":" 1007","line":"                    .kalimba => .CSR_KALIMBA,"},
{"lineNum":" 1008","line":"                    .shave => .NONE,"},
{"lineNum":" 1009","line":"                    .lanai => .LANAI,"},
{"lineNum":" 1010","line":"                    .wasm32 => .NONE,"},
{"lineNum":" 1011","line":"                    .renderscript32 => .NONE,"},
{"lineNum":" 1012","line":"                    .aarch64_32 => .AARCH64,"},
{"lineNum":" 1013","line":"                    .aarch64 => .AARCH64,"},
{"lineNum":" 1014","line":"                    .aarch64_be => .AARCH64,"},
{"lineNum":" 1015","line":"                    .mips64 => .MIPS,"},
{"lineNum":" 1016","line":"                    .mips64el => .MIPS_RS3_LE,"},
{"lineNum":" 1017","line":"                    .powerpc64 => .PPC64,"},
{"lineNum":" 1018","line":"                    .powerpc64le => .PPC64,"},
{"lineNum":" 1019","line":"                    .riscv64 => .RISCV,"},
{"lineNum":" 1020","line":"                    .x86_64 => .X86_64,"},
{"lineNum":" 1021","line":"                    .nvptx64 => .NONE,"},
{"lineNum":" 1022","line":"                    .le64 => .NONE,"},
{"lineNum":" 1023","line":"                    .amdil64 => .NONE,"},
{"lineNum":" 1024","line":"                    .hsail64 => .NONE,"},
{"lineNum":" 1025","line":"                    .spir64 => .NONE,"},
{"lineNum":" 1026","line":"                    .wasm64 => .NONE,"},
{"lineNum":" 1027","line":"                    .renderscript64 => .NONE,"},
{"lineNum":" 1028","line":"                    .amdgcn => .AMDGPU,"},
{"lineNum":" 1029","line":"                    .bpfel => .BPF,"},
{"lineNum":" 1030","line":"                    .bpfeb => .BPF,"},
{"lineNum":" 1031","line":"                    .csky => .CSKY,"},
{"lineNum":" 1032","line":"                    .sparc64 => .SPARCV9,"},
{"lineNum":" 1033","line":"                    .s390x => .S390,"},
{"lineNum":" 1034","line":"                    .ve => .NONE,"},
{"lineNum":" 1035","line":"                    .spu_2 => .SPU_2,"},
{"lineNum":" 1036","line":"                    .spirv32 => .NONE,"},
{"lineNum":" 1037","line":"                    .spirv64 => .NONE,"},
{"lineNum":" 1038","line":"                    .loongarch32 => .NONE,"},
{"lineNum":" 1039","line":"                    .loongarch64 => .NONE,"},
{"lineNum":" 1040","line":"                };"},
{"lineNum":" 1041","line":"            }"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"            pub inline fn toCoffMachine(arch: Arch) std.coff.MachineType {"},
{"lineNum":" 1044","line":"                return switch (arch) {"},
{"lineNum":" 1045","line":"                    .avr => .Unknown,"},
{"lineNum":" 1046","line":"                    .msp430 => .Unknown,"},
{"lineNum":" 1047","line":"                    .arc => .Unknown,"},
{"lineNum":" 1048","line":"                    .arm => .ARM,"},
{"lineNum":" 1049","line":"                    .armeb => .Unknown,"},
{"lineNum":" 1050","line":"                    .dxil => .Unknown,"},
{"lineNum":" 1051","line":"                    .hexagon => .Unknown,"},
{"lineNum":" 1052","line":"                    .m68k => .Unknown,"},
{"lineNum":" 1053","line":"                    .le32 => .Unknown,"},
{"lineNum":" 1054","line":"                    .mips => .Unknown,"},
{"lineNum":" 1055","line":"                    .mipsel => .Unknown,"},
{"lineNum":" 1056","line":"                    .powerpc, .powerpcle => .POWERPC,"},
{"lineNum":" 1057","line":"                    .r600 => .Unknown,"},
{"lineNum":" 1058","line":"                    .riscv32 => .RISCV32,"},
{"lineNum":" 1059","line":"                    .sparc => .Unknown,"},
{"lineNum":" 1060","line":"                    .sparcel => .Unknown,"},
{"lineNum":" 1061","line":"                    .tce => .Unknown,"},
{"lineNum":" 1062","line":"                    .tcele => .Unknown,"},
{"lineNum":" 1063","line":"                    .thumb => .Thumb,"},
{"lineNum":" 1064","line":"                    .thumbeb => .Thumb,"},
{"lineNum":" 1065","line":"                    .x86 => .I386,"},
{"lineNum":" 1066","line":"                    .xcore => .Unknown,"},
{"lineNum":" 1067","line":"                    .xtensa => .Unknown,"},
{"lineNum":" 1068","line":"                    .nvptx => .Unknown,"},
{"lineNum":" 1069","line":"                    .amdil => .Unknown,"},
{"lineNum":" 1070","line":"                    .hsail => .Unknown,"},
{"lineNum":" 1071","line":"                    .spir => .Unknown,"},
{"lineNum":" 1072","line":"                    .kalimba => .Unknown,"},
{"lineNum":" 1073","line":"                    .shave => .Unknown,"},
{"lineNum":" 1074","line":"                    .lanai => .Unknown,"},
{"lineNum":" 1075","line":"                    .wasm32 => .Unknown,"},
{"lineNum":" 1076","line":"                    .renderscript32 => .Unknown,"},
{"lineNum":" 1077","line":"                    .aarch64_32 => .ARM64,"},
{"lineNum":" 1078","line":"                    .aarch64 => .ARM64,"},
{"lineNum":" 1079","line":"                    .aarch64_be => .ARM64,"},
{"lineNum":" 1080","line":"                    .mips64 => .Unknown,"},
{"lineNum":" 1081","line":"                    .mips64el => .Unknown,"},
{"lineNum":" 1082","line":"                    .powerpc64 => .Unknown,"},
{"lineNum":" 1083","line":"                    .powerpc64le => .Unknown,"},
{"lineNum":" 1084","line":"                    .riscv64 => .RISCV64,"},
{"lineNum":" 1085","line":"                    .x86_64 => .X64,"},
{"lineNum":" 1086","line":"                    .nvptx64 => .Unknown,"},
{"lineNum":" 1087","line":"                    .le64 => .Unknown,"},
{"lineNum":" 1088","line":"                    .amdil64 => .Unknown,"},
{"lineNum":" 1089","line":"                    .hsail64 => .Unknown,"},
{"lineNum":" 1090","line":"                    .spir64 => .Unknown,"},
{"lineNum":" 1091","line":"                    .wasm64 => .Unknown,"},
{"lineNum":" 1092","line":"                    .renderscript64 => .Unknown,"},
{"lineNum":" 1093","line":"                    .amdgcn => .Unknown,"},
{"lineNum":" 1094","line":"                    .bpfel => .Unknown,"},
{"lineNum":" 1095","line":"                    .bpfeb => .Unknown,"},
{"lineNum":" 1096","line":"                    .csky => .Unknown,"},
{"lineNum":" 1097","line":"                    .sparc64 => .Unknown,"},
{"lineNum":" 1098","line":"                    .s390x => .Unknown,"},
{"lineNum":" 1099","line":"                    .ve => .Unknown,"},
{"lineNum":" 1100","line":"                    .spu_2 => .Unknown,"},
{"lineNum":" 1101","line":"                    .spirv32 => .Unknown,"},
{"lineNum":" 1102","line":"                    .spirv64 => .Unknown,"},
{"lineNum":" 1103","line":"                    .loongarch32 => .Unknown,"},
{"lineNum":" 1104","line":"                    .loongarch64 => .Unknown,"},
{"lineNum":" 1105","line":"                };"},
{"lineNum":" 1106","line":"            }"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"            pub inline fn endian(arch: Arch) std.builtin.Endian {"},
{"lineNum":" 1109","line":"                return switch (arch) {","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1110","line":"                    .avr,"},
{"lineNum":" 1111","line":"                    .arm,"},
{"lineNum":" 1112","line":"                    .aarch64_32,"},
{"lineNum":" 1113","line":"                    .aarch64,"},
{"lineNum":" 1114","line":"                    .amdgcn,"},
{"lineNum":" 1115","line":"                    .amdil,"},
{"lineNum":" 1116","line":"                    .amdil64,"},
{"lineNum":" 1117","line":"                    .bpfel,"},
{"lineNum":" 1118","line":"                    .csky,"},
{"lineNum":" 1119","line":"                    .xtensa,"},
{"lineNum":" 1120","line":"                    .hexagon,"},
{"lineNum":" 1121","line":"                    .hsail,"},
{"lineNum":" 1122","line":"                    .hsail64,"},
{"lineNum":" 1123","line":"                    .kalimba,"},
{"lineNum":" 1124","line":"                    .le32,"},
{"lineNum":" 1125","line":"                    .le64,"},
{"lineNum":" 1126","line":"                    .mipsel,"},
{"lineNum":" 1127","line":"                    .mips64el,"},
{"lineNum":" 1128","line":"                    .msp430,"},
{"lineNum":" 1129","line":"                    .nvptx,"},
{"lineNum":" 1130","line":"                    .nvptx64,"},
{"lineNum":" 1131","line":"                    .sparcel,"},
{"lineNum":" 1132","line":"                    .tcele,"},
{"lineNum":" 1133","line":"                    .powerpcle,"},
{"lineNum":" 1134","line":"                    .powerpc64le,"},
{"lineNum":" 1135","line":"                    .r600,"},
{"lineNum":" 1136","line":"                    .riscv32,"},
{"lineNum":" 1137","line":"                    .riscv64,"},
{"lineNum":" 1138","line":"                    .x86,"},
{"lineNum":" 1139","line":"                    .x86_64,"},
{"lineNum":" 1140","line":"                    .wasm32,"},
{"lineNum":" 1141","line":"                    .wasm64,"},
{"lineNum":" 1142","line":"                    .xcore,"},
{"lineNum":" 1143","line":"                    .thumb,"},
{"lineNum":" 1144","line":"                    .spir,"},
{"lineNum":" 1145","line":"                    .spir64,"},
{"lineNum":" 1146","line":"                    .renderscript32,"},
{"lineNum":" 1147","line":"                    .renderscript64,"},
{"lineNum":" 1148","line":"                    .shave,"},
{"lineNum":" 1149","line":"                    .ve,"},
{"lineNum":" 1150","line":"                    .spu_2,"},
{"lineNum":" 1151","line":"                    // GPU bitness is opaque. For now, assume little endian."},
{"lineNum":" 1152","line":"                    .spirv32,"},
{"lineNum":" 1153","line":"                    .spirv64,"},
{"lineNum":" 1154","line":"                    .dxil,"},
{"lineNum":" 1155","line":"                    .loongarch32,"},
{"lineNum":" 1156","line":"                    .loongarch64,"},
{"lineNum":" 1157","line":"                    .arc,"},
{"lineNum":" 1158","line":"                    => .Little,"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"                    .armeb,"},
{"lineNum":" 1161","line":"                    .aarch64_be,"},
{"lineNum":" 1162","line":"                    .bpfeb,"},
{"lineNum":" 1163","line":"                    .m68k,"},
{"lineNum":" 1164","line":"                    .mips,"},
{"lineNum":" 1165","line":"                    .mips64,"},
{"lineNum":" 1166","line":"                    .powerpc,"},
{"lineNum":" 1167","line":"                    .powerpc64,"},
{"lineNum":" 1168","line":"                    .thumbeb,"},
{"lineNum":" 1169","line":"                    .sparc,"},
{"lineNum":" 1170","line":"                    .sparc64,"},
{"lineNum":" 1171","line":"                    .tce,"},
{"lineNum":" 1172","line":"                    .lanai,"},
{"lineNum":" 1173","line":"                    .s390x,"},
{"lineNum":" 1174","line":"                    => .Big,"},
{"lineNum":" 1175","line":"                };"},
{"lineNum":" 1176","line":"            }"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"            /// Returns whether this architecture supports the address space"},
{"lineNum":" 1179","line":"            pub inline fn supportsAddressSpace(arch: Arch, address_space: std.builtin.AddressSpace) bool {"},
{"lineNum":" 1180","line":"                const is_nvptx = arch == .nvptx or arch == .nvptx64;"},
{"lineNum":" 1181","line":"                const is_spirv = arch == .spirv32 or arch == .spirv64;"},
{"lineNum":" 1182","line":"                const is_gpu = is_nvptx or is_spirv or arch == .amdgcn;"},
{"lineNum":" 1183","line":"                return switch (address_space) {"},
{"lineNum":" 1184","line":"                    .generic => true,"},
{"lineNum":" 1185","line":"                    .fs, .gs, .ss => arch == .x86_64 or arch == .x86,"},
{"lineNum":" 1186","line":"                    .global, .constant, .local, .shared => is_gpu,"},
{"lineNum":" 1187","line":"                    .param => is_nvptx,"},
{"lineNum":" 1188","line":"                    // TODO this should also check how many flash banks the cpu has"},
{"lineNum":" 1189","line":"                    .flash, .flash1, .flash2, .flash3, .flash4, .flash5 => arch == .avr,"},
{"lineNum":" 1190","line":"                };"},
{"lineNum":" 1191","line":"            }"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"            /// Returns a name that matches the lib/std/target/* source file name."},
{"lineNum":" 1194","line":"            pub fn genericName(arch: Arch) []const u8 {"},
{"lineNum":" 1195","line":"                return switch (arch) {"},
{"lineNum":" 1196","line":"                    .arm, .armeb, .thumb, .thumbeb => \"arm\","},
{"lineNum":" 1197","line":"                    .aarch64, .aarch64_be, .aarch64_32 => \"aarch64\","},
{"lineNum":" 1198","line":"                    .bpfel, .bpfeb => \"bpf\","},
{"lineNum":" 1199","line":"                    .loongarch32, .loongarch64 => \"loongarch\","},
{"lineNum":" 1200","line":"                    .mips, .mipsel, .mips64, .mips64el => \"mips\","},
{"lineNum":" 1201","line":"                    .powerpc, .powerpcle, .powerpc64, .powerpc64le => \"powerpc\","},
{"lineNum":" 1202","line":"                    .amdgcn => \"amdgpu\","},
{"lineNum":" 1203","line":"                    .riscv32, .riscv64 => \"riscv\","},
{"lineNum":" 1204","line":"                    .sparc, .sparc64, .sparcel => \"sparc\","},
{"lineNum":" 1205","line":"                    .s390x => \"s390x\","},
{"lineNum":" 1206","line":"                    .x86, .x86_64 => \"x86\","},
{"lineNum":" 1207","line":"                    .nvptx, .nvptx64 => \"nvptx\","},
{"lineNum":" 1208","line":"                    .wasm32, .wasm64 => \"wasm\","},
{"lineNum":" 1209","line":"                    .spirv32, .spirv64 => \"spirv\","},
{"lineNum":" 1210","line":"                    else => @tagName(arch),"},
{"lineNum":" 1211","line":"                };"},
{"lineNum":" 1212","line":"            }"},
{"lineNum":" 1213","line":""},
{"lineNum":" 1214","line":"            /// All CPU features Zig is aware of, sorted lexicographically by name."},
{"lineNum":" 1215","line":"            pub fn allFeaturesList(arch: Arch) []const Cpu.Feature {"},
{"lineNum":" 1216","line":"                return switch (arch) {"},
{"lineNum":" 1217","line":"                    .arm, .armeb, .thumb, .thumbeb => &arm.all_features,"},
{"lineNum":" 1218","line":"                    .aarch64, .aarch64_be, .aarch64_32 => &aarch64.all_features,"},
{"lineNum":" 1219","line":"                    .arc => &arc.all_features,"},
{"lineNum":" 1220","line":"                    .avr => &avr.all_features,"},
{"lineNum":" 1221","line":"                    .bpfel, .bpfeb => &bpf.all_features,"},
{"lineNum":" 1222","line":"                    .csky => &csky.all_features,"},
{"lineNum":" 1223","line":"                    .hexagon => &hexagon.all_features,"},
{"lineNum":" 1224","line":"                    .loongarch32, .loongarch64 => &loongarch.all_features,"},
{"lineNum":" 1225","line":"                    .m68k => &m68k.all_features,"},
{"lineNum":" 1226","line":"                    .mips, .mipsel, .mips64, .mips64el => &mips.all_features,"},
{"lineNum":" 1227","line":"                    .msp430 => &msp430.all_features,"},
{"lineNum":" 1228","line":"                    .powerpc, .powerpcle, .powerpc64, .powerpc64le => &powerpc.all_features,"},
{"lineNum":" 1229","line":"                    .amdgcn => &amdgpu.all_features,"},
{"lineNum":" 1230","line":"                    .riscv32, .riscv64 => &riscv.all_features,"},
{"lineNum":" 1231","line":"                    .sparc, .sparc64, .sparcel => &sparc.all_features,"},
{"lineNum":" 1232","line":"                    .spirv32, .spirv64 => &spirv.all_features,"},
{"lineNum":" 1233","line":"                    .s390x => &s390x.all_features,"},
{"lineNum":" 1234","line":"                    .x86, .x86_64 => &x86.all_features,"},
{"lineNum":" 1235","line":"                    .xtensa => &xtensa.all_features,"},
{"lineNum":" 1236","line":"                    .nvptx, .nvptx64 => &nvptx.all_features,"},
{"lineNum":" 1237","line":"                    .ve => &ve.all_features,"},
{"lineNum":" 1238","line":"                    .wasm32, .wasm64 => &wasm.all_features,"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"                    else => &[0]Cpu.Feature{},"},
{"lineNum":" 1241","line":"                };"},
{"lineNum":" 1242","line":"            }"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"            /// All processors Zig is aware of, sorted lexicographically by name."},
{"lineNum":" 1245","line":"            pub fn allCpuModels(arch: Arch) []const *const Cpu.Model {"},
{"lineNum":" 1246","line":"                return switch (arch) {"},
{"lineNum":" 1247","line":"                    .arc => comptime allCpusFromDecls(arc.cpu),"},
{"lineNum":" 1248","line":"                    .arm, .armeb, .thumb, .thumbeb => comptime allCpusFromDecls(arm.cpu),"},
{"lineNum":" 1249","line":"                    .aarch64, .aarch64_be, .aarch64_32 => comptime allCpusFromDecls(aarch64.cpu),"},
{"lineNum":" 1250","line":"                    .avr => comptime allCpusFromDecls(avr.cpu),"},
{"lineNum":" 1251","line":"                    .bpfel, .bpfeb => comptime allCpusFromDecls(bpf.cpu),"},
{"lineNum":" 1252","line":"                    .csky => comptime allCpusFromDecls(csky.cpu),"},
{"lineNum":" 1253","line":"                    .hexagon => comptime allCpusFromDecls(hexagon.cpu),"},
{"lineNum":" 1254","line":"                    .loongarch32, .loongarch64 => comptime allCpusFromDecls(loongarch.cpu),"},
{"lineNum":" 1255","line":"                    .m68k => comptime allCpusFromDecls(m68k.cpu),"},
{"lineNum":" 1256","line":"                    .mips, .mipsel, .mips64, .mips64el => comptime allCpusFromDecls(mips.cpu),"},
{"lineNum":" 1257","line":"                    .msp430 => comptime allCpusFromDecls(msp430.cpu),"},
{"lineNum":" 1258","line":"                    .powerpc, .powerpcle, .powerpc64, .powerpc64le => comptime allCpusFromDecls(powerpc.cpu),"},
{"lineNum":" 1259","line":"                    .amdgcn => comptime allCpusFromDecls(amdgpu.cpu),"},
{"lineNum":" 1260","line":"                    .riscv32, .riscv64 => comptime allCpusFromDecls(riscv.cpu),"},
{"lineNum":" 1261","line":"                    .sparc, .sparc64, .sparcel => comptime allCpusFromDecls(sparc.cpu),"},
{"lineNum":" 1262","line":"                    .spirv32, .spirv64 => comptime allCpusFromDecls(spirv.cpu),"},
{"lineNum":" 1263","line":"                    .s390x => comptime allCpusFromDecls(s390x.cpu),"},
{"lineNum":" 1264","line":"                    .x86, .x86_64 => comptime allCpusFromDecls(x86.cpu),"},
{"lineNum":" 1265","line":"                    .xtensa => comptime allCpusFromDecls(xtensa.cpu),"},
{"lineNum":" 1266","line":"                    .nvptx, .nvptx64 => comptime allCpusFromDecls(nvptx.cpu),"},
{"lineNum":" 1267","line":"                    .ve => comptime allCpusFromDecls(ve.cpu),"},
{"lineNum":" 1268","line":"                    .wasm32, .wasm64 => comptime allCpusFromDecls(wasm.cpu),"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"                    else => &[0]*const Model{},"},
{"lineNum":" 1271","line":"                };"},
{"lineNum":" 1272","line":"            }"},
{"lineNum":" 1273","line":""},
{"lineNum":" 1274","line":"            fn allCpusFromDecls(comptime cpus: type) []const *const Cpu.Model {"},
{"lineNum":" 1275","line":"                const decls = @typeInfo(cpus).Struct.decls;"},
{"lineNum":" 1276","line":"                var array: [decls.len]*const Cpu.Model = undefined;"},
{"lineNum":" 1277","line":"                for (decls, 0..) |decl, i| {"},
{"lineNum":" 1278","line":"                    array[i] = &@field(cpus, decl.name);"},
{"lineNum":" 1279","line":"                }"},
{"lineNum":" 1280","line":"                return &array;"},
{"lineNum":" 1281","line":"            }"},
{"lineNum":" 1282","line":"        };"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"        pub const Model = struct {"},
{"lineNum":" 1285","line":"            name: []const u8,"},
{"lineNum":" 1286","line":"            llvm_name: ?[:0]const u8,"},
{"lineNum":" 1287","line":"            features: Feature.Set,"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"            pub fn toCpu(model: *const Model, arch: Arch) Cpu {"},
{"lineNum":" 1290","line":"                var features = model.features;"},
{"lineNum":" 1291","line":"                features.populateDependencies(arch.allFeaturesList());"},
{"lineNum":" 1292","line":"                return .{"},
{"lineNum":" 1293","line":"                    .arch = arch,"},
{"lineNum":" 1294","line":"                    .model = model,"},
{"lineNum":" 1295","line":"                    .features = features,"},
{"lineNum":" 1296","line":"                };"},
{"lineNum":" 1297","line":"            }"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"            pub fn generic(arch: Arch) *const Model {"},
{"lineNum":" 1300","line":"                const S = struct {"},
{"lineNum":" 1301","line":"                    const generic_model = Model{"},
{"lineNum":" 1302","line":"                        .name = \"generic\","},
{"lineNum":" 1303","line":"                        .llvm_name = null,"},
{"lineNum":" 1304","line":"                        .features = Cpu.Feature.Set.empty,"},
{"lineNum":" 1305","line":"                    };"},
{"lineNum":" 1306","line":"                };"},
{"lineNum":" 1307","line":"                return switch (arch) {"},
{"lineNum":" 1308","line":"                    .arm, .armeb, .thumb, .thumbeb => &arm.cpu.generic,"},
{"lineNum":" 1309","line":"                    .aarch64, .aarch64_be, .aarch64_32 => &aarch64.cpu.generic,"},
{"lineNum":" 1310","line":"                    .avr => &avr.cpu.avr2,"},
{"lineNum":" 1311","line":"                    .bpfel, .bpfeb => &bpf.cpu.generic,"},
{"lineNum":" 1312","line":"                    .hexagon => &hexagon.cpu.generic,"},
{"lineNum":" 1313","line":"                    .loongarch32 => &loongarch.cpu.generic_la32,"},
{"lineNum":" 1314","line":"                    .loongarch64 => &loongarch.cpu.generic_la64,"},
{"lineNum":" 1315","line":"                    .m68k => &m68k.cpu.generic,"},
{"lineNum":" 1316","line":"                    .mips, .mipsel => &mips.cpu.mips32,"},
{"lineNum":" 1317","line":"                    .mips64, .mips64el => &mips.cpu.mips64,"},
{"lineNum":" 1318","line":"                    .msp430 => &msp430.cpu.generic,"},
{"lineNum":" 1319","line":"                    .powerpc => &powerpc.cpu.ppc,"},
{"lineNum":" 1320","line":"                    .powerpcle => &powerpc.cpu.ppc,"},
{"lineNum":" 1321","line":"                    .powerpc64 => &powerpc.cpu.ppc64,"},
{"lineNum":" 1322","line":"                    .powerpc64le => &powerpc.cpu.ppc64le,"},
{"lineNum":" 1323","line":"                    .amdgcn => &amdgpu.cpu.generic,"},
{"lineNum":" 1324","line":"                    .riscv32 => &riscv.cpu.generic_rv32,"},
{"lineNum":" 1325","line":"                    .riscv64 => &riscv.cpu.generic_rv64,"},
{"lineNum":" 1326","line":"                    .spirv32, .spirv64 => &spirv.cpu.generic,"},
{"lineNum":" 1327","line":"                    .sparc, .sparcel => &sparc.cpu.generic,"},
{"lineNum":" 1328","line":"                    .sparc64 => &sparc.cpu.v9, // 64-bit SPARC needs v9 as the baseline"},
{"lineNum":" 1329","line":"                    .s390x => &s390x.cpu.generic,"},
{"lineNum":" 1330","line":"                    .x86 => &x86.cpu.i386,"},
{"lineNum":" 1331","line":"                    .x86_64 => &x86.cpu.x86_64,"},
{"lineNum":" 1332","line":"                    .nvptx, .nvptx64 => &nvptx.cpu.sm_20,"},
{"lineNum":" 1333","line":"                    .ve => &ve.cpu.generic,"},
{"lineNum":" 1334","line":"                    .wasm32, .wasm64 => &wasm.cpu.generic,"},
{"lineNum":" 1335","line":""},
{"lineNum":" 1336","line":"                    else => &S.generic_model,"},
{"lineNum":" 1337","line":"                };"},
{"lineNum":" 1338","line":"            }"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"            pub fn baseline(arch: Arch) *const Model {"},
{"lineNum":" 1341","line":"                return switch (arch) {"},
{"lineNum":" 1342","line":"                    .arm, .armeb, .thumb, .thumbeb => &arm.cpu.baseline,"},
{"lineNum":" 1343","line":"                    .riscv32 => &riscv.cpu.baseline_rv32,"},
{"lineNum":" 1344","line":"                    .riscv64 => &riscv.cpu.baseline_rv64,"},
{"lineNum":" 1345","line":"                    .x86 => &x86.cpu.pentium4,"},
{"lineNum":" 1346","line":"                    .nvptx, .nvptx64 => &nvptx.cpu.sm_20,"},
{"lineNum":" 1347","line":"                    .sparc, .sparcel => &sparc.cpu.v8,"},
{"lineNum":" 1348","line":""},
{"lineNum":" 1349","line":"                    else => generic(arch),"},
{"lineNum":" 1350","line":"                };"},
{"lineNum":" 1351","line":"            }"},
{"lineNum":" 1352","line":"        };"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"        /// The \"default\" set of CPU features for cross-compiling. A conservative set"},
{"lineNum":" 1355","line":"        /// of features that is expected to be supported on most available hardware."},
{"lineNum":" 1356","line":"        pub fn baseline(arch: Arch) Cpu {"},
{"lineNum":" 1357","line":"            return Model.baseline(arch).toCpu(arch);"},
{"lineNum":" 1358","line":"        }"},
{"lineNum":" 1359","line":"    };"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"    pub fn zigTriple(self: Target, allocator: mem.Allocator) ![]u8 {"},
{"lineNum":" 1362","line":"        return std.zig.CrossTarget.fromTarget(self).zigTriple(allocator);"},
{"lineNum":" 1363","line":"    }"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"    pub fn linuxTripleSimple(allocator: mem.Allocator, cpu_arch: Cpu.Arch, os_tag: Os.Tag, abi: Abi) ![]u8 {"},
{"lineNum":" 1366","line":"        return std.fmt.allocPrint(allocator, \"{s}-{s}-{s}\", .{ @tagName(cpu_arch), @tagName(os_tag), @tagName(abi) });"},
{"lineNum":" 1367","line":"    }"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"    pub fn linuxTriple(self: Target, allocator: mem.Allocator) ![]u8 {"},
{"lineNum":" 1370","line":"        return linuxTripleSimple(allocator, self.cpu.arch, self.os.tag, self.abi);"},
{"lineNum":" 1371","line":"    }"},
{"lineNum":" 1372","line":""},
{"lineNum":" 1373","line":"    pub fn exeFileExtSimple(cpu_arch: Cpu.Arch, os_tag: Os.Tag) [:0]const u8 {"},
{"lineNum":" 1374","line":"        return switch (os_tag) {"},
{"lineNum":" 1375","line":"            .windows => \".exe\","},
{"lineNum":" 1376","line":"            .uefi => \".efi\","},
{"lineNum":" 1377","line":"            .plan9 => plan9Ext(cpu_arch),"},
{"lineNum":" 1378","line":"            else => switch (cpu_arch) {"},
{"lineNum":" 1379","line":"                .wasm32, .wasm64 => \".wasm\","},
{"lineNum":" 1380","line":"                else => \"\","},
{"lineNum":" 1381","line":"            },"},
{"lineNum":" 1382","line":"        };"},
{"lineNum":" 1383","line":"    }"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"    pub fn exeFileExt(self: Target) [:0]const u8 {"},
{"lineNum":" 1386","line":"        return exeFileExtSimple(self.cpu.arch, self.os.tag);"},
{"lineNum":" 1387","line":"    }"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"    pub fn staticLibSuffix_os_abi(os_tag: Os.Tag, abi: Abi) [:0]const u8 {"},
{"lineNum":" 1390","line":"        if (abi == .msvc) {"},
{"lineNum":" 1391","line":"            return \".lib\";"},
{"lineNum":" 1392","line":"        }"},
{"lineNum":" 1393","line":"        switch (os_tag) {"},
{"lineNum":" 1394","line":"            .windows, .uefi => return \".lib\","},
{"lineNum":" 1395","line":"            else => return \".a\","},
{"lineNum":" 1396","line":"        }"},
{"lineNum":" 1397","line":"    }"},
{"lineNum":" 1398","line":""},
{"lineNum":" 1399","line":"    pub fn staticLibSuffix(self: Target) [:0]const u8 {"},
{"lineNum":" 1400","line":"        return staticLibSuffix_os_abi(self.os.tag, self.abi);"},
{"lineNum":" 1401","line":"    }"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"    pub fn dynamicLibSuffix(self: Target) [:0]const u8 {"},
{"lineNum":" 1404","line":"        return self.os.tag.dynamicLibSuffix();"},
{"lineNum":" 1405","line":"    }"},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"    pub fn libPrefix_os_abi(os_tag: Os.Tag, abi: Abi) [:0]const u8 {"},
{"lineNum":" 1408","line":"        if (abi == .msvc) {"},
{"lineNum":" 1409","line":"            return \"\";"},
{"lineNum":" 1410","line":"        }"},
{"lineNum":" 1411","line":"        switch (os_tag) {"},
{"lineNum":" 1412","line":"            .windows, .uefi => return \"\","},
{"lineNum":" 1413","line":"            else => return \"lib\","},
{"lineNum":" 1414","line":"        }"},
{"lineNum":" 1415","line":"    }"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"    pub fn libPrefix(self: Target) [:0]const u8 {"},
{"lineNum":" 1418","line":"        return libPrefix_os_abi(self.os.tag, self.abi);"},
{"lineNum":" 1419","line":"    }"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"    pub inline fn isMinGW(self: Target) bool {"},
{"lineNum":" 1422","line":"        return self.os.tag == .windows and self.isGnu();"},
{"lineNum":" 1423","line":"    }"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":"    pub inline fn isGnu(self: Target) bool {"},
{"lineNum":" 1426","line":"        return self.abi.isGnu();"},
{"lineNum":" 1427","line":"    }"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"    pub inline fn isMusl(self: Target) bool {"},
{"lineNum":" 1430","line":"        return self.abi.isMusl();"},
{"lineNum":" 1431","line":"    }"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"    pub inline fn isAndroid(self: Target) bool {"},
{"lineNum":" 1434","line":"        return self.abi == .android;"},
{"lineNum":" 1435","line":"    }"},
{"lineNum":" 1436","line":""},
{"lineNum":" 1437","line":"    pub inline fn isWasm(self: Target) bool {"},
{"lineNum":" 1438","line":"        return self.cpu.arch.isWasm();"},
{"lineNum":" 1439","line":"    }"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"    pub inline fn isDarwin(self: Target) bool {"},
{"lineNum":" 1442","line":"        return self.os.tag.isDarwin();"},
{"lineNum":" 1443","line":"    }"},
{"lineNum":" 1444","line":""},
{"lineNum":" 1445","line":"    pub inline fn isBSD(self: Target) bool {"},
{"lineNum":" 1446","line":"        return self.os.tag.isBSD();"},
{"lineNum":" 1447","line":"    }"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"    pub inline fn isBpfFreestanding(self: Target) bool {"},
{"lineNum":" 1450","line":"        return self.cpu.arch.isBpf() and self.os.tag == .freestanding;"},
{"lineNum":" 1451","line":"    }"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"    pub inline fn isGnuLibC_os_tag_abi(os_tag: Os.Tag, abi: Abi) bool {"},
{"lineNum":" 1454","line":"        return os_tag == .linux and abi.isGnu();"},
{"lineNum":" 1455","line":"    }"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"    pub inline fn isGnuLibC(self: Target) bool {"},
{"lineNum":" 1458","line":"        return isGnuLibC_os_tag_abi(self.os.tag, self.abi);"},
{"lineNum":" 1459","line":"    }"},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"    pub inline fn supportsNewStackCall(self: Target) bool {"},
{"lineNum":" 1462","line":"        return !self.cpu.arch.isWasm();"},
{"lineNum":" 1463","line":"    }"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"    pub inline fn isSpirV(self: Target) bool {"},
{"lineNum":" 1466","line":"        return self.cpu.arch.isSpirV();"},
{"lineNum":" 1467","line":"    }"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"    pub const FloatAbi = enum {"},
{"lineNum":" 1470","line":"        hard,"},
{"lineNum":" 1471","line":"        soft,"},
{"lineNum":" 1472","line":"        soft_fp,"},
{"lineNum":" 1473","line":"    };"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":"    pub inline fn getFloatAbi(self: Target) FloatAbi {"},
{"lineNum":" 1476","line":"        return self.abi.floatAbi();"},
{"lineNum":" 1477","line":"    }"},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"    pub inline fn hasDynamicLinker(self: Target) bool {"},
{"lineNum":" 1480","line":"        if (self.cpu.arch.isWasm()) {"},
{"lineNum":" 1481","line":"            return false;"},
{"lineNum":" 1482","line":"        }"},
{"lineNum":" 1483","line":"        switch (self.os.tag) {"},
{"lineNum":" 1484","line":"            .freestanding,"},
{"lineNum":" 1485","line":"            .ios,"},
{"lineNum":" 1486","line":"            .tvos,"},
{"lineNum":" 1487","line":"            .watchos,"},
{"lineNum":" 1488","line":"            .macos,"},
{"lineNum":" 1489","line":"            .uefi,"},
{"lineNum":" 1490","line":"            .windows,"},
{"lineNum":" 1491","line":"            .emscripten,"},
{"lineNum":" 1492","line":"            .opencl,"},
{"lineNum":" 1493","line":"            .glsl450,"},
{"lineNum":" 1494","line":"            .vulkan,"},
{"lineNum":" 1495","line":"            .plan9,"},
{"lineNum":" 1496","line":"            .other,"},
{"lineNum":" 1497","line":"            => return false,"},
{"lineNum":" 1498","line":"            else => return true,"},
{"lineNum":" 1499","line":"        }"},
{"lineNum":" 1500","line":"    }"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":"    pub const DynamicLinker = struct {"},
{"lineNum":" 1503","line":"        /// Contains the memory used to store the dynamic linker path. This field should"},
{"lineNum":" 1504","line":"        /// not be used directly. See `get` and `set`. This field exists so that this API requires no allocator."},
{"lineNum":" 1505","line":"        buffer: [255]u8 = undefined,"},
{"lineNum":" 1506","line":""},
{"lineNum":" 1507","line":"        /// Used to construct the dynamic linker path. This field should not be used"},
{"lineNum":" 1508","line":"        /// directly. See `get` and `set`."},
{"lineNum":" 1509","line":"        max_byte: ?u8 = null,"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"        /// Asserts that the length is less than or equal to 255 bytes."},
{"lineNum":" 1512","line":"        pub fn init(dl_or_null: ?[]const u8) DynamicLinker {"},
{"lineNum":" 1513","line":"            var result: DynamicLinker = undefined;"},
{"lineNum":" 1514","line":"            result.set(dl_or_null);"},
{"lineNum":" 1515","line":"            return result;"},
{"lineNum":" 1516","line":"        }"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"        /// The returned memory has the same lifetime as the `DynamicLinker`."},
{"lineNum":" 1519","line":"        pub fn get(self: *const DynamicLinker) ?[]const u8 {"},
{"lineNum":" 1520","line":"            const m: usize = self.max_byte orelse return null;"},
{"lineNum":" 1521","line":"            return self.buffer[0 .. m + 1];"},
{"lineNum":" 1522","line":"        }"},
{"lineNum":" 1523","line":""},
{"lineNum":" 1524","line":"        /// Asserts that the length is less than or equal to 255 bytes."},
{"lineNum":" 1525","line":"        pub fn set(self: *DynamicLinker, dl_or_null: ?[]const u8) void {"},
{"lineNum":" 1526","line":"            if (dl_or_null) |dl| {"},
{"lineNum":" 1527","line":"                @memcpy(self.buffer[0..dl.len], dl);"},
{"lineNum":" 1528","line":"                self.max_byte = @as(u8, @intCast(dl.len - 1));"},
{"lineNum":" 1529","line":"            } else {"},
{"lineNum":" 1530","line":"                self.max_byte = null;"},
{"lineNum":" 1531","line":"            }"},
{"lineNum":" 1532","line":"        }"},
{"lineNum":" 1533","line":"    };"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"    pub fn standardDynamicLinkerPath(self: Target) DynamicLinker {"},
{"lineNum":" 1536","line":"        var result: DynamicLinker = .{};"},
{"lineNum":" 1537","line":"        const S = struct {"},
{"lineNum":" 1538","line":"            fn print(r: *DynamicLinker, comptime fmt: []const u8, args: anytype) DynamicLinker {"},
{"lineNum":" 1539","line":"                r.max_byte = @as(u8, @intCast((std.fmt.bufPrint(&r.buffer, fmt, args) catch unreachable).len - 1));"},
{"lineNum":" 1540","line":"                return r.*;"},
{"lineNum":" 1541","line":"            }"},
{"lineNum":" 1542","line":"            fn copy(r: *DynamicLinker, s: []const u8) DynamicLinker {"},
{"lineNum":" 1543","line":"                @memcpy(r.buffer[0..s.len], s);"},
{"lineNum":" 1544","line":"                r.max_byte = @as(u8, @intCast(s.len - 1));"},
{"lineNum":" 1545","line":"                return r.*;"},
{"lineNum":" 1546","line":"            }"},
{"lineNum":" 1547","line":"        };"},
{"lineNum":" 1548","line":"        const print = S.print;"},
{"lineNum":" 1549","line":"        const copy = S.copy;"},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"        if (self.abi == .android) {"},
{"lineNum":" 1552","line":"            const suffix = if (self.ptrBitWidth() == 64) \"64\" else \"\";"},
{"lineNum":" 1553","line":"            return print(&result, \"/system/bin/linker{s}\", .{suffix});"},
{"lineNum":" 1554","line":"        }"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"        if (self.abi.isMusl()) {"},
{"lineNum":" 1557","line":"            const is_arm = switch (self.cpu.arch) {"},
{"lineNum":" 1558","line":"                .arm, .armeb, .thumb, .thumbeb => true,"},
{"lineNum":" 1559","line":"                else => false,"},
{"lineNum":" 1560","line":"            };"},
{"lineNum":" 1561","line":"            const arch_part = switch (self.cpu.arch) {"},
{"lineNum":" 1562","line":"                .arm, .thumb => \"arm\","},
{"lineNum":" 1563","line":"                .armeb, .thumbeb => \"armeb\","},
{"lineNum":" 1564","line":"                else => |arch| @tagName(arch),"},
{"lineNum":" 1565","line":"            };"},
{"lineNum":" 1566","line":"            const arch_suffix = if (is_arm and self.abi.floatAbi() == .hard) \"hf\" else \"\";"},
{"lineNum":" 1567","line":"            return print(&result, \"/lib/ld-musl-{s}{s}.so.1\", .{ arch_part, arch_suffix });"},
{"lineNum":" 1568","line":"        }"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"        switch (self.os.tag) {"},
{"lineNum":" 1571","line":"            .freebsd => return copy(&result, \"/libexec/ld-elf.so.1\"),"},
{"lineNum":" 1572","line":"            .netbsd => return copy(&result, \"/libexec/ld.elf_so\"),"},
{"lineNum":" 1573","line":"            .openbsd => return copy(&result, \"/usr/libexec/ld.so\"),"},
{"lineNum":" 1574","line":"            .dragonfly => return copy(&result, \"/libexec/ld-elf.so.2\"),"},
{"lineNum":" 1575","line":"            .solaris => return copy(&result, \"/lib/64/ld.so.1\"),"},
{"lineNum":" 1576","line":"            .linux => switch (self.cpu.arch) {"},
{"lineNum":" 1577","line":"                .x86,"},
{"lineNum":" 1578","line":"                .sparc,"},
{"lineNum":" 1579","line":"                .sparcel,"},
{"lineNum":" 1580","line":"                => return copy(&result, \"/lib/ld-linux.so.2\"),"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"                .aarch64 => return copy(&result, \"/lib/ld-linux-aarch64.so.1\"),"},
{"lineNum":" 1583","line":"                .aarch64_be => return copy(&result, \"/lib/ld-linux-aarch64_be.so.1\"),"},
{"lineNum":" 1584","line":"                .aarch64_32 => return copy(&result, \"/lib/ld-linux-aarch64_32.so.1\"),"},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"                .arm,"},
{"lineNum":" 1587","line":"                .armeb,"},
{"lineNum":" 1588","line":"                .thumb,"},
{"lineNum":" 1589","line":"                .thumbeb,"},
{"lineNum":" 1590","line":"                => return copy(&result, switch (self.abi.floatAbi()) {"},
{"lineNum":" 1591","line":"                    .hard => \"/lib/ld-linux-armhf.so.3\","},
{"lineNum":" 1592","line":"                    else => \"/lib/ld-linux.so.3\","},
{"lineNum":" 1593","line":"                }),"},
{"lineNum":" 1594","line":""},
{"lineNum":" 1595","line":"                .mips,"},
{"lineNum":" 1596","line":"                .mipsel,"},
{"lineNum":" 1597","line":"                .mips64,"},
{"lineNum":" 1598","line":"                .mips64el,"},
{"lineNum":" 1599","line":"                => {"},
{"lineNum":" 1600","line":"                    const lib_suffix = switch (self.abi) {"},
{"lineNum":" 1601","line":"                        .gnuabin32, .gnux32 => \"32\","},
{"lineNum":" 1602","line":"                        .gnuabi64 => \"64\","},
{"lineNum":" 1603","line":"                        else => \"\","},
{"lineNum":" 1604","line":"                    };"},
{"lineNum":" 1605","line":"                    const is_nan_2008 = mips.featureSetHas(self.cpu.features, .nan2008);"},
{"lineNum":" 1606","line":"                    const loader = if (is_nan_2008) \"ld-linux-mipsn8.so.1\" else \"ld.so.1\";"},
{"lineNum":" 1607","line":"                    return print(&result, \"/lib{s}/{s}\", .{ lib_suffix, loader });"},
{"lineNum":" 1608","line":"                },"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"                .powerpc, .powerpcle => return copy(&result, \"/lib/ld.so.1\"),"},
{"lineNum":" 1611","line":"                .powerpc64, .powerpc64le => return copy(&result, \"/lib64/ld64.so.2\"),"},
{"lineNum":" 1612","line":"                .s390x => return copy(&result, \"/lib64/ld64.so.1\"),"},
{"lineNum":" 1613","line":"                .sparc64 => return copy(&result, \"/lib64/ld-linux.so.2\"),"},
{"lineNum":" 1614","line":"                .x86_64 => return copy(&result, switch (self.abi) {"},
{"lineNum":" 1615","line":"                    .gnux32 => \"/libx32/ld-linux-x32.so.2\","},
{"lineNum":" 1616","line":"                    else => \"/lib64/ld-linux-x86-64.so.2\","},
{"lineNum":" 1617","line":"                }),"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"                .riscv32 => return copy(&result, \"/lib/ld-linux-riscv32-ilp32.so.1\"),"},
{"lineNum":" 1620","line":"                .riscv64 => return copy(&result, \"/lib/ld-linux-riscv64-lp64.so.1\"),"},
{"lineNum":" 1621","line":""},
{"lineNum":" 1622","line":"                // Architectures in this list have been verified as not having a standard"},
{"lineNum":" 1623","line":"                // dynamic linker path."},
{"lineNum":" 1624","line":"                .wasm32,"},
{"lineNum":" 1625","line":"                .wasm64,"},
{"lineNum":" 1626","line":"                .bpfel,"},
{"lineNum":" 1627","line":"                .bpfeb,"},
{"lineNum":" 1628","line":"                .nvptx,"},
{"lineNum":" 1629","line":"                .nvptx64,"},
{"lineNum":" 1630","line":"                .spu_2,"},
{"lineNum":" 1631","line":"                .avr,"},
{"lineNum":" 1632","line":"                .spirv32,"},
{"lineNum":" 1633","line":"                .spirv64,"},
{"lineNum":" 1634","line":"                => return result,"},
{"lineNum":" 1635","line":""},
{"lineNum":" 1636","line":"                // TODO go over each item in this list and either move it to the above list, or"},
{"lineNum":" 1637","line":"                // implement the standard dynamic linker path code for it."},
{"lineNum":" 1638","line":"                .arc,"},
{"lineNum":" 1639","line":"                .csky,"},
{"lineNum":" 1640","line":"                .hexagon,"},
{"lineNum":" 1641","line":"                .m68k,"},
{"lineNum":" 1642","line":"                .msp430,"},
{"lineNum":" 1643","line":"                .r600,"},
{"lineNum":" 1644","line":"                .amdgcn,"},
{"lineNum":" 1645","line":"                .tce,"},
{"lineNum":" 1646","line":"                .tcele,"},
{"lineNum":" 1647","line":"                .xcore,"},
{"lineNum":" 1648","line":"                .le32,"},
{"lineNum":" 1649","line":"                .le64,"},
{"lineNum":" 1650","line":"                .amdil,"},
{"lineNum":" 1651","line":"                .amdil64,"},
{"lineNum":" 1652","line":"                .hsail,"},
{"lineNum":" 1653","line":"                .hsail64,"},
{"lineNum":" 1654","line":"                .spir,"},
{"lineNum":" 1655","line":"                .spir64,"},
{"lineNum":" 1656","line":"                .kalimba,"},
{"lineNum":" 1657","line":"                .shave,"},
{"lineNum":" 1658","line":"                .lanai,"},
{"lineNum":" 1659","line":"                .renderscript32,"},
{"lineNum":" 1660","line":"                .renderscript64,"},
{"lineNum":" 1661","line":"                .ve,"},
{"lineNum":" 1662","line":"                .dxil,"},
{"lineNum":" 1663","line":"                .loongarch32,"},
{"lineNum":" 1664","line":"                .loongarch64,"},
{"lineNum":" 1665","line":"                .xtensa,"},
{"lineNum":" 1666","line":"                => return result,"},
{"lineNum":" 1667","line":"            },"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"            .ios,"},
{"lineNum":" 1670","line":"            .tvos,"},
{"lineNum":" 1671","line":"            .watchos,"},
{"lineNum":" 1672","line":"            .macos,"},
{"lineNum":" 1673","line":"            => return copy(&result, \"/usr/lib/dyld\"),"},
{"lineNum":" 1674","line":""},
{"lineNum":" 1675","line":"            // Operating systems in this list have been verified as not having a standard"},
{"lineNum":" 1676","line":"            // dynamic linker path."},
{"lineNum":" 1677","line":"            .freestanding,"},
{"lineNum":" 1678","line":"            .uefi,"},
{"lineNum":" 1679","line":"            .windows,"},
{"lineNum":" 1680","line":"            .emscripten,"},
{"lineNum":" 1681","line":"            .wasi,"},
{"lineNum":" 1682","line":"            .opencl,"},
{"lineNum":" 1683","line":"            .glsl450,"},
{"lineNum":" 1684","line":"            .vulkan,"},
{"lineNum":" 1685","line":"            .other,"},
{"lineNum":" 1686","line":"            .plan9,"},
{"lineNum":" 1687","line":"            => return result,"},
{"lineNum":" 1688","line":""},
{"lineNum":" 1689","line":"            // TODO revisit when multi-arch for Haiku is available"},
{"lineNum":" 1690","line":"            .haiku => return copy(&result, \"/system/runtime_loader\"),"},
{"lineNum":" 1691","line":""},
{"lineNum":" 1692","line":"            // TODO go over each item in this list and either move it to the above list, or"},
{"lineNum":" 1693","line":"            // implement the standard dynamic linker path code for it."},
{"lineNum":" 1694","line":"            .ananas,"},
{"lineNum":" 1695","line":"            .cloudabi,"},
{"lineNum":" 1696","line":"            .fuchsia,"},
{"lineNum":" 1697","line":"            .kfreebsd,"},
{"lineNum":" 1698","line":"            .lv2,"},
{"lineNum":" 1699","line":"            .zos,"},
{"lineNum":" 1700","line":"            .minix,"},
{"lineNum":" 1701","line":"            .rtems,"},
{"lineNum":" 1702","line":"            .nacl,"},
{"lineNum":" 1703","line":"            .aix,"},
{"lineNum":" 1704","line":"            .cuda,"},
{"lineNum":" 1705","line":"            .nvcl,"},
{"lineNum":" 1706","line":"            .amdhsa,"},
{"lineNum":" 1707","line":"            .ps4,"},
{"lineNum":" 1708","line":"            .ps5,"},
{"lineNum":" 1709","line":"            .elfiamcu,"},
{"lineNum":" 1710","line":"            .mesa3d,"},
{"lineNum":" 1711","line":"            .contiki,"},
{"lineNum":" 1712","line":"            .amdpal,"},
{"lineNum":" 1713","line":"            .hermit,"},
{"lineNum":" 1714","line":"            .hurd,"},
{"lineNum":" 1715","line":"            .driverkit,"},
{"lineNum":" 1716","line":"            .shadermodel,"},
{"lineNum":" 1717","line":"            => return result,"},
{"lineNum":" 1718","line":"        }"},
{"lineNum":" 1719","line":"    }"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"    /// 0c spim    little-endian MIPS 3000 family"},
{"lineNum":" 1722","line":"    /// 1c 68000   Motorola MC68000"},
{"lineNum":" 1723","line":"    /// 2c 68020   Motorola MC68020"},
{"lineNum":" 1724","line":"    /// 5c arm     little-endian ARM"},
{"lineNum":" 1725","line":"    /// 6c amd64   AMD64 and compatibles (e.g., Intel EM64T)"},
{"lineNum":" 1726","line":"    /// 7c arm64   ARM64 (ARMv8)"},
{"lineNum":" 1727","line":"    /// 8c 386     Intel x86, i486, Pentium, etc."},
{"lineNum":" 1728","line":"    /// kc sparc   Sun SPARC"},
{"lineNum":" 1729","line":"    /// qc power   Power PC"},
{"lineNum":" 1730","line":"    /// vc mips    big-endian MIPS 3000 family"},
{"lineNum":" 1731","line":"    pub fn plan9Ext(cpu_arch: Cpu.Arch) [:0]const u8 {"},
{"lineNum":" 1732","line":"        return switch (cpu_arch) {"},
{"lineNum":" 1733","line":"            .arm => \".5\","},
{"lineNum":" 1734","line":"            .x86_64 => \".6\","},
{"lineNum":" 1735","line":"            .aarch64 => \".7\","},
{"lineNum":" 1736","line":"            .x86 => \".8\","},
{"lineNum":" 1737","line":"            .sparc => \".k\","},
{"lineNum":" 1738","line":"            .powerpc, .powerpcle => \".q\","},
{"lineNum":" 1739","line":"            .mips, .mipsel => \".v\","},
{"lineNum":" 1740","line":"            // ISAs without designated characters get \'X\' for lack of a better option."},
{"lineNum":" 1741","line":"            else => \".X\","},
{"lineNum":" 1742","line":"        };"},
{"lineNum":" 1743","line":"    }"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"    pub inline fn maxIntAlignment(target: Target) u16 {"},
{"lineNum":" 1746","line":"        return switch (target.cpu.arch) {"},
{"lineNum":" 1747","line":"            .avr => 1,"},
{"lineNum":" 1748","line":"            .msp430 => 2,"},
{"lineNum":" 1749","line":"            .xcore => 4,"},
{"lineNum":" 1750","line":""},
{"lineNum":" 1751","line":"            .arm,"},
{"lineNum":" 1752","line":"            .armeb,"},
{"lineNum":" 1753","line":"            .thumb,"},
{"lineNum":" 1754","line":"            .thumbeb,"},
{"lineNum":" 1755","line":"            .hexagon,"},
{"lineNum":" 1756","line":"            .mips,"},
{"lineNum":" 1757","line":"            .mipsel,"},
{"lineNum":" 1758","line":"            .powerpc,"},
{"lineNum":" 1759","line":"            .powerpcle,"},
{"lineNum":" 1760","line":"            .r600,"},
{"lineNum":" 1761","line":"            .amdgcn,"},
{"lineNum":" 1762","line":"            .riscv32,"},
{"lineNum":" 1763","line":"            .sparc,"},
{"lineNum":" 1764","line":"            .sparcel,"},
{"lineNum":" 1765","line":"            .s390x,"},
{"lineNum":" 1766","line":"            .lanai,"},
{"lineNum":" 1767","line":"            .wasm32,"},
{"lineNum":" 1768","line":"            .wasm64,"},
{"lineNum":" 1769","line":"            => 8,"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"            .x86 => if (target.ofmt == .c) 16 else return switch (target.os.tag) {"},
{"lineNum":" 1772","line":"                .windows, .uefi => 8,"},
{"lineNum":" 1773","line":"                else => 4,"},
{"lineNum":" 1774","line":"            },"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"            // For these, LLVMABIAlignmentOfType(i128) reports 8. Note that 16"},
{"lineNum":" 1777","line":"            // is a relevant number in three cases:"},
{"lineNum":" 1778","line":"            // 1. Different machine code instruction when loading into SIMD register."},
{"lineNum":" 1779","line":"            // 2. The C ABI wants 16 for extern structs."},
{"lineNum":" 1780","line":"            // 3. 16-byte cmpxchg needs 16-byte alignment."},
{"lineNum":" 1781","line":"            // Same logic for powerpc64, mips64, sparc64."},
{"lineNum":" 1782","line":"            .x86_64,"},
{"lineNum":" 1783","line":"            .powerpc64,"},
{"lineNum":" 1784","line":"            .powerpc64le,"},
{"lineNum":" 1785","line":"            .mips64,"},
{"lineNum":" 1786","line":"            .mips64el,"},
{"lineNum":" 1787","line":"            .sparc64,"},
{"lineNum":" 1788","line":"            => return switch (target.ofmt) {"},
{"lineNum":" 1789","line":"                .c => 16,"},
{"lineNum":" 1790","line":"                else => 8,"},
{"lineNum":" 1791","line":"            },"},
{"lineNum":" 1792","line":""},
{"lineNum":" 1793","line":"            // Even LLVMABIAlignmentOfType(i128) agrees on these targets."},
{"lineNum":" 1794","line":"            .aarch64,"},
{"lineNum":" 1795","line":"            .aarch64_be,"},
{"lineNum":" 1796","line":"            .aarch64_32,"},
{"lineNum":" 1797","line":"            .riscv64,"},
{"lineNum":" 1798","line":"            .bpfel,"},
{"lineNum":" 1799","line":"            .bpfeb,"},
{"lineNum":" 1800","line":"            .nvptx,"},
{"lineNum":" 1801","line":"            .nvptx64,"},
{"lineNum":" 1802","line":"            => 16,"},
{"lineNum":" 1803","line":""},
{"lineNum":" 1804","line":"            // Below this comment are unverified but based on the fact that C requires"},
{"lineNum":" 1805","line":"            // int128_t to be 16 bytes aligned, it\'s a safe default."},
{"lineNum":" 1806","line":"            .spu_2,"},
{"lineNum":" 1807","line":"            .csky,"},
{"lineNum":" 1808","line":"            .arc,"},
{"lineNum":" 1809","line":"            .m68k,"},
{"lineNum":" 1810","line":"            .tce,"},
{"lineNum":" 1811","line":"            .tcele,"},
{"lineNum":" 1812","line":"            .le32,"},
{"lineNum":" 1813","line":"            .amdil,"},
{"lineNum":" 1814","line":"            .hsail,"},
{"lineNum":" 1815","line":"            .spir,"},
{"lineNum":" 1816","line":"            .kalimba,"},
{"lineNum":" 1817","line":"            .renderscript32,"},
{"lineNum":" 1818","line":"            .spirv32,"},
{"lineNum":" 1819","line":"            .shave,"},
{"lineNum":" 1820","line":"            .le64,"},
{"lineNum":" 1821","line":"            .amdil64,"},
{"lineNum":" 1822","line":"            .hsail64,"},
{"lineNum":" 1823","line":"            .spir64,"},
{"lineNum":" 1824","line":"            .renderscript64,"},
{"lineNum":" 1825","line":"            .ve,"},
{"lineNum":" 1826","line":"            .spirv64,"},
{"lineNum":" 1827","line":"            .dxil,"},
{"lineNum":" 1828","line":"            .loongarch32,"},
{"lineNum":" 1829","line":"            .loongarch64,"},
{"lineNum":" 1830","line":"            .xtensa,"},
{"lineNum":" 1831","line":"            => 16,"},
{"lineNum":" 1832","line":"        };"},
{"lineNum":" 1833","line":"    }"},
{"lineNum":" 1834","line":""},
{"lineNum":" 1835","line":"    pub inline fn ptrBitWidth(target: Target) u16 {"},
{"lineNum":" 1836","line":"        switch (target.abi) {"},
{"lineNum":" 1837","line":"            .gnux32, .muslx32, .gnuabin32, .gnuilp32 => return 32,"},
{"lineNum":" 1838","line":"            .gnuabi64 => return 64,"},
{"lineNum":" 1839","line":"            else => {},"},
{"lineNum":" 1840","line":"        }"},
{"lineNum":" 1841","line":"        switch (target.cpu.arch) {"},
{"lineNum":" 1842","line":"            .avr,"},
{"lineNum":" 1843","line":"            .msp430,"},
{"lineNum":" 1844","line":"            .spu_2,"},
{"lineNum":" 1845","line":"            => return 16,"},
{"lineNum":" 1846","line":""},
{"lineNum":" 1847","line":"            .arc,"},
{"lineNum":" 1848","line":"            .arm,"},
{"lineNum":" 1849","line":"            .armeb,"},
{"lineNum":" 1850","line":"            .csky,"},
{"lineNum":" 1851","line":"            .hexagon,"},
{"lineNum":" 1852","line":"            .m68k,"},
{"lineNum":" 1853","line":"            .le32,"},
{"lineNum":" 1854","line":"            .mips,"},
{"lineNum":" 1855","line":"            .mipsel,"},
{"lineNum":" 1856","line":"            .powerpc,"},
{"lineNum":" 1857","line":"            .powerpcle,"},
{"lineNum":" 1858","line":"            .r600,"},
{"lineNum":" 1859","line":"            .riscv32,"},
{"lineNum":" 1860","line":"            .sparcel,"},
{"lineNum":" 1861","line":"            .tce,"},
{"lineNum":" 1862","line":"            .tcele,"},
{"lineNum":" 1863","line":"            .thumb,"},
{"lineNum":" 1864","line":"            .thumbeb,"},
{"lineNum":" 1865","line":"            .x86,"},
{"lineNum":" 1866","line":"            .xcore,"},
{"lineNum":" 1867","line":"            .nvptx,"},
{"lineNum":" 1868","line":"            .amdil,"},
{"lineNum":" 1869","line":"            .hsail,"},
{"lineNum":" 1870","line":"            .spir,"},
{"lineNum":" 1871","line":"            .kalimba,"},
{"lineNum":" 1872","line":"            .shave,"},
{"lineNum":" 1873","line":"            .lanai,"},
{"lineNum":" 1874","line":"            .wasm32,"},
{"lineNum":" 1875","line":"            .renderscript32,"},
{"lineNum":" 1876","line":"            .aarch64_32,"},
{"lineNum":" 1877","line":"            .spirv32,"},
{"lineNum":" 1878","line":"            .loongarch32,"},
{"lineNum":" 1879","line":"            .dxil,"},
{"lineNum":" 1880","line":"            .xtensa,"},
{"lineNum":" 1881","line":"            => return 32,"},
{"lineNum":" 1882","line":""},
{"lineNum":" 1883","line":"            .aarch64,"},
{"lineNum":" 1884","line":"            .aarch64_be,"},
{"lineNum":" 1885","line":"            .mips64,"},
{"lineNum":" 1886","line":"            .mips64el,"},
{"lineNum":" 1887","line":"            .powerpc64,"},
{"lineNum":" 1888","line":"            .powerpc64le,"},
{"lineNum":" 1889","line":"            .riscv64,"},
{"lineNum":" 1890","line":"            .x86_64,"},
{"lineNum":" 1891","line":"            .nvptx64,"},
{"lineNum":" 1892","line":"            .le64,"},
{"lineNum":" 1893","line":"            .amdil64,"},
{"lineNum":" 1894","line":"            .hsail64,"},
{"lineNum":" 1895","line":"            .spir64,"},
{"lineNum":" 1896","line":"            .wasm64,"},
{"lineNum":" 1897","line":"            .renderscript64,"},
{"lineNum":" 1898","line":"            .amdgcn,"},
{"lineNum":" 1899","line":"            .bpfel,"},
{"lineNum":" 1900","line":"            .bpfeb,"},
{"lineNum":" 1901","line":"            .sparc64,"},
{"lineNum":" 1902","line":"            .s390x,"},
{"lineNum":" 1903","line":"            .ve,"},
{"lineNum":" 1904","line":"            .spirv64,"},
{"lineNum":" 1905","line":"            .loongarch64,"},
{"lineNum":" 1906","line":"            => return 64,"},
{"lineNum":" 1907","line":""},
{"lineNum":" 1908","line":"            .sparc => return if (std.Target.sparc.featureSetHas(target.cpu.features, .v9)) 64 else 32,"},
{"lineNum":" 1909","line":"        }"},
{"lineNum":" 1910","line":"    }"},
{"lineNum":" 1911","line":""},
{"lineNum":" 1912","line":"    pub inline fn stackAlignment(target: Target) u16 {"},
{"lineNum":" 1913","line":"        return switch (target.cpu.arch) {"},
{"lineNum":" 1914","line":"            .m68k => 2,"},
{"lineNum":" 1915","line":"            .amdgcn => 4,"},
{"lineNum":" 1916","line":"            .x86 => switch (target.os.tag) {"},
{"lineNum":" 1917","line":"                .windows, .uefi => 4,"},
{"lineNum":" 1918","line":"                else => 16,"},
{"lineNum":" 1919","line":"            },"},
{"lineNum":" 1920","line":"            .arm,"},
{"lineNum":" 1921","line":"            .armeb,"},
{"lineNum":" 1922","line":"            .thumb,"},
{"lineNum":" 1923","line":"            .thumbeb,"},
{"lineNum":" 1924","line":"            .mips,"},
{"lineNum":" 1925","line":"            .mipsel,"},
{"lineNum":" 1926","line":"            .sparc,"},
{"lineNum":" 1927","line":"            .sparcel,"},
{"lineNum":" 1928","line":"            => 8,"},
{"lineNum":" 1929","line":"            .aarch64,"},
{"lineNum":" 1930","line":"            .aarch64_be,"},
{"lineNum":" 1931","line":"            .aarch64_32,"},
{"lineNum":" 1932","line":"            .bpfeb,"},
{"lineNum":" 1933","line":"            .bpfel,"},
{"lineNum":" 1934","line":"            .mips64,"},
{"lineNum":" 1935","line":"            .mips64el,"},
{"lineNum":" 1936","line":"            .riscv32,"},
{"lineNum":" 1937","line":"            .riscv64,"},
{"lineNum":" 1938","line":"            .sparc64,"},
{"lineNum":" 1939","line":"            .x86_64,"},
{"lineNum":" 1940","line":"            .ve,"},
{"lineNum":" 1941","line":"            .wasm32,"},
{"lineNum":" 1942","line":"            .wasm64,"},
{"lineNum":" 1943","line":"            => 16,"},
{"lineNum":" 1944","line":"            .powerpc64,"},
{"lineNum":" 1945","line":"            .powerpc64le,"},
{"lineNum":" 1946","line":"            => switch (target.os.tag) {"},
{"lineNum":" 1947","line":"                else => 8,"},
{"lineNum":" 1948","line":"                .linux => 16,"},
{"lineNum":" 1949","line":"            },"},
{"lineNum":" 1950","line":"            else => @divExact(target.ptrBitWidth(), 8),"},
{"lineNum":" 1951","line":"        };"},
{"lineNum":" 1952","line":"    }"},
{"lineNum":" 1953","line":""},
{"lineNum":" 1954","line":"    /// Default signedness of `char` for the native C compiler for this target"},
{"lineNum":" 1955","line":"    /// Note that char signedness is implementation-defined and many compilers provide"},
{"lineNum":" 1956","line":"    /// an option to override the default signedness e.g. GCC\'s -funsigned-char / -fsigned-char"},
{"lineNum":" 1957","line":"    pub inline fn charSignedness(target: Target) std.builtin.Signedness {"},
{"lineNum":" 1958","line":"        switch (target.cpu.arch) {"},
{"lineNum":" 1959","line":"            .aarch64,"},
{"lineNum":" 1960","line":"            .aarch64_32,"},
{"lineNum":" 1961","line":"            .aarch64_be,"},
{"lineNum":" 1962","line":"            .arm,"},
{"lineNum":" 1963","line":"            .armeb,"},
{"lineNum":" 1964","line":"            .thumb,"},
{"lineNum":" 1965","line":"            .thumbeb,"},
{"lineNum":" 1966","line":"            => return if (target.os.tag.isDarwin() or target.os.tag == .windows) .signed else .unsigned,"},
{"lineNum":" 1967","line":"            .powerpc, .powerpc64 => return if (target.os.tag.isDarwin()) .signed else .unsigned,"},
{"lineNum":" 1968","line":"            .powerpcle,"},
{"lineNum":" 1969","line":"            .powerpc64le,"},
{"lineNum":" 1970","line":"            .s390x,"},
{"lineNum":" 1971","line":"            .xcore,"},
{"lineNum":" 1972","line":"            .arc,"},
{"lineNum":" 1973","line":"            .msp430,"},
{"lineNum":" 1974","line":"            .riscv32,"},
{"lineNum":" 1975","line":"            .riscv64,"},
{"lineNum":" 1976","line":"            => return .unsigned,"},
{"lineNum":" 1977","line":"            else => return .signed,"},
{"lineNum":" 1978","line":"        }"},
{"lineNum":" 1979","line":"    }"},
{"lineNum":" 1980","line":""},
{"lineNum":" 1981","line":"    pub const CType = enum {"},
{"lineNum":" 1982","line":"        char,"},
{"lineNum":" 1983","line":"        short,"},
{"lineNum":" 1984","line":"        ushort,"},
{"lineNum":" 1985","line":"        int,"},
{"lineNum":" 1986","line":"        uint,"},
{"lineNum":" 1987","line":"        long,"},
{"lineNum":" 1988","line":"        ulong,"},
{"lineNum":" 1989","line":"        longlong,"},
{"lineNum":" 1990","line":"        ulonglong,"},
{"lineNum":" 1991","line":"        float,"},
{"lineNum":" 1992","line":"        double,"},
{"lineNum":" 1993","line":"        longdouble,"},
{"lineNum":" 1994","line":"    };"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"    pub inline fn c_type_byte_size(t: Target, c_type: CType) u16 {"},
{"lineNum":" 1997","line":"        return switch (c_type) {"},
{"lineNum":" 1998","line":"            .char,"},
{"lineNum":" 1999","line":"            .short,"},
{"lineNum":" 2000","line":"            .ushort,"},
{"lineNum":" 2001","line":"            .int,"},
{"lineNum":" 2002","line":"            .uint,"},
{"lineNum":" 2003","line":"            .long,"},
{"lineNum":" 2004","line":"            .ulong,"},
{"lineNum":" 2005","line":"            .longlong,"},
{"lineNum":" 2006","line":"            .ulonglong,"},
{"lineNum":" 2007","line":"            .float,"},
{"lineNum":" 2008","line":"            .double,"},
{"lineNum":" 2009","line":"            => @divExact(c_type_bit_size(t, c_type), 8),"},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":"            .longdouble => switch (c_type_bit_size(t, c_type)) {"},
{"lineNum":" 2012","line":"                16 => 2,"},
{"lineNum":" 2013","line":"                32 => 4,"},
{"lineNum":" 2014","line":"                64 => 8,"},
{"lineNum":" 2015","line":"                80 => @as(u16, @intCast(mem.alignForward(usize, 10, c_type_alignment(t, .longdouble)))),"},
{"lineNum":" 2016","line":"                128 => 16,"},
{"lineNum":" 2017","line":"                else => unreachable,"},
{"lineNum":" 2018","line":"            },"},
{"lineNum":" 2019","line":"        };"},
{"lineNum":" 2020","line":"    }"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"    pub inline fn c_type_bit_size(target: Target, c_type: CType) u16 {"},
{"lineNum":" 2023","line":"        switch (target.os.tag) {"},
{"lineNum":" 2024","line":"            .freestanding, .other => switch (target.cpu.arch) {"},
{"lineNum":" 2025","line":"                .msp430 => switch (c_type) {"},
{"lineNum":" 2026","line":"                    .char => return 8,"},
{"lineNum":" 2027","line":"                    .short, .ushort, .int, .uint => return 16,"},
{"lineNum":" 2028","line":"                    .float, .long, .ulong => return 32,"},
{"lineNum":" 2029","line":"                    .longlong, .ulonglong, .double, .longdouble => return 64,"},
{"lineNum":" 2030","line":"                },"},
{"lineNum":" 2031","line":"                .avr => switch (c_type) {"},
{"lineNum":" 2032","line":"                    .char => return 8,"},
{"lineNum":" 2033","line":"                    .short, .ushort, .int, .uint => return 16,"},
{"lineNum":" 2034","line":"                    .long, .ulong, .float, .double, .longdouble => return 32,"},
{"lineNum":" 2035","line":"                    .longlong, .ulonglong => return 64,"},
{"lineNum":" 2036","line":"                },"},
{"lineNum":" 2037","line":"                .tce, .tcele => switch (c_type) {"},
{"lineNum":" 2038","line":"                    .char => return 8,"},
{"lineNum":" 2039","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2040","line":"                    .int, .uint, .long, .ulong, .longlong, .ulonglong => return 32,"},
{"lineNum":" 2041","line":"                    .float, .double, .longdouble => return 32,"},
{"lineNum":" 2042","line":"                },"},
{"lineNum":" 2043","line":"                .mips64, .mips64el => switch (c_type) {"},
{"lineNum":" 2044","line":"                    .char => return 8,"},
{"lineNum":" 2045","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2046","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2047","line":"                    .long, .ulong => return if (target.abi != .gnuabin32) 64 else 32,"},
{"lineNum":" 2048","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2049","line":"                    .longdouble => return 128,"},
{"lineNum":" 2050","line":"                },"},
{"lineNum":" 2051","line":"                .x86_64 => switch (c_type) {"},
{"lineNum":" 2052","line":"                    .char => return 8,"},
{"lineNum":" 2053","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2054","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2055","line":"                    .long, .ulong => switch (target.abi) {"},
{"lineNum":" 2056","line":"                        .gnux32, .muslx32 => return 32,"},
{"lineNum":" 2057","line":"                        else => return 64,"},
{"lineNum":" 2058","line":"                    },"},
{"lineNum":" 2059","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2060","line":"                    .longdouble => return 80,"},
{"lineNum":" 2061","line":"                },"},
{"lineNum":" 2062","line":"                else => switch (c_type) {"},
{"lineNum":" 2063","line":"                    .char => return 8,"},
{"lineNum":" 2064","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2065","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2066","line":"                    .long, .ulong => return target.ptrBitWidth(),"},
{"lineNum":" 2067","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2068","line":"                    .longdouble => switch (target.cpu.arch) {"},
{"lineNum":" 2069","line":"                        .x86 => switch (target.abi) {"},
{"lineNum":" 2070","line":"                            .android => return 64,"},
{"lineNum":" 2071","line":"                            else => return 80,"},
{"lineNum":" 2072","line":"                        },"},
{"lineNum":" 2073","line":""},
{"lineNum":" 2074","line":"                        .powerpc,"},
{"lineNum":" 2075","line":"                        .powerpcle,"},
{"lineNum":" 2076","line":"                        .powerpc64,"},
{"lineNum":" 2077","line":"                        .powerpc64le,"},
{"lineNum":" 2078","line":"                        => switch (target.abi) {"},
{"lineNum":" 2079","line":"                            .musl,"},
{"lineNum":" 2080","line":"                            .musleabi,"},
{"lineNum":" 2081","line":"                            .musleabihf,"},
{"lineNum":" 2082","line":"                            .muslx32,"},
{"lineNum":" 2083","line":"                            => return 64,"},
{"lineNum":" 2084","line":"                            else => return 128,"},
{"lineNum":" 2085","line":"                        },"},
{"lineNum":" 2086","line":""},
{"lineNum":" 2087","line":"                        .riscv32,"},
{"lineNum":" 2088","line":"                        .riscv64,"},
{"lineNum":" 2089","line":"                        .aarch64,"},
{"lineNum":" 2090","line":"                        .aarch64_be,"},
{"lineNum":" 2091","line":"                        .aarch64_32,"},
{"lineNum":" 2092","line":"                        .s390x,"},
{"lineNum":" 2093","line":"                        .sparc,"},
{"lineNum":" 2094","line":"                        .sparc64,"},
{"lineNum":" 2095","line":"                        .sparcel,"},
{"lineNum":" 2096","line":"                        .wasm32,"},
{"lineNum":" 2097","line":"                        .wasm64,"},
{"lineNum":" 2098","line":"                        => return 128,"},
{"lineNum":" 2099","line":""},
{"lineNum":" 2100","line":"                        else => return 64,"},
{"lineNum":" 2101","line":"                    },"},
{"lineNum":" 2102","line":"                },"},
{"lineNum":" 2103","line":"            },"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"            .linux,"},
{"lineNum":" 2106","line":"            .freebsd,"},
{"lineNum":" 2107","line":"            .netbsd,"},
{"lineNum":" 2108","line":"            .dragonfly,"},
{"lineNum":" 2109","line":"            .openbsd,"},
{"lineNum":" 2110","line":"            .wasi,"},
{"lineNum":" 2111","line":"            .emscripten,"},
{"lineNum":" 2112","line":"            .plan9,"},
{"lineNum":" 2113","line":"            .solaris,"},
{"lineNum":" 2114","line":"            .haiku,"},
{"lineNum":" 2115","line":"            .ananas,"},
{"lineNum":" 2116","line":"            .fuchsia,"},
{"lineNum":" 2117","line":"            .minix,"},
{"lineNum":" 2118","line":"            => switch (target.cpu.arch) {"},
{"lineNum":" 2119","line":"                .msp430 => switch (c_type) {"},
{"lineNum":" 2120","line":"                    .char => return 8,"},
{"lineNum":" 2121","line":"                    .short, .ushort, .int, .uint => return 16,"},
{"lineNum":" 2122","line":"                    .long, .ulong, .float => return 32,"},
{"lineNum":" 2123","line":"                    .longlong, .ulonglong, .double, .longdouble => return 64,"},
{"lineNum":" 2124","line":"                },"},
{"lineNum":" 2125","line":"                .avr => switch (c_type) {"},
{"lineNum":" 2126","line":"                    .char => return 8,"},
{"lineNum":" 2127","line":"                    .short, .ushort, .int, .uint => return 16,"},
{"lineNum":" 2128","line":"                    .long, .ulong, .float, .double, .longdouble => return 32,"},
{"lineNum":" 2129","line":"                    .longlong, .ulonglong => return 64,"},
{"lineNum":" 2130","line":"                },"},
{"lineNum":" 2131","line":"                .tce, .tcele => switch (c_type) {"},
{"lineNum":" 2132","line":"                    .char => return 8,"},
{"lineNum":" 2133","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2134","line":"                    .int, .uint, .long, .ulong, .longlong, .ulonglong => return 32,"},
{"lineNum":" 2135","line":"                    .float, .double, .longdouble => return 32,"},
{"lineNum":" 2136","line":"                },"},
{"lineNum":" 2137","line":"                .mips64, .mips64el => switch (c_type) {"},
{"lineNum":" 2138","line":"                    .char => return 8,"},
{"lineNum":" 2139","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2140","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2141","line":"                    .long, .ulong => return if (target.abi != .gnuabin32) 64 else 32,"},
{"lineNum":" 2142","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2143","line":"                    .longdouble => if (target.os.tag == .freebsd) return 64 else return 128,"},
{"lineNum":" 2144","line":"                },"},
{"lineNum":" 2145","line":"                .x86_64 => switch (c_type) {"},
{"lineNum":" 2146","line":"                    .char => return 8,"},
{"lineNum":" 2147","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2148","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2149","line":"                    .long, .ulong => switch (target.abi) {"},
{"lineNum":" 2150","line":"                        .gnux32, .muslx32 => return 32,"},
{"lineNum":" 2151","line":"                        else => return 64,"},
{"lineNum":" 2152","line":"                    },"},
{"lineNum":" 2153","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2154","line":"                    .longdouble => return 80,"},
{"lineNum":" 2155","line":"                },"},
{"lineNum":" 2156","line":"                else => switch (c_type) {"},
{"lineNum":" 2157","line":"                    .char => return 8,"},
{"lineNum":" 2158","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2159","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2160","line":"                    .long, .ulong => return target.ptrBitWidth(),"},
{"lineNum":" 2161","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2162","line":"                    .longdouble => switch (target.cpu.arch) {"},
{"lineNum":" 2163","line":"                        .x86 => switch (target.abi) {"},
{"lineNum":" 2164","line":"                            .android => return 64,"},
{"lineNum":" 2165","line":"                            else => return 80,"},
{"lineNum":" 2166","line":"                        },"},
{"lineNum":" 2167","line":""},
{"lineNum":" 2168","line":"                        .powerpc,"},
{"lineNum":" 2169","line":"                        .powerpcle,"},
{"lineNum":" 2170","line":"                        => switch (target.abi) {"},
{"lineNum":" 2171","line":"                            .musl,"},
{"lineNum":" 2172","line":"                            .musleabi,"},
{"lineNum":" 2173","line":"                            .musleabihf,"},
{"lineNum":" 2174","line":"                            .muslx32,"},
{"lineNum":" 2175","line":"                            => return 64,"},
{"lineNum":" 2176","line":"                            else => switch (target.os.tag) {"},
{"lineNum":" 2177","line":"                                .freebsd, .netbsd, .openbsd => return 64,"},
{"lineNum":" 2178","line":"                                else => return 128,"},
{"lineNum":" 2179","line":"                            },"},
{"lineNum":" 2180","line":"                        },"},
{"lineNum":" 2181","line":""},
{"lineNum":" 2182","line":"                        .powerpc64,"},
{"lineNum":" 2183","line":"                        .powerpc64le,"},
{"lineNum":" 2184","line":"                        => switch (target.abi) {"},
{"lineNum":" 2185","line":"                            .musl,"},
{"lineNum":" 2186","line":"                            .musleabi,"},
{"lineNum":" 2187","line":"                            .musleabihf,"},
{"lineNum":" 2188","line":"                            .muslx32,"},
{"lineNum":" 2189","line":"                            => return 64,"},
{"lineNum":" 2190","line":"                            else => switch (target.os.tag) {"},
{"lineNum":" 2191","line":"                                .freebsd, .openbsd => return 64,"},
{"lineNum":" 2192","line":"                                else => return 128,"},
{"lineNum":" 2193","line":"                            },"},
{"lineNum":" 2194","line":"                        },"},
{"lineNum":" 2195","line":""},
{"lineNum":" 2196","line":"                        .riscv32,"},
{"lineNum":" 2197","line":"                        .riscv64,"},
{"lineNum":" 2198","line":"                        .aarch64,"},
{"lineNum":" 2199","line":"                        .aarch64_be,"},
{"lineNum":" 2200","line":"                        .aarch64_32,"},
{"lineNum":" 2201","line":"                        .s390x,"},
{"lineNum":" 2202","line":"                        .mips64,"},
{"lineNum":" 2203","line":"                        .mips64el,"},
{"lineNum":" 2204","line":"                        .sparc,"},
{"lineNum":" 2205","line":"                        .sparc64,"},
{"lineNum":" 2206","line":"                        .sparcel,"},
{"lineNum":" 2207","line":"                        .wasm32,"},
{"lineNum":" 2208","line":"                        .wasm64,"},
{"lineNum":" 2209","line":"                        => return 128,"},
{"lineNum":" 2210","line":""},
{"lineNum":" 2211","line":"                        else => return 64,"},
{"lineNum":" 2212","line":"                    },"},
{"lineNum":" 2213","line":"                },"},
{"lineNum":" 2214","line":"            },"},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"            .windows, .uefi => switch (target.cpu.arch) {"},
{"lineNum":" 2217","line":"                .x86 => switch (c_type) {"},
{"lineNum":" 2218","line":"                    .char => return 8,"},
{"lineNum":" 2219","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2220","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2221","line":"                    .long, .ulong => return 32,"},
{"lineNum":" 2222","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2223","line":"                    .longdouble => switch (target.abi) {"},
{"lineNum":" 2224","line":"                        .gnu, .gnuilp32, .cygnus => return 80,"},
{"lineNum":" 2225","line":"                        else => return 64,"},
{"lineNum":" 2226","line":"                    },"},
{"lineNum":" 2227","line":"                },"},
{"lineNum":" 2228","line":"                .x86_64 => switch (c_type) {"},
{"lineNum":" 2229","line":"                    .char => return 8,"},
{"lineNum":" 2230","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2231","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2232","line":"                    .long, .ulong => switch (target.abi) {"},
{"lineNum":" 2233","line":"                        .cygnus => return 64,"},
{"lineNum":" 2234","line":"                        else => return 32,"},
{"lineNum":" 2235","line":"                    },"},
{"lineNum":" 2236","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2237","line":"                    .longdouble => switch (target.abi) {"},
{"lineNum":" 2238","line":"                        .gnu, .gnuilp32, .cygnus => return 80,"},
{"lineNum":" 2239","line":"                        else => return 64,"},
{"lineNum":" 2240","line":"                    },"},
{"lineNum":" 2241","line":"                },"},
{"lineNum":" 2242","line":"                else => switch (c_type) {"},
{"lineNum":" 2243","line":"                    .char => return 8,"},
{"lineNum":" 2244","line":"                    .short, .ushort => return 16,"},
{"lineNum":" 2245","line":"                    .int, .uint, .float => return 32,"},
{"lineNum":" 2246","line":"                    .long, .ulong => return 32,"},
{"lineNum":" 2247","line":"                    .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2248","line":"                    .longdouble => return 64,"},
{"lineNum":" 2249","line":"                },"},
{"lineNum":" 2250","line":"            },"},
{"lineNum":" 2251","line":""},
{"lineNum":" 2252","line":"            .macos, .ios, .tvos, .watchos => switch (c_type) {"},
{"lineNum":" 2253","line":"                .char => return 8,"},
{"lineNum":" 2254","line":"                .short, .ushort => return 16,"},
{"lineNum":" 2255","line":"                .int, .uint, .float => return 32,"},
{"lineNum":" 2256","line":"                .long, .ulong => switch (target.cpu.arch) {"},
{"lineNum":" 2257","line":"                    .x86, .arm, .aarch64_32 => return 32,"},
{"lineNum":" 2258","line":"                    .x86_64 => switch (target.abi) {"},
{"lineNum":" 2259","line":"                        .gnux32, .muslx32 => return 32,"},
{"lineNum":" 2260","line":"                        else => return 64,"},
{"lineNum":" 2261","line":"                    },"},
{"lineNum":" 2262","line":"                    else => return 64,"},
{"lineNum":" 2263","line":"                },"},
{"lineNum":" 2264","line":"                .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2265","line":"                .longdouble => switch (target.cpu.arch) {"},
{"lineNum":" 2266","line":"                    .x86 => switch (target.abi) {"},
{"lineNum":" 2267","line":"                        .android => return 64,"},
{"lineNum":" 2268","line":"                        else => return 80,"},
{"lineNum":" 2269","line":"                    },"},
{"lineNum":" 2270","line":"                    .x86_64 => return 80,"},
{"lineNum":" 2271","line":"                    else => return 64,"},
{"lineNum":" 2272","line":"                },"},
{"lineNum":" 2273","line":"            },"},
{"lineNum":" 2274","line":""},
{"lineNum":" 2275","line":"            .nvcl, .cuda => switch (c_type) {"},
{"lineNum":" 2276","line":"                .char => return 8,"},
{"lineNum":" 2277","line":"                .short, .ushort => return 16,"},
{"lineNum":" 2278","line":"                .int, .uint, .float => return 32,"},
{"lineNum":" 2279","line":"                .long, .ulong => switch (target.cpu.arch) {"},
{"lineNum":" 2280","line":"                    .nvptx => return 32,"},
{"lineNum":" 2281","line":"                    .nvptx64 => return 64,"},
{"lineNum":" 2282","line":"                    else => return 64,"},
{"lineNum":" 2283","line":"                },"},
{"lineNum":" 2284","line":"                .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2285","line":"                .longdouble => return 64,"},
{"lineNum":" 2286","line":"            },"},
{"lineNum":" 2287","line":""},
{"lineNum":" 2288","line":"            .amdhsa, .amdpal => switch (c_type) {"},
{"lineNum":" 2289","line":"                .char => return 8,"},
{"lineNum":" 2290","line":"                .short, .ushort => return 16,"},
{"lineNum":" 2291","line":"                .int, .uint, .float => return 32,"},
{"lineNum":" 2292","line":"                .long, .ulong, .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2293","line":"                .longdouble => return 128,"},
{"lineNum":" 2294","line":"            },"},
{"lineNum":" 2295","line":""},
{"lineNum":" 2296","line":"            .opencl => switch (c_type) {"},
{"lineNum":" 2297","line":"                .char => return 8,"},
{"lineNum":" 2298","line":"                .short, .ushort => return 16,"},
{"lineNum":" 2299","line":"                .int, .uint, .float => return 32,"},
{"lineNum":" 2300","line":"                .long, .ulong, .double => return 64,"},
{"lineNum":" 2301","line":"                .longlong, .ulonglong => return 128,"},
{"lineNum":" 2302","line":"                // Note: The OpenCL specification does not guarantee a particular size for long double,"},
{"lineNum":" 2303","line":"                // but clang uses 128 bits."},
{"lineNum":" 2304","line":"                .longdouble => return 128,"},
{"lineNum":" 2305","line":"            },"},
{"lineNum":" 2306","line":""},
{"lineNum":" 2307","line":"            .ps4, .ps5 => switch (c_type) {"},
{"lineNum":" 2308","line":"                .char => return 8,"},
{"lineNum":" 2309","line":"                .short, .ushort => return 16,"},
{"lineNum":" 2310","line":"                .int, .uint, .float => return 32,"},
{"lineNum":" 2311","line":"                .long, .ulong => return 64,"},
{"lineNum":" 2312","line":"                .longlong, .ulonglong, .double => return 64,"},
{"lineNum":" 2313","line":"                .longdouble => return 80,"},
{"lineNum":" 2314","line":"            },"},
{"lineNum":" 2315","line":""},
{"lineNum":" 2316","line":"            .cloudabi,"},
{"lineNum":" 2317","line":"            .kfreebsd,"},
{"lineNum":" 2318","line":"            .lv2,"},
{"lineNum":" 2319","line":"            .zos,"},
{"lineNum":" 2320","line":"            .rtems,"},
{"lineNum":" 2321","line":"            .nacl,"},
{"lineNum":" 2322","line":"            .aix,"},
{"lineNum":" 2323","line":"            .elfiamcu,"},
{"lineNum":" 2324","line":"            .mesa3d,"},
{"lineNum":" 2325","line":"            .contiki,"},
{"lineNum":" 2326","line":"            .hermit,"},
{"lineNum":" 2327","line":"            .hurd,"},
{"lineNum":" 2328","line":"            .glsl450,"},
{"lineNum":" 2329","line":"            .vulkan,"},
{"lineNum":" 2330","line":"            .driverkit,"},
{"lineNum":" 2331","line":"            .shadermodel,"},
{"lineNum":" 2332","line":"            => @panic(\"TODO specify the C integer and float type sizes for this OS\"),"},
{"lineNum":" 2333","line":"        }"},
{"lineNum":" 2334","line":"    }"},
{"lineNum":" 2335","line":""},
{"lineNum":" 2336","line":"    pub inline fn c_type_alignment(target: Target, c_type: CType) u16 {"},
{"lineNum":" 2337","line":"        // Overrides for unusual alignments"},
{"lineNum":" 2338","line":"        switch (target.cpu.arch) {"},
{"lineNum":" 2339","line":"            .avr => return 1,"},
{"lineNum":" 2340","line":"            .x86 => switch (target.os.tag) {"},
{"lineNum":" 2341","line":"                .windows, .uefi => switch (c_type) {"},
{"lineNum":" 2342","line":"                    .longlong, .ulonglong, .double => return 8,"},
{"lineNum":" 2343","line":"                    .longdouble => switch (target.abi) {"},
{"lineNum":" 2344","line":"                        .gnu, .gnuilp32, .cygnus => return 4,"},
{"lineNum":" 2345","line":"                        else => return 8,"},
{"lineNum":" 2346","line":"                    },"},
{"lineNum":" 2347","line":"                    else => {},"},
{"lineNum":" 2348","line":"                },"},
{"lineNum":" 2349","line":"                else => {},"},
{"lineNum":" 2350","line":"            },"},
{"lineNum":" 2351","line":"            else => {},"},
{"lineNum":" 2352","line":"        }"},
{"lineNum":" 2353","line":""},
{"lineNum":" 2354","line":"        // Next-power-of-two-aligned, up to a maximum."},
{"lineNum":" 2355","line":"        return @min("},
{"lineNum":" 2356","line":"            std.math.ceilPowerOfTwoAssert(u16, (c_type_bit_size(target, c_type) + 7) / 8),"},
{"lineNum":" 2357","line":"            switch (target.cpu.arch) {"},
{"lineNum":" 2358","line":"                .arm, .armeb, .thumb, .thumbeb => switch (target.os.tag) {"},
{"lineNum":" 2359","line":"                    .netbsd => switch (target.abi) {"},
{"lineNum":" 2360","line":"                        .gnueabi,"},
{"lineNum":" 2361","line":"                        .gnueabihf,"},
{"lineNum":" 2362","line":"                        .eabi,"},
{"lineNum":" 2363","line":"                        .eabihf,"},
{"lineNum":" 2364","line":"                        .android,"},
{"lineNum":" 2365","line":"                        .musleabi,"},
{"lineNum":" 2366","line":"                        .musleabihf,"},
{"lineNum":" 2367","line":"                        => 8,"},
{"lineNum":" 2368","line":""},
{"lineNum":" 2369","line":"                        else => @as(u16, 4),"},
{"lineNum":" 2370","line":"                    },"},
{"lineNum":" 2371","line":"                    .ios, .tvos, .watchos => 4,"},
{"lineNum":" 2372","line":"                    else => 8,"},
{"lineNum":" 2373","line":"                },"},
{"lineNum":" 2374","line":""},
{"lineNum":" 2375","line":"                .msp430,"},
{"lineNum":" 2376","line":"                .avr,"},
{"lineNum":" 2377","line":"                => 2,"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"                .arc,"},
{"lineNum":" 2380","line":"                .csky,"},
{"lineNum":" 2381","line":"                .x86,"},
{"lineNum":" 2382","line":"                .xcore,"},
{"lineNum":" 2383","line":"                .dxil,"},
{"lineNum":" 2384","line":"                .loongarch32,"},
{"lineNum":" 2385","line":"                .tce,"},
{"lineNum":" 2386","line":"                .tcele,"},
{"lineNum":" 2387","line":"                .le32,"},
{"lineNum":" 2388","line":"                .amdil,"},
{"lineNum":" 2389","line":"                .hsail,"},
{"lineNum":" 2390","line":"                .spir,"},
{"lineNum":" 2391","line":"                .spirv32,"},
{"lineNum":" 2392","line":"                .kalimba,"},
{"lineNum":" 2393","line":"                .shave,"},
{"lineNum":" 2394","line":"                .renderscript32,"},
{"lineNum":" 2395","line":"                .ve,"},
{"lineNum":" 2396","line":"                .spu_2,"},
{"lineNum":" 2397","line":"                .xtensa,"},
{"lineNum":" 2398","line":"                => 4,"},
{"lineNum":" 2399","line":""},
{"lineNum":" 2400","line":"                .aarch64_32,"},
{"lineNum":" 2401","line":"                .amdgcn,"},
{"lineNum":" 2402","line":"                .amdil64,"},
{"lineNum":" 2403","line":"                .bpfel,"},
{"lineNum":" 2404","line":"                .bpfeb,"},
{"lineNum":" 2405","line":"                .hexagon,"},
{"lineNum":" 2406","line":"                .hsail64,"},
{"lineNum":" 2407","line":"                .loongarch64,"},
{"lineNum":" 2408","line":"                .m68k,"},
{"lineNum":" 2409","line":"                .mips,"},
{"lineNum":" 2410","line":"                .mipsel,"},
{"lineNum":" 2411","line":"                .sparc,"},
{"lineNum":" 2412","line":"                .sparcel,"},
{"lineNum":" 2413","line":"                .sparc64,"},
{"lineNum":" 2414","line":"                .lanai,"},
{"lineNum":" 2415","line":"                .le64,"},
{"lineNum":" 2416","line":"                .nvptx,"},
{"lineNum":" 2417","line":"                .nvptx64,"},
{"lineNum":" 2418","line":"                .r600,"},
{"lineNum":" 2419","line":"                .s390x,"},
{"lineNum":" 2420","line":"                .spir64,"},
{"lineNum":" 2421","line":"                .spirv64,"},
{"lineNum":" 2422","line":"                .renderscript64,"},
{"lineNum":" 2423","line":"                => 8,"},
{"lineNum":" 2424","line":""},
{"lineNum":" 2425","line":"                .aarch64,"},
{"lineNum":" 2426","line":"                .aarch64_be,"},
{"lineNum":" 2427","line":"                .mips64,"},
{"lineNum":" 2428","line":"                .mips64el,"},
{"lineNum":" 2429","line":"                .powerpc,"},
{"lineNum":" 2430","line":"                .powerpcle,"},
{"lineNum":" 2431","line":"                .powerpc64,"},
{"lineNum":" 2432","line":"                .powerpc64le,"},
{"lineNum":" 2433","line":"                .riscv32,"},
{"lineNum":" 2434","line":"                .riscv64,"},
{"lineNum":" 2435","line":"                .x86_64,"},
{"lineNum":" 2436","line":"                .wasm32,"},
{"lineNum":" 2437","line":"                .wasm64,"},
{"lineNum":" 2438","line":"                => 16,"},
{"lineNum":" 2439","line":"            },"},
{"lineNum":" 2440","line":"        );"},
{"lineNum":" 2441","line":"    }"},
{"lineNum":" 2442","line":""},
{"lineNum":" 2443","line":"    pub inline fn c_type_preferred_alignment(target: Target, c_type: CType) u16 {"},
{"lineNum":" 2444","line":"        // Overrides for unusual alignments"},
{"lineNum":" 2445","line":"        switch (target.cpu.arch) {"},
{"lineNum":" 2446","line":"            .arm, .armeb, .thumb, .thumbeb => switch (target.os.tag) {"},
{"lineNum":" 2447","line":"                .netbsd => switch (target.abi) {"},
{"lineNum":" 2448","line":"                    .gnueabi,"},
{"lineNum":" 2449","line":"                    .gnueabihf,"},
{"lineNum":" 2450","line":"                    .eabi,"},
{"lineNum":" 2451","line":"                    .eabihf,"},
{"lineNum":" 2452","line":"                    .android,"},
{"lineNum":" 2453","line":"                    .musleabi,"},
{"lineNum":" 2454","line":"                    .musleabihf,"},
{"lineNum":" 2455","line":"                    => {},"},
{"lineNum":" 2456","line":""},
{"lineNum":" 2457","line":"                    else => switch (c_type) {"},
{"lineNum":" 2458","line":"                        .longdouble => return 4,"},
{"lineNum":" 2459","line":"                        else => {},"},
{"lineNum":" 2460","line":"                    },"},
{"lineNum":" 2461","line":"                },"},
{"lineNum":" 2462","line":"                .ios, .tvos, .watchos => switch (c_type) {"},
{"lineNum":" 2463","line":"                    .longdouble => return 4,"},
{"lineNum":" 2464","line":"                    else => {},"},
{"lineNum":" 2465","line":"                },"},
{"lineNum":" 2466","line":"                else => {},"},
{"lineNum":" 2467","line":"            },"},
{"lineNum":" 2468","line":"            .arc => switch (c_type) {"},
{"lineNum":" 2469","line":"                .longdouble => return 4,"},
{"lineNum":" 2470","line":"                else => {},"},
{"lineNum":" 2471","line":"            },"},
{"lineNum":" 2472","line":"            .avr => switch (c_type) {"},
{"lineNum":" 2473","line":"                .char, .int, .uint, .long, .ulong, .float, .longdouble => return 1,"},
{"lineNum":" 2474","line":"                .short, .ushort => return 2,"},
{"lineNum":" 2475","line":"                .double => return 4,"},
{"lineNum":" 2476","line":"                .longlong, .ulonglong => return 8,"},
{"lineNum":" 2477","line":"            },"},
{"lineNum":" 2478","line":"            .x86 => switch (target.os.tag) {"},
{"lineNum":" 2479","line":"                .windows, .uefi => switch (c_type) {"},
{"lineNum":" 2480","line":"                    .longdouble => switch (target.abi) {"},
{"lineNum":" 2481","line":"                        .gnu, .gnuilp32, .cygnus => return 4,"},
{"lineNum":" 2482","line":"                        else => return 8,"},
{"lineNum":" 2483","line":"                    },"},
{"lineNum":" 2484","line":"                    else => {},"},
{"lineNum":" 2485","line":"                },"},
{"lineNum":" 2486","line":"                else => switch (c_type) {"},
{"lineNum":" 2487","line":"                    .longdouble => return 4,"},
{"lineNum":" 2488","line":"                    else => {},"},
{"lineNum":" 2489","line":"                },"},
{"lineNum":" 2490","line":"            },"},
{"lineNum":" 2491","line":"            else => {},"},
{"lineNum":" 2492","line":"        }"},
{"lineNum":" 2493","line":""},
{"lineNum":" 2494","line":"        // Next-power-of-two-aligned, up to a maximum."},
{"lineNum":" 2495","line":"        return @min("},
{"lineNum":" 2496","line":"            std.math.ceilPowerOfTwoAssert(u16, (c_type_bit_size(target, c_type) + 7) / 8),"},
{"lineNum":" 2497","line":"            switch (target.cpu.arch) {"},
{"lineNum":" 2498","line":"                .msp430 => @as(u16, 2),"},
{"lineNum":" 2499","line":""},
{"lineNum":" 2500","line":"                .csky,"},
{"lineNum":" 2501","line":"                .xcore,"},
{"lineNum":" 2502","line":"                .dxil,"},
{"lineNum":" 2503","line":"                .loongarch32,"},
{"lineNum":" 2504","line":"                .tce,"},
{"lineNum":" 2505","line":"                .tcele,"},
{"lineNum":" 2506","line":"                .le32,"},
{"lineNum":" 2507","line":"                .amdil,"},
{"lineNum":" 2508","line":"                .hsail,"},
{"lineNum":" 2509","line":"                .spir,"},
{"lineNum":" 2510","line":"                .spirv32,"},
{"lineNum":" 2511","line":"                .kalimba,"},
{"lineNum":" 2512","line":"                .shave,"},
{"lineNum":" 2513","line":"                .renderscript32,"},
{"lineNum":" 2514","line":"                .ve,"},
{"lineNum":" 2515","line":"                .spu_2,"},
{"lineNum":" 2516","line":"                .xtensa,"},
{"lineNum":" 2517","line":"                => 4,"},
{"lineNum":" 2518","line":""},
{"lineNum":" 2519","line":"                .arc,"},
{"lineNum":" 2520","line":"                .arm,"},
{"lineNum":" 2521","line":"                .armeb,"},
{"lineNum":" 2522","line":"                .avr,"},
{"lineNum":" 2523","line":"                .thumb,"},
{"lineNum":" 2524","line":"                .thumbeb,"},
{"lineNum":" 2525","line":"                .aarch64_32,"},
{"lineNum":" 2526","line":"                .amdgcn,"},
{"lineNum":" 2527","line":"                .amdil64,"},
{"lineNum":" 2528","line":"                .bpfel,"},
{"lineNum":" 2529","line":"                .bpfeb,"},
{"lineNum":" 2530","line":"                .hexagon,"},
{"lineNum":" 2531","line":"                .hsail64,"},
{"lineNum":" 2532","line":"                .x86,"},
{"lineNum":" 2533","line":"                .loongarch64,"},
{"lineNum":" 2534","line":"                .m68k,"},
{"lineNum":" 2535","line":"                .mips,"},
{"lineNum":" 2536","line":"                .mipsel,"},
{"lineNum":" 2537","line":"                .sparc,"},
{"lineNum":" 2538","line":"                .sparcel,"},
{"lineNum":" 2539","line":"                .sparc64,"},
{"lineNum":" 2540","line":"                .lanai,"},
{"lineNum":" 2541","line":"                .le64,"},
{"lineNum":" 2542","line":"                .nvptx,"},
{"lineNum":" 2543","line":"                .nvptx64,"},
{"lineNum":" 2544","line":"                .r600,"},
{"lineNum":" 2545","line":"                .s390x,"},
{"lineNum":" 2546","line":"                .spir64,"},
{"lineNum":" 2547","line":"                .spirv64,"},
{"lineNum":" 2548","line":"                .renderscript64,"},
{"lineNum":" 2549","line":"                => 8,"},
{"lineNum":" 2550","line":""},
{"lineNum":" 2551","line":"                .aarch64,"},
{"lineNum":" 2552","line":"                .aarch64_be,"},
{"lineNum":" 2553","line":"                .mips64,"},
{"lineNum":" 2554","line":"                .mips64el,"},
{"lineNum":" 2555","line":"                .powerpc,"},
{"lineNum":" 2556","line":"                .powerpcle,"},
{"lineNum":" 2557","line":"                .powerpc64,"},
{"lineNum":" 2558","line":"                .powerpc64le,"},
{"lineNum":" 2559","line":"                .riscv32,"},
{"lineNum":" 2560","line":"                .riscv64,"},
{"lineNum":" 2561","line":"                .x86_64,"},
{"lineNum":" 2562","line":"                .wasm32,"},
{"lineNum":" 2563","line":"                .wasm64,"},
{"lineNum":" 2564","line":"                => 16,"},
{"lineNum":" 2565","line":"            },"},
{"lineNum":" 2566","line":"        );"},
{"lineNum":" 2567","line":"    }"},
{"lineNum":" 2568","line":"};"},
{"lineNum":" 2569","line":""},
{"lineNum":" 2570","line":"test {"},
{"lineNum":" 2571","line":"    std.testing.refAllDecls(Target.Cpu.Arch);"},
{"lineNum":" 2572","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
