var data = {lines:[
{"lineNum":"    1","line":"// NOTE: file is implicitly a struct (because zig amirite!)"},
{"lineNum":"    2","line":"// therefore use is as simple and elegant and beautitful as:"},
{"lineNum":"    3","line":"// `const Ast = @import(\"ast.zig\");`"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"const std = @import(\"std\");"},
{"lineNum":"    6","line":"const Token = @import(\"lexer.zig\").Token;"},
{"lineNum":"    7","line":"const log = @import(\"log.zig\");"},
{"lineNum":"    8","line":"const utils = @import(\"utils.zig\");"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"nodes: NodeList,"},
{"lineNum":"   11","line":"allocator: std.mem.Allocator,"},
{"lineNum":"   12","line":"input: []const u8,"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"structMap: std.StringHashMap(usize),"},
{"lineNum":"   15","line":"functionMap: std.StringHashMap(usize),"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"const Ast = @This();"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// TODO: make struct already declared error more informative"},
{"lineNum":"   20","line":"pub fn mapStructs(ast: *Ast) !void {","class":"lineCov","hits":"1","order":"1164","possible_hits":"1",},
{"lineNum":"   21","line":"    const nodes = ast.nodes.items;","class":"lineCov","hits":"1","order":"1165","possible_hits":"1",},
{"lineNum":"   22","line":"    var i: usize = 0;","class":"lineCov","hits":"1","order":"1166","possible_hits":"1",},
{"lineNum":"   23","line":"    for (nodes) |node| {","class":"lineCov","hits":"3","order":"1167","possible_hits":"3",},
{"lineNum":"   24","line":"        if (node.kind == .TypeDeclaration) {","class":"lineCov","hits":"1","order":"1168","possible_hits":"1",},
{"lineNum":"   25","line":"            const ident = ast.get(node.kind.TypeDeclaration.ident);","class":"lineCov","hits":"3","order":"2258","possible_hits":"3",},
{"lineNum":"   26","line":"            const name = ident.token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2259","possible_hits":"1",},
{"lineNum":"   27","line":"            // check if the struct is already in the map"},
{"lineNum":"   28","line":"            if (ast.structMap.contains(name)) {","class":"lineCov","hits":"1","order":"2260","possible_hits":"1",},
{"lineNum":"   29","line":"                return error.StructAlreadyDeclared;","class":"lineCov","hits":"1","order":"2833","possible_hits":"1",},
{"lineNum":"   30","line":"            }"},
{"lineNum":"   31","line":"            try ast.structMap.put(name, i);","class":"linePartCov","hits":"2","order":"1169","possible_hits":"3",},
{"lineNum":"   32","line":"        }"},
{"lineNum":"   33","line":"        i += 1;","class":"linePartCov","hits":"3","order":"1170","possible_hits":"4",},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":"}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"pub fn printAst(self: *Ast) void{","class":"lineCov","hits":"1","order":"1863","possible_hits":"1",},
{"lineNum":"   38","line":"    var i: usize = 0;","class":"lineCov","hits":"1","order":"1864","possible_hits":"1",},
{"lineNum":"   39","line":"    const nodes = self.nodes.items;","class":"lineCov","hits":"1","order":"1865","possible_hits":"1",},
{"lineNum":"   40","line":"    for (nodes) |node| {","class":"lineCov","hits":"3","order":"1866","possible_hits":"3",},
{"lineNum":"   41","line":"        const kind = node.kind;","class":"lineCov","hits":"1","order":"1867","possible_hits":"1",},
{"lineNum":"   42","line":"        const token = node.token;","class":"lineCov","hits":"1","order":"1868","possible_hits":"1",},
{"lineNum":"   43","line":"        std.debug.print(\"{d}: {s} {s}\", .{i, @tagName(kind), token._range.getSubStrFromStr(self.input)});","class":"lineCov","hits":"3","order":"1869","possible_hits":"3",},
{"lineNum":"   44","line":"        switch (kind){","class":"lineCov","hits":"3","order":"1870","possible_hits":"3",},
{"lineNum":"   45","line":"            .BinaryOperation => {"},
{"lineNum":"   46","line":"                const binOp = node.kind.BinaryOperation;","class":"lineCov","hits":"2","order":"2394","possible_hits":"2",},
{"lineNum":"   47","line":"                std.debug.print(\" lhs: {any}\", .{binOp.lhs});","class":"lineCov","hits":"1","order":"2395","possible_hits":"1",},
{"lineNum":"   48","line":"                std.debug.print(\" rhs: {any}\\n\", .{binOp.rhs});","class":"lineCov","hits":"1","order":"2396","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"            },"},
{"lineNum":"   51","line":"            else => {"},
{"lineNum":"   52","line":"                std.debug.print(\"\\n\", .{});","class":"lineCov","hits":"1","order":"1871","possible_hits":"1",},
{"lineNum":"   53","line":"            },"},
{"lineNum":"   54","line":"        }"},
{"lineNum":"   55","line":"        i += 1;","class":"linePartCov","hits":"4","order":"1872","possible_hits":"5",},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":"}"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"pub fn mapFunctions(ast: *Ast) !void {","class":"lineCov","hits":"1","order":"1172","possible_hits":"1",},
{"lineNum":"   60","line":"    const nodes = ast.nodes.items;","class":"lineCov","hits":"1","order":"1173","possible_hits":"1",},
{"lineNum":"   61","line":"    var i: usize = 0;","class":"lineCov","hits":"1","order":"1174","possible_hits":"1",},
{"lineNum":"   62","line":"    for (nodes) |node| {","class":"lineCov","hits":"3","order":"1175","possible_hits":"3",},
{"lineNum":"   63","line":"        if (node.kind == .Function) {","class":"lineCov","hits":"1","order":"1176","possible_hits":"1",},
{"lineNum":"   64","line":"            const func = node.kind.Function;","class":"lineCov","hits":"3","order":"1179","possible_hits":"3",},
{"lineNum":"   65","line":"            const proto = ast.get(func.proto);","class":"lineCov","hits":"1","order":"1180","possible_hits":"1",},
{"lineNum":"   66","line":"            const name = ast.get(proto.kind.FunctionProto.name).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"3","order":"1183","possible_hits":"3",},
{"lineNum":"   67","line":"            if (ast.functionMap.contains(name)) {","class":"lineCov","hits":"1","order":"1184","possible_hits":"1",},
{"lineNum":"   68","line":"                return error.FunctionAlreadyDeclared;","class":"lineCov","hits":"1","order":"2865","possible_hits":"1",},
{"lineNum":"   69","line":"            }"},
{"lineNum":"   70","line":"            try ast.functionMap.put(name, i);","class":"linePartCov","hits":"2","order":"1177","possible_hits":"3",},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":"        i += 1;","class":"linePartCov","hits":"3","order":"1178","possible_hits":"4",},
{"lineNum":"   73","line":"    }"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"pub fn getFunctionFromName(ast: *Ast, name: []const u8) ?*const Node {","class":"lineCov","hits":"1","order":"1775","possible_hits":"1",},
{"lineNum":"   77","line":"    const index = ast.functionMap.get(name);","class":"lineCov","hits":"1","order":"1776","possible_hits":"1",},
{"lineNum":"   78","line":"    if (index) |i| {","class":"lineCov","hits":"2","order":"1788","possible_hits":"2",},
{"lineNum":"   79","line":"        return ast.get(i);","class":"lineCov","hits":"1","order":"1789","possible_hits":"1",},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":"    return null;","class":"lineCov","hits":"1","order":"2904","possible_hits":"1",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"pub fn getFunctionReturnTypeFromName(ast: *Ast, name: []const u8) ?Type {","class":"lineCov","hits":"1","order":"2449","possible_hits":"1",},
{"lineNum":"   85","line":"    const funcNode = ast.getFunctionFromName(name);","class":"lineCov","hits":"1","order":"2450","possible_hits":"1",},
{"lineNum":"   86","line":"    if (funcNode == null) {","class":"lineCov","hits":"1","order":"2451","possible_hits":"1",},
{"lineNum":"   87","line":"        return null;","class":"lineCov","hits":"1","order":"2905","possible_hits":"1",},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":"    const func = funcNode.?.kind.Function;","class":"lineCov","hits":"3","order":"2452","possible_hits":"3",},
{"lineNum":"   90","line":"    return func.getReturnType(ast);","class":"lineCov","hits":"1","order":"2453","possible_hits":"1",},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"pub fn getFunctionDeclarationTypeFromName(ast: *Ast, name: []const u8, memberName: []const u8) ?Type {","class":"lineCov","hits":"1","order":"2124","possible_hits":"1",},
{"lineNum":"   94","line":"    const funcNode = ast.getFunctionFromName(name);","class":"lineCov","hits":"1","order":"2125","possible_hits":"1",},
{"lineNum":"   95","line":"    if (funcNode == null) {","class":"lineCov","hits":"1","order":"2126","possible_hits":"1",},
{"lineNum":"   96","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"    const functionBody = funcNode.?.kind.Function.getBody(ast);","class":"lineCov","hits":"3","order":"2127","possible_hits":"3",},
{"lineNum":"   99","line":"    if (functionBody.declarations == null) {","class":"lineCov","hits":"1","order":"2128","possible_hits":"1",},
{"lineNum":"  100","line":"        return null;","class":"lineCov","hits":"1","order":"2725","possible_hits":"1",},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":"    const declarations = ast.get(functionBody.declarations.?);","class":"lineCov","hits":"3","order":"2129","possible_hits":"3",},
{"lineNum":"  103","line":"    return declarations.kind.LocalDeclarations.getMemberType(ast, memberName);","class":"lineCov","hits":"2","order":"2130","possible_hits":"2",},
{"lineNum":"  104","line":"}"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"pub fn getStructNodeFromName(ast: *Ast, name: []const u8) ?*const Node {","class":"lineCov","hits":"1","order":"2269","possible_hits":"1",},
{"lineNum":"  107","line":"    const index = ast.structMap.get(name);","class":"lineCov","hits":"1","order":"2270","possible_hits":"1",},
{"lineNum":"  108","line":"    if (index) |i| {","class":"lineCov","hits":"2","order":"2271","possible_hits":"2",},
{"lineNum":"  109","line":"        return ast.get(i);","class":"lineCov","hits":"1","order":"2272","possible_hits":"1",},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"pub fn getStructFieldType(ast: *Ast, structName: []const u8, fieldName: []const u8) ?Type {","class":"lineCov","hits":"1","order":"2276","possible_hits":"1",},
{"lineNum":"  117","line":"    const structNode = ast.getStructNodeFromName(structName);","class":"lineCov","hits":"1","order":"2277","possible_hits":"1",},
{"lineNum":"  118","line":"    if (structNode == null) {","class":"lineCov","hits":"1","order":"2278","possible_hits":"1",},
{"lineNum":"  119","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":"    const decls = ast.get(structNode.?.kind.TypeDeclaration.declarations);","class":"lineCov","hits":"3","order":"2279","possible_hits":"3",},
{"lineNum":"  122","line":"    ast.printAst();","class":"lineCov","hits":"1","order":"2280","possible_hits":"1",},
{"lineNum":"  123","line":"    return decls.kind.StructFieldDeclarations.getMemberType(ast, fieldName);","class":"lineCov","hits":"2","order":"2281","possible_hits":"2",},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"pub fn getDeclarationGlobalFromName(ast: *Ast, name: []const u8) ?Type {","class":"lineCov","hits":"1","order":"2156","possible_hits":"1",},
{"lineNum":"  127","line":"    const nodes = ast.nodes.items;","class":"lineCov","hits":"1","order":"2157","possible_hits":"1",},
{"lineNum":"  128","line":"    for (nodes) |node| {","class":"lineCov","hits":"3","order":"2158","possible_hits":"3",},
{"lineNum":"  129","line":"        if (node.kind == .ProgramDeclarations) {","class":"lineCov","hits":"1","order":"2159","possible_hits":"1",},
{"lineNum":"  130","line":"            const decls = node.kind.ProgramDeclarations.declarations;","class":"lineCov","hits":"3","order":"2161","possible_hits":"3",},
{"lineNum":"  131","line":"            if (decls != null) {","class":"lineCov","hits":"1","order":"2162","possible_hits":"1",},
{"lineNum":"  132","line":"                const localDecls = ast.get(decls.?).kind.LocalDeclarations;","class":"lineCov","hits":"3","order":"2698","possible_hits":"3",},
{"lineNum":"  133","line":"                return localDecls.getMemberType(ast, name);","class":"lineCov","hits":"6","order":"2160","possible_hits":"6",},
{"lineNum":"  134","line":"            }"},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"    return null;","class":"lineCov","hits":"1","order":"2163","possible_hits":"1",},
{"lineNum":"  138","line":"}"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"pub fn init(alloc: std.mem.Allocator, nodes: NodeList, input: []const u8) !Ast {","class":"lineCov","hits":"1","order":"1159","possible_hits":"1",},
{"lineNum":"  141","line":"    var AST = Ast{","class":"lineCov","hits":"1","order":"1160","possible_hits":"1",},
{"lineNum":"  142","line":"        .nodes = nodes,"},
{"lineNum":"  143","line":"        .allocator = alloc,"},
{"lineNum":"  144","line":"        .input = input,"},
{"lineNum":"  145","line":"        .structMap = std.StringHashMap(usize).init(alloc),","class":"lineCov","hits":"1","order":"1161","possible_hits":"1",},
{"lineNum":"  146","line":"        .functionMap = std.StringHashMap(usize).init(alloc),","class":"lineCov","hits":"1","order":"1162","possible_hits":"1",},
{"lineNum":"  147","line":"    };"},
{"lineNum":"  148","line":"    try AST.mapStructs();","class":"lineCov","hits":"1","order":"1163","possible_hits":"1",},
{"lineNum":"  149","line":"    try AST.mapFunctions();","class":"lineCov","hits":"1","order":"1171","possible_hits":"1",},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    return AST;","class":"lineCov","hits":"1","order":"1194","possible_hits":"1",},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"pub fn initFromParser(parser: @import(\"parser.zig\").Parser) !Ast {","class":"lineCov","hits":"1","order":"1154","possible_hits":"1",},
{"lineNum":"  155","line":"    const nodes = parser.ast;","class":"lineCov","hits":"1","order":"1155","possible_hits":"1",},
{"lineNum":"  156","line":"    const alloc = parser.allocator;","class":"lineCov","hits":"1","order":"1156","possible_hits":"1",},
{"lineNum":"  157","line":"    const input = parser.input;","class":"lineCov","hits":"1","order":"1157","possible_hits":"1",},
{"lineNum":"  158","line":"    return try Ast.init(alloc, nodes, input);","class":"lineCov","hits":"1","order":"1158","possible_hits":"1",},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"pub const NodeList = std.ArrayList(Node);"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"pub const Node = struct {"},
{"lineNum":"  164","line":"    kind: Kind,"},
{"lineNum":"  165","line":"    token: Token,"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    // The parser is responsible for taking the tokens and creating an abstract syntax tree"},
{"lineNum":"  168","line":"    pub const Kind = union(enum) {"},
{"lineNum":"  169","line":"        Program: struct {"},
{"lineNum":"  170","line":"            /// Pointer to `ProgramDeclarations`"},
{"lineNum":"  171","line":"            /// The index itself is never null, however if there are no globals,"},
{"lineNum":"  172","line":"            /// or type declarations then both fields in the ProgramDeclarations"},
{"lineNum":"  173","line":"            /// node will be null"},
{"lineNum":"  174","line":"            declarations: Ref(.ProgramDeclarations),"},
{"lineNum":"  175","line":"            functions: Ref(.Functions),"},
{"lineNum":"  176","line":"        },"},
{"lineNum":"  177","line":"        /// ProgramDeclarations is a list of type declarations"},
{"lineNum":"  178","line":"        /// and global variable declarations"},
{"lineNum":"  179","line":"        ProgramDeclarations: struct {"},
{"lineNum":"  180","line":"            types: ?Ref(.Types) = null,"},
{"lineNum":"  181","line":"            declarations: ?Ref(.LocalDeclarations) = null,"},
{"lineNum":"  182","line":"        },"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        /// The top level global type declarations list"},
{"lineNum":"  185","line":"        Types: struct {"},
{"lineNum":"  186","line":"            /// index of first type declaration"},
{"lineNum":"  187","line":"            /// Pointer to `TypeDeclaration`"},
{"lineNum":"  188","line":"            firstType: Ref(.TypeDeclaration),"},
{"lineNum":"  189","line":"            /// When null, only one type declaration"},
{"lineNum":"  190","line":"            /// Pointer to `TypeDeclaration`"},
{"lineNum":"  191","line":"            lastType: ?Ref(.TypeDeclaration) = null,"},
{"lineNum":"  192","line":"        },"},
{"lineNum":"  193","line":"        Type: struct {"},
{"lineNum":"  194","line":"            /// The kind of the type is either a pointer to the `StructType`"},
{"lineNum":"  195","line":"            /// Node in the case of a struct or the primitive"},
{"lineNum":"  196","line":"            /// `bool` or `int` type"},
{"lineNum":"  197","line":"            kind: RefOneOf(.{"},
{"lineNum":"  198","line":"                .BoolType,"},
{"lineNum":"  199","line":"                .IntType,"},
{"lineNum":"  200","line":"                .StructType,"},
{"lineNum":"  201","line":"            }),"},
{"lineNum":"  202","line":"            /// when kind is `StructType` points to the idenfifier"},
{"lineNum":"  203","line":"            /// of the struct"},
{"lineNum":"  204","line":"            structIdentifier: ?Ref(.Identifier) = null,"},
{"lineNum":"  205","line":"        },"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        BoolType,"},
{"lineNum":"  208","line":"        IntType,"},
{"lineNum":"  209","line":"        StructType,"},
{"lineNum":"  210","line":"        Void,"},
{"lineNum":"  211","line":"        Read,"},
{"lineNum":"  212","line":"        Identifier,"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"        /// Declaring a type, NOTE: always a struct"},
{"lineNum":"  215","line":"        TypeDeclaration: struct {"},
{"lineNum":"  216","line":"            /// The struct name"},
{"lineNum":"  217","line":"            /// pointer to `Identifier`"},
{"lineNum":"  218","line":"            ident: Ref(.Identifier),"},
{"lineNum":"  219","line":"            /// The fields of the struct"},
{"lineNum":"  220","line":"            declarations: Ref(.StructFieldDeclarations),"},
{"lineNum":"  221","line":"        },"},
{"lineNum":"  222","line":"        StructFieldDeclarations: struct {"},
{"lineNum":"  223","line":"            /// index of first declaration"},
{"lineNum":"  224","line":"            /// pointer to `TypedIdentifier`"},
{"lineNum":"  225","line":"            firstDecl: Ref(.TypedIdentifier),"},
{"lineNum":"  226","line":"            /// When null, only one declaration"},
{"lineNum":"  227","line":"            /// pointer to `TypedIdentifier`"},
{"lineNum":"  228","line":"            lastDecl: ?Ref(.TypedIdentifier) = null,"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"            const Self = @This();"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"            fn is_empty(self: Self) bool {"},
{"lineNum":"  233","line":"                return self.firstDecl == null and self.lastDecl == null;"},
{"lineNum":"  234","line":"            }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"            //Ben you will hate this :D"},
{"lineNum":"  237","line":"            fn getMemberType(self: Self, ast: *Ast, memberName: []const u8) ?Type {","class":"lineCov","hits":"1","order":"2282","possible_hits":"1",},
{"lineNum":"  238","line":"                const last = self.lastDecl orelse self.firstDecl + 1;","class":"lineCov","hits":"2","order":"2283","possible_hits":"2",},
{"lineNum":"  239","line":"                var iter: ?usize = self.firstDecl;","class":"lineCov","hits":"1","order":"2284","possible_hits":"1",},
{"lineNum":"  240","line":"                while(iter != null){","class":"lineCov","hits":"1","order":"2285","possible_hits":"1",},
{"lineNum":"  241","line":"                    if( iter.? > last){","class":"lineCov","hits":"2","order":"2286","possible_hits":"2",},
{"lineNum":"  242","line":"                        break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"                    }"},
{"lineNum":"  244","line":"                    const decl = ast.get(iter.?).kind.TypedIdentifier;","class":"lineCov","hits":"3","order":"2287","possible_hits":"3",},
{"lineNum":"  245","line":"                    const name = decl.getName(ast);","class":"lineCov","hits":"1","order":"2288","possible_hits":"1",},
{"lineNum":"  246","line":"                    if (std.mem.eql(u8, name, memberName)) {","class":"lineCov","hits":"1","order":"2289","possible_hits":"1",},
{"lineNum":"  247","line":"                        return decl.getType(ast);","class":"lineCov","hits":"1","order":"2290","possible_hits":"1",},
{"lineNum":"  248","line":"                    }"},
{"lineNum":"  249","line":"                    iter = ast.findIndexWithin(.TypedIdentifier, iter.?+1, last + 1);","class":"lineCov","hits":"4","order":"2309","possible_hits":"4",},
{"lineNum":"  250","line":"                }"},
{"lineNum":"  251","line":"                return null;","class":"lineCov","hits":"1","order":"2310","possible_hits":"1",},
{"lineNum":"  252","line":"            }"},
{"lineNum":"  253","line":"        },"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"        ///////////////"},
{"lineNum":"  256","line":"        // FUNCTIONS //"},
{"lineNum":"  257","line":"        ///////////////"},
{"lineNum":"  258","line":"        Functions: struct {"},
{"lineNum":"  259","line":"            firstFunc: Ref(.Function),"},
{"lineNum":"  260","line":"            lastFunc: ?Ref(.Function) = null,"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"            const Self = @This();"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"            fn is_empty(self: Self) bool {"},
{"lineNum":"  265","line":"                return self.firstFunc == null and self.lastFunc == null;"},
{"lineNum":"  266","line":"            }"},
{"lineNum":"  267","line":"        },"},
{"lineNum":"  268","line":"        Function: FunctionType,"},
{"lineNum":"  269","line":"        /// A helper for traversing later, to constrain the search and include all"},
{"lineNum":"  270","line":"        /// nodes in the function, even if it only has one (with a nested subtree) statement"},
{"lineNum":"  271","line":"        FunctionEnd,"},
{"lineNum":"  272","line":"        ArgumentEnd,"},
{"lineNum":"  273","line":"        /// Declaration of a function, i.e. all info related to a function"},
{"lineNum":"  274","line":"        /// except the body"},
{"lineNum":"  275","line":"        FunctionProto: FunctionProtoType,"},
{"lineNum":"  276","line":"        Parameters: struct {"},
{"lineNum":"  277","line":"            /// Pointer to `TypedIdentifier`"},
{"lineNum":"  278","line":"            firstParam: ?Ref(.TypedIdentifier) = null,"},
{"lineNum":"  279","line":"            /// When null, only one parameter"},
{"lineNum":"  280","line":"            /// Pointer to `TypedIdentifier`"},
{"lineNum":"  281","line":"            lastParam: ?Ref(.TypedIdentifier) = null,"},
{"lineNum":"  282","line":"        },"},
{"lineNum":"  283","line":"        ReturnType: ReturnTypeType,"},
{"lineNum":"  284","line":"        FunctionBody: FunctionBodyType,"},
{"lineNum":"  285","line":"        /// Declarations within a function, or global declarations"},
{"lineNum":"  286","line":"        LocalDeclarations: struct {"},
{"lineNum":"  287","line":"            /// Pointer to `TypedIdentifier`"},
{"lineNum":"  288","line":"            firstDecl: Ref(.TypedIdentifier),"},
{"lineNum":"  289","line":"            // When null, only one declaration"},
{"lineNum":"  290","line":"            // Pointer to `TypedIdentifier`"},
{"lineNum":"  291","line":"            lastDecl: ?Ref(.TypedIdentifier) = null,"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"            const Self = @This();"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"            fn is_empty(self: Self) bool {"},
{"lineNum":"  296","line":"                return self.firstDecl == null and self.lastDecl == null;"},
{"lineNum":"  297","line":"            }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"            fn getMemberType(self: Self, ast: *Ast, memberName: []const u8) ?Type {","class":"lineCov","hits":"1","order":"2131","possible_hits":"1",},
{"lineNum":"  300","line":"                const last = self.lastDecl orelse self.firstDecl + 1;","class":"lineCov","hits":"2","order":"2132","possible_hits":"2",},
{"lineNum":"  301","line":"                var iter: ?usize = self.firstDecl;","class":"lineCov","hits":"1","order":"2133","possible_hits":"1",},
{"lineNum":"  302","line":"                while(iter != null){","class":"lineCov","hits":"1","order":"2134","possible_hits":"1",},
{"lineNum":"  303","line":"                    if( iter.? > last){","class":"lineCov","hits":"2","order":"2135","possible_hits":"2",},
{"lineNum":"  304","line":"                        break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"                    }"},
{"lineNum":"  306","line":"                    std.debug.print(\"iter={d} last={d}\\n\", .{iter.?, last});","class":"lineCov","hits":"3","order":"2136","possible_hits":"3",},
{"lineNum":"  307","line":"                    const decl = ast.get(iter.?).kind.TypedIdentifier;","class":"lineCov","hits":"3","order":"2137","possible_hits":"3",},
{"lineNum":"  308","line":"                    const name = decl.getName(ast);","class":"lineCov","hits":"1","order":"2138","possible_hits":"1",},
{"lineNum":"  309","line":"                    if (std.mem.eql(u8, name, memberName)) {","class":"lineCov","hits":"1","order":"2144","possible_hits":"1",},
{"lineNum":"  310","line":"                        return decl.getType(ast);","class":"lineCov","hits":"1","order":"2145","possible_hits":"1",},
{"lineNum":"  311","line":"                    }"},
{"lineNum":"  312","line":"                    iter = ast.findIndexWithin(.TypedIdentifier, iter.?+1, last + 1);","class":"lineCov","hits":"4","order":"2421","possible_hits":"4",},
{"lineNum":"  313","line":"                }"},
{"lineNum":"  314","line":"                return null;","class":"lineCov","hits":"1","order":"2699","possible_hits":"1",},
{"lineNum":"  315","line":"            }"},
{"lineNum":"  316","line":"        },"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"        TypedIdentifier: TypedIdentifierType,"},
{"lineNum":"  319","line":"        /// An alias for TypedIdentifier. No actual differences, just what nodes"},
{"lineNum":"  320","line":"        /// we can expect they refer too. I.e. we don\'t have to check for `ReturnType`"},
{"lineNum":"  321","line":"        /// node when working on the type referenced by TypedIdentifier"},
{"lineNum":"  322","line":"        ReturnTypedIdentifier: ReturnTypedIdentifierType,"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"        StatementList: struct {"},
{"lineNum":"  325","line":"            /// Pointer to `Statement`"},
{"lineNum":"  326","line":"            firstStatement: Ref(.Statement),"},
{"lineNum":"  327","line":"            /// Pointer to `Statement`"},
{"lineNum":"  328","line":"            /// null if only one statement"},
{"lineNum":"  329","line":"            lastStatement: ?Ref(.Statement) = null,"},
{"lineNum":"  330","line":"        },"},
{"lineNum":"  331","line":"        /// Statement holds only one field, the index of the actual statement"},
{"lineNum":"  332","line":"        /// it is still usefull, however, as the possible statements are vast,"},
{"lineNum":"  333","line":"        /// and therefore iterating over them is much simpler if we can just"},
{"lineNum":"  334","line":"        /// find the next `Statement` node and follow the subtree"},
{"lineNum":"  335","line":"        Statement: struct {"},
{"lineNum":"  336","line":"            /// Pointer to Block | Assignment | Print | PrintLn | ConditionalIf | ConditionalIfElse | While | Delete | Return | Invocation"},
{"lineNum":"  337","line":"            statement: RefOneOf(.{"},
{"lineNum":"  338","line":"                .Block,"},
{"lineNum":"  339","line":"                .Assignment,"},
{"lineNum":"  340","line":"                .Print,"},
{"lineNum":"  341","line":"                .ConditionalIf,"},
{"lineNum":"  342","line":"                .While,"},
{"lineNum":"  343","line":"                .Delete,"},
{"lineNum":"  344","line":"                .Return,"},
{"lineNum":"  345","line":"                .Invocation,"},
{"lineNum":"  346","line":"            }),"},
{"lineNum":"  347","line":"            finalIndex: usize,"},
{"lineNum":"  348","line":"        },"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"        Block: BlockType,"},
{"lineNum":"  351","line":"        Assignment: struct {"},
{"lineNum":"  352","line":"            lhs: ?Ref(.LValue) = null,"},
{"lineNum":"  353","line":"            rhs: ?RefOneOf(.{ .Expression, .Read }) = null,"},
{"lineNum":"  354","line":"        },"},
{"lineNum":"  355","line":"        Print: struct {"},
{"lineNum":"  356","line":"            /// The expression to print"},
{"lineNum":"  357","line":"            expr: Ref(.Expression),"},
{"lineNum":"  358","line":"            /// Whether the print statement has an endl"},
{"lineNum":"  359","line":"            hasEndl: bool,"},
{"lineNum":"  360","line":"        },"},
{"lineNum":"  361","line":"        ConditionalIf: ConditionalIfType,"},
{"lineNum":"  362","line":"        ConditionalIfElse: struct {"},
{"lineNum":"  363","line":"            ifBlock: Ref(.Block),"},
{"lineNum":"  364","line":"            elseBlock: Ref(.Block),"},
{"lineNum":"  365","line":"        },"},
{"lineNum":"  366","line":"        While: struct {"},
{"lineNum":"  367","line":"            /// The condition expression to check"},
{"lineNum":"  368","line":"            cond: Ref(.Expression),"},
{"lineNum":"  369","line":"            /// The block of code to execute"},
{"lineNum":"  370","line":"            block: Ref(.Block),"},
{"lineNum":"  371","line":"        },"},
{"lineNum":"  372","line":"        Delete: struct {"},
{"lineNum":"  373","line":"            /// the expression to delete"},
{"lineNum":"  374","line":"            expr: Ref(.Expression),"},
{"lineNum":"  375","line":"        },"},
{"lineNum":"  376","line":"        Return: ReturnExprType,"},
{"lineNum":"  377","line":"        Invocation: struct {"},
{"lineNum":"  378","line":"            funcName: Ref(.Identifier),"},
{"lineNum":"  379","line":"            /// null if no arguments"},
{"lineNum":"  380","line":"            args: ?Ref(.Arguments) = null,"},
{"lineNum":"  381","line":"        },"},
{"lineNum":"  382","line":"        LValue: struct {"},
{"lineNum":"  383","line":"            /// The first ident in the chain"},
{"lineNum":"  384","line":"            /// Pointer to `Identifier`"},
{"lineNum":"  385","line":"            ident: Ref(.Identifier),"},
{"lineNum":"  386","line":"            /// Pointer to `SelectorChain` (`{\'.\'id}*`)"},
{"lineNum":"  387","line":"            /// null if no selectors"},
{"lineNum":"  388","line":"            chain: ?Ref(.SelectorChain) = null,"},
{"lineNum":"  389","line":"            // TODO: for adding the int_array access this will need to be changed"},
{"lineNum":"  390","line":"        },"},
{"lineNum":"  391","line":"        Expression: ExpressionType,"},
{"lineNum":"  392","line":"        BinaryOperation: struct {"},
{"lineNum":"  393","line":"            // lhs, rhs actually make sense!"},
{"lineNum":"  394","line":"            // token points to operator go look there"},
{"lineNum":"  395","line":"            lhs: ?Ref(.Expression) = null,"},
{"lineNum":"  396","line":"            rhs: ?Ref(.Expression) = null,"},
{"lineNum":"  397","line":"        },"},
{"lineNum":"  398","line":"        UnaryOperation: struct {"},
{"lineNum":"  399","line":"            // token says what unary it is"},
{"lineNum":"  400","line":"            // go look there"},
{"lineNum":"  401","line":"            on: Ref(.Expression),"},
{"lineNum":"  402","line":"        },"},
{"lineNum":"  403","line":"        Selector: struct {"},
{"lineNum":"  404","line":"            /// Pointer to `Factor`"},
{"lineNum":"  405","line":"            factor: Ref(.Factor),"},
{"lineNum":"  406","line":"            /// Pointer to `SelectorChain`"},
{"lineNum":"  407","line":"            chain: ?Ref(.SelectorChain) = null,"},
{"lineNum":"  408","line":"        },"},
{"lineNum":"  409","line":"        /// A chain of `.ident` selectors"},
{"lineNum":"  410","line":"        SelectorChain: struct {"},
{"lineNum":"  411","line":"            ident: Ref(.Identifier),"},
{"lineNum":"  412","line":"            /// Pointer to `SelectorChain`"},
{"lineNum":"  413","line":"            /// null if last in chain"},
{"lineNum":"  414","line":"            next: ?Ref(.SelectorChain) = null,"},
{"lineNum":"  415","line":"        },"},
{"lineNum":"  416","line":"        // FIXME: remove Factor node and just use `.factor`"},
{"lineNum":"  417","line":"        // We never iterate over a list of Factors like we do with Statements,"},
{"lineNum":"  418","line":"        // so it is not necessary to have the top level node indicating the"},
{"lineNum":"  419","line":"        // start of a new subtree as there is with statements"},
{"lineNum":"  420","line":"        Factor: struct {"},
{"lineNum":"  421","line":"            /// Pointer to `Number` | `True` | `False` | `New` | `Null` | `Identifier` | `Expression`"},
{"lineNum":"  422","line":"            factor: RefOneOf(.{"},
{"lineNum":"  423","line":"                .Number,"},
{"lineNum":"  424","line":"                .True,"},
{"lineNum":"  425","line":"                .False,"},
{"lineNum":"  426","line":"                .New,"},
{"lineNum":"  427","line":"                .Null,"},
{"lineNum":"  428","line":"                .Identifier,"},
{"lineNum":"  429","line":"                .Expression,"},
{"lineNum":"  430","line":"                .Invocation,"},
{"lineNum":"  431","line":"            }),"},
{"lineNum":"  432","line":"        },"},
{"lineNum":"  433","line":"        Arguments: struct {"},
{"lineNum":"  434","line":"            /// Pointer to `Expression`"},
{"lineNum":"  435","line":"            firstArg: Ref(.Expression),"},
{"lineNum":"  436","line":"            /// Pointer to `Expression`"},
{"lineNum":"  437","line":"            /// null if only one argument"},
{"lineNum":"  438","line":"            lastArg: ?Ref(.Expression) = null,"},
{"lineNum":"  439","line":"        },"},
{"lineNum":"  440","line":"        /// A number literal, token points to value"},
{"lineNum":"  441","line":"        Number,"},
{"lineNum":"  442","line":"        /// keyword `true`"},
{"lineNum":"  443","line":"        True,"},
{"lineNum":"  444","line":"        /// keyword `false`"},
{"lineNum":"  445","line":"        False,"},
{"lineNum":"  446","line":"        New: struct {"},
{"lineNum":"  447","line":"            /// pointer to the identifier being allocated"},
{"lineNum":"  448","line":"            ident: Ref(.Identifier),"},
{"lineNum":"  449","line":"        },"},
{"lineNum":"  450","line":"        /// keyword `null`"},
{"lineNum":"  451","line":"        Null,"},
{"lineNum":"  452","line":"        /// This is a special node that is used to reserve space for the AST"},
{"lineNum":"  453","line":"        /// specifically for Expression-s and below!"},
{"lineNum":"  454","line":"        /// NOTE: This should be skipped when analyzing the AST"},
{"lineNum":"  455","line":"        // TODO: make the tag for this zero so its prty"},
{"lineNum":"  456","line":"        BackfillReserve,"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"        pub const FunctionType = struct {"},
{"lineNum":"  459","line":"            /// Pointer to `FunctionProto`"},
{"lineNum":"  460","line":"            proto: Ref(.FunctionProto),"},
{"lineNum":"  461","line":"            /// pointer to `FunctionBody`"},
{"lineNum":"  462","line":"            body: Ref(.FunctionBody),"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"            pub const Self = @This();"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"            fn getProto(self: *const Self, ast: *const Ast) FunctionProtoType {","class":"lineCov","hits":"1","order":"1556","possible_hits":"1",},
{"lineNum":"  467","line":"                return ast.get(self.proto).kind.FunctionProto;","class":"lineCov","hits":"1","order":"1557","possible_hits":"1",},
{"lineNum":"  468","line":"            }"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"            pub fn getName(self: *const Self, ast: *const Ast) []const u8 {","class":"lineCov","hits":"1","order":"1228","possible_hits":"1",},
{"lineNum":"  471","line":"                const protoNode = ast.get(self.proto);","class":"lineCov","hits":"1","order":"1229","possible_hits":"1",},
{"lineNum":"  472","line":"                const nameNode = ast.get(protoNode.kind.FunctionProto.name);","class":"lineCov","hits":"2","order":"1230","possible_hits":"2",},
{"lineNum":"  473","line":"                const name = nameNode.token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"1231","possible_hits":"1",},
{"lineNum":"  474","line":"                return name;","class":"lineCov","hits":"1","order":"1232","possible_hits":"1",},
{"lineNum":"  475","line":"            }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"            /// Returns the return type for this function"},
{"lineNum":"  478","line":"            /// null if it is void"},
{"lineNum":"  479","line":"            pub fn getReturnType(self: *const Self, ast: *const Ast) ?Type {","class":"lineCov","hits":"1","order":"1554","possible_hits":"1",},
{"lineNum":"  480","line":"                const proto = self.getProto(ast);","class":"lineCov","hits":"1","order":"1555","possible_hits":"1",},
{"lineNum":"  481","line":"                return proto.getReturnType(ast);","class":"lineCov","hits":"1","order":"1558","possible_hits":"1",},
{"lineNum":"  482","line":"            }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"            pub fn getBody(self: *const Self, ast: *const Ast) FunctionBodyType {","class":"lineCov","hits":"1","order":"1570","possible_hits":"1",},
{"lineNum":"  485","line":"                return ast.get(self.body).*.kind.FunctionBody;","class":"lineCov","hits":"1","order":"1571","possible_hits":"1",},
{"lineNum":"  486","line":"            }"},
{"lineNum":"  487","line":"        };"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"        pub const FunctionProtoType = struct {"},
{"lineNum":"  490","line":"            /// Pointer to `ReturnTypedIdentifier` where `ident` is the function name"},
{"lineNum":"  491","line":"            /// and `type` is the return type of the function"},
{"lineNum":"  492","line":"            name: Ref(.ReturnTypedIdentifier),"},
{"lineNum":"  493","line":"            /// Pointer to `Parameters` node"},
{"lineNum":"  494","line":"            /// null if no parameters"},
{"lineNum":"  495","line":"            parameters: ?Ref(.Parameters) = null,"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"            const Self = @This();"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"            pub fn getReturnType(self: Self, ast: *const Ast) ?Type {","class":"lineCov","hits":"1","order":"1559","possible_hits":"1",},
{"lineNum":"  500","line":"                const identNode: ReturnTypedIdentifierType = ast.get(self.name).kind.ReturnTypedIdentifier;","class":"lineCov","hits":"2","order":"1560","possible_hits":"2",},
{"lineNum":"  501","line":"                return identNode.getType(ast);","class":"lineCov","hits":"1","order":"1561","possible_hits":"1",},
{"lineNum":"  502","line":"            }"},
{"lineNum":"  503","line":"        };"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"        pub const ReturnTypeType = struct {"},
{"lineNum":"  506","line":"            /// Pointer to `Type` node"},
{"lineNum":"  507","line":"            /// null if `void` return type"},
{"lineNum":"  508","line":"            type: ?Ref(.Type) = null,"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"            const Self = @This();"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"            fn isVoid(self: Self) bool {","class":"lineCov","hits":"1","order":"1566","possible_hits":"1",},
{"lineNum":"  513","line":"                return self.type == null;","class":"lineCov","hits":"1","order":"1567","possible_hits":"1",},
{"lineNum":"  514","line":"            }"},
{"lineNum":"  515","line":"        };"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        pub const ReturnExprType = struct {"},
{"lineNum":"  518","line":"            /// The expression to return"},
{"lineNum":"  519","line":"            /// null if is `return;`"},
{"lineNum":"  520","line":"            expr: ?Ref(.Expression) = null,"},
{"lineNum":"  521","line":"        };"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"        pub const FunctionBodyType = struct {"},
{"lineNum":"  524","line":"            /// Pointer to `LocalDeclarations`"},
{"lineNum":"  525","line":"            /// null if no local declarations"},
{"lineNum":"  526","line":"            declarations: ?Ref(.LocalDeclarations) = null,"},
{"lineNum":"  527","line":"            /// Pointer to `StatementList`"},
{"lineNum":"  528","line":"            /// null if function has empty body"},
{"lineNum":"  529","line":"            statements: ?Ref(.StatementList) = null,"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"            const Self = @This();"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"            pub const ReturnsIter = struct {"},
{"lineNum":"  534","line":"                ast: *const Ast,"},
{"lineNum":"  535","line":"                i: usize,"},
{"lineNum":"  536","line":"                last: usize,"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"                const IterSelf = @This();"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"                /// @breif: Get the next return statement in the function"},
{"lineNum":"  541","line":"                pub fn next(self: *IterSelf) ?ReturnExprType {","class":"lineCov","hits":"1","order":"1583","possible_hits":"1",},
{"lineNum":"  542","line":"                    if (self.i > self.last) {","class":"lineCov","hits":"1","order":"1584","possible_hits":"1",},
{"lineNum":"  543","line":"                        return null;","class":"lineCov","hits":"1","order":"3242","possible_hits":"1",},
{"lineNum":"  544","line":"                    }"},
{"lineNum":"  545","line":"                    const nodeIndex = self.ast.findIndex(.Return, self.i);","class":"lineCov","hits":"1","order":"1585","possible_hits":"1",},
{"lineNum":"  546","line":"                    if (nodeIndex) |i| {","class":"lineCov","hits":"2","order":"1586","possible_hits":"2",},
{"lineNum":"  547","line":"                        const node = self.ast.nodes.items[i];","class":"lineCov","hits":"3","order":"1587","possible_hits":"3",},
{"lineNum":"  548","line":"                        self.i = i + 1;","class":"linePartCov","hits":"1","order":"1588","possible_hits":"2",},
{"lineNum":"  549","line":"                        return node.kind.Return;","class":"lineCov","hits":"2","order":"1589","possible_hits":"2",},
{"lineNum":"  550","line":"                    }"},
{"lineNum":"  551","line":"                    self.i = self.last + 1;","class":"linePartCov","hits":"1","order":"1606","possible_hits":"2",},
{"lineNum":"  552","line":"                    return null;","class":"lineCov","hits":"1","order":"1607","possible_hits":"1",},
{"lineNum":"  553","line":"                }"},
{"lineNum":"  554","line":"            };"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"            pub fn iterReturns(self: Self, ast: *const Ast) ReturnsIter {","class":"lineCov","hits":"1","order":"1572","possible_hits":"1",},
{"lineNum":"  557","line":"                if (self.statements == null) {","class":"lineCov","hits":"1","order":"1573","possible_hits":"1",},
{"lineNum":"  558","line":"                    return ReturnsIter{ .ast = ast, .i = 0, .last = 1 };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  559","line":"                }"},
{"lineNum":"  560","line":"                const stmts = ast.get(self.statements.?).kind.StatementList;","class":"lineCov","hits":"3","order":"1574","possible_hits":"3",},
{"lineNum":"  561","line":"                const first = stmts.firstStatement;","class":"lineCov","hits":"1","order":"1575","possible_hits":"1",},
{"lineNum":"  562","line":"                const last = ast.findIndex(.FunctionEnd, first) orelse {","class":"lineCov","hits":"2","order":"1576","possible_hits":"2",},
{"lineNum":"  563","line":"                    std.debug.panic(\"ast malformed: no FunctionEnd node found after first statement\", .{});","class":"linePartCov","hits":"1","order":"1578","possible_hits":"2",},
{"lineNum":"  564","line":"                };"},
{"lineNum":"  565","line":"                utils.assert(last > first, \"ast malformed: last={d} < first={d}\", .{ last, first });","class":"lineCov","hits":"1","order":"1579","possible_hits":"1",},
{"lineNum":"  566","line":"                // std.debug.print(\"first={d} last={d}\\n\", .{ first, last });"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"                return ReturnsIter{","class":"lineCov","hits":"1","order":"1580","possible_hits":"1",},
{"lineNum":"  569","line":"                    .ast = ast,"},
{"lineNum":"  570","line":"                    .i = first,"},
{"lineNum":"  571","line":"                    .last = last,"},
{"lineNum":"  572","line":"                };"},
{"lineNum":"  573","line":"            }"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"            test \"ast.iterReturns.void\" {","class":"lineCov","hits":"1","order":"3222","possible_hits":"1",},
{"lineNum":"  576","line":"                errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  577","line":"                const input = \"fun main() void { return; }\";","class":"lineCov","hits":"1","order":"3223","possible_hits":"1",},
{"lineNum":"  578","line":"                const ast = try testMe(input);","class":"linePartCov","hits":"1","order":"3224","possible_hits":"2",},
{"lineNum":"  579","line":"                const func = (ast.find(.Function, 0) orelse unreachable).kind.Function;","class":"lineCov","hits":"2","order":"3225","possible_hits":"2",},
{"lineNum":"  580","line":"                const body = ast.get(func.body).kind.FunctionBody;","class":"lineCov","hits":"3","order":"3226","possible_hits":"3",},
{"lineNum":"  581","line":"                var iter = body.iterReturns(&ast);","class":"lineCov","hits":"1","order":"3227","possible_hits":"1",},
{"lineNum":"  582","line":"                const ret = iter.next();","class":"lineCov","hits":"1","order":"3228","possible_hits":"1",},
{"lineNum":"  583","line":"                try std.testing.expect(ret != null);","class":"linePartCov","hits":"1","order":"3229","possible_hits":"2",},
{"lineNum":"  584","line":"                try std.testing.expect(ret.?.expr == null);","class":"linePartCov","hits":"1","order":"3230","possible_hits":"2",},
{"lineNum":"  585","line":"                try std.testing.expect(iter.next() == null);","class":"linePartCov","hits":"1","order":"3231","possible_hits":"2",},
{"lineNum":"  586","line":"            }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"            test \"ast.iterReturns.findsAll.multiple_void\" {","class":"lineCov","hits":"1","order":"3232","possible_hits":"1",},
{"lineNum":"  589","line":"                const input = \"fun main() int { if (true) {return;} else {return;} }\";","class":"lineCov","hits":"1","order":"3233","possible_hits":"1",},
{"lineNum":"  590","line":"                const ast = try testMe(input);","class":"lineCov","hits":"1","order":"3234","possible_hits":"1",},
{"lineNum":"  591","line":"                const func = (ast.find(.Function, 0) orelse unreachable).kind.Function;","class":"lineCov","hits":"2","order":"3235","possible_hits":"2",},
{"lineNum":"  592","line":"                const body = ast.get(func.body).kind.FunctionBody;","class":"lineCov","hits":"3","order":"3236","possible_hits":"3",},
{"lineNum":"  593","line":"                var iter = body.iterReturns(&ast);","class":"lineCov","hits":"1","order":"3237","possible_hits":"1",},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"                try std.testing.expect(iter.next() != null);","class":"linePartCov","hits":"1","order":"3238","possible_hits":"2",},
{"lineNum":"  596","line":"                try std.testing.expect(iter.next() != null);","class":"lineCov","hits":"1","order":"3239","possible_hits":"1",},
{"lineNum":"  597","line":"                try std.testing.expect(iter.next() == null);","class":"lineCov","hits":"1","order":"3240","possible_hits":"1",},
{"lineNum":"  598","line":"                try std.testing.expect(iter.next() == null);","class":"lineCov","hits":"1","order":"3241","possible_hits":"1",},
{"lineNum":"  599","line":"            }"},
{"lineNum":"  600","line":"            test \"ast.iterReturns.multiple_void\" {","class":"lineCov","hits":"1","order":"3243","possible_hits":"1",},
{"lineNum":"  601","line":"                const input = \"fun main() int { if (true) {return;} else {return;} }\";","class":"lineCov","hits":"1","order":"3244","possible_hits":"1",},
{"lineNum":"  602","line":"                const ast = try testMe(input);","class":"lineCov","hits":"1","order":"3245","possible_hits":"1",},
{"lineNum":"  603","line":"                const func = (ast.find(.Function, 0) orelse unreachable).kind.Function;","class":"lineCov","hits":"2","order":"3246","possible_hits":"2",},
{"lineNum":"  604","line":"                const body = ast.get(func.body).kind.FunctionBody;","class":"lineCov","hits":"3","order":"3247","possible_hits":"3",},
{"lineNum":"  605","line":"                var iter = body.iterReturns(&ast);","class":"lineCov","hits":"1","order":"3248","possible_hits":"1",},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"                var ret = iter.next();","class":"lineCov","hits":"1","order":"3249","possible_hits":"1",},
{"lineNum":"  608","line":"                try std.testing.expect(ret != null);","class":"linePartCov","hits":"1","order":"3250","possible_hits":"2",},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"                // const expr1 = ast.get(ret.?.expr.?).kind.Expression;"},
{"lineNum":"  611","line":"                // const expr1Selector = ast.get(expr1.expr).kind.Selector;"},
{"lineNum":"  612","line":"                // const expr1Factor = ast.get(expr1Selector.factor).kind.Factor;"},
{"lineNum":"  613","line":"                // const expr1Number = ast.get(expr1Factor.factor).token._range.getSubStrFromStr(ast.input);"},
{"lineNum":"  614","line":"                // try std.testing.expectEqualStrings(expr1Number, \"1\");"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"                ret = iter.next();","class":"lineCov","hits":"1","order":"3251","possible_hits":"1",},
{"lineNum":"  617","line":"                try std.testing.expect(ret != null);","class":"lineCov","hits":"1","order":"3252","possible_hits":"1",},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"                // const expr2 = ast.get(ret.?.expr.?).kind.Expression;"},
{"lineNum":"  620","line":"                // const expr2Selector = ast.get(expr2.expr).kind.Selector;"},
{"lineNum":"  621","line":"                // const expr2Factor = ast.get(expr2Selector.factor).kind.Factor;"},
{"lineNum":"  622","line":"                // const expr2Number = ast.get(expr2Factor.factor).token._range.getSubStrFromStr(ast.input);"},
{"lineNum":"  623","line":"                // try std.testing.expectEqualStrings(expr2Number, \"1\");"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"                try std.testing.expect(iter.next() == null);","class":"lineCov","hits":"1","order":"3253","possible_hits":"1",},
{"lineNum":"  626","line":"            }"},
{"lineNum":"  627","line":"            // test \"ast.iterReturns.ret_expr\" {"},
{"lineNum":"  628","line":"            //     const input = \"fun main() int { if (true) {return 1;} else {return 2;} }\";"},
{"lineNum":"  629","line":"            //     const ast = try testMe(input);"},
{"lineNum":"  630","line":"            //     const func = (ast.find(.Function, 0) orelse unreachable).kind.Function;"},
{"lineNum":"  631","line":"            //     const body = ast.get(func.body).kind.FunctionBody;"},
{"lineNum":"  632","line":"            //     var iter = body.iterReturns(&ast);"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"            //     var ret = iter.next();"},
{"lineNum":"  635","line":"            //     try std.testing.expect(ret != null);"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"            //     const expr1 = ast.get(ret.?.expr.?).kind.Expression;"},
{"lineNum":"  638","line":"            //     const expr1Selector = ast.get(expr1.expr).kind.Selector;"},
{"lineNum":"  639","line":"            //     const expr1Factor = ast.get(expr1Selector.factor).kind.Factor;"},
{"lineNum":"  640","line":"            //     const expr1Number = ast.get(expr1Factor.factor).token._range.getSubStrFromStr(ast.input);"},
{"lineNum":"  641","line":"            //     try std.testing.expectEqualStrings(expr1Number, \"1\");"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"            //     ret = iter.next();"},
{"lineNum":"  644","line":"            //     try std.testing.expect(ret != null);"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"            //     const expr2 = ast.get(ret.?.expr.?).kind.Expression;"},
{"lineNum":"  647","line":"            //     const expr2Selector = ast.get(expr2.expr).kind.Selector;"},
{"lineNum":"  648","line":"            //     const expr2Factor = ast.get(expr2Selector.factor).kind.Factor;"},
{"lineNum":"  649","line":"            //     const expr2Number = ast.get(expr2Factor.factor).token._range.getSubStrFromStr(ast.input);"},
{"lineNum":"  650","line":"            //     try std.testing.expectEqualStrings(expr2Number, \"1\");"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"            //     try std.testing.expect(iter.next() == null);"},
{"lineNum":"  653","line":"            // }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"            pub fn getStatementList(self: Self) ?Ref(.StatementList) {","class":"lineCov","hits":"1","order":"1613","possible_hits":"1",},
{"lineNum":"  656","line":"                return self.statements orelse null;","class":"lineCov","hits":"1","order":"1614","possible_hits":"1",},
{"lineNum":"  657","line":"            }"},
{"lineNum":"  658","line":"        };"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"        pub const ReturnTypedIdentifierType = struct {"},
{"lineNum":"  661","line":"            /// Pointer to `Type` node"},
{"lineNum":"  662","line":"            type: Ref(.ReturnType),"},
{"lineNum":"  663","line":"            /// Pointer to `Identifier` node"},
{"lineNum":"  664","line":"            ident: Ref(.Identifier),"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"            const Self = @This();"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"            pub fn getType(self: Self, ast: *const Ast) ?Type {","class":"lineCov","hits":"1","order":"1562","possible_hits":"1",},
{"lineNum":"  669","line":"                const retTypeNode = ast.get(self.type).kind.ReturnType;","class":"lineCov","hits":"2","order":"1563","possible_hits":"2",},
{"lineNum":"  670","line":"                if (retTypeNode.type) |tyNodeIndex| {","class":"lineCov","hits":"2","order":"1564","possible_hits":"2",},
{"lineNum":"  671","line":"                    const tyNode = ast.get(tyNodeIndex).kind.Type;","class":"lineCov","hits":"3","order":"1688","possible_hits":"3",},
{"lineNum":"  672","line":"                    const kindNode = ast.get(tyNode.kind).kind;","class":"lineCov","hits":"1","order":"1689","possible_hits":"1",},
{"lineNum":"  673","line":"                    switch (kindNode) {","class":"linePartCov","hits":"1","order":"1690","possible_hits":"3",},
{"lineNum":"  674","line":"                        .BoolType => return .Bool,","class":"lineCov","hits":"1","order":"1691","possible_hits":"1",},
{"lineNum":"  675","line":"                        .IntType => return .Int,","class":"lineCov","hits":"1","order":"2033","possible_hits":"1",},
{"lineNum":"  676","line":"                        .Void => return .Void,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"                        .StructType => {"},
{"lineNum":"  678","line":"                            const nameToken = ast.get(tyNode.structIdentifier.?).token;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  679","line":"                            const name = nameToken._range.getSubStrFromStr(ast.input);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":"                            return .{ .Struct = name };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  681","line":"                        },"},
{"lineNum":"  682","line":"                        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  683","line":"                    }"},
{"lineNum":"  684","line":"                } else {"},
{"lineNum":"  685","line":"                    std.debug.assert(retTypeNode.isVoid());","class":"lineCov","hits":"1","order":"1565","possible_hits":"1",},
{"lineNum":"  686","line":"                    return .Void;","class":"lineCov","hits":"1","order":"1568","possible_hits":"1",},
{"lineNum":"  687","line":"                }"},
{"lineNum":"  688","line":"            }"},
{"lineNum":"  689","line":"        };"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"        pub const TypedIdentifierType = struct {"},
{"lineNum":"  692","line":"            /// Pointer to `Type` node"},
{"lineNum":"  693","line":"            type: Ref(.Type),"},
{"lineNum":"  694","line":"            /// Pointer to `Identifier` node"},
{"lineNum":"  695","line":"            ident: Ref(.Identifier),"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"            const Self = @This();"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"            pub fn getType(self: Self, ast: *Ast) Type {","class":"lineCov","hits":"1","order":"2146","possible_hits":"1",},
{"lineNum":"  700","line":"                const tyNode = ast.get(self.type).kind.Type;","class":"lineCov","hits":"2","order":"2147","possible_hits":"2",},
{"lineNum":"  701","line":"                const kindNode = ast.get(tyNode.kind).kind;","class":"lineCov","hits":"1","order":"2148","possible_hits":"1",},
{"lineNum":"  702","line":"                switch (kindNode) {","class":"linePartCov","hits":"1","order":"2149","possible_hits":"3",},
{"lineNum":"  703","line":"                    .BoolType => return .Bool,","class":"lineCov","hits":"1","order":"2193","possible_hits":"1",},
{"lineNum":"  704","line":"                    .IntType => return .Int,","class":"lineCov","hits":"1","order":"2150","possible_hits":"1",},
{"lineNum":"  705","line":"                    .StructType => {"},
{"lineNum":"  706","line":"                        const nameToken = ast.get(tyNode.structIdentifier.?).token;","class":"lineCov","hits":"2","order":"2264","possible_hits":"2",},
{"lineNum":"  707","line":"                        const name = nameToken._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2265","possible_hits":"1",},
{"lineNum":"  708","line":"                        return .{ .Struct = name };","class":"lineCov","hits":"1","order":"2266","possible_hits":"1",},
{"lineNum":"  709","line":"                    },"},
{"lineNum":"  710","line":"                    else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":"                }"},
{"lineNum":"  712","line":"            }"},
{"lineNum":"  713","line":"            pub fn getName(self: Self, ast: *Ast) []const u8 {","class":"lineCov","hits":"1","order":"2139","possible_hits":"1",},
{"lineNum":"  714","line":"                const idNode = ast.get(self.ident);","class":"lineCov","hits":"1","order":"2140","possible_hits":"1",},
{"lineNum":"  715","line":"                const token = idNode.token;","class":"lineCov","hits":"1","order":"2141","possible_hits":"1",},
{"lineNum":"  716","line":"                const name = token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2142","possible_hits":"1",},
{"lineNum":"  717","line":"                return name;","class":"lineCov","hits":"1","order":"2143","possible_hits":"1",},
{"lineNum":"  718","line":"            }"},
{"lineNum":"  719","line":"        };"},
{"lineNum":"  720","line":"        pub const ExpressionType = struct {"},
{"lineNum":"  721","line":"            /// like with `StatementList` there are occasions we must iterate"},
{"lineNum":"  722","line":"            /// over a list of expressions, so it is helpful to have a top level"},
{"lineNum":"  723","line":"            /// node indicating the start of a new subtree"},
{"lineNum":"  724","line":"            expr: RefOneOf(.{"},
{"lineNum":"  725","line":"                .BinaryOperation,"},
{"lineNum":"  726","line":"                .UnaryOperation,"},
{"lineNum":"  727","line":"                .Selector,"},
{"lineNum":"  728","line":"            }),"},
{"lineNum":"  729","line":"            last: usize,"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"            const Self = @This();"},
{"lineNum":"  732","line":"        };"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"        pub const ConditionalIfType = struct {"},
{"lineNum":"  735","line":"            /// pointer to the condition expression"},
{"lineNum":"  736","line":"            cond: Ref(.Expression),"},
{"lineNum":"  737","line":"            /// Circumvents the 2 field limit of the union (for alignment reasons)"},
{"lineNum":"  738","line":"            /// by pointing to the true and false blocks, so the ConditionalIf can point"},
{"lineNum":"  739","line":"            /// to either a block if no else, or a ConditionalIfElse if there is an else"},
{"lineNum":"  740","line":"            /// Pointer to either `Block` if no `else` clause, or"},
{"lineNum":"  741","line":"            /// `ConditionalIfElse` if there is an `else`"},
{"lineNum":"  742","line":"            block: RefOneOf(.{"},
{"lineNum":"  743","line":"                .ConditionalIfElse,"},
{"lineNum":"  744","line":"                .Block,"},
{"lineNum":"  745","line":"            }),"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"            pub const Self = @This();"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"            pub fn isIfElse(self: Self, ast: *const Ast) bool {","class":"lineCov","hits":"1","order":"1638","possible_hits":"1",},
{"lineNum":"  750","line":"                const block = ast.get(self.block).kind;","class":"lineCov","hits":"1","order":"1639","possible_hits":"1",},
{"lineNum":"  751","line":"                switch (block) {","class":"linePartCov","hits":"1","order":"1640","possible_hits":"2",},
{"lineNum":"  752","line":"                    .Block => return false,","class":"lineCov","hits":"1","order":"1702","possible_hits":"1",},
{"lineNum":"  753","line":"                    .ConditionalIfElse => return true,","class":"lineCov","hits":"1","order":"1641","possible_hits":"1",},
{"lineNum":"  754","line":"                    else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  755","line":"                }"},
{"lineNum":"  756","line":"            }"},
{"lineNum":"  757","line":"        };"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"        pub const BlockType = struct {"},
{"lineNum":"  760","line":"            /// Pointer to `StatementList`"},
{"lineNum":"  761","line":"            /// null if no statements in the block"},
{"lineNum":"  762","line":"            statements: ?Ref(.StatementList) = null,"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"            pub const Self = @This();"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"            /// returns [start, end)"},
{"lineNum":"  767","line":"            pub fn range(self: Self, ast: *const Ast) ?[2]usize {","class":"lineCov","hits":"1","order":"1649","possible_hits":"1",},
{"lineNum":"  768","line":"                if (self.statements) |statements| {","class":"lineCov","hits":"2","order":"1650","possible_hits":"2",},
{"lineNum":"  769","line":"                    const statementsNode = ast.get(statements).kind.StatementList;","class":"lineCov","hits":"3","order":"1651","possible_hits":"3",},
{"lineNum":"  770","line":"                    const start = statementsNode.firstStatement;","class":"lineCov","hits":"1","order":"1652","possible_hits":"1",},
{"lineNum":"  771","line":"                    const lastStatement = (statementsNode.lastStatement orelse start);","class":"linePartCov","hits":"2","order":"1653","possible_hits":"3",},
{"lineNum":"  772","line":"                    const lastIndex = ast.get(lastStatement).kind.Statement.finalIndex;","class":"lineCov","hits":"3","order":"1654","possible_hits":"3",},
{"lineNum":"  773","line":"                    return [2]usize{ start, lastIndex };","class":"linePartCov","hits":"1","order":"1655","possible_hits":"2",},
{"lineNum":"  774","line":"                }"},
{"lineNum":"  775","line":"                return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  776","line":"            }"},
{"lineNum":"  777","line":"        };"},
{"lineNum":"  778","line":"    };"},
{"lineNum":"  779","line":"};"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"pub const Type = union(enum) {"},
{"lineNum":"  782","line":"    Bool,"},
{"lineNum":"  783","line":"    Int,"},
{"lineNum":"  784","line":"    Null,"},
{"lineNum":"  785","line":"    Void,"},
{"lineNum":"  786","line":"    Struct: []const u8,"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    const Self = @This();"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    pub fn isStruct(self: Self) bool {","class":"lineCov","hits":"1","order":"2182","possible_hits":"1",},
{"lineNum":"  791","line":"        return @intFromEnum(self) == @intFromEnum(Type.Struct);","class":"lineCov","hits":"1","order":"2183","possible_hits":"1",},
{"lineNum":"  792","line":"    }"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"    pub fn equalsNoCont(self: Self, other: Self) bool {","class":"lineCov","hits":"1","order":"2805","possible_hits":"1",},
{"lineNum":"  795","line":"        return @intFromEnum(self) == @intFromEnum(other);","class":"lineCov","hits":"1","order":"2806","possible_hits":"1",},
{"lineNum":"  796","line":"    }"},
{"lineNum":"  797","line":"    pub fn equals(self: Self, other: Self) bool {","class":"lineCov","hits":"1","order":"1998","possible_hits":"1",},
{"lineNum":"  798","line":"        const tmp = @intFromEnum(self) ^ @intFromEnum(other);","class":"lineCov","hits":"1","order":"1999","possible_hits":"1",},
{"lineNum":"  799","line":"        // if struct"},
{"lineNum":"  800","line":"        if (std.mem.eql(u8, @tagName(self), @tagName(other)) and std.mem.eql(u8, @tagName(self), \"Struct\")) {","class":"lineCov","hits":"2","order":"2000","possible_hits":"2",},
{"lineNum":"  801","line":"            // memcmp"},
{"lineNum":"  802","line":"            return std.mem.eql(u8, self.Struct, other.Struct);","class":"lineCov","hits":"1","order":"2592","possible_hits":"1",},
{"lineNum":"  803","line":"        }"},
{"lineNum":"  804","line":"        return tmp == 0;","class":"lineCov","hits":"1","order":"2001","possible_hits":"1",},
{"lineNum":"  805","line":"    }"},
{"lineNum":"  806","line":"};"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"pub fn generateTypeInt() Type {"},
{"lineNum":"  809","line":"    return .Int;"},
{"lineNum":"  810","line":"}"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"// Required for the `Ref` to work because if we use"},
{"lineNum":"  813","line":"// @typeInfo to extract the Union, zig complains (reasonably)"},
{"lineNum":"  814","line":"// about the type being self referential"},
{"lineNum":"  815","line":"// to update run the following vim commands after copying the body of the node"},
{"lineNum":"  816","line":"// struct into the enum and selecting the inside of the enum"},
{"lineNum":"  817","line":"// \'<,\'>g/: struct/norm f:dt{da{"},
{"lineNum":"  818","line":"// \'<,\'>g://:d"},
{"lineNum":"  819","line":"// \'<,\'>g:^\\s*$:d"},
{"lineNum":"  820","line":"const KindTagDupe = enum {"},
{"lineNum":"  821","line":"    Program,"},
{"lineNum":"  822","line":"    ProgramDeclarations,"},
{"lineNum":"  823","line":"    Types,"},
{"lineNum":"  824","line":"    Type,"},
{"lineNum":"  825","line":"    BoolType,"},
{"lineNum":"  826","line":"    IntType,"},
{"lineNum":"  827","line":"    StructType,"},
{"lineNum":"  828","line":"    Void,"},
{"lineNum":"  829","line":"    Read,"},
{"lineNum":"  830","line":"    Identifier,"},
{"lineNum":"  831","line":"    TypeDeclaration,"},
{"lineNum":"  832","line":"    StructFieldDeclarations,"},
{"lineNum":"  833","line":"    Functions,"},
{"lineNum":"  834","line":"    Function,"},
{"lineNum":"  835","line":"    FunctionEnd,"},
{"lineNum":"  836","line":"    ArgumentEnd,"},
{"lineNum":"  837","line":"    FunctionProto,"},
{"lineNum":"  838","line":"    Parameters,"},
{"lineNum":"  839","line":"    ReturnType,"},
{"lineNum":"  840","line":"    FunctionBody,"},
{"lineNum":"  841","line":"    LocalDeclarations,"},
{"lineNum":"  842","line":"    ReturnTypedIdentifier,"},
{"lineNum":"  843","line":"    TypedIdentifier,"},
{"lineNum":"  844","line":"    StatementList,"},
{"lineNum":"  845","line":"    Statement,"},
{"lineNum":"  846","line":"    Block,"},
{"lineNum":"  847","line":"    Assignment,"},
{"lineNum":"  848","line":"    Print,"},
{"lineNum":"  849","line":"    ConditionalIf,"},
{"lineNum":"  850","line":"    ConditionalIfElse,"},
{"lineNum":"  851","line":"    While,"},
{"lineNum":"  852","line":"    Delete,"},
{"lineNum":"  853","line":"    Return,"},
{"lineNum":"  854","line":"    Invocation,"},
{"lineNum":"  855","line":"    LValue,"},
{"lineNum":"  856","line":"    Expression,"},
{"lineNum":"  857","line":"    BinaryOperation,"},
{"lineNum":"  858","line":"    UnaryOperation,"},
{"lineNum":"  859","line":"    Selector,"},
{"lineNum":"  860","line":"    SelectorChain,"},
{"lineNum":"  861","line":"    Factor,"},
{"lineNum":"  862","line":"    Arguments,"},
{"lineNum":"  863","line":"    Number,"},
{"lineNum":"  864","line":"    True,"},
{"lineNum":"  865","line":"    False,"},
{"lineNum":"  866","line":"    New,"},
{"lineNum":"  867","line":"    Null,"},
{"lineNum":"  868","line":"    BackfillReserve,"},
{"lineNum":"  869","line":"};"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"/// An alias for usize, used to make what the referenes in"},
{"lineNum":"  872","line":"/// `Node.Kind` are referring to more explicit"},
{"lineNum":"  873","line":"/// WARN: not checked!"},
{"lineNum":"  874","line":"fn Ref(comptime tag: KindTagDupe) type {"},
{"lineNum":"  875","line":"    _ = tag;"},
{"lineNum":"  876","line":"    return usize;"},
{"lineNum":"  877","line":"}"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"fn RefOneOf(comptime tags: anytype) type {"},
{"lineNum":"  880","line":"    _ = tags;"},
{"lineNum":"  881","line":"    return usize;"},
{"lineNum":"  882","line":"}"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"/////////////"},
{"lineNum":"  885","line":"// HELPERS //"},
{"lineNum":"  886","line":"/////////////"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"const NodeKindTag = @typeInfo(Node.Kind).Union.tag_type.?;"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"fn cmpNodeKindAndTag(node: Node, nkTag: NodeKindTag) bool {","class":"lineCov","hits":"1","order":"1208","possible_hits":"1",},
{"lineNum":"  891","line":"    return @intFromEnum(node.kind) == @intFromEnum(nkTag);","class":"lineCov","hits":"1","order":"1209","possible_hits":"1",},
{"lineNum":"  892","line":"}"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"pub fn numNodes(ast: *const Ast, nodeKind: NodeKindTag, startingAt: usize) usize {","class":"lineCov","hits":"1","order":"1537","possible_hits":"1",},
{"lineNum":"  895","line":"    var count: usize = 0;","class":"lineCov","hits":"1","order":"1538","possible_hits":"1",},
{"lineNum":"  896","line":"    for (ast.nodes.items[startingAt..]) |node| {","class":"lineCov","hits":"3","order":"1539","possible_hits":"3",},
{"lineNum":"  897","line":"        if (cmpNodeKindAndTag(node, nodeKind)) {","class":"lineCov","hits":"1","order":"1540","possible_hits":"1",},
{"lineNum":"  898","line":"            count += 1;","class":"lineCov","hits":"2","order":"1541","possible_hits":"2",},
{"lineNum":"  899","line":"        }"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":"    return count;","class":"lineCov","hits":"1","order":"1542","possible_hits":"1",},
{"lineNum":"  902","line":"}"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"test \"ast.numNodes\" {","class":"lineCov","hits":"1","order":"2811","possible_hits":"1",},
{"lineNum":"  905","line":"    const input = \"fun main() int { if (true) {return 1;} else {return 2;} }\";","class":"lineCov","hits":"1","order":"2812","possible_hits":"1",},
{"lineNum":"  906","line":"    const ast = try testMe(input);","class":"lineCov","hits":"1","order":"2813","possible_hits":"1",},
{"lineNum":"  907","line":"    const func = (ast.find(.Function, 0) orelse unreachable).kind.Function;","class":"lineCov","hits":"2","order":"2819","possible_hits":"2",},
{"lineNum":"  908","line":"    const body = ast.get(func.body).kind.FunctionBody;","class":"lineCov","hits":"2","order":"2821","possible_hits":"2",},
{"lineNum":"  909","line":"    const numReturns = ast.numNodes(.Return, body.statements.?);","class":"lineCov","hits":"3","order":"2822","possible_hits":"3",},
{"lineNum":"  910","line":"    try std.testing.expect(numReturns == 2);","class":"linePartCov","hits":"1","order":"2823","possible_hits":"2",},
{"lineNum":"  911","line":"}"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"pub fn find(ast: *const Ast, nodeKind: NodeKindTag, startingAt: usize) ?Node {","class":"lineCov","hits":"1","order":"1203","possible_hits":"1",},
{"lineNum":"  914","line":"    if (startingAt >= ast.nodes.items.len) {","class":"lineCov","hits":"1","order":"1204","possible_hits":"1",},
{"lineNum":"  915","line":"        return null;","class":"linePartCov","hits":"1","order":"1205","possible_hits":"2",},
{"lineNum":"  916","line":"    }"},
{"lineNum":"  917","line":"    for (ast.nodes.items[startingAt..]) |node| {","class":"lineCov","hits":"4","order":"1206","possible_hits":"4",},
{"lineNum":"  918","line":"        // std.debug.print(\"node {s} - {d} =? kind {s} - {d}\\n\", .{ @tagName(node.kind), @intFromEnum(node.kind), @tagName(nodeKind), @intFromEnum(nodeKind) });"},
{"lineNum":"  919","line":"        if (cmpNodeKindAndTag(node, nodeKind)) {","class":"lineCov","hits":"1","order":"1207","possible_hits":"1",},
{"lineNum":"  920","line":"            return node;","class":"linePartCov","hits":"1","order":"2820","possible_hits":"2",},
{"lineNum":"  921","line":"        }"},
{"lineNum":"  922","line":"    }"},
{"lineNum":"  923","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  924","line":"}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"pub fn findIndex(ast: *const Ast, nodeKind: NodeKindTag, startingAt: usize) ?usize {","class":"lineCov","hits":"1","order":"1218","possible_hits":"1",},
{"lineNum":"  927","line":"    if (startingAt >= ast.nodes.items.len) {","class":"lineCov","hits":"1","order":"1219","possible_hits":"1",},
{"lineNum":"  928","line":"        return null;","class":"linePartCov","hits":"1","order":"1220","possible_hits":"2",},
{"lineNum":"  929","line":"    }"},
{"lineNum":"  930","line":"    for (ast.nodes.items[startingAt..], startingAt..) |node, i| {","class":"linePartCov","hits":"4","order":"1221","possible_hits":"5",},
{"lineNum":"  931","line":"        if (cmpNodeKindAndTag(node, nodeKind)) {","class":"lineCov","hits":"1","order":"1222","possible_hits":"1",},
{"lineNum":"  932","line":"            return i;","class":"lineCov","hits":"3","order":"1577","possible_hits":"3",},
{"lineNum":"  933","line":"        }"},
{"lineNum":"  934","line":"    }"},
{"lineNum":"  935","line":"    return null;","class":"lineCov","hits":"1","order":"1605","possible_hits":"1",},
{"lineNum":"  936","line":"}"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"pub fn findIndexWithin(ast: *const Ast, nodeKind: NodeKindTag, start: usize, end: usize) ?usize {","class":"lineCov","hits":"1","order":"1943","possible_hits":"1",},
{"lineNum":"  939","line":"    if (start >= ast.nodes.items.len) {","class":"lineCov","hits":"1","order":"1944","possible_hits":"1",},
{"lineNum":"  940","line":"        return null;","class":"linePartCov","hits":"1","order":"1945","possible_hits":"2",},
{"lineNum":"  941","line":"    }"},
{"lineNum":"  942","line":"    for (ast.nodes.items[start..end], start..) |node, i| {","class":"linePartCov","hits":"4","order":"1946","possible_hits":"5",},
{"lineNum":"  943","line":"        if (cmpNodeKindAndTag(node, nodeKind)) {","class":"lineCov","hits":"1","order":"1947","possible_hits":"1",},
{"lineNum":"  944","line":"            return i;","class":"lineCov","hits":"3","order":"1948","possible_hits":"3",},
{"lineNum":"  945","line":"        }"},
{"lineNum":"  946","line":"    }"},
{"lineNum":"  947","line":"    return null;","class":"lineCov","hits":"1","order":"1949","possible_hits":"1",},
{"lineNum":"  948","line":"}"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"pub fn get(ast: *const Ast, i: usize) *const Node {","class":"lineCov","hits":"1","order":"1181","possible_hits":"1",},
{"lineNum":"  951","line":"    return &ast.nodes.items[i];","class":"lineCov","hits":"1","order":"1182","possible_hits":"1",},
{"lineNum":"  952","line":"}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"pub const FuncIter = struct {"},
{"lineNum":"  955","line":"    ast: *const Ast,"},
{"lineNum":"  956","line":"    i: usize,"},
{"lineNum":"  957","line":"    last: usize,"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"    const Self = @This();"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"    fn new(ast: *const Ast) Self {","class":"lineCov","hits":"1","order":"1201","possible_hits":"1",},
{"lineNum":"  962","line":"        const prog = ast.find(.Program, 0);","class":"lineCov","hits":"1","order":"1202","possible_hits":"1",},
{"lineNum":"  963","line":"        const funcs = ast.get(prog.?.kind.Program.functions).kind.Functions;","class":"lineCov","hits":"2","order":"1210","possible_hits":"2",},
{"lineNum":"  964","line":"        const firstFuncIndex = funcs.firstFunc;","class":"lineCov","hits":"1","order":"1211","possible_hits":"1",},
{"lineNum":"  965","line":"        const lastFuncIndex = funcs.lastFunc orelse firstFuncIndex;","class":"linePartCov","hits":"2","order":"1212","possible_hits":"3",},
{"lineNum":"  966","line":"        return Self{ .ast = ast, .i = firstFuncIndex, .last = lastFuncIndex };","class":"lineCov","hits":"1","order":"1213","possible_hits":"1",},
{"lineNum":"  967","line":"    }"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"    pub fn next(self: *Self) ?Node.Kind.FunctionType {","class":"lineCov","hits":"1","order":"1215","possible_hits":"1",},
{"lineNum":"  970","line":"        if (self.i > self.last) {","class":"lineCov","hits":"1","order":"1216","possible_hits":"1",},
{"lineNum":"  971","line":"            return null;","class":"lineCov","hits":"1","order":"1235","possible_hits":"1",},
{"lineNum":"  972","line":"        }"},
{"lineNum":"  973","line":"        // PERF: use a hashmap to store the indexes of the functions"},
{"lineNum":"  974","line":"        const nodeIndex = self.ast.findIndex(.Function, self.i);","class":"lineCov","hits":"1","order":"1217","possible_hits":"1",},
{"lineNum":"  975","line":"        if (nodeIndex) |i| {","class":"lineCov","hits":"2","order":"1223","possible_hits":"2",},
{"lineNum":"  976","line":"            self.i = i + 1;","class":"linePartCov","hits":"1","order":"1224","possible_hits":"2",},
{"lineNum":"  977","line":"            const n = self.ast.nodes.items[i];","class":"lineCov","hits":"2","order":"1225","possible_hits":"2",},
{"lineNum":"  978","line":"            return n.kind.Function;","class":"linePartCov","hits":"2","order":"1226","possible_hits":"3",},
{"lineNum":"  979","line":"        }"},
{"lineNum":"  980","line":"        self.i = self.last + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  981","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"    }"},
{"lineNum":"  983","line":"};"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"pub fn iterFuncs(ast: *const Ast) FuncIter {","class":"lineCov","hits":"1","order":"1199","possible_hits":"1",},
{"lineNum":"  986","line":"    return FuncIter.new(ast);","class":"lineCov","hits":"1","order":"1200","possible_hits":"1",},
{"lineNum":"  987","line":"}"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"const ting = std.testing;"},
{"lineNum":"  990","line":"const debugAlloc = std.heap.page_allocator;"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"fn testMe(input: []const u8) !Ast {","class":"lineCov","hits":"1","order":"2814","possible_hits":"1",},
{"lineNum":"  993","line":"    const tokens = try @import(\"lexer.zig\").Lexer.tokenizeFromStr(input, debugAlloc);","class":"lineCov","hits":"1","order":"2815","possible_hits":"1",},
{"lineNum":"  994","line":"    const parser = try @import(\"parser.zig\").Parser.parseTokens(tokens, input, debugAlloc);","class":"lineCov","hits":"1","order":"2816","possible_hits":"1",},
{"lineNum":"  995","line":"    const ast = Ast.initFromParser(parser);","class":"lineCov","hits":"1","order":"2817","possible_hits":"1",},
{"lineNum":"  996","line":"    return ast;","class":"lineCov","hits":"1","order":"2818","possible_hits":"1",},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"test \"ast.structMap\" {","class":"lineCov","hits":"1","order":"2826","possible_hits":"1",},
{"lineNum":" 1000","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1001","line":"    const input = \"struct Foo { int a; int b; }; fun main() void{}\";","class":"lineCov","hits":"1","order":"2827","possible_hits":"1",},
{"lineNum":" 1002","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2828","possible_hits":"2",},
{"lineNum":" 1003","line":"    try ting.expect(ast.structMap.contains(\"Foo\"));","class":"linePartCov","hits":"1","order":"2829","possible_hits":"2",},
{"lineNum":" 1004","line":"}"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"test \"ast.structMap_duplicate\" {","class":"lineCov","hits":"1","order":"2830","possible_hits":"1",},
{"lineNum":" 1007","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1008","line":"    const input = \"struct Foo { int a; int b; }; struct Foo{int a; int b;}; fun main() void{}\";","class":"lineCov","hits":"1","order":"2831","possible_hits":"1",},
{"lineNum":" 1009","line":"    try ting.expectError(error.StructAlreadyDeclared, testMe(input));","class":"linePartCov","hits":"1","order":"2832","possible_hits":"2",},
{"lineNum":" 1010","line":"}"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"test \"ast.getStructNodeFromName\" {","class":"lineCov","hits":"1","order":"2834","possible_hits":"1",},
{"lineNum":" 1013","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1014","line":"    const input = \"struct Foo { int a; int b; }; fun main() void{}\";","class":"lineCov","hits":"1","order":"2835","possible_hits":"1",},
{"lineNum":" 1015","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2836","possible_hits":"2",},
{"lineNum":" 1016","line":"    const node = ast.getStructNodeFromName(\"Foo\");","class":"lineCov","hits":"1","order":"2837","possible_hits":"1",},
{"lineNum":" 1017","line":"    try ting.expect(node != null);","class":"linePartCov","hits":"1","order":"2838","possible_hits":"2",},
{"lineNum":" 1018","line":"    const ident = ast.get(node.?.kind.TypeDeclaration.ident);","class":"lineCov","hits":"2","order":"2839","possible_hits":"2",},
{"lineNum":" 1019","line":"    const name = ident.token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"1","order":"2840","possible_hits":"1",},
{"lineNum":" 1020","line":"    try ting.expectEqualStrings(name, \"Foo\");","class":"linePartCov","hits":"1","order":"2841","possible_hits":"2",},
{"lineNum":" 1021","line":"}"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"test \"ast.getStructMemberType\" {","class":"lineCov","hits":"1","order":"2851","possible_hits":"1",},
{"lineNum":" 1024","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1025","line":"    const input = \"struct Foo { int a; int b; }; fun main() void{}\";","class":"lineCov","hits":"1","order":"2852","possible_hits":"1",},
{"lineNum":" 1026","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2853","possible_hits":"2",},
{"lineNum":" 1027","line":"    const ty = ast.getStructFieldType(\"Foo\", \"a\");","class":"lineCov","hits":"1","order":"2854","possible_hits":"1",},
{"lineNum":" 1028","line":"    try ting.expect(ty != null);","class":"linePartCov","hits":"1","order":"2855","possible_hits":"2",},
{"lineNum":" 1029","line":"    const kind = ty.?;","class":"lineCov","hits":"2","order":"2856","possible_hits":"2",},
{"lineNum":" 1030","line":"    try ting.expect(kind == Type.Int);","class":"linePartCov","hits":"1","order":"2857","possible_hits":"2",},
{"lineNum":" 1031","line":"}"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"test \"ast.mapFunctions\" {","class":"lineCov","hits":"1","order":"2858","possible_hits":"1",},
{"lineNum":" 1034","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1035","line":"    const input = \"fun main() void{}\";","class":"lineCov","hits":"1","order":"2859","possible_hits":"1",},
{"lineNum":" 1036","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2860","possible_hits":"2",},
{"lineNum":" 1037","line":"    try ting.expect(ast.functionMap.contains(\"main\"));","class":"linePartCov","hits":"1","order":"2861","possible_hits":"2",},
{"lineNum":" 1038","line":"}"},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"test \"ast.mapFunctions_duplicate\" {","class":"lineCov","hits":"1","order":"2862","possible_hits":"1",},
{"lineNum":" 1041","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1042","line":"    const input = \"fun main() void{} fun main() void{}\";","class":"lineCov","hits":"1","order":"2863","possible_hits":"1",},
{"lineNum":" 1043","line":"    try ting.expectError(error.FunctionAlreadyDeclared, testMe(input));","class":"linePartCov","hits":"1","order":"2864","possible_hits":"2",},
{"lineNum":" 1044","line":"}"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"test \"ast.getFunctionFromName\" {","class":"lineCov","hits":"1","order":"2866","possible_hits":"1",},
{"lineNum":" 1047","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1048","line":"    const input = \"fun main() void{}\";","class":"lineCov","hits":"1","order":"2867","possible_hits":"1",},
{"lineNum":" 1049","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2868","possible_hits":"2",},
{"lineNum":" 1050","line":"    var node = ast.getFunctionFromName(\"main\");","class":"lineCov","hits":"1","order":"2869","possible_hits":"1",},
{"lineNum":" 1051","line":"    try ting.expect(node != null);","class":"linePartCov","hits":"1","order":"2870","possible_hits":"2",},
{"lineNum":" 1052","line":"    const func = node.?.kind.Function;","class":"lineCov","hits":"2","order":"2871","possible_hits":"2",},
{"lineNum":" 1053","line":"    const proto = ast.get(func.proto);","class":"lineCov","hits":"1","order":"2872","possible_hits":"1",},
{"lineNum":" 1054","line":"    const name = ast.get(proto.kind.FunctionProto.name).token._range.getSubStrFromStr(ast.input);","class":"lineCov","hits":"3","order":"2873","possible_hits":"3",},
{"lineNum":" 1055","line":"    try ting.expectEqualStrings(name, \"main\");","class":"linePartCov","hits":"1","order":"2874","possible_hits":"2",},
{"lineNum":" 1056","line":"}"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"test \"ast.getFunctionReturnTypeFromName\" {","class":"lineCov","hits":"1","order":"2875","possible_hits":"1",},
{"lineNum":" 1059","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1060","line":"    const input = \"fun main() int{}\";","class":"lineCov","hits":"1","order":"2876","possible_hits":"1",},
{"lineNum":" 1061","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2877","possible_hits":"2",},
{"lineNum":" 1062","line":"    const ty = ast.getFunctionReturnTypeFromName(\"main\");","class":"lineCov","hits":"1","order":"2878","possible_hits":"1",},
{"lineNum":" 1063","line":"    try ting.expect(ty != null);","class":"linePartCov","hits":"1","order":"2879","possible_hits":"2",},
{"lineNum":" 1064","line":"    try ting.expect(ty.? == Type.Int);","class":"linePartCov","hits":"1","order":"2880","possible_hits":"2",},
{"lineNum":" 1065","line":"}"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"test \"ast.getFunctionDeclarationTypeFromName\" {","class":"lineCov","hits":"1","order":"2881","possible_hits":"1",},
{"lineNum":" 1068","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1069","line":"    const input = \"fun main() int{int a;}\";","class":"lineCov","hits":"1","order":"2882","possible_hits":"1",},
{"lineNum":" 1070","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2883","possible_hits":"2",},
{"lineNum":" 1071","line":"    var ty = ast.getFunctionDeclarationTypeFromName(\"main\", \"a\");","class":"lineCov","hits":"1","order":"2884","possible_hits":"1",},
{"lineNum":" 1072","line":"    try ting.expect(ty != null);","class":"linePartCov","hits":"1","order":"2885","possible_hits":"2",},
{"lineNum":" 1073","line":"    var kind = ty.?;","class":"lineCov","hits":"2","order":"2886","possible_hits":"2",},
{"lineNum":" 1074","line":"    try ting.expect(kind == Type.Int);","class":"linePartCov","hits":"1","order":"2887","possible_hits":"2",},
{"lineNum":" 1075","line":"}"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"test \"ast.getFunctionDeclarationTypeFromName_notFound\" {","class":"lineCov","hits":"1","order":"2888","possible_hits":"1",},
{"lineNum":" 1078","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1079","line":"    const input = \"fun main() int{int a;}\";","class":"lineCov","hits":"1","order":"2889","possible_hits":"1",},
{"lineNum":" 1080","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2890","possible_hits":"2",},
{"lineNum":" 1081","line":"    var ty = ast.getFunctionDeclarationTypeFromName(\"main\", \"b\");","class":"lineCov","hits":"1","order":"2891","possible_hits":"1",},
{"lineNum":" 1082","line":"    try ting.expect(ty == null);","class":"linePartCov","hits":"1","order":"2892","possible_hits":"2",},
{"lineNum":" 1083","line":"}"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"test \"ast.getFunctionReturnTypeFromName_void\" {","class":"lineCov","hits":"1","order":"2893","possible_hits":"1",},
{"lineNum":" 1086","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1087","line":"    const input = \"fun main() void{}\";","class":"lineCov","hits":"1","order":"2894","possible_hits":"1",},
{"lineNum":" 1088","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2895","possible_hits":"2",},
{"lineNum":" 1089","line":"    const ty = ast.getFunctionReturnTypeFromName(\"main\");","class":"lineCov","hits":"1","order":"2896","possible_hits":"1",},
{"lineNum":" 1090","line":"    try ting.expect(ty != null);","class":"linePartCov","hits":"1","order":"2897","possible_hits":"2",},
{"lineNum":" 1091","line":"    try ting.expect(ty.? == Type.Void);","class":"linePartCov","hits":"1","order":"2898","possible_hits":"2",},
{"lineNum":" 1092","line":"}"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"test \"ast.getFunctionReturnTypeFromName_notFound\" {","class":"lineCov","hits":"1","order":"2899","possible_hits":"1",},
{"lineNum":" 1095","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1096","line":"    const input = \"fun main() void{}\";","class":"lineCov","hits":"1","order":"2900","possible_hits":"1",},
{"lineNum":" 1097","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2901","possible_hits":"2",},
{"lineNum":" 1098","line":"    const ty = ast.getFunctionReturnTypeFromName(\"main2\");","class":"lineCov","hits":"1","order":"2902","possible_hits":"1",},
{"lineNum":" 1099","line":"    try ting.expect(ty == null);","class":"linePartCov","hits":"1","order":"2906","possible_hits":"2",},
{"lineNum":" 1100","line":"}"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"test \"ast.getDeclaratoinGlobalTypeFromName\" {","class":"lineCov","hits":"1","order":"2907","possible_hits":"1",},
{"lineNum":" 1103","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1104","line":"    const input = \"int a; fun main() void{}\";","class":"lineCov","hits":"1","order":"2908","possible_hits":"1",},
{"lineNum":" 1105","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2909","possible_hits":"2",},
{"lineNum":" 1106","line":"    const ty = ast.getDeclarationGlobalFromName(\"a\");","class":"lineCov","hits":"1","order":"2910","possible_hits":"1",},
{"lineNum":" 1107","line":"    try ting.expect(ty != null);","class":"linePartCov","hits":"1","order":"2911","possible_hits":"2",},
{"lineNum":" 1108","line":"    try ting.expect(ty.? == Type.Int);","class":"linePartCov","hits":"1","order":"2912","possible_hits":"2",},
{"lineNum":" 1109","line":"}"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"test \"ast.getDeclaratoinGlobalTypeFromName_notFound\" {","class":"lineCov","hits":"1","order":"2913","possible_hits":"1",},
{"lineNum":" 1112","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1113","line":"    const input = \"int a; fun main() void{}\";","class":"lineCov","hits":"1","order":"2914","possible_hits":"1",},
{"lineNum":" 1114","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2915","possible_hits":"2",},
{"lineNum":" 1115","line":"    const ty = ast.getDeclarationGlobalFromName(\"b\");","class":"lineCov","hits":"1","order":"2916","possible_hits":"1",},
{"lineNum":" 1116","line":"    try ting.expect(ty == null);","class":"linePartCov","hits":"1","order":"2917","possible_hits":"2",},
{"lineNum":" 1117","line":"}"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"test \"ast.getGloablStructTypeFromName\" {","class":"lineCov","hits":"1","order":"2918","possible_hits":"1",},
{"lineNum":" 1120","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1121","line":"    const input = \"struct Foo { int a; int b; }; struct Foo f; fun main() void{}\";","class":"lineCov","hits":"1","order":"2919","possible_hits":"1",},
{"lineNum":" 1122","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2920","possible_hits":"2",},
{"lineNum":" 1123","line":"    const ty = ast.getDeclarationGlobalFromName(\"f\");","class":"lineCov","hits":"1","order":"2921","possible_hits":"1",},
{"lineNum":" 1124","line":"    const expected = Type{ .Struct = \"Foo\" };"},
{"lineNum":" 1125","line":"    try ting.expect(ty.?.equals(expected));","class":"linePartCov","hits":"1","order":"2922","possible_hits":"2",},
{"lineNum":" 1126","line":"}"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"test \"ast.getGloablStructTypeFromName_notFound\" {","class":"lineCov","hits":"1","order":"2923","possible_hits":"1",},
{"lineNum":" 1129","line":"    errdefer log.print();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1130","line":"    const input = \"struct Foo { int a; int b; }; struct Foo f; fun main() void{}\";","class":"lineCov","hits":"1","order":"2924","possible_hits":"1",},
{"lineNum":" 1131","line":"    var ast = try testMe(input);","class":"linePartCov","hits":"1","order":"2925","possible_hits":"2",},
{"lineNum":" 1132","line":"    const ty = ast.getDeclarationGlobalFromName(\"b\");","class":"lineCov","hits":"1","order":"2926","possible_hits":"1",},
{"lineNum":" 1133","line":"    try ting.expect(ty == null);","class":"linePartCov","hits":"1","order":"2927","possible_hits":"2",},
{"lineNum":" 1134","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 402, "covered" : 368,};
var merged_data = [];
