var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const os = std.os;"},
{"lineNum":"    4","line":"const io = std.io;"},
{"lineNum":"    5","line":"const mem = std.mem;"},
{"lineNum":"    6","line":"const math = std.math;"},
{"lineNum":"    7","line":"const assert = std.debug.assert;"},
{"lineNum":"    8","line":"const windows = os.windows;"},
{"lineNum":"    9","line":"const Os = std.builtin.Os;"},
{"lineNum":"   10","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"   11","line":"const is_windows = builtin.os.tag == .windows;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"pub const File = struct {"},
{"lineNum":"   14","line":"    /// The OS-specific file descriptor or file handle."},
{"lineNum":"   15","line":"    handle: Handle,"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    /// On some systems, such as Linux, file system file descriptors are incapable"},
{"lineNum":"   18","line":"    /// of non-blocking I/O. This forces us to perform asynchronous I/O on a dedicated thread,"},
{"lineNum":"   19","line":"    /// to achieve non-blocking file-system I/O. To do this, `File` must be aware of whether"},
{"lineNum":"   20","line":"    /// it is a file system file descriptor, or, more specifically, whether the I/O is always"},
{"lineNum":"   21","line":"    /// blocking."},
{"lineNum":"   22","line":"    capable_io_mode: io.ModeOverride = io.default_mode,"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    /// Furthermore, even when `std.options.io_mode` is async, it is still sometimes desirable"},
{"lineNum":"   25","line":"    /// to perform blocking I/O, although not by default. For example, when printing a"},
{"lineNum":"   26","line":"    /// stack trace to stderr. This field tracks both by acting as an overriding I/O mode."},
{"lineNum":"   27","line":"    /// When not building in async I/O mode, the type only has the `.blocking` tag, making"},
{"lineNum":"   28","line":"    /// it a zero-bit type."},
{"lineNum":"   29","line":"    intended_io_mode: io.ModeOverride = io.default_mode,"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    pub const Handle = os.fd_t;"},
{"lineNum":"   32","line":"    pub const Mode = os.mode_t;"},
{"lineNum":"   33","line":"    pub const INode = os.ino_t;"},
{"lineNum":"   34","line":"    pub const Uid = os.uid_t;"},
{"lineNum":"   35","line":"    pub const Gid = os.gid_t;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    pub const Kind = enum {"},
{"lineNum":"   38","line":"        block_device,"},
{"lineNum":"   39","line":"        character_device,"},
{"lineNum":"   40","line":"        directory,"},
{"lineNum":"   41","line":"        named_pipe,"},
{"lineNum":"   42","line":"        sym_link,"},
{"lineNum":"   43","line":"        file,"},
{"lineNum":"   44","line":"        unix_domain_socket,"},
{"lineNum":"   45","line":"        whiteout,"},
{"lineNum":"   46","line":"        door,"},
{"lineNum":"   47","line":"        event_port,"},
{"lineNum":"   48","line":"        unknown,"},
{"lineNum":"   49","line":"    };"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    /// This is the default mode given to POSIX operating systems for creating"},
{"lineNum":"   52","line":"    /// files. `0o666` is \"-rw-rw-rw-\" which is counter-intuitive at first,"},
{"lineNum":"   53","line":"    /// since most people would expect \"-rw-r--r--\", for example, when using"},
{"lineNum":"   54","line":"    /// the `touch` command, which would correspond to `0o644`. However, POSIX"},
{"lineNum":"   55","line":"    /// libc implementations use `0o666` inside `fopen` and then rely on the"},
{"lineNum":"   56","line":"    /// process-scoped \"umask\" setting to adjust this number for file creation."},
{"lineNum":"   57","line":"    pub const default_mode = switch (builtin.os.tag) {"},
{"lineNum":"   58","line":"        .windows => 0,"},
{"lineNum":"   59","line":"        .wasi => 0,"},
{"lineNum":"   60","line":"        else => 0o666,"},
{"lineNum":"   61","line":"    };"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    pub const OpenError = error{"},
{"lineNum":"   64","line":"        SharingViolation,"},
{"lineNum":"   65","line":"        PathAlreadyExists,"},
{"lineNum":"   66","line":"        FileNotFound,"},
{"lineNum":"   67","line":"        AccessDenied,"},
{"lineNum":"   68","line":"        PipeBusy,"},
{"lineNum":"   69","line":"        NameTooLong,"},
{"lineNum":"   70","line":"        /// On Windows, file paths must be valid Unicode."},
{"lineNum":"   71","line":"        InvalidUtf8,"},
{"lineNum":"   72","line":"        /// On Windows, file paths cannot contain these characters:"},
{"lineNum":"   73","line":"        /// \'/\', \'*\', \'?\', \'\"\', \'<\', \'>\', \'|\'"},
{"lineNum":"   74","line":"        BadPathName,"},
{"lineNum":"   75","line":"        Unexpected,"},
{"lineNum":"   76","line":"        /// On Windows, `\\\\server` or `\\\\server\\share` was not found."},
{"lineNum":"   77","line":"        NetworkNotFound,"},
{"lineNum":"   78","line":"    } || os.OpenError || os.FlockError;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    pub const OpenMode = enum {"},
{"lineNum":"   81","line":"        read_only,"},
{"lineNum":"   82","line":"        write_only,"},
{"lineNum":"   83","line":"        read_write,"},
{"lineNum":"   84","line":"    };"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    pub const Lock = enum {"},
{"lineNum":"   87","line":"        none,"},
{"lineNum":"   88","line":"        shared,"},
{"lineNum":"   89","line":"        exclusive,"},
{"lineNum":"   90","line":"    };"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    pub const OpenFlags = struct {"},
{"lineNum":"   93","line":"        mode: OpenMode = .read_only,"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        /// Open the file with an advisory lock to coordinate with other processes"},
{"lineNum":"   96","line":"        /// accessing it at the same time. An exclusive lock will prevent other"},
{"lineNum":"   97","line":"        /// processes from acquiring a lock. A shared lock will prevent other"},
{"lineNum":"   98","line":"        /// processes from acquiring a exclusive lock, but does not prevent"},
{"lineNum":"   99","line":"        /// other process from getting their own shared locks."},
{"lineNum":"  100","line":"        ///"},
{"lineNum":"  101","line":"        /// The lock is advisory, except on Linux in very specific circumstances[1]."},
{"lineNum":"  102","line":"        /// This means that a process that does not respect the locking API can still get access"},
{"lineNum":"  103","line":"        /// to the file, despite the lock."},
{"lineNum":"  104","line":"        ///"},
{"lineNum":"  105","line":"        /// On these operating systems, the lock is acquired atomically with"},
{"lineNum":"  106","line":"        /// opening the file:"},
{"lineNum":"  107","line":"        /// * Darwin"},
{"lineNum":"  108","line":"        /// * DragonFlyBSD"},
{"lineNum":"  109","line":"        /// * FreeBSD"},
{"lineNum":"  110","line":"        /// * Haiku"},
{"lineNum":"  111","line":"        /// * NetBSD"},
{"lineNum":"  112","line":"        /// * OpenBSD"},
{"lineNum":"  113","line":"        /// On these operating systems, the lock is acquired via a separate syscall"},
{"lineNum":"  114","line":"        /// after opening the file:"},
{"lineNum":"  115","line":"        /// * Linux"},
{"lineNum":"  116","line":"        /// * Windows"},
{"lineNum":"  117","line":"        ///"},
{"lineNum":"  118","line":"        /// [1]: https://www.kernel.org/doc/Documentation/filesystems/mandatory-locking.txt"},
{"lineNum":"  119","line":"        lock: Lock = .none,"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        /// Sets whether or not to wait until the file is locked to return. If set to true,"},
{"lineNum":"  122","line":"        /// `error.WouldBlock` will be returned. Otherwise, the file will wait until the file"},
{"lineNum":"  123","line":"        /// is available to proceed."},
{"lineNum":"  124","line":"        /// In async I/O mode, non-blocking at the OS level is"},
{"lineNum":"  125","line":"        /// determined by `intended_io_mode`, and `true` means `error.WouldBlock` is returned,"},
{"lineNum":"  126","line":"        /// and `false` means `error.WouldBlock` is handled by the event loop."},
{"lineNum":"  127","line":"        lock_nonblocking: bool = false,"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        /// Setting this to `.blocking` prevents `O.NONBLOCK` from being passed even"},
{"lineNum":"  130","line":"        /// if `std.io.is_async`. It allows the use of `nosuspend` when calling functions"},
{"lineNum":"  131","line":"        /// related to opening the file, reading, writing, and locking."},
{"lineNum":"  132","line":"        intended_io_mode: io.ModeOverride = io.default_mode,"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        /// Set this to allow the opened file to automatically become the"},
{"lineNum":"  135","line":"        /// controlling TTY for the current process."},
{"lineNum":"  136","line":"        allow_ctty: bool = false,"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        pub fn isRead(self: OpenFlags) bool {"},
{"lineNum":"  139","line":"            return self.mode != .write_only;"},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        pub fn isWrite(self: OpenFlags) bool {"},
{"lineNum":"  143","line":"            return self.mode != .read_only;"},
{"lineNum":"  144","line":"        }"},
{"lineNum":"  145","line":"    };"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    pub const CreateFlags = struct {"},
{"lineNum":"  148","line":"        /// Whether the file will be created with read access."},
{"lineNum":"  149","line":"        read: bool = false,"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        /// If the file already exists, and is a regular file, and the access"},
{"lineNum":"  152","line":"        /// mode allows writing, it will be truncated to length 0."},
{"lineNum":"  153","line":"        truncate: bool = true,"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        /// Ensures that this open call creates the file, otherwise causes"},
{"lineNum":"  156","line":"        /// `error.PathAlreadyExists` to be returned."},
{"lineNum":"  157","line":"        exclusive: bool = false,"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"        /// Open the file with an advisory lock to coordinate with other processes"},
{"lineNum":"  160","line":"        /// accessing it at the same time. An exclusive lock will prevent other"},
{"lineNum":"  161","line":"        /// processes from acquiring a lock. A shared lock will prevent other"},
{"lineNum":"  162","line":"        /// processes from acquiring a exclusive lock, but does not prevent"},
{"lineNum":"  163","line":"        /// other process from getting their own shared locks."},
{"lineNum":"  164","line":"        ///"},
{"lineNum":"  165","line":"        /// The lock is advisory, except on Linux in very specific circumstances[1]."},
{"lineNum":"  166","line":"        /// This means that a process that does not respect the locking API can still get access"},
{"lineNum":"  167","line":"        /// to the file, despite the lock."},
{"lineNum":"  168","line":"        ///"},
{"lineNum":"  169","line":"        /// On these operating systems, the lock is acquired atomically with"},
{"lineNum":"  170","line":"        /// opening the file:"},
{"lineNum":"  171","line":"        /// * Darwin"},
{"lineNum":"  172","line":"        /// * DragonFlyBSD"},
{"lineNum":"  173","line":"        /// * FreeBSD"},
{"lineNum":"  174","line":"        /// * Haiku"},
{"lineNum":"  175","line":"        /// * NetBSD"},
{"lineNum":"  176","line":"        /// * OpenBSD"},
{"lineNum":"  177","line":"        /// On these operating systems, the lock is acquired via a separate syscall"},
{"lineNum":"  178","line":"        /// after opening the file:"},
{"lineNum":"  179","line":"        /// * Linux"},
{"lineNum":"  180","line":"        /// * Windows"},
{"lineNum":"  181","line":"        ///"},
{"lineNum":"  182","line":"        /// [1]: https://www.kernel.org/doc/Documentation/filesystems/mandatory-locking.txt"},
{"lineNum":"  183","line":"        lock: Lock = .none,"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        /// Sets whether or not to wait until the file is locked to return. If set to true,"},
{"lineNum":"  186","line":"        /// `error.WouldBlock` will be returned. Otherwise, the file will wait until the file"},
{"lineNum":"  187","line":"        /// is available to proceed."},
{"lineNum":"  188","line":"        /// In async I/O mode, non-blocking at the OS level is"},
{"lineNum":"  189","line":"        /// determined by `intended_io_mode`, and `true` means `error.WouldBlock` is returned,"},
{"lineNum":"  190","line":"        /// and `false` means `error.WouldBlock` is handled by the event loop."},
{"lineNum":"  191","line":"        lock_nonblocking: bool = false,"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        /// For POSIX systems this is the file system mode the file will"},
{"lineNum":"  194","line":"        /// be created with. On other systems this is always 0."},
{"lineNum":"  195","line":"        mode: Mode = default_mode,"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        /// Setting this to `.blocking` prevents `O.NONBLOCK` from being passed even"},
{"lineNum":"  198","line":"        /// if `std.io.is_async`. It allows the use of `nosuspend` when calling functions"},
{"lineNum":"  199","line":"        /// related to opening the file, reading, writing, and locking."},
{"lineNum":"  200","line":"        intended_io_mode: io.ModeOverride = io.default_mode,"},
{"lineNum":"  201","line":"    };"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    /// Upon success, the stream is in an uninitialized state. To continue using it,"},
{"lineNum":"  204","line":"    /// you must use the open() function."},
{"lineNum":"  205","line":"    pub fn close(self: File) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"        if (is_windows) {"},
{"lineNum":"  207","line":"            windows.CloseHandle(self.handle);"},
{"lineNum":"  208","line":"        } else if (self.capable_io_mode != self.intended_io_mode) {"},
{"lineNum":"  209","line":"            std.event.Loop.instance.?.close(self.handle);"},
{"lineNum":"  210","line":"        } else {"},
{"lineNum":"  211","line":"            os.close(self.handle);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"        }"},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    pub const SyncError = os.SyncError;"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    /// Blocks until all pending file contents and metadata modifications"},
{"lineNum":"  218","line":"    /// for the file have been synchronized with the underlying filesystem."},
{"lineNum":"  219","line":"    ///"},
{"lineNum":"  220","line":"    /// Note that this does not ensure that metadata for the"},
{"lineNum":"  221","line":"    /// directory containing the file has also reached disk."},
{"lineNum":"  222","line":"    pub fn sync(self: File) SyncError!void {"},
{"lineNum":"  223","line":"        return os.fsync(self.handle);"},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    /// Test whether the file refers to a terminal."},
{"lineNum":"  227","line":"    /// See also `supportsAnsiEscapeCodes`."},
{"lineNum":"  228","line":"    pub fn isTty(self: File) bool {","class":"lineCov","hits":"1","order":"363","possible_hits":"1",},
{"lineNum":"  229","line":"        return os.isatty(self.handle);","class":"lineCov","hits":"1","order":"364","possible_hits":"1",},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    /// Test whether ANSI escape codes will be treated as such."},
{"lineNum":"  233","line":"    pub fn supportsAnsiEscapeCodes(self: File) bool {","class":"lineCov","hits":"1","order":"361","possible_hits":"1",},
{"lineNum":"  234","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  235","line":"            var console_mode: os.windows.DWORD = 0;"},
{"lineNum":"  236","line":"            if (os.windows.kernel32.GetConsoleMode(self.handle, &console_mode) != 0) {"},
{"lineNum":"  237","line":"                if (console_mode & os.windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING != 0) return true;"},
{"lineNum":"  238","line":"            }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"            return os.isCygwinPty(self.handle);"},
{"lineNum":"  241","line":"        }"},
{"lineNum":"  242","line":"        if (builtin.os.tag == .wasi) {"},
{"lineNum":"  243","line":"            // WASI sanitizes stdout when fd is a tty so ANSI escape codes"},
{"lineNum":"  244","line":"            // will not be interpreted as actual cursor commands, and"},
{"lineNum":"  245","line":"            // stderr is always sanitized."},
{"lineNum":"  246","line":"            return false;"},
{"lineNum":"  247","line":"        }"},
{"lineNum":"  248","line":"        if (self.isTty()) {","class":"lineCov","hits":"1","order":"362","possible_hits":"1",},
{"lineNum":"  249","line":"            if (self.handle == os.STDOUT_FILENO or self.handle == os.STDERR_FILENO) {","class":"lineCov","hits":"2","order":"373","possible_hits":"2",},
{"lineNum":"  250","line":"                if (os.getenvZ(\"TERM\")) |term| {","class":"lineCov","hits":"2","order":"374","possible_hits":"2",},
{"lineNum":"  251","line":"                    if (std.mem.eql(u8, term, \"dumb\"))","class":"lineCov","hits":"1","order":"391","possible_hits":"1",},
{"lineNum":"  252","line":"                        return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"                }"},
{"lineNum":"  254","line":"            }"},
{"lineNum":"  255","line":"            return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"        }"},
{"lineNum":"  257","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    pub const SetEndPosError = os.TruncateError;"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    /// Shrinks or expands the file."},
{"lineNum":"  263","line":"    /// The file offset after this call is left unchanged."},
{"lineNum":"  264","line":"    pub fn setEndPos(self: File, length: u64) SetEndPosError!void {"},
{"lineNum":"  265","line":"        try os.ftruncate(self.handle, length);"},
{"lineNum":"  266","line":"    }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"    pub const SeekError = os.SeekError;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    /// Repositions read/write file offset relative to the current offset."},
{"lineNum":"  271","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  272","line":"    pub fn seekBy(self: File, offset: i64) SeekError!void {"},
{"lineNum":"  273","line":"        return os.lseek_CUR(self.handle, offset);"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    /// Repositions read/write file offset relative to the end."},
{"lineNum":"  277","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  278","line":"    pub fn seekFromEnd(self: File, offset: i64) SeekError!void {"},
{"lineNum":"  279","line":"        return os.lseek_END(self.handle, offset);"},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    /// Repositions read/write file offset relative to the beginning."},
{"lineNum":"  283","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  284","line":"    pub fn seekTo(self: File, offset: u64) SeekError!void {"},
{"lineNum":"  285","line":"        return os.lseek_SET(self.handle, offset);"},
{"lineNum":"  286","line":"    }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    pub const GetSeekPosError = os.SeekError || os.FStatError;"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  291","line":"    pub fn getPos(self: File) GetSeekPosError!u64 {"},
{"lineNum":"  292","line":"        return os.lseek_CUR_get(self.handle);"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  296","line":"    pub fn getEndPos(self: File) GetSeekPosError!u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  298","line":"            return windows.GetFileSizeEx(self.handle);"},
{"lineNum":"  299","line":"        }"},
{"lineNum":"  300","line":"        return (try self.stat()).size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    pub const ModeError = os.FStatError;"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  306","line":"    pub fn mode(self: File) ModeError!Mode {"},
{"lineNum":"  307","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  308","line":"            return 0;"},
{"lineNum":"  309","line":"        }"},
{"lineNum":"  310","line":"        return (try self.stat()).mode;"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    pub const Stat = struct {"},
{"lineNum":"  314","line":"        /// A number that the system uses to point to the file metadata. This"},
{"lineNum":"  315","line":"        /// number is not guaranteed to be unique across time, as some file"},
{"lineNum":"  316","line":"        /// systems may reuse an inode after its file has been deleted. Some"},
{"lineNum":"  317","line":"        /// systems may change the inode of a file over time."},
{"lineNum":"  318","line":"        ///"},
{"lineNum":"  319","line":"        /// On Linux, the inode is a structure that stores the metadata, and"},
{"lineNum":"  320","line":"        /// the inode _number_ is what you see here: the index number of the"},
{"lineNum":"  321","line":"        /// inode."},
{"lineNum":"  322","line":"        ///"},
{"lineNum":"  323","line":"        /// The FileIndex on Windows is similar. It is a number for a file that"},
{"lineNum":"  324","line":"        /// is unique to each filesystem."},
{"lineNum":"  325","line":"        inode: INode,"},
{"lineNum":"  326","line":"        size: u64,"},
{"lineNum":"  327","line":"        /// This is available on POSIX systems and is always 0 otherwise."},
{"lineNum":"  328","line":"        mode: Mode,"},
{"lineNum":"  329","line":"        kind: Kind,"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"        /// Access time in nanoseconds, relative to UTC 1970-01-01."},
{"lineNum":"  332","line":"        atime: i128,"},
{"lineNum":"  333","line":"        /// Last modification time in nanoseconds, relative to UTC 1970-01-01."},
{"lineNum":"  334","line":"        mtime: i128,"},
{"lineNum":"  335","line":"        /// Creation time in nanoseconds, relative to UTC 1970-01-01."},
{"lineNum":"  336","line":"        ctime: i128,"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"        pub fn fromSystem(st: os.system.Stat) Stat {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"            const atime = st.atime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"            const mtime = st.mtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"            const ctime = st.ctime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"            const kind: Kind = if (builtin.os.tag == .wasi and !builtin.link_libc) switch (st.filetype) {"},
{"lineNum":"  343","line":"                .BLOCK_DEVICE => .block_device,"},
{"lineNum":"  344","line":"                .CHARACTER_DEVICE => .character_device,"},
{"lineNum":"  345","line":"                .DIRECTORY => .directory,"},
{"lineNum":"  346","line":"                .SYMBOLIC_LINK => .sym_link,"},
{"lineNum":"  347","line":"                .REGULAR_FILE => .file,"},
{"lineNum":"  348","line":"                .SOCKET_STREAM, .SOCKET_DGRAM => .unix_domain_socket,"},
{"lineNum":"  349","line":"                else => .unknown,"},
{"lineNum":"  350","line":"            } else blk: {"},
{"lineNum":"  351","line":"                const m = st.mode & os.S.IFMT;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"                switch (m) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  353","line":"                    os.S.IFBLK => break :blk .block_device,"},
{"lineNum":"  354","line":"                    os.S.IFCHR => break :blk .character_device,"},
{"lineNum":"  355","line":"                    os.S.IFDIR => break :blk .directory,"},
{"lineNum":"  356","line":"                    os.S.IFIFO => break :blk .named_pipe,"},
{"lineNum":"  357","line":"                    os.S.IFLNK => break :blk .sym_link,"},
{"lineNum":"  358","line":"                    os.S.IFREG => break :blk .file,"},
{"lineNum":"  359","line":"                    os.S.IFSOCK => break :blk .unix_domain_socket,"},
{"lineNum":"  360","line":"                    else => {},"},
{"lineNum":"  361","line":"                }"},
{"lineNum":"  362","line":"                if (builtin.os.tag == .solaris) switch (m) {"},
{"lineNum":"  363","line":"                    os.S.IFDOOR => break :blk .door,"},
{"lineNum":"  364","line":"                    os.S.IFPORT => break :blk .event_port,"},
{"lineNum":"  365","line":"                    else => {},"},
{"lineNum":"  366","line":"                };"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"                break :blk .unknown;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  369","line":"            };"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"            return Stat{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"                .inode = st.ino,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"                .size = @as(u64, @bitCast(st.size)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"                .mode = st.mode,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"                .kind = kind,"},
{"lineNum":"  376","line":"                .atime = @as(i128, atime.tv_sec) * std.time.ns_per_s + atime.tv_nsec,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  377","line":"                .mtime = @as(i128, mtime.tv_sec) * std.time.ns_per_s + mtime.tv_nsec,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"                .ctime = @as(i128, ctime.tv_sec) * std.time.ns_per_s + ctime.tv_nsec,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"            };"},
{"lineNum":"  380","line":"        }"},
{"lineNum":"  381","line":"    };"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    pub const StatError = os.FStatError;"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  386","line":"    pub fn stat(self: File) StatError!Stat {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  388","line":"            var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":"  389","line":"            var info: windows.FILE_ALL_INFORMATION = undefined;"},
{"lineNum":"  390","line":"            const rc = windows.ntdll.NtQueryInformationFile(self.handle, &io_status_block, &info, @sizeOf(windows.FILE_ALL_INFORMATION), .FileAllInformation);"},
{"lineNum":"  391","line":"            switch (rc) {"},
{"lineNum":"  392","line":"                .SUCCESS => {},"},
{"lineNum":"  393","line":"                // Buffer overflow here indicates that there is more information available than was able to be stored in the buffer"},
{"lineNum":"  394","line":"                // size provided. This is treated as success because the type of variable-length information that this would be relevant for"},
{"lineNum":"  395","line":"                // (name, volume name, etc) we don\'t care about."},
{"lineNum":"  396","line":"                .BUFFER_OVERFLOW => {},"},
{"lineNum":"  397","line":"                .INVALID_PARAMETER => unreachable,"},
{"lineNum":"  398","line":"                .ACCESS_DENIED => return error.AccessDenied,"},
{"lineNum":"  399","line":"                else => return windows.unexpectedStatus(rc),"},
{"lineNum":"  400","line":"            }"},
{"lineNum":"  401","line":"            return Stat{"},
{"lineNum":"  402","line":"                .inode = info.InternalInformation.IndexNumber,"},
{"lineNum":"  403","line":"                .size = @as(u64, @bitCast(info.StandardInformation.EndOfFile)),"},
{"lineNum":"  404","line":"                .mode = 0,"},
{"lineNum":"  405","line":"                .kind = if (info.StandardInformation.Directory == 0) .file else .directory,"},
{"lineNum":"  406","line":"                .atime = windows.fromSysTime(info.BasicInformation.LastAccessTime),"},
{"lineNum":"  407","line":"                .mtime = windows.fromSysTime(info.BasicInformation.LastWriteTime),"},
{"lineNum":"  408","line":"                .ctime = windows.fromSysTime(info.BasicInformation.CreationTime),"},
{"lineNum":"  409","line":"            };"},
{"lineNum":"  410","line":"        }"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"        const st = try os.fstat(self.handle);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"        return Stat.fromSystem(st);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":"    }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    pub const ChmodError = std.os.FChmodError;"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    /// Changes the mode of the file."},
{"lineNum":"  419","line":"    /// The process must have the correct privileges in order to do this"},
{"lineNum":"  420","line":"    /// successfully, or must have the effective user ID matching the owner"},
{"lineNum":"  421","line":"    /// of the file."},
{"lineNum":"  422","line":"    pub fn chmod(self: File, new_mode: Mode) ChmodError!void {"},
{"lineNum":"  423","line":"        try os.fchmod(self.handle, new_mode);"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    pub const ChownError = std.os.FChownError;"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    /// Changes the owner and group of the file."},
{"lineNum":"  429","line":"    /// The process must have the correct privileges in order to do this"},
{"lineNum":"  430","line":"    /// successfully. The group may be changed by the owner of the file to"},
{"lineNum":"  431","line":"    /// any group of which the owner is a member. If the owner or group is"},
{"lineNum":"  432","line":"    /// specified as `null`, the ID is not changed."},
{"lineNum":"  433","line":"    pub fn chown(self: File, owner: ?Uid, group: ?Gid) ChownError!void {"},
{"lineNum":"  434","line":"        try os.fchown(self.handle, owner, group);"},
{"lineNum":"  435","line":"    }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    /// Cross-platform representation of permissions on a file."},
{"lineNum":"  438","line":"    /// The `readonly` and `setReadonly` are the only methods available across all platforms."},
{"lineNum":"  439","line":"    /// Platform-specific functionality is available through the `inner` field."},
{"lineNum":"  440","line":"    pub const Permissions = struct {"},
{"lineNum":"  441","line":"        /// You may use the `inner` field to use platform-specific functionality"},
{"lineNum":"  442","line":"        inner: switch (builtin.os.tag) {"},
{"lineNum":"  443","line":"            .windows => PermissionsWindows,"},
{"lineNum":"  444","line":"            else => PermissionsUnix,"},
{"lineNum":"  445","line":"        },"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"        const Self = @This();"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"        /// Returns `true` if permissions represent an unwritable file."},
{"lineNum":"  450","line":"        /// On Unix, `true` is returned only if no class has write permissions."},
{"lineNum":"  451","line":"        pub fn readOnly(self: Self) bool {"},
{"lineNum":"  452","line":"            return self.inner.readOnly();"},
{"lineNum":"  453","line":"        }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"        /// Sets whether write permissions are provided."},
{"lineNum":"  456","line":"        /// On Unix, this affects *all* classes. If this is undesired, use `unixSet`"},
{"lineNum":"  457","line":"        /// This method *DOES NOT* set permissions on the filesystem: use `File.setPermissions(permissions)`"},
{"lineNum":"  458","line":"        pub fn setReadOnly(self: *Self, read_only: bool) void {"},
{"lineNum":"  459","line":"            self.inner.setReadOnly(read_only);"},
{"lineNum":"  460","line":"        }"},
{"lineNum":"  461","line":"    };"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    pub const PermissionsWindows = struct {"},
{"lineNum":"  464","line":"        attributes: os.windows.DWORD,"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"        const Self = @This();"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"        /// Returns `true` if permissions represent an unwritable file."},
{"lineNum":"  469","line":"        pub fn readOnly(self: Self) bool {"},
{"lineNum":"  470","line":"            return self.attributes & os.windows.FILE_ATTRIBUTE_READONLY != 0;"},
{"lineNum":"  471","line":"        }"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"        /// Sets whether write permissions are provided."},
{"lineNum":"  474","line":"        /// This method *DOES NOT* set permissions on the filesystem: use `File.setPermissions(permissions)`"},
{"lineNum":"  475","line":"        pub fn setReadOnly(self: *Self, read_only: bool) void {"},
{"lineNum":"  476","line":"            if (read_only) {"},
{"lineNum":"  477","line":"                self.attributes |= os.windows.FILE_ATTRIBUTE_READONLY;"},
{"lineNum":"  478","line":"            } else {"},
{"lineNum":"  479","line":"                self.attributes &= ~@as(os.windows.DWORD, os.windows.FILE_ATTRIBUTE_READONLY);"},
{"lineNum":"  480","line":"            }"},
{"lineNum":"  481","line":"        }"},
{"lineNum":"  482","line":"    };"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    pub const PermissionsUnix = struct {"},
{"lineNum":"  485","line":"        mode: Mode,"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"        const Self = @This();"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"        /// Returns `true` if permissions represent an unwritable file."},
{"lineNum":"  490","line":"        /// `true` is returned only if no class has write permissions."},
{"lineNum":"  491","line":"        pub fn readOnly(self: Self) bool {"},
{"lineNum":"  492","line":"            return self.mode & 0o222 == 0;"},
{"lineNum":"  493","line":"        }"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        /// Sets whether write permissions are provided."},
{"lineNum":"  496","line":"        /// This affects *all* classes. If this is undesired, use `unixSet`"},
{"lineNum":"  497","line":"        /// This method *DOES NOT* set permissions on the filesystem: use `File.setPermissions(permissions)`"},
{"lineNum":"  498","line":"        pub fn setReadOnly(self: *Self, read_only: bool) void {"},
{"lineNum":"  499","line":"            if (read_only) {"},
{"lineNum":"  500","line":"                self.mode &= ~@as(Mode, 0o222);"},
{"lineNum":"  501","line":"            } else {"},
{"lineNum":"  502","line":"                self.mode |= @as(Mode, 0o222);"},
{"lineNum":"  503","line":"            }"},
{"lineNum":"  504","line":"        }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"        pub const Class = enum(u2) {"},
{"lineNum":"  507","line":"            user = 2,"},
{"lineNum":"  508","line":"            group = 1,"},
{"lineNum":"  509","line":"            other = 0,"},
{"lineNum":"  510","line":"        };"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"        pub const Permission = enum(u3) {"},
{"lineNum":"  513","line":"            read = 0o4,"},
{"lineNum":"  514","line":"            write = 0o2,"},
{"lineNum":"  515","line":"            execute = 0o1,"},
{"lineNum":"  516","line":"        };"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"        /// Returns `true` if the chosen class has the selected permission."},
{"lineNum":"  519","line":"        /// This method is only available on Unix platforms."},
{"lineNum":"  520","line":"        pub fn unixHas(self: Self, class: Class, permission: Permission) bool {"},
{"lineNum":"  521","line":"            const mask = @as(Mode, @intFromEnum(permission)) << @as(u3, @intFromEnum(class)) * 3;"},
{"lineNum":"  522","line":"            return self.mode & mask != 0;"},
{"lineNum":"  523","line":"        }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"        /// Sets the permissions for the chosen class. Any permissions set to `null` are left unchanged."},
{"lineNum":"  526","line":"        /// This method *DOES NOT* set permissions on the filesystem: use `File.setPermissions(permissions)`"},
{"lineNum":"  527","line":"        pub fn unixSet(self: *Self, class: Class, permissions: struct {"},
{"lineNum":"  528","line":"            read: ?bool = null,"},
{"lineNum":"  529","line":"            write: ?bool = null,"},
{"lineNum":"  530","line":"            execute: ?bool = null,"},
{"lineNum":"  531","line":"        }) void {"},
{"lineNum":"  532","line":"            const shift = @as(u3, @intFromEnum(class)) * 3;"},
{"lineNum":"  533","line":"            if (permissions.read) |r| {"},
{"lineNum":"  534","line":"                if (r) {"},
{"lineNum":"  535","line":"                    self.mode |= @as(Mode, 0o4) << shift;"},
{"lineNum":"  536","line":"                } else {"},
{"lineNum":"  537","line":"                    self.mode &= ~(@as(Mode, 0o4) << shift);"},
{"lineNum":"  538","line":"                }"},
{"lineNum":"  539","line":"            }"},
{"lineNum":"  540","line":"            if (permissions.write) |w| {"},
{"lineNum":"  541","line":"                if (w) {"},
{"lineNum":"  542","line":"                    self.mode |= @as(Mode, 0o2) << shift;"},
{"lineNum":"  543","line":"                } else {"},
{"lineNum":"  544","line":"                    self.mode &= ~(@as(Mode, 0o2) << shift);"},
{"lineNum":"  545","line":"                }"},
{"lineNum":"  546","line":"            }"},
{"lineNum":"  547","line":"            if (permissions.execute) |x| {"},
{"lineNum":"  548","line":"                if (x) {"},
{"lineNum":"  549","line":"                    self.mode |= @as(Mode, 0o1) << shift;"},
{"lineNum":"  550","line":"                } else {"},
{"lineNum":"  551","line":"                    self.mode &= ~(@as(Mode, 0o1) << shift);"},
{"lineNum":"  552","line":"                }"},
{"lineNum":"  553","line":"            }"},
{"lineNum":"  554","line":"        }"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"        /// Returns a `Permissions` struct representing the permissions from the passed mode."},
{"lineNum":"  557","line":"        pub fn unixNew(new_mode: Mode) Self {"},
{"lineNum":"  558","line":"            return Self{"},
{"lineNum":"  559","line":"                .mode = new_mode,"},
{"lineNum":"  560","line":"            };"},
{"lineNum":"  561","line":"        }"},
{"lineNum":"  562","line":"    };"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    pub const SetPermissionsError = ChmodError;"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    /// Sets permissions according to the provided `Permissions` struct."},
{"lineNum":"  567","line":"    /// This method is *NOT* available on WASI"},
{"lineNum":"  568","line":"    pub fn setPermissions(self: File, permissions: Permissions) SetPermissionsError!void {"},
{"lineNum":"  569","line":"        switch (builtin.os.tag) {"},
{"lineNum":"  570","line":"            .windows => {"},
{"lineNum":"  571","line":"                var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":"  572","line":"                var info = windows.FILE_BASIC_INFORMATION{"},
{"lineNum":"  573","line":"                    .CreationTime = 0,"},
{"lineNum":"  574","line":"                    .LastAccessTime = 0,"},
{"lineNum":"  575","line":"                    .LastWriteTime = 0,"},
{"lineNum":"  576","line":"                    .ChangeTime = 0,"},
{"lineNum":"  577","line":"                    .FileAttributes = permissions.inner.attributes,"},
{"lineNum":"  578","line":"                };"},
{"lineNum":"  579","line":"                const rc = windows.ntdll.NtSetInformationFile("},
{"lineNum":"  580","line":"                    self.handle,"},
{"lineNum":"  581","line":"                    &io_status_block,"},
{"lineNum":"  582","line":"                    &info,"},
{"lineNum":"  583","line":"                    @sizeOf(windows.FILE_BASIC_INFORMATION),"},
{"lineNum":"  584","line":"                    .FileBasicInformation,"},
{"lineNum":"  585","line":"                );"},
{"lineNum":"  586","line":"                switch (rc) {"},
{"lineNum":"  587","line":"                    .SUCCESS => return,"},
{"lineNum":"  588","line":"                    .INVALID_HANDLE => unreachable,"},
{"lineNum":"  589","line":"                    .ACCESS_DENIED => return error.AccessDenied,"},
{"lineNum":"  590","line":"                    else => return windows.unexpectedStatus(rc),"},
{"lineNum":"  591","line":"                }"},
{"lineNum":"  592","line":"            },"},
{"lineNum":"  593","line":"            .wasi => @compileError(\"Unsupported OS\"), // Wasi filesystem does not *yet* support chmod"},
{"lineNum":"  594","line":"            else => {"},
{"lineNum":"  595","line":"                try self.chmod(permissions.inner.mode);"},
{"lineNum":"  596","line":"            },"},
{"lineNum":"  597","line":"        }"},
{"lineNum":"  598","line":"    }"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    /// Cross-platform representation of file metadata."},
{"lineNum":"  601","line":"    /// Platform-specific functionality is available through the `inner` field."},
{"lineNum":"  602","line":"    pub const Metadata = struct {"},
{"lineNum":"  603","line":"        /// You may use the `inner` field to use platform-specific functionality"},
{"lineNum":"  604","line":"        inner: switch (builtin.os.tag) {"},
{"lineNum":"  605","line":"            .windows => MetadataWindows,"},
{"lineNum":"  606","line":"            .linux => MetadataLinux,"},
{"lineNum":"  607","line":"            else => MetadataUnix,"},
{"lineNum":"  608","line":"        },"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"        const Self = @This();"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"        /// Returns the size of the file"},
{"lineNum":"  613","line":"        pub fn size(self: Self) u64 {"},
{"lineNum":"  614","line":"            return self.inner.size();"},
{"lineNum":"  615","line":"        }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"        /// Returns a `Permissions` struct, representing the permissions on the file"},
{"lineNum":"  618","line":"        pub fn permissions(self: Self) Permissions {"},
{"lineNum":"  619","line":"            return self.inner.permissions();"},
{"lineNum":"  620","line":"        }"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"        /// Returns the `Kind` of file."},
{"lineNum":"  623","line":"        /// On Windows, can only return: `.file`, `.directory`, `.sym_link` or `.unknown`"},
{"lineNum":"  624","line":"        pub fn kind(self: Self) Kind {"},
{"lineNum":"  625","line":"            return self.inner.kind();"},
{"lineNum":"  626","line":"        }"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"        /// Returns the last time the file was accessed in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  629","line":"        pub fn accessed(self: Self) i128 {"},
{"lineNum":"  630","line":"            return self.inner.accessed();"},
{"lineNum":"  631","line":"        }"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"        /// Returns the time the file was modified in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  634","line":"        pub fn modified(self: Self) i128 {"},
{"lineNum":"  635","line":"            return self.inner.modified();"},
{"lineNum":"  636","line":"        }"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"        /// Returns the time the file was created in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  639","line":"        /// On Windows, this cannot return null"},
{"lineNum":"  640","line":"        /// On Linux, this returns null if the filesystem does not support creation times, or if the kernel is older than 4.11"},
{"lineNum":"  641","line":"        /// On Unices, this returns null if the filesystem or OS does not support creation times"},
{"lineNum":"  642","line":"        /// On MacOS, this returns the ctime if the filesystem does not support creation times; this is insanity, and yet another reason to hate on Apple"},
{"lineNum":"  643","line":"        pub fn created(self: Self) ?i128 {"},
{"lineNum":"  644","line":"            return self.inner.created();"},
{"lineNum":"  645","line":"        }"},
{"lineNum":"  646","line":"    };"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"    pub const MetadataUnix = struct {"},
{"lineNum":"  649","line":"        stat: os.Stat,"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"        const Self = @This();"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"        /// Returns the size of the file"},
{"lineNum":"  654","line":"        pub fn size(self: Self) u64 {"},
{"lineNum":"  655","line":"            return @as(u64, @intCast(self.stat.size));"},
{"lineNum":"  656","line":"        }"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"        /// Returns a `Permissions` struct, representing the permissions on the file"},
{"lineNum":"  659","line":"        pub fn permissions(self: Self) Permissions {"},
{"lineNum":"  660","line":"            return Permissions{ .inner = PermissionsUnix{ .mode = self.stat.mode } };"},
{"lineNum":"  661","line":"        }"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"        /// Returns the `Kind` of the file"},
{"lineNum":"  664","line":"        pub fn kind(self: Self) Kind {"},
{"lineNum":"  665","line":"            if (builtin.os.tag == .wasi and !builtin.link_libc) return switch (self.stat.filetype) {"},
{"lineNum":"  666","line":"                .BLOCK_DEVICE => .block_device,"},
{"lineNum":"  667","line":"                .CHARACTER_DEVICE => .character_device,"},
{"lineNum":"  668","line":"                .DIRECTORY => .directory,"},
{"lineNum":"  669","line":"                .SYMBOLIC_LINK => .sym_link,"},
{"lineNum":"  670","line":"                .REGULAR_FILE => .file,"},
{"lineNum":"  671","line":"                .SOCKET_STREAM, .SOCKET_DGRAM => .unix_domain_socket,"},
{"lineNum":"  672","line":"                else => .unknown,"},
{"lineNum":"  673","line":"            };"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"            const m = self.stat.mode & os.S.IFMT;"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"            switch (m) {"},
{"lineNum":"  678","line":"                os.S.IFBLK => return .block_device,"},
{"lineNum":"  679","line":"                os.S.IFCHR => return .character_device,"},
{"lineNum":"  680","line":"                os.S.IFDIR => return .directory,"},
{"lineNum":"  681","line":"                os.S.IFIFO => return .named_pipe,"},
{"lineNum":"  682","line":"                os.S.IFLNK => return .sym_link,"},
{"lineNum":"  683","line":"                os.S.IFREG => return .file,"},
{"lineNum":"  684","line":"                os.S.IFSOCK => return .unix_domain_socket,"},
{"lineNum":"  685","line":"                else => {},"},
{"lineNum":"  686","line":"            }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"            if (builtin.os.tag == .solaris) switch (m) {"},
{"lineNum":"  689","line":"                os.S.IFDOOR => return .door,"},
{"lineNum":"  690","line":"                os.S.IFPORT => return .event_port,"},
{"lineNum":"  691","line":"                else => {},"},
{"lineNum":"  692","line":"            };"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"            return .unknown;"},
{"lineNum":"  695","line":"        }"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"        /// Returns the last time the file was accessed in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  698","line":"        pub fn accessed(self: Self) i128 {"},
{"lineNum":"  699","line":"            const atime = self.stat.atime();"},
{"lineNum":"  700","line":"            return @as(i128, atime.tv_sec) * std.time.ns_per_s + atime.tv_nsec;"},
{"lineNum":"  701","line":"        }"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"        /// Returns the last time the file was modified in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  704","line":"        pub fn modified(self: Self) i128 {"},
{"lineNum":"  705","line":"            const mtime = self.stat.mtime();"},
{"lineNum":"  706","line":"            return @as(i128, mtime.tv_sec) * std.time.ns_per_s + mtime.tv_nsec;"},
{"lineNum":"  707","line":"        }"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"        /// Returns the time the file was created in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  710","line":"        /// Returns null if this is not supported by the OS or filesystem"},
{"lineNum":"  711","line":"        pub fn created(self: Self) ?i128 {"},
{"lineNum":"  712","line":"            if (!@hasDecl(@TypeOf(self.stat), \"birthtime\")) return null;"},
{"lineNum":"  713","line":"            const birthtime = self.stat.birthtime();"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"            // If the filesystem doesn\'t support this the value *should* be:"},
{"lineNum":"  716","line":"            // On FreeBSD: tv_nsec = 0, tv_sec = -1"},
{"lineNum":"  717","line":"            // On NetBSD and OpenBSD: tv_nsec = 0, tv_sec = 0"},
{"lineNum":"  718","line":"            // On MacOS, it is set to ctime -- we cannot detect this!!"},
{"lineNum":"  719","line":"            switch (builtin.os.tag) {"},
{"lineNum":"  720","line":"                .freebsd => if (birthtime.tv_sec == -1 and birthtime.tv_nsec == 0) return null,"},
{"lineNum":"  721","line":"                .netbsd, .openbsd => if (birthtime.tv_sec == 0 and birthtime.tv_nsec == 0) return null,"},
{"lineNum":"  722","line":"                .macos => {},"},
{"lineNum":"  723","line":"                else => @compileError(\"Creation time detection not implemented for OS\"),"},
{"lineNum":"  724","line":"            }"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"            return @as(i128, birthtime.tv_sec) * std.time.ns_per_s + birthtime.tv_nsec;"},
{"lineNum":"  727","line":"        }"},
{"lineNum":"  728","line":"    };"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    /// `MetadataUnix`, but using Linux\'s `statx` syscall."},
{"lineNum":"  731","line":"    /// On Linux versions below 4.11, `statx` will be filled with data from stat."},
{"lineNum":"  732","line":"    pub const MetadataLinux = struct {"},
{"lineNum":"  733","line":"        statx: os.linux.Statx,"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"        const Self = @This();"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"        /// Returns the size of the file"},
{"lineNum":"  738","line":"        pub fn size(self: Self) u64 {"},
{"lineNum":"  739","line":"            return self.statx.size;"},
{"lineNum":"  740","line":"        }"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        /// Returns a `Permissions` struct, representing the permissions on the file"},
{"lineNum":"  743","line":"        pub fn permissions(self: Self) Permissions {"},
{"lineNum":"  744","line":"            return Permissions{ .inner = PermissionsUnix{ .mode = self.statx.mode } };"},
{"lineNum":"  745","line":"        }"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"        /// Returns the `Kind` of the file"},
{"lineNum":"  748","line":"        pub fn kind(self: Self) Kind {"},
{"lineNum":"  749","line":"            const m = self.statx.mode & os.S.IFMT;"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"            switch (m) {"},
{"lineNum":"  752","line":"                os.S.IFBLK => return .block_device,"},
{"lineNum":"  753","line":"                os.S.IFCHR => return .character_device,"},
{"lineNum":"  754","line":"                os.S.IFDIR => return .directory,"},
{"lineNum":"  755","line":"                os.S.IFIFO => return .named_pipe,"},
{"lineNum":"  756","line":"                os.S.IFLNK => return .sym_link,"},
{"lineNum":"  757","line":"                os.S.IFREG => return .file,"},
{"lineNum":"  758","line":"                os.S.IFSOCK => return .unix_domain_socket,"},
{"lineNum":"  759","line":"                else => {},"},
{"lineNum":"  760","line":"            }"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"            return .unknown;"},
{"lineNum":"  763","line":"        }"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"        /// Returns the last time the file was accessed in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  766","line":"        pub fn accessed(self: Self) i128 {"},
{"lineNum":"  767","line":"            return @as(i128, self.statx.atime.tv_sec) * std.time.ns_per_s + self.statx.atime.tv_nsec;"},
{"lineNum":"  768","line":"        }"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"        /// Returns the last time the file was modified in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  771","line":"        pub fn modified(self: Self) i128 {"},
{"lineNum":"  772","line":"            return @as(i128, self.statx.mtime.tv_sec) * std.time.ns_per_s + self.statx.mtime.tv_nsec;"},
{"lineNum":"  773","line":"        }"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"        /// Returns the time the file was created in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  776","line":"        /// Returns null if this is not supported by the filesystem, or on kernels before than version 4.11"},
{"lineNum":"  777","line":"        pub fn created(self: Self) ?i128 {"},
{"lineNum":"  778","line":"            if (self.statx.mask & os.linux.STATX_BTIME == 0) return null;"},
{"lineNum":"  779","line":"            return @as(i128, self.statx.btime.tv_sec) * std.time.ns_per_s + self.statx.btime.tv_nsec;"},
{"lineNum":"  780","line":"        }"},
{"lineNum":"  781","line":"    };"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"    pub const MetadataWindows = struct {"},
{"lineNum":"  784","line":"        attributes: windows.DWORD,"},
{"lineNum":"  785","line":"        reparse_tag: windows.DWORD,"},
{"lineNum":"  786","line":"        _size: u64,"},
{"lineNum":"  787","line":"        access_time: i128,"},
{"lineNum":"  788","line":"        modified_time: i128,"},
{"lineNum":"  789","line":"        creation_time: i128,"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"        const Self = @This();"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"        /// Returns the size of the file"},
{"lineNum":"  794","line":"        pub fn size(self: Self) u64 {"},
{"lineNum":"  795","line":"            return self._size;"},
{"lineNum":"  796","line":"        }"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        /// Returns a `Permissions` struct, representing the permissions on the file"},
{"lineNum":"  799","line":"        pub fn permissions(self: Self) Permissions {"},
{"lineNum":"  800","line":"            return Permissions{ .inner = PermissionsWindows{ .attributes = self.attributes } };"},
{"lineNum":"  801","line":"        }"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"        /// Returns the `Kind` of the file."},
{"lineNum":"  804","line":"        /// Can only return: `.file`, `.directory`, `.sym_link` or `.unknown`"},
{"lineNum":"  805","line":"        pub fn kind(self: Self) Kind {"},
{"lineNum":"  806","line":"            if (self.attributes & windows.FILE_ATTRIBUTE_REPARSE_POINT != 0) {"},
{"lineNum":"  807","line":"                if (self.reparse_tag & 0x20000000 != 0) {"},
{"lineNum":"  808","line":"                    return .sym_link;"},
{"lineNum":"  809","line":"                }"},
{"lineNum":"  810","line":"            } else if (self.attributes & windows.FILE_ATTRIBUTE_DIRECTORY != 0) {"},
{"lineNum":"  811","line":"                return .directory;"},
{"lineNum":"  812","line":"            } else {"},
{"lineNum":"  813","line":"                return .file;"},
{"lineNum":"  814","line":"            }"},
{"lineNum":"  815","line":"            return .unknown;"},
{"lineNum":"  816","line":"        }"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"        /// Returns the last time the file was accessed in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  819","line":"        pub fn accessed(self: Self) i128 {"},
{"lineNum":"  820","line":"            return self.access_time;"},
{"lineNum":"  821","line":"        }"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"        /// Returns the time the file was modified in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  824","line":"        pub fn modified(self: Self) i128 {"},
{"lineNum":"  825","line":"            return self.modified_time;"},
{"lineNum":"  826","line":"        }"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"        /// Returns the time the file was created in nanoseconds since UTC 1970-01-01"},
{"lineNum":"  829","line":"        /// This never returns null, only returning an optional for compatibility with other OSes"},
{"lineNum":"  830","line":"        pub fn created(self: Self) ?i128 {"},
{"lineNum":"  831","line":"            return self.creation_time;"},
{"lineNum":"  832","line":"        }"},
{"lineNum":"  833","line":"    };"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"    pub const MetadataError = os.FStatError;"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"    pub fn metadata(self: File) MetadataError!Metadata {"},
{"lineNum":"  838","line":"        return Metadata{"},
{"lineNum":"  839","line":"            .inner = switch (builtin.os.tag) {"},
{"lineNum":"  840","line":"                .windows => blk: {"},
{"lineNum":"  841","line":"                    var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":"  842","line":"                    var info: windows.FILE_ALL_INFORMATION = undefined;"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"                    const rc = windows.ntdll.NtQueryInformationFile(self.handle, &io_status_block, &info, @sizeOf(windows.FILE_ALL_INFORMATION), .FileAllInformation);"},
{"lineNum":"  845","line":"                    switch (rc) {"},
{"lineNum":"  846","line":"                        .SUCCESS => {},"},
{"lineNum":"  847","line":"                        // Buffer overflow here indicates that there is more information available than was able to be stored in the buffer"},
{"lineNum":"  848","line":"                        // size provided. This is treated as success because the type of variable-length information that this would be relevant for"},
{"lineNum":"  849","line":"                        // (name, volume name, etc) we don\'t care about."},
{"lineNum":"  850","line":"                        .BUFFER_OVERFLOW => {},"},
{"lineNum":"  851","line":"                        .INVALID_PARAMETER => unreachable,"},
{"lineNum":"  852","line":"                        .ACCESS_DENIED => return error.AccessDenied,"},
{"lineNum":"  853","line":"                        else => return windows.unexpectedStatus(rc),"},
{"lineNum":"  854","line":"                    }"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"                    const reparse_tag: windows.DWORD = reparse_blk: {"},
{"lineNum":"  857","line":"                        if (info.BasicInformation.FileAttributes & windows.FILE_ATTRIBUTE_REPARSE_POINT != 0) {"},
{"lineNum":"  858","line":"                            var reparse_buf: [windows.MAXIMUM_REPARSE_DATA_BUFFER_SIZE]u8 = undefined;"},
{"lineNum":"  859","line":"                            try windows.DeviceIoControl(self.handle, windows.FSCTL_GET_REPARSE_POINT, null, reparse_buf[0..]);"},
{"lineNum":"  860","line":"                            const reparse_struct: *const windows.REPARSE_DATA_BUFFER = @ptrCast(@alignCast(&reparse_buf[0]));"},
{"lineNum":"  861","line":"                            break :reparse_blk reparse_struct.ReparseTag;"},
{"lineNum":"  862","line":"                        }"},
{"lineNum":"  863","line":"                        break :reparse_blk 0;"},
{"lineNum":"  864","line":"                    };"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"                    break :blk MetadataWindows{"},
{"lineNum":"  867","line":"                        .attributes = info.BasicInformation.FileAttributes,"},
{"lineNum":"  868","line":"                        .reparse_tag = reparse_tag,"},
{"lineNum":"  869","line":"                        ._size = @as(u64, @bitCast(info.StandardInformation.EndOfFile)),"},
{"lineNum":"  870","line":"                        .access_time = windows.fromSysTime(info.BasicInformation.LastAccessTime),"},
{"lineNum":"  871","line":"                        .modified_time = windows.fromSysTime(info.BasicInformation.LastWriteTime),"},
{"lineNum":"  872","line":"                        .creation_time = windows.fromSysTime(info.BasicInformation.CreationTime),"},
{"lineNum":"  873","line":"                    };"},
{"lineNum":"  874","line":"                },"},
{"lineNum":"  875","line":"                .linux => blk: {"},
{"lineNum":"  876","line":"                    var stx = mem.zeroes(os.linux.Statx);"},
{"lineNum":"  877","line":"                    const rcx = os.linux.statx(self.handle, \"\\x00\", os.linux.AT.EMPTY_PATH, os.linux.STATX_TYPE | os.linux.STATX_MODE | os.linux.STATX_ATIME | os.linux.STATX_MTIME | os.linux.STATX_BTIME, &stx);"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"                    switch (os.errno(rcx)) {"},
{"lineNum":"  880","line":"                        .SUCCESS => {},"},
{"lineNum":"  881","line":"                        // NOSYS happens when `statx` is unsupported, which is the case on kernel versions before 4.11"},
{"lineNum":"  882","line":"                        // Here, we call `fstat` and fill `stx` with the data we need"},
{"lineNum":"  883","line":"                        .NOSYS => {"},
{"lineNum":"  884","line":"                            const st = try os.fstat(self.handle);"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"                            stx.mode = @as(u16, @intCast(st.mode));"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"                            // Hacky conversion from timespec to statx_timestamp"},
{"lineNum":"  889","line":"                            stx.atime = std.mem.zeroes(os.linux.statx_timestamp);"},
{"lineNum":"  890","line":"                            stx.atime.tv_sec = st.atim.tv_sec;"},
{"lineNum":"  891","line":"                            stx.atime.tv_nsec = @as(u32, @intCast(st.atim.tv_nsec)); // Guaranteed to succeed (tv_nsec is always below 10^9)"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"                            stx.mtime = std.mem.zeroes(os.linux.statx_timestamp);"},
{"lineNum":"  894","line":"                            stx.mtime.tv_sec = st.mtim.tv_sec;"},
{"lineNum":"  895","line":"                            stx.mtime.tv_nsec = @as(u32, @intCast(st.mtim.tv_nsec));"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"                            stx.mask = os.linux.STATX_BASIC_STATS | os.linux.STATX_MTIME;"},
{"lineNum":"  898","line":"                        },"},
{"lineNum":"  899","line":"                        .BADF => unreachable,"},
{"lineNum":"  900","line":"                        .FAULT => unreachable,"},
{"lineNum":"  901","line":"                        .NOMEM => return error.SystemResources,"},
{"lineNum":"  902","line":"                        else => |err| return os.unexpectedErrno(err),"},
{"lineNum":"  903","line":"                    }"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"                    break :blk MetadataLinux{"},
{"lineNum":"  906","line":"                        .statx = stx,"},
{"lineNum":"  907","line":"                    };"},
{"lineNum":"  908","line":"                },"},
{"lineNum":"  909","line":"                else => blk: {"},
{"lineNum":"  910","line":"                    const st = try os.fstat(self.handle);"},
{"lineNum":"  911","line":"                    break :blk MetadataUnix{"},
{"lineNum":"  912","line":"                        .stat = st,"},
{"lineNum":"  913","line":"                    };"},
{"lineNum":"  914","line":"                },"},
{"lineNum":"  915","line":"            },"},
{"lineNum":"  916","line":"        };"},
{"lineNum":"  917","line":"    }"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"    pub const UpdateTimesError = os.FutimensError || windows.SetFileTimeError;"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"    /// The underlying file system may have a different granularity than nanoseconds,"},
{"lineNum":"  922","line":"    /// and therefore this function cannot guarantee any precision will be stored."},
{"lineNum":"  923","line":"    /// Further, the maximum value is limited by the system ABI. When a value is provided"},
{"lineNum":"  924","line":"    /// that exceeds this range, the value is clamped to the maximum."},
{"lineNum":"  925","line":"    /// TODO: integrate with async I/O"},
{"lineNum":"  926","line":"    pub fn updateTimes("},
{"lineNum":"  927","line":"        self: File,"},
{"lineNum":"  928","line":"        /// access timestamp in nanoseconds"},
{"lineNum":"  929","line":"        atime: i128,"},
{"lineNum":"  930","line":"        /// last modification timestamp in nanoseconds"},
{"lineNum":"  931","line":"        mtime: i128,"},
{"lineNum":"  932","line":"    ) UpdateTimesError!void {"},
{"lineNum":"  933","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  934","line":"            const atime_ft = windows.nanoSecondsToFileTime(atime);"},
{"lineNum":"  935","line":"            const mtime_ft = windows.nanoSecondsToFileTime(mtime);"},
{"lineNum":"  936","line":"            return windows.SetFileTime(self.handle, null, &atime_ft, &mtime_ft);"},
{"lineNum":"  937","line":"        }"},
{"lineNum":"  938","line":"        const times = [2]os.timespec{"},
{"lineNum":"  939","line":"            os.timespec{"},
{"lineNum":"  940","line":"                .tv_sec = math.cast(isize, @divFloor(atime, std.time.ns_per_s)) orelse maxInt(isize),"},
{"lineNum":"  941","line":"                .tv_nsec = math.cast(isize, @mod(atime, std.time.ns_per_s)) orelse maxInt(isize),"},
{"lineNum":"  942","line":"            },"},
{"lineNum":"  943","line":"            os.timespec{"},
{"lineNum":"  944","line":"                .tv_sec = math.cast(isize, @divFloor(mtime, std.time.ns_per_s)) orelse maxInt(isize),"},
{"lineNum":"  945","line":"                .tv_nsec = math.cast(isize, @mod(mtime, std.time.ns_per_s)) orelse maxInt(isize),"},
{"lineNum":"  946","line":"            },"},
{"lineNum":"  947","line":"        };"},
{"lineNum":"  948","line":"        try os.futimens(self.handle, &times);"},
{"lineNum":"  949","line":"    }"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"    /// Reads all the bytes from the current position to the end of the file."},
{"lineNum":"  952","line":"    /// On success, caller owns returned buffer."},
{"lineNum":"  953","line":"    /// If the file is larger than `max_bytes`, returns `error.FileTooBig`."},
{"lineNum":"  954","line":"    pub fn readToEndAlloc(self: File, allocator: mem.Allocator, max_bytes: usize) ![]u8 {"},
{"lineNum":"  955","line":"        return self.readToEndAllocOptions(allocator, max_bytes, null, @alignOf(u8), null);"},
{"lineNum":"  956","line":"    }"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"    /// Reads all the bytes from the current position to the end of the file."},
{"lineNum":"  959","line":"    /// On success, caller owns returned buffer."},
{"lineNum":"  960","line":"    /// If the file is larger than `max_bytes`, returns `error.FileTooBig`."},
{"lineNum":"  961","line":"    /// If `size_hint` is specified the initial buffer size is calculated using"},
{"lineNum":"  962","line":"    /// that value, otherwise an arbitrary value is used instead."},
{"lineNum":"  963","line":"    /// Allows specifying alignment and a sentinel value."},
{"lineNum":"  964","line":"    pub fn readToEndAllocOptions("},
{"lineNum":"  965","line":"        self: File,"},
{"lineNum":"  966","line":"        allocator: mem.Allocator,"},
{"lineNum":"  967","line":"        max_bytes: usize,"},
{"lineNum":"  968","line":"        size_hint: ?usize,"},
{"lineNum":"  969","line":"        comptime alignment: u29,"},
{"lineNum":"  970","line":"        comptime optional_sentinel: ?u8,"},
{"lineNum":"  971","line":"    ) !(if (optional_sentinel) |s| [:s]align(alignment) u8 else []align(alignment) u8) {"},
{"lineNum":"  972","line":"        // If no size hint is provided fall back to the size=0 code path"},
{"lineNum":"  973","line":"        const size = size_hint orelse 0;"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"        // The file size returned by stat is used as hint to set the buffer"},
{"lineNum":"  976","line":"        // size. If the reported size is zero, as it happens on Linux for files"},
{"lineNum":"  977","line":"        // in /proc, a small buffer is allocated instead."},
{"lineNum":"  978","line":"        const initial_cap = (if (size > 0) size else 1024) + @intFromBool(optional_sentinel != null);"},
{"lineNum":"  979","line":"        var array_list = try std.ArrayListAligned(u8, alignment).initCapacity(allocator, initial_cap);"},
{"lineNum":"  980","line":"        defer array_list.deinit();"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"        self.reader().readAllArrayListAligned(alignment, &array_list, max_bytes) catch |err| switch (err) {"},
{"lineNum":"  983","line":"            error.StreamTooLong => return error.FileTooBig,"},
{"lineNum":"  984","line":"            else => |e| return e,"},
{"lineNum":"  985","line":"        };"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"        if (optional_sentinel) |sentinel| {"},
{"lineNum":"  988","line":"            return try array_list.toOwnedSliceSentinel(sentinel);"},
{"lineNum":"  989","line":"        } else {"},
{"lineNum":"  990","line":"            return try array_list.toOwnedSlice();"},
{"lineNum":"  991","line":"        }"},
{"lineNum":"  992","line":"    }"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"    pub const ReadError = os.ReadError;"},
{"lineNum":"  995","line":"    pub const PReadError = os.PReadError;"},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"    pub fn read(self: File, buffer: []u8) ReadError!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  998","line":"        if (is_windows) {"},
{"lineNum":"  999","line":"            return windows.ReadFile(self.handle, buffer, null, self.intended_io_mode);"},
{"lineNum":" 1000","line":"        }"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1003","line":"            return os.read(self.handle, buffer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1004","line":"        } else {"},
{"lineNum":" 1005","line":"            return std.event.Loop.instance.?.read(self.handle, buffer, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1006","line":"        }"},
{"lineNum":" 1007","line":"    }"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"    /// Returns the number of bytes read. If the number read is smaller than `buffer.len`, it"},
{"lineNum":" 1010","line":"    /// means the file reached the end. Reaching the end of a file is not an error condition."},
{"lineNum":" 1011","line":"    pub fn readAll(self: File, buffer: []u8) ReadError!usize {"},
{"lineNum":" 1012","line":"        var index: usize = 0;"},
{"lineNum":" 1013","line":"        while (index != buffer.len) {"},
{"lineNum":" 1014","line":"            const amt = try self.read(buffer[index..]);"},
{"lineNum":" 1015","line":"            if (amt == 0) break;"},
{"lineNum":" 1016","line":"            index += amt;"},
{"lineNum":" 1017","line":"        }"},
{"lineNum":" 1018","line":"        return index;"},
{"lineNum":" 1019","line":"    }"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1022","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1023","line":"    pub fn pread(self: File, buffer: []u8, offset: u64) PReadError!usize {"},
{"lineNum":" 1024","line":"        if (is_windows) {"},
{"lineNum":" 1025","line":"            return windows.ReadFile(self.handle, buffer, offset, self.intended_io_mode);"},
{"lineNum":" 1026","line":"        }"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1029","line":"            return os.pread(self.handle, buffer, offset);"},
{"lineNum":" 1030","line":"        } else {"},
{"lineNum":" 1031","line":"            return std.event.Loop.instance.?.pread(self.handle, buffer, offset, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1032","line":"        }"},
{"lineNum":" 1033","line":"    }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"    /// Returns the number of bytes read. If the number read is smaller than `buffer.len`, it"},
{"lineNum":" 1036","line":"    /// means the file reached the end. Reaching the end of a file is not an error condition."},
{"lineNum":" 1037","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1038","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1039","line":"    pub fn preadAll(self: File, buffer: []u8, offset: u64) PReadError!usize {"},
{"lineNum":" 1040","line":"        var index: usize = 0;"},
{"lineNum":" 1041","line":"        while (index != buffer.len) {"},
{"lineNum":" 1042","line":"            const amt = try self.pread(buffer[index..], offset + index);"},
{"lineNum":" 1043","line":"            if (amt == 0) break;"},
{"lineNum":" 1044","line":"            index += amt;"},
{"lineNum":" 1045","line":"        }"},
{"lineNum":" 1046","line":"        return index;"},
{"lineNum":" 1047","line":"    }"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1050","line":"    pub fn readv(self: File, iovecs: []const os.iovec) ReadError!usize {"},
{"lineNum":" 1051","line":"        if (is_windows) {"},
{"lineNum":" 1052","line":"            // TODO improve this to use ReadFileScatter"},
{"lineNum":" 1053","line":"            if (iovecs.len == 0) return @as(usize, 0);"},
{"lineNum":" 1054","line":"            const first = iovecs[0];"},
{"lineNum":" 1055","line":"            return windows.ReadFile(self.handle, first.iov_base[0..first.iov_len], null, self.intended_io_mode);"},
{"lineNum":" 1056","line":"        }"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1059","line":"            return os.readv(self.handle, iovecs);"},
{"lineNum":" 1060","line":"        } else {"},
{"lineNum":" 1061","line":"            return std.event.Loop.instance.?.readv(self.handle, iovecs, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1062","line":"        }"},
{"lineNum":" 1063","line":"    }"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"    /// Returns the number of bytes read. If the number read is smaller than the total bytes"},
{"lineNum":" 1066","line":"    /// from all the buffers, it means the file reached the end. Reaching the end of a file"},
{"lineNum":" 1067","line":"    /// is not an error condition."},
{"lineNum":" 1068","line":"    ///"},
{"lineNum":" 1069","line":"    /// The `iovecs` parameter is mutable because:"},
{"lineNum":" 1070","line":"    /// * This function needs to mutate the fields in order to handle partial"},
{"lineNum":" 1071","line":"    ///   reads from the underlying OS layer."},
{"lineNum":" 1072","line":"    /// * The OS layer expects pointer addresses to be inside the application\'s address space"},
{"lineNum":" 1073","line":"    ///   even if the length is zero. Meanwhile, in Zig, slices may have undefined pointer"},
{"lineNum":" 1074","line":"    ///   addresses when the length is zero. So this function modifies the iov_base fields"},
{"lineNum":" 1075","line":"    ///   when the length is zero."},
{"lineNum":" 1076","line":"    ///"},
{"lineNum":" 1077","line":"    /// Related open issue: https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1078","line":"    pub fn readvAll(self: File, iovecs: []os.iovec) ReadError!usize {"},
{"lineNum":" 1079","line":"        if (iovecs.len == 0) return 0;"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"        // We use the address of this local variable for all zero-length"},
{"lineNum":" 1082","line":"        // vectors so that the OS does not complain that we are giving it"},
{"lineNum":" 1083","line":"        // addresses outside the application\'s address space."},
{"lineNum":" 1084","line":"        var garbage: [1]u8 = undefined;"},
{"lineNum":" 1085","line":"        for (iovecs) |*v| {"},
{"lineNum":" 1086","line":"            if (v.iov_len == 0) v.iov_base = &garbage;"},
{"lineNum":" 1087","line":"        }"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"        var i: usize = 0;"},
{"lineNum":" 1090","line":"        var off: usize = 0;"},
{"lineNum":" 1091","line":"        while (true) {"},
{"lineNum":" 1092","line":"            var amt = try self.readv(iovecs[i..]);"},
{"lineNum":" 1093","line":"            var eof = amt == 0;"},
{"lineNum":" 1094","line":"            off += amt;"},
{"lineNum":" 1095","line":"            while (amt >= iovecs[i].iov_len) {"},
{"lineNum":" 1096","line":"                amt -= iovecs[i].iov_len;"},
{"lineNum":" 1097","line":"                i += 1;"},
{"lineNum":" 1098","line":"                if (i >= iovecs.len) return off;"},
{"lineNum":" 1099","line":"                eof = false;"},
{"lineNum":" 1100","line":"            }"},
{"lineNum":" 1101","line":"            if (eof) return off;"},
{"lineNum":" 1102","line":"            iovecs[i].iov_base += amt;"},
{"lineNum":" 1103","line":"            iovecs[i].iov_len -= amt;"},
{"lineNum":" 1104","line":"        }"},
{"lineNum":" 1105","line":"    }"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1108","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1109","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1110","line":"    pub fn preadv(self: File, iovecs: []const os.iovec, offset: u64) PReadError!usize {"},
{"lineNum":" 1111","line":"        if (is_windows) {"},
{"lineNum":" 1112","line":"            // TODO improve this to use ReadFileScatter"},
{"lineNum":" 1113","line":"            if (iovecs.len == 0) return @as(usize, 0);"},
{"lineNum":" 1114","line":"            const first = iovecs[0];"},
{"lineNum":" 1115","line":"            return windows.ReadFile(self.handle, first.iov_base[0..first.iov_len], offset, self.intended_io_mode);"},
{"lineNum":" 1116","line":"        }"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1119","line":"            return os.preadv(self.handle, iovecs, offset);"},
{"lineNum":" 1120","line":"        } else {"},
{"lineNum":" 1121","line":"            return std.event.Loop.instance.?.preadv(self.handle, iovecs, offset, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1122","line":"        }"},
{"lineNum":" 1123","line":"    }"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"    /// Returns the number of bytes read. If the number read is smaller than the total bytes"},
{"lineNum":" 1126","line":"    /// from all the buffers, it means the file reached the end. Reaching the end of a file"},
{"lineNum":" 1127","line":"    /// is not an error condition."},
{"lineNum":" 1128","line":"    /// The `iovecs` parameter is mutable because this function needs to mutate the fields in"},
{"lineNum":" 1129","line":"    /// order to handle partial reads from the underlying OS layer."},
{"lineNum":" 1130","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1131","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1132","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1133","line":"    pub fn preadvAll(self: File, iovecs: []os.iovec, offset: u64) PReadError!usize {"},
{"lineNum":" 1134","line":"        if (iovecs.len == 0) return 0;"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"        var i: usize = 0;"},
{"lineNum":" 1137","line":"        var off: usize = 0;"},
{"lineNum":" 1138","line":"        while (true) {"},
{"lineNum":" 1139","line":"            var amt = try self.preadv(iovecs[i..], offset + off);"},
{"lineNum":" 1140","line":"            var eof = amt == 0;"},
{"lineNum":" 1141","line":"            off += amt;"},
{"lineNum":" 1142","line":"            while (amt >= iovecs[i].iov_len) {"},
{"lineNum":" 1143","line":"                amt -= iovecs[i].iov_len;"},
{"lineNum":" 1144","line":"                i += 1;"},
{"lineNum":" 1145","line":"                if (i >= iovecs.len) return off;"},
{"lineNum":" 1146","line":"                eof = false;"},
{"lineNum":" 1147","line":"            }"},
{"lineNum":" 1148","line":"            if (eof) return off;"},
{"lineNum":" 1149","line":"            iovecs[i].iov_base += amt;"},
{"lineNum":" 1150","line":"            iovecs[i].iov_len -= amt;"},
{"lineNum":" 1151","line":"        }"},
{"lineNum":" 1152","line":"    }"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"    pub const WriteError = os.WriteError;"},
{"lineNum":" 1155","line":"    pub const PWriteError = os.PWriteError;"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"    pub fn write(self: File, bytes: []const u8) WriteError!usize {","class":"lineCov","hits":"1","order":"682","possible_hits":"1",},
{"lineNum":" 1158","line":"        if (is_windows) {"},
{"lineNum":" 1159","line":"            return windows.WriteFile(self.handle, bytes, null, self.intended_io_mode);"},
{"lineNum":" 1160","line":"        }"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1163","line":"            return os.write(self.handle, bytes);","class":"lineCov","hits":"1","order":"683","possible_hits":"1",},
{"lineNum":" 1164","line":"        } else {"},
{"lineNum":" 1165","line":"            return std.event.Loop.instance.?.write(self.handle, bytes, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1166","line":"        }"},
{"lineNum":" 1167","line":"    }"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"    pub fn writeAll(self: File, bytes: []const u8) WriteError!void {"},
{"lineNum":" 1170","line":"        var index: usize = 0;"},
{"lineNum":" 1171","line":"        while (index < bytes.len) {"},
{"lineNum":" 1172","line":"            index += try self.write(bytes[index..]);"},
{"lineNum":" 1173","line":"        }"},
{"lineNum":" 1174","line":"    }"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1177","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1178","line":"    pub fn pwrite(self: File, bytes: []const u8, offset: u64) PWriteError!usize {"},
{"lineNum":" 1179","line":"        if (is_windows) {"},
{"lineNum":" 1180","line":"            return windows.WriteFile(self.handle, bytes, offset, self.intended_io_mode);"},
{"lineNum":" 1181","line":"        }"},
{"lineNum":" 1182","line":""},
{"lineNum":" 1183","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1184","line":"            return os.pwrite(self.handle, bytes, offset);"},
{"lineNum":" 1185","line":"        } else {"},
{"lineNum":" 1186","line":"            return std.event.Loop.instance.?.pwrite(self.handle, bytes, offset, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1187","line":"        }"},
{"lineNum":" 1188","line":"    }"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1191","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1192","line":"    pub fn pwriteAll(self: File, bytes: []const u8, offset: u64) PWriteError!void {"},
{"lineNum":" 1193","line":"        var index: usize = 0;"},
{"lineNum":" 1194","line":"        while (index < bytes.len) {"},
{"lineNum":" 1195","line":"            index += try self.pwrite(bytes[index..], offset + index);"},
{"lineNum":" 1196","line":"        }"},
{"lineNum":" 1197","line":"    }"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1200","line":"    /// See equivalent function: `std.net.Stream.writev`."},
{"lineNum":" 1201","line":"    pub fn writev(self: File, iovecs: []const os.iovec_const) WriteError!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1202","line":"        if (is_windows) {"},
{"lineNum":" 1203","line":"            // TODO improve this to use WriteFileScatter"},
{"lineNum":" 1204","line":"            if (iovecs.len == 0) return @as(usize, 0);"},
{"lineNum":" 1205","line":"            const first = iovecs[0];"},
{"lineNum":" 1206","line":"            return windows.WriteFile(self.handle, first.iov_base[0..first.iov_len], null, self.intended_io_mode);"},
{"lineNum":" 1207","line":"        }"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1210","line":"            return os.writev(self.handle, iovecs);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1211","line":"        } else {"},
{"lineNum":" 1212","line":"            return std.event.Loop.instance.?.writev(self.handle, iovecs, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1213","line":"        }"},
{"lineNum":" 1214","line":"    }"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"    /// The `iovecs` parameter is mutable because:"},
{"lineNum":" 1217","line":"    /// * This function needs to mutate the fields in order to handle partial"},
{"lineNum":" 1218","line":"    ///   writes from the underlying OS layer."},
{"lineNum":" 1219","line":"    /// * The OS layer expects pointer addresses to be inside the application\'s address space"},
{"lineNum":" 1220","line":"    ///   even if the length is zero. Meanwhile, in Zig, slices may have undefined pointer"},
{"lineNum":" 1221","line":"    ///   addresses when the length is zero. So this function modifies the iov_base fields"},
{"lineNum":" 1222","line":"    ///   when the length is zero."},
{"lineNum":" 1223","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1224","line":"    /// See equivalent function: `std.net.Stream.writevAll`."},
{"lineNum":" 1225","line":"    pub fn writevAll(self: File, iovecs: []os.iovec_const) WriteError!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1226","line":"        if (iovecs.len == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"        // We use the address of this local variable for all zero-length"},
{"lineNum":" 1229","line":"        // vectors so that the OS does not complain that we are giving it"},
{"lineNum":" 1230","line":"        // addresses outside the application\'s address space."},
{"lineNum":" 1231","line":"        var garbage: [1]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1232","line":"        for (iovecs) |*v| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1233","line":"            if (v.iov_len == 0) v.iov_base = &garbage;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1234","line":"        }"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"        var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1237","line":"        while (true) {"},
{"lineNum":" 1238","line":"            var amt = try self.writev(iovecs[i..]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1239","line":"            while (amt >= iovecs[i].iov_len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1240","line":"                amt -= iovecs[i].iov_len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1241","line":"                i += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1242","line":"                if (i >= iovecs.len) return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1243","line":"            }"},
{"lineNum":" 1244","line":"            iovecs[i].iov_base += amt;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1245","line":"            iovecs[i].iov_len -= amt;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1246","line":"        }"},
{"lineNum":" 1247","line":"    }"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1250","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1251","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1252","line":"    pub fn pwritev(self: File, iovecs: []os.iovec_const, offset: u64) PWriteError!usize {"},
{"lineNum":" 1253","line":"        if (is_windows) {"},
{"lineNum":" 1254","line":"            // TODO improve this to use WriteFileScatter"},
{"lineNum":" 1255","line":"            if (iovecs.len == 0) return @as(usize, 0);"},
{"lineNum":" 1256","line":"            const first = iovecs[0];"},
{"lineNum":" 1257","line":"            return windows.WriteFile(self.handle, first.iov_base[0..first.iov_len], offset, self.intended_io_mode);"},
{"lineNum":" 1258","line":"        }"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"        if (self.intended_io_mode == .blocking) {"},
{"lineNum":" 1261","line":"            return os.pwritev(self.handle, iovecs, offset);"},
{"lineNum":" 1262","line":"        } else {"},
{"lineNum":" 1263","line":"            return std.event.Loop.instance.?.pwritev(self.handle, iovecs, offset, self.capable_io_mode != self.intended_io_mode);"},
{"lineNum":" 1264","line":"        }"},
{"lineNum":" 1265","line":"    }"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"    /// The `iovecs` parameter is mutable because this function needs to mutate the fields in"},
{"lineNum":" 1268","line":"    /// order to handle partial writes from the underlying OS layer."},
{"lineNum":" 1269","line":"    /// See https://github.com/ziglang/zig/issues/7699"},
{"lineNum":" 1270","line":"    /// On Windows, this function currently does alter the file pointer."},
{"lineNum":" 1271","line":"    /// https://github.com/ziglang/zig/issues/12783"},
{"lineNum":" 1272","line":"    pub fn pwritevAll(self: File, iovecs: []os.iovec_const, offset: u64) PWriteError!void {"},
{"lineNum":" 1273","line":"        if (iovecs.len == 0) return;"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"        var i: usize = 0;"},
{"lineNum":" 1276","line":"        var off: u64 = 0;"},
{"lineNum":" 1277","line":"        while (true) {"},
{"lineNum":" 1278","line":"            var amt = try self.pwritev(iovecs[i..], offset + off);"},
{"lineNum":" 1279","line":"            off += amt;"},
{"lineNum":" 1280","line":"            while (amt >= iovecs[i].iov_len) {"},
{"lineNum":" 1281","line":"                amt -= iovecs[i].iov_len;"},
{"lineNum":" 1282","line":"                i += 1;"},
{"lineNum":" 1283","line":"                if (i >= iovecs.len) return;"},
{"lineNum":" 1284","line":"            }"},
{"lineNum":" 1285","line":"            iovecs[i].iov_base += amt;"},
{"lineNum":" 1286","line":"            iovecs[i].iov_len -= amt;"},
{"lineNum":" 1287","line":"        }"},
{"lineNum":" 1288","line":"    }"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"    pub const CopyRangeError = os.CopyFileRangeError;"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"    pub fn copyRange(in: File, in_offset: u64, out: File, out_offset: u64, len: u64) CopyRangeError!u64 {"},
{"lineNum":" 1293","line":"        const adjusted_len = math.cast(usize, len) orelse math.maxInt(usize);"},
{"lineNum":" 1294","line":"        const result = try os.copy_file_range(in.handle, in_offset, out.handle, out_offset, adjusted_len, 0);"},
{"lineNum":" 1295","line":"        return result;"},
{"lineNum":" 1296","line":"    }"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"    /// Returns the number of bytes copied. If the number read is smaller than `buffer.len`, it"},
{"lineNum":" 1299","line":"    /// means the in file reached the end. Reaching the end of a file is not an error condition."},
{"lineNum":" 1300","line":"    pub fn copyRangeAll(in: File, in_offset: u64, out: File, out_offset: u64, len: u64) CopyRangeError!u64 {"},
{"lineNum":" 1301","line":"        var total_bytes_copied: u64 = 0;"},
{"lineNum":" 1302","line":"        var in_off = in_offset;"},
{"lineNum":" 1303","line":"        var out_off = out_offset;"},
{"lineNum":" 1304","line":"        while (total_bytes_copied < len) {"},
{"lineNum":" 1305","line":"            const amt_copied = try copyRange(in, in_off, out, out_off, len - total_bytes_copied);"},
{"lineNum":" 1306","line":"            if (amt_copied == 0) return total_bytes_copied;"},
{"lineNum":" 1307","line":"            total_bytes_copied += amt_copied;"},
{"lineNum":" 1308","line":"            in_off += amt_copied;"},
{"lineNum":" 1309","line":"            out_off += amt_copied;"},
{"lineNum":" 1310","line":"        }"},
{"lineNum":" 1311","line":"        return total_bytes_copied;"},
{"lineNum":" 1312","line":"    }"},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"    pub const WriteFileOptions = struct {"},
{"lineNum":" 1315","line":"        in_offset: u64 = 0,"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"        /// `null` means the entire file. `0` means no bytes from the file."},
{"lineNum":" 1318","line":"        /// When this is `null`, trailers must be sent in a separate writev() call"},
{"lineNum":" 1319","line":"        /// due to a flaw in the BSD sendfile API. Other operating systems, such as"},
{"lineNum":" 1320","line":"        /// Linux, already do this anyway due to API limitations."},
{"lineNum":" 1321","line":"        /// If the size of the source file is known, passing the size here will save one syscall."},
{"lineNum":" 1322","line":"        in_len: ?u64 = null,"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"        headers_and_trailers: []os.iovec_const = &[0]os.iovec_const{},"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"        /// The trailer count is inferred from `headers_and_trailers.len - header_count`"},
{"lineNum":" 1327","line":"        header_count: usize = 0,"},
{"lineNum":" 1328","line":"    };"},
{"lineNum":" 1329","line":""},
{"lineNum":" 1330","line":"    pub const WriteFileError = ReadError || error{EndOfStream} || WriteError;"},
{"lineNum":" 1331","line":""},
{"lineNum":" 1332","line":"    pub fn writeFileAll(self: File, in_file: File, args: WriteFileOptions) WriteFileError!void {"},
{"lineNum":" 1333","line":"        return self.writeFileAllSendfile(in_file, args) catch |err| switch (err) {"},
{"lineNum":" 1334","line":"            error.Unseekable,"},
{"lineNum":" 1335","line":"            error.FastOpenAlreadyInProgress,"},
{"lineNum":" 1336","line":"            error.MessageTooBig,"},
{"lineNum":" 1337","line":"            error.FileDescriptorNotASocket,"},
{"lineNum":" 1338","line":"            error.NetworkUnreachable,"},
{"lineNum":" 1339","line":"            error.NetworkSubsystemFailed,"},
{"lineNum":" 1340","line":"            => return self.writeFileAllUnseekable(in_file, args),"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"            else => |e| return e,"},
{"lineNum":" 1343","line":"        };"},
{"lineNum":" 1344","line":"    }"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"    /// Does not try seeking in either of the File parameters."},
{"lineNum":" 1347","line":"    /// See `writeFileAll` as an alternative to calling this."},
{"lineNum":" 1348","line":"    pub fn writeFileAllUnseekable(self: File, in_file: File, args: WriteFileOptions) WriteFileError!void {"},
{"lineNum":" 1349","line":"        const headers = args.headers_and_trailers[0..args.header_count];"},
{"lineNum":" 1350","line":"        const trailers = args.headers_and_trailers[args.header_count..];"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"        try self.writevAll(headers);"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"        try in_file.reader().skipBytes(args.in_offset, .{ .buf_size = 4096 });"},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"        var fifo = std.fifo.LinearFifo(u8, .{ .Static = 4096 }).init();"},
{"lineNum":" 1357","line":"        if (args.in_len) |len| {"},
{"lineNum":" 1358","line":"            var stream = std.io.limitedReader(in_file.reader(), len);"},
{"lineNum":" 1359","line":"            try fifo.pump(stream.reader(), self.writer());"},
{"lineNum":" 1360","line":"        } else {"},
{"lineNum":" 1361","line":"            try fifo.pump(in_file.reader(), self.writer());"},
{"lineNum":" 1362","line":"        }"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"        try self.writevAll(trailers);"},
{"lineNum":" 1365","line":"    }"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"    /// Low level function which can fail for OS-specific reasons."},
{"lineNum":" 1368","line":"    /// See `writeFileAll` as an alternative to calling this."},
{"lineNum":" 1369","line":"    /// TODO integrate with async I/O"},
{"lineNum":" 1370","line":"    fn writeFileAllSendfile(self: File, in_file: File, args: WriteFileOptions) os.SendFileError!void {"},
{"lineNum":" 1371","line":"        const count = blk: {"},
{"lineNum":" 1372","line":"            if (args.in_len) |l| {"},
{"lineNum":" 1373","line":"                if (l == 0) {"},
{"lineNum":" 1374","line":"                    return self.writevAll(args.headers_and_trailers);"},
{"lineNum":" 1375","line":"                } else {"},
{"lineNum":" 1376","line":"                    break :blk l;"},
{"lineNum":" 1377","line":"                }"},
{"lineNum":" 1378","line":"            } else {"},
{"lineNum":" 1379","line":"                break :blk 0;"},
{"lineNum":" 1380","line":"            }"},
{"lineNum":" 1381","line":"        };"},
{"lineNum":" 1382","line":"        const headers = args.headers_and_trailers[0..args.header_count];"},
{"lineNum":" 1383","line":"        const trailers = args.headers_and_trailers[args.header_count..];"},
{"lineNum":" 1384","line":"        const zero_iovec = &[0]os.iovec_const{};"},
{"lineNum":" 1385","line":"        // When reading the whole file, we cannot put the trailers in the sendfile() syscall,"},
{"lineNum":" 1386","line":"        // because we have no way to determine whether a partial write is past the end of the file or not."},
{"lineNum":" 1387","line":"        const trls = if (count == 0) zero_iovec else trailers;"},
{"lineNum":" 1388","line":"        const offset = args.in_offset;"},
{"lineNum":" 1389","line":"        const out_fd = self.handle;"},
{"lineNum":" 1390","line":"        const in_fd = in_file.handle;"},
{"lineNum":" 1391","line":"        const flags = 0;"},
{"lineNum":" 1392","line":"        var amt: usize = 0;"},
{"lineNum":" 1393","line":"        hdrs: {"},
{"lineNum":" 1394","line":"            var i: usize = 0;"},
{"lineNum":" 1395","line":"            while (i < headers.len) {"},
{"lineNum":" 1396","line":"                amt = try os.sendfile(out_fd, in_fd, offset, count, headers[i..], trls, flags);"},
{"lineNum":" 1397","line":"                while (amt >= headers[i].iov_len) {"},
{"lineNum":" 1398","line":"                    amt -= headers[i].iov_len;"},
{"lineNum":" 1399","line":"                    i += 1;"},
{"lineNum":" 1400","line":"                    if (i >= headers.len) break :hdrs;"},
{"lineNum":" 1401","line":"                }"},
{"lineNum":" 1402","line":"                headers[i].iov_base += amt;"},
{"lineNum":" 1403","line":"                headers[i].iov_len -= amt;"},
{"lineNum":" 1404","line":"            }"},
{"lineNum":" 1405","line":"        }"},
{"lineNum":" 1406","line":"        if (count == 0) {"},
{"lineNum":" 1407","line":"            var off: u64 = amt;"},
{"lineNum":" 1408","line":"            while (true) {"},
{"lineNum":" 1409","line":"                amt = try os.sendfile(out_fd, in_fd, offset + off, 0, zero_iovec, zero_iovec, flags);"},
{"lineNum":" 1410","line":"                if (amt == 0) break;"},
{"lineNum":" 1411","line":"                off += amt;"},
{"lineNum":" 1412","line":"            }"},
{"lineNum":" 1413","line":"        } else {"},
{"lineNum":" 1414","line":"            var off: u64 = amt;"},
{"lineNum":" 1415","line":"            while (off < count) {"},
{"lineNum":" 1416","line":"                amt = try os.sendfile(out_fd, in_fd, offset + off, count - off, zero_iovec, trailers, flags);"},
{"lineNum":" 1417","line":"                off += amt;"},
{"lineNum":" 1418","line":"            }"},
{"lineNum":" 1419","line":"            amt = @as(usize, @intCast(off - count));"},
{"lineNum":" 1420","line":"        }"},
{"lineNum":" 1421","line":"        var i: usize = 0;"},
{"lineNum":" 1422","line":"        while (i < trailers.len) {"},
{"lineNum":" 1423","line":"            while (amt >= trailers[i].iov_len) {"},
{"lineNum":" 1424","line":"                amt -= trailers[i].iov_len;"},
{"lineNum":" 1425","line":"                i += 1;"},
{"lineNum":" 1426","line":"                if (i >= trailers.len) return;"},
{"lineNum":" 1427","line":"            }"},
{"lineNum":" 1428","line":"            trailers[i].iov_base += amt;"},
{"lineNum":" 1429","line":"            trailers[i].iov_len -= amt;"},
{"lineNum":" 1430","line":"            amt = try os.writev(self.handle, trailers[i..]);"},
{"lineNum":" 1431","line":"        }"},
{"lineNum":" 1432","line":"    }"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"    pub const Reader = io.Reader(File, ReadError, read);"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"    pub fn reader(file: File) Reader {"},
{"lineNum":" 1437","line":"        return .{ .context = file };"},
{"lineNum":" 1438","line":"    }"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"    pub const Writer = io.Writer(File, WriteError, write);"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    pub fn writer(file: File) Writer {","class":"lineCov","hits":"1","order":"1803","possible_hits":"1",},
{"lineNum":" 1443","line":"        return .{ .context = file };","class":"lineCov","hits":"1","order":"1804","possible_hits":"1",},
{"lineNum":" 1444","line":"    }"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"    pub const SeekableStream = io.SeekableStream("},
{"lineNum":" 1447","line":"        File,"},
{"lineNum":" 1448","line":"        SeekError,"},
{"lineNum":" 1449","line":"        GetSeekPosError,"},
{"lineNum":" 1450","line":"        seekTo,"},
{"lineNum":" 1451","line":"        seekBy,"},
{"lineNum":" 1452","line":"        getPos,"},
{"lineNum":" 1453","line":"        getEndPos,"},
{"lineNum":" 1454","line":"    );"},
{"lineNum":" 1455","line":""},
{"lineNum":" 1456","line":"    pub fn seekableStream(file: File) SeekableStream {"},
{"lineNum":" 1457","line":"        return .{ .context = file };"},
{"lineNum":" 1458","line":"    }"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"    const range_off: windows.LARGE_INTEGER = 0;"},
{"lineNum":" 1461","line":"    const range_len: windows.LARGE_INTEGER = 1;"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"    pub const LockError = error{"},
{"lineNum":" 1464","line":"        SystemResources,"},
{"lineNum":" 1465","line":"        FileLocksNotSupported,"},
{"lineNum":" 1466","line":"    } || os.UnexpectedError;"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"    /// Blocks when an incompatible lock is held by another process."},
{"lineNum":" 1469","line":"    /// A process may hold only one type of lock (shared or exclusive) on"},
{"lineNum":" 1470","line":"    /// a file. When a process terminates in any way, the lock is released."},
{"lineNum":" 1471","line":"    ///"},
{"lineNum":" 1472","line":"    /// Assumes the file is unlocked."},
{"lineNum":" 1473","line":"    ///"},
{"lineNum":" 1474","line":"    /// TODO: integrate with async I/O"},
{"lineNum":" 1475","line":"    pub fn lock(file: File, l: Lock) LockError!void {"},
{"lineNum":" 1476","line":"        if (is_windows) {"},
{"lineNum":" 1477","line":"            var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1478","line":"            const exclusive = switch (l) {"},
{"lineNum":" 1479","line":"                .none => return,"},
{"lineNum":" 1480","line":"                .shared => false,"},
{"lineNum":" 1481","line":"                .exclusive => true,"},
{"lineNum":" 1482","line":"            };"},
{"lineNum":" 1483","line":"            return windows.LockFile("},
{"lineNum":" 1484","line":"                file.handle,"},
{"lineNum":" 1485","line":"                null,"},
{"lineNum":" 1486","line":"                null,"},
{"lineNum":" 1487","line":"                null,"},
{"lineNum":" 1488","line":"                &io_status_block,"},
{"lineNum":" 1489","line":"                &range_off,"},
{"lineNum":" 1490","line":"                &range_len,"},
{"lineNum":" 1491","line":"                null,"},
{"lineNum":" 1492","line":"                windows.FALSE, // non-blocking=false"},
{"lineNum":" 1493","line":"                @intFromBool(exclusive),"},
{"lineNum":" 1494","line":"            ) catch |err| switch (err) {"},
{"lineNum":" 1495","line":"                error.WouldBlock => unreachable, // non-blocking=false"},
{"lineNum":" 1496","line":"                else => |e| return e,"},
{"lineNum":" 1497","line":"            };"},
{"lineNum":" 1498","line":"        } else {"},
{"lineNum":" 1499","line":"            return os.flock(file.handle, switch (l) {"},
{"lineNum":" 1500","line":"                .none => os.LOCK.UN,"},
{"lineNum":" 1501","line":"                .shared => os.LOCK.SH,"},
{"lineNum":" 1502","line":"                .exclusive => os.LOCK.EX,"},
{"lineNum":" 1503","line":"            }) catch |err| switch (err) {"},
{"lineNum":" 1504","line":"                error.WouldBlock => unreachable, // non-blocking=false"},
{"lineNum":" 1505","line":"                else => |e| return e,"},
{"lineNum":" 1506","line":"            };"},
{"lineNum":" 1507","line":"        }"},
{"lineNum":" 1508","line":"    }"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"    /// Assumes the file is locked."},
{"lineNum":" 1511","line":"    pub fn unlock(file: File) void {"},
{"lineNum":" 1512","line":"        if (is_windows) {"},
{"lineNum":" 1513","line":"            var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1514","line":"            return windows.UnlockFile("},
{"lineNum":" 1515","line":"                file.handle,"},
{"lineNum":" 1516","line":"                &io_status_block,"},
{"lineNum":" 1517","line":"                &range_off,"},
{"lineNum":" 1518","line":"                &range_len,"},
{"lineNum":" 1519","line":"                null,"},
{"lineNum":" 1520","line":"            ) catch |err| switch (err) {"},
{"lineNum":" 1521","line":"                error.RangeNotLocked => unreachable, // Function assumes unlocked."},
{"lineNum":" 1522","line":"                error.Unexpected => unreachable, // Resource deallocation must succeed."},
{"lineNum":" 1523","line":"            };"},
{"lineNum":" 1524","line":"        } else {"},
{"lineNum":" 1525","line":"            return os.flock(file.handle, os.LOCK.UN) catch |err| switch (err) {"},
{"lineNum":" 1526","line":"                error.WouldBlock => unreachable, // unlocking can\'t block"},
{"lineNum":" 1527","line":"                error.SystemResources => unreachable, // We are deallocating resources."},
{"lineNum":" 1528","line":"                error.FileLocksNotSupported => unreachable, // We already got the lock."},
{"lineNum":" 1529","line":"                error.Unexpected => unreachable, // Resource deallocation must succeed."},
{"lineNum":" 1530","line":"            };"},
{"lineNum":" 1531","line":"        }"},
{"lineNum":" 1532","line":"    }"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"    /// Attempts to obtain a lock, returning `true` if the lock is"},
{"lineNum":" 1535","line":"    /// obtained, and `false` if there was an existing incompatible lock held."},
{"lineNum":" 1536","line":"    /// A process may hold only one type of lock (shared or exclusive) on"},
{"lineNum":" 1537","line":"    /// a file. When a process terminates in any way, the lock is released."},
{"lineNum":" 1538","line":"    ///"},
{"lineNum":" 1539","line":"    /// Assumes the file is unlocked."},
{"lineNum":" 1540","line":"    ///"},
{"lineNum":" 1541","line":"    /// TODO: integrate with async I/O"},
{"lineNum":" 1542","line":"    pub fn tryLock(file: File, l: Lock) LockError!bool {"},
{"lineNum":" 1543","line":"        if (is_windows) {"},
{"lineNum":" 1544","line":"            var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1545","line":"            const exclusive = switch (l) {"},
{"lineNum":" 1546","line":"                .none => return,"},
{"lineNum":" 1547","line":"                .shared => false,"},
{"lineNum":" 1548","line":"                .exclusive => true,"},
{"lineNum":" 1549","line":"            };"},
{"lineNum":" 1550","line":"            windows.LockFile("},
{"lineNum":" 1551","line":"                file.handle,"},
{"lineNum":" 1552","line":"                null,"},
{"lineNum":" 1553","line":"                null,"},
{"lineNum":" 1554","line":"                null,"},
{"lineNum":" 1555","line":"                &io_status_block,"},
{"lineNum":" 1556","line":"                &range_off,"},
{"lineNum":" 1557","line":"                &range_len,"},
{"lineNum":" 1558","line":"                null,"},
{"lineNum":" 1559","line":"                windows.TRUE, // non-blocking=true"},
{"lineNum":" 1560","line":"                @intFromBool(exclusive),"},
{"lineNum":" 1561","line":"            ) catch |err| switch (err) {"},
{"lineNum":" 1562","line":"                error.WouldBlock => return false,"},
{"lineNum":" 1563","line":"                else => |e| return e,"},
{"lineNum":" 1564","line":"            };"},
{"lineNum":" 1565","line":"        } else {"},
{"lineNum":" 1566","line":"            os.flock(file.handle, switch (l) {"},
{"lineNum":" 1567","line":"                .none => os.LOCK.UN,"},
{"lineNum":" 1568","line":"                .shared => os.LOCK.SH | os.LOCK.NB,"},
{"lineNum":" 1569","line":"                .exclusive => os.LOCK.EX | os.LOCK.NB,"},
{"lineNum":" 1570","line":"            }) catch |err| switch (err) {"},
{"lineNum":" 1571","line":"                error.WouldBlock => return false,"},
{"lineNum":" 1572","line":"                else => |e| return e,"},
{"lineNum":" 1573","line":"            };"},
{"lineNum":" 1574","line":"        }"},
{"lineNum":" 1575","line":"        return true;"},
{"lineNum":" 1576","line":"    }"},
{"lineNum":" 1577","line":""},
{"lineNum":" 1578","line":"    /// Assumes the file is already locked in exclusive mode."},
{"lineNum":" 1579","line":"    /// Atomically modifies the lock to be in shared mode, without releasing it."},
{"lineNum":" 1580","line":"    ///"},
{"lineNum":" 1581","line":"    /// TODO: integrate with async I/O"},
{"lineNum":" 1582","line":"    pub fn downgradeLock(file: File) LockError!void {"},
{"lineNum":" 1583","line":"        if (is_windows) {"},
{"lineNum":" 1584","line":"            // On Windows it works like a semaphore + exclusivity flag. To implement this"},
{"lineNum":" 1585","line":"            // function, we first obtain another lock in shared mode. This changes the"},
{"lineNum":" 1586","line":"            // exclusivity flag, but increments the semaphore to 2. So we follow up with"},
{"lineNum":" 1587","line":"            // an NtUnlockFile which decrements the semaphore but does not modify the"},
{"lineNum":" 1588","line":"            // exclusivity flag."},
{"lineNum":" 1589","line":"            var io_status_block: windows.IO_STATUS_BLOCK = undefined;"},
{"lineNum":" 1590","line":"            windows.LockFile("},
{"lineNum":" 1591","line":"                file.handle,"},
{"lineNum":" 1592","line":"                null,"},
{"lineNum":" 1593","line":"                null,"},
{"lineNum":" 1594","line":"                null,"},
{"lineNum":" 1595","line":"                &io_status_block,"},
{"lineNum":" 1596","line":"                &range_off,"},
{"lineNum":" 1597","line":"                &range_len,"},
{"lineNum":" 1598","line":"                null,"},
{"lineNum":" 1599","line":"                windows.TRUE, // non-blocking=true"},
{"lineNum":" 1600","line":"                windows.FALSE, // exclusive=false"},
{"lineNum":" 1601","line":"            ) catch |err| switch (err) {"},
{"lineNum":" 1602","line":"                error.WouldBlock => unreachable, // File was not locked in exclusive mode."},
{"lineNum":" 1603","line":"                else => |e| return e,"},
{"lineNum":" 1604","line":"            };"},
{"lineNum":" 1605","line":"            return windows.UnlockFile("},
{"lineNum":" 1606","line":"                file.handle,"},
{"lineNum":" 1607","line":"                &io_status_block,"},
{"lineNum":" 1608","line":"                &range_off,"},
{"lineNum":" 1609","line":"                &range_len,"},
{"lineNum":" 1610","line":"                null,"},
{"lineNum":" 1611","line":"            ) catch |err| switch (err) {"},
{"lineNum":" 1612","line":"                error.RangeNotLocked => unreachable, // File was not locked."},
{"lineNum":" 1613","line":"                error.Unexpected => unreachable, // Resource deallocation must succeed."},
{"lineNum":" 1614","line":"            };"},
{"lineNum":" 1615","line":"        } else {"},
{"lineNum":" 1616","line":"            return os.flock(file.handle, os.LOCK.SH | os.LOCK.NB) catch |err| switch (err) {"},
{"lineNum":" 1617","line":"                error.WouldBlock => unreachable, // File was not locked in exclusive mode."},
{"lineNum":" 1618","line":"                else => |e| return e,"},
{"lineNum":" 1619","line":"            };"},
{"lineNum":" 1620","line":"        }"},
{"lineNum":" 1621","line":"    }"},
{"lineNum":" 1622","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 52, "covered" : 11,};
var merged_data = [];
