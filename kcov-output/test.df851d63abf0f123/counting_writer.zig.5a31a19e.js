var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const io = std.io;"},
{"lineNum":"    3","line":"const testing = std.testing;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"/// A Writer that counts how many bytes has been written to it."},
{"lineNum":"    6","line":"pub fn CountingWriter(comptime WriterType: type) type {"},
{"lineNum":"    7","line":"    return struct {"},
{"lineNum":"    8","line":"        bytes_written: u64,"},
{"lineNum":"    9","line":"        child_stream: WriterType,"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"        pub const Error = WriterType.Error;"},
{"lineNum":"   12","line":"        pub const Writer = io.Writer(*Self, Error, write);"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"        const Self = @This();"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"        pub fn write(self: *Self, bytes: []const u8) Error!usize {","class":"lineCov","hits":"1","order":"1414","possible_hits":"1",},
{"lineNum":"   17","line":"            const amt = try self.child_stream.write(bytes);","class":"lineCov","hits":"1","order":"1415","possible_hits":"1",},
{"lineNum":"   18","line":"            self.bytes_written += amt;","class":"lineCov","hits":"1","order":"1418","possible_hits":"1",},
{"lineNum":"   19","line":"            return amt;","class":"lineCov","hits":"1","order":"1419","possible_hits":"1",},
{"lineNum":"   20","line":"        }"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"        pub fn writer(self: *Self) Writer {","class":"lineCov","hits":"1","order":"1412","possible_hits":"1",},
{"lineNum":"   23","line":"            return .{ .context = self };","class":"lineCov","hits":"1","order":"1413","possible_hits":"1",},
{"lineNum":"   24","line":"        }"},
{"lineNum":"   25","line":"    };"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"pub fn countingWriter(child_stream: anytype) CountingWriter(@TypeOf(child_stream)) {","class":"lineCov","hits":"1","order":"1409","possible_hits":"1",},
{"lineNum":"   29","line":"    return .{ .bytes_written = 0, .child_stream = child_stream };","class":"lineCov","hits":"1","order":"1410","possible_hits":"1",},
{"lineNum":"   30","line":"}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"test \"io.CountingWriter\" {"},
{"lineNum":"   33","line":"    var counting_stream = countingWriter(std.io.null_writer);"},
{"lineNum":"   34","line":"    const stream = counting_stream.writer();"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    const bytes = \"yay\" ** 100;"},
{"lineNum":"   37","line":"    stream.writeAll(bytes) catch unreachable;"},
{"lineNum":"   38","line":"    try testing.expect(counting_stream.bytes_written == bytes.len);"},
{"lineNum":"   39","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 8, "covered" : 8,};
var merged_data = [];
