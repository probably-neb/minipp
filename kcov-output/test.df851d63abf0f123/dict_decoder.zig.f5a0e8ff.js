var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const assert = std.debug.assert;"},
{"lineNum":"    3","line":"const mem = std.mem;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"// Implements the LZ77 sliding dictionary as used in decompression."},
{"lineNum":"    8","line":"// LZ77 decompresses data through sequences of two forms of commands:"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"//  * Literal insertions: Runs of one or more symbols are inserted into the data"},
{"lineNum":"   11","line":"//  stream as is. This is accomplished through the writeByte method for a"},
{"lineNum":"   12","line":"//  single symbol, or combinations of writeSlice/writeMark for multiple symbols."},
{"lineNum":"   13","line":"//  Any valid stream must start with a literal insertion if no preset dictionary"},
{"lineNum":"   14","line":"//  is used."},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"//  * Backward copies: Runs of one or more symbols are copied from previously"},
{"lineNum":"   17","line":"//  emitted data. Backward copies come as the tuple (dist, length) where dist"},
{"lineNum":"   18","line":"//  determines how far back in the stream to copy from and length determines how"},
{"lineNum":"   19","line":"//  many bytes to copy. Note that it is valid for the length to be greater than"},
{"lineNum":"   20","line":"//  the distance. Since LZ77 uses forward copies, that situation is used to"},
{"lineNum":"   21","line":"//  perform a form of run-length encoding on repeated runs of symbols."},
{"lineNum":"   22","line":"//  The writeCopy and tryWriteCopy are used to implement this command."},
{"lineNum":"   23","line":"//"},
{"lineNum":"   24","line":"// For performance reasons, this implementation performs little to no sanity"},
{"lineNum":"   25","line":"// checks about the arguments. As such, the invariants documented for each"},
{"lineNum":"   26","line":"// method call must be respected."},
{"lineNum":"   27","line":"pub const DictDecoder = struct {"},
{"lineNum":"   28","line":"    const Self = @This();"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    allocator: Allocator = undefined,"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    hist: []u8 = undefined, // Sliding window history"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    // Invariant: 0 <= rd_pos <= wr_pos <= hist.len"},
{"lineNum":"   35","line":"    wr_pos: u32 = 0, // Current output position in buffer"},
{"lineNum":"   36","line":"    rd_pos: u32 = 0, // Have emitted hist[0..rd_pos] already"},
{"lineNum":"   37","line":"    full: bool = false, // Has a full window length been written yet?"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    // init initializes DictDecoder to have a sliding window dictionary of the given"},
{"lineNum":"   40","line":"    // size. If a preset dict is provided, it will initialize the dictionary with"},
{"lineNum":"   41","line":"    // the contents of dict."},
{"lineNum":"   42","line":"    pub fn init(self: *Self, allocator: Allocator, size: u32, dict: ?[]const u8) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"        self.allocator = allocator;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        self.hist = try allocator.alloc(u8, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        self.wr_pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        if (dict != null) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"            const src = dict.?[dict.?.len -| self.hist.len..];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   51","line":"            @memcpy(self.hist[0..src.len], src);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   52","line":"            self.wr_pos = @as(u32, @intCast(dict.?.len));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        if (self.wr_pos == self.hist.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"            self.wr_pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"            self.full = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"        }"},
{"lineNum":"   59","line":"        self.rd_pos = self.wr_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    pub fn deinit(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"        self.allocator.free(self.hist);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    // Reports the total amount of historical data in the dictionary."},
{"lineNum":"   67","line":"    pub fn histSize(self: *Self) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"        if (self.full) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"            return @as(u32, @intCast(self.hist.len));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"        }"},
{"lineNum":"   71","line":"        return self.wr_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    // Reports the number of bytes that can be flushed by readFlush."},
{"lineNum":"   75","line":"    pub fn availRead(self: *Self) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"        return self.wr_pos - self.rd_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"    }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    // Reports the available amount of output buffer space."},
{"lineNum":"   80","line":"    pub fn availWrite(self: *Self) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"        return @as(u32, @intCast(self.hist.len - self.wr_pos));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"    }"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    // Returns a slice of the available buffer to write data to."},
{"lineNum":"   85","line":"    //"},
{"lineNum":"   86","line":"    // This invariant will be kept: s.len <= availWrite()"},
{"lineNum":"   87","line":"    pub fn writeSlice(self: *Self) []u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"        return self.hist[self.wr_pos..];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    // Advances the writer pointer by `count`."},
{"lineNum":"   92","line":"    //"},
{"lineNum":"   93","line":"    // This invariant must be kept: 0 <= count <= availWrite()"},
{"lineNum":"   94","line":"    pub fn writeMark(self: *Self, count: u32) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"        assert(0 <= count and count <= self.availWrite());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"        self.wr_pos += count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    // Writes a single byte to the dictionary."},
{"lineNum":"  100","line":"    //"},
{"lineNum":"  101","line":"    // This invariant must be kept: 0 < availWrite()"},
{"lineNum":"  102","line":"    pub fn writeByte(self: *Self, byte: u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"        self.hist[self.wr_pos] = byte;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"        self.wr_pos += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"    }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    /// TODO: eliminate this function because the callsites should care about whether"},
{"lineNum":"  108","line":"    /// or not their arguments alias and then they should directly call `@memcpy` or"},
{"lineNum":"  109","line":"    /// `mem.copyForwards`."},
{"lineNum":"  110","line":"    fn copy(dst: []u8, src: []const u8) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"        if (src.len > dst.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"            mem.copyForwards(u8, dst, src[0..dst.len]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":"            return @as(u32, @intCast(dst.len));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  114","line":"        }"},
{"lineNum":"  115","line":"        mem.copyForwards(u8, dst[0..src.len], src);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  116","line":"        return @as(u32, @intCast(src.len));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":"    }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    // Copies a string at a given (dist, length) to the output."},
{"lineNum":"  120","line":"    // This returns the number of bytes copied and may be less than the requested"},
{"lineNum":"  121","line":"    // length if the available space in the output buffer is too small."},
{"lineNum":"  122","line":"    //"},
{"lineNum":"  123","line":"    // This invariant must be kept: 0 < dist <= histSize()"},
{"lineNum":"  124","line":"    pub fn writeCopy(self: *Self, dist: u32, length: u32) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"        assert(0 < dist and dist <= self.histSize());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"        var dst_base = self.wr_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"        var dst_pos = dst_base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"        var src_pos: i32 = @as(i32, @intCast(dst_pos)) - @as(i32, @intCast(dist));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"        var end_pos = dst_pos + length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"        if (end_pos > self.hist.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"            end_pos = @as(u32, @intCast(self.hist.len));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        // Copy non-overlapping section after destination position."},
{"lineNum":"  135","line":"        //"},
{"lineNum":"  136","line":"        // This section is non-overlapping in that the copy length for this section"},
{"lineNum":"  137","line":"        // is always less than or equal to the backwards distance. This can occur"},
{"lineNum":"  138","line":"        // if a distance refers to data that wraps-around in the buffer."},
{"lineNum":"  139","line":"        // Thus, a backwards copy is performed here; that is, the exact bytes in"},
{"lineNum":"  140","line":"        // the source prior to the copy is placed in the destination."},
{"lineNum":"  141","line":"        if (src_pos < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"            src_pos += @as(i32, @intCast(self.hist.len));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"            dst_pos += copy(self.hist[dst_pos..end_pos], self.hist[@as(usize, @intCast(src_pos))..]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"            src_pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        // Copy possibly overlapping section before destination position."},
{"lineNum":"  148","line":"        //"},
{"lineNum":"  149","line":"        // This section can overlap if the copy length for this section is larger"},
{"lineNum":"  150","line":"        // than the backwards distance. This is allowed by LZ77 so that repeated"},
{"lineNum":"  151","line":"        // strings can be succinctly represented using (dist, length) pairs."},
{"lineNum":"  152","line":"        // Thus, a forwards copy is performed here; that is, the bytes copied is"},
{"lineNum":"  153","line":"        // possibly dependent on the resulting bytes in the destination as the copy"},
{"lineNum":"  154","line":"        // progresses along. This is functionally equivalent to the following:"},
{"lineNum":"  155","line":"        //"},
{"lineNum":"  156","line":"        //    var i = 0;"},
{"lineNum":"  157","line":"        //    while(i < end_pos - dst_pos) : (i+=1) {"},
{"lineNum":"  158","line":"        //        self.hist[dst_pos+i] = self.hist[src_pos+i];"},
{"lineNum":"  159","line":"        //    }"},
{"lineNum":"  160","line":"        //    dst_pos = end_pos;"},
{"lineNum":"  161","line":"        //"},
{"lineNum":"  162","line":"        while (dst_pos < end_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"            dst_pos += copy(self.hist[dst_pos..end_pos], self.hist[@as(usize, @intCast(src_pos))..dst_pos]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        self.wr_pos = dst_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"        return dst_pos - dst_base;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    // Tries to copy a string at a given (distance, length) to the"},
{"lineNum":"  171","line":"    // output. This specialized version is optimized for short distances."},
{"lineNum":"  172","line":"    //"},
{"lineNum":"  173","line":"    // This method is designed to be inlined for performance reasons."},
{"lineNum":"  174","line":"    //"},
{"lineNum":"  175","line":"    // This invariant must be kept: 0 < dist <= histSize()"},
{"lineNum":"  176","line":"    pub fn tryWriteCopy(self: *Self, dist: u32, length: u32) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"        var dst_pos = self.wr_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"        var end_pos = dst_pos + length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"        if (dst_pos < dist or end_pos > self.hist.len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"            return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"        }"},
{"lineNum":"  182","line":"        var dst_base = dst_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"        var src_pos = dst_pos - dist;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        // Copy possibly overlapping section before destination position."},
{"lineNum":"  186","line":"        while (dst_pos < end_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"            dst_pos += copy(self.hist[dst_pos..end_pos], self.hist[src_pos..dst_pos]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"        }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"        self.wr_pos = dst_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"        return dst_pos - dst_base;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    // Returns a slice of the historical buffer that is ready to be"},
{"lineNum":"  195","line":"    // emitted to the user. The data returned by readFlush must be fully consumed"},
{"lineNum":"  196","line":"    // before calling any other DictDecoder methods."},
{"lineNum":"  197","line":"    pub fn readFlush(self: *Self) []u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"        var to_read = self.hist[self.rd_pos..self.wr_pos];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":"        self.rd_pos = self.wr_pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"        if (self.wr_pos == self.hist.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"            self.wr_pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"            self.rd_pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"            self.full = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":"        return to_read;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":"};"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"// tests"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"test \"dictionary decoder\" {"},
{"lineNum":"  212","line":"    const ArrayList = std.ArrayList;"},
{"lineNum":"  213","line":"    const testing = std.testing;"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    const abc = \"ABC\\n\";"},
{"lineNum":"  216","line":"    const fox = \"The quick brown fox jumped over the lazy dog!\\n\";"},
{"lineNum":"  217","line":"    const poem: []const u8 ="},
{"lineNum":"  218","line":"        \\\\The Road Not Taken"},
{"lineNum":"  219","line":"        \\\\Robert Frost"},
{"lineNum":"  220","line":"        \\\\"},
{"lineNum":"  221","line":"        \\\\Two roads diverged in a yellow wood,"},
{"lineNum":"  222","line":"        \\\\And sorry I could not travel both"},
{"lineNum":"  223","line":"        \\\\And be one traveler, long I stood"},
{"lineNum":"  224","line":"        \\\\And looked down one as far as I could"},
{"lineNum":"  225","line":"        \\\\To where it bent in the undergrowth;"},
{"lineNum":"  226","line":"        \\\\"},
{"lineNum":"  227","line":"        \\\\Then took the other, as just as fair,"},
{"lineNum":"  228","line":"        \\\\And having perhaps the better claim,"},
{"lineNum":"  229","line":"        \\\\Because it was grassy and wanted wear;"},
{"lineNum":"  230","line":"        \\\\Though as for that the passing there"},
{"lineNum":"  231","line":"        \\\\Had worn them really about the same,"},
{"lineNum":"  232","line":"        \\\\"},
{"lineNum":"  233","line":"        \\\\And both that morning equally lay"},
{"lineNum":"  234","line":"        \\\\In leaves no step had trodden black."},
{"lineNum":"  235","line":"        \\\\Oh, I kept the first for another day!"},
{"lineNum":"  236","line":"        \\\\Yet knowing how way leads on to way,"},
{"lineNum":"  237","line":"        \\\\I doubted if I should ever come back."},
{"lineNum":"  238","line":"        \\\\"},
{"lineNum":"  239","line":"        \\\\I shall be telling this with a sigh"},
{"lineNum":"  240","line":"        \\\\Somewhere ages and ages hence:"},
{"lineNum":"  241","line":"        \\\\Two roads diverged in a wood, and I-"},
{"lineNum":"  242","line":"        \\\\I took the one less traveled by,"},
{"lineNum":"  243","line":"        \\\\And that has made all the difference."},
{"lineNum":"  244","line":"        \\\\"},
{"lineNum":"  245","line":"    ;"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    const uppercase: []const u8 ="},
{"lineNum":"  248","line":"        \\\\THE ROAD NOT TAKEN"},
{"lineNum":"  249","line":"        \\\\ROBERT FROST"},
{"lineNum":"  250","line":"        \\\\"},
{"lineNum":"  251","line":"        \\\\TWO ROADS DIVERGED IN A YELLOW WOOD,"},
{"lineNum":"  252","line":"        \\\\AND SORRY I COULD NOT TRAVEL BOTH"},
{"lineNum":"  253","line":"        \\\\AND BE ONE TRAVELER, LONG I STOOD"},
{"lineNum":"  254","line":"        \\\\AND LOOKED DOWN ONE AS FAR AS I COULD"},
{"lineNum":"  255","line":"        \\\\TO WHERE IT BENT IN THE UNDERGROWTH;"},
{"lineNum":"  256","line":"        \\\\"},
{"lineNum":"  257","line":"        \\\\THEN TOOK THE OTHER, AS JUST AS FAIR,"},
{"lineNum":"  258","line":"        \\\\AND HAVING PERHAPS THE BETTER CLAIM,"},
{"lineNum":"  259","line":"        \\\\BECAUSE IT WAS GRASSY AND WANTED WEAR;"},
{"lineNum":"  260","line":"        \\\\THOUGH AS FOR THAT THE PASSING THERE"},
{"lineNum":"  261","line":"        \\\\HAD WORN THEM REALLY ABOUT THE SAME,"},
{"lineNum":"  262","line":"        \\\\"},
{"lineNum":"  263","line":"        \\\\AND BOTH THAT MORNING EQUALLY LAY"},
{"lineNum":"  264","line":"        \\\\IN LEAVES NO STEP HAD TRODDEN BLACK."},
{"lineNum":"  265","line":"        \\\\OH, I KEPT THE FIRST FOR ANOTHER DAY!"},
{"lineNum":"  266","line":"        \\\\YET KNOWING HOW WAY LEADS ON TO WAY,"},
{"lineNum":"  267","line":"        \\\\I DOUBTED IF I SHOULD EVER COME BACK."},
{"lineNum":"  268","line":"        \\\\"},
{"lineNum":"  269","line":"        \\\\I SHALL BE TELLING THIS WITH A SIGH"},
{"lineNum":"  270","line":"        \\\\SOMEWHERE AGES AND AGES HENCE:"},
{"lineNum":"  271","line":"        \\\\TWO ROADS DIVERGED IN A WOOD, AND I-"},
{"lineNum":"  272","line":"        \\\\I TOOK THE ONE LESS TRAVELED BY,"},
{"lineNum":"  273","line":"        \\\\AND THAT HAS MADE ALL THE DIFFERENCE."},
{"lineNum":"  274","line":"        \\\\"},
{"lineNum":"  275","line":"    ;"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    const PoemRefs = struct {"},
{"lineNum":"  278","line":"        dist: u32, // Backward distance (0 if this is an insertion)"},
{"lineNum":"  279","line":"        length: u32, // Length of copy or insertion"},
{"lineNum":"  280","line":"    };"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    var poem_refs = [_]PoemRefs{"},
{"lineNum":"  283","line":"        .{ .dist = 0, .length = 38 },  .{ .dist = 33, .length = 3 },   .{ .dist = 0, .length = 48 },"},
{"lineNum":"  284","line":"        .{ .dist = 79, .length = 3 },  .{ .dist = 0, .length = 11 },   .{ .dist = 34, .length = 5 },"},
{"lineNum":"  285","line":"        .{ .dist = 0, .length = 6 },   .{ .dist = 23, .length = 7 },   .{ .dist = 0, .length = 8 },"},
{"lineNum":"  286","line":"        .{ .dist = 50, .length = 3 },  .{ .dist = 0, .length = 2 },    .{ .dist = 69, .length = 3 },"},
{"lineNum":"  287","line":"        .{ .dist = 34, .length = 5 },  .{ .dist = 0, .length = 4 },    .{ .dist = 97, .length = 3 },"},
{"lineNum":"  288","line":"        .{ .dist = 0, .length = 4 },   .{ .dist = 43, .length = 5 },   .{ .dist = 0, .length = 6 },"},
{"lineNum":"  289","line":"        .{ .dist = 7, .length = 4 },   .{ .dist = 88, .length = 7 },   .{ .dist = 0, .length = 12 },"},
{"lineNum":"  290","line":"        .{ .dist = 80, .length = 3 },  .{ .dist = 0, .length = 2 },    .{ .dist = 141, .length = 4 },"},
{"lineNum":"  291","line":"        .{ .dist = 0, .length = 1 },   .{ .dist = 196, .length = 3 },  .{ .dist = 0, .length = 3 },"},
{"lineNum":"  292","line":"        .{ .dist = 157, .length = 3 }, .{ .dist = 0, .length = 6 },    .{ .dist = 181, .length = 3 },"},
{"lineNum":"  293","line":"        .{ .dist = 0, .length = 2 },   .{ .dist = 23, .length = 3 },   .{ .dist = 77, .length = 3 },"},
{"lineNum":"  294","line":"        .{ .dist = 28, .length = 5 },  .{ .dist = 128, .length = 3 },  .{ .dist = 110, .length = 4 },"},
{"lineNum":"  295","line":"        .{ .dist = 70, .length = 3 },  .{ .dist = 0, .length = 4 },    .{ .dist = 85, .length = 6 },"},
{"lineNum":"  296","line":"        .{ .dist = 0, .length = 2 },   .{ .dist = 182, .length = 6 },  .{ .dist = 0, .length = 4 },"},
{"lineNum":"  297","line":"        .{ .dist = 133, .length = 3 }, .{ .dist = 0, .length = 7 },    .{ .dist = 47, .length = 5 },"},
{"lineNum":"  298","line":"        .{ .dist = 0, .length = 20 },  .{ .dist = 112, .length = 5 },  .{ .dist = 0, .length = 1 },"},
{"lineNum":"  299","line":"        .{ .dist = 58, .length = 3 },  .{ .dist = 0, .length = 8 },    .{ .dist = 59, .length = 3 },"},
{"lineNum":"  300","line":"        .{ .dist = 0, .length = 4 },   .{ .dist = 173, .length = 3 },  .{ .dist = 0, .length = 5 },"},
{"lineNum":"  301","line":"        .{ .dist = 114, .length = 3 }, .{ .dist = 0, .length = 4 },    .{ .dist = 92, .length = 5 },"},
{"lineNum":"  302","line":"        .{ .dist = 0, .length = 2 },   .{ .dist = 71, .length = 3 },   .{ .dist = 0, .length = 2 },"},
{"lineNum":"  303","line":"        .{ .dist = 76, .length = 5 },  .{ .dist = 0, .length = 1 },    .{ .dist = 46, .length = 3 },"},
{"lineNum":"  304","line":"        .{ .dist = 96, .length = 4 },  .{ .dist = 130, .length = 4 },  .{ .dist = 0, .length = 3 },"},
{"lineNum":"  305","line":"        .{ .dist = 360, .length = 3 }, .{ .dist = 0, .length = 3 },    .{ .dist = 178, .length = 5 },"},
{"lineNum":"  306","line":"        .{ .dist = 0, .length = 7 },   .{ .dist = 75, .length = 3 },   .{ .dist = 0, .length = 3 },"},
{"lineNum":"  307","line":"        .{ .dist = 45, .length = 6 },  .{ .dist = 0, .length = 6 },    .{ .dist = 299, .length = 6 },"},
{"lineNum":"  308","line":"        .{ .dist = 180, .length = 3 }, .{ .dist = 70, .length = 6 },   .{ .dist = 0, .length = 1 },"},
{"lineNum":"  309","line":"        .{ .dist = 48, .length = 3 },  .{ .dist = 66, .length = 4 },   .{ .dist = 0, .length = 3 },"},
{"lineNum":"  310","line":"        .{ .dist = 47, .length = 5 },  .{ .dist = 0, .length = 9 },    .{ .dist = 325, .length = 3 },"},
{"lineNum":"  311","line":"        .{ .dist = 0, .length = 1 },   .{ .dist = 359, .length = 3 },  .{ .dist = 318, .length = 3 },"},
{"lineNum":"  312","line":"        .{ .dist = 0, .length = 2 },   .{ .dist = 199, .length = 3 },  .{ .dist = 0, .length = 1 },"},
{"lineNum":"  313","line":"        .{ .dist = 344, .length = 3 }, .{ .dist = 0, .length = 3 },    .{ .dist = 248, .length = 3 },"},
{"lineNum":"  314","line":"        .{ .dist = 0, .length = 10 },  .{ .dist = 310, .length = 3 },  .{ .dist = 0, .length = 3 },"},
{"lineNum":"  315","line":"        .{ .dist = 93, .length = 6 },  .{ .dist = 0, .length = 3 },    .{ .dist = 252, .length = 3 },"},
{"lineNum":"  316","line":"        .{ .dist = 157, .length = 4 }, .{ .dist = 0, .length = 2 },    .{ .dist = 273, .length = 5 },"},
{"lineNum":"  317","line":"        .{ .dist = 0, .length = 14 },  .{ .dist = 99, .length = 4 },   .{ .dist = 0, .length = 1 },"},
{"lineNum":"  318","line":"        .{ .dist = 464, .length = 4 }, .{ .dist = 0, .length = 2 },    .{ .dist = 92, .length = 4 },"},
{"lineNum":"  319","line":"        .{ .dist = 495, .length = 3 }, .{ .dist = 0, .length = 1 },    .{ .dist = 322, .length = 4 },"},
{"lineNum":"  320","line":"        .{ .dist = 16, .length = 4 },  .{ .dist = 0, .length = 3 },    .{ .dist = 402, .length = 3 },"},
{"lineNum":"  321","line":"        .{ .dist = 0, .length = 2 },   .{ .dist = 237, .length = 4 },  .{ .dist = 0, .length = 2 },"},
{"lineNum":"  322","line":"        .{ .dist = 432, .length = 4 }, .{ .dist = 0, .length = 1 },    .{ .dist = 483, .length = 5 },"},
{"lineNum":"  323","line":"        .{ .dist = 0, .length = 2 },   .{ .dist = 294, .length = 4 },  .{ .dist = 0, .length = 2 },"},
{"lineNum":"  324","line":"        .{ .dist = 306, .length = 3 }, .{ .dist = 113, .length = 5 },  .{ .dist = 0, .length = 1 },"},
{"lineNum":"  325","line":"        .{ .dist = 26, .length = 4 },  .{ .dist = 164, .length = 3 },  .{ .dist = 488, .length = 4 },"},
{"lineNum":"  326","line":"        .{ .dist = 0, .length = 1 },   .{ .dist = 542, .length = 3 },  .{ .dist = 248, .length = 6 },"},
{"lineNum":"  327","line":"        .{ .dist = 0, .length = 5 },   .{ .dist = 205, .length = 3 },  .{ .dist = 0, .length = 8 },"},
{"lineNum":"  328","line":"        .{ .dist = 48, .length = 3 },  .{ .dist = 449, .length = 6 },  .{ .dist = 0, .length = 2 },"},
{"lineNum":"  329","line":"        .{ .dist = 192, .length = 3 }, .{ .dist = 328, .length = 4 },  .{ .dist = 9, .length = 5 },"},
{"lineNum":"  330","line":"        .{ .dist = 433, .length = 3 }, .{ .dist = 0, .length = 3 },    .{ .dist = 622, .length = 25 },"},
{"lineNum":"  331","line":"        .{ .dist = 615, .length = 5 }, .{ .dist = 46, .length = 5 },   .{ .dist = 0, .length = 2 },"},
{"lineNum":"  332","line":"        .{ .dist = 104, .length = 3 }, .{ .dist = 475, .length = 10 }, .{ .dist = 549, .length = 3 },"},
{"lineNum":"  333","line":"        .{ .dist = 0, .length = 4 },   .{ .dist = 597, .length = 8 },  .{ .dist = 314, .length = 3 },"},
{"lineNum":"  334","line":"        .{ .dist = 0, .length = 1 },   .{ .dist = 473, .length = 6 },  .{ .dist = 317, .length = 5 },"},
{"lineNum":"  335","line":"        .{ .dist = 0, .length = 1 },   .{ .dist = 400, .length = 3 },  .{ .dist = 0, .length = 3 },"},
{"lineNum":"  336","line":"        .{ .dist = 109, .length = 3 }, .{ .dist = 151, .length = 3 },  .{ .dist = 48, .length = 4 },"},
{"lineNum":"  337","line":"        .{ .dist = 0, .length = 4 },   .{ .dist = 125, .length = 3 },  .{ .dist = 108, .length = 3 },"},
{"lineNum":"  338","line":"        .{ .dist = 0, .length = 2 },"},
{"lineNum":"  339","line":"    };"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    var got_list = ArrayList(u8).init(testing.allocator);"},
{"lineNum":"  342","line":"    defer got_list.deinit();"},
{"lineNum":"  343","line":"    var got = got_list.writer();"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    var want_list = ArrayList(u8).init(testing.allocator);"},
{"lineNum":"  346","line":"    defer want_list.deinit();"},
{"lineNum":"  347","line":"    var want = want_list.writer();"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    var dd = DictDecoder{};"},
{"lineNum":"  350","line":"    try dd.init(testing.allocator, 1 << 11, null);"},
{"lineNum":"  351","line":"    defer dd.deinit();"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    const util = struct {"},
{"lineNum":"  354","line":"        fn writeCopy(dst_dd: *DictDecoder, dst: anytype, dist: u32, length: u32) !void {"},
{"lineNum":"  355","line":"            var len = length;"},
{"lineNum":"  356","line":"            while (len > 0) {"},
{"lineNum":"  357","line":"                var n = dst_dd.tryWriteCopy(dist, len);"},
{"lineNum":"  358","line":"                if (n == 0) {"},
{"lineNum":"  359","line":"                    n = dst_dd.writeCopy(dist, len);"},
{"lineNum":"  360","line":"                }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"                len -= n;"},
{"lineNum":"  363","line":"                if (dst_dd.availWrite() == 0) {"},
{"lineNum":"  364","line":"                    _ = try dst.write(dst_dd.readFlush());"},
{"lineNum":"  365","line":"                }"},
{"lineNum":"  366","line":"            }"},
{"lineNum":"  367","line":"        }"},
{"lineNum":"  368","line":"        fn writeString(dst_dd: *DictDecoder, dst: anytype, str: []const u8) !void {"},
{"lineNum":"  369","line":"            var string = str;"},
{"lineNum":"  370","line":"            while (string.len > 0) {"},
{"lineNum":"  371","line":"                var cnt = DictDecoder.copy(dst_dd.writeSlice(), string);"},
{"lineNum":"  372","line":"                dst_dd.writeMark(cnt);"},
{"lineNum":"  373","line":"                string = string[cnt..];"},
{"lineNum":"  374","line":"                if (dst_dd.availWrite() == 0) {"},
{"lineNum":"  375","line":"                    _ = try dst.write(dst_dd.readFlush());"},
{"lineNum":"  376","line":"                }"},
{"lineNum":"  377","line":"            }"},
{"lineNum":"  378","line":"        }"},
{"lineNum":"  379","line":"    };"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    try util.writeString(&dd, got, \".\");"},
{"lineNum":"  382","line":"    _ = try want.write(\".\");"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"    var str = poem;"},
{"lineNum":"  385","line":"    for (poem_refs, 0..) |ref, i| {"},
{"lineNum":"  386","line":"        _ = i;"},
{"lineNum":"  387","line":"        if (ref.dist == 0) {"},
{"lineNum":"  388","line":"            try util.writeString(&dd, got, str[0..ref.length]);"},
{"lineNum":"  389","line":"        } else {"},
{"lineNum":"  390","line":"            try util.writeCopy(&dd, got, ref.dist, ref.length);"},
{"lineNum":"  391","line":"        }"},
{"lineNum":"  392","line":"        str = str[ref.length..];"},
{"lineNum":"  393","line":"    }"},
{"lineNum":"  394","line":"    _ = try want.write(poem);"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    try util.writeCopy(&dd, got, dd.histSize(), 33);"},
{"lineNum":"  397","line":"    _ = try want.write(want_list.items[0..33]);"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    try util.writeString(&dd, got, abc);"},
{"lineNum":"  400","line":"    try util.writeCopy(&dd, got, abc.len, 59 * abc.len);"},
{"lineNum":"  401","line":"    _ = try want.write(abc ** 60);"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    try util.writeString(&dd, got, fox);"},
{"lineNum":"  404","line":"    try util.writeCopy(&dd, got, fox.len, 9 * fox.len);"},
{"lineNum":"  405","line":"    _ = try want.write(fox ** 10);"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    try util.writeString(&dd, got, \".\");"},
{"lineNum":"  408","line":"    try util.writeCopy(&dd, got, 1, 9);"},
{"lineNum":"  409","line":"    _ = try want.write(\".\" ** 10);"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    try util.writeString(&dd, got, uppercase);"},
{"lineNum":"  412","line":"    try util.writeCopy(&dd, got, uppercase.len, 7 * uppercase.len);"},
{"lineNum":"  413","line":"    var i: u8 = 0;"},
{"lineNum":"  414","line":"    while (i < 8) : (i += 1) {"},
{"lineNum":"  415","line":"        _ = try want.write(uppercase);"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    try util.writeCopy(&dd, got, dd.histSize(), 10);"},
{"lineNum":"  419","line":"    _ = try want.write(want_list.items[want_list.items.len - dd.histSize() ..][0..10]);"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"    _ = try got.write(dd.readFlush());"},
{"lineNum":"  422","line":"    try testing.expectEqualSlices(u8, want_list.items, got_list.items);"},
{"lineNum":"  423","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 71, "covered" : 0,};
var merged_data = [];
