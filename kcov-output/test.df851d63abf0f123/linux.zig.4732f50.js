var data = {lines:[
{"lineNum":"    1","line":"//! This file provides the system interface functions for Linux matching those"},
{"lineNum":"    2","line":"//! that are provided by libc, whether or not libc is linked. The following"},
{"lineNum":"    3","line":"//! abstractions are made:"},
{"lineNum":"    4","line":"//! * Work around kernel bugs and limitations. For example, see sendmmsg."},
{"lineNum":"    5","line":"//! * Implement all the syscalls in the same way that libc functions will"},
{"lineNum":"    6","line":"//!   provide `rename` when only the `renameat` syscall exists."},
{"lineNum":"    7","line":"//! * Does not support POSIX thread cancellation."},
{"lineNum":"    8","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    9","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"   10","line":"const assert = std.debug.assert;"},
{"lineNum":"   11","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"   12","line":"const elf = std.elf;"},
{"lineNum":"   13","line":"const vdso = @import(\"linux/vdso.zig\");"},
{"lineNum":"   14","line":"const dl = @import(\"../dynamic_library.zig\");"},
{"lineNum":"   15","line":"const native_arch = builtin.cpu.arch;"},
{"lineNum":"   16","line":"const native_endian = native_arch.endian();"},
{"lineNum":"   17","line":"const is_mips = native_arch.isMIPS();"},
{"lineNum":"   18","line":"const is_ppc = native_arch.isPPC();"},
{"lineNum":"   19","line":"const is_ppc64 = native_arch.isPPC64();"},
{"lineNum":"   20","line":"const is_sparc = native_arch.isSPARC();"},
{"lineNum":"   21","line":"const iovec = std.os.iovec;"},
{"lineNum":"   22","line":"const iovec_const = std.os.iovec_const;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"test {"},
{"lineNum":"   25","line":"    if (builtin.os.tag == .linux) {"},
{"lineNum":"   26","line":"        _ = @import(\"linux/test.zig\");"},
{"lineNum":"   27","line":"    }"},
{"lineNum":"   28","line":"}"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"const syscall_bits = switch (native_arch) {"},
{"lineNum":"   31","line":"    .thumb => @import(\"linux/thumb.zig\"),"},
{"lineNum":"   32","line":"    else => arch_bits,"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"const arch_bits = switch (native_arch) {"},
{"lineNum":"   36","line":"    .x86 => @import(\"linux/x86.zig\"),"},
{"lineNum":"   37","line":"    .x86_64 => @import(\"linux/x86_64.zig\"),"},
{"lineNum":"   38","line":"    .aarch64, .aarch64_be => @import(\"linux/arm64.zig\"),"},
{"lineNum":"   39","line":"    .arm, .thumb => @import(\"linux/arm-eabi.zig\"),"},
{"lineNum":"   40","line":"    .riscv64 => @import(\"linux/riscv64.zig\"),"},
{"lineNum":"   41","line":"    .sparc64 => @import(\"linux/sparc64.zig\"),"},
{"lineNum":"   42","line":"    .mips, .mipsel => @import(\"linux/mips.zig\"),"},
{"lineNum":"   43","line":"    .mips64, .mips64el => @import(\"linux/mips64.zig\"),"},
{"lineNum":"   44","line":"    .powerpc, .powerpcle => @import(\"linux/powerpc.zig\"),"},
{"lineNum":"   45","line":"    .powerpc64, .powerpc64le => @import(\"linux/powerpc64.zig\"),"},
{"lineNum":"   46","line":"    else => struct {},"},
{"lineNum":"   47","line":"};"},
{"lineNum":"   48","line":"pub const syscall0 = syscall_bits.syscall0;"},
{"lineNum":"   49","line":"pub const syscall1 = syscall_bits.syscall1;"},
{"lineNum":"   50","line":"pub const syscall2 = syscall_bits.syscall2;"},
{"lineNum":"   51","line":"pub const syscall3 = syscall_bits.syscall3;"},
{"lineNum":"   52","line":"pub const syscall4 = syscall_bits.syscall4;"},
{"lineNum":"   53","line":"pub const syscall5 = syscall_bits.syscall5;"},
{"lineNum":"   54","line":"pub const syscall6 = syscall_bits.syscall6;"},
{"lineNum":"   55","line":"pub const syscall7 = syscall_bits.syscall7;"},
{"lineNum":"   56","line":"pub const restore = syscall_bits.restore;"},
{"lineNum":"   57","line":"pub const restore_rt = syscall_bits.restore_rt;"},
{"lineNum":"   58","line":"pub const socketcall = syscall_bits.socketcall;"},
{"lineNum":"   59","line":"pub const syscall_pipe = syscall_bits.syscall_pipe;"},
{"lineNum":"   60","line":"pub const syscall_fork = syscall_bits.syscall_fork;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"pub const ARCH = arch_bits.ARCH;"},
{"lineNum":"   63","line":"pub const Elf_Symndx = arch_bits.Elf_Symndx;"},
{"lineNum":"   64","line":"pub const F = arch_bits.F;"},
{"lineNum":"   65","line":"pub const Flock = arch_bits.Flock;"},
{"lineNum":"   66","line":"pub const HWCAP = arch_bits.HWCAP;"},
{"lineNum":"   67","line":"pub const LOCK = arch_bits.LOCK;"},
{"lineNum":"   68","line":"pub const MMAP2_UNIT = arch_bits.MMAP2_UNIT;"},
{"lineNum":"   69","line":"pub const REG = arch_bits.REG;"},
{"lineNum":"   70","line":"pub const SC = arch_bits.SC;"},
{"lineNum":"   71","line":"pub const Stat = arch_bits.Stat;"},
{"lineNum":"   72","line":"pub const VDSO = arch_bits.VDSO;"},
{"lineNum":"   73","line":"pub const blkcnt_t = arch_bits.blkcnt_t;"},
{"lineNum":"   74","line":"pub const blksize_t = arch_bits.blksize_t;"},
{"lineNum":"   75","line":"pub const clone = arch_bits.clone;"},
{"lineNum":"   76","line":"pub const dev_t = arch_bits.dev_t;"},
{"lineNum":"   77","line":"pub const ino_t = arch_bits.ino_t;"},
{"lineNum":"   78","line":"pub const mcontext_t = arch_bits.mcontext_t;"},
{"lineNum":"   79","line":"pub const mode_t = arch_bits.mode_t;"},
{"lineNum":"   80","line":"pub const msghdr = arch_bits.msghdr;"},
{"lineNum":"   81","line":"pub const msghdr_const = arch_bits.msghdr_const;"},
{"lineNum":"   82","line":"pub const nlink_t = arch_bits.nlink_t;"},
{"lineNum":"   83","line":"pub const off_t = arch_bits.off_t;"},
{"lineNum":"   84","line":"pub const time_t = arch_bits.time_t;"},
{"lineNum":"   85","line":"pub const timeval = arch_bits.timeval;"},
{"lineNum":"   86","line":"pub const timezone = arch_bits.timezone;"},
{"lineNum":"   87","line":"pub const ucontext_t = arch_bits.ucontext_t;"},
{"lineNum":"   88","line":"pub const user_desc = arch_bits.user_desc;"},
{"lineNum":"   89","line":"pub const getcontext = arch_bits.getcontext;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"pub const tls = @import(\"linux/tls.zig\");"},
{"lineNum":"   92","line":"pub const pie = @import(\"linux/start_pie.zig\");"},
{"lineNum":"   93","line":"pub const BPF = @import(\"linux/bpf.zig\");"},
{"lineNum":"   94","line":"pub const IOCTL = @import(\"linux/ioctl.zig\");"},
{"lineNum":"   95","line":"pub const SECCOMP = @import(\"linux/seccomp.zig\");"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"pub const syscalls = @import(\"linux/syscalls.zig\");"},
{"lineNum":"   98","line":"pub const SYS = switch (@import(\"builtin\").cpu.arch) {"},
{"lineNum":"   99","line":"    .x86 => syscalls.X86,"},
{"lineNum":"  100","line":"    .x86_64 => syscalls.X64,"},
{"lineNum":"  101","line":"    .aarch64, .aarch64_be => syscalls.Arm64,"},
{"lineNum":"  102","line":"    .arm, .thumb => syscalls.Arm,"},
{"lineNum":"  103","line":"    .riscv64 => syscalls.RiscV64,"},
{"lineNum":"  104","line":"    .sparc64 => syscalls.Sparc64,"},
{"lineNum":"  105","line":"    .mips, .mipsel => syscalls.Mips,"},
{"lineNum":"  106","line":"    .mips64, .mips64el => syscalls.Mips64,"},
{"lineNum":"  107","line":"    .powerpc, .powerpcle => syscalls.PowerPC,"},
{"lineNum":"  108","line":"    .powerpc64, .powerpc64le => syscalls.PowerPC64,"},
{"lineNum":"  109","line":"    else => @compileError(\"The Zig Standard Library is missing syscall definitions for the target CPU architecture\"),"},
{"lineNum":"  110","line":"};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"pub const MAP = struct {"},
{"lineNum":"  113","line":"    pub usingnamespace arch_bits.MAP;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    /// Share changes"},
{"lineNum":"  116","line":"    pub const SHARED = 0x01;"},
{"lineNum":"  117","line":"    /// Changes are private"},
{"lineNum":"  118","line":"    pub const PRIVATE = 0x02;"},
{"lineNum":"  119","line":"    /// share + validate extension flags"},
{"lineNum":"  120","line":"    pub const SHARED_VALIDATE = 0x03;"},
{"lineNum":"  121","line":"    /// Mask for type of mapping"},
{"lineNum":"  122","line":"    pub const TYPE = 0x0f;"},
{"lineNum":"  123","line":"    /// Interpret addr exactly"},
{"lineNum":"  124","line":"    pub const FIXED = 0x10;"},
{"lineNum":"  125","line":"    /// don\'t use a file"},
{"lineNum":"  126","line":"    pub const ANONYMOUS = if (is_mips) 0x800 else 0x20;"},
{"lineNum":"  127","line":"    // MAP_ 0x0100 - 0x4000 flags are per architecture"},
{"lineNum":"  128","line":"    /// populate (prefault) pagetables"},
{"lineNum":"  129","line":"    pub const POPULATE = if (is_mips) 0x10000 else 0x8000;"},
{"lineNum":"  130","line":"    /// do not block on IO"},
{"lineNum":"  131","line":"    pub const NONBLOCK = if (is_mips) 0x20000 else 0x10000;"},
{"lineNum":"  132","line":"    /// give out an address that is best suited for process/thread stacks"},
{"lineNum":"  133","line":"    pub const STACK = if (is_mips) 0x40000 else 0x20000;"},
{"lineNum":"  134","line":"    /// create a huge page mapping"},
{"lineNum":"  135","line":"    pub const HUGETLB = if (is_mips) 0x80000 else 0x40000;"},
{"lineNum":"  136","line":"    /// perform synchronous page faults for the mapping"},
{"lineNum":"  137","line":"    pub const SYNC = 0x80000;"},
{"lineNum":"  138","line":"    /// MAP_FIXED which doesn\'t unmap underlying mapping"},
{"lineNum":"  139","line":"    pub const FIXED_NOREPLACE = 0x100000;"},
{"lineNum":"  140","line":"    /// For anonymous mmap, memory could be uninitialized"},
{"lineNum":"  141","line":"    pub const UNINITIALIZED = 0x4000000;"},
{"lineNum":"  142","line":"};"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"pub const O = struct {"},
{"lineNum":"  145","line":"    pub usingnamespace arch_bits.O;"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    pub const RDONLY = 0o0;"},
{"lineNum":"  148","line":"    pub const WRONLY = 0o1;"},
{"lineNum":"  149","line":"    pub const RDWR = 0o2;"},
{"lineNum":"  150","line":"};"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"pub usingnamespace @import(\"linux/io_uring.zig\");"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"/// Set by startup code, used by `getauxval`."},
{"lineNum":"  155","line":"pub var elf_aux_maybe: ?[*]std.elf.Auxv = null;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"/// See `std.elf` for the constants."},
{"lineNum":"  158","line":"pub fn getauxval(index: usize) usize {","class":"lineCov","hits":"1","order":"414","possible_hits":"1",},
{"lineNum":"  159","line":"    const auxv = elf_aux_maybe orelse return 0;","class":"lineCov","hits":"2","order":"415","possible_hits":"2",},
{"lineNum":"  160","line":"    var i: usize = 0;","class":"lineCov","hits":"1","order":"416","possible_hits":"1",},
{"lineNum":"  161","line":"    while (auxv[i].a_type != std.elf.AT_NULL) : (i += 1) {","class":"linePartCov","hits":"1","order":"417","possible_hits":"3",},
{"lineNum":"  162","line":"        if (auxv[i].a_type == index)","class":"lineCov","hits":"1","order":"418","possible_hits":"1",},
{"lineNum":"  163","line":"            return auxv[i].a_un.a_val;","class":"lineCov","hits":"1","order":"419","possible_hits":"1",},
{"lineNum":"  164","line":"    }"},
{"lineNum":"  165","line":"    return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"}"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"// Some architectures (and some syscalls) require 64bit parameters to be passed"},
{"lineNum":"  169","line":"// in a even-aligned register pair."},
{"lineNum":"  170","line":"const require_aligned_register_pair ="},
{"lineNum":"  171","line":"    builtin.cpu.arch.isPPC() or"},
{"lineNum":"  172","line":"    builtin.cpu.arch.isMIPS() or"},
{"lineNum":"  173","line":"    builtin.cpu.arch.isARM() or"},
{"lineNum":"  174","line":"    builtin.cpu.arch.isThumb();"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"// Split a 64bit value into a {LSB,MSB} pair."},
{"lineNum":"  177","line":"// The LE/BE variants specify the endianness to assume."},
{"lineNum":"  178","line":"fn splitValueLE64(val: i64) [2]u32 {"},
{"lineNum":"  179","line":"    const u: u64 = @bitCast(val);"},
{"lineNum":"  180","line":"    return [2]u32{"},
{"lineNum":"  181","line":"        @as(u32, @truncate(u)),"},
{"lineNum":"  182","line":"        @as(u32, @truncate(u >> 32)),"},
{"lineNum":"  183","line":"    };"},
{"lineNum":"  184","line":"}"},
{"lineNum":"  185","line":"fn splitValueBE64(val: i64) [2]u32 {"},
{"lineNum":"  186","line":"    const u: u64 = @bitCast(val);"},
{"lineNum":"  187","line":"    return [2]u32{"},
{"lineNum":"  188","line":"        @as(u32, @truncate(u >> 32)),"},
{"lineNum":"  189","line":"        @as(u32, @truncate(u)),"},
{"lineNum":"  190","line":"    };"},
{"lineNum":"  191","line":"}"},
{"lineNum":"  192","line":"fn splitValue64(val: i64) [2]u32 {"},
{"lineNum":"  193","line":"    const u: u64 = @bitCast(val);"},
{"lineNum":"  194","line":"    switch (native_endian) {"},
{"lineNum":"  195","line":"        .Little => return [2]u32{"},
{"lineNum":"  196","line":"            @as(u32, @truncate(u)),"},
{"lineNum":"  197","line":"            @as(u32, @truncate(u >> 32)),"},
{"lineNum":"  198","line":"        },"},
{"lineNum":"  199","line":"        .Big => return [2]u32{"},
{"lineNum":"  200","line":"            @as(u32, @truncate(u >> 32)),"},
{"lineNum":"  201","line":"            @as(u32, @truncate(u)),"},
{"lineNum":"  202","line":"        },"},
{"lineNum":"  203","line":"    }"},
{"lineNum":"  204","line":"}"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"/// Get the errno from a syscall return value, or 0 for no error."},
{"lineNum":"  207","line":"pub fn getErrno(r: usize) E {","class":"lineCov","hits":"1","order":"111","possible_hits":"1",},
{"lineNum":"  208","line":"    const signed_r = @as(isize, @bitCast(r));","class":"lineCov","hits":"1","order":"112","possible_hits":"1",},
{"lineNum":"  209","line":"    const int = if (signed_r > -4096 and signed_r < 0) -signed_r else 0;","class":"lineCov","hits":"2","order":"113","possible_hits":"2",},
{"lineNum":"  210","line":"    return @as(E, @enumFromInt(int));","class":"lineCov","hits":"1","order":"114","possible_hits":"1",},
{"lineNum":"  211","line":"}"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"pub fn dup(old: i32) usize {"},
{"lineNum":"  214","line":"    return syscall1(.dup, @as(usize, @bitCast(@as(isize, old))));"},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"pub fn dup2(old: i32, new: i32) usize {"},
{"lineNum":"  218","line":"    if (@hasField(SYS, \"dup2\")) {"},
{"lineNum":"  219","line":"        return syscall2(.dup2, @as(usize, @bitCast(@as(isize, old))), @as(usize, @bitCast(@as(isize, new))));"},
{"lineNum":"  220","line":"    } else {"},
{"lineNum":"  221","line":"        if (old == new) {"},
{"lineNum":"  222","line":"            if (std.debug.runtime_safety) {"},
{"lineNum":"  223","line":"                const rc = syscall2(.fcntl, @as(usize, @bitCast(@as(isize, old))), F.GETFD);"},
{"lineNum":"  224","line":"                if (@as(isize, @bitCast(rc)) < 0) return rc;"},
{"lineNum":"  225","line":"            }"},
{"lineNum":"  226","line":"            return @as(usize, @intCast(old));"},
{"lineNum":"  227","line":"        } else {"},
{"lineNum":"  228","line":"            return syscall3(.dup3, @as(usize, @bitCast(@as(isize, old))), @as(usize, @bitCast(@as(isize, new))), 0);"},
{"lineNum":"  229","line":"        }"},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":"}"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"pub fn dup3(old: i32, new: i32, flags: u32) usize {"},
{"lineNum":"  234","line":"    return syscall3(.dup3, @as(usize, @bitCast(@as(isize, old))), @as(usize, @bitCast(@as(isize, new))), flags);"},
{"lineNum":"  235","line":"}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"pub fn chdir(path: [*:0]const u8) usize {"},
{"lineNum":"  238","line":"    return syscall1(.chdir, @intFromPtr(path));"},
{"lineNum":"  239","line":"}"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"pub fn fchdir(fd: fd_t) usize {"},
{"lineNum":"  242","line":"    return syscall1(.fchdir, @as(usize, @bitCast(@as(isize, fd))));"},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"pub fn chroot(path: [*:0]const u8) usize {"},
{"lineNum":"  246","line":"    return syscall1(.chroot, @intFromPtr(path));"},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"pub fn execve(path: [*:0]const u8, argv: [*:null]const ?[*:0]const u8, envp: [*:null]const ?[*:0]const u8) usize {"},
{"lineNum":"  250","line":"    return syscall3(.execve, @intFromPtr(path), @intFromPtr(argv), @intFromPtr(envp));"},
{"lineNum":"  251","line":"}"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"pub fn fork() usize {"},
{"lineNum":"  254","line":"    if (comptime native_arch.isSPARC()) {"},
{"lineNum":"  255","line":"        return syscall_fork();"},
{"lineNum":"  256","line":"    } else if (@hasField(SYS, \"fork\")) {"},
{"lineNum":"  257","line":"        return syscall0(.fork);"},
{"lineNum":"  258","line":"    } else {"},
{"lineNum":"  259","line":"        return syscall2(.clone, SIG.CHLD, 0);"},
{"lineNum":"  260","line":"    }"},
{"lineNum":"  261","line":"}"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"/// This must be inline, and inline call the syscall function, because if the"},
{"lineNum":"  264","line":"/// child does a return it will clobber the parent\'s stack."},
{"lineNum":"  265","line":"/// It is advised to avoid this function and use clone instead, because"},
{"lineNum":"  266","line":"/// the compiler is not aware of how vfork affects control flow and you may"},
{"lineNum":"  267","line":"/// see different results in optimized builds."},
{"lineNum":"  268","line":"pub inline fn vfork() usize {"},
{"lineNum":"  269","line":"    return @call(.always_inline, syscall0, .{.vfork});"},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"pub fn futimens(fd: i32, times: *const [2]timespec) usize {"},
{"lineNum":"  273","line":"    return utimensat(fd, null, times, 0);"},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"pub fn utimensat(dirfd: i32, path: ?[*:0]const u8, times: *const [2]timespec, flags: u32) usize {"},
{"lineNum":"  277","line":"    return syscall4(.utimensat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), @intFromPtr(times), flags);"},
{"lineNum":"  278","line":"}"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"pub fn fallocate(fd: i32, mode: i32, offset: i64, length: i64) usize {"},
{"lineNum":"  281","line":"    if (usize_bits < 64) {"},
{"lineNum":"  282","line":"        const offset_halves = splitValue64(offset);"},
{"lineNum":"  283","line":"        const length_halves = splitValue64(length);"},
{"lineNum":"  284","line":"        return syscall6("},
{"lineNum":"  285","line":"            .fallocate,"},
{"lineNum":"  286","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  287","line":"            @as(usize, @bitCast(@as(isize, mode))),"},
{"lineNum":"  288","line":"            offset_halves[0],"},
{"lineNum":"  289","line":"            offset_halves[1],"},
{"lineNum":"  290","line":"            length_halves[0],"},
{"lineNum":"  291","line":"            length_halves[1],"},
{"lineNum":"  292","line":"        );"},
{"lineNum":"  293","line":"    } else {"},
{"lineNum":"  294","line":"        return syscall4("},
{"lineNum":"  295","line":"            .fallocate,"},
{"lineNum":"  296","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  297","line":"            @as(usize, @bitCast(@as(isize, mode))),"},
{"lineNum":"  298","line":"            @as(u64, @bitCast(offset)),"},
{"lineNum":"  299","line":"            @as(u64, @bitCast(length)),"},
{"lineNum":"  300","line":"        );"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":"}"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"pub fn futex_wait(uaddr: *const i32, futex_op: u32, val: i32, timeout: ?*const timespec) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"    return syscall4(.futex, @intFromPtr(uaddr), futex_op, @as(u32, @bitCast(val)), @intFromPtr(timeout));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"}"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"pub fn futex_wake(uaddr: *const i32, futex_op: u32, val: i32) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"    return syscall3(.futex, @intFromPtr(uaddr), futex_op, @as(u32, @bitCast(val)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"}"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"pub fn getcwd(buf: [*]u8, size: usize) usize {"},
{"lineNum":"  313","line":"    return syscall2(.getcwd, @intFromPtr(buf), size);"},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"pub fn getdents(fd: i32, dirp: [*]u8, len: usize) usize {"},
{"lineNum":"  317","line":"    return syscall3("},
{"lineNum":"  318","line":"        .getdents,"},
{"lineNum":"  319","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  320","line":"        @intFromPtr(dirp),"},
{"lineNum":"  321","line":"        @min(len, maxInt(c_int)),"},
{"lineNum":"  322","line":"    );"},
{"lineNum":"  323","line":"}"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"pub fn getdents64(fd: i32, dirp: [*]u8, len: usize) usize {"},
{"lineNum":"  326","line":"    return syscall3("},
{"lineNum":"  327","line":"        .getdents64,"},
{"lineNum":"  328","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  329","line":"        @intFromPtr(dirp),"},
{"lineNum":"  330","line":"        @min(len, maxInt(c_int)),"},
{"lineNum":"  331","line":"    );"},
{"lineNum":"  332","line":"}"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"pub fn inotify_init1(flags: u32) usize {"},
{"lineNum":"  335","line":"    return syscall1(.inotify_init1, flags);"},
{"lineNum":"  336","line":"}"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"pub fn inotify_add_watch(fd: i32, pathname: [*:0]const u8, mask: u32) usize {"},
{"lineNum":"  339","line":"    return syscall3(.inotify_add_watch, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(pathname), mask);"},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"pub fn inotify_rm_watch(fd: i32, wd: i32) usize {"},
{"lineNum":"  343","line":"    return syscall2(.inotify_rm_watch, @as(usize, @bitCast(@as(isize, fd))), @as(usize, @bitCast(@as(isize, wd))));"},
{"lineNum":"  344","line":"}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"pub fn readlink(noalias path: [*:0]const u8, noalias buf_ptr: [*]u8, buf_len: usize) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"    if (@hasField(SYS, \"readlink\")) {"},
{"lineNum":"  348","line":"        return syscall3(.readlink, @intFromPtr(path), @intFromPtr(buf_ptr), buf_len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"    } else {"},
{"lineNum":"  350","line":"        return syscall4(.readlinkat, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(path), @intFromPtr(buf_ptr), buf_len);"},
{"lineNum":"  351","line":"    }"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"pub fn readlinkat(dirfd: i32, noalias path: [*:0]const u8, noalias buf_ptr: [*]u8, buf_len: usize) usize {"},
{"lineNum":"  355","line":"    return syscall4(.readlinkat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), @intFromPtr(buf_ptr), buf_len);"},
{"lineNum":"  356","line":"}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"pub fn mkdir(path: [*:0]const u8, mode: u32) usize {"},
{"lineNum":"  359","line":"    if (@hasField(SYS, \"mkdir\")) {"},
{"lineNum":"  360","line":"        return syscall2(.mkdir, @intFromPtr(path), mode);"},
{"lineNum":"  361","line":"    } else {"},
{"lineNum":"  362","line":"        return syscall3(.mkdirat, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(path), mode);"},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"pub fn mkdirat(dirfd: i32, path: [*:0]const u8, mode: u32) usize {"},
{"lineNum":"  367","line":"    return syscall3(.mkdirat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), mode);"},
{"lineNum":"  368","line":"}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"pub fn mknod(path: [*:0]const u8, mode: u32, dev: u32) usize {"},
{"lineNum":"  371","line":"    if (@hasField(SYS, \"mknod\")) {"},
{"lineNum":"  372","line":"        return syscall3(.mknod, @intFromPtr(path), mode, dev);"},
{"lineNum":"  373","line":"    } else {"},
{"lineNum":"  374","line":"        return mknodat(AT.FDCWD, path, mode, dev);"},
{"lineNum":"  375","line":"    }"},
{"lineNum":"  376","line":"}"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"pub fn mknodat(dirfd: i32, path: [*:0]const u8, mode: u32, dev: u32) usize {"},
{"lineNum":"  379","line":"    return syscall4(.mknodat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), mode, dev);"},
{"lineNum":"  380","line":"}"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"pub fn mount(special: [*:0]const u8, dir: [*:0]const u8, fstype: ?[*:0]const u8, flags: u32, data: usize) usize {"},
{"lineNum":"  383","line":"    return syscall5(.mount, @intFromPtr(special), @intFromPtr(dir), @intFromPtr(fstype), flags, data);"},
{"lineNum":"  384","line":"}"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"pub fn umount(special: [*:0]const u8) usize {"},
{"lineNum":"  387","line":"    return syscall2(.umount2, @intFromPtr(special), 0);"},
{"lineNum":"  388","line":"}"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"pub fn umount2(special: [*:0]const u8, flags: u32) usize {"},
{"lineNum":"  391","line":"    return syscall2(.umount2, @intFromPtr(special), flags);"},
{"lineNum":"  392","line":"}"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"pub fn mmap(address: ?[*]u8, length: usize, prot: usize, flags: u32, fd: i32, offset: i64) usize {","class":"lineCov","hits":"1","order":"761","possible_hits":"1",},
{"lineNum":"  395","line":"    if (@hasField(SYS, \"mmap2\")) {"},
{"lineNum":"  396","line":"        // Make sure the offset is also specified in multiples of page size"},
{"lineNum":"  397","line":"        if ((offset & (MMAP2_UNIT - 1)) != 0)"},
{"lineNum":"  398","line":"            return @as(usize, @bitCast(-@as(isize, @intFromEnum(E.INVAL))));"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"        return syscall6("},
{"lineNum":"  401","line":"            .mmap2,"},
{"lineNum":"  402","line":"            @intFromPtr(address),"},
{"lineNum":"  403","line":"            length,"},
{"lineNum":"  404","line":"            prot,"},
{"lineNum":"  405","line":"            flags,"},
{"lineNum":"  406","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  407","line":"            @as(usize, @truncate(@as(u64, @bitCast(offset)) / MMAP2_UNIT)),"},
{"lineNum":"  408","line":"        );"},
{"lineNum":"  409","line":"    } else {"},
{"lineNum":"  410","line":"        return syscall6(","class":"lineCov","hits":"1","order":"763","possible_hits":"1",},
{"lineNum":"  411","line":"            .mmap,"},
{"lineNum":"  412","line":"            @intFromPtr(address),","class":"lineCov","hits":"1","order":"762","possible_hits":"1",},
{"lineNum":"  413","line":"            length,"},
{"lineNum":"  414","line":"            prot,"},
{"lineNum":"  415","line":"            flags,"},
{"lineNum":"  416","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  417","line":"            @as(u64, @bitCast(offset)),"},
{"lineNum":"  418","line":"        );"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":"}"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"pub fn mprotect(address: [*]const u8, length: usize, protection: usize) usize {"},
{"lineNum":"  423","line":"    return syscall3(.mprotect, @intFromPtr(address), length, protection);"},
{"lineNum":"  424","line":"}"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"pub const MSF = struct {"},
{"lineNum":"  427","line":"    pub const ASYNC = 1;"},
{"lineNum":"  428","line":"    pub const INVALIDATE = 2;"},
{"lineNum":"  429","line":"    pub const SYNC = 4;"},
{"lineNum":"  430","line":"};"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"pub fn msync(address: [*]const u8, length: usize, flags: i32) usize {","class":"lineCov","hits":"1","order":"3032","possible_hits":"1",},
{"lineNum":"  433","line":"    return syscall3(.msync, @intFromPtr(address), length, @as(u32, @bitCast(flags)));","class":"lineCov","hits":"1","order":"3033","possible_hits":"1",},
{"lineNum":"  434","line":"}"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"pub fn munmap(address: [*]const u8, length: usize) usize {","class":"lineCov","hits":"1","order":"1504","possible_hits":"1",},
{"lineNum":"  437","line":"    return syscall2(.munmap, @intFromPtr(address), length);","class":"lineCov","hits":"1","order":"1505","possible_hits":"1",},
{"lineNum":"  438","line":"}"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"pub fn poll(fds: [*]pollfd, n: nfds_t, timeout: i32) usize {"},
{"lineNum":"  441","line":"    if (@hasField(SYS, \"poll\")) {"},
{"lineNum":"  442","line":"        return syscall3(.poll, @intFromPtr(fds), n, @as(u32, @bitCast(timeout)));"},
{"lineNum":"  443","line":"    } else {"},
{"lineNum":"  444","line":"        return syscall5("},
{"lineNum":"  445","line":"            .ppoll,"},
{"lineNum":"  446","line":"            @intFromPtr(fds),"},
{"lineNum":"  447","line":"            n,"},
{"lineNum":"  448","line":"            @intFromPtr(if (timeout >= 0)"},
{"lineNum":"  449","line":"                &timespec{"},
{"lineNum":"  450","line":"                    .tv_sec = @divTrunc(timeout, 1000),"},
{"lineNum":"  451","line":"                    .tv_nsec = @rem(timeout, 1000) * 1000000,"},
{"lineNum":"  452","line":"                }"},
{"lineNum":"  453","line":"            else"},
{"lineNum":"  454","line":"                null),"},
{"lineNum":"  455","line":"            0,"},
{"lineNum":"  456","line":"            NSIG / 8,"},
{"lineNum":"  457","line":"        );"},
{"lineNum":"  458","line":"    }"},
{"lineNum":"  459","line":"}"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"pub fn ppoll(fds: [*]pollfd, n: nfds_t, timeout: ?*timespec, sigmask: ?*const sigset_t) usize {"},
{"lineNum":"  462","line":"    return syscall5(.ppoll, @intFromPtr(fds), n, @intFromPtr(timeout), @intFromPtr(sigmask), NSIG / 8);"},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"pub fn read(fd: i32, buf: [*]u8, count: usize) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"    return syscall3(.read, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(buf), count);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"}"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"pub fn preadv(fd: i32, iov: [*]const iovec, count: usize, offset: i64) usize {"},
{"lineNum":"  470","line":"    const offset_u: u64 = @bitCast(offset);"},
{"lineNum":"  471","line":"    return syscall5("},
{"lineNum":"  472","line":"        .preadv,"},
{"lineNum":"  473","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  474","line":"        @intFromPtr(iov),"},
{"lineNum":"  475","line":"        count,"},
{"lineNum":"  476","line":"        // Kernel expects the offset is split into largest natural word-size."},
{"lineNum":"  477","line":"        // See following link for detail:"},
{"lineNum":"  478","line":"        // https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=601cc11d054ae4b5e9b5babec3d8e4667a2cb9b5"},
{"lineNum":"  479","line":"        @as(usize, @truncate(offset_u)),"},
{"lineNum":"  480","line":"        if (usize_bits < 64) @as(usize, @truncate(offset_u >> 32)) else 0,"},
{"lineNum":"  481","line":"    );"},
{"lineNum":"  482","line":"}"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"pub fn preadv2(fd: i32, iov: [*]const iovec, count: usize, offset: i64, flags: kernel_rwf) usize {"},
{"lineNum":"  485","line":"    const offset_u: u64 = @bitCast(offset);"},
{"lineNum":"  486","line":"    return syscall6("},
{"lineNum":"  487","line":"        .preadv2,"},
{"lineNum":"  488","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  489","line":"        @intFromPtr(iov),"},
{"lineNum":"  490","line":"        count,"},
{"lineNum":"  491","line":"        // See comments in preadv"},
{"lineNum":"  492","line":"        @as(usize, @truncate(offset_u)),"},
{"lineNum":"  493","line":"        if (usize_bits < 64) @as(usize, @truncate(offset_u >> 32)) else 0,"},
{"lineNum":"  494","line":"        flags,"},
{"lineNum":"  495","line":"    );"},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"pub fn readv(fd: i32, iov: [*]const iovec, count: usize) usize {"},
{"lineNum":"  499","line":"    return syscall3(.readv, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(iov), count);"},
{"lineNum":"  500","line":"}"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"pub fn writev(fd: i32, iov: [*]const iovec_const, count: usize) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"    return syscall3(.writev, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(iov), count);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"}"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"pub fn pwritev(fd: i32, iov: [*]const iovec_const, count: usize, offset: i64) usize {"},
{"lineNum":"  507","line":"    const offset_u: u64 = @bitCast(offset);"},
{"lineNum":"  508","line":"    return syscall5("},
{"lineNum":"  509","line":"        .pwritev,"},
{"lineNum":"  510","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  511","line":"        @intFromPtr(iov),"},
{"lineNum":"  512","line":"        count,"},
{"lineNum":"  513","line":"        // See comments in preadv"},
{"lineNum":"  514","line":"        @as(usize, @truncate(offset_u)),"},
{"lineNum":"  515","line":"        if (usize_bits < 64) @as(usize, @truncate(offset_u >> 32)) else 0,"},
{"lineNum":"  516","line":"    );"},
{"lineNum":"  517","line":"}"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"pub fn pwritev2(fd: i32, iov: [*]const iovec_const, count: usize, offset: i64, flags: kernel_rwf) usize {"},
{"lineNum":"  520","line":"    const offset_u: u64 = @bitCast(offset);"},
{"lineNum":"  521","line":"    return syscall6("},
{"lineNum":"  522","line":"        .pwritev2,"},
{"lineNum":"  523","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  524","line":"        @intFromPtr(iov),"},
{"lineNum":"  525","line":"        count,"},
{"lineNum":"  526","line":"        // See comments in preadv"},
{"lineNum":"  527","line":"        @as(usize, @truncate(offset_u)),"},
{"lineNum":"  528","line":"        if (usize_bits < 64) @as(usize, @truncate(offset_u >> 32)) else 0,"},
{"lineNum":"  529","line":"        flags,"},
{"lineNum":"  530","line":"    );"},
{"lineNum":"  531","line":"}"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"pub fn rmdir(path: [*:0]const u8) usize {"},
{"lineNum":"  534","line":"    if (@hasField(SYS, \"rmdir\")) {"},
{"lineNum":"  535","line":"        return syscall1(.rmdir, @intFromPtr(path));"},
{"lineNum":"  536","line":"    } else {"},
{"lineNum":"  537","line":"        return syscall3(.unlinkat, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(path), AT.REMOVEDIR);"},
{"lineNum":"  538","line":"    }"},
{"lineNum":"  539","line":"}"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"pub fn symlink(existing: [*:0]const u8, new: [*:0]const u8) usize {"},
{"lineNum":"  542","line":"    if (@hasField(SYS, \"symlink\")) {"},
{"lineNum":"  543","line":"        return syscall2(.symlink, @intFromPtr(existing), @intFromPtr(new));"},
{"lineNum":"  544","line":"    } else {"},
{"lineNum":"  545","line":"        return syscall3(.symlinkat, @intFromPtr(existing), @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(new));"},
{"lineNum":"  546","line":"    }"},
{"lineNum":"  547","line":"}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"pub fn symlinkat(existing: [*:0]const u8, newfd: i32, newpath: [*:0]const u8) usize {"},
{"lineNum":"  550","line":"    return syscall3(.symlinkat, @intFromPtr(existing), @as(usize, @bitCast(@as(isize, newfd))), @intFromPtr(newpath));"},
{"lineNum":"  551","line":"}"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"pub fn pread(fd: i32, buf: [*]u8, count: usize, offset: i64) usize {"},
{"lineNum":"  554","line":"    if (@hasField(SYS, \"pread64\") and usize_bits < 64) {"},
{"lineNum":"  555","line":"        const offset_halves = splitValue64(offset);"},
{"lineNum":"  556","line":"        if (require_aligned_register_pair) {"},
{"lineNum":"  557","line":"            return syscall6("},
{"lineNum":"  558","line":"                .pread64,"},
{"lineNum":"  559","line":"                @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  560","line":"                @intFromPtr(buf),"},
{"lineNum":"  561","line":"                count,"},
{"lineNum":"  562","line":"                0,"},
{"lineNum":"  563","line":"                offset_halves[0],"},
{"lineNum":"  564","line":"                offset_halves[1],"},
{"lineNum":"  565","line":"            );"},
{"lineNum":"  566","line":"        } else {"},
{"lineNum":"  567","line":"            return syscall5("},
{"lineNum":"  568","line":"                .pread64,"},
{"lineNum":"  569","line":"                @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  570","line":"                @intFromPtr(buf),"},
{"lineNum":"  571","line":"                count,"},
{"lineNum":"  572","line":"                offset_halves[0],"},
{"lineNum":"  573","line":"                offset_halves[1],"},
{"lineNum":"  574","line":"            );"},
{"lineNum":"  575","line":"        }"},
{"lineNum":"  576","line":"    } else {"},
{"lineNum":"  577","line":"        // Some architectures (eg. 64bit SPARC) pread is called pread64."},
{"lineNum":"  578","line":"        const syscall_number = if (!@hasField(SYS, \"pread\") and @hasField(SYS, \"pread64\"))"},
{"lineNum":"  579","line":"            .pread64"},
{"lineNum":"  580","line":"        else"},
{"lineNum":"  581","line":"            .pread;"},
{"lineNum":"  582","line":"        return syscall4("},
{"lineNum":"  583","line":"            syscall_number,"},
{"lineNum":"  584","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  585","line":"            @intFromPtr(buf),"},
{"lineNum":"  586","line":"            count,"},
{"lineNum":"  587","line":"            @as(u64, @bitCast(offset)),"},
{"lineNum":"  588","line":"        );"},
{"lineNum":"  589","line":"    }"},
{"lineNum":"  590","line":"}"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"pub fn access(path: [*:0]const u8, mode: u32) usize {"},
{"lineNum":"  593","line":"    if (@hasField(SYS, \"access\")) {"},
{"lineNum":"  594","line":"        return syscall2(.access, @intFromPtr(path), mode);"},
{"lineNum":"  595","line":"    } else {"},
{"lineNum":"  596","line":"        return syscall4(.faccessat, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(path), mode, 0);"},
{"lineNum":"  597","line":"    }"},
{"lineNum":"  598","line":"}"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"pub fn faccessat(dirfd: i32, path: [*:0]const u8, mode: u32, flags: u32) usize {"},
{"lineNum":"  601","line":"    return syscall4(.faccessat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), mode, flags);"},
{"lineNum":"  602","line":"}"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"pub fn pipe(fd: *[2]i32) usize {"},
{"lineNum":"  605","line":"    if (comptime (native_arch.isMIPS() or native_arch.isSPARC())) {"},
{"lineNum":"  606","line":"        return syscall_pipe(fd);"},
{"lineNum":"  607","line":"    } else if (@hasField(SYS, \"pipe\")) {"},
{"lineNum":"  608","line":"        return syscall1(.pipe, @intFromPtr(fd));"},
{"lineNum":"  609","line":"    } else {"},
{"lineNum":"  610","line":"        return syscall2(.pipe2, @intFromPtr(fd), 0);"},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":"}"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"pub fn pipe2(fd: *[2]i32, flags: u32) usize {"},
{"lineNum":"  615","line":"    return syscall2(.pipe2, @intFromPtr(fd), flags);"},
{"lineNum":"  616","line":"}"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"pub fn write(fd: i32, buf: [*]const u8, count: usize) usize {","class":"lineCov","hits":"1","order":"688","possible_hits":"1",},
{"lineNum":"  619","line":"    return syscall3(.write, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(buf), count);","class":"lineCov","hits":"1","order":"689","possible_hits":"1",},
{"lineNum":"  620","line":"}"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"pub fn ftruncate(fd: i32, length: i64) usize {"},
{"lineNum":"  623","line":"    if (@hasField(SYS, \"ftruncate64\") and usize_bits < 64) {"},
{"lineNum":"  624","line":"        const length_halves = splitValue64(length);"},
{"lineNum":"  625","line":"        if (require_aligned_register_pair) {"},
{"lineNum":"  626","line":"            return syscall4("},
{"lineNum":"  627","line":"                .ftruncate64,"},
{"lineNum":"  628","line":"                @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  629","line":"                0,"},
{"lineNum":"  630","line":"                length_halves[0],"},
{"lineNum":"  631","line":"                length_halves[1],"},
{"lineNum":"  632","line":"            );"},
{"lineNum":"  633","line":"        } else {"},
{"lineNum":"  634","line":"            return syscall3("},
{"lineNum":"  635","line":"                .ftruncate64,"},
{"lineNum":"  636","line":"                @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  637","line":"                length_halves[0],"},
{"lineNum":"  638","line":"                length_halves[1],"},
{"lineNum":"  639","line":"            );"},
{"lineNum":"  640","line":"        }"},
{"lineNum":"  641","line":"    } else {"},
{"lineNum":"  642","line":"        return syscall2("},
{"lineNum":"  643","line":"            .ftruncate,"},
{"lineNum":"  644","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  645","line":"            @as(usize, @bitCast(length)),"},
{"lineNum":"  646","line":"        );"},
{"lineNum":"  647","line":"    }"},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"pub fn pwrite(fd: i32, buf: [*]const u8, count: usize, offset: i64) usize {"},
{"lineNum":"  651","line":"    if (@hasField(SYS, \"pwrite64\") and usize_bits < 64) {"},
{"lineNum":"  652","line":"        const offset_halves = splitValue64(offset);"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"        if (require_aligned_register_pair) {"},
{"lineNum":"  655","line":"            return syscall6("},
{"lineNum":"  656","line":"                .pwrite64,"},
{"lineNum":"  657","line":"                @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  658","line":"                @intFromPtr(buf),"},
{"lineNum":"  659","line":"                count,"},
{"lineNum":"  660","line":"                0,"},
{"lineNum":"  661","line":"                offset_halves[0],"},
{"lineNum":"  662","line":"                offset_halves[1],"},
{"lineNum":"  663","line":"            );"},
{"lineNum":"  664","line":"        } else {"},
{"lineNum":"  665","line":"            return syscall5("},
{"lineNum":"  666","line":"                .pwrite64,"},
{"lineNum":"  667","line":"                @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  668","line":"                @intFromPtr(buf),"},
{"lineNum":"  669","line":"                count,"},
{"lineNum":"  670","line":"                offset_halves[0],"},
{"lineNum":"  671","line":"                offset_halves[1],"},
{"lineNum":"  672","line":"            );"},
{"lineNum":"  673","line":"        }"},
{"lineNum":"  674","line":"    } else {"},
{"lineNum":"  675","line":"        // Some architectures (eg. 64bit SPARC) pwrite is called pwrite64."},
{"lineNum":"  676","line":"        const syscall_number = if (!@hasField(SYS, \"pwrite\") and @hasField(SYS, \"pwrite64\"))"},
{"lineNum":"  677","line":"            .pwrite64"},
{"lineNum":"  678","line":"        else"},
{"lineNum":"  679","line":"            .pwrite;"},
{"lineNum":"  680","line":"        return syscall4("},
{"lineNum":"  681","line":"            syscall_number,"},
{"lineNum":"  682","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  683","line":"            @intFromPtr(buf),"},
{"lineNum":"  684","line":"            count,"},
{"lineNum":"  685","line":"            @as(u64, @bitCast(offset)),"},
{"lineNum":"  686","line":"        );"},
{"lineNum":"  687","line":"    }"},
{"lineNum":"  688","line":"}"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"pub fn rename(old: [*:0]const u8, new: [*:0]const u8) usize {"},
{"lineNum":"  691","line":"    if (@hasField(SYS, \"rename\")) {"},
{"lineNum":"  692","line":"        return syscall2(.rename, @intFromPtr(old), @intFromPtr(new));"},
{"lineNum":"  693","line":"    } else if (@hasField(SYS, \"renameat\")) {"},
{"lineNum":"  694","line":"        return syscall4(.renameat, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(old), @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(new));"},
{"lineNum":"  695","line":"    } else {"},
{"lineNum":"  696","line":"        return syscall5(.renameat2, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(old), @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(new), 0);"},
{"lineNum":"  697","line":"    }"},
{"lineNum":"  698","line":"}"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"pub fn renameat(oldfd: i32, oldpath: [*]const u8, newfd: i32, newpath: [*]const u8) usize {"},
{"lineNum":"  701","line":"    if (@hasField(SYS, \"renameat\")) {"},
{"lineNum":"  702","line":"        return syscall4("},
{"lineNum":"  703","line":"            .renameat,"},
{"lineNum":"  704","line":"            @as(usize, @bitCast(@as(isize, oldfd))),"},
{"lineNum":"  705","line":"            @intFromPtr(oldpath),"},
{"lineNum":"  706","line":"            @as(usize, @bitCast(@as(isize, newfd))),"},
{"lineNum":"  707","line":"            @intFromPtr(newpath),"},
{"lineNum":"  708","line":"        );"},
{"lineNum":"  709","line":"    } else {"},
{"lineNum":"  710","line":"        return syscall5("},
{"lineNum":"  711","line":"            .renameat2,"},
{"lineNum":"  712","line":"            @as(usize, @bitCast(@as(isize, oldfd))),"},
{"lineNum":"  713","line":"            @intFromPtr(oldpath),"},
{"lineNum":"  714","line":"            @as(usize, @bitCast(@as(isize, newfd))),"},
{"lineNum":"  715","line":"            @intFromPtr(newpath),"},
{"lineNum":"  716","line":"            0,"},
{"lineNum":"  717","line":"        );"},
{"lineNum":"  718","line":"    }"},
{"lineNum":"  719","line":"}"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"pub fn renameat2(oldfd: i32, oldpath: [*:0]const u8, newfd: i32, newpath: [*:0]const u8, flags: u32) usize {"},
{"lineNum":"  722","line":"    return syscall5("},
{"lineNum":"  723","line":"        .renameat2,"},
{"lineNum":"  724","line":"        @as(usize, @bitCast(@as(isize, oldfd))),"},
{"lineNum":"  725","line":"        @intFromPtr(oldpath),"},
{"lineNum":"  726","line":"        @as(usize, @bitCast(@as(isize, newfd))),"},
{"lineNum":"  727","line":"        @intFromPtr(newpath),"},
{"lineNum":"  728","line":"        flags,"},
{"lineNum":"  729","line":"    );"},
{"lineNum":"  730","line":"}"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"pub fn open(path: [*:0]const u8, flags: u32, perm: mode_t) usize {"},
{"lineNum":"  733","line":"    if (@hasField(SYS, \"open\")) {"},
{"lineNum":"  734","line":"        return syscall3(.open, @intFromPtr(path), flags, perm);"},
{"lineNum":"  735","line":"    } else {"},
{"lineNum":"  736","line":"        return syscall4("},
{"lineNum":"  737","line":"            .openat,"},
{"lineNum":"  738","line":"            @as(usize, @bitCast(@as(isize, AT.FDCWD))),"},
{"lineNum":"  739","line":"            @intFromPtr(path),"},
{"lineNum":"  740","line":"            flags,"},
{"lineNum":"  741","line":"            perm,"},
{"lineNum":"  742","line":"        );"},
{"lineNum":"  743","line":"    }"},
{"lineNum":"  744","line":"}"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"pub fn create(path: [*:0]const u8, perm: mode_t) usize {"},
{"lineNum":"  747","line":"    return syscall2(.creat, @intFromPtr(path), perm);"},
{"lineNum":"  748","line":"}"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"pub fn openat(dirfd: i32, path: [*:0]const u8, flags: u32, mode: mode_t) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  751","line":"    // dirfd could be negative, for example AT.FDCWD is -100"},
{"lineNum":"  752","line":"    return syscall4(.openat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), flags, mode);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  753","line":"}"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"/// See also `clone` (from the arch-specific include)"},
{"lineNum":"  756","line":"pub fn clone5(flags: usize, child_stack_ptr: usize, parent_tid: *i32, child_tid: *i32, newtls: usize) usize {"},
{"lineNum":"  757","line":"    return syscall5(.clone, flags, child_stack_ptr, @intFromPtr(parent_tid), @intFromPtr(child_tid), newtls);"},
{"lineNum":"  758","line":"}"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"/// See also `clone` (from the arch-specific include)"},
{"lineNum":"  761","line":"pub fn clone2(flags: u32, child_stack_ptr: usize) usize {"},
{"lineNum":"  762","line":"    return syscall2(.clone, flags, child_stack_ptr);"},
{"lineNum":"  763","line":"}"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"pub fn close(fd: i32) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":"    return syscall1(.close, @as(usize, @bitCast(@as(isize, fd))));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"pub fn fchmod(fd: i32, mode: mode_t) usize {"},
{"lineNum":"  770","line":"    return syscall2(.fchmod, @as(usize, @bitCast(@as(isize, fd))), mode);"},
{"lineNum":"  771","line":"}"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"pub fn chmod(path: [*:0]const u8, mode: mode_t) usize {"},
{"lineNum":"  774","line":"    if (@hasField(SYS, \"chmod\")) {"},
{"lineNum":"  775","line":"        return syscall2(.chmod, @intFromPtr(path), mode);"},
{"lineNum":"  776","line":"    } else {"},
{"lineNum":"  777","line":"        return syscall4("},
{"lineNum":"  778","line":"            .fchmodat,"},
{"lineNum":"  779","line":"            @as(usize, @bitCast(@as(isize, AT.FDCWD))),"},
{"lineNum":"  780","line":"            @intFromPtr(path),"},
{"lineNum":"  781","line":"            mode,"},
{"lineNum":"  782","line":"            0,"},
{"lineNum":"  783","line":"        );"},
{"lineNum":"  784","line":"    }"},
{"lineNum":"  785","line":"}"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"pub fn fchown(fd: i32, owner: uid_t, group: gid_t) usize {"},
{"lineNum":"  788","line":"    if (@hasField(SYS, \"fchown32\")) {"},
{"lineNum":"  789","line":"        return syscall3(.fchown32, @as(usize, @bitCast(@as(isize, fd))), owner, group);"},
{"lineNum":"  790","line":"    } else {"},
{"lineNum":"  791","line":"        return syscall3(.fchown, @as(usize, @bitCast(@as(isize, fd))), owner, group);"},
{"lineNum":"  792","line":"    }"},
{"lineNum":"  793","line":"}"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"pub fn fchmodat(fd: i32, path: [*:0]const u8, mode: mode_t, flags: u32) usize {"},
{"lineNum":"  796","line":"    return syscall4(.fchmodat, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(path), mode, flags);"},
{"lineNum":"  797","line":"}"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"/// Can only be called on 32 bit systems. For 64 bit see `lseek`."},
{"lineNum":"  800","line":"pub fn llseek(fd: i32, offset: u64, result: ?*u64, whence: usize) usize {"},
{"lineNum":"  801","line":"    // NOTE: The offset parameter splitting is independent from the target"},
{"lineNum":"  802","line":"    // endianness."},
{"lineNum":"  803","line":"    return syscall5("},
{"lineNum":"  804","line":"        ._llseek,"},
{"lineNum":"  805","line":"        @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":"  806","line":"        @as(usize, @truncate(offset >> 32)),"},
{"lineNum":"  807","line":"        @as(usize, @truncate(offset)),"},
{"lineNum":"  808","line":"        @intFromPtr(result),"},
{"lineNum":"  809","line":"        whence,"},
{"lineNum":"  810","line":"    );"},
{"lineNum":"  811","line":"}"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"/// Can only be called on 64 bit systems. For 32 bit see `llseek`."},
{"lineNum":"  814","line":"pub fn lseek(fd: i32, offset: i64, whence: usize) usize {"},
{"lineNum":"  815","line":"    return syscall3(.lseek, @as(usize, @bitCast(@as(isize, fd))), @as(usize, @bitCast(offset)), whence);"},
{"lineNum":"  816","line":"}"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"pub fn exit(status: i32) noreturn {"},
{"lineNum":"  819","line":"    _ = syscall1(.exit, @as(usize, @bitCast(@as(isize, status))));"},
{"lineNum":"  820","line":"    unreachable;"},
{"lineNum":"  821","line":"}"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"pub fn exit_group(status: i32) noreturn {","class":"lineCov","hits":"1","order":"3544","possible_hits":"1",},
{"lineNum":"  824","line":"    _ = syscall1(.exit_group, @as(usize, @bitCast(@as(isize, status))));","class":"lineCov","hits":"1","order":"3545","possible_hits":"1",},
{"lineNum":"  825","line":"    unreachable;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":"}"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"/// flags for the `reboot\' system call."},
{"lineNum":"  829","line":"pub const LINUX_REBOOT = struct {"},
{"lineNum":"  830","line":"    /// First magic value required to use _reboot() system call."},
{"lineNum":"  831","line":"    pub const MAGIC1 = enum(u32) {"},
{"lineNum":"  832","line":"        MAGIC1 = 0xfee1dead,"},
{"lineNum":"  833","line":"        _,"},
{"lineNum":"  834","line":"    };"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"    /// Second magic value required to use _reboot() system call."},
{"lineNum":"  837","line":"    pub const MAGIC2 = enum(u32) {"},
{"lineNum":"  838","line":"        MAGIC2 = 672274793,"},
{"lineNum":"  839","line":"        MAGIC2A = 85072278,"},
{"lineNum":"  840","line":"        MAGIC2B = 369367448,"},
{"lineNum":"  841","line":"        MAGIC2C = 537993216,"},
{"lineNum":"  842","line":"        _,"},
{"lineNum":"  843","line":"    };"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    /// Commands accepted by the _reboot() system call."},
{"lineNum":"  846","line":"    pub const CMD = enum(u32) {"},
{"lineNum":"  847","line":"        /// Restart system using default command and mode."},
{"lineNum":"  848","line":"        RESTART = 0x01234567,"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"        /// Stop OS and give system control to ROM monitor, if any."},
{"lineNum":"  851","line":"        HALT = 0xCDEF0123,"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"        /// Ctrl-Alt-Del sequence causes RESTART command."},
{"lineNum":"  854","line":"        CAD_ON = 0x89ABCDEF,"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"        /// Ctrl-Alt-Del sequence sends SIGINT to init task."},
{"lineNum":"  857","line":"        CAD_OFF = 0x00000000,"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"        /// Stop OS and remove all power from system, if possible."},
{"lineNum":"  860","line":"        POWER_OFF = 0x4321FEDC,"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"        /// Restart system using given command string."},
{"lineNum":"  863","line":"        RESTART2 = 0xA1B2C3D4,"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"        /// Suspend system using software suspend if compiled in."},
{"lineNum":"  866","line":"        SW_SUSPEND = 0xD000FCE2,"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"        /// Restart system using a previously loaded Linux kernel"},
{"lineNum":"  869","line":"        KEXEC = 0x45584543,"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"        _,"},
{"lineNum":"  872","line":"    };"},
{"lineNum":"  873","line":"};"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"pub fn reboot(magic: LINUX_REBOOT.MAGIC1, magic2: LINUX_REBOOT.MAGIC2, cmd: LINUX_REBOOT.CMD, arg: ?*const anyopaque) usize {"},
{"lineNum":"  876","line":"    return std.os.linux.syscall4("},
{"lineNum":"  877","line":"        .reboot,"},
{"lineNum":"  878","line":"        @intFromEnum(magic),"},
{"lineNum":"  879","line":"        @intFromEnum(magic2),"},
{"lineNum":"  880","line":"        @intFromEnum(cmd),"},
{"lineNum":"  881","line":"        @intFromPtr(arg),"},
{"lineNum":"  882","line":"    );"},
{"lineNum":"  883","line":"}"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"pub fn getrandom(buf: [*]u8, count: usize, flags: u32) usize {"},
{"lineNum":"  886","line":"    return syscall3(.getrandom, @intFromPtr(buf), count, flags);"},
{"lineNum":"  887","line":"}"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"pub fn kill(pid: pid_t, sig: i32) usize {"},
{"lineNum":"  890","line":"    return syscall2(.kill, @as(usize, @bitCast(@as(isize, pid))), @as(usize, @bitCast(@as(isize, sig))));"},
{"lineNum":"  891","line":"}"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"pub fn tkill(tid: pid_t, sig: i32) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  894","line":"    return syscall2(.tkill, @as(usize, @bitCast(@as(isize, tid))), @as(usize, @bitCast(@as(isize, sig))));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  895","line":"}"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"pub fn tgkill(tgid: pid_t, tid: pid_t, sig: i32) usize {"},
{"lineNum":"  898","line":"    return syscall3(.tgkill, @as(usize, @bitCast(@as(isize, tgid))), @as(usize, @bitCast(@as(isize, tid))), @as(usize, @bitCast(@as(isize, sig))));"},
{"lineNum":"  899","line":"}"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"pub fn link(oldpath: [*:0]const u8, newpath: [*:0]const u8, flags: i32) usize {"},
{"lineNum":"  902","line":"    if (@hasField(SYS, \"link\")) {"},
{"lineNum":"  903","line":"        return syscall3("},
{"lineNum":"  904","line":"            .link,"},
{"lineNum":"  905","line":"            @intFromPtr(oldpath),"},
{"lineNum":"  906","line":"            @intFromPtr(newpath),"},
{"lineNum":"  907","line":"            @as(usize, @bitCast(@as(isize, flags))),"},
{"lineNum":"  908","line":"        );"},
{"lineNum":"  909","line":"    } else {"},
{"lineNum":"  910","line":"        return syscall5("},
{"lineNum":"  911","line":"            .linkat,"},
{"lineNum":"  912","line":"            @as(usize, @bitCast(@as(isize, AT.FDCWD))),"},
{"lineNum":"  913","line":"            @intFromPtr(oldpath),"},
{"lineNum":"  914","line":"            @as(usize, @bitCast(@as(isize, AT.FDCWD))),"},
{"lineNum":"  915","line":"            @intFromPtr(newpath),"},
{"lineNum":"  916","line":"            @as(usize, @bitCast(@as(isize, flags))),"},
{"lineNum":"  917","line":"        );"},
{"lineNum":"  918","line":"    }"},
{"lineNum":"  919","line":"}"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"pub fn linkat(oldfd: fd_t, oldpath: [*:0]const u8, newfd: fd_t, newpath: [*:0]const u8, flags: i32) usize {"},
{"lineNum":"  922","line":"    return syscall5("},
{"lineNum":"  923","line":"        .linkat,"},
{"lineNum":"  924","line":"        @as(usize, @bitCast(@as(isize, oldfd))),"},
{"lineNum":"  925","line":"        @intFromPtr(oldpath),"},
{"lineNum":"  926","line":"        @as(usize, @bitCast(@as(isize, newfd))),"},
{"lineNum":"  927","line":"        @intFromPtr(newpath),"},
{"lineNum":"  928","line":"        @as(usize, @bitCast(@as(isize, flags))),"},
{"lineNum":"  929","line":"    );"},
{"lineNum":"  930","line":"}"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"pub fn unlink(path: [*:0]const u8) usize {"},
{"lineNum":"  933","line":"    if (@hasField(SYS, \"unlink\")) {"},
{"lineNum":"  934","line":"        return syscall1(.unlink, @intFromPtr(path));"},
{"lineNum":"  935","line":"    } else {"},
{"lineNum":"  936","line":"        return syscall3(.unlinkat, @as(usize, @bitCast(@as(isize, AT.FDCWD))), @intFromPtr(path), 0);"},
{"lineNum":"  937","line":"    }"},
{"lineNum":"  938","line":"}"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"pub fn unlinkat(dirfd: i32, path: [*:0]const u8, flags: u32) usize {"},
{"lineNum":"  941","line":"    return syscall3(.unlinkat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), flags);"},
{"lineNum":"  942","line":"}"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"pub fn waitpid(pid: pid_t, status: *u32, flags: u32) usize {"},
{"lineNum":"  945","line":"    return syscall4(.wait4, @as(usize, @bitCast(@as(isize, pid))), @intFromPtr(status), flags, 0);"},
{"lineNum":"  946","line":"}"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"pub fn wait4(pid: pid_t, status: *u32, flags: u32, usage: ?*rusage) usize {"},
{"lineNum":"  949","line":"    return syscall4("},
{"lineNum":"  950","line":"        .wait4,"},
{"lineNum":"  951","line":"        @as(usize, @bitCast(@as(isize, pid))),"},
{"lineNum":"  952","line":"        @intFromPtr(status),"},
{"lineNum":"  953","line":"        flags,"},
{"lineNum":"  954","line":"        @intFromPtr(usage),"},
{"lineNum":"  955","line":"    );"},
{"lineNum":"  956","line":"}"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"pub fn waitid(id_type: P, id: i32, infop: *siginfo_t, flags: u32) usize {"},
{"lineNum":"  959","line":"    return syscall5(.waitid, @intFromEnum(id_type), @as(usize, @bitCast(@as(isize, id))), @intFromPtr(infop), flags, 0);"},
{"lineNum":"  960","line":"}"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"pub fn fcntl(fd: fd_t, cmd: i32, arg: usize) usize {"},
{"lineNum":"  963","line":"    return syscall3(.fcntl, @as(usize, @bitCast(@as(isize, fd))), @as(usize, @bitCast(@as(isize, cmd))), arg);"},
{"lineNum":"  964","line":"}"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"pub fn flock(fd: fd_t, operation: i32) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  967","line":"    return syscall2(.flock, @as(usize, @bitCast(@as(isize, fd))), @as(usize, @bitCast(@as(isize, operation))));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  968","line":"}"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"var vdso_clock_gettime = @as(?*const anyopaque, @ptrCast(&init_vdso_clock_gettime));"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"// We must follow the C calling convention when we call into the VDSO"},
{"lineNum":"  973","line":"const vdso_clock_gettime_ty = *align(1) const fn (i32, *timespec) callconv(.C) usize;"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"pub fn clock_gettime(clk_id: i32, tp: *timespec) usize {","class":"lineCov","hits":"1","order":"405","possible_hits":"1",},
{"lineNum":"  976","line":"    if (@hasDecl(VDSO, \"CGT_SYM\")) {"},
{"lineNum":"  977","line":"        const ptr = @atomicLoad(?*const anyopaque, &vdso_clock_gettime, .Unordered);","class":"lineCov","hits":"1","order":"406","possible_hits":"1",},
{"lineNum":"  978","line":"        if (ptr) |fn_ptr| {","class":"lineCov","hits":"2","order":"407","possible_hits":"2",},
{"lineNum":"  979","line":"            const f = @as(vdso_clock_gettime_ty, @ptrCast(fn_ptr));","class":"lineCov","hits":"1","order":"408","possible_hits":"1",},
{"lineNum":"  980","line":"            const rc = f(clk_id, tp);","class":"lineCov","hits":"1","order":"409","possible_hits":"1",},
{"lineNum":"  981","line":"            switch (rc) {","class":"lineCov","hits":"1","order":"476","possible_hits":"1",},
{"lineNum":"  982","line":"                0, @as(usize, @bitCast(-@as(isize, @intFromEnum(E.INVAL)))) => return rc,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  983","line":"                else => {},"},
{"lineNum":"  984","line":"            }"},
{"lineNum":"  985","line":"        }"},
{"lineNum":"  986","line":"    }"},
{"lineNum":"  987","line":"    return syscall2(.clock_gettime, @as(usize, @bitCast(@as(isize, clk_id))), @intFromPtr(tp));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  988","line":"}"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"fn init_vdso_clock_gettime(clk: i32, ts: *timespec) callconv(.C) usize {","class":"lineCov","hits":"1","order":"410","possible_hits":"1",},
{"lineNum":"  991","line":"    const ptr = @as(?*const anyopaque, @ptrFromInt(vdso.lookup(VDSO.CGT_VER, VDSO.CGT_SYM)));","class":"lineCov","hits":"1","order":"411","possible_hits":"1",},
{"lineNum":"  992","line":"    // Note that we may not have a VDSO at all, update the stub address anyway"},
{"lineNum":"  993","line":"    // so that clock_gettime will fall back on the good old (and slow) syscall"},
{"lineNum":"  994","line":"    @atomicStore(?*const anyopaque, &vdso_clock_gettime, ptr, .Monotonic);","class":"lineCov","hits":"1","order":"472","possible_hits":"1",},
{"lineNum":"  995","line":"    // Call into the VDSO if available"},
{"lineNum":"  996","line":"    if (ptr) |fn_ptr| {","class":"lineCov","hits":"2","order":"473","possible_hits":"2",},
{"lineNum":"  997","line":"        const f = @as(vdso_clock_gettime_ty, @ptrCast(fn_ptr));","class":"lineCov","hits":"1","order":"474","possible_hits":"1",},
{"lineNum":"  998","line":"        return f(clk, ts);","class":"lineCov","hits":"1","order":"475","possible_hits":"1",},
{"lineNum":"  999","line":"    }"},
{"lineNum":" 1000","line":"    return @as(usize, @bitCast(-@as(isize, @intFromEnum(E.NOSYS))));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1001","line":"}"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"pub fn clock_getres(clk_id: i32, tp: *timespec) usize {"},
{"lineNum":" 1004","line":"    return syscall2(.clock_getres, @as(usize, @bitCast(@as(isize, clk_id))), @intFromPtr(tp));"},
{"lineNum":" 1005","line":"}"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"pub fn clock_settime(clk_id: i32, tp: *const timespec) usize {"},
{"lineNum":" 1008","line":"    return syscall2(.clock_settime, @as(usize, @bitCast(@as(isize, clk_id))), @intFromPtr(tp));"},
{"lineNum":" 1009","line":"}"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"pub fn gettimeofday(tv: *timeval, tz: *timezone) usize {"},
{"lineNum":" 1012","line":"    return syscall2(.gettimeofday, @intFromPtr(tv), @intFromPtr(tz));"},
{"lineNum":" 1013","line":"}"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"pub fn settimeofday(tv: *const timeval, tz: *const timezone) usize {"},
{"lineNum":" 1016","line":"    return syscall2(.settimeofday, @intFromPtr(tv), @intFromPtr(tz));"},
{"lineNum":" 1017","line":"}"},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"pub fn nanosleep(req: *const timespec, rem: ?*timespec) usize {"},
{"lineNum":" 1020","line":"    return syscall2(.nanosleep, @intFromPtr(req), @intFromPtr(rem));"},
{"lineNum":" 1021","line":"}"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"pub fn setuid(uid: uid_t) usize {"},
{"lineNum":" 1024","line":"    if (@hasField(SYS, \"setuid32\")) {"},
{"lineNum":" 1025","line":"        return syscall1(.setuid32, uid);"},
{"lineNum":" 1026","line":"    } else {"},
{"lineNum":" 1027","line":"        return syscall1(.setuid, uid);"},
{"lineNum":" 1028","line":"    }"},
{"lineNum":" 1029","line":"}"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"pub fn setgid(gid: gid_t) usize {"},
{"lineNum":" 1032","line":"    if (@hasField(SYS, \"setgid32\")) {"},
{"lineNum":" 1033","line":"        return syscall1(.setgid32, gid);"},
{"lineNum":" 1034","line":"    } else {"},
{"lineNum":" 1035","line":"        return syscall1(.setgid, gid);"},
{"lineNum":" 1036","line":"    }"},
{"lineNum":" 1037","line":"}"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"pub fn setreuid(ruid: uid_t, euid: uid_t) usize {"},
{"lineNum":" 1040","line":"    if (@hasField(SYS, \"setreuid32\")) {"},
{"lineNum":" 1041","line":"        return syscall2(.setreuid32, ruid, euid);"},
{"lineNum":" 1042","line":"    } else {"},
{"lineNum":" 1043","line":"        return syscall2(.setreuid, ruid, euid);"},
{"lineNum":" 1044","line":"    }"},
{"lineNum":" 1045","line":"}"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"pub fn setregid(rgid: gid_t, egid: gid_t) usize {"},
{"lineNum":" 1048","line":"    if (@hasField(SYS, \"setregid32\")) {"},
{"lineNum":" 1049","line":"        return syscall2(.setregid32, rgid, egid);"},
{"lineNum":" 1050","line":"    } else {"},
{"lineNum":" 1051","line":"        return syscall2(.setregid, rgid, egid);"},
{"lineNum":" 1052","line":"    }"},
{"lineNum":" 1053","line":"}"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"pub fn getuid() uid_t {"},
{"lineNum":" 1056","line":"    if (@hasField(SYS, \"getuid32\")) {"},
{"lineNum":" 1057","line":"        return @as(uid_t, @intCast(syscall0(.getuid32)));"},
{"lineNum":" 1058","line":"    } else {"},
{"lineNum":" 1059","line":"        return @as(uid_t, @intCast(syscall0(.getuid)));"},
{"lineNum":" 1060","line":"    }"},
{"lineNum":" 1061","line":"}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"pub fn getgid() gid_t {"},
{"lineNum":" 1064","line":"    if (@hasField(SYS, \"getgid32\")) {"},
{"lineNum":" 1065","line":"        return @as(gid_t, @intCast(syscall0(.getgid32)));"},
{"lineNum":" 1066","line":"    } else {"},
{"lineNum":" 1067","line":"        return @as(gid_t, @intCast(syscall0(.getgid)));"},
{"lineNum":" 1068","line":"    }"},
{"lineNum":" 1069","line":"}"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"pub fn geteuid() uid_t {"},
{"lineNum":" 1072","line":"    if (@hasField(SYS, \"geteuid32\")) {"},
{"lineNum":" 1073","line":"        return @as(uid_t, @intCast(syscall0(.geteuid32)));"},
{"lineNum":" 1074","line":"    } else {"},
{"lineNum":" 1075","line":"        return @as(uid_t, @intCast(syscall0(.geteuid)));"},
{"lineNum":" 1076","line":"    }"},
{"lineNum":" 1077","line":"}"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"pub fn getegid() gid_t {"},
{"lineNum":" 1080","line":"    if (@hasField(SYS, \"getegid32\")) {"},
{"lineNum":" 1081","line":"        return @as(gid_t, @intCast(syscall0(.getegid32)));"},
{"lineNum":" 1082","line":"    } else {"},
{"lineNum":" 1083","line":"        return @as(gid_t, @intCast(syscall0(.getegid)));"},
{"lineNum":" 1084","line":"    }"},
{"lineNum":" 1085","line":"}"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"pub fn seteuid(euid: uid_t) usize {"},
{"lineNum":" 1088","line":"    // We use setresuid here instead of setreuid to ensure that the saved uid"},
{"lineNum":" 1089","line":"    // is not changed. This is what musl and recent glibc versions do as well."},
{"lineNum":" 1090","line":"    //"},
{"lineNum":" 1091","line":"    // The setresuid(2) man page says that if -1 is passed the corresponding"},
{"lineNum":" 1092","line":"    // id will not be changed. Since uid_t is unsigned, this wraps around to the"},
{"lineNum":" 1093","line":"    // max value in C."},
{"lineNum":" 1094","line":"    comptime assert(@typeInfo(uid_t) == .Int and @typeInfo(uid_t).Int.signedness == .unsigned);"},
{"lineNum":" 1095","line":"    return setresuid(std.math.maxInt(uid_t), euid, std.math.maxInt(uid_t));"},
{"lineNum":" 1096","line":"}"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"pub fn setegid(egid: gid_t) usize {"},
{"lineNum":" 1099","line":"    // We use setresgid here instead of setregid to ensure that the saved uid"},
{"lineNum":" 1100","line":"    // is not changed. This is what musl and recent glibc versions do as well."},
{"lineNum":" 1101","line":"    //"},
{"lineNum":" 1102","line":"    // The setresgid(2) man page says that if -1 is passed the corresponding"},
{"lineNum":" 1103","line":"    // id will not be changed. Since gid_t is unsigned, this wraps around to the"},
{"lineNum":" 1104","line":"    // max value in C."},
{"lineNum":" 1105","line":"    comptime assert(@typeInfo(uid_t) == .Int and @typeInfo(uid_t).Int.signedness == .unsigned);"},
{"lineNum":" 1106","line":"    return setresgid(std.math.maxInt(gid_t), egid, std.math.maxInt(gid_t));"},
{"lineNum":" 1107","line":"}"},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"pub fn getresuid(ruid: *uid_t, euid: *uid_t, suid: *uid_t) usize {"},
{"lineNum":" 1110","line":"    if (@hasField(SYS, \"getresuid32\")) {"},
{"lineNum":" 1111","line":"        return syscall3(.getresuid32, @intFromPtr(ruid), @intFromPtr(euid), @intFromPtr(suid));"},
{"lineNum":" 1112","line":"    } else {"},
{"lineNum":" 1113","line":"        return syscall3(.getresuid, @intFromPtr(ruid), @intFromPtr(euid), @intFromPtr(suid));"},
{"lineNum":" 1114","line":"    }"},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"pub fn getresgid(rgid: *gid_t, egid: *gid_t, sgid: *gid_t) usize {"},
{"lineNum":" 1118","line":"    if (@hasField(SYS, \"getresgid32\")) {"},
{"lineNum":" 1119","line":"        return syscall3(.getresgid32, @intFromPtr(rgid), @intFromPtr(egid), @intFromPtr(sgid));"},
{"lineNum":" 1120","line":"    } else {"},
{"lineNum":" 1121","line":"        return syscall3(.getresgid, @intFromPtr(rgid), @intFromPtr(egid), @intFromPtr(sgid));"},
{"lineNum":" 1122","line":"    }"},
{"lineNum":" 1123","line":"}"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"pub fn setresuid(ruid: uid_t, euid: uid_t, suid: uid_t) usize {"},
{"lineNum":" 1126","line":"    if (@hasField(SYS, \"setresuid32\")) {"},
{"lineNum":" 1127","line":"        return syscall3(.setresuid32, ruid, euid, suid);"},
{"lineNum":" 1128","line":"    } else {"},
{"lineNum":" 1129","line":"        return syscall3(.setresuid, ruid, euid, suid);"},
{"lineNum":" 1130","line":"    }"},
{"lineNum":" 1131","line":"}"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"pub fn setresgid(rgid: gid_t, egid: gid_t, sgid: gid_t) usize {"},
{"lineNum":" 1134","line":"    if (@hasField(SYS, \"setresgid32\")) {"},
{"lineNum":" 1135","line":"        return syscall3(.setresgid32, rgid, egid, sgid);"},
{"lineNum":" 1136","line":"    } else {"},
{"lineNum":" 1137","line":"        return syscall3(.setresgid, rgid, egid, sgid);"},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":"}"},
{"lineNum":" 1140","line":""},
{"lineNum":" 1141","line":"pub fn getgroups(size: usize, list: *gid_t) usize {"},
{"lineNum":" 1142","line":"    if (@hasField(SYS, \"getgroups32\")) {"},
{"lineNum":" 1143","line":"        return syscall2(.getgroups32, size, @intFromPtr(list));"},
{"lineNum":" 1144","line":"    } else {"},
{"lineNum":" 1145","line":"        return syscall2(.getgroups, size, @intFromPtr(list));"},
{"lineNum":" 1146","line":"    }"},
{"lineNum":" 1147","line":"}"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"pub fn setgroups(size: usize, list: [*]const gid_t) usize {"},
{"lineNum":" 1150","line":"    if (@hasField(SYS, \"setgroups32\")) {"},
{"lineNum":" 1151","line":"        return syscall2(.setgroups32, size, @intFromPtr(list));"},
{"lineNum":" 1152","line":"    } else {"},
{"lineNum":" 1153","line":"        return syscall2(.setgroups, size, @intFromPtr(list));"},
{"lineNum":" 1154","line":"    }"},
{"lineNum":" 1155","line":"}"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"pub fn getpid() pid_t {"},
{"lineNum":" 1158","line":"    return @as(pid_t, @bitCast(@as(u32, @truncate(syscall0(.getpid)))));"},
{"lineNum":" 1159","line":"}"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"pub fn gettid() pid_t {","class":"lineCov","hits":"1","order":"523","possible_hits":"1",},
{"lineNum":" 1162","line":"    return @as(pid_t, @bitCast(@as(u32, @truncate(syscall0(.gettid)))));","class":"lineCov","hits":"1","order":"524","possible_hits":"1",},
{"lineNum":" 1163","line":"}"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"pub fn sigprocmask(flags: u32, noalias set: ?*const sigset_t, noalias oldset: ?*sigset_t) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1166","line":"    return syscall4(.rt_sigprocmask, flags, @intFromPtr(set), @intFromPtr(oldset), NSIG / 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1167","line":"}"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"pub fn sigaction(sig: u6, noalias act: ?*const Sigaction, noalias oact: ?*Sigaction) usize {","class":"lineCov","hits":"1","order":"133","possible_hits":"1",},
{"lineNum":" 1170","line":"    assert(sig >= 1);","class":"lineCov","hits":"1","order":"134","possible_hits":"1",},
{"lineNum":" 1171","line":"    assert(sig != SIG.KILL);","class":"lineCov","hits":"1","order":"135","possible_hits":"1",},
{"lineNum":" 1172","line":"    assert(sig != SIG.STOP);","class":"lineCov","hits":"1","order":"136","possible_hits":"1",},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"    var ksa: k_sigaction = undefined;","class":"lineCov","hits":"1","order":"137","possible_hits":"1",},
{"lineNum":" 1175","line":"    var oldksa: k_sigaction = undefined;","class":"lineCov","hits":"1","order":"138","possible_hits":"1",},
{"lineNum":" 1176","line":"    const mask_size = @sizeOf(@TypeOf(ksa.mask));"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"    if (act) |new| {","class":"lineCov","hits":"2","order":"139","possible_hits":"2",},
{"lineNum":" 1179","line":"        const restorer_fn = if ((new.flags & SA.SIGINFO) != 0) &restore_rt else &restore;","class":"lineCov","hits":"3","order":"140","possible_hits":"3",},
{"lineNum":" 1180","line":"        ksa = k_sigaction{"},
{"lineNum":" 1181","line":"            .handler = new.handler.handler,","class":"lineCov","hits":"1","order":"141","possible_hits":"1",},
{"lineNum":" 1182","line":"            .flags = new.flags | SA.RESTORER,","class":"lineCov","hits":"1","order":"142","possible_hits":"1",},
{"lineNum":" 1183","line":"            .mask = undefined,"},
{"lineNum":" 1184","line":"            .restorer = @ptrCast(restorer_fn),","class":"lineCov","hits":"1","order":"143","possible_hits":"1",},
{"lineNum":" 1185","line":"        };"},
{"lineNum":" 1186","line":"        @memcpy(@as([*]u8, @ptrCast(&ksa.mask))[0..mask_size], @as([*]const u8, @ptrCast(&new.mask)));","class":"linePartCov","hits":"2","order":"144","possible_hits":"3",},
{"lineNum":" 1187","line":"    }"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"    const ksa_arg = if (act != null) @intFromPtr(&ksa) else 0;","class":"lineCov","hits":"3","order":"145","possible_hits":"3",},
{"lineNum":" 1190","line":"    const oldksa_arg = if (oact != null) @intFromPtr(&oldksa) else 0;","class":"linePartCov","hits":"2","order":"146","possible_hits":"3",},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"    const result = switch (native_arch) {"},
{"lineNum":" 1193","line":"        // The sparc version of rt_sigaction needs the restorer function to be passed as an argument too."},
{"lineNum":" 1194","line":"        .sparc, .sparc64 => syscall5(.rt_sigaction, sig, ksa_arg, oldksa_arg, @intFromPtr(ksa.restorer), mask_size),"},
{"lineNum":" 1195","line":"        else => syscall4(.rt_sigaction, sig, ksa_arg, oldksa_arg, mask_size),","class":"lineCov","hits":"1","order":"147","possible_hits":"1",},
{"lineNum":" 1196","line":"    };"},
{"lineNum":" 1197","line":"    if (getErrno(result) != .SUCCESS) return result;","class":"linePartCov","hits":"1","order":"148","possible_hits":"2",},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"    if (oact) |old| {","class":"linePartCov","hits":"1","order":"149","possible_hits":"2",},
{"lineNum":" 1200","line":"        old.handler.handler = oldksa.handler;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1201","line":"        old.flags = @as(c_uint, @truncate(oldksa.flags));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1202","line":"        @memcpy(@as([*]u8, @ptrCast(&old.mask))[0..mask_size], @as([*]const u8, @ptrCast(&oldksa.mask)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1203","line":"    }"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"    return 0;","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":" 1206","line":"}"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"const usize_bits = @typeInfo(usize).Int.bits;"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"pub fn sigaddset(set: *sigset_t, sig: u6) void {"},
{"lineNum":" 1211","line":"    const s = sig - 1;"},
{"lineNum":" 1212","line":"    // shift in musl: s&8*sizeof *set->__bits-1"},
{"lineNum":" 1213","line":"    const shift = @as(u5, @intCast(s & (usize_bits - 1)));"},
{"lineNum":" 1214","line":"    const val = @as(u32, @intCast(1)) << shift;"},
{"lineNum":" 1215","line":"    (set.*)[@as(usize, @intCast(s)) / usize_bits] |= val;"},
{"lineNum":" 1216","line":"}"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"pub fn sigismember(set: *const sigset_t, sig: u6) bool {"},
{"lineNum":" 1219","line":"    const s = sig - 1;"},
{"lineNum":" 1220","line":"    return ((set.*)[@as(usize, @intCast(s)) / usize_bits] & (@as(usize, @intCast(1)) << (s & (usize_bits - 1)))) != 0;"},
{"lineNum":" 1221","line":"}"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"pub fn getsockname(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t) usize {"},
{"lineNum":" 1224","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1225","line":"        return socketcall(SC.getsockname, &[3]usize{ @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @intFromPtr(len) });"},
{"lineNum":" 1226","line":"    }"},
{"lineNum":" 1227","line":"    return syscall3(.getsockname, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @intFromPtr(len));"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"pub fn getpeername(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t) usize {"},
{"lineNum":" 1231","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1232","line":"        return socketcall(SC.getpeername, &[3]usize{ @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @intFromPtr(len) });"},
{"lineNum":" 1233","line":"    }"},
{"lineNum":" 1234","line":"    return syscall3(.getpeername, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @intFromPtr(len));"},
{"lineNum":" 1235","line":"}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"pub fn socket(domain: u32, socket_type: u32, protocol: u32) usize {"},
{"lineNum":" 1238","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1239","line":"        return socketcall(SC.socket, &[3]usize{ domain, socket_type, protocol });"},
{"lineNum":" 1240","line":"    }"},
{"lineNum":" 1241","line":"    return syscall3(.socket, domain, socket_type, protocol);"},
{"lineNum":" 1242","line":"}"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"pub fn setsockopt(fd: i32, level: u32, optname: u32, optval: [*]const u8, optlen: socklen_t) usize {"},
{"lineNum":" 1245","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1246","line":"        return socketcall(SC.setsockopt, &[5]usize{ @as(usize, @bitCast(@as(isize, fd))), level, optname, @intFromPtr(optval), @as(usize, @intCast(optlen)) });"},
{"lineNum":" 1247","line":"    }"},
{"lineNum":" 1248","line":"    return syscall5(.setsockopt, @as(usize, @bitCast(@as(isize, fd))), level, optname, @intFromPtr(optval), @as(usize, @intCast(optlen)));"},
{"lineNum":" 1249","line":"}"},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"pub fn getsockopt(fd: i32, level: u32, optname: u32, noalias optval: [*]u8, noalias optlen: *socklen_t) usize {"},
{"lineNum":" 1252","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1253","line":"        return socketcall(SC.getsockopt, &[5]usize{ @as(usize, @bitCast(@as(isize, fd))), level, optname, @intFromPtr(optval), @intFromPtr(optlen) });"},
{"lineNum":" 1254","line":"    }"},
{"lineNum":" 1255","line":"    return syscall5(.getsockopt, @as(usize, @bitCast(@as(isize, fd))), level, optname, @intFromPtr(optval), @intFromPtr(optlen));"},
{"lineNum":" 1256","line":"}"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"pub fn sendmsg(fd: i32, msg: *const msghdr_const, flags: u32) usize {"},
{"lineNum":" 1259","line":"    const fd_usize = @as(usize, @bitCast(@as(isize, fd)));"},
{"lineNum":" 1260","line":"    const msg_usize = @intFromPtr(msg);"},
{"lineNum":" 1261","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1262","line":"        return socketcall(SC.sendmsg, &[3]usize{ fd_usize, msg_usize, flags });"},
{"lineNum":" 1263","line":"    } else {"},
{"lineNum":" 1264","line":"        return syscall3(.sendmsg, fd_usize, msg_usize, flags);"},
{"lineNum":" 1265","line":"    }"},
{"lineNum":" 1266","line":"}"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"pub fn sendmmsg(fd: i32, msgvec: [*]mmsghdr_const, vlen: u32, flags: u32) usize {"},
{"lineNum":" 1269","line":"    if (@typeInfo(usize).Int.bits > @typeInfo(@typeInfo(mmsghdr).Struct.fields[1].type).Int.bits) {"},
{"lineNum":" 1270","line":"        // workaround kernel brokenness:"},
{"lineNum":" 1271","line":"        // if adding up all iov_len overflows a i32 then split into multiple calls"},
{"lineNum":" 1272","line":"        // see https://www.openwall.com/lists/musl/2014/06/07/5"},
{"lineNum":" 1273","line":"        const kvlen = if (vlen > IOV_MAX) IOV_MAX else vlen; // matches kernel"},
{"lineNum":" 1274","line":"        var next_unsent: usize = 0;"},
{"lineNum":" 1275","line":"        for (msgvec[0..kvlen], 0..) |*msg, i| {"},
{"lineNum":" 1276","line":"            var size: i32 = 0;"},
{"lineNum":" 1277","line":"            const msg_iovlen = @as(usize, @intCast(msg.msg_hdr.msg_iovlen)); // kernel side this is treated as unsigned"},
{"lineNum":" 1278","line":"            for (msg.msg_hdr.msg_iov[0..msg_iovlen]) |iov| {"},
{"lineNum":" 1279","line":"                if (iov.iov_len > std.math.maxInt(i32) or @addWithOverflow(size, @as(i32, @intCast(iov.iov_len)))[1] != 0) {"},
{"lineNum":" 1280","line":"                    // batch-send all messages up to the current message"},
{"lineNum":" 1281","line":"                    if (next_unsent < i) {"},
{"lineNum":" 1282","line":"                        const batch_size = i - next_unsent;"},
{"lineNum":" 1283","line":"                        const r = syscall4(.sendmmsg, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(&msgvec[next_unsent]), batch_size, flags);"},
{"lineNum":" 1284","line":"                        if (getErrno(r) != 0) return next_unsent;"},
{"lineNum":" 1285","line":"                        if (r < batch_size) return next_unsent + r;"},
{"lineNum":" 1286","line":"                    }"},
{"lineNum":" 1287","line":"                    // send current message as own packet"},
{"lineNum":" 1288","line":"                    const r = sendmsg(fd, &msg.msg_hdr, flags);"},
{"lineNum":" 1289","line":"                    if (getErrno(r) != 0) return r;"},
{"lineNum":" 1290","line":"                    // Linux limits the total bytes sent by sendmsg to INT_MAX, so this cast is safe."},
{"lineNum":" 1291","line":"                    msg.msg_len = @as(u32, @intCast(r));"},
{"lineNum":" 1292","line":"                    next_unsent = i + 1;"},
{"lineNum":" 1293","line":"                    break;"},
{"lineNum":" 1294","line":"                }"},
{"lineNum":" 1295","line":"            }"},
{"lineNum":" 1296","line":"        }"},
{"lineNum":" 1297","line":"        if (next_unsent < kvlen or next_unsent == 0) { // want to make sure at least one syscall occurs (e.g. to trigger MSG.EOR)"},
{"lineNum":" 1298","line":"            const batch_size = kvlen - next_unsent;"},
{"lineNum":" 1299","line":"            const r = syscall4(.sendmmsg, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(&msgvec[next_unsent]), batch_size, flags);"},
{"lineNum":" 1300","line":"            if (getErrno(r) != 0) return r;"},
{"lineNum":" 1301","line":"            return next_unsent + r;"},
{"lineNum":" 1302","line":"        }"},
{"lineNum":" 1303","line":"        return kvlen;"},
{"lineNum":" 1304","line":"    }"},
{"lineNum":" 1305","line":"    return syscall4(.sendmmsg, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(msgvec), vlen, flags);"},
{"lineNum":" 1306","line":"}"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"pub fn connect(fd: i32, addr: *const anyopaque, len: socklen_t) usize {"},
{"lineNum":" 1309","line":"    const fd_usize = @as(usize, @bitCast(@as(isize, fd)));"},
{"lineNum":" 1310","line":"    const addr_usize = @intFromPtr(addr);"},
{"lineNum":" 1311","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1312","line":"        return socketcall(SC.connect, &[3]usize{ fd_usize, addr_usize, len });"},
{"lineNum":" 1313","line":"    } else {"},
{"lineNum":" 1314","line":"        return syscall3(.connect, fd_usize, addr_usize, len);"},
{"lineNum":" 1315","line":"    }"},
{"lineNum":" 1316","line":"}"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"pub fn recvmsg(fd: i32, msg: *msghdr, flags: u32) usize {"},
{"lineNum":" 1319","line":"    const fd_usize = @as(usize, @bitCast(@as(isize, fd)));"},
{"lineNum":" 1320","line":"    const msg_usize = @intFromPtr(msg);"},
{"lineNum":" 1321","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1322","line":"        return socketcall(SC.recvmsg, &[3]usize{ fd_usize, msg_usize, flags });"},
{"lineNum":" 1323","line":"    } else {"},
{"lineNum":" 1324","line":"        return syscall3(.recvmsg, fd_usize, msg_usize, flags);"},
{"lineNum":" 1325","line":"    }"},
{"lineNum":" 1326","line":"}"},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"pub fn recvfrom("},
{"lineNum":" 1329","line":"    fd: i32,"},
{"lineNum":" 1330","line":"    noalias buf: [*]u8,"},
{"lineNum":" 1331","line":"    len: usize,"},
{"lineNum":" 1332","line":"    flags: u32,"},
{"lineNum":" 1333","line":"    noalias addr: ?*sockaddr,"},
{"lineNum":" 1334","line":"    noalias alen: ?*socklen_t,"},
{"lineNum":" 1335","line":") usize {"},
{"lineNum":" 1336","line":"    const fd_usize = @as(usize, @bitCast(@as(isize, fd)));"},
{"lineNum":" 1337","line":"    const buf_usize = @intFromPtr(buf);"},
{"lineNum":" 1338","line":"    const addr_usize = @intFromPtr(addr);"},
{"lineNum":" 1339","line":"    const alen_usize = @intFromPtr(alen);"},
{"lineNum":" 1340","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1341","line":"        return socketcall(SC.recvfrom, &[6]usize{ fd_usize, buf_usize, len, flags, addr_usize, alen_usize });"},
{"lineNum":" 1342","line":"    } else {"},
{"lineNum":" 1343","line":"        return syscall6(.recvfrom, fd_usize, buf_usize, len, flags, addr_usize, alen_usize);"},
{"lineNum":" 1344","line":"    }"},
{"lineNum":" 1345","line":"}"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"pub fn shutdown(fd: i32, how: i32) usize {"},
{"lineNum":" 1348","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1349","line":"        return socketcall(SC.shutdown, &[2]usize{ @as(usize, @bitCast(@as(isize, fd))), @as(usize, @bitCast(@as(isize, how))) });"},
{"lineNum":" 1350","line":"    }"},
{"lineNum":" 1351","line":"    return syscall2(.shutdown, @as(usize, @bitCast(@as(isize, fd))), @as(usize, @bitCast(@as(isize, how))));"},
{"lineNum":" 1352","line":"}"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"pub fn bind(fd: i32, addr: *const sockaddr, len: socklen_t) usize {"},
{"lineNum":" 1355","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1356","line":"        return socketcall(SC.bind, &[3]usize{ @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @as(usize, @intCast(len)) });"},
{"lineNum":" 1357","line":"    }"},
{"lineNum":" 1358","line":"    return syscall3(.bind, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @as(usize, @intCast(len)));"},
{"lineNum":" 1359","line":"}"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"pub fn listen(fd: i32, backlog: u32) usize {"},
{"lineNum":" 1362","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1363","line":"        return socketcall(SC.listen, &[2]usize{ @as(usize, @bitCast(@as(isize, fd))), backlog });"},
{"lineNum":" 1364","line":"    }"},
{"lineNum":" 1365","line":"    return syscall2(.listen, @as(usize, @bitCast(@as(isize, fd))), backlog);"},
{"lineNum":" 1366","line":"}"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"pub fn sendto(fd: i32, buf: [*]const u8, len: usize, flags: u32, addr: ?*const sockaddr, alen: socklen_t) usize {"},
{"lineNum":" 1369","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1370","line":"        return socketcall(SC.sendto, &[6]usize{ @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(buf), len, flags, @intFromPtr(addr), @as(usize, @intCast(alen)) });"},
{"lineNum":" 1371","line":"    }"},
{"lineNum":" 1372","line":"    return syscall6(.sendto, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(buf), len, flags, @intFromPtr(addr), @as(usize, @intCast(alen)));"},
{"lineNum":" 1373","line":"}"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"pub fn sendfile(outfd: i32, infd: i32, offset: ?*i64, count: usize) usize {"},
{"lineNum":" 1376","line":"    if (@hasField(SYS, \"sendfile64\")) {"},
{"lineNum":" 1377","line":"        return syscall4("},
{"lineNum":" 1378","line":"            .sendfile64,"},
{"lineNum":" 1379","line":"            @as(usize, @bitCast(@as(isize, outfd))),"},
{"lineNum":" 1380","line":"            @as(usize, @bitCast(@as(isize, infd))),"},
{"lineNum":" 1381","line":"            @intFromPtr(offset),"},
{"lineNum":" 1382","line":"            count,"},
{"lineNum":" 1383","line":"        );"},
{"lineNum":" 1384","line":"    } else {"},
{"lineNum":" 1385","line":"        return syscall4("},
{"lineNum":" 1386","line":"            .sendfile,"},
{"lineNum":" 1387","line":"            @as(usize, @bitCast(@as(isize, outfd))),"},
{"lineNum":" 1388","line":"            @as(usize, @bitCast(@as(isize, infd))),"},
{"lineNum":" 1389","line":"            @intFromPtr(offset),"},
{"lineNum":" 1390","line":"            count,"},
{"lineNum":" 1391","line":"        );"},
{"lineNum":" 1392","line":"    }"},
{"lineNum":" 1393","line":"}"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"pub fn socketpair(domain: i32, socket_type: i32, protocol: i32, fd: *[2]i32) usize {"},
{"lineNum":" 1396","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1397","line":"        return socketcall(SC.socketpair, &[4]usize{ @as(usize, @intCast(domain)), @as(usize, @intCast(socket_type)), @as(usize, @intCast(protocol)), @intFromPtr(fd) });"},
{"lineNum":" 1398","line":"    }"},
{"lineNum":" 1399","line":"    return syscall4(.socketpair, @as(usize, @intCast(domain)), @as(usize, @intCast(socket_type)), @as(usize, @intCast(protocol)), @intFromPtr(fd));"},
{"lineNum":" 1400","line":"}"},
{"lineNum":" 1401","line":""},
{"lineNum":" 1402","line":"pub fn accept(fd: i32, noalias addr: ?*sockaddr, noalias len: ?*socklen_t) usize {"},
{"lineNum":" 1403","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1404","line":"        return socketcall(SC.accept, &[4]usize{ fd, addr, len, 0 });"},
{"lineNum":" 1405","line":"    }"},
{"lineNum":" 1406","line":"    return accept4(fd, addr, len, 0);"},
{"lineNum":" 1407","line":"}"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"pub fn accept4(fd: i32, noalias addr: ?*sockaddr, noalias len: ?*socklen_t, flags: u32) usize {"},
{"lineNum":" 1410","line":"    if (native_arch == .x86) {"},
{"lineNum":" 1411","line":"        return socketcall(SC.accept4, &[4]usize{ @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @intFromPtr(len), flags });"},
{"lineNum":" 1412","line":"    }"},
{"lineNum":" 1413","line":"    return syscall4(.accept4, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(addr), @intFromPtr(len), flags);"},
{"lineNum":" 1414","line":"}"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"pub fn fstat(fd: i32, stat_buf: *Stat) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1417","line":"    if (@hasField(SYS, \"fstat64\")) {"},
{"lineNum":" 1418","line":"        return syscall2(.fstat64, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(stat_buf));"},
{"lineNum":" 1419","line":"    } else {"},
{"lineNum":" 1420","line":"        return syscall2(.fstat, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(stat_buf));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1421","line":"    }"},
{"lineNum":" 1422","line":"}"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"pub fn stat(pathname: [*:0]const u8, statbuf: *Stat) usize {"},
{"lineNum":" 1425","line":"    if (@hasField(SYS, \"stat64\")) {"},
{"lineNum":" 1426","line":"        return syscall2(.stat64, @intFromPtr(pathname), @intFromPtr(statbuf));"},
{"lineNum":" 1427","line":"    } else {"},
{"lineNum":" 1428","line":"        return syscall2(.stat, @intFromPtr(pathname), @intFromPtr(statbuf));"},
{"lineNum":" 1429","line":"    }"},
{"lineNum":" 1430","line":"}"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"pub fn lstat(pathname: [*:0]const u8, statbuf: *Stat) usize {"},
{"lineNum":" 1433","line":"    if (@hasField(SYS, \"lstat64\")) {"},
{"lineNum":" 1434","line":"        return syscall2(.lstat64, @intFromPtr(pathname), @intFromPtr(statbuf));"},
{"lineNum":" 1435","line":"    } else {"},
{"lineNum":" 1436","line":"        return syscall2(.lstat, @intFromPtr(pathname), @intFromPtr(statbuf));"},
{"lineNum":" 1437","line":"    }"},
{"lineNum":" 1438","line":"}"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"pub fn fstatat(dirfd: i32, path: [*:0]const u8, stat_buf: *Stat, flags: u32) usize {"},
{"lineNum":" 1441","line":"    if (@hasField(SYS, \"fstatat64\")) {"},
{"lineNum":" 1442","line":"        return syscall4(.fstatat64, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), @intFromPtr(stat_buf), flags);"},
{"lineNum":" 1443","line":"    } else {"},
{"lineNum":" 1444","line":"        return syscall4(.fstatat, @as(usize, @bitCast(@as(isize, dirfd))), @intFromPtr(path), @intFromPtr(stat_buf), flags);"},
{"lineNum":" 1445","line":"    }"},
{"lineNum":" 1446","line":"}"},
{"lineNum":" 1447","line":""},
{"lineNum":" 1448","line":"pub fn statx(dirfd: i32, path: [*]const u8, flags: u32, mask: u32, statx_buf: *Statx) usize {"},
{"lineNum":" 1449","line":"    if (@hasField(SYS, \"statx\")) {"},
{"lineNum":" 1450","line":"        return syscall5("},
{"lineNum":" 1451","line":"            .statx,"},
{"lineNum":" 1452","line":"            @as(usize, @bitCast(@as(isize, dirfd))),"},
{"lineNum":" 1453","line":"            @intFromPtr(path),"},
{"lineNum":" 1454","line":"            flags,"},
{"lineNum":" 1455","line":"            mask,"},
{"lineNum":" 1456","line":"            @intFromPtr(statx_buf),"},
{"lineNum":" 1457","line":"        );"},
{"lineNum":" 1458","line":"    }"},
{"lineNum":" 1459","line":"    return @as(usize, @bitCast(-@as(isize, @intFromEnum(E.NOSYS))));"},
{"lineNum":" 1460","line":"}"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"pub fn listxattr(path: [*:0]const u8, list: [*]u8, size: usize) usize {"},
{"lineNum":" 1463","line":"    return syscall3(.listxattr, @intFromPtr(path), @intFromPtr(list), size);"},
{"lineNum":" 1464","line":"}"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"pub fn llistxattr(path: [*:0]const u8, list: [*]u8, size: usize) usize {"},
{"lineNum":" 1467","line":"    return syscall3(.llistxattr, @intFromPtr(path), @intFromPtr(list), size);"},
{"lineNum":" 1468","line":"}"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"pub fn flistxattr(fd: usize, list: [*]u8, size: usize) usize {"},
{"lineNum":" 1471","line":"    return syscall3(.flistxattr, fd, @intFromPtr(list), size);"},
{"lineNum":" 1472","line":"}"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"pub fn getxattr(path: [*:0]const u8, name: [*:0]const u8, value: [*]u8, size: usize) usize {"},
{"lineNum":" 1475","line":"    return syscall4(.getxattr, @intFromPtr(path), @intFromPtr(name), @intFromPtr(value), size);"},
{"lineNum":" 1476","line":"}"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"pub fn lgetxattr(path: [*:0]const u8, name: [*:0]const u8, value: [*]u8, size: usize) usize {"},
{"lineNum":" 1479","line":"    return syscall4(.lgetxattr, @intFromPtr(path), @intFromPtr(name), @intFromPtr(value), size);"},
{"lineNum":" 1480","line":"}"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"pub fn fgetxattr(fd: usize, name: [*:0]const u8, value: [*]u8, size: usize) usize {"},
{"lineNum":" 1483","line":"    return syscall4(.lgetxattr, fd, @intFromPtr(name), @intFromPtr(value), size);"},
{"lineNum":" 1484","line":"}"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"pub fn setxattr(path: [*:0]const u8, name: [*:0]const u8, value: *const void, size: usize, flags: usize) usize {"},
{"lineNum":" 1487","line":"    return syscall5(.setxattr, @intFromPtr(path), @intFromPtr(name), @intFromPtr(value), size, flags);"},
{"lineNum":" 1488","line":"}"},
{"lineNum":" 1489","line":""},
{"lineNum":" 1490","line":"pub fn lsetxattr(path: [*:0]const u8, name: [*:0]const u8, value: *const void, size: usize, flags: usize) usize {"},
{"lineNum":" 1491","line":"    return syscall5(.lsetxattr, @intFromPtr(path), @intFromPtr(name), @intFromPtr(value), size, flags);"},
{"lineNum":" 1492","line":"}"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"pub fn fsetxattr(fd: usize, name: [*:0]const u8, value: *const void, size: usize, flags: usize) usize {"},
{"lineNum":" 1495","line":"    return syscall5(.fsetxattr, fd, @intFromPtr(name), @intFromPtr(value), size, flags);"},
{"lineNum":" 1496","line":"}"},
{"lineNum":" 1497","line":""},
{"lineNum":" 1498","line":"pub fn removexattr(path: [*:0]const u8, name: [*:0]const u8) usize {"},
{"lineNum":" 1499","line":"    return syscall2(.removexattr, @intFromPtr(path), @intFromPtr(name));"},
{"lineNum":" 1500","line":"}"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":"pub fn lremovexattr(path: [*:0]const u8, name: [*:0]const u8) usize {"},
{"lineNum":" 1503","line":"    return syscall2(.lremovexattr, @intFromPtr(path), @intFromPtr(name));"},
{"lineNum":" 1504","line":"}"},
{"lineNum":" 1505","line":""},
{"lineNum":" 1506","line":"pub fn fremovexattr(fd: usize, name: [*:0]const u8) usize {"},
{"lineNum":" 1507","line":"    return syscall2(.fremovexattr, fd, @intFromPtr(name));"},
{"lineNum":" 1508","line":"}"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"pub fn sched_yield() usize {"},
{"lineNum":" 1511","line":"    return syscall0(.sched_yield);"},
{"lineNum":" 1512","line":"}"},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"pub fn sched_getaffinity(pid: pid_t, size: usize, set: *cpu_set_t) usize {"},
{"lineNum":" 1515","line":"    const rc = syscall3(.sched_getaffinity, @as(usize, @bitCast(@as(isize, pid))), size, @intFromPtr(set));"},
{"lineNum":" 1516","line":"    if (@as(isize, @bitCast(rc)) < 0) return rc;"},
{"lineNum":" 1517","line":"    if (rc < size) @memset(@as([*]u8, @ptrCast(set))[rc..size], 0);"},
{"lineNum":" 1518","line":"    return 0;"},
{"lineNum":" 1519","line":"}"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"pub fn epoll_create() usize {"},
{"lineNum":" 1522","line":"    return epoll_create1(0);"},
{"lineNum":" 1523","line":"}"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"pub fn epoll_create1(flags: usize) usize {"},
{"lineNum":" 1526","line":"    return syscall1(.epoll_create1, flags);"},
{"lineNum":" 1527","line":"}"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"pub fn epoll_ctl(epoll_fd: i32, op: u32, fd: i32, ev: ?*epoll_event) usize {"},
{"lineNum":" 1530","line":"    return syscall4(.epoll_ctl, @as(usize, @bitCast(@as(isize, epoll_fd))), @as(usize, @intCast(op)), @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(ev));"},
{"lineNum":" 1531","line":"}"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":"pub fn epoll_wait(epoll_fd: i32, events: [*]epoll_event, maxevents: u32, timeout: i32) usize {"},
{"lineNum":" 1534","line":"    return epoll_pwait(epoll_fd, events, maxevents, timeout, null);"},
{"lineNum":" 1535","line":"}"},
{"lineNum":" 1536","line":""},
{"lineNum":" 1537","line":"pub fn epoll_pwait(epoll_fd: i32, events: [*]epoll_event, maxevents: u32, timeout: i32, sigmask: ?*const sigset_t) usize {"},
{"lineNum":" 1538","line":"    return syscall6("},
{"lineNum":" 1539","line":"        .epoll_pwait,"},
{"lineNum":" 1540","line":"        @as(usize, @bitCast(@as(isize, epoll_fd))),"},
{"lineNum":" 1541","line":"        @intFromPtr(events),"},
{"lineNum":" 1542","line":"        @as(usize, @intCast(maxevents)),"},
{"lineNum":" 1543","line":"        @as(usize, @bitCast(@as(isize, timeout))),"},
{"lineNum":" 1544","line":"        @intFromPtr(sigmask),"},
{"lineNum":" 1545","line":"        @sizeOf(sigset_t),"},
{"lineNum":" 1546","line":"    );"},
{"lineNum":" 1547","line":"}"},
{"lineNum":" 1548","line":""},
{"lineNum":" 1549","line":"pub fn eventfd(count: u32, flags: u32) usize {"},
{"lineNum":" 1550","line":"    return syscall2(.eventfd2, count, flags);"},
{"lineNum":" 1551","line":"}"},
{"lineNum":" 1552","line":""},
{"lineNum":" 1553","line":"pub fn timerfd_create(clockid: i32, flags: u32) usize {"},
{"lineNum":" 1554","line":"    return syscall2(.timerfd_create, @as(usize, @bitCast(@as(isize, clockid))), flags);"},
{"lineNum":" 1555","line":"}"},
{"lineNum":" 1556","line":""},
{"lineNum":" 1557","line":"pub const itimerspec = extern struct {"},
{"lineNum":" 1558","line":"    it_interval: timespec,"},
{"lineNum":" 1559","line":"    it_value: timespec,"},
{"lineNum":" 1560","line":"};"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"pub fn timerfd_gettime(fd: i32, curr_value: *itimerspec) usize {"},
{"lineNum":" 1563","line":"    return syscall2(.timerfd_gettime, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(curr_value));"},
{"lineNum":" 1564","line":"}"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"pub fn timerfd_settime(fd: i32, flags: u32, new_value: *const itimerspec, old_value: ?*itimerspec) usize {"},
{"lineNum":" 1567","line":"    return syscall4(.timerfd_settime, @as(usize, @bitCast(@as(isize, fd))), flags, @intFromPtr(new_value), @intFromPtr(old_value));"},
{"lineNum":" 1568","line":"}"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"// Flags for the \'setitimer\' system call"},
{"lineNum":" 1571","line":"pub const ITIMER = enum(i32) {"},
{"lineNum":" 1572","line":"    REAL = 0,"},
{"lineNum":" 1573","line":"    VIRTUAL = 1,"},
{"lineNum":" 1574","line":"    PROF = 2,"},
{"lineNum":" 1575","line":"};"},
{"lineNum":" 1576","line":""},
{"lineNum":" 1577","line":"pub fn getitimer(which: i32, curr_value: *itimerspec) usize {"},
{"lineNum":" 1578","line":"    return syscall2(.getitimer, @as(usize, @bitCast(@as(isize, which))), @intFromPtr(curr_value));"},
{"lineNum":" 1579","line":"}"},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"pub fn setitimer(which: i32, new_value: *const itimerspec, old_value: ?*itimerspec) usize {"},
{"lineNum":" 1582","line":"    return syscall3(.setitimer, @as(usize, @bitCast(@as(isize, which))), @intFromPtr(new_value), @intFromPtr(old_value));"},
{"lineNum":" 1583","line":"}"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"pub fn unshare(flags: usize) usize {"},
{"lineNum":" 1586","line":"    return syscall1(.unshare, flags);"},
{"lineNum":" 1587","line":"}"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"pub fn capget(hdrp: *cap_user_header_t, datap: *cap_user_data_t) usize {"},
{"lineNum":" 1590","line":"    return syscall2(.capget, @intFromPtr(hdrp), @intFromPtr(datap));"},
{"lineNum":" 1591","line":"}"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"pub fn capset(hdrp: *cap_user_header_t, datap: *const cap_user_data_t) usize {"},
{"lineNum":" 1594","line":"    return syscall2(.capset, @intFromPtr(hdrp), @intFromPtr(datap));"},
{"lineNum":" 1595","line":"}"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"pub fn sigaltstack(ss: ?*stack_t, old_ss: ?*stack_t) usize {"},
{"lineNum":" 1598","line":"    return syscall2(.sigaltstack, @intFromPtr(ss), @intFromPtr(old_ss));"},
{"lineNum":" 1599","line":"}"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"pub fn uname(uts: *utsname) usize {"},
{"lineNum":" 1602","line":"    return syscall1(.uname, @intFromPtr(uts));"},
{"lineNum":" 1603","line":"}"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"pub fn io_uring_setup(entries: u32, p: *io_uring_params) usize {"},
{"lineNum":" 1606","line":"    return syscall2(.io_uring_setup, entries, @intFromPtr(p));"},
{"lineNum":" 1607","line":"}"},
{"lineNum":" 1608","line":""},
{"lineNum":" 1609","line":"pub fn io_uring_enter(fd: i32, to_submit: u32, min_complete: u32, flags: u32, sig: ?*sigset_t) usize {"},
{"lineNum":" 1610","line":"    return syscall6(.io_uring_enter, @as(usize, @bitCast(@as(isize, fd))), to_submit, min_complete, flags, @intFromPtr(sig), NSIG / 8);"},
{"lineNum":" 1611","line":"}"},
{"lineNum":" 1612","line":""},
{"lineNum":" 1613","line":"pub fn io_uring_register(fd: i32, opcode: IORING_REGISTER, arg: ?*const anyopaque, nr_args: u32) usize {"},
{"lineNum":" 1614","line":"    return syscall4(.io_uring_register, @as(usize, @bitCast(@as(isize, fd))), @intFromEnum(opcode), @intFromPtr(arg), nr_args);"},
{"lineNum":" 1615","line":"}"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"pub fn memfd_create(name: [*:0]const u8, flags: u32) usize {"},
{"lineNum":" 1618","line":"    return syscall2(.memfd_create, @intFromPtr(name), flags);"},
{"lineNum":" 1619","line":"}"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"pub fn getrusage(who: i32, usage: *rusage) usize {"},
{"lineNum":" 1622","line":"    return syscall2(.getrusage, @as(usize, @bitCast(@as(isize, who))), @intFromPtr(usage));"},
{"lineNum":" 1623","line":"}"},
{"lineNum":" 1624","line":""},
{"lineNum":" 1625","line":"pub fn tcgetattr(fd: fd_t, termios_p: *termios) usize {"},
{"lineNum":" 1626","line":"    return syscall3(.ioctl, @as(usize, @bitCast(@as(isize, fd))), T.CGETS, @intFromPtr(termios_p));"},
{"lineNum":" 1627","line":"}"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"pub fn tcsetattr(fd: fd_t, optional_action: TCSA, termios_p: *const termios) usize {"},
{"lineNum":" 1630","line":"    return syscall3(.ioctl, @as(usize, @bitCast(@as(isize, fd))), T.CSETS + @intFromEnum(optional_action), @intFromPtr(termios_p));"},
{"lineNum":" 1631","line":"}"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"pub fn tcgetpgrp(fd: fd_t, pgrp: *pid_t) usize {"},
{"lineNum":" 1634","line":"    return syscall3(.ioctl, @as(usize, @bitCast(@as(isize, fd))), T.IOCGPGRP, @intFromPtr(pgrp));"},
{"lineNum":" 1635","line":"}"},
{"lineNum":" 1636","line":""},
{"lineNum":" 1637","line":"pub fn tcsetpgrp(fd: fd_t, pgrp: *const pid_t) usize {"},
{"lineNum":" 1638","line":"    return syscall3(.ioctl, @as(usize, @bitCast(@as(isize, fd))), T.IOCSPGRP, @intFromPtr(pgrp));"},
{"lineNum":" 1639","line":"}"},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"pub fn tcdrain(fd: fd_t) usize {"},
{"lineNum":" 1642","line":"    return syscall3(.ioctl, @as(usize, @bitCast(@as(isize, fd))), T.CSBRK, 1);"},
{"lineNum":" 1643","line":"}"},
{"lineNum":" 1644","line":""},
{"lineNum":" 1645","line":"pub fn ioctl(fd: fd_t, request: u32, arg: usize) usize {"},
{"lineNum":" 1646","line":"    return syscall3(.ioctl, @as(usize, @bitCast(@as(isize, fd))), request, arg);"},
{"lineNum":" 1647","line":"}"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"pub fn signalfd(fd: fd_t, mask: *const sigset_t, flags: u32) usize {"},
{"lineNum":" 1650","line":"    return syscall4(.signalfd4, @as(usize, @bitCast(@as(isize, fd))), @intFromPtr(mask), NSIG / 8, flags);"},
{"lineNum":" 1651","line":"}"},
{"lineNum":" 1652","line":""},
{"lineNum":" 1653","line":"pub fn copy_file_range(fd_in: fd_t, off_in: ?*i64, fd_out: fd_t, off_out: ?*i64, len: usize, flags: u32) usize {"},
{"lineNum":" 1654","line":"    return syscall6("},
{"lineNum":" 1655","line":"        .copy_file_range,"},
{"lineNum":" 1656","line":"        @as(usize, @bitCast(@as(isize, fd_in))),"},
{"lineNum":" 1657","line":"        @intFromPtr(off_in),"},
{"lineNum":" 1658","line":"        @as(usize, @bitCast(@as(isize, fd_out))),"},
{"lineNum":" 1659","line":"        @intFromPtr(off_out),"},
{"lineNum":" 1660","line":"        len,"},
{"lineNum":" 1661","line":"        flags,"},
{"lineNum":" 1662","line":"    );"},
{"lineNum":" 1663","line":"}"},
{"lineNum":" 1664","line":""},
{"lineNum":" 1665","line":"pub fn bpf(cmd: BPF.Cmd, attr: *BPF.Attr, size: u32) usize {"},
{"lineNum":" 1666","line":"    return syscall3(.bpf, @intFromEnum(cmd), @intFromPtr(attr), size);"},
{"lineNum":" 1667","line":"}"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"pub fn sync() void {"},
{"lineNum":" 1670","line":"    _ = syscall0(.sync);"},
{"lineNum":" 1671","line":"}"},
{"lineNum":" 1672","line":""},
{"lineNum":" 1673","line":"pub fn syncfs(fd: fd_t) usize {"},
{"lineNum":" 1674","line":"    return syscall1(.syncfs, @as(usize, @bitCast(@as(isize, fd))));"},
{"lineNum":" 1675","line":"}"},
{"lineNum":" 1676","line":""},
{"lineNum":" 1677","line":"pub fn fsync(fd: fd_t) usize {"},
{"lineNum":" 1678","line":"    return syscall1(.fsync, @as(usize, @bitCast(@as(isize, fd))));"},
{"lineNum":" 1679","line":"}"},
{"lineNum":" 1680","line":""},
{"lineNum":" 1681","line":"pub fn fdatasync(fd: fd_t) usize {"},
{"lineNum":" 1682","line":"    return syscall1(.fdatasync, @as(usize, @bitCast(@as(isize, fd))));"},
{"lineNum":" 1683","line":"}"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"pub fn prctl(option: i32, arg2: usize, arg3: usize, arg4: usize, arg5: usize) usize {"},
{"lineNum":" 1686","line":"    return syscall5(.prctl, @as(usize, @bitCast(@as(isize, option))), arg2, arg3, arg4, arg5);"},
{"lineNum":" 1687","line":"}"},
{"lineNum":" 1688","line":""},
{"lineNum":" 1689","line":"pub fn getrlimit(resource: rlimit_resource, rlim: *rlimit) usize {","class":"lineCov","hits":"1","order":"105","possible_hits":"1",},
{"lineNum":" 1690","line":"    // use prlimit64 to have 64 bit limits on 32 bit platforms"},
{"lineNum":" 1691","line":"    return prlimit(0, resource, null, rlim);","class":"lineCov","hits":"1","order":"106","possible_hits":"1",},
{"lineNum":" 1692","line":"}"},
{"lineNum":" 1693","line":""},
{"lineNum":" 1694","line":"pub fn setrlimit(resource: rlimit_resource, rlim: *const rlimit) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1695","line":"    // use prlimit64 to have 64 bit limits on 32 bit platforms"},
{"lineNum":" 1696","line":"    return prlimit(0, resource, rlim, null);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1697","line":"}"},
{"lineNum":" 1698","line":""},
{"lineNum":" 1699","line":"pub fn prlimit(pid: pid_t, resource: rlimit_resource, new_limit: ?*const rlimit, old_limit: ?*rlimit) usize {","class":"lineCov","hits":"1","order":"107","possible_hits":"1",},
{"lineNum":" 1700","line":"    return syscall4(","class":"lineCov","hits":"1","order":"108","possible_hits":"1",},
{"lineNum":" 1701","line":"        .prlimit64,"},
{"lineNum":" 1702","line":"        @as(usize, @bitCast(@as(isize, pid))),"},
{"lineNum":" 1703","line":"        @as(usize, @bitCast(@as(isize, @intFromEnum(resource)))),"},
{"lineNum":" 1704","line":"        @intFromPtr(new_limit),"},
{"lineNum":" 1705","line":"        @intFromPtr(old_limit),"},
{"lineNum":" 1706","line":"    );"},
{"lineNum":" 1707","line":"}"},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"pub fn mincore(address: [*]u8, len: usize, vec: [*]u8) usize {"},
{"lineNum":" 1710","line":"    return syscall3(.mincore, @intFromPtr(address), len, @intFromPtr(vec));"},
{"lineNum":" 1711","line":"}"},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"pub fn madvise(address: [*]u8, len: usize, advice: u32) usize {"},
{"lineNum":" 1714","line":"    return syscall3(.madvise, @intFromPtr(address), len, advice);"},
{"lineNum":" 1715","line":"}"},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"pub fn pidfd_open(pid: pid_t, flags: u32) usize {"},
{"lineNum":" 1718","line":"    return syscall2(.pidfd_open, @as(usize, @bitCast(@as(isize, pid))), flags);"},
{"lineNum":" 1719","line":"}"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"pub fn pidfd_getfd(pidfd: fd_t, targetfd: fd_t, flags: u32) usize {"},
{"lineNum":" 1722","line":"    return syscall3("},
{"lineNum":" 1723","line":"        .pidfd_getfd,"},
{"lineNum":" 1724","line":"        @as(usize, @bitCast(@as(isize, pidfd))),"},
{"lineNum":" 1725","line":"        @as(usize, @bitCast(@as(isize, targetfd))),"},
{"lineNum":" 1726","line":"        flags,"},
{"lineNum":" 1727","line":"    );"},
{"lineNum":" 1728","line":"}"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"pub fn pidfd_send_signal(pidfd: fd_t, sig: i32, info: ?*siginfo_t, flags: u32) usize {"},
{"lineNum":" 1731","line":"    return syscall4("},
{"lineNum":" 1732","line":"        .pidfd_send_signal,"},
{"lineNum":" 1733","line":"        @as(usize, @bitCast(@as(isize, pidfd))),"},
{"lineNum":" 1734","line":"        @as(usize, @bitCast(@as(isize, sig))),"},
{"lineNum":" 1735","line":"        @intFromPtr(info),"},
{"lineNum":" 1736","line":"        flags,"},
{"lineNum":" 1737","line":"    );"},
{"lineNum":" 1738","line":"}"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"pub fn process_vm_readv(pid: pid_t, local: []iovec, remote: []const iovec_const, flags: usize) usize {"},
{"lineNum":" 1741","line":"    return syscall6("},
{"lineNum":" 1742","line":"        .process_vm_readv,"},
{"lineNum":" 1743","line":"        @as(usize, @bitCast(@as(isize, pid))),"},
{"lineNum":" 1744","line":"        @intFromPtr(local.ptr),"},
{"lineNum":" 1745","line":"        local.len,"},
{"lineNum":" 1746","line":"        @intFromPtr(remote.ptr),"},
{"lineNum":" 1747","line":"        remote.len,"},
{"lineNum":" 1748","line":"        flags,"},
{"lineNum":" 1749","line":"    );"},
{"lineNum":" 1750","line":"}"},
{"lineNum":" 1751","line":""},
{"lineNum":" 1752","line":"pub fn process_vm_writev(pid: pid_t, local: []const iovec_const, remote: []const iovec_const, flags: usize) usize {"},
{"lineNum":" 1753","line":"    return syscall6("},
{"lineNum":" 1754","line":"        .process_vm_writev,"},
{"lineNum":" 1755","line":"        @as(usize, @bitCast(@as(isize, pid))),"},
{"lineNum":" 1756","line":"        @intFromPtr(local.ptr),"},
{"lineNum":" 1757","line":"        local.len,"},
{"lineNum":" 1758","line":"        @intFromPtr(remote.ptr),"},
{"lineNum":" 1759","line":"        remote.len,"},
{"lineNum":" 1760","line":"        flags,"},
{"lineNum":" 1761","line":"    );"},
{"lineNum":" 1762","line":"}"},
{"lineNum":" 1763","line":""},
{"lineNum":" 1764","line":"pub fn fadvise(fd: fd_t, offset: i64, len: i64, advice: usize) usize {"},
{"lineNum":" 1765","line":"    if (comptime builtin.cpu.arch.isMIPS()) {"},
{"lineNum":" 1766","line":"        // MIPS requires a 7 argument syscall"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"        const offset_halves = splitValue64(offset);"},
{"lineNum":" 1769","line":"        const length_halves = splitValue64(len);"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"        return syscall7("},
{"lineNum":" 1772","line":"            .fadvise64,"},
{"lineNum":" 1773","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":" 1774","line":"            0,"},
{"lineNum":" 1775","line":"            offset_halves[0],"},
{"lineNum":" 1776","line":"            offset_halves[1],"},
{"lineNum":" 1777","line":"            length_halves[0],"},
{"lineNum":" 1778","line":"            length_halves[1],"},
{"lineNum":" 1779","line":"            advice,"},
{"lineNum":" 1780","line":"        );"},
{"lineNum":" 1781","line":"    } else if (comptime builtin.cpu.arch.isARM()) {"},
{"lineNum":" 1782","line":"        // ARM reorders the arguments"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"        const offset_halves = splitValue64(offset);"},
{"lineNum":" 1785","line":"        const length_halves = splitValue64(len);"},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"        return syscall6("},
{"lineNum":" 1788","line":"            .fadvise64_64,"},
{"lineNum":" 1789","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":" 1790","line":"            advice,"},
{"lineNum":" 1791","line":"            offset_halves[0],"},
{"lineNum":" 1792","line":"            offset_halves[1],"},
{"lineNum":" 1793","line":"            length_halves[0],"},
{"lineNum":" 1794","line":"            length_halves[1],"},
{"lineNum":" 1795","line":"        );"},
{"lineNum":" 1796","line":"    } else if (@hasField(SYS, \"fadvise64_64\") and usize_bits != 64) {"},
{"lineNum":" 1797","line":"        // The extra usize check is needed to avoid SPARC64 because it provides both"},
{"lineNum":" 1798","line":"        // fadvise64 and fadvise64_64 but the latter behaves differently than other platforms."},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"        const offset_halves = splitValue64(offset);"},
{"lineNum":" 1801","line":"        const length_halves = splitValue64(len);"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"        return syscall6("},
{"lineNum":" 1804","line":"            .fadvise64_64,"},
{"lineNum":" 1805","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":" 1806","line":"            offset_halves[0],"},
{"lineNum":" 1807","line":"            offset_halves[1],"},
{"lineNum":" 1808","line":"            length_halves[0],"},
{"lineNum":" 1809","line":"            length_halves[1],"},
{"lineNum":" 1810","line":"            advice,"},
{"lineNum":" 1811","line":"        );"},
{"lineNum":" 1812","line":"    } else {"},
{"lineNum":" 1813","line":"        return syscall4("},
{"lineNum":" 1814","line":"            .fadvise64,"},
{"lineNum":" 1815","line":"            @as(usize, @bitCast(@as(isize, fd))),"},
{"lineNum":" 1816","line":"            @as(usize, @bitCast(offset)),"},
{"lineNum":" 1817","line":"            @as(usize, @bitCast(len)),"},
{"lineNum":" 1818","line":"            advice,"},
{"lineNum":" 1819","line":"        );"},
{"lineNum":" 1820","line":"    }"},
{"lineNum":" 1821","line":"}"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"pub fn perf_event_open("},
{"lineNum":" 1824","line":"    attr: *perf_event_attr,"},
{"lineNum":" 1825","line":"    pid: pid_t,"},
{"lineNum":" 1826","line":"    cpu: i32,"},
{"lineNum":" 1827","line":"    group_fd: fd_t,"},
{"lineNum":" 1828","line":"    flags: usize,"},
{"lineNum":" 1829","line":") usize {"},
{"lineNum":" 1830","line":"    return syscall5("},
{"lineNum":" 1831","line":"        .perf_event_open,"},
{"lineNum":" 1832","line":"        @intFromPtr(attr),"},
{"lineNum":" 1833","line":"        @as(usize, @bitCast(@as(isize, pid))),"},
{"lineNum":" 1834","line":"        @as(usize, @bitCast(@as(isize, cpu))),"},
{"lineNum":" 1835","line":"        @as(usize, @bitCast(@as(isize, group_fd))),"},
{"lineNum":" 1836","line":"        flags,"},
{"lineNum":" 1837","line":"    );"},
{"lineNum":" 1838","line":"}"},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"pub fn seccomp(operation: u32, flags: u32, args: ?*const anyopaque) usize {"},
{"lineNum":" 1841","line":"    return syscall3(.seccomp, operation, flags, @intFromPtr(args));"},
{"lineNum":" 1842","line":"}"},
{"lineNum":" 1843","line":""},
{"lineNum":" 1844","line":"pub fn ptrace("},
{"lineNum":" 1845","line":"    req: u32,"},
{"lineNum":" 1846","line":"    pid: pid_t,"},
{"lineNum":" 1847","line":"    addr: usize,"},
{"lineNum":" 1848","line":"    data: usize,"},
{"lineNum":" 1849","line":"    addr2: usize,"},
{"lineNum":" 1850","line":") usize {"},
{"lineNum":" 1851","line":"    return syscall5("},
{"lineNum":" 1852","line":"        .ptrace,"},
{"lineNum":" 1853","line":"        req,"},
{"lineNum":" 1854","line":"        @as(usize, @bitCast(@as(isize, pid))),"},
{"lineNum":" 1855","line":"        addr,"},
{"lineNum":" 1856","line":"        data,"},
{"lineNum":" 1857","line":"        addr2,"},
{"lineNum":" 1858","line":"    );"},
{"lineNum":" 1859","line":"}"},
{"lineNum":" 1860","line":""},
{"lineNum":" 1861","line":"pub const E = switch (native_arch) {"},
{"lineNum":" 1862","line":"    .mips, .mipsel => @import(\"linux/errno/mips.zig\").E,"},
{"lineNum":" 1863","line":"    .sparc, .sparcel, .sparc64 => @import(\"linux/errno/sparc.zig\").E,"},
{"lineNum":" 1864","line":"    else => @import(\"linux/errno/generic.zig\").E,"},
{"lineNum":" 1865","line":"};"},
{"lineNum":" 1866","line":""},
{"lineNum":" 1867","line":"pub const pid_t = i32;"},
{"lineNum":" 1868","line":"pub const fd_t = i32;"},
{"lineNum":" 1869","line":"pub const uid_t = u32;"},
{"lineNum":" 1870","line":"pub const gid_t = u32;"},
{"lineNum":" 1871","line":"pub const clock_t = isize;"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"pub const NAME_MAX = 255;"},
{"lineNum":" 1874","line":"pub const PATH_MAX = 4096;"},
{"lineNum":" 1875","line":"pub const IOV_MAX = 1024;"},
{"lineNum":" 1876","line":""},
{"lineNum":" 1877","line":"/// Largest hardware address length"},
{"lineNum":" 1878","line":"/// e.g. a mac address is a type of hardware address"},
{"lineNum":" 1879","line":"pub const MAX_ADDR_LEN = 32;"},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"pub const STDIN_FILENO = 0;"},
{"lineNum":" 1882","line":"pub const STDOUT_FILENO = 1;"},
{"lineNum":" 1883","line":"pub const STDERR_FILENO = 2;"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"pub const AT = struct {"},
{"lineNum":" 1886","line":"    /// Special value used to indicate openat should use the current working directory"},
{"lineNum":" 1887","line":"    pub const FDCWD = -100;"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"    /// Do not follow symbolic links"},
{"lineNum":" 1890","line":"    pub const SYMLINK_NOFOLLOW = 0x100;"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"    /// Remove directory instead of unlinking file"},
{"lineNum":" 1893","line":"    pub const REMOVEDIR = 0x200;"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"    /// Follow symbolic links."},
{"lineNum":" 1896","line":"    pub const SYMLINK_FOLLOW = 0x400;"},
{"lineNum":" 1897","line":""},
{"lineNum":" 1898","line":"    /// Suppress terminal automount traversal"},
{"lineNum":" 1899","line":"    pub const NO_AUTOMOUNT = 0x800;"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"    /// Allow empty relative pathname"},
{"lineNum":" 1902","line":"    pub const EMPTY_PATH = 0x1000;"},
{"lineNum":" 1903","line":""},
{"lineNum":" 1904","line":"    /// Type of synchronisation required from statx()"},
{"lineNum":" 1905","line":"    pub const STATX_SYNC_TYPE = 0x6000;"},
{"lineNum":" 1906","line":""},
{"lineNum":" 1907","line":"    /// - Do whatever stat() does"},
{"lineNum":" 1908","line":"    pub const STATX_SYNC_AS_STAT = 0x0000;"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"    /// - Force the attributes to be sync\'d with the server"},
{"lineNum":" 1911","line":"    pub const STATX_FORCE_SYNC = 0x2000;"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"    /// - Don\'t sync attributes with the server"},
{"lineNum":" 1914","line":"    pub const STATX_DONT_SYNC = 0x4000;"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"    /// Apply to the entire subtree"},
{"lineNum":" 1917","line":"    pub const RECURSIVE = 0x8000;"},
{"lineNum":" 1918","line":"};"},
{"lineNum":" 1919","line":""},
{"lineNum":" 1920","line":"pub const FALLOC = struct {"},
{"lineNum":" 1921","line":"    /// Default is extend size"},
{"lineNum":" 1922","line":"    pub const FL_KEEP_SIZE = 0x01;"},
{"lineNum":" 1923","line":""},
{"lineNum":" 1924","line":"    /// De-allocates range"},
{"lineNum":" 1925","line":"    pub const FL_PUNCH_HOLE = 0x02;"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"    /// Reserved codepoint"},
{"lineNum":" 1928","line":"    pub const FL_NO_HIDE_STALE = 0x04;"},
{"lineNum":" 1929","line":""},
{"lineNum":" 1930","line":"    /// Removes a range of a file without leaving a hole in the file"},
{"lineNum":" 1931","line":"    pub const FL_COLLAPSE_RANGE = 0x08;"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"    /// Converts a range of file to zeros preferably without issuing data IO"},
{"lineNum":" 1934","line":"    pub const FL_ZERO_RANGE = 0x10;"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"    /// Inserts space within the file size without overwriting any existing data"},
{"lineNum":" 1937","line":"    pub const FL_INSERT_RANGE = 0x20;"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"    /// Unshares shared blocks within the file size without overwriting any existing data"},
{"lineNum":" 1940","line":"    pub const FL_UNSHARE_RANGE = 0x40;"},
{"lineNum":" 1941","line":"};"},
{"lineNum":" 1942","line":""},
{"lineNum":" 1943","line":"pub const FUTEX = struct {"},
{"lineNum":" 1944","line":"    pub const WAIT = 0;"},
{"lineNum":" 1945","line":"    pub const WAKE = 1;"},
{"lineNum":" 1946","line":"    pub const FD = 2;"},
{"lineNum":" 1947","line":"    pub const REQUEUE = 3;"},
{"lineNum":" 1948","line":"    pub const CMP_REQUEUE = 4;"},
{"lineNum":" 1949","line":"    pub const WAKE_OP = 5;"},
{"lineNum":" 1950","line":"    pub const LOCK_PI = 6;"},
{"lineNum":" 1951","line":"    pub const UNLOCK_PI = 7;"},
{"lineNum":" 1952","line":"    pub const TRYLOCK_PI = 8;"},
{"lineNum":" 1953","line":"    pub const WAIT_BITSET = 9;"},
{"lineNum":" 1954","line":"    pub const WAKE_BITSET = 10;"},
{"lineNum":" 1955","line":"    pub const WAIT_REQUEUE_PI = 11;"},
{"lineNum":" 1956","line":"    pub const CMP_REQUEUE_PI = 12;"},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"    pub const PRIVATE_FLAG = 128;"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"    pub const CLOCK_REALTIME = 256;"},
{"lineNum":" 1961","line":"};"},
{"lineNum":" 1962","line":""},
{"lineNum":" 1963","line":"pub const PROT = struct {"},
{"lineNum":" 1964","line":"    /// page can not be accessed"},
{"lineNum":" 1965","line":"    pub const NONE = 0x0;"},
{"lineNum":" 1966","line":"    /// page can be read"},
{"lineNum":" 1967","line":"    pub const READ = 0x1;"},
{"lineNum":" 1968","line":"    /// page can be written"},
{"lineNum":" 1969","line":"    pub const WRITE = 0x2;"},
{"lineNum":" 1970","line":"    /// page can be executed"},
{"lineNum":" 1971","line":"    pub const EXEC = 0x4;"},
{"lineNum":" 1972","line":"    /// page may be used for atomic ops"},
{"lineNum":" 1973","line":"    pub const SEM = switch (native_arch) {"},
{"lineNum":" 1974","line":"        // TODO: also xtensa"},
{"lineNum":" 1975","line":"        .mips, .mipsel, .mips64, .mips64el => 0x10,"},
{"lineNum":" 1976","line":"        else => 0x8,"},
{"lineNum":" 1977","line":"    };"},
{"lineNum":" 1978","line":"    /// mprotect flag: extend change to start of growsdown vma"},
{"lineNum":" 1979","line":"    pub const GROWSDOWN = 0x01000000;"},
{"lineNum":" 1980","line":"    /// mprotect flag: extend change to end of growsup vma"},
{"lineNum":" 1981","line":"    pub const GROWSUP = 0x02000000;"},
{"lineNum":" 1982","line":"};"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"pub const FD_CLOEXEC = 1;"},
{"lineNum":" 1985","line":""},
{"lineNum":" 1986","line":"pub const F_OK = 0;"},
{"lineNum":" 1987","line":"pub const X_OK = 1;"},
{"lineNum":" 1988","line":"pub const W_OK = 2;"},
{"lineNum":" 1989","line":"pub const R_OK = 4;"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"pub const W = struct {"},
{"lineNum":" 1992","line":"    pub const NOHANG = 1;"},
{"lineNum":" 1993","line":"    pub const UNTRACED = 2;"},
{"lineNum":" 1994","line":"    pub const STOPPED = 2;"},
{"lineNum":" 1995","line":"    pub const EXITED = 4;"},
{"lineNum":" 1996","line":"    pub const CONTINUED = 8;"},
{"lineNum":" 1997","line":"    pub const NOWAIT = 0x1000000;"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"    pub fn EXITSTATUS(s: u32) u8 {"},
{"lineNum":" 2000","line":"        return @as(u8, @intCast((s & 0xff00) >> 8));"},
{"lineNum":" 2001","line":"    }"},
{"lineNum":" 2002","line":"    pub fn TERMSIG(s: u32) u32 {"},
{"lineNum":" 2003","line":"        return s & 0x7f;"},
{"lineNum":" 2004","line":"    }"},
{"lineNum":" 2005","line":"    pub fn STOPSIG(s: u32) u32 {"},
{"lineNum":" 2006","line":"        return EXITSTATUS(s);"},
{"lineNum":" 2007","line":"    }"},
{"lineNum":" 2008","line":"    pub fn IFEXITED(s: u32) bool {"},
{"lineNum":" 2009","line":"        return TERMSIG(s) == 0;"},
{"lineNum":" 2010","line":"    }"},
{"lineNum":" 2011","line":"    pub fn IFSTOPPED(s: u32) bool {"},
{"lineNum":" 2012","line":"        return @as(u16, @truncate(((s & 0xffff) *% 0x10001) >> 8)) > 0x7f00;"},
{"lineNum":" 2013","line":"    }"},
{"lineNum":" 2014","line":"    pub fn IFSIGNALED(s: u32) bool {"},
{"lineNum":" 2015","line":"        return (s & 0xffff) -% 1 < 0xff;"},
{"lineNum":" 2016","line":"    }"},
{"lineNum":" 2017","line":"};"},
{"lineNum":" 2018","line":""},
{"lineNum":" 2019","line":"// waitid id types"},
{"lineNum":" 2020","line":"pub const P = enum(c_uint) {"},
{"lineNum":" 2021","line":"    ALL = 0,"},
{"lineNum":" 2022","line":"    PID = 1,"},
{"lineNum":" 2023","line":"    PGID = 2,"},
{"lineNum":" 2024","line":"    PIDFD = 3,"},
{"lineNum":" 2025","line":"    _,"},
{"lineNum":" 2026","line":"};"},
{"lineNum":" 2027","line":""},
{"lineNum":" 2028","line":"pub const SA = if (is_mips) struct {"},
{"lineNum":" 2029","line":"    pub const NOCLDSTOP = 1;"},
{"lineNum":" 2030","line":"    pub const NOCLDWAIT = 0x10000;"},
{"lineNum":" 2031","line":"    pub const SIGINFO = 8;"},
{"lineNum":" 2032","line":"    pub const RESTART = 0x10000000;"},
{"lineNum":" 2033","line":"    pub const RESETHAND = 0x80000000;"},
{"lineNum":" 2034","line":"    pub const ONSTACK = 0x08000000;"},
{"lineNum":" 2035","line":"    pub const NODEFER = 0x40000000;"},
{"lineNum":" 2036","line":"    pub const RESTORER = 0x04000000;"},
{"lineNum":" 2037","line":"} else if (is_sparc) struct {"},
{"lineNum":" 2038","line":"    pub const NOCLDSTOP = 0x8;"},
{"lineNum":" 2039","line":"    pub const NOCLDWAIT = 0x100;"},
{"lineNum":" 2040","line":"    pub const SIGINFO = 0x200;"},
{"lineNum":" 2041","line":"    pub const RESTART = 0x2;"},
{"lineNum":" 2042","line":"    pub const RESETHAND = 0x4;"},
{"lineNum":" 2043","line":"    pub const ONSTACK = 0x1;"},
{"lineNum":" 2044","line":"    pub const NODEFER = 0x20;"},
{"lineNum":" 2045","line":"    pub const RESTORER = 0x04000000;"},
{"lineNum":" 2046","line":"} else struct {"},
{"lineNum":" 2047","line":"    pub const NOCLDSTOP = 1;"},
{"lineNum":" 2048","line":"    pub const NOCLDWAIT = 2;"},
{"lineNum":" 2049","line":"    pub const SIGINFO = 4;"},
{"lineNum":" 2050","line":"    pub const RESTART = 0x10000000;"},
{"lineNum":" 2051","line":"    pub const RESETHAND = 0x80000000;"},
{"lineNum":" 2052","line":"    pub const ONSTACK = 0x08000000;"},
{"lineNum":" 2053","line":"    pub const NODEFER = 0x40000000;"},
{"lineNum":" 2054","line":"    pub const RESTORER = 0x04000000;"},
{"lineNum":" 2055","line":"};"},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"pub const SIG = if (is_mips) struct {"},
{"lineNum":" 2058","line":"    pub const BLOCK = 1;"},
{"lineNum":" 2059","line":"    pub const UNBLOCK = 2;"},
{"lineNum":" 2060","line":"    pub const SETMASK = 3;"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"    pub const HUP = 1;"},
{"lineNum":" 2063","line":"    pub const INT = 2;"},
{"lineNum":" 2064","line":"    pub const QUIT = 3;"},
{"lineNum":" 2065","line":"    pub const ILL = 4;"},
{"lineNum":" 2066","line":"    pub const TRAP = 5;"},
{"lineNum":" 2067","line":"    pub const ABRT = 6;"},
{"lineNum":" 2068","line":"    pub const IOT = ABRT;"},
{"lineNum":" 2069","line":"    pub const BUS = 7;"},
{"lineNum":" 2070","line":"    pub const FPE = 8;"},
{"lineNum":" 2071","line":"    pub const KILL = 9;"},
{"lineNum":" 2072","line":"    pub const USR1 = 10;"},
{"lineNum":" 2073","line":"    pub const SEGV = 11;"},
{"lineNum":" 2074","line":"    pub const USR2 = 12;"},
{"lineNum":" 2075","line":"    pub const PIPE = 13;"},
{"lineNum":" 2076","line":"    pub const ALRM = 14;"},
{"lineNum":" 2077","line":"    pub const TERM = 15;"},
{"lineNum":" 2078","line":"    pub const STKFLT = 16;"},
{"lineNum":" 2079","line":"    pub const CHLD = 17;"},
{"lineNum":" 2080","line":"    pub const CONT = 18;"},
{"lineNum":" 2081","line":"    pub const STOP = 19;"},
{"lineNum":" 2082","line":"    pub const TSTP = 20;"},
{"lineNum":" 2083","line":"    pub const TTIN = 21;"},
{"lineNum":" 2084","line":"    pub const TTOU = 22;"},
{"lineNum":" 2085","line":"    pub const URG = 23;"},
{"lineNum":" 2086","line":"    pub const XCPU = 24;"},
{"lineNum":" 2087","line":"    pub const XFSZ = 25;"},
{"lineNum":" 2088","line":"    pub const VTALRM = 26;"},
{"lineNum":" 2089","line":"    pub const PROF = 27;"},
{"lineNum":" 2090","line":"    pub const WINCH = 28;"},
{"lineNum":" 2091","line":"    pub const IO = 29;"},
{"lineNum":" 2092","line":"    pub const POLL = 29;"},
{"lineNum":" 2093","line":"    pub const PWR = 30;"},
{"lineNum":" 2094","line":"    pub const SYS = 31;"},
{"lineNum":" 2095","line":"    pub const UNUSED = SIG.SYS;"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"    pub const ERR = @as(?Sigaction.handler_fn, @ptrFromInt(maxInt(usize)));"},
{"lineNum":" 2098","line":"    pub const DFL = @as(?Sigaction.handler_fn, @ptrFromInt(0));"},
{"lineNum":" 2099","line":"    pub const IGN = @as(?Sigaction.handler_fn, @ptrFromInt(1));"},
{"lineNum":" 2100","line":"} else if (is_sparc) struct {"},
{"lineNum":" 2101","line":"    pub const BLOCK = 1;"},
{"lineNum":" 2102","line":"    pub const UNBLOCK = 2;"},
{"lineNum":" 2103","line":"    pub const SETMASK = 4;"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"    pub const HUP = 1;"},
{"lineNum":" 2106","line":"    pub const INT = 2;"},
{"lineNum":" 2107","line":"    pub const QUIT = 3;"},
{"lineNum":" 2108","line":"    pub const ILL = 4;"},
{"lineNum":" 2109","line":"    pub const TRAP = 5;"},
{"lineNum":" 2110","line":"    pub const ABRT = 6;"},
{"lineNum":" 2111","line":"    pub const EMT = 7;"},
{"lineNum":" 2112","line":"    pub const FPE = 8;"},
{"lineNum":" 2113","line":"    pub const KILL = 9;"},
{"lineNum":" 2114","line":"    pub const BUS = 10;"},
{"lineNum":" 2115","line":"    pub const SEGV = 11;"},
{"lineNum":" 2116","line":"    pub const SYS = 12;"},
{"lineNum":" 2117","line":"    pub const PIPE = 13;"},
{"lineNum":" 2118","line":"    pub const ALRM = 14;"},
{"lineNum":" 2119","line":"    pub const TERM = 15;"},
{"lineNum":" 2120","line":"    pub const URG = 16;"},
{"lineNum":" 2121","line":"    pub const STOP = 17;"},
{"lineNum":" 2122","line":"    pub const TSTP = 18;"},
{"lineNum":" 2123","line":"    pub const CONT = 19;"},
{"lineNum":" 2124","line":"    pub const CHLD = 20;"},
{"lineNum":" 2125","line":"    pub const TTIN = 21;"},
{"lineNum":" 2126","line":"    pub const TTOU = 22;"},
{"lineNum":" 2127","line":"    pub const POLL = 23;"},
{"lineNum":" 2128","line":"    pub const XCPU = 24;"},
{"lineNum":" 2129","line":"    pub const XFSZ = 25;"},
{"lineNum":" 2130","line":"    pub const VTALRM = 26;"},
{"lineNum":" 2131","line":"    pub const PROF = 27;"},
{"lineNum":" 2132","line":"    pub const WINCH = 28;"},
{"lineNum":" 2133","line":"    pub const LOST = 29;"},
{"lineNum":" 2134","line":"    pub const USR1 = 30;"},
{"lineNum":" 2135","line":"    pub const USR2 = 31;"},
{"lineNum":" 2136","line":"    pub const IOT = ABRT;"},
{"lineNum":" 2137","line":"    pub const CLD = CHLD;"},
{"lineNum":" 2138","line":"    pub const PWR = LOST;"},
{"lineNum":" 2139","line":"    pub const IO = SIG.POLL;"},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":"    pub const ERR = @as(?Sigaction.handler_fn, @ptrFromInt(maxInt(usize)));"},
{"lineNum":" 2142","line":"    pub const DFL = @as(?Sigaction.handler_fn, @ptrFromInt(0));"},
{"lineNum":" 2143","line":"    pub const IGN = @as(?Sigaction.handler_fn, @ptrFromInt(1));"},
{"lineNum":" 2144","line":"} else struct {"},
{"lineNum":" 2145","line":"    pub const BLOCK = 0;"},
{"lineNum":" 2146","line":"    pub const UNBLOCK = 1;"},
{"lineNum":" 2147","line":"    pub const SETMASK = 2;"},
{"lineNum":" 2148","line":""},
{"lineNum":" 2149","line":"    pub const HUP = 1;"},
{"lineNum":" 2150","line":"    pub const INT = 2;"},
{"lineNum":" 2151","line":"    pub const QUIT = 3;"},
{"lineNum":" 2152","line":"    pub const ILL = 4;"},
{"lineNum":" 2153","line":"    pub const TRAP = 5;"},
{"lineNum":" 2154","line":"    pub const ABRT = 6;"},
{"lineNum":" 2155","line":"    pub const IOT = ABRT;"},
{"lineNum":" 2156","line":"    pub const BUS = 7;"},
{"lineNum":" 2157","line":"    pub const FPE = 8;"},
{"lineNum":" 2158","line":"    pub const KILL = 9;"},
{"lineNum":" 2159","line":"    pub const USR1 = 10;"},
{"lineNum":" 2160","line":"    pub const SEGV = 11;"},
{"lineNum":" 2161","line":"    pub const USR2 = 12;"},
{"lineNum":" 2162","line":"    pub const PIPE = 13;"},
{"lineNum":" 2163","line":"    pub const ALRM = 14;"},
{"lineNum":" 2164","line":"    pub const TERM = 15;"},
{"lineNum":" 2165","line":"    pub const STKFLT = 16;"},
{"lineNum":" 2166","line":"    pub const CHLD = 17;"},
{"lineNum":" 2167","line":"    pub const CONT = 18;"},
{"lineNum":" 2168","line":"    pub const STOP = 19;"},
{"lineNum":" 2169","line":"    pub const TSTP = 20;"},
{"lineNum":" 2170","line":"    pub const TTIN = 21;"},
{"lineNum":" 2171","line":"    pub const TTOU = 22;"},
{"lineNum":" 2172","line":"    pub const URG = 23;"},
{"lineNum":" 2173","line":"    pub const XCPU = 24;"},
{"lineNum":" 2174","line":"    pub const XFSZ = 25;"},
{"lineNum":" 2175","line":"    pub const VTALRM = 26;"},
{"lineNum":" 2176","line":"    pub const PROF = 27;"},
{"lineNum":" 2177","line":"    pub const WINCH = 28;"},
{"lineNum":" 2178","line":"    pub const IO = 29;"},
{"lineNum":" 2179","line":"    pub const POLL = 29;"},
{"lineNum":" 2180","line":"    pub const PWR = 30;"},
{"lineNum":" 2181","line":"    pub const SYS = 31;"},
{"lineNum":" 2182","line":"    pub const UNUSED = SIG.SYS;"},
{"lineNum":" 2183","line":""},
{"lineNum":" 2184","line":"    pub const ERR = @as(?Sigaction.handler_fn, @ptrFromInt(maxInt(usize)));"},
{"lineNum":" 2185","line":"    pub const DFL = @as(?Sigaction.handler_fn, @ptrFromInt(0));"},
{"lineNum":" 2186","line":"    pub const IGN = @as(?Sigaction.handler_fn, @ptrFromInt(1));"},
{"lineNum":" 2187","line":"};"},
{"lineNum":" 2188","line":""},
{"lineNum":" 2189","line":"pub const kernel_rwf = u32;"},
{"lineNum":" 2190","line":""},
{"lineNum":" 2191","line":"pub const RWF = struct {"},
{"lineNum":" 2192","line":"    /// high priority request, poll if possible"},
{"lineNum":" 2193","line":"    pub const HIPRI: kernel_rwf = 0x00000001;"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"    /// per-IO O.DSYNC"},
{"lineNum":" 2196","line":"    pub const DSYNC: kernel_rwf = 0x00000002;"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"    /// per-IO O.SYNC"},
{"lineNum":" 2199","line":"    pub const SYNC: kernel_rwf = 0x00000004;"},
{"lineNum":" 2200","line":""},
{"lineNum":" 2201","line":"    /// per-IO, return -EAGAIN if operation would block"},
{"lineNum":" 2202","line":"    pub const NOWAIT: kernel_rwf = 0x00000008;"},
{"lineNum":" 2203","line":""},
{"lineNum":" 2204","line":"    /// per-IO O.APPEND"},
{"lineNum":" 2205","line":"    pub const APPEND: kernel_rwf = 0x00000010;"},
{"lineNum":" 2206","line":"};"},
{"lineNum":" 2207","line":""},
{"lineNum":" 2208","line":"pub const SEEK = struct {"},
{"lineNum":" 2209","line":"    pub const SET = 0;"},
{"lineNum":" 2210","line":"    pub const CUR = 1;"},
{"lineNum":" 2211","line":"    pub const END = 2;"},
{"lineNum":" 2212","line":"};"},
{"lineNum":" 2213","line":""},
{"lineNum":" 2214","line":"pub const SHUT = struct {"},
{"lineNum":" 2215","line":"    pub const RD = 0;"},
{"lineNum":" 2216","line":"    pub const WR = 1;"},
{"lineNum":" 2217","line":"    pub const RDWR = 2;"},
{"lineNum":" 2218","line":"};"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"pub const SOCK = struct {"},
{"lineNum":" 2221","line":"    pub const STREAM = if (is_mips) 2 else 1;"},
{"lineNum":" 2222","line":"    pub const DGRAM = if (is_mips) 1 else 2;"},
{"lineNum":" 2223","line":"    pub const RAW = 3;"},
{"lineNum":" 2224","line":"    pub const RDM = 4;"},
{"lineNum":" 2225","line":"    pub const SEQPACKET = 5;"},
{"lineNum":" 2226","line":"    pub const DCCP = 6;"},
{"lineNum":" 2227","line":"    pub const PACKET = 10;"},
{"lineNum":" 2228","line":"    pub const CLOEXEC = if (is_sparc) 0o20000000 else 0o2000000;"},
{"lineNum":" 2229","line":"    pub const NONBLOCK = if (is_mips) 0o200 else if (is_sparc) 0o40000 else 0o4000;"},
{"lineNum":" 2230","line":"};"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"pub const TCP = struct {"},
{"lineNum":" 2233","line":"    /// Turn off Nagle\'s algorithm"},
{"lineNum":" 2234","line":"    pub const NODELAY = 1;"},
{"lineNum":" 2235","line":"    /// Limit MSS"},
{"lineNum":" 2236","line":"    pub const MAXSEG = 2;"},
{"lineNum":" 2237","line":"    /// Never send partially complete segments."},
{"lineNum":" 2238","line":"    pub const CORK = 3;"},
{"lineNum":" 2239","line":"    /// Start keeplives after this period, in seconds"},
{"lineNum":" 2240","line":"    pub const KEEPIDLE = 4;"},
{"lineNum":" 2241","line":"    /// Interval between keepalives"},
{"lineNum":" 2242","line":"    pub const KEEPINTVL = 5;"},
{"lineNum":" 2243","line":"    /// Number of keepalives before death"},
{"lineNum":" 2244","line":"    pub const KEEPCNT = 6;"},
{"lineNum":" 2245","line":"    /// Number of SYN retransmits"},
{"lineNum":" 2246","line":"    pub const SYNCNT = 7;"},
{"lineNum":" 2247","line":"    /// Life time of orphaned FIN-WAIT-2 state"},
{"lineNum":" 2248","line":"    pub const LINGER2 = 8;"},
{"lineNum":" 2249","line":"    /// Wake up listener only when data arrive"},
{"lineNum":" 2250","line":"    pub const DEFER_ACCEPT = 9;"},
{"lineNum":" 2251","line":"    /// Bound advertised window"},
{"lineNum":" 2252","line":"    pub const WINDOW_CLAMP = 10;"},
{"lineNum":" 2253","line":"    /// Information about this connection."},
{"lineNum":" 2254","line":"    pub const INFO = 11;"},
{"lineNum":" 2255","line":"    /// Block/reenable quick acks"},
{"lineNum":" 2256","line":"    pub const QUICKACK = 12;"},
{"lineNum":" 2257","line":"    /// Congestion control algorithm"},
{"lineNum":" 2258","line":"    pub const CONGESTION = 13;"},
{"lineNum":" 2259","line":"    /// TCP MD5 Signature (RFC2385)"},
{"lineNum":" 2260","line":"    pub const MD5SIG = 14;"},
{"lineNum":" 2261","line":"    /// Use linear timeouts for thin streams"},
{"lineNum":" 2262","line":"    pub const THIN_LINEAR_TIMEOUTS = 16;"},
{"lineNum":" 2263","line":"    /// Fast retrans. after 1 dupack"},
{"lineNum":" 2264","line":"    pub const THIN_DUPACK = 17;"},
{"lineNum":" 2265","line":"    /// How long for loss retry before timeout"},
{"lineNum":" 2266","line":"    pub const USER_TIMEOUT = 18;"},
{"lineNum":" 2267","line":"    /// TCP sock is under repair right now"},
{"lineNum":" 2268","line":"    pub const REPAIR = 19;"},
{"lineNum":" 2269","line":"    pub const REPAIR_QUEUE = 20;"},
{"lineNum":" 2270","line":"    pub const QUEUE_SEQ = 21;"},
{"lineNum":" 2271","line":"    pub const REPAIR_OPTIONS = 22;"},
{"lineNum":" 2272","line":"    /// Enable FastOpen on listeners"},
{"lineNum":" 2273","line":"    pub const FASTOPEN = 23;"},
{"lineNum":" 2274","line":"    pub const TIMESTAMP = 24;"},
{"lineNum":" 2275","line":"    /// limit number of unsent bytes in write queue"},
{"lineNum":" 2276","line":"    pub const NOTSENT_LOWAT = 25;"},
{"lineNum":" 2277","line":"    /// Get Congestion Control (optional) info"},
{"lineNum":" 2278","line":"    pub const CC_INFO = 26;"},
{"lineNum":" 2279","line":"    /// Record SYN headers for new connections"},
{"lineNum":" 2280","line":"    pub const SAVE_SYN = 27;"},
{"lineNum":" 2281","line":"    /// Get SYN headers recorded for connection"},
{"lineNum":" 2282","line":"    pub const SAVED_SYN = 28;"},
{"lineNum":" 2283","line":"    /// Get/set window parameters"},
{"lineNum":" 2284","line":"    pub const REPAIR_WINDOW = 29;"},
{"lineNum":" 2285","line":"    /// Attempt FastOpen with connect"},
{"lineNum":" 2286","line":"    pub const FASTOPEN_CONNECT = 30;"},
{"lineNum":" 2287","line":"    /// Attach a ULP to a TCP connection"},
{"lineNum":" 2288","line":"    pub const ULP = 31;"},
{"lineNum":" 2289","line":"    /// TCP MD5 Signature with extensions"},
{"lineNum":" 2290","line":"    pub const MD5SIG_EXT = 32;"},
{"lineNum":" 2291","line":"    /// Set the key for Fast Open (cookie)"},
{"lineNum":" 2292","line":"    pub const FASTOPEN_KEY = 33;"},
{"lineNum":" 2293","line":"    /// Enable TFO without a TFO cookie"},
{"lineNum":" 2294","line":"    pub const FASTOPEN_NO_COOKIE = 34;"},
{"lineNum":" 2295","line":"    pub const ZEROCOPY_RECEIVE = 35;"},
{"lineNum":" 2296","line":"    /// Notify bytes available to read as a cmsg on read"},
{"lineNum":" 2297","line":"    pub const INQ = 36;"},
{"lineNum":" 2298","line":"    pub const CM_INQ = INQ;"},
{"lineNum":" 2299","line":"    /// delay outgoing packets by XX usec"},
{"lineNum":" 2300","line":"    pub const TX_DELAY = 37;"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"    pub const REPAIR_ON = 1;"},
{"lineNum":" 2303","line":"    pub const REPAIR_OFF = 0;"},
{"lineNum":" 2304","line":"    /// Turn off without window probes"},
{"lineNum":" 2305","line":"    pub const REPAIR_OFF_NO_WP = -1;"},
{"lineNum":" 2306","line":"};"},
{"lineNum":" 2307","line":""},
{"lineNum":" 2308","line":"pub const PF = struct {"},
{"lineNum":" 2309","line":"    pub const UNSPEC = 0;"},
{"lineNum":" 2310","line":"    pub const LOCAL = 1;"},
{"lineNum":" 2311","line":"    pub const UNIX = LOCAL;"},
{"lineNum":" 2312","line":"    pub const FILE = LOCAL;"},
{"lineNum":" 2313","line":"    pub const INET = 2;"},
{"lineNum":" 2314","line":"    pub const AX25 = 3;"},
{"lineNum":" 2315","line":"    pub const IPX = 4;"},
{"lineNum":" 2316","line":"    pub const APPLETALK = 5;"},
{"lineNum":" 2317","line":"    pub const NETROM = 6;"},
{"lineNum":" 2318","line":"    pub const BRIDGE = 7;"},
{"lineNum":" 2319","line":"    pub const ATMPVC = 8;"},
{"lineNum":" 2320","line":"    pub const X25 = 9;"},
{"lineNum":" 2321","line":"    pub const INET6 = 10;"},
{"lineNum":" 2322","line":"    pub const ROSE = 11;"},
{"lineNum":" 2323","line":"    pub const DECnet = 12;"},
{"lineNum":" 2324","line":"    pub const NETBEUI = 13;"},
{"lineNum":" 2325","line":"    pub const SECURITY = 14;"},
{"lineNum":" 2326","line":"    pub const KEY = 15;"},
{"lineNum":" 2327","line":"    pub const NETLINK = 16;"},
{"lineNum":" 2328","line":"    pub const ROUTE = PF.NETLINK;"},
{"lineNum":" 2329","line":"    pub const PACKET = 17;"},
{"lineNum":" 2330","line":"    pub const ASH = 18;"},
{"lineNum":" 2331","line":"    pub const ECONET = 19;"},
{"lineNum":" 2332","line":"    pub const ATMSVC = 20;"},
{"lineNum":" 2333","line":"    pub const RDS = 21;"},
{"lineNum":" 2334","line":"    pub const SNA = 22;"},
{"lineNum":" 2335","line":"    pub const IRDA = 23;"},
{"lineNum":" 2336","line":"    pub const PPPOX = 24;"},
{"lineNum":" 2337","line":"    pub const WANPIPE = 25;"},
{"lineNum":" 2338","line":"    pub const LLC = 26;"},
{"lineNum":" 2339","line":"    pub const IB = 27;"},
{"lineNum":" 2340","line":"    pub const MPLS = 28;"},
{"lineNum":" 2341","line":"    pub const CAN = 29;"},
{"lineNum":" 2342","line":"    pub const TIPC = 30;"},
{"lineNum":" 2343","line":"    pub const BLUETOOTH = 31;"},
{"lineNum":" 2344","line":"    pub const IUCV = 32;"},
{"lineNum":" 2345","line":"    pub const RXRPC = 33;"},
{"lineNum":" 2346","line":"    pub const ISDN = 34;"},
{"lineNum":" 2347","line":"    pub const PHONET = 35;"},
{"lineNum":" 2348","line":"    pub const IEEE802154 = 36;"},
{"lineNum":" 2349","line":"    pub const CAIF = 37;"},
{"lineNum":" 2350","line":"    pub const ALG = 38;"},
{"lineNum":" 2351","line":"    pub const NFC = 39;"},
{"lineNum":" 2352","line":"    pub const VSOCK = 40;"},
{"lineNum":" 2353","line":"    pub const KCM = 41;"},
{"lineNum":" 2354","line":"    pub const QIPCRTR = 42;"},
{"lineNum":" 2355","line":"    pub const SMC = 43;"},
{"lineNum":" 2356","line":"    pub const XDP = 44;"},
{"lineNum":" 2357","line":"    pub const MAX = 45;"},
{"lineNum":" 2358","line":"};"},
{"lineNum":" 2359","line":""},
{"lineNum":" 2360","line":"pub const AF = struct {"},
{"lineNum":" 2361","line":"    pub const UNSPEC = PF.UNSPEC;"},
{"lineNum":" 2362","line":"    pub const LOCAL = PF.LOCAL;"},
{"lineNum":" 2363","line":"    pub const UNIX = AF.LOCAL;"},
{"lineNum":" 2364","line":"    pub const FILE = AF.LOCAL;"},
{"lineNum":" 2365","line":"    pub const INET = PF.INET;"},
{"lineNum":" 2366","line":"    pub const AX25 = PF.AX25;"},
{"lineNum":" 2367","line":"    pub const IPX = PF.IPX;"},
{"lineNum":" 2368","line":"    pub const APPLETALK = PF.APPLETALK;"},
{"lineNum":" 2369","line":"    pub const NETROM = PF.NETROM;"},
{"lineNum":" 2370","line":"    pub const BRIDGE = PF.BRIDGE;"},
{"lineNum":" 2371","line":"    pub const ATMPVC = PF.ATMPVC;"},
{"lineNum":" 2372","line":"    pub const X25 = PF.X25;"},
{"lineNum":" 2373","line":"    pub const INET6 = PF.INET6;"},
{"lineNum":" 2374","line":"    pub const ROSE = PF.ROSE;"},
{"lineNum":" 2375","line":"    pub const DECnet = PF.DECnet;"},
{"lineNum":" 2376","line":"    pub const NETBEUI = PF.NETBEUI;"},
{"lineNum":" 2377","line":"    pub const SECURITY = PF.SECURITY;"},
{"lineNum":" 2378","line":"    pub const KEY = PF.KEY;"},
{"lineNum":" 2379","line":"    pub const NETLINK = PF.NETLINK;"},
{"lineNum":" 2380","line":"    pub const ROUTE = PF.ROUTE;"},
{"lineNum":" 2381","line":"    pub const PACKET = PF.PACKET;"},
{"lineNum":" 2382","line":"    pub const ASH = PF.ASH;"},
{"lineNum":" 2383","line":"    pub const ECONET = PF.ECONET;"},
{"lineNum":" 2384","line":"    pub const ATMSVC = PF.ATMSVC;"},
{"lineNum":" 2385","line":"    pub const RDS = PF.RDS;"},
{"lineNum":" 2386","line":"    pub const SNA = PF.SNA;"},
{"lineNum":" 2387","line":"    pub const IRDA = PF.IRDA;"},
{"lineNum":" 2388","line":"    pub const PPPOX = PF.PPPOX;"},
{"lineNum":" 2389","line":"    pub const WANPIPE = PF.WANPIPE;"},
{"lineNum":" 2390","line":"    pub const LLC = PF.LLC;"},
{"lineNum":" 2391","line":"    pub const IB = PF.IB;"},
{"lineNum":" 2392","line":"    pub const MPLS = PF.MPLS;"},
{"lineNum":" 2393","line":"    pub const CAN = PF.CAN;"},
{"lineNum":" 2394","line":"    pub const TIPC = PF.TIPC;"},
{"lineNum":" 2395","line":"    pub const BLUETOOTH = PF.BLUETOOTH;"},
{"lineNum":" 2396","line":"    pub const IUCV = PF.IUCV;"},
{"lineNum":" 2397","line":"    pub const RXRPC = PF.RXRPC;"},
{"lineNum":" 2398","line":"    pub const ISDN = PF.ISDN;"},
{"lineNum":" 2399","line":"    pub const PHONET = PF.PHONET;"},
{"lineNum":" 2400","line":"    pub const IEEE802154 = PF.IEEE802154;"},
{"lineNum":" 2401","line":"    pub const CAIF = PF.CAIF;"},
{"lineNum":" 2402","line":"    pub const ALG = PF.ALG;"},
{"lineNum":" 2403","line":"    pub const NFC = PF.NFC;"},
{"lineNum":" 2404","line":"    pub const VSOCK = PF.VSOCK;"},
{"lineNum":" 2405","line":"    pub const KCM = PF.KCM;"},
{"lineNum":" 2406","line":"    pub const QIPCRTR = PF.QIPCRTR;"},
{"lineNum":" 2407","line":"    pub const SMC = PF.SMC;"},
{"lineNum":" 2408","line":"    pub const XDP = PF.XDP;"},
{"lineNum":" 2409","line":"    pub const MAX = PF.MAX;"},
{"lineNum":" 2410","line":"};"},
{"lineNum":" 2411","line":""},
{"lineNum":" 2412","line":"pub const SO = struct {"},
{"lineNum":" 2413","line":"    pub usingnamespace if (is_mips) struct {"},
{"lineNum":" 2414","line":"        pub const DEBUG = 1;"},
{"lineNum":" 2415","line":"        pub const REUSEADDR = 0x0004;"},
{"lineNum":" 2416","line":"        pub const KEEPALIVE = 0x0008;"},
{"lineNum":" 2417","line":"        pub const DONTROUTE = 0x0010;"},
{"lineNum":" 2418","line":"        pub const BROADCAST = 0x0020;"},
{"lineNum":" 2419","line":"        pub const LINGER = 0x0080;"},
{"lineNum":" 2420","line":"        pub const OOBINLINE = 0x0100;"},
{"lineNum":" 2421","line":"        pub const REUSEPORT = 0x0200;"},
{"lineNum":" 2422","line":"        pub const SNDBUF = 0x1001;"},
{"lineNum":" 2423","line":"        pub const RCVBUF = 0x1002;"},
{"lineNum":" 2424","line":"        pub const SNDLOWAT = 0x1003;"},
{"lineNum":" 2425","line":"        pub const RCVLOWAT = 0x1004;"},
{"lineNum":" 2426","line":"        pub const RCVTIMEO = 0x1006;"},
{"lineNum":" 2427","line":"        pub const SNDTIMEO = 0x1005;"},
{"lineNum":" 2428","line":"        pub const ERROR = 0x1007;"},
{"lineNum":" 2429","line":"        pub const TYPE = 0x1008;"},
{"lineNum":" 2430","line":"        pub const ACCEPTCONN = 0x1009;"},
{"lineNum":" 2431","line":"        pub const PROTOCOL = 0x1028;"},
{"lineNum":" 2432","line":"        pub const DOMAIN = 0x1029;"},
{"lineNum":" 2433","line":"        pub const NO_CHECK = 11;"},
{"lineNum":" 2434","line":"        pub const PRIORITY = 12;"},
{"lineNum":" 2435","line":"        pub const BSDCOMPAT = 14;"},
{"lineNum":" 2436","line":"        pub const PASSCRED = 17;"},
{"lineNum":" 2437","line":"        pub const PEERCRED = 18;"},
{"lineNum":" 2438","line":"        pub const PEERSEC = 30;"},
{"lineNum":" 2439","line":"        pub const SNDBUFFORCE = 31;"},
{"lineNum":" 2440","line":"        pub const RCVBUFFORCE = 33;"},
{"lineNum":" 2441","line":"        pub const SECURITY_AUTHENTICATION = 22;"},
{"lineNum":" 2442","line":"        pub const SECURITY_ENCRYPTION_TRANSPORT = 23;"},
{"lineNum":" 2443","line":"        pub const SECURITY_ENCRYPTION_NETWORK = 24;"},
{"lineNum":" 2444","line":"        pub const BINDTODEVICE = 25;"},
{"lineNum":" 2445","line":"        pub const ATTACH_FILTER = 26;"},
{"lineNum":" 2446","line":"        pub const DETACH_FILTER = 27;"},
{"lineNum":" 2447","line":"        pub const GET_FILTER = ATTACH_FILTER;"},
{"lineNum":" 2448","line":"        pub const PEERNAME = 28;"},
{"lineNum":" 2449","line":"        pub const TIMESTAMP_OLD = 29;"},
{"lineNum":" 2450","line":"        pub const PASSSEC = 34;"},
{"lineNum":" 2451","line":"        pub const TIMESTAMPNS_OLD = 35;"},
{"lineNum":" 2452","line":"        pub const MARK = 36;"},
{"lineNum":" 2453","line":"        pub const TIMESTAMPING_OLD = 37;"},
{"lineNum":" 2454","line":"        pub const RXQ_OVFL = 40;"},
{"lineNum":" 2455","line":"        pub const WIFI_STATUS = 41;"},
{"lineNum":" 2456","line":"        pub const PEEK_OFF = 42;"},
{"lineNum":" 2457","line":"        pub const NOFCS = 43;"},
{"lineNum":" 2458","line":"        pub const LOCK_FILTER = 44;"},
{"lineNum":" 2459","line":"        pub const SELECT_ERR_QUEUE = 45;"},
{"lineNum":" 2460","line":"        pub const BUSY_POLL = 46;"},
{"lineNum":" 2461","line":"        pub const MAX_PACING_RATE = 47;"},
{"lineNum":" 2462","line":"        pub const BPF_EXTENSIONS = 48;"},
{"lineNum":" 2463","line":"        pub const INCOMING_CPU = 49;"},
{"lineNum":" 2464","line":"        pub const ATTACH_BPF = 50;"},
{"lineNum":" 2465","line":"        pub const DETACH_BPF = DETACH_FILTER;"},
{"lineNum":" 2466","line":"        pub const ATTACH_REUSEPORT_CBPF = 51;"},
{"lineNum":" 2467","line":"        pub const ATTACH_REUSEPORT_EBPF = 52;"},
{"lineNum":" 2468","line":"        pub const CNX_ADVICE = 53;"},
{"lineNum":" 2469","line":"        pub const MEMINFO = 55;"},
{"lineNum":" 2470","line":"        pub const INCOMING_NAPI_ID = 56;"},
{"lineNum":" 2471","line":"        pub const COOKIE = 57;"},
{"lineNum":" 2472","line":"        pub const PEERGROUPS = 59;"},
{"lineNum":" 2473","line":"        pub const ZEROCOPY = 60;"},
{"lineNum":" 2474","line":"        pub const TXTIME = 61;"},
{"lineNum":" 2475","line":"        pub const BINDTOIFINDEX = 62;"},
{"lineNum":" 2476","line":"        pub const TIMESTAMP_NEW = 63;"},
{"lineNum":" 2477","line":"        pub const TIMESTAMPNS_NEW = 64;"},
{"lineNum":" 2478","line":"        pub const TIMESTAMPING_NEW = 65;"},
{"lineNum":" 2479","line":"        pub const RCVTIMEO_NEW = 66;"},
{"lineNum":" 2480","line":"        pub const SNDTIMEO_NEW = 67;"},
{"lineNum":" 2481","line":"        pub const DETACH_REUSEPORT_BPF = 68;"},
{"lineNum":" 2482","line":"    } else if (is_ppc or is_ppc64) struct {"},
{"lineNum":" 2483","line":"        pub const DEBUG = 1;"},
{"lineNum":" 2484","line":"        pub const REUSEADDR = 2;"},
{"lineNum":" 2485","line":"        pub const TYPE = 3;"},
{"lineNum":" 2486","line":"        pub const ERROR = 4;"},
{"lineNum":" 2487","line":"        pub const DONTROUTE = 5;"},
{"lineNum":" 2488","line":"        pub const BROADCAST = 6;"},
{"lineNum":" 2489","line":"        pub const SNDBUF = 7;"},
{"lineNum":" 2490","line":"        pub const RCVBUF = 8;"},
{"lineNum":" 2491","line":"        pub const KEEPALIVE = 9;"},
{"lineNum":" 2492","line":"        pub const OOBINLINE = 10;"},
{"lineNum":" 2493","line":"        pub const NO_CHECK = 11;"},
{"lineNum":" 2494","line":"        pub const PRIORITY = 12;"},
{"lineNum":" 2495","line":"        pub const LINGER = 13;"},
{"lineNum":" 2496","line":"        pub const BSDCOMPAT = 14;"},
{"lineNum":" 2497","line":"        pub const REUSEPORT = 15;"},
{"lineNum":" 2498","line":"        pub const RCVLOWAT = 16;"},
{"lineNum":" 2499","line":"        pub const SNDLOWAT = 17;"},
{"lineNum":" 2500","line":"        pub const RCVTIMEO = 18;"},
{"lineNum":" 2501","line":"        pub const SNDTIMEO = 19;"},
{"lineNum":" 2502","line":"        pub const PASSCRED = 20;"},
{"lineNum":" 2503","line":"        pub const PEERCRED = 21;"},
{"lineNum":" 2504","line":"        pub const ACCEPTCONN = 30;"},
{"lineNum":" 2505","line":"        pub const PEERSEC = 31;"},
{"lineNum":" 2506","line":"        pub const SNDBUFFORCE = 32;"},
{"lineNum":" 2507","line":"        pub const RCVBUFFORCE = 33;"},
{"lineNum":" 2508","line":"        pub const PROTOCOL = 38;"},
{"lineNum":" 2509","line":"        pub const DOMAIN = 39;"},
{"lineNum":" 2510","line":"        pub const SECURITY_AUTHENTICATION = 22;"},
{"lineNum":" 2511","line":"        pub const SECURITY_ENCRYPTION_TRANSPORT = 23;"},
{"lineNum":" 2512","line":"        pub const SECURITY_ENCRYPTION_NETWORK = 24;"},
{"lineNum":" 2513","line":"        pub const BINDTODEVICE = 25;"},
{"lineNum":" 2514","line":"        pub const ATTACH_FILTER = 26;"},
{"lineNum":" 2515","line":"        pub const DETACH_FILTER = 27;"},
{"lineNum":" 2516","line":"        pub const GET_FILTER = ATTACH_FILTER;"},
{"lineNum":" 2517","line":"        pub const PEERNAME = 28;"},
{"lineNum":" 2518","line":"        pub const TIMESTAMP_OLD = 29;"},
{"lineNum":" 2519","line":"        pub const PASSSEC = 34;"},
{"lineNum":" 2520","line":"        pub const TIMESTAMPNS_OLD = 35;"},
{"lineNum":" 2521","line":"        pub const MARK = 36;"},
{"lineNum":" 2522","line":"        pub const TIMESTAMPING_OLD = 37;"},
{"lineNum":" 2523","line":"        pub const RXQ_OVFL = 40;"},
{"lineNum":" 2524","line":"        pub const WIFI_STATUS = 41;"},
{"lineNum":" 2525","line":"        pub const PEEK_OFF = 42;"},
{"lineNum":" 2526","line":"        pub const NOFCS = 43;"},
{"lineNum":" 2527","line":"        pub const LOCK_FILTER = 44;"},
{"lineNum":" 2528","line":"        pub const SELECT_ERR_QUEUE = 45;"},
{"lineNum":" 2529","line":"        pub const BUSY_POLL = 46;"},
{"lineNum":" 2530","line":"        pub const MAX_PACING_RATE = 47;"},
{"lineNum":" 2531","line":"        pub const BPF_EXTENSIONS = 48;"},
{"lineNum":" 2532","line":"        pub const INCOMING_CPU = 49;"},
{"lineNum":" 2533","line":"        pub const ATTACH_BPF = 50;"},
{"lineNum":" 2534","line":"        pub const DETACH_BPF = DETACH_FILTER;"},
{"lineNum":" 2535","line":"        pub const ATTACH_REUSEPORT_CBPF = 51;"},
{"lineNum":" 2536","line":"        pub const ATTACH_REUSEPORT_EBPF = 52;"},
{"lineNum":" 2537","line":"        pub const CNX_ADVICE = 53;"},
{"lineNum":" 2538","line":"        pub const MEMINFO = 55;"},
{"lineNum":" 2539","line":"        pub const INCOMING_NAPI_ID = 56;"},
{"lineNum":" 2540","line":"        pub const COOKIE = 57;"},
{"lineNum":" 2541","line":"        pub const PEERGROUPS = 59;"},
{"lineNum":" 2542","line":"        pub const ZEROCOPY = 60;"},
{"lineNum":" 2543","line":"        pub const TXTIME = 61;"},
{"lineNum":" 2544","line":"        pub const BINDTOIFINDEX = 62;"},
{"lineNum":" 2545","line":"        pub const TIMESTAMP_NEW = 63;"},
{"lineNum":" 2546","line":"        pub const TIMESTAMPNS_NEW = 64;"},
{"lineNum":" 2547","line":"        pub const TIMESTAMPING_NEW = 65;"},
{"lineNum":" 2548","line":"        pub const RCVTIMEO_NEW = 66;"},
{"lineNum":" 2549","line":"        pub const SNDTIMEO_NEW = 67;"},
{"lineNum":" 2550","line":"        pub const DETACH_REUSEPORT_BPF = 68;"},
{"lineNum":" 2551","line":"    } else if (is_sparc) struct {"},
{"lineNum":" 2552","line":"        pub const DEBUG = 1;"},
{"lineNum":" 2553","line":"        pub const REUSEADDR = 4;"},
{"lineNum":" 2554","line":"        pub const TYPE = 4104;"},
{"lineNum":" 2555","line":"        pub const ERROR = 4103;"},
{"lineNum":" 2556","line":"        pub const DONTROUTE = 16;"},
{"lineNum":" 2557","line":"        pub const BROADCAST = 32;"},
{"lineNum":" 2558","line":"        pub const SNDBUF = 4097;"},
{"lineNum":" 2559","line":"        pub const RCVBUF = 4098;"},
{"lineNum":" 2560","line":"        pub const KEEPALIVE = 8;"},
{"lineNum":" 2561","line":"        pub const OOBINLINE = 256;"},
{"lineNum":" 2562","line":"        pub const NO_CHECK = 11;"},
{"lineNum":" 2563","line":"        pub const PRIORITY = 12;"},
{"lineNum":" 2564","line":"        pub const LINGER = 128;"},
{"lineNum":" 2565","line":"        pub const BSDCOMPAT = 1024;"},
{"lineNum":" 2566","line":"        pub const REUSEPORT = 512;"},
{"lineNum":" 2567","line":"        pub const PASSCRED = 2;"},
{"lineNum":" 2568","line":"        pub const PEERCRED = 64;"},
{"lineNum":" 2569","line":"        pub const RCVLOWAT = 2048;"},
{"lineNum":" 2570","line":"        pub const SNDLOWAT = 4096;"},
{"lineNum":" 2571","line":"        pub const RCVTIMEO = 8192;"},
{"lineNum":" 2572","line":"        pub const SNDTIMEO = 16384;"},
{"lineNum":" 2573","line":"        pub const ACCEPTCONN = 32768;"},
{"lineNum":" 2574","line":"        pub const PEERSEC = 30;"},
{"lineNum":" 2575","line":"        pub const SNDBUFFORCE = 4106;"},
{"lineNum":" 2576","line":"        pub const RCVBUFFORCE = 4107;"},
{"lineNum":" 2577","line":"        pub const PROTOCOL = 4136;"},
{"lineNum":" 2578","line":"        pub const DOMAIN = 4137;"},
{"lineNum":" 2579","line":"        pub const SECURITY_AUTHENTICATION = 20481;"},
{"lineNum":" 2580","line":"        pub const SECURITY_ENCRYPTION_TRANSPORT = 20482;"},
{"lineNum":" 2581","line":"        pub const SECURITY_ENCRYPTION_NETWORK = 20484;"},
{"lineNum":" 2582","line":"        pub const BINDTODEVICE = 13;"},
{"lineNum":" 2583","line":"        pub const ATTACH_FILTER = 26;"},
{"lineNum":" 2584","line":"        pub const DETACH_FILTER = 27;"},
{"lineNum":" 2585","line":"        pub const GET_FILTER = 26;"},
{"lineNum":" 2586","line":"        pub const PEERNAME = 28;"},
{"lineNum":" 2587","line":"        pub const TIMESTAMP_OLD = 29;"},
{"lineNum":" 2588","line":"        pub const PASSSEC = 31;"},
{"lineNum":" 2589","line":"        pub const TIMESTAMPNS_OLD = 33;"},
{"lineNum":" 2590","line":"        pub const MARK = 34;"},
{"lineNum":" 2591","line":"        pub const TIMESTAMPING_OLD = 35;"},
{"lineNum":" 2592","line":"        pub const RXQ_OVFL = 36;"},
{"lineNum":" 2593","line":"        pub const WIFI_STATUS = 37;"},
{"lineNum":" 2594","line":"        pub const PEEK_OFF = 38;"},
{"lineNum":" 2595","line":"        pub const NOFCS = 39;"},
{"lineNum":" 2596","line":"        pub const LOCK_FILTER = 40;"},
{"lineNum":" 2597","line":"        pub const SELECT_ERR_QUEUE = 41;"},
{"lineNum":" 2598","line":"        pub const BUSY_POLL = 48;"},
{"lineNum":" 2599","line":"        pub const MAX_PACING_RATE = 49;"},
{"lineNum":" 2600","line":"        pub const BPF_EXTENSIONS = 50;"},
{"lineNum":" 2601","line":"        pub const INCOMING_CPU = 51;"},
{"lineNum":" 2602","line":"        pub const ATTACH_BPF = 52;"},
{"lineNum":" 2603","line":"        pub const DETACH_BPF = 27;"},
{"lineNum":" 2604","line":"        pub const ATTACH_REUSEPORT_CBPF = 53;"},
{"lineNum":" 2605","line":"        pub const ATTACH_REUSEPORT_EBPF = 54;"},
{"lineNum":" 2606","line":"        pub const CNX_ADVICE = 55;"},
{"lineNum":" 2607","line":"        pub const MEMINFO = 57;"},
{"lineNum":" 2608","line":"        pub const INCOMING_NAPI_ID = 58;"},
{"lineNum":" 2609","line":"        pub const COOKIE = 59;"},
{"lineNum":" 2610","line":"        pub const PEERGROUPS = 61;"},
{"lineNum":" 2611","line":"        pub const ZEROCOPY = 62;"},
{"lineNum":" 2612","line":"        pub const TXTIME = 63;"},
{"lineNum":" 2613","line":"        pub const BINDTOIFINDEX = 65;"},
{"lineNum":" 2614","line":"        pub const TIMESTAMP_NEW = 70;"},
{"lineNum":" 2615","line":"        pub const TIMESTAMPNS_NEW = 66;"},
{"lineNum":" 2616","line":"        pub const TIMESTAMPING_NEW = 67;"},
{"lineNum":" 2617","line":"        pub const RCVTIMEO_NEW = 68;"},
{"lineNum":" 2618","line":"        pub const SNDTIMEO_NEW = 69;"},
{"lineNum":" 2619","line":"        pub const DETACH_REUSEPORT_BPF = 71;"},
{"lineNum":" 2620","line":"    } else struct {"},
{"lineNum":" 2621","line":"        pub const DEBUG = 1;"},
{"lineNum":" 2622","line":"        pub const REUSEADDR = 2;"},
{"lineNum":" 2623","line":"        pub const TYPE = 3;"},
{"lineNum":" 2624","line":"        pub const ERROR = 4;"},
{"lineNum":" 2625","line":"        pub const DONTROUTE = 5;"},
{"lineNum":" 2626","line":"        pub const BROADCAST = 6;"},
{"lineNum":" 2627","line":"        pub const SNDBUF = 7;"},
{"lineNum":" 2628","line":"        pub const RCVBUF = 8;"},
{"lineNum":" 2629","line":"        pub const KEEPALIVE = 9;"},
{"lineNum":" 2630","line":"        pub const OOBINLINE = 10;"},
{"lineNum":" 2631","line":"        pub const NO_CHECK = 11;"},
{"lineNum":" 2632","line":"        pub const PRIORITY = 12;"},
{"lineNum":" 2633","line":"        pub const LINGER = 13;"},
{"lineNum":" 2634","line":"        pub const BSDCOMPAT = 14;"},
{"lineNum":" 2635","line":"        pub const REUSEPORT = 15;"},
{"lineNum":" 2636","line":"        pub const PASSCRED = 16;"},
{"lineNum":" 2637","line":"        pub const PEERCRED = 17;"},
{"lineNum":" 2638","line":"        pub const RCVLOWAT = 18;"},
{"lineNum":" 2639","line":"        pub const SNDLOWAT = 19;"},
{"lineNum":" 2640","line":"        pub const RCVTIMEO = 20;"},
{"lineNum":" 2641","line":"        pub const SNDTIMEO = 21;"},
{"lineNum":" 2642","line":"        pub const ACCEPTCONN = 30;"},
{"lineNum":" 2643","line":"        pub const PEERSEC = 31;"},
{"lineNum":" 2644","line":"        pub const SNDBUFFORCE = 32;"},
{"lineNum":" 2645","line":"        pub const RCVBUFFORCE = 33;"},
{"lineNum":" 2646","line":"        pub const PROTOCOL = 38;"},
{"lineNum":" 2647","line":"        pub const DOMAIN = 39;"},
{"lineNum":" 2648","line":"        pub const SECURITY_AUTHENTICATION = 22;"},
{"lineNum":" 2649","line":"        pub const SECURITY_ENCRYPTION_TRANSPORT = 23;"},
{"lineNum":" 2650","line":"        pub const SECURITY_ENCRYPTION_NETWORK = 24;"},
{"lineNum":" 2651","line":"        pub const BINDTODEVICE = 25;"},
{"lineNum":" 2652","line":"        pub const ATTACH_FILTER = 26;"},
{"lineNum":" 2653","line":"        pub const DETACH_FILTER = 27;"},
{"lineNum":" 2654","line":"        pub const GET_FILTER = ATTACH_FILTER;"},
{"lineNum":" 2655","line":"        pub const PEERNAME = 28;"},
{"lineNum":" 2656","line":"        pub const TIMESTAMP_OLD = 29;"},
{"lineNum":" 2657","line":"        pub const PASSSEC = 34;"},
{"lineNum":" 2658","line":"        pub const TIMESTAMPNS_OLD = 35;"},
{"lineNum":" 2659","line":"        pub const MARK = 36;"},
{"lineNum":" 2660","line":"        pub const TIMESTAMPING_OLD = 37;"},
{"lineNum":" 2661","line":"        pub const RXQ_OVFL = 40;"},
{"lineNum":" 2662","line":"        pub const WIFI_STATUS = 41;"},
{"lineNum":" 2663","line":"        pub const PEEK_OFF = 42;"},
{"lineNum":" 2664","line":"        pub const NOFCS = 43;"},
{"lineNum":" 2665","line":"        pub const LOCK_FILTER = 44;"},
{"lineNum":" 2666","line":"        pub const SELECT_ERR_QUEUE = 45;"},
{"lineNum":" 2667","line":"        pub const BUSY_POLL = 46;"},
{"lineNum":" 2668","line":"        pub const MAX_PACING_RATE = 47;"},
{"lineNum":" 2669","line":"        pub const BPF_EXTENSIONS = 48;"},
{"lineNum":" 2670","line":"        pub const INCOMING_CPU = 49;"},
{"lineNum":" 2671","line":"        pub const ATTACH_BPF = 50;"},
{"lineNum":" 2672","line":"        pub const DETACH_BPF = DETACH_FILTER;"},
{"lineNum":" 2673","line":"        pub const ATTACH_REUSEPORT_CBPF = 51;"},
{"lineNum":" 2674","line":"        pub const ATTACH_REUSEPORT_EBPF = 52;"},
{"lineNum":" 2675","line":"        pub const CNX_ADVICE = 53;"},
{"lineNum":" 2676","line":"        pub const MEMINFO = 55;"},
{"lineNum":" 2677","line":"        pub const INCOMING_NAPI_ID = 56;"},
{"lineNum":" 2678","line":"        pub const COOKIE = 57;"},
{"lineNum":" 2679","line":"        pub const PEERGROUPS = 59;"},
{"lineNum":" 2680","line":"        pub const ZEROCOPY = 60;"},
{"lineNum":" 2681","line":"        pub const TXTIME = 61;"},
{"lineNum":" 2682","line":"        pub const BINDTOIFINDEX = 62;"},
{"lineNum":" 2683","line":"        pub const TIMESTAMP_NEW = 63;"},
{"lineNum":" 2684","line":"        pub const TIMESTAMPNS_NEW = 64;"},
{"lineNum":" 2685","line":"        pub const TIMESTAMPING_NEW = 65;"},
{"lineNum":" 2686","line":"        pub const RCVTIMEO_NEW = 66;"},
{"lineNum":" 2687","line":"        pub const SNDTIMEO_NEW = 67;"},
{"lineNum":" 2688","line":"        pub const DETACH_REUSEPORT_BPF = 68;"},
{"lineNum":" 2689","line":"    };"},
{"lineNum":" 2690","line":"};"},
{"lineNum":" 2691","line":""},
{"lineNum":" 2692","line":"pub const SCM = struct {"},
{"lineNum":" 2693","line":"    pub const WIFI_STATUS = SO.WIFI_STATUS;"},
{"lineNum":" 2694","line":"    pub const TIMESTAMPING_OPT_STATS = 54;"},
{"lineNum":" 2695","line":"    pub const TIMESTAMPING_PKTINFO = 58;"},
{"lineNum":" 2696","line":"    pub const TXTIME = SO.TXTIME;"},
{"lineNum":" 2697","line":"};"},
{"lineNum":" 2698","line":""},
{"lineNum":" 2699","line":"pub const SOL = struct {"},
{"lineNum":" 2700","line":"    pub const SOCKET = if (is_mips or is_sparc) 65535 else 1;"},
{"lineNum":" 2701","line":""},
{"lineNum":" 2702","line":"    pub const IP = 0;"},
{"lineNum":" 2703","line":"    pub const IPV6 = 41;"},
{"lineNum":" 2704","line":"    pub const ICMPV6 = 58;"},
{"lineNum":" 2705","line":""},
{"lineNum":" 2706","line":"    pub const RAW = 255;"},
{"lineNum":" 2707","line":"    pub const DECNET = 261;"},
{"lineNum":" 2708","line":"    pub const X25 = 262;"},
{"lineNum":" 2709","line":"    pub const PACKET = 263;"},
{"lineNum":" 2710","line":"    pub const ATM = 264;"},
{"lineNum":" 2711","line":"    pub const AAL = 265;"},
{"lineNum":" 2712","line":"    pub const IRDA = 266;"},
{"lineNum":" 2713","line":"    pub const NETBEUI = 267;"},
{"lineNum":" 2714","line":"    pub const LLC = 268;"},
{"lineNum":" 2715","line":"    pub const DCCP = 269;"},
{"lineNum":" 2716","line":"    pub const NETLINK = 270;"},
{"lineNum":" 2717","line":"    pub const TIPC = 271;"},
{"lineNum":" 2718","line":"    pub const RXRPC = 272;"},
{"lineNum":" 2719","line":"    pub const PPPOL2TP = 273;"},
{"lineNum":" 2720","line":"    pub const BLUETOOTH = 274;"},
{"lineNum":" 2721","line":"    pub const PNPIPE = 275;"},
{"lineNum":" 2722","line":"    pub const RDS = 276;"},
{"lineNum":" 2723","line":"    pub const IUCV = 277;"},
{"lineNum":" 2724","line":"    pub const CAIF = 278;"},
{"lineNum":" 2725","line":"    pub const ALG = 279;"},
{"lineNum":" 2726","line":"    pub const NFC = 280;"},
{"lineNum":" 2727","line":"    pub const KCM = 281;"},
{"lineNum":" 2728","line":"    pub const TLS = 282;"},
{"lineNum":" 2729","line":"    pub const XDP = 283;"},
{"lineNum":" 2730","line":"};"},
{"lineNum":" 2731","line":""},
{"lineNum":" 2732","line":"pub const SOMAXCONN = 128;"},
{"lineNum":" 2733","line":""},
{"lineNum":" 2734","line":"pub const IP = struct {"},
{"lineNum":" 2735","line":"    pub const TOS = 1;"},
{"lineNum":" 2736","line":"    pub const TTL = 2;"},
{"lineNum":" 2737","line":"    pub const HDRINCL = 3;"},
{"lineNum":" 2738","line":"    pub const OPTIONS = 4;"},
{"lineNum":" 2739","line":"    pub const ROUTER_ALERT = 5;"},
{"lineNum":" 2740","line":"    pub const RECVOPTS = 6;"},
{"lineNum":" 2741","line":"    pub const RETOPTS = 7;"},
{"lineNum":" 2742","line":"    pub const PKTINFO = 8;"},
{"lineNum":" 2743","line":"    pub const PKTOPTIONS = 9;"},
{"lineNum":" 2744","line":"    pub const PMTUDISC = 10;"},
{"lineNum":" 2745","line":"    pub const MTU_DISCOVER = 10;"},
{"lineNum":" 2746","line":"    pub const RECVERR = 11;"},
{"lineNum":" 2747","line":"    pub const RECVTTL = 12;"},
{"lineNum":" 2748","line":"    pub const RECVTOS = 13;"},
{"lineNum":" 2749","line":"    pub const MTU = 14;"},
{"lineNum":" 2750","line":"    pub const FREEBIND = 15;"},
{"lineNum":" 2751","line":"    pub const IPSEC_POLICY = 16;"},
{"lineNum":" 2752","line":"    pub const XFRM_POLICY = 17;"},
{"lineNum":" 2753","line":"    pub const PASSSEC = 18;"},
{"lineNum":" 2754","line":"    pub const TRANSPARENT = 19;"},
{"lineNum":" 2755","line":"    pub const ORIGDSTADDR = 20;"},
{"lineNum":" 2756","line":"    pub const RECVORIGDSTADDR = IP.ORIGDSTADDR;"},
{"lineNum":" 2757","line":"    pub const MINTTL = 21;"},
{"lineNum":" 2758","line":"    pub const NODEFRAG = 22;"},
{"lineNum":" 2759","line":"    pub const CHECKSUM = 23;"},
{"lineNum":" 2760","line":"    pub const BIND_ADDRESS_NO_PORT = 24;"},
{"lineNum":" 2761","line":"    pub const RECVFRAGSIZE = 25;"},
{"lineNum":" 2762","line":"    pub const MULTICAST_IF = 32;"},
{"lineNum":" 2763","line":"    pub const MULTICAST_TTL = 33;"},
{"lineNum":" 2764","line":"    pub const MULTICAST_LOOP = 34;"},
{"lineNum":" 2765","line":"    pub const ADD_MEMBERSHIP = 35;"},
{"lineNum":" 2766","line":"    pub const DROP_MEMBERSHIP = 36;"},
{"lineNum":" 2767","line":"    pub const UNBLOCK_SOURCE = 37;"},
{"lineNum":" 2768","line":"    pub const BLOCK_SOURCE = 38;"},
{"lineNum":" 2769","line":"    pub const ADD_SOURCE_MEMBERSHIP = 39;"},
{"lineNum":" 2770","line":"    pub const DROP_SOURCE_MEMBERSHIP = 40;"},
{"lineNum":" 2771","line":"    pub const MSFILTER = 41;"},
{"lineNum":" 2772","line":"    pub const MULTICAST_ALL = 49;"},
{"lineNum":" 2773","line":"    pub const UNICAST_IF = 50;"},
{"lineNum":" 2774","line":""},
{"lineNum":" 2775","line":"    pub const RECVRETOPTS = IP.RETOPTS;"},
{"lineNum":" 2776","line":""},
{"lineNum":" 2777","line":"    pub const PMTUDISC_DONT = 0;"},
{"lineNum":" 2778","line":"    pub const PMTUDISC_WANT = 1;"},
{"lineNum":" 2779","line":"    pub const PMTUDISC_DO = 2;"},
{"lineNum":" 2780","line":"    pub const PMTUDISC_PROBE = 3;"},
{"lineNum":" 2781","line":"    pub const PMTUDISC_INTERFACE = 4;"},
{"lineNum":" 2782","line":"    pub const PMTUDISC_OMIT = 5;"},
{"lineNum":" 2783","line":""},
{"lineNum":" 2784","line":"    pub const DEFAULT_MULTICAST_TTL = 1;"},
{"lineNum":" 2785","line":"    pub const DEFAULT_MULTICAST_LOOP = 1;"},
{"lineNum":" 2786","line":"    pub const MAX_MEMBERSHIPS = 20;"},
{"lineNum":" 2787","line":"};"},
{"lineNum":" 2788","line":""},
{"lineNum":" 2789","line":"/// IPv6 socket options"},
{"lineNum":" 2790","line":"pub const IPV6 = struct {"},
{"lineNum":" 2791","line":"    pub const ADDRFORM = 1;"},
{"lineNum":" 2792","line":"    pub const @\"2292PKTINFO\" = 2;"},
{"lineNum":" 2793","line":"    pub const @\"2292HOPOPTS\" = 3;"},
{"lineNum":" 2794","line":"    pub const @\"2292DSTOPTS\" = 4;"},
{"lineNum":" 2795","line":"    pub const @\"2292RTHDR\" = 5;"},
{"lineNum":" 2796","line":"    pub const @\"2292PKTOPTIONS\" = 6;"},
{"lineNum":" 2797","line":"    pub const CHECKSUM = 7;"},
{"lineNum":" 2798","line":"    pub const @\"2292HOPLIMIT\" = 8;"},
{"lineNum":" 2799","line":"    pub const NEXTHOP = 9;"},
{"lineNum":" 2800","line":"    pub const AUTHHDR = 10;"},
{"lineNum":" 2801","line":"    pub const FLOWINFO = 11;"},
{"lineNum":" 2802","line":""},
{"lineNum":" 2803","line":"    pub const UNICAST_HOPS = 16;"},
{"lineNum":" 2804","line":"    pub const MULTICAST_IF = 17;"},
{"lineNum":" 2805","line":"    pub const MULTICAST_HOPS = 18;"},
{"lineNum":" 2806","line":"    pub const MULTICAST_LOOP = 19;"},
{"lineNum":" 2807","line":"    pub const ADD_MEMBERSHIP = 20;"},
{"lineNum":" 2808","line":"    pub const DROP_MEMBERSHIP = 21;"},
{"lineNum":" 2809","line":"    pub const ROUTER_ALERT = 22;"},
{"lineNum":" 2810","line":"    pub const MTU_DISCOVER = 23;"},
{"lineNum":" 2811","line":"    pub const MTU = 24;"},
{"lineNum":" 2812","line":"    pub const RECVERR = 25;"},
{"lineNum":" 2813","line":"    pub const V6ONLY = 26;"},
{"lineNum":" 2814","line":"    pub const JOIN_ANYCAST = 27;"},
{"lineNum":" 2815","line":"    pub const LEAVE_ANYCAST = 28;"},
{"lineNum":" 2816","line":""},
{"lineNum":" 2817","line":"    // IPV6.MTU_DISCOVER values"},
{"lineNum":" 2818","line":"    pub const PMTUDISC_DONT = 0;"},
{"lineNum":" 2819","line":"    pub const PMTUDISC_WANT = 1;"},
{"lineNum":" 2820","line":"    pub const PMTUDISC_DO = 2;"},
{"lineNum":" 2821","line":"    pub const PMTUDISC_PROBE = 3;"},
{"lineNum":" 2822","line":"    pub const PMTUDISC_INTERFACE = 4;"},
{"lineNum":" 2823","line":"    pub const PMTUDISC_OMIT = 5;"},
{"lineNum":" 2824","line":""},
{"lineNum":" 2825","line":"    // Flowlabel"},
{"lineNum":" 2826","line":"    pub const FLOWLABEL_MGR = 32;"},
{"lineNum":" 2827","line":"    pub const FLOWINFO_SEND = 33;"},
{"lineNum":" 2828","line":"    pub const IPSEC_POLICY = 34;"},
{"lineNum":" 2829","line":"    pub const XFRM_POLICY = 35;"},
{"lineNum":" 2830","line":"    pub const HDRINCL = 36;"},
{"lineNum":" 2831","line":""},
{"lineNum":" 2832","line":"    // Advanced API (RFC3542) (1)"},
{"lineNum":" 2833","line":"    pub const RECVPKTINFO = 49;"},
{"lineNum":" 2834","line":"    pub const PKTINFO = 50;"},
{"lineNum":" 2835","line":"    pub const RECVHOPLIMIT = 51;"},
{"lineNum":" 2836","line":"    pub const HOPLIMIT = 52;"},
{"lineNum":" 2837","line":"    pub const RECVHOPOPTS = 53;"},
{"lineNum":" 2838","line":"    pub const HOPOPTS = 54;"},
{"lineNum":" 2839","line":"    pub const RTHDRDSTOPTS = 55;"},
{"lineNum":" 2840","line":"    pub const RECVRTHDR = 56;"},
{"lineNum":" 2841","line":"    pub const RTHDR = 57;"},
{"lineNum":" 2842","line":"    pub const RECVDSTOPTS = 58;"},
{"lineNum":" 2843","line":"    pub const DSTOPTS = 59;"},
{"lineNum":" 2844","line":"    pub const RECVPATHMTU = 60;"},
{"lineNum":" 2845","line":"    pub const PATHMTU = 61;"},
{"lineNum":" 2846","line":"    pub const DONTFRAG = 62;"},
{"lineNum":" 2847","line":""},
{"lineNum":" 2848","line":"    // Advanced API (RFC3542) (2)"},
{"lineNum":" 2849","line":"    pub const RECVTCLASS = 66;"},
{"lineNum":" 2850","line":"    pub const TCLASS = 67;"},
{"lineNum":" 2851","line":""},
{"lineNum":" 2852","line":"    pub const AUTOFLOWLABEL = 70;"},
{"lineNum":" 2853","line":""},
{"lineNum":" 2854","line":"    // RFC5014: Source address selection"},
{"lineNum":" 2855","line":"    pub const ADDR_PREFERENCES = 72;"},
{"lineNum":" 2856","line":""},
{"lineNum":" 2857","line":"    pub const PREFER_SRC_TMP = 0x0001;"},
{"lineNum":" 2858","line":"    pub const PREFER_SRC_PUBLIC = 0x0002;"},
{"lineNum":" 2859","line":"    pub const PREFER_SRC_PUBTMP_DEFAULT = 0x0100;"},
{"lineNum":" 2860","line":"    pub const PREFER_SRC_COA = 0x0004;"},
{"lineNum":" 2861","line":"    pub const PREFER_SRC_HOME = 0x0400;"},
{"lineNum":" 2862","line":"    pub const PREFER_SRC_CGA = 0x0008;"},
{"lineNum":" 2863","line":"    pub const PREFER_SRC_NONCGA = 0x0800;"},
{"lineNum":" 2864","line":""},
{"lineNum":" 2865","line":"    // RFC5082: Generalized Ttl Security Mechanism"},
{"lineNum":" 2866","line":"    pub const MINHOPCOUNT = 73;"},
{"lineNum":" 2867","line":""},
{"lineNum":" 2868","line":"    pub const ORIGDSTADDR = 74;"},
{"lineNum":" 2869","line":"    pub const RECVORIGDSTADDR = IPV6.ORIGDSTADDR;"},
{"lineNum":" 2870","line":"    pub const TRANSPARENT = 75;"},
{"lineNum":" 2871","line":"    pub const UNICAST_IF = 76;"},
{"lineNum":" 2872","line":"    pub const RECVFRAGSIZE = 77;"},
{"lineNum":" 2873","line":"    pub const FREEBIND = 78;"},
{"lineNum":" 2874","line":"};"},
{"lineNum":" 2875","line":""},
{"lineNum":" 2876","line":"pub const MSG = struct {"},
{"lineNum":" 2877","line":"    pub const OOB = 0x0001;"},
{"lineNum":" 2878","line":"    pub const PEEK = 0x0002;"},
{"lineNum":" 2879","line":"    pub const DONTROUTE = 0x0004;"},
{"lineNum":" 2880","line":"    pub const CTRUNC = 0x0008;"},
{"lineNum":" 2881","line":"    pub const PROXY = 0x0010;"},
{"lineNum":" 2882","line":"    pub const TRUNC = 0x0020;"},
{"lineNum":" 2883","line":"    pub const DONTWAIT = 0x0040;"},
{"lineNum":" 2884","line":"    pub const EOR = 0x0080;"},
{"lineNum":" 2885","line":"    pub const WAITALL = 0x0100;"},
{"lineNum":" 2886","line":"    pub const FIN = 0x0200;"},
{"lineNum":" 2887","line":"    pub const SYN = 0x0400;"},
{"lineNum":" 2888","line":"    pub const CONFIRM = 0x0800;"},
{"lineNum":" 2889","line":"    pub const RST = 0x1000;"},
{"lineNum":" 2890","line":"    pub const ERRQUEUE = 0x2000;"},
{"lineNum":" 2891","line":"    pub const NOSIGNAL = 0x4000;"},
{"lineNum":" 2892","line":"    pub const MORE = 0x8000;"},
{"lineNum":" 2893","line":"    pub const WAITFORONE = 0x10000;"},
{"lineNum":" 2894","line":"    pub const BATCH = 0x40000;"},
{"lineNum":" 2895","line":"    pub const ZEROCOPY = 0x4000000;"},
{"lineNum":" 2896","line":"    pub const FASTOPEN = 0x20000000;"},
{"lineNum":" 2897","line":"    pub const CMSG_CLOEXEC = 0x40000000;"},
{"lineNum":" 2898","line":"};"},
{"lineNum":" 2899","line":""},
{"lineNum":" 2900","line":"pub const DT = struct {"},
{"lineNum":" 2901","line":"    pub const UNKNOWN = 0;"},
{"lineNum":" 2902","line":"    pub const FIFO = 1;"},
{"lineNum":" 2903","line":"    pub const CHR = 2;"},
{"lineNum":" 2904","line":"    pub const DIR = 4;"},
{"lineNum":" 2905","line":"    pub const BLK = 6;"},
{"lineNum":" 2906","line":"    pub const REG = 8;"},
{"lineNum":" 2907","line":"    pub const LNK = 10;"},
{"lineNum":" 2908","line":"    pub const SOCK = 12;"},
{"lineNum":" 2909","line":"    pub const WHT = 14;"},
{"lineNum":" 2910","line":"};"},
{"lineNum":" 2911","line":""},
{"lineNum":" 2912","line":"pub const T = struct {"},
{"lineNum":" 2913","line":"    pub const CGETS = if (is_mips) 0x540D else 0x5401;"},
{"lineNum":" 2914","line":"    pub const CSETS = if (is_mips) 0x540e else 0x5402;"},
{"lineNum":" 2915","line":"    pub const CSETSW = if (is_mips) 0x540f else 0x5403;"},
{"lineNum":" 2916","line":"    pub const CSETSF = if (is_mips) 0x5410 else 0x5404;"},
{"lineNum":" 2917","line":"    pub const CGETA = if (is_mips) 0x5401 else 0x5405;"},
{"lineNum":" 2918","line":"    pub const CSETA = if (is_mips) 0x5402 else 0x5406;"},
{"lineNum":" 2919","line":"    pub const CSETAW = if (is_mips) 0x5403 else 0x5407;"},
{"lineNum":" 2920","line":"    pub const CSETAF = if (is_mips) 0x5404 else 0x5408;"},
{"lineNum":" 2921","line":"    pub const CSBRK = if (is_mips) 0x5405 else 0x5409;"},
{"lineNum":" 2922","line":"    pub const CXONC = if (is_mips) 0x5406 else 0x540A;"},
{"lineNum":" 2923","line":"    pub const CFLSH = if (is_mips) 0x5407 else 0x540B;"},
{"lineNum":" 2924","line":"    pub const IOCEXCL = if (is_mips) 0x740d else 0x540C;"},
{"lineNum":" 2925","line":"    pub const IOCNXCL = if (is_mips) 0x740e else 0x540D;"},
{"lineNum":" 2926","line":"    pub const IOCSCTTY = if (is_mips) 0x7472 else 0x540E;"},
{"lineNum":" 2927","line":"    pub const IOCGPGRP = if (is_mips) 0x5472 else 0x540F;"},
{"lineNum":" 2928","line":"    pub const IOCSPGRP = if (is_mips) 0x741d else 0x5410;"},
{"lineNum":" 2929","line":"    pub const IOCOUTQ = if (is_mips) 0x7472 else 0x5411;"},
{"lineNum":" 2930","line":"    pub const IOCSTI = if (is_mips) 0x5472 else 0x5412;"},
{"lineNum":" 2931","line":"    pub const IOCGWINSZ = if (is_mips or is_ppc64) 0x40087468 else 0x5413;"},
{"lineNum":" 2932","line":"    pub const IOCSWINSZ = if (is_mips or is_ppc64) 0x80087467 else 0x5414;"},
{"lineNum":" 2933","line":"    pub const IOCMGET = if (is_mips) 0x741d else 0x5415;"},
{"lineNum":" 2934","line":"    pub const IOCMBIS = if (is_mips) 0x741b else 0x5416;"},
{"lineNum":" 2935","line":"    pub const IOCMBIC = if (is_mips) 0x741c else 0x5417;"},
{"lineNum":" 2936","line":"    pub const IOCMSET = if (is_mips) 0x741a else 0x5418;"},
{"lineNum":" 2937","line":"    pub const IOCGSOFTCAR = if (is_mips) 0x5481 else 0x5419;"},
{"lineNum":" 2938","line":"    pub const IOCSSOFTCAR = if (is_mips) 0x5482 else 0x541A;"},
{"lineNum":" 2939","line":"    pub const FIONREAD = if (is_mips) 0x467F else 0x541B;"},
{"lineNum":" 2940","line":"    pub const IOCINQ = FIONREAD;"},
{"lineNum":" 2941","line":"    pub const IOCLINUX = if (is_mips) 0x5483 else 0x541C;"},
{"lineNum":" 2942","line":"    pub const IOCCONS = if (is_mips) IOCTL.IOW(\'t\', 120, c_int) else 0x541D;"},
{"lineNum":" 2943","line":"    pub const IOCGSERIAL = if (is_mips) 0x5484 else 0x541E;"},
{"lineNum":" 2944","line":"    pub const IOCSSERIAL = if (is_mips) 0x5485 else 0x541F;"},
{"lineNum":" 2945","line":"    pub const IOCPKT = if (is_mips) 0x5470 else 0x5420;"},
{"lineNum":" 2946","line":"    pub const FIONBIO = if (is_mips) 0x667e else 0x5421;"},
{"lineNum":" 2947","line":"    pub const IOCNOTTY = if (is_mips) 0x5471 else 0x5422;"},
{"lineNum":" 2948","line":"    pub const IOCSETD = if (is_mips) 0x7401 else 0x5423;"},
{"lineNum":" 2949","line":"    pub const IOCGETD = if (is_mips) 0x7400 else 0x5424;"},
{"lineNum":" 2950","line":"    pub const CSBRKP = if (is_mips) 0x5486 else 0x5425;"},
{"lineNum":" 2951","line":"    pub const IOCSBRK = 0x5427;"},
{"lineNum":" 2952","line":"    pub const IOCCBRK = 0x5428;"},
{"lineNum":" 2953","line":"    pub const IOCGSID = if (is_mips) 0x7416 else 0x5429;"},
{"lineNum":" 2954","line":"    pub const IOCGRS485 = 0x542E;"},
{"lineNum":" 2955","line":"    pub const IOCSRS485 = 0x542F;"},
{"lineNum":" 2956","line":"    pub const IOCGPTN = IOCTL.IOR(\'T\', 0x30, c_uint);"},
{"lineNum":" 2957","line":"    pub const IOCSPTLCK = IOCTL.IOW(\'T\', 0x31, c_int);"},
{"lineNum":" 2958","line":"    pub const IOCGDEV = IOCTL.IOR(\'T\', 0x32, c_uint);"},
{"lineNum":" 2959","line":"    pub const CGETX = 0x5432;"},
{"lineNum":" 2960","line":"    pub const CSETX = 0x5433;"},
{"lineNum":" 2961","line":"    pub const CSETXF = 0x5434;"},
{"lineNum":" 2962","line":"    pub const CSETXW = 0x5435;"},
{"lineNum":" 2963","line":"    pub const IOCSIG = IOCTL.IOW(\'T\', 0x36, c_int);"},
{"lineNum":" 2964","line":"    pub const IOCVHANGUP = 0x5437;"},
{"lineNum":" 2965","line":"    pub const IOCGPKT = IOCTL.IOR(\'T\', 0x38, c_int);"},
{"lineNum":" 2966","line":"    pub const IOCGPTLCK = IOCTL.IOR(\'T\', 0x39, c_int);"},
{"lineNum":" 2967","line":"    pub const IOCGEXCL = IOCTL.IOR(\'T\', 0x40, c_int);"},
{"lineNum":" 2968","line":"};"},
{"lineNum":" 2969","line":""},
{"lineNum":" 2970","line":"pub const EPOLL = struct {"},
{"lineNum":" 2971","line":"    pub const CLOEXEC = O.CLOEXEC;"},
{"lineNum":" 2972","line":""},
{"lineNum":" 2973","line":"    pub const CTL_ADD = 1;"},
{"lineNum":" 2974","line":"    pub const CTL_DEL = 2;"},
{"lineNum":" 2975","line":"    pub const CTL_MOD = 3;"},
{"lineNum":" 2976","line":""},
{"lineNum":" 2977","line":"    pub const IN = 0x001;"},
{"lineNum":" 2978","line":"    pub const PRI = 0x002;"},
{"lineNum":" 2979","line":"    pub const OUT = 0x004;"},
{"lineNum":" 2980","line":"    pub const RDNORM = 0x040;"},
{"lineNum":" 2981","line":"    pub const RDBAND = 0x080;"},
{"lineNum":" 2982","line":"    pub const WRNORM = if (is_mips) 0x004 else 0x100;"},
{"lineNum":" 2983","line":"    pub const WRBAND = if (is_mips) 0x100 else 0x200;"},
{"lineNum":" 2984","line":"    pub const MSG = 0x400;"},
{"lineNum":" 2985","line":"    pub const ERR = 0x008;"},
{"lineNum":" 2986","line":"    pub const HUP = 0x010;"},
{"lineNum":" 2987","line":"    pub const RDHUP = 0x2000;"},
{"lineNum":" 2988","line":"    pub const EXCLUSIVE = (@as(u32, 1) << 28);"},
{"lineNum":" 2989","line":"    pub const WAKEUP = (@as(u32, 1) << 29);"},
{"lineNum":" 2990","line":"    pub const ONESHOT = (@as(u32, 1) << 30);"},
{"lineNum":" 2991","line":"    pub const ET = (@as(u32, 1) << 31);"},
{"lineNum":" 2992","line":"};"},
{"lineNum":" 2993","line":""},
{"lineNum":" 2994","line":"pub const CLOCK = struct {"},
{"lineNum":" 2995","line":"    pub const REALTIME = 0;"},
{"lineNum":" 2996","line":"    pub const MONOTONIC = 1;"},
{"lineNum":" 2997","line":"    pub const PROCESS_CPUTIME_ID = 2;"},
{"lineNum":" 2998","line":"    pub const THREAD_CPUTIME_ID = 3;"},
{"lineNum":" 2999","line":"    pub const MONOTONIC_RAW = 4;"},
{"lineNum":" 3000","line":"    pub const REALTIME_COARSE = 5;"},
{"lineNum":" 3001","line":"    pub const MONOTONIC_COARSE = 6;"},
{"lineNum":" 3002","line":"    pub const BOOTTIME = 7;"},
{"lineNum":" 3003","line":"    pub const REALTIME_ALARM = 8;"},
{"lineNum":" 3004","line":"    pub const BOOTTIME_ALARM = 9;"},
{"lineNum":" 3005","line":"    pub const SGI_CYCLE = 10;"},
{"lineNum":" 3006","line":"    pub const TAI = 11;"},
{"lineNum":" 3007","line":"};"},
{"lineNum":" 3008","line":""},
{"lineNum":" 3009","line":"pub const CSIGNAL = 0x000000ff;"},
{"lineNum":" 3010","line":""},
{"lineNum":" 3011","line":"pub const CLONE = struct {"},
{"lineNum":" 3012","line":"    pub const VM = 0x00000100;"},
{"lineNum":" 3013","line":"    pub const FS = 0x00000200;"},
{"lineNum":" 3014","line":"    pub const FILES = 0x00000400;"},
{"lineNum":" 3015","line":"    pub const SIGHAND = 0x00000800;"},
{"lineNum":" 3016","line":"    pub const PIDFD = 0x00001000;"},
{"lineNum":" 3017","line":"    pub const PTRACE = 0x00002000;"},
{"lineNum":" 3018","line":"    pub const VFORK = 0x00004000;"},
{"lineNum":" 3019","line":"    pub const PARENT = 0x00008000;"},
{"lineNum":" 3020","line":"    pub const THREAD = 0x00010000;"},
{"lineNum":" 3021","line":"    pub const NEWNS = 0x00020000;"},
{"lineNum":" 3022","line":"    pub const SYSVSEM = 0x00040000;"},
{"lineNum":" 3023","line":"    pub const SETTLS = 0x00080000;"},
{"lineNum":" 3024","line":"    pub const PARENT_SETTID = 0x00100000;"},
{"lineNum":" 3025","line":"    pub const CHILD_CLEARTID = 0x00200000;"},
{"lineNum":" 3026","line":"    pub const DETACHED = 0x00400000;"},
{"lineNum":" 3027","line":"    pub const UNTRACED = 0x00800000;"},
{"lineNum":" 3028","line":"    pub const CHILD_SETTID = 0x01000000;"},
{"lineNum":" 3029","line":"    pub const NEWCGROUP = 0x02000000;"},
{"lineNum":" 3030","line":"    pub const NEWUTS = 0x04000000;"},
{"lineNum":" 3031","line":"    pub const NEWIPC = 0x08000000;"},
{"lineNum":" 3032","line":"    pub const NEWUSER = 0x10000000;"},
{"lineNum":" 3033","line":"    pub const NEWPID = 0x20000000;"},
{"lineNum":" 3034","line":"    pub const NEWNET = 0x40000000;"},
{"lineNum":" 3035","line":"    pub const IO = 0x80000000;"},
{"lineNum":" 3036","line":""},
{"lineNum":" 3037","line":"    // Flags for the clone3() syscall."},
{"lineNum":" 3038","line":""},
{"lineNum":" 3039","line":"    /// Clear any signal handler and reset to SIG_DFL."},
{"lineNum":" 3040","line":"    pub const CLEAR_SIGHAND = 0x100000000;"},
{"lineNum":" 3041","line":"    /// Clone into a specific cgroup given the right permissions."},
{"lineNum":" 3042","line":"    pub const INTO_CGROUP = 0x200000000;"},
{"lineNum":" 3043","line":""},
{"lineNum":" 3044","line":"    // cloning flags intersect with CSIGNAL so can be used with unshare and clone3 syscalls only."},
{"lineNum":" 3045","line":""},
{"lineNum":" 3046","line":"    /// New time namespace"},
{"lineNum":" 3047","line":"    pub const NEWTIME = 0x00000080;"},
{"lineNum":" 3048","line":"};"},
{"lineNum":" 3049","line":""},
{"lineNum":" 3050","line":"pub const EFD = struct {"},
{"lineNum":" 3051","line":"    pub const SEMAPHORE = 1;"},
{"lineNum":" 3052","line":"    pub const CLOEXEC = O.CLOEXEC;"},
{"lineNum":" 3053","line":"    pub const NONBLOCK = O.NONBLOCK;"},
{"lineNum":" 3054","line":"};"},
{"lineNum":" 3055","line":""},
{"lineNum":" 3056","line":"pub const MS = struct {"},
{"lineNum":" 3057","line":"    pub const RDONLY = 1;"},
{"lineNum":" 3058","line":"    pub const NOSUID = 2;"},
{"lineNum":" 3059","line":"    pub const NODEV = 4;"},
{"lineNum":" 3060","line":"    pub const NOEXEC = 8;"},
{"lineNum":" 3061","line":"    pub const SYNCHRONOUS = 16;"},
{"lineNum":" 3062","line":"    pub const REMOUNT = 32;"},
{"lineNum":" 3063","line":"    pub const MANDLOCK = 64;"},
{"lineNum":" 3064","line":"    pub const DIRSYNC = 128;"},
{"lineNum":" 3065","line":"    pub const NOATIME = 1024;"},
{"lineNum":" 3066","line":"    pub const NODIRATIME = 2048;"},
{"lineNum":" 3067","line":"    pub const BIND = 4096;"},
{"lineNum":" 3068","line":"    pub const MOVE = 8192;"},
{"lineNum":" 3069","line":"    pub const REC = 16384;"},
{"lineNum":" 3070","line":"    pub const SILENT = 32768;"},
{"lineNum":" 3071","line":"    pub const POSIXACL = (1 << 16);"},
{"lineNum":" 3072","line":"    pub const UNBINDABLE = (1 << 17);"},
{"lineNum":" 3073","line":"    pub const PRIVATE = (1 << 18);"},
{"lineNum":" 3074","line":"    pub const SLAVE = (1 << 19);"},
{"lineNum":" 3075","line":"    pub const SHARED = (1 << 20);"},
{"lineNum":" 3076","line":"    pub const RELATIME = (1 << 21);"},
{"lineNum":" 3077","line":"    pub const KERNMOUNT = (1 << 22);"},
{"lineNum":" 3078","line":"    pub const I_VERSION = (1 << 23);"},
{"lineNum":" 3079","line":"    pub const STRICTATIME = (1 << 24);"},
{"lineNum":" 3080","line":"    pub const LAZYTIME = (1 << 25);"},
{"lineNum":" 3081","line":"    pub const NOREMOTELOCK = (1 << 27);"},
{"lineNum":" 3082","line":"    pub const NOSEC = (1 << 28);"},
{"lineNum":" 3083","line":"    pub const BORN = (1 << 29);"},
{"lineNum":" 3084","line":"    pub const ACTIVE = (1 << 30);"},
{"lineNum":" 3085","line":"    pub const NOUSER = (1 << 31);"},
{"lineNum":" 3086","line":""},
{"lineNum":" 3087","line":"    pub const RMT_MASK = (RDONLY | SYNCHRONOUS | MANDLOCK | I_VERSION | LAZYTIME);"},
{"lineNum":" 3088","line":""},
{"lineNum":" 3089","line":"    pub const MGC_VAL = 0xc0ed0000;"},
{"lineNum":" 3090","line":"    pub const MGC_MSK = 0xffff0000;"},
{"lineNum":" 3091","line":"};"},
{"lineNum":" 3092","line":""},
{"lineNum":" 3093","line":"pub const MNT = struct {"},
{"lineNum":" 3094","line":"    pub const FORCE = 1;"},
{"lineNum":" 3095","line":"    pub const DETACH = 2;"},
{"lineNum":" 3096","line":"    pub const EXPIRE = 4;"},
{"lineNum":" 3097","line":"};"},
{"lineNum":" 3098","line":""},
{"lineNum":" 3099","line":"pub const UMOUNT_NOFOLLOW = 8;"},
{"lineNum":" 3100","line":""},
{"lineNum":" 3101","line":"pub const IN = struct {"},
{"lineNum":" 3102","line":"    pub const CLOEXEC = O.CLOEXEC;"},
{"lineNum":" 3103","line":"    pub const NONBLOCK = O.NONBLOCK;"},
{"lineNum":" 3104","line":""},
{"lineNum":" 3105","line":"    pub const ACCESS = 0x00000001;"},
{"lineNum":" 3106","line":"    pub const MODIFY = 0x00000002;"},
{"lineNum":" 3107","line":"    pub const ATTRIB = 0x00000004;"},
{"lineNum":" 3108","line":"    pub const CLOSE_WRITE = 0x00000008;"},
{"lineNum":" 3109","line":"    pub const CLOSE_NOWRITE = 0x00000010;"},
{"lineNum":" 3110","line":"    pub const CLOSE = CLOSE_WRITE | CLOSE_NOWRITE;"},
{"lineNum":" 3111","line":"    pub const OPEN = 0x00000020;"},
{"lineNum":" 3112","line":"    pub const MOVED_FROM = 0x00000040;"},
{"lineNum":" 3113","line":"    pub const MOVED_TO = 0x00000080;"},
{"lineNum":" 3114","line":"    pub const MOVE = MOVED_FROM | MOVED_TO;"},
{"lineNum":" 3115","line":"    pub const CREATE = 0x00000100;"},
{"lineNum":" 3116","line":"    pub const DELETE = 0x00000200;"},
{"lineNum":" 3117","line":"    pub const DELETE_SELF = 0x00000400;"},
{"lineNum":" 3118","line":"    pub const MOVE_SELF = 0x00000800;"},
{"lineNum":" 3119","line":"    pub const ALL_EVENTS = 0x00000fff;"},
{"lineNum":" 3120","line":""},
{"lineNum":" 3121","line":"    pub const UNMOUNT = 0x00002000;"},
{"lineNum":" 3122","line":"    pub const Q_OVERFLOW = 0x00004000;"},
{"lineNum":" 3123","line":"    pub const IGNORED = 0x00008000;"},
{"lineNum":" 3124","line":""},
{"lineNum":" 3125","line":"    pub const ONLYDIR = 0x01000000;"},
{"lineNum":" 3126","line":"    pub const DONT_FOLLOW = 0x02000000;"},
{"lineNum":" 3127","line":"    pub const EXCL_UNLINK = 0x04000000;"},
{"lineNum":" 3128","line":"    pub const MASK_CREATE = 0x10000000;"},
{"lineNum":" 3129","line":"    pub const MASK_ADD = 0x20000000;"},
{"lineNum":" 3130","line":""},
{"lineNum":" 3131","line":"    pub const ISDIR = 0x40000000;"},
{"lineNum":" 3132","line":"    pub const ONESHOT = 0x80000000;"},
{"lineNum":" 3133","line":"};"},
{"lineNum":" 3134","line":""},
{"lineNum":" 3135","line":"pub const S = struct {"},
{"lineNum":" 3136","line":"    pub const IFMT = 0o170000;"},
{"lineNum":" 3137","line":""},
{"lineNum":" 3138","line":"    pub const IFDIR = 0o040000;"},
{"lineNum":" 3139","line":"    pub const IFCHR = 0o020000;"},
{"lineNum":" 3140","line":"    pub const IFBLK = 0o060000;"},
{"lineNum":" 3141","line":"    pub const IFREG = 0o100000;"},
{"lineNum":" 3142","line":"    pub const IFIFO = 0o010000;"},
{"lineNum":" 3143","line":"    pub const IFLNK = 0o120000;"},
{"lineNum":" 3144","line":"    pub const IFSOCK = 0o140000;"},
{"lineNum":" 3145","line":""},
{"lineNum":" 3146","line":"    pub const ISUID = 0o4000;"},
{"lineNum":" 3147","line":"    pub const ISGID = 0o2000;"},
{"lineNum":" 3148","line":"    pub const ISVTX = 0o1000;"},
{"lineNum":" 3149","line":"    pub const IRUSR = 0o400;"},
{"lineNum":" 3150","line":"    pub const IWUSR = 0o200;"},
{"lineNum":" 3151","line":"    pub const IXUSR = 0o100;"},
{"lineNum":" 3152","line":"    pub const IRWXU = 0o700;"},
{"lineNum":" 3153","line":"    pub const IRGRP = 0o040;"},
{"lineNum":" 3154","line":"    pub const IWGRP = 0o020;"},
{"lineNum":" 3155","line":"    pub const IXGRP = 0o010;"},
{"lineNum":" 3156","line":"    pub const IRWXG = 0o070;"},
{"lineNum":" 3157","line":"    pub const IROTH = 0o004;"},
{"lineNum":" 3158","line":"    pub const IWOTH = 0o002;"},
{"lineNum":" 3159","line":"    pub const IXOTH = 0o001;"},
{"lineNum":" 3160","line":"    pub const IRWXO = 0o007;"},
{"lineNum":" 3161","line":""},
{"lineNum":" 3162","line":"    pub fn ISREG(m: mode_t) bool {"},
{"lineNum":" 3163","line":"        return m & IFMT == IFREG;"},
{"lineNum":" 3164","line":"    }"},
{"lineNum":" 3165","line":""},
{"lineNum":" 3166","line":"    pub fn ISDIR(m: mode_t) bool {"},
{"lineNum":" 3167","line":"        return m & IFMT == IFDIR;"},
{"lineNum":" 3168","line":"    }"},
{"lineNum":" 3169","line":""},
{"lineNum":" 3170","line":"    pub fn ISCHR(m: mode_t) bool {"},
{"lineNum":" 3171","line":"        return m & IFMT == IFCHR;"},
{"lineNum":" 3172","line":"    }"},
{"lineNum":" 3173","line":""},
{"lineNum":" 3174","line":"    pub fn ISBLK(m: mode_t) bool {"},
{"lineNum":" 3175","line":"        return m & IFMT == IFBLK;"},
{"lineNum":" 3176","line":"    }"},
{"lineNum":" 3177","line":""},
{"lineNum":" 3178","line":"    pub fn ISFIFO(m: mode_t) bool {"},
{"lineNum":" 3179","line":"        return m & IFMT == IFIFO;"},
{"lineNum":" 3180","line":"    }"},
{"lineNum":" 3181","line":""},
{"lineNum":" 3182","line":"    pub fn ISLNK(m: mode_t) bool {"},
{"lineNum":" 3183","line":"        return m & IFMT == IFLNK;"},
{"lineNum":" 3184","line":"    }"},
{"lineNum":" 3185","line":""},
{"lineNum":" 3186","line":"    pub fn ISSOCK(m: mode_t) bool {"},
{"lineNum":" 3187","line":"        return m & IFMT == IFSOCK;"},
{"lineNum":" 3188","line":"    }"},
{"lineNum":" 3189","line":"};"},
{"lineNum":" 3190","line":""},
{"lineNum":" 3191","line":"pub const UTIME = struct {"},
{"lineNum":" 3192","line":"    pub const NOW = 0x3fffffff;"},
{"lineNum":" 3193","line":"    pub const OMIT = 0x3ffffffe;"},
{"lineNum":" 3194","line":"};"},
{"lineNum":" 3195","line":""},
{"lineNum":" 3196","line":"pub const TFD = struct {"},
{"lineNum":" 3197","line":"    pub const NONBLOCK = O.NONBLOCK;"},
{"lineNum":" 3198","line":"    pub const CLOEXEC = O.CLOEXEC;"},
{"lineNum":" 3199","line":""},
{"lineNum":" 3200","line":"    pub const TIMER_ABSTIME = 1;"},
{"lineNum":" 3201","line":"    pub const TIMER_CANCEL_ON_SET = (1 << 1);"},
{"lineNum":" 3202","line":"};"},
{"lineNum":" 3203","line":""},
{"lineNum":" 3204","line":"pub const winsize = extern struct {"},
{"lineNum":" 3205","line":"    ws_row: u16,"},
{"lineNum":" 3206","line":"    ws_col: u16,"},
{"lineNum":" 3207","line":"    ws_xpixel: u16,"},
{"lineNum":" 3208","line":"    ws_ypixel: u16,"},
{"lineNum":" 3209","line":"};"},
{"lineNum":" 3210","line":""},
{"lineNum":" 3211","line":"/// NSIG is the total number of signals defined."},
{"lineNum":" 3212","line":"/// As signal numbers are sequential, NSIG is one greater than the largest defined signal number."},
{"lineNum":" 3213","line":"pub const NSIG = if (is_mips) 128 else 65;"},
{"lineNum":" 3214","line":""},
{"lineNum":" 3215","line":"pub const sigset_t = [1024 / 32]u32;"},
{"lineNum":" 3216","line":""},
{"lineNum":" 3217","line":"pub const all_mask: sigset_t = [_]u32{0xffffffff} ** @typeInfo(sigset_t).Array.len;"},
{"lineNum":" 3218","line":"pub const app_mask: sigset_t = [2]u32{ 0xfffffffc, 0x7fffffff } ++ [_]u32{0xffffffff} ** 30;"},
{"lineNum":" 3219","line":""},
{"lineNum":" 3220","line":"const k_sigaction_funcs = struct {"},
{"lineNum":" 3221","line":"    const handler = ?*const fn (c_int) align(1) callconv(.C) void;"},
{"lineNum":" 3222","line":"    const restorer = *const fn () callconv(.C) void;"},
{"lineNum":" 3223","line":"};"},
{"lineNum":" 3224","line":""},
{"lineNum":" 3225","line":"pub const k_sigaction = switch (native_arch) {"},
{"lineNum":" 3226","line":"    .mips, .mipsel => extern struct {"},
{"lineNum":" 3227","line":"        flags: c_uint,"},
{"lineNum":" 3228","line":"        handler: k_sigaction_funcs.handler,"},
{"lineNum":" 3229","line":"        mask: [4]c_ulong,"},
{"lineNum":" 3230","line":"        restorer: k_sigaction_funcs.restorer,"},
{"lineNum":" 3231","line":"    },"},
{"lineNum":" 3232","line":"    .mips64, .mips64el => extern struct {"},
{"lineNum":" 3233","line":"        flags: c_uint,"},
{"lineNum":" 3234","line":"        handler: k_sigaction_funcs.handler,"},
{"lineNum":" 3235","line":"        mask: [2]c_ulong,"},
{"lineNum":" 3236","line":"        restorer: k_sigaction_funcs.restorer,"},
{"lineNum":" 3237","line":"    },"},
{"lineNum":" 3238","line":"    else => extern struct {"},
{"lineNum":" 3239","line":"        handler: k_sigaction_funcs.handler,"},
{"lineNum":" 3240","line":"        flags: c_ulong,"},
{"lineNum":" 3241","line":"        restorer: k_sigaction_funcs.restorer,"},
{"lineNum":" 3242","line":"        mask: [2]c_uint,"},
{"lineNum":" 3243","line":"    },"},
{"lineNum":" 3244","line":"};"},
{"lineNum":" 3245","line":""},
{"lineNum":" 3246","line":"/// Renamed from `sigaction` to `Sigaction` to avoid conflict with the syscall."},
{"lineNum":" 3247","line":"pub const Sigaction = extern struct {"},
{"lineNum":" 3248","line":"    pub const handler_fn = *const fn (c_int) align(1) callconv(.C) void;"},
{"lineNum":" 3249","line":"    pub const sigaction_fn = *const fn (c_int, *const siginfo_t, ?*const anyopaque) callconv(.C) void;"},
{"lineNum":" 3250","line":""},
{"lineNum":" 3251","line":"    handler: extern union {"},
{"lineNum":" 3252","line":"        handler: ?handler_fn,"},
{"lineNum":" 3253","line":"        sigaction: ?sigaction_fn,"},
{"lineNum":" 3254","line":"    },"},
{"lineNum":" 3255","line":"    mask: sigset_t,"},
{"lineNum":" 3256","line":"    flags: c_uint,"},
{"lineNum":" 3257","line":"    restorer: ?*const fn () callconv(.C) void = null,"},
{"lineNum":" 3258","line":"};"},
{"lineNum":" 3259","line":""},
{"lineNum":" 3260","line":"pub const empty_sigset = [_]u32{0} ** @typeInfo(sigset_t).Array.len;"},
{"lineNum":" 3261","line":""},
{"lineNum":" 3262","line":"pub const SFD = struct {"},
{"lineNum":" 3263","line":"    pub const CLOEXEC = O.CLOEXEC;"},
{"lineNum":" 3264","line":"    pub const NONBLOCK = O.NONBLOCK;"},
{"lineNum":" 3265","line":"};"},
{"lineNum":" 3266","line":""},
{"lineNum":" 3267","line":"pub const signalfd_siginfo = extern struct {"},
{"lineNum":" 3268","line":"    signo: u32,"},
{"lineNum":" 3269","line":"    errno: i32,"},
{"lineNum":" 3270","line":"    code: i32,"},
{"lineNum":" 3271","line":"    pid: u32,"},
{"lineNum":" 3272","line":"    uid: uid_t,"},
{"lineNum":" 3273","line":"    fd: i32,"},
{"lineNum":" 3274","line":"    tid: u32,"},
{"lineNum":" 3275","line":"    band: u32,"},
{"lineNum":" 3276","line":"    overrun: u32,"},
{"lineNum":" 3277","line":"    trapno: u32,"},
{"lineNum":" 3278","line":"    status: i32,"},
{"lineNum":" 3279","line":"    int: i32,"},
{"lineNum":" 3280","line":"    ptr: u64,"},
{"lineNum":" 3281","line":"    utime: u64,"},
{"lineNum":" 3282","line":"    stime: u64,"},
{"lineNum":" 3283","line":"    addr: u64,"},
{"lineNum":" 3284","line":"    addr_lsb: u16,"},
{"lineNum":" 3285","line":"    __pad2: u16,"},
{"lineNum":" 3286","line":"    syscall: i32,"},
{"lineNum":" 3287","line":"    call_addr: u64,"},
{"lineNum":" 3288","line":"    native_arch: u32,"},
{"lineNum":" 3289","line":"    __pad: [28]u8,"},
{"lineNum":" 3290","line":"};"},
{"lineNum":" 3291","line":""},
{"lineNum":" 3292","line":"pub const in_port_t = u16;"},
{"lineNum":" 3293","line":"pub const sa_family_t = u16;"},
{"lineNum":" 3294","line":"pub const socklen_t = u32;"},
{"lineNum":" 3295","line":""},
{"lineNum":" 3296","line":"pub const sockaddr = extern struct {"},
{"lineNum":" 3297","line":"    family: sa_family_t,"},
{"lineNum":" 3298","line":"    data: [14]u8,"},
{"lineNum":" 3299","line":""},
{"lineNum":" 3300","line":"    pub const SS_MAXSIZE = 128;"},
{"lineNum":" 3301","line":"    pub const storage = extern struct {"},
{"lineNum":" 3302","line":"        family: sa_family_t align(8),"},
{"lineNum":" 3303","line":"        padding: [SS_MAXSIZE - @sizeOf(sa_family_t)]u8 = undefined,"},
{"lineNum":" 3304","line":""},
{"lineNum":" 3305","line":"        comptime {"},
{"lineNum":" 3306","line":"            assert(@sizeOf(storage) == SS_MAXSIZE);"},
{"lineNum":" 3307","line":"            assert(@alignOf(storage) == 8);"},
{"lineNum":" 3308","line":"        }"},
{"lineNum":" 3309","line":"    };"},
{"lineNum":" 3310","line":""},
{"lineNum":" 3311","line":"    /// IPv4 socket address"},
{"lineNum":" 3312","line":"    pub const in = extern struct {"},
{"lineNum":" 3313","line":"        family: sa_family_t = AF.INET,"},
{"lineNum":" 3314","line":"        port: in_port_t,"},
{"lineNum":" 3315","line":"        addr: u32,"},
{"lineNum":" 3316","line":"        zero: [8]u8 = [8]u8{ 0, 0, 0, 0, 0, 0, 0, 0 },"},
{"lineNum":" 3317","line":"    };"},
{"lineNum":" 3318","line":""},
{"lineNum":" 3319","line":"    /// IPv6 socket address"},
{"lineNum":" 3320","line":"    pub const in6 = extern struct {"},
{"lineNum":" 3321","line":"        family: sa_family_t = AF.INET6,"},
{"lineNum":" 3322","line":"        port: in_port_t,"},
{"lineNum":" 3323","line":"        flowinfo: u32,"},
{"lineNum":" 3324","line":"        addr: [16]u8,"},
{"lineNum":" 3325","line":"        scope_id: u32,"},
{"lineNum":" 3326","line":"    };"},
{"lineNum":" 3327","line":""},
{"lineNum":" 3328","line":"    /// UNIX domain socket address"},
{"lineNum":" 3329","line":"    pub const un = extern struct {"},
{"lineNum":" 3330","line":"        family: sa_family_t = AF.UNIX,"},
{"lineNum":" 3331","line":"        path: [108]u8,"},
{"lineNum":" 3332","line":"    };"},
{"lineNum":" 3333","line":""},
{"lineNum":" 3334","line":"    /// Packet socket address"},
{"lineNum":" 3335","line":"    pub const ll = extern struct {"},
{"lineNum":" 3336","line":"        family: sa_family_t = AF.PACKET,"},
{"lineNum":" 3337","line":"        protocol: u16,"},
{"lineNum":" 3338","line":"        ifindex: i32,"},
{"lineNum":" 3339","line":"        hatype: u16,"},
{"lineNum":" 3340","line":"        pkttype: u8,"},
{"lineNum":" 3341","line":"        halen: u8,"},
{"lineNum":" 3342","line":"        addr: [8]u8,"},
{"lineNum":" 3343","line":"    };"},
{"lineNum":" 3344","line":""},
{"lineNum":" 3345","line":"    /// Netlink socket address"},
{"lineNum":" 3346","line":"    pub const nl = extern struct {"},
{"lineNum":" 3347","line":"        family: sa_family_t = AF.NETLINK,"},
{"lineNum":" 3348","line":"        __pad1: c_ushort = 0,"},
{"lineNum":" 3349","line":""},
{"lineNum":" 3350","line":"        /// port ID"},
{"lineNum":" 3351","line":"        pid: u32,"},
{"lineNum":" 3352","line":""},
{"lineNum":" 3353","line":"        /// multicast groups mask"},
{"lineNum":" 3354","line":"        groups: u32,"},
{"lineNum":" 3355","line":"    };"},
{"lineNum":" 3356","line":""},
{"lineNum":" 3357","line":"    pub const xdp = extern struct {"},
{"lineNum":" 3358","line":"        family: u16 = AF.XDP,"},
{"lineNum":" 3359","line":"        flags: u16,"},
{"lineNum":" 3360","line":"        ifindex: u32,"},
{"lineNum":" 3361","line":"        queue_id: u32,"},
{"lineNum":" 3362","line":"        shared_umem_fd: u32,"},
{"lineNum":" 3363","line":"    };"},
{"lineNum":" 3364","line":""},
{"lineNum":" 3365","line":"    /// Address structure for vSockets"},
{"lineNum":" 3366","line":"    pub const vm = extern struct {"},
{"lineNum":" 3367","line":"        family: sa_family_t = AF.VSOCK,"},
{"lineNum":" 3368","line":"        reserved1: u16 = 0,"},
{"lineNum":" 3369","line":"        port: u32,"},
{"lineNum":" 3370","line":"        cid: u32,"},
{"lineNum":" 3371","line":"        flags: u8,"},
{"lineNum":" 3372","line":""},
{"lineNum":" 3373","line":"        /// The total size of this structure should be exactly the same as that of struct sockaddr."},
{"lineNum":" 3374","line":"        zero: [3]u8 = [_]u8{0} ** 3,"},
{"lineNum":" 3375","line":"        comptime {"},
{"lineNum":" 3376","line":"            std.debug.assert(@sizeOf(vm) == @sizeOf(sockaddr));"},
{"lineNum":" 3377","line":"        }"},
{"lineNum":" 3378","line":"    };"},
{"lineNum":" 3379","line":"};"},
{"lineNum":" 3380","line":""},
{"lineNum":" 3381","line":"pub const mmsghdr = extern struct {"},
{"lineNum":" 3382","line":"    msg_hdr: msghdr,"},
{"lineNum":" 3383","line":"    msg_len: u32,"},
{"lineNum":" 3384","line":"};"},
{"lineNum":" 3385","line":""},
{"lineNum":" 3386","line":"pub const mmsghdr_const = extern struct {"},
{"lineNum":" 3387","line":"    msg_hdr: msghdr_const,"},
{"lineNum":" 3388","line":"    msg_len: u32,"},
{"lineNum":" 3389","line":"};"},
{"lineNum":" 3390","line":""},
{"lineNum":" 3391","line":"pub const epoll_data = extern union {"},
{"lineNum":" 3392","line":"    ptr: usize,"},
{"lineNum":" 3393","line":"    fd: i32,"},
{"lineNum":" 3394","line":"    u32: u32,"},
{"lineNum":" 3395","line":"    u64: u64,"},
{"lineNum":" 3396","line":"};"},
{"lineNum":" 3397","line":""},
{"lineNum":" 3398","line":"pub const epoll_event = extern struct {"},
{"lineNum":" 3399","line":"    events: u32,"},
{"lineNum":" 3400","line":"    data: epoll_data align(switch (native_arch) {"},
{"lineNum":" 3401","line":"        .x86_64 => 4,"},
{"lineNum":" 3402","line":"        else => @alignOf(epoll_data),"},
{"lineNum":" 3403","line":"    }),"},
{"lineNum":" 3404","line":"};"},
{"lineNum":" 3405","line":""},
{"lineNum":" 3406","line":"pub const VFS_CAP_REVISION_MASK = 0xFF000000;"},
{"lineNum":" 3407","line":"pub const VFS_CAP_REVISION_SHIFT = 24;"},
{"lineNum":" 3408","line":"pub const VFS_CAP_FLAGS_MASK = ~VFS_CAP_REVISION_MASK;"},
{"lineNum":" 3409","line":"pub const VFS_CAP_FLAGS_EFFECTIVE = 0x000001;"},
{"lineNum":" 3410","line":""},
{"lineNum":" 3411","line":"pub const VFS_CAP_REVISION_1 = 0x01000000;"},
{"lineNum":" 3412","line":"pub const VFS_CAP_U32_1 = 1;"},
{"lineNum":" 3413","line":"pub const XATTR_CAPS_SZ_1 = @sizeOf(u32) * (1 + 2 * VFS_CAP_U32_1);"},
{"lineNum":" 3414","line":""},
{"lineNum":" 3415","line":"pub const VFS_CAP_REVISION_2 = 0x02000000;"},
{"lineNum":" 3416","line":"pub const VFS_CAP_U32_2 = 2;"},
{"lineNum":" 3417","line":"pub const XATTR_CAPS_SZ_2 = @sizeOf(u32) * (1 + 2 * VFS_CAP_U32_2);"},
{"lineNum":" 3418","line":""},
{"lineNum":" 3419","line":"pub const XATTR_CAPS_SZ = XATTR_CAPS_SZ_2;"},
{"lineNum":" 3420","line":"pub const VFS_CAP_U32 = VFS_CAP_U32_2;"},
{"lineNum":" 3421","line":"pub const VFS_CAP_REVISION = VFS_CAP_REVISION_2;"},
{"lineNum":" 3422","line":""},
{"lineNum":" 3423","line":"pub const vfs_cap_data = extern struct {"},
{"lineNum":" 3424","line":"    //all of these are mandated as little endian"},
{"lineNum":" 3425","line":"    //when on disk."},
{"lineNum":" 3426","line":"    const Data = struct {"},
{"lineNum":" 3427","line":"        permitted: u32,"},
{"lineNum":" 3428","line":"        inheritable: u32,"},
{"lineNum":" 3429","line":"    };"},
{"lineNum":" 3430","line":""},
{"lineNum":" 3431","line":"    magic_etc: u32,"},
{"lineNum":" 3432","line":"    data: [VFS_CAP_U32]Data,"},
{"lineNum":" 3433","line":"};"},
{"lineNum":" 3434","line":""},
{"lineNum":" 3435","line":"pub const CAP = struct {"},
{"lineNum":" 3436","line":"    pub const CHOWN = 0;"},
{"lineNum":" 3437","line":"    pub const DAC_OVERRIDE = 1;"},
{"lineNum":" 3438","line":"    pub const DAC_READ_SEARCH = 2;"},
{"lineNum":" 3439","line":"    pub const FOWNER = 3;"},
{"lineNum":" 3440","line":"    pub const FSETID = 4;"},
{"lineNum":" 3441","line":"    pub const KILL = 5;"},
{"lineNum":" 3442","line":"    pub const SETGID = 6;"},
{"lineNum":" 3443","line":"    pub const SETUID = 7;"},
{"lineNum":" 3444","line":"    pub const SETPCAP = 8;"},
{"lineNum":" 3445","line":"    pub const LINUX_IMMUTABLE = 9;"},
{"lineNum":" 3446","line":"    pub const NET_BIND_SERVICE = 10;"},
{"lineNum":" 3447","line":"    pub const NET_BROADCAST = 11;"},
{"lineNum":" 3448","line":"    pub const NET_ADMIN = 12;"},
{"lineNum":" 3449","line":"    pub const NET_RAW = 13;"},
{"lineNum":" 3450","line":"    pub const IPC_LOCK = 14;"},
{"lineNum":" 3451","line":"    pub const IPC_OWNER = 15;"},
{"lineNum":" 3452","line":"    pub const SYS_MODULE = 16;"},
{"lineNum":" 3453","line":"    pub const SYS_RAWIO = 17;"},
{"lineNum":" 3454","line":"    pub const SYS_CHROOT = 18;"},
{"lineNum":" 3455","line":"    pub const SYS_PTRACE = 19;"},
{"lineNum":" 3456","line":"    pub const SYS_PACCT = 20;"},
{"lineNum":" 3457","line":"    pub const SYS_ADMIN = 21;"},
{"lineNum":" 3458","line":"    pub const SYS_BOOT = 22;"},
{"lineNum":" 3459","line":"    pub const SYS_NICE = 23;"},
{"lineNum":" 3460","line":"    pub const SYS_RESOURCE = 24;"},
{"lineNum":" 3461","line":"    pub const SYS_TIME = 25;"},
{"lineNum":" 3462","line":"    pub const SYS_TTY_CONFIG = 26;"},
{"lineNum":" 3463","line":"    pub const MKNOD = 27;"},
{"lineNum":" 3464","line":"    pub const LEASE = 28;"},
{"lineNum":" 3465","line":"    pub const AUDIT_WRITE = 29;"},
{"lineNum":" 3466","line":"    pub const AUDIT_CONTROL = 30;"},
{"lineNum":" 3467","line":"    pub const SETFCAP = 31;"},
{"lineNum":" 3468","line":"    pub const MAC_OVERRIDE = 32;"},
{"lineNum":" 3469","line":"    pub const MAC_ADMIN = 33;"},
{"lineNum":" 3470","line":"    pub const SYSLOG = 34;"},
{"lineNum":" 3471","line":"    pub const WAKE_ALARM = 35;"},
{"lineNum":" 3472","line":"    pub const BLOCK_SUSPEND = 36;"},
{"lineNum":" 3473","line":"    pub const AUDIT_READ = 37;"},
{"lineNum":" 3474","line":"    pub const PERFMON = 38;"},
{"lineNum":" 3475","line":"    pub const BPF = 39;"},
{"lineNum":" 3476","line":"    pub const CHECKPOINT_RESTORE = 40;"},
{"lineNum":" 3477","line":"    pub const LAST_CAP = CHECKPOINT_RESTORE;"},
{"lineNum":" 3478","line":""},
{"lineNum":" 3479","line":"    pub fn valid(x: u8) bool {"},
{"lineNum":" 3480","line":"        return x >= 0 and x <= LAST_CAP;"},
{"lineNum":" 3481","line":"    }"},
{"lineNum":" 3482","line":""},
{"lineNum":" 3483","line":"    pub fn TO_MASK(cap: u8) u32 {"},
{"lineNum":" 3484","line":"        return @as(u32, 1) << @as(u5, @intCast(cap & 31));"},
{"lineNum":" 3485","line":"    }"},
{"lineNum":" 3486","line":""},
{"lineNum":" 3487","line":"    pub fn TO_INDEX(cap: u8) u8 {"},
{"lineNum":" 3488","line":"        return cap >> 5;"},
{"lineNum":" 3489","line":"    }"},
{"lineNum":" 3490","line":"};"},
{"lineNum":" 3491","line":""},
{"lineNum":" 3492","line":"pub const cap_t = extern struct {"},
{"lineNum":" 3493","line":"    hdrp: *cap_user_header_t,"},
{"lineNum":" 3494","line":"    datap: *cap_user_data_t,"},
{"lineNum":" 3495","line":"};"},
{"lineNum":" 3496","line":""},
{"lineNum":" 3497","line":"pub const cap_user_header_t = extern struct {"},
{"lineNum":" 3498","line":"    version: u32,"},
{"lineNum":" 3499","line":"    pid: usize,"},
{"lineNum":" 3500","line":"};"},
{"lineNum":" 3501","line":""},
{"lineNum":" 3502","line":"pub const cap_user_data_t = extern struct {"},
{"lineNum":" 3503","line":"    effective: u32,"},
{"lineNum":" 3504","line":"    permitted: u32,"},
{"lineNum":" 3505","line":"    inheritable: u32,"},
{"lineNum":" 3506","line":"};"},
{"lineNum":" 3507","line":""},
{"lineNum":" 3508","line":"pub const inotify_event = extern struct {"},
{"lineNum":" 3509","line":"    wd: i32,"},
{"lineNum":" 3510","line":"    mask: u32,"},
{"lineNum":" 3511","line":"    cookie: u32,"},
{"lineNum":" 3512","line":"    len: u32,"},
{"lineNum":" 3513","line":"    //name: [?]u8,"},
{"lineNum":" 3514","line":"};"},
{"lineNum":" 3515","line":""},
{"lineNum":" 3516","line":"pub const dirent64 = extern struct {"},
{"lineNum":" 3517","line":"    d_ino: u64,"},
{"lineNum":" 3518","line":"    d_off: u64,"},
{"lineNum":" 3519","line":"    d_reclen: u16,"},
{"lineNum":" 3520","line":"    d_type: u8,"},
{"lineNum":" 3521","line":"    d_name: u8, // field address is the address of first byte of name https://github.com/ziglang/zig/issues/173"},
{"lineNum":" 3522","line":""},
{"lineNum":" 3523","line":"    pub fn reclen(self: dirent64) u16 {"},
{"lineNum":" 3524","line":"        return self.d_reclen;"},
{"lineNum":" 3525","line":"    }"},
{"lineNum":" 3526","line":"};"},
{"lineNum":" 3527","line":""},
{"lineNum":" 3528","line":"pub const dl_phdr_info = extern struct {"},
{"lineNum":" 3529","line":"    dlpi_addr: usize,"},
{"lineNum":" 3530","line":"    dlpi_name: ?[*:0]const u8,"},
{"lineNum":" 3531","line":"    dlpi_phdr: [*]std.elf.Phdr,"},
{"lineNum":" 3532","line":"    dlpi_phnum: u16,"},
{"lineNum":" 3533","line":"};"},
{"lineNum":" 3534","line":""},
{"lineNum":" 3535","line":"pub const CPU_SETSIZE = 128;"},
{"lineNum":" 3536","line":"pub const cpu_set_t = [CPU_SETSIZE / @sizeOf(usize)]usize;"},
{"lineNum":" 3537","line":"pub const cpu_count_t = std.meta.Int(.unsigned, std.math.log2(CPU_SETSIZE * 8));"},
{"lineNum":" 3538","line":""},
{"lineNum":" 3539","line":"pub fn CPU_COUNT(set: cpu_set_t) cpu_count_t {"},
{"lineNum":" 3540","line":"    var sum: cpu_count_t = 0;"},
{"lineNum":" 3541","line":"    for (set) |x| {"},
{"lineNum":" 3542","line":"        sum += @popCount(x);"},
{"lineNum":" 3543","line":"    }"},
{"lineNum":" 3544","line":"    return sum;"},
{"lineNum":" 3545","line":"}"},
{"lineNum":" 3546","line":""},
{"lineNum":" 3547","line":"pub const MINSIGSTKSZ = switch (native_arch) {"},
{"lineNum":" 3548","line":"    .x86, .x86_64, .arm, .mipsel => 2048,"},
{"lineNum":" 3549","line":"    .aarch64 => 5120,"},
{"lineNum":" 3550","line":"    else => @compileError(\"MINSIGSTKSZ not defined for this architecture\"),"},
{"lineNum":" 3551","line":"};"},
{"lineNum":" 3552","line":"pub const SIGSTKSZ = switch (native_arch) {"},
{"lineNum":" 3553","line":"    .x86, .x86_64, .arm, .mipsel => 8192,"},
{"lineNum":" 3554","line":"    .aarch64 => 16384,"},
{"lineNum":" 3555","line":"    else => @compileError(\"SIGSTKSZ not defined for this architecture\"),"},
{"lineNum":" 3556","line":"};"},
{"lineNum":" 3557","line":""},
{"lineNum":" 3558","line":"pub const SS_ONSTACK = 1;"},
{"lineNum":" 3559","line":"pub const SS_DISABLE = 2;"},
{"lineNum":" 3560","line":"pub const SS_AUTODISARM = 1 << 31;"},
{"lineNum":" 3561","line":""},
{"lineNum":" 3562","line":"pub const stack_t = if (is_mips)"},
{"lineNum":" 3563","line":"    // IRIX compatible stack_t"},
{"lineNum":" 3564","line":"    extern struct {"},
{"lineNum":" 3565","line":"        sp: [*]u8,"},
{"lineNum":" 3566","line":"        size: usize,"},
{"lineNum":" 3567","line":"        flags: i32,"},
{"lineNum":" 3568","line":"    }"},
{"lineNum":" 3569","line":"else"},
{"lineNum":" 3570","line":"    extern struct {"},
{"lineNum":" 3571","line":"        sp: [*]u8,"},
{"lineNum":" 3572","line":"        flags: i32,"},
{"lineNum":" 3573","line":"        size: usize,"},
{"lineNum":" 3574","line":"    };"},
{"lineNum":" 3575","line":""},
{"lineNum":" 3576","line":"pub const sigval = extern union {"},
{"lineNum":" 3577","line":"    int: i32,"},
{"lineNum":" 3578","line":"    ptr: *anyopaque,"},
{"lineNum":" 3579","line":"};"},
{"lineNum":" 3580","line":""},
{"lineNum":" 3581","line":"const siginfo_fields_union = extern union {"},
{"lineNum":" 3582","line":"    pad: [128 - 2 * @sizeOf(c_int) - @sizeOf(c_long)]u8,"},
{"lineNum":" 3583","line":"    common: extern struct {"},
{"lineNum":" 3584","line":"        first: extern union {"},
{"lineNum":" 3585","line":"            piduid: extern struct {"},
{"lineNum":" 3586","line":"                pid: pid_t,"},
{"lineNum":" 3587","line":"                uid: uid_t,"},
{"lineNum":" 3588","line":"            },"},
{"lineNum":" 3589","line":"            timer: extern struct {"},
{"lineNum":" 3590","line":"                timerid: i32,"},
{"lineNum":" 3591","line":"                overrun: i32,"},
{"lineNum":" 3592","line":"            },"},
{"lineNum":" 3593","line":"        },"},
{"lineNum":" 3594","line":"        second: extern union {"},
{"lineNum":" 3595","line":"            value: sigval,"},
{"lineNum":" 3596","line":"            sigchld: extern struct {"},
{"lineNum":" 3597","line":"                status: i32,"},
{"lineNum":" 3598","line":"                utime: clock_t,"},
{"lineNum":" 3599","line":"                stime: clock_t,"},
{"lineNum":" 3600","line":"            },"},
{"lineNum":" 3601","line":"        },"},
{"lineNum":" 3602","line":"    },"},
{"lineNum":" 3603","line":"    sigfault: extern struct {"},
{"lineNum":" 3604","line":"        addr: *anyopaque,"},
{"lineNum":" 3605","line":"        addr_lsb: i16,"},
{"lineNum":" 3606","line":"        first: extern union {"},
{"lineNum":" 3607","line":"            addr_bnd: extern struct {"},
{"lineNum":" 3608","line":"                lower: *anyopaque,"},
{"lineNum":" 3609","line":"                upper: *anyopaque,"},
{"lineNum":" 3610","line":"            },"},
{"lineNum":" 3611","line":"            pkey: u32,"},
{"lineNum":" 3612","line":"        },"},
{"lineNum":" 3613","line":"    },"},
{"lineNum":" 3614","line":"    sigpoll: extern struct {"},
{"lineNum":" 3615","line":"        band: isize,"},
{"lineNum":" 3616","line":"        fd: i32,"},
{"lineNum":" 3617","line":"    },"},
{"lineNum":" 3618","line":"    sigsys: extern struct {"},
{"lineNum":" 3619","line":"        call_addr: *anyopaque,"},
{"lineNum":" 3620","line":"        syscall: i32,"},
{"lineNum":" 3621","line":"        native_arch: u32,"},
{"lineNum":" 3622","line":"    },"},
{"lineNum":" 3623","line":"};"},
{"lineNum":" 3624","line":""},
{"lineNum":" 3625","line":"pub const siginfo_t = if (is_mips)"},
{"lineNum":" 3626","line":"    extern struct {"},
{"lineNum":" 3627","line":"        signo: i32,"},
{"lineNum":" 3628","line":"        code: i32,"},
{"lineNum":" 3629","line":"        errno: i32,"},
{"lineNum":" 3630","line":"        fields: siginfo_fields_union,"},
{"lineNum":" 3631","line":"    }"},
{"lineNum":" 3632","line":"else"},
{"lineNum":" 3633","line":"    extern struct {"},
{"lineNum":" 3634","line":"        signo: i32,"},
{"lineNum":" 3635","line":"        errno: i32,"},
{"lineNum":" 3636","line":"        code: i32,"},
{"lineNum":" 3637","line":"        fields: siginfo_fields_union,"},
{"lineNum":" 3638","line":"    };"},
{"lineNum":" 3639","line":""},
{"lineNum":" 3640","line":"pub const io_uring_params = extern struct {"},
{"lineNum":" 3641","line":"    sq_entries: u32,"},
{"lineNum":" 3642","line":"    cq_entries: u32,"},
{"lineNum":" 3643","line":"    flags: u32,"},
{"lineNum":" 3644","line":"    sq_thread_cpu: u32,"},
{"lineNum":" 3645","line":"    sq_thread_idle: u32,"},
{"lineNum":" 3646","line":"    features: u32,"},
{"lineNum":" 3647","line":"    wq_fd: u32,"},
{"lineNum":" 3648","line":"    resv: [3]u32,"},
{"lineNum":" 3649","line":"    sq_off: io_sqring_offsets,"},
{"lineNum":" 3650","line":"    cq_off: io_cqring_offsets,"},
{"lineNum":" 3651","line":"};"},
{"lineNum":" 3652","line":""},
{"lineNum":" 3653","line":"// io_uring_params.features flags"},
{"lineNum":" 3654","line":""},
{"lineNum":" 3655","line":"pub const IORING_FEAT_SINGLE_MMAP = 1 << 0;"},
{"lineNum":" 3656","line":"pub const IORING_FEAT_NODROP = 1 << 1;"},
{"lineNum":" 3657","line":"pub const IORING_FEAT_SUBMIT_STABLE = 1 << 2;"},
{"lineNum":" 3658","line":"pub const IORING_FEAT_RW_CUR_POS = 1 << 3;"},
{"lineNum":" 3659","line":"pub const IORING_FEAT_CUR_PERSONALITY = 1 << 4;"},
{"lineNum":" 3660","line":"pub const IORING_FEAT_FAST_POLL = 1 << 5;"},
{"lineNum":" 3661","line":"pub const IORING_FEAT_POLL_32BITS = 1 << 6;"},
{"lineNum":" 3662","line":"pub const IORING_FEAT_SQPOLL_NONFIXED = 1 << 7;"},
{"lineNum":" 3663","line":"pub const IORING_FEAT_EXT_ARG = 1 << 8;"},
{"lineNum":" 3664","line":"pub const IORING_FEAT_NATIVE_WORKERS = 1 << 9;"},
{"lineNum":" 3665","line":"pub const IORING_FEAT_RSRC_TAGS = 1 << 10;"},
{"lineNum":" 3666","line":"pub const IORING_FEAT_CQE_SKIP = 1 << 11;"},
{"lineNum":" 3667","line":"pub const IORING_FEAT_LINKED_FILE = 1 << 12;"},
{"lineNum":" 3668","line":""},
{"lineNum":" 3669","line":"// io_uring_params.flags"},
{"lineNum":" 3670","line":""},
{"lineNum":" 3671","line":"/// io_context is polled"},
{"lineNum":" 3672","line":"pub const IORING_SETUP_IOPOLL = 1 << 0;"},
{"lineNum":" 3673","line":""},
{"lineNum":" 3674","line":"/// SQ poll thread"},
{"lineNum":" 3675","line":"pub const IORING_SETUP_SQPOLL = 1 << 1;"},
{"lineNum":" 3676","line":""},
{"lineNum":" 3677","line":"/// sq_thread_cpu is valid"},
{"lineNum":" 3678","line":"pub const IORING_SETUP_SQ_AFF = 1 << 2;"},
{"lineNum":" 3679","line":""},
{"lineNum":" 3680","line":"/// app defines CQ size"},
{"lineNum":" 3681","line":"pub const IORING_SETUP_CQSIZE = 1 << 3;"},
{"lineNum":" 3682","line":""},
{"lineNum":" 3683","line":"/// clamp SQ/CQ ring sizes"},
{"lineNum":" 3684","line":"pub const IORING_SETUP_CLAMP = 1 << 4;"},
{"lineNum":" 3685","line":""},
{"lineNum":" 3686","line":"/// attach to existing wq"},
{"lineNum":" 3687","line":"pub const IORING_SETUP_ATTACH_WQ = 1 << 5;"},
{"lineNum":" 3688","line":""},
{"lineNum":" 3689","line":"/// start with ring disabled"},
{"lineNum":" 3690","line":"pub const IORING_SETUP_R_DISABLED = 1 << 6;"},
{"lineNum":" 3691","line":""},
{"lineNum":" 3692","line":"/// continue submit on error"},
{"lineNum":" 3693","line":"pub const IORING_SETUP_SUBMIT_ALL = 1 << 7;"},
{"lineNum":" 3694","line":""},
{"lineNum":" 3695","line":"/// Cooperative task running. When requests complete, they often require"},
{"lineNum":" 3696","line":"/// forcing the submitter to transition to the kernel to complete. If this"},
{"lineNum":" 3697","line":"/// flag is set, work will be done when the task transitions anyway, rather"},
{"lineNum":" 3698","line":"/// than force an inter-processor interrupt reschedule. This avoids interrupting"},
{"lineNum":" 3699","line":"/// a task running in userspace, and saves an IPI."},
{"lineNum":" 3700","line":"pub const IORING_SETUP_COOP_TASKRUN = 1 << 8;"},
{"lineNum":" 3701","line":""},
{"lineNum":" 3702","line":"/// If COOP_TASKRUN is set, get notified if task work is available for"},
{"lineNum":" 3703","line":"/// running and a kernel transition would be needed to run it. This sets"},
{"lineNum":" 3704","line":"/// IORING_SQ_TASKRUN in the sq ring flags. Not valid with COOP_TASKRUN."},
{"lineNum":" 3705","line":"pub const IORING_SETUP_TASKRUN_FLAG = 1 << 9;"},
{"lineNum":" 3706","line":""},
{"lineNum":" 3707","line":"/// SQEs are 128 byte"},
{"lineNum":" 3708","line":"pub const IORING_SETUP_SQE128 = 1 << 10;"},
{"lineNum":" 3709","line":"/// CQEs are 32 byte"},
{"lineNum":" 3710","line":"pub const IORING_SETUP_CQE32 = 1 << 11;"},
{"lineNum":" 3711","line":""},
{"lineNum":" 3712","line":"pub const io_sqring_offsets = extern struct {"},
{"lineNum":" 3713","line":"    /// offset of ring head"},
{"lineNum":" 3714","line":"    head: u32,"},
{"lineNum":" 3715","line":""},
{"lineNum":" 3716","line":"    /// offset of ring tail"},
{"lineNum":" 3717","line":"    tail: u32,"},
{"lineNum":" 3718","line":""},
{"lineNum":" 3719","line":"    /// ring mask value"},
{"lineNum":" 3720","line":"    ring_mask: u32,"},
{"lineNum":" 3721","line":""},
{"lineNum":" 3722","line":"    /// entries in ring"},
{"lineNum":" 3723","line":"    ring_entries: u32,"},
{"lineNum":" 3724","line":""},
{"lineNum":" 3725","line":"    /// ring flags"},
{"lineNum":" 3726","line":"    flags: u32,"},
{"lineNum":" 3727","line":""},
{"lineNum":" 3728","line":"    /// number of sqes not submitted"},
{"lineNum":" 3729","line":"    dropped: u32,"},
{"lineNum":" 3730","line":""},
{"lineNum":" 3731","line":"    /// sqe index array"},
{"lineNum":" 3732","line":"    array: u32,"},
{"lineNum":" 3733","line":""},
{"lineNum":" 3734","line":"    resv1: u32,"},
{"lineNum":" 3735","line":"    resv2: u64,"},
{"lineNum":" 3736","line":"};"},
{"lineNum":" 3737","line":""},
{"lineNum":" 3738","line":"// io_sqring_offsets.flags"},
{"lineNum":" 3739","line":""},
{"lineNum":" 3740","line":"/// needs io_uring_enter wakeup"},
{"lineNum":" 3741","line":"pub const IORING_SQ_NEED_WAKEUP = 1 << 0;"},
{"lineNum":" 3742","line":"/// kernel has cqes waiting beyond the cq ring"},
{"lineNum":" 3743","line":"pub const IORING_SQ_CQ_OVERFLOW = 1 << 1;"},
{"lineNum":" 3744","line":"/// task should enter the kernel"},
{"lineNum":" 3745","line":"pub const IORING_SQ_TASKRUN = 1 << 2;"},
{"lineNum":" 3746","line":""},
{"lineNum":" 3747","line":"pub const io_cqring_offsets = extern struct {"},
{"lineNum":" 3748","line":"    head: u32,"},
{"lineNum":" 3749","line":"    tail: u32,"},
{"lineNum":" 3750","line":"    ring_mask: u32,"},
{"lineNum":" 3751","line":"    ring_entries: u32,"},
{"lineNum":" 3752","line":"    overflow: u32,"},
{"lineNum":" 3753","line":"    cqes: u32,"},
{"lineNum":" 3754","line":"    resv: [2]u64,"},
{"lineNum":" 3755","line":"};"},
{"lineNum":" 3756","line":""},
{"lineNum":" 3757","line":"pub const io_uring_sqe = extern struct {"},
{"lineNum":" 3758","line":"    opcode: IORING_OP,"},
{"lineNum":" 3759","line":"    flags: u8,"},
{"lineNum":" 3760","line":"    ioprio: u16,"},
{"lineNum":" 3761","line":"    fd: i32,"},
{"lineNum":" 3762","line":"    off: u64,"},
{"lineNum":" 3763","line":"    addr: u64,"},
{"lineNum":" 3764","line":"    len: u32,"},
{"lineNum":" 3765","line":"    rw_flags: u32,"},
{"lineNum":" 3766","line":"    user_data: u64,"},
{"lineNum":" 3767","line":"    buf_index: u16,"},
{"lineNum":" 3768","line":"    personality: u16,"},
{"lineNum":" 3769","line":"    splice_fd_in: i32,"},
{"lineNum":" 3770","line":"    __pad2: [2]u64,"},
{"lineNum":" 3771","line":"};"},
{"lineNum":" 3772","line":""},
{"lineNum":" 3773","line":"pub const IOSQE_BIT = enum(u8) {"},
{"lineNum":" 3774","line":"    FIXED_FILE,"},
{"lineNum":" 3775","line":"    IO_DRAIN,"},
{"lineNum":" 3776","line":"    IO_LINK,"},
{"lineNum":" 3777","line":"    IO_HARDLINK,"},
{"lineNum":" 3778","line":"    ASYNC,"},
{"lineNum":" 3779","line":"    BUFFER_SELECT,"},
{"lineNum":" 3780","line":"    CQE_SKIP_SUCCESS,"},
{"lineNum":" 3781","line":""},
{"lineNum":" 3782","line":"    _,"},
{"lineNum":" 3783","line":"};"},
{"lineNum":" 3784","line":""},
{"lineNum":" 3785","line":"// io_uring_sqe.flags"},
{"lineNum":" 3786","line":""},
{"lineNum":" 3787","line":"/// use fixed fileset"},
{"lineNum":" 3788","line":"pub const IOSQE_FIXED_FILE = 1 << @intFromEnum(IOSQE_BIT.FIXED_FILE);"},
{"lineNum":" 3789","line":""},
{"lineNum":" 3790","line":"/// issue after inflight IO"},
{"lineNum":" 3791","line":"pub const IOSQE_IO_DRAIN = 1 << @intFromEnum(IOSQE_BIT.IO_DRAIN);"},
{"lineNum":" 3792","line":""},
{"lineNum":" 3793","line":"/// links next sqe"},
{"lineNum":" 3794","line":"pub const IOSQE_IO_LINK = 1 << @intFromEnum(IOSQE_BIT.IO_LINK);"},
{"lineNum":" 3795","line":""},
{"lineNum":" 3796","line":"/// like LINK, but stronger"},
{"lineNum":" 3797","line":"pub const IOSQE_IO_HARDLINK = 1 << @intFromEnum(IOSQE_BIT.IO_HARDLINK);"},
{"lineNum":" 3798","line":""},
{"lineNum":" 3799","line":"/// always go async"},
{"lineNum":" 3800","line":"pub const IOSQE_ASYNC = 1 << @intFromEnum(IOSQE_BIT.ASYNC);"},
{"lineNum":" 3801","line":""},
{"lineNum":" 3802","line":"/// select buffer from buf_group"},
{"lineNum":" 3803","line":"pub const IOSQE_BUFFER_SELECT = 1 << @intFromEnum(IOSQE_BIT.BUFFER_SELECT);"},
{"lineNum":" 3804","line":""},
{"lineNum":" 3805","line":"/// don\'t post CQE if request succeeded"},
{"lineNum":" 3806","line":"/// Available since Linux 5.17"},
{"lineNum":" 3807","line":"pub const IOSQE_CQE_SKIP_SUCCESS = 1 << @intFromEnum(IOSQE_BIT.CQE_SKIP_SUCCESS);"},
{"lineNum":" 3808","line":""},
{"lineNum":" 3809","line":"pub const IORING_OP = enum(u8) {"},
{"lineNum":" 3810","line":"    NOP,"},
{"lineNum":" 3811","line":"    READV,"},
{"lineNum":" 3812","line":"    WRITEV,"},
{"lineNum":" 3813","line":"    FSYNC,"},
{"lineNum":" 3814","line":"    READ_FIXED,"},
{"lineNum":" 3815","line":"    WRITE_FIXED,"},
{"lineNum":" 3816","line":"    POLL_ADD,"},
{"lineNum":" 3817","line":"    POLL_REMOVE,"},
{"lineNum":" 3818","line":"    SYNC_FILE_RANGE,"},
{"lineNum":" 3819","line":"    SENDMSG,"},
{"lineNum":" 3820","line":"    RECVMSG,"},
{"lineNum":" 3821","line":"    TIMEOUT,"},
{"lineNum":" 3822","line":"    TIMEOUT_REMOVE,"},
{"lineNum":" 3823","line":"    ACCEPT,"},
{"lineNum":" 3824","line":"    ASYNC_CANCEL,"},
{"lineNum":" 3825","line":"    LINK_TIMEOUT,"},
{"lineNum":" 3826","line":"    CONNECT,"},
{"lineNum":" 3827","line":"    FALLOCATE,"},
{"lineNum":" 3828","line":"    OPENAT,"},
{"lineNum":" 3829","line":"    CLOSE,"},
{"lineNum":" 3830","line":"    FILES_UPDATE,"},
{"lineNum":" 3831","line":"    STATX,"},
{"lineNum":" 3832","line":"    READ,"},
{"lineNum":" 3833","line":"    WRITE,"},
{"lineNum":" 3834","line":"    FADVISE,"},
{"lineNum":" 3835","line":"    MADVISE,"},
{"lineNum":" 3836","line":"    SEND,"},
{"lineNum":" 3837","line":"    RECV,"},
{"lineNum":" 3838","line":"    OPENAT2,"},
{"lineNum":" 3839","line":"    EPOLL_CTL,"},
{"lineNum":" 3840","line":"    SPLICE,"},
{"lineNum":" 3841","line":"    PROVIDE_BUFFERS,"},
{"lineNum":" 3842","line":"    REMOVE_BUFFERS,"},
{"lineNum":" 3843","line":"    TEE,"},
{"lineNum":" 3844","line":"    SHUTDOWN,"},
{"lineNum":" 3845","line":"    RENAMEAT,"},
{"lineNum":" 3846","line":"    UNLINKAT,"},
{"lineNum":" 3847","line":"    MKDIRAT,"},
{"lineNum":" 3848","line":"    SYMLINKAT,"},
{"lineNum":" 3849","line":"    LINKAT,"},
{"lineNum":" 3850","line":""},
{"lineNum":" 3851","line":"    _,"},
{"lineNum":" 3852","line":"};"},
{"lineNum":" 3853","line":""},
{"lineNum":" 3854","line":"// io_uring_sqe.fsync_flags (rw_flags in the Zig struct)"},
{"lineNum":" 3855","line":"pub const IORING_FSYNC_DATASYNC = 1 << 0;"},
{"lineNum":" 3856","line":""},
{"lineNum":" 3857","line":"// io_uring_sqe.timeout_flags (rw_flags in the Zig struct)"},
{"lineNum":" 3858","line":"pub const IORING_TIMEOUT_ABS = 1 << 0;"},
{"lineNum":" 3859","line":"pub const IORING_TIMEOUT_UPDATE = 1 << 1; // Available since Linux 5.11"},
{"lineNum":" 3860","line":"pub const IORING_TIMEOUT_BOOTTIME = 1 << 2; // Available since Linux 5.15"},
{"lineNum":" 3861","line":"pub const IORING_TIMEOUT_REALTIME = 1 << 3; // Available since Linux 5.15"},
{"lineNum":" 3862","line":"pub const IORING_LINK_TIMEOUT_UPDATE = 1 << 4; // Available since Linux 5.15"},
{"lineNum":" 3863","line":"pub const IORING_TIMEOUT_ETIME_SUCCESS = 1 << 5; // Available since Linux 5.16"},
{"lineNum":" 3864","line":"pub const IORING_TIMEOUT_CLOCK_MASK = IORING_TIMEOUT_BOOTTIME | IORING_TIMEOUT_REALTIME;"},
{"lineNum":" 3865","line":"pub const IORING_TIMEOUT_UPDATE_MASK = IORING_TIMEOUT_UPDATE | IORING_LINK_TIMEOUT_UPDATE;"},
{"lineNum":" 3866","line":""},
{"lineNum":" 3867","line":"// io_uring_sqe.splice_flags (rw_flags in the Zig struct)"},
{"lineNum":" 3868","line":"// extends splice(2) flags"},
{"lineNum":" 3869","line":"pub const IORING_SPLICE_F_FD_IN_FIXED = 1 << 31;"},
{"lineNum":" 3870","line":""},
{"lineNum":" 3871","line":"// POLL_ADD flags."},
{"lineNum":" 3872","line":"// Note that since sqe->poll_events (rw_flags in the Zig struct) is the flag space, the command flags for POLL_ADD are stored in sqe->len."},
{"lineNum":" 3873","line":""},
{"lineNum":" 3874","line":"/// Multishot poll. Sets IORING_CQE_F_MORE if the poll handler will continue to report CQEs on behalf of the same SQE."},
{"lineNum":" 3875","line":"pub const IORING_POLL_ADD_MULTI = 1 << 0;"},
{"lineNum":" 3876","line":"/// Update existing poll request, matching sqe->addr as the old user_data field."},
{"lineNum":" 3877","line":"pub const IORING_POLL_UPDATE_EVENTS = 1 << 1;"},
{"lineNum":" 3878","line":"pub const IORING_POLL_UPDATE_USER_DATA = 1 << 2;"},
{"lineNum":" 3879","line":""},
{"lineNum":" 3880","line":"// ASYNC_CANCEL flags."},
{"lineNum":" 3881","line":""},
{"lineNum":" 3882","line":"/// Cancel all requests that match the given key"},
{"lineNum":" 3883","line":"pub const IORING_ASYNC_CANCEL_ALL = 1 << 0;"},
{"lineNum":" 3884","line":"/// Key off \'fd\' for cancelation rather than the request \'user_data\'."},
{"lineNum":" 3885","line":"pub const IORING_ASYNC_CANCEL_FD = 1 << 1;"},
{"lineNum":" 3886","line":"/// Match any request"},
{"lineNum":" 3887","line":"pub const IORING_ASYNC_CANCEL_ANY = 1 << 2;"},
{"lineNum":" 3888","line":""},
{"lineNum":" 3889","line":"// send/sendmsg and recv/recvmsg flags (sqe->ioprio)"},
{"lineNum":" 3890","line":""},
{"lineNum":" 3891","line":"/// If set, instead of first attempting to send or receive and arm poll if that yields an -EAGAIN result,"},
{"lineNum":" 3892","line":"/// arm poll upfront and skip the initial transfer attempt."},
{"lineNum":" 3893","line":"pub const IORING_RECVSEND_POLL_FIRST = 1 << 0;"},
{"lineNum":" 3894","line":"/// Multishot recv. Sets IORING_CQE_F_MORE if the handler will continue to report CQEs on behalf of the same SQE."},
{"lineNum":" 3895","line":"pub const IORING_RECV_MULTISHOT = 1 << 1;"},
{"lineNum":" 3896","line":""},
{"lineNum":" 3897","line":"/// accept flags stored in sqe->ioprio"},
{"lineNum":" 3898","line":"pub const IORING_ACCEPT_MULTISHOT = 1 << 0;"},
{"lineNum":" 3899","line":""},
{"lineNum":" 3900","line":"// IO completion data structure (Completion Queue Entry)"},
{"lineNum":" 3901","line":"pub const io_uring_cqe = extern struct {"},
{"lineNum":" 3902","line":"    /// io_uring_sqe.data submission passed back"},
{"lineNum":" 3903","line":"    user_data: u64,"},
{"lineNum":" 3904","line":""},
{"lineNum":" 3905","line":"    /// result code for this event"},
{"lineNum":" 3906","line":"    res: i32,"},
{"lineNum":" 3907","line":"    flags: u32,"},
{"lineNum":" 3908","line":""},
{"lineNum":" 3909","line":"    pub fn err(self: io_uring_cqe) E {"},
{"lineNum":" 3910","line":"        if (self.res > -4096 and self.res < 0) {"},
{"lineNum":" 3911","line":"            return @as(E, @enumFromInt(-self.res));"},
{"lineNum":" 3912","line":"        }"},
{"lineNum":" 3913","line":"        return .SUCCESS;"},
{"lineNum":" 3914","line":"    }"},
{"lineNum":" 3915","line":"};"},
{"lineNum":" 3916","line":""},
{"lineNum":" 3917","line":"// io_uring_cqe.flags"},
{"lineNum":" 3918","line":""},
{"lineNum":" 3919","line":"/// If set, the upper 16 bits are the buffer ID"},
{"lineNum":" 3920","line":"pub const IORING_CQE_F_BUFFER = 1 << 0;"},
{"lineNum":" 3921","line":"/// If set, parent SQE will generate more CQE entries."},
{"lineNum":" 3922","line":"/// Available since Linux 5.13."},
{"lineNum":" 3923","line":"pub const IORING_CQE_F_MORE = 1 << 1;"},
{"lineNum":" 3924","line":"/// If set, more data to read after socket recv"},
{"lineNum":" 3925","line":"pub const IORING_CQE_F_SOCK_NONEMPTY = 1 << 2;"},
{"lineNum":" 3926","line":"/// Set for notification CQEs. Can be used to distinct them from sends."},
{"lineNum":" 3927","line":"pub const IORING_CQE_F_NOTIF = 1 << 3;"},
{"lineNum":" 3928","line":""},
{"lineNum":" 3929","line":"/// Magic offsets for the application to mmap the data it needs"},
{"lineNum":" 3930","line":"pub const IORING_OFF_SQ_RING = 0;"},
{"lineNum":" 3931","line":"pub const IORING_OFF_CQ_RING = 0x8000000;"},
{"lineNum":" 3932","line":"pub const IORING_OFF_SQES = 0x10000000;"},
{"lineNum":" 3933","line":""},
{"lineNum":" 3934","line":"// io_uring_enter flags"},
{"lineNum":" 3935","line":"pub const IORING_ENTER_GETEVENTS = 1 << 0;"},
{"lineNum":" 3936","line":"pub const IORING_ENTER_SQ_WAKEUP = 1 << 1;"},
{"lineNum":" 3937","line":"pub const IORING_ENTER_SQ_WAIT = 1 << 2;"},
{"lineNum":" 3938","line":"pub const IORING_ENTER_EXT_ARG = 1 << 3;"},
{"lineNum":" 3939","line":"pub const IORING_ENTER_REGISTERED_RING = 1 << 4;"},
{"lineNum":" 3940","line":""},
{"lineNum":" 3941","line":"// io_uring_register opcodes and arguments"},
{"lineNum":" 3942","line":"pub const IORING_REGISTER = enum(u8) {"},
{"lineNum":" 3943","line":"    REGISTER_BUFFERS,"},
{"lineNum":" 3944","line":"    UNREGISTER_BUFFERS,"},
{"lineNum":" 3945","line":"    REGISTER_FILES,"},
{"lineNum":" 3946","line":"    UNREGISTER_FILES,"},
{"lineNum":" 3947","line":"    REGISTER_EVENTFD,"},
{"lineNum":" 3948","line":"    UNREGISTER_EVENTFD,"},
{"lineNum":" 3949","line":"    REGISTER_FILES_UPDATE,"},
{"lineNum":" 3950","line":"    REGISTER_EVENTFD_ASYNC,"},
{"lineNum":" 3951","line":"    REGISTER_PROBE,"},
{"lineNum":" 3952","line":"    REGISTER_PERSONALITY,"},
{"lineNum":" 3953","line":"    UNREGISTER_PERSONALITY,"},
{"lineNum":" 3954","line":"    REGISTER_RESTRICTIONS,"},
{"lineNum":" 3955","line":"    REGISTER_ENABLE_RINGS,"},
{"lineNum":" 3956","line":""},
{"lineNum":" 3957","line":"    // extended with tagging"},
{"lineNum":" 3958","line":"    IORING_REGISTER_FILES2,"},
{"lineNum":" 3959","line":"    IORING_REGISTER_FILES_UPDATE2,"},
{"lineNum":" 3960","line":"    IORING_REGISTER_BUFFERS2,"},
{"lineNum":" 3961","line":"    IORING_REGISTER_BUFFERS_UPDATE,"},
{"lineNum":" 3962","line":""},
{"lineNum":" 3963","line":"    // set/clear io-wq thread affinities"},
{"lineNum":" 3964","line":"    IORING_REGISTER_IOWQ_AFF,"},
{"lineNum":" 3965","line":"    IORING_UNREGISTER_IOWQ_AFF,"},
{"lineNum":" 3966","line":""},
{"lineNum":" 3967","line":"    // set/get max number of io-wq workers"},
{"lineNum":" 3968","line":"    IORING_REGISTER_IOWQ_MAX_WORKERS,"},
{"lineNum":" 3969","line":""},
{"lineNum":" 3970","line":"    // register/unregister io_uring fd with the ring"},
{"lineNum":" 3971","line":"    IORING_REGISTER_RING_FDS,"},
{"lineNum":" 3972","line":"    IORING_UNREGISTER_RING_FDS,"},
{"lineNum":" 3973","line":""},
{"lineNum":" 3974","line":"    // register ring based provide buffer group"},
{"lineNum":" 3975","line":"    IORING_REGISTER_PBUF_RING,"},
{"lineNum":" 3976","line":"    IORING_UNREGISTER_PBUF_RING,"},
{"lineNum":" 3977","line":""},
{"lineNum":" 3978","line":"    // sync cancelation API"},
{"lineNum":" 3979","line":"    IORING_REGISTER_SYNC_CANCEL,"},
{"lineNum":" 3980","line":""},
{"lineNum":" 3981","line":"    // register a range of fixed file slots for automatic slot allocation"},
{"lineNum":" 3982","line":"    IORING_REGISTER_FILE_ALLOC_RANGE,"},
{"lineNum":" 3983","line":""},
{"lineNum":" 3984","line":"    _,"},
{"lineNum":" 3985","line":"};"},
{"lineNum":" 3986","line":""},
{"lineNum":" 3987","line":"pub const io_uring_files_update = extern struct {"},
{"lineNum":" 3988","line":"    offset: u32,"},
{"lineNum":" 3989","line":"    resv: u32,"},
{"lineNum":" 3990","line":"    fds: u64,"},
{"lineNum":" 3991","line":"};"},
{"lineNum":" 3992","line":""},
{"lineNum":" 3993","line":"pub const IO_URING_OP_SUPPORTED = 1 << 0;"},
{"lineNum":" 3994","line":""},
{"lineNum":" 3995","line":"pub const io_uring_probe_op = extern struct {"},
{"lineNum":" 3996","line":"    op: IORING_OP,"},
{"lineNum":" 3997","line":""},
{"lineNum":" 3998","line":"    resv: u8,"},
{"lineNum":" 3999","line":""},
{"lineNum":" 4000","line":"    /// IO_URING_OP_* flags"},
{"lineNum":" 4001","line":"    flags: u16,"},
{"lineNum":" 4002","line":""},
{"lineNum":" 4003","line":"    resv2: u32,"},
{"lineNum":" 4004","line":"};"},
{"lineNum":" 4005","line":""},
{"lineNum":" 4006","line":"pub const io_uring_probe = extern struct {"},
{"lineNum":" 4007","line":"    /// last opcode supported"},
{"lineNum":" 4008","line":"    last_op: IORING_OP,"},
{"lineNum":" 4009","line":""},
{"lineNum":" 4010","line":"    /// Number of io_uring_probe_op following"},
{"lineNum":" 4011","line":"    ops_len: u8,"},
{"lineNum":" 4012","line":""},
{"lineNum":" 4013","line":"    resv: u16,"},
{"lineNum":" 4014","line":"    resv2: [3]u32,"},
{"lineNum":" 4015","line":""},
{"lineNum":" 4016","line":"    // Followed by up to `ops_len` io_uring_probe_op structures"},
{"lineNum":" 4017","line":"};"},
{"lineNum":" 4018","line":""},
{"lineNum":" 4019","line":"pub const io_uring_restriction = extern struct {"},
{"lineNum":" 4020","line":"    opcode: u16,"},
{"lineNum":" 4021","line":"    arg: extern union {"},
{"lineNum":" 4022","line":"        /// IORING_RESTRICTION_REGISTER_OP"},
{"lineNum":" 4023","line":"        register_op: IORING_REGISTER,"},
{"lineNum":" 4024","line":""},
{"lineNum":" 4025","line":"        /// IORING_RESTRICTION_SQE_OP"},
{"lineNum":" 4026","line":"        sqe_op: IORING_OP,"},
{"lineNum":" 4027","line":""},
{"lineNum":" 4028","line":"        /// IORING_RESTRICTION_SQE_FLAGS_*"},
{"lineNum":" 4029","line":"        sqe_flags: u8,"},
{"lineNum":" 4030","line":"    },"},
{"lineNum":" 4031","line":"    resv: u8,"},
{"lineNum":" 4032","line":"    resv2: [3]u32,"},
{"lineNum":" 4033","line":"};"},
{"lineNum":" 4034","line":""},
{"lineNum":" 4035","line":"/// io_uring_restriction->opcode values"},
{"lineNum":" 4036","line":"pub const IORING_RESTRICTION = enum(u8) {"},
{"lineNum":" 4037","line":"    /// Allow an io_uring_register(2) opcode"},
{"lineNum":" 4038","line":"    REGISTER_OP = 0,"},
{"lineNum":" 4039","line":""},
{"lineNum":" 4040","line":"    /// Allow an sqe opcode"},
{"lineNum":" 4041","line":"    SQE_OP = 1,"},
{"lineNum":" 4042","line":""},
{"lineNum":" 4043","line":"    /// Allow sqe flags"},
{"lineNum":" 4044","line":"    SQE_FLAGS_ALLOWED = 2,"},
{"lineNum":" 4045","line":""},
{"lineNum":" 4046","line":"    /// Require sqe flags (these flags must be set on each submission)"},
{"lineNum":" 4047","line":"    SQE_FLAGS_REQUIRED = 3,"},
{"lineNum":" 4048","line":""},
{"lineNum":" 4049","line":"    _,"},
{"lineNum":" 4050","line":"};"},
{"lineNum":" 4051","line":""},
{"lineNum":" 4052","line":"pub const utsname = extern struct {"},
{"lineNum":" 4053","line":"    sysname: [64:0]u8,"},
{"lineNum":" 4054","line":"    nodename: [64:0]u8,"},
{"lineNum":" 4055","line":"    release: [64:0]u8,"},
{"lineNum":" 4056","line":"    version: [64:0]u8,"},
{"lineNum":" 4057","line":"    machine: [64:0]u8,"},
{"lineNum":" 4058","line":"    domainname: [64:0]u8,"},
{"lineNum":" 4059","line":"};"},
{"lineNum":" 4060","line":"pub const HOST_NAME_MAX = 64;"},
{"lineNum":" 4061","line":""},
{"lineNum":" 4062","line":"pub const STATX_TYPE = 0x0001;"},
{"lineNum":" 4063","line":"pub const STATX_MODE = 0x0002;"},
{"lineNum":" 4064","line":"pub const STATX_NLINK = 0x0004;"},
{"lineNum":" 4065","line":"pub const STATX_UID = 0x0008;"},
{"lineNum":" 4066","line":"pub const STATX_GID = 0x0010;"},
{"lineNum":" 4067","line":"pub const STATX_ATIME = 0x0020;"},
{"lineNum":" 4068","line":"pub const STATX_MTIME = 0x0040;"},
{"lineNum":" 4069","line":"pub const STATX_CTIME = 0x0080;"},
{"lineNum":" 4070","line":"pub const STATX_INO = 0x0100;"},
{"lineNum":" 4071","line":"pub const STATX_SIZE = 0x0200;"},
{"lineNum":" 4072","line":"pub const STATX_BLOCKS = 0x0400;"},
{"lineNum":" 4073","line":"pub const STATX_BASIC_STATS = 0x07ff;"},
{"lineNum":" 4074","line":""},
{"lineNum":" 4075","line":"pub const STATX_BTIME = 0x0800;"},
{"lineNum":" 4076","line":""},
{"lineNum":" 4077","line":"pub const STATX_ATTR_COMPRESSED = 0x0004;"},
{"lineNum":" 4078","line":"pub const STATX_ATTR_IMMUTABLE = 0x0010;"},
{"lineNum":" 4079","line":"pub const STATX_ATTR_APPEND = 0x0020;"},
{"lineNum":" 4080","line":"pub const STATX_ATTR_NODUMP = 0x0040;"},
{"lineNum":" 4081","line":"pub const STATX_ATTR_ENCRYPTED = 0x0800;"},
{"lineNum":" 4082","line":"pub const STATX_ATTR_AUTOMOUNT = 0x1000;"},
{"lineNum":" 4083","line":""},
{"lineNum":" 4084","line":"pub const statx_timestamp = extern struct {"},
{"lineNum":" 4085","line":"    tv_sec: i64,"},
{"lineNum":" 4086","line":"    tv_nsec: u32,"},
{"lineNum":" 4087","line":"    __pad1: u32,"},
{"lineNum":" 4088","line":"};"},
{"lineNum":" 4089","line":""},
{"lineNum":" 4090","line":"/// Renamed to `Statx` to not conflict with the `statx` function."},
{"lineNum":" 4091","line":"pub const Statx = extern struct {"},
{"lineNum":" 4092","line":"    /// Mask of bits indicating filled fields"},
{"lineNum":" 4093","line":"    mask: u32,"},
{"lineNum":" 4094","line":""},
{"lineNum":" 4095","line":"    /// Block size for filesystem I/O"},
{"lineNum":" 4096","line":"    blksize: u32,"},
{"lineNum":" 4097","line":""},
{"lineNum":" 4098","line":"    /// Extra file attribute indicators"},
{"lineNum":" 4099","line":"    attributes: u64,"},
{"lineNum":" 4100","line":""},
{"lineNum":" 4101","line":"    /// Number of hard links"},
{"lineNum":" 4102","line":"    nlink: u32,"},
{"lineNum":" 4103","line":""},
{"lineNum":" 4104","line":"    /// User ID of owner"},
{"lineNum":" 4105","line":"    uid: uid_t,"},
{"lineNum":" 4106","line":""},
{"lineNum":" 4107","line":"    /// Group ID of owner"},
{"lineNum":" 4108","line":"    gid: gid_t,"},
{"lineNum":" 4109","line":""},
{"lineNum":" 4110","line":"    /// File type and mode"},
{"lineNum":" 4111","line":"    mode: u16,"},
{"lineNum":" 4112","line":"    __pad1: u16,"},
{"lineNum":" 4113","line":""},
{"lineNum":" 4114","line":"    /// Inode number"},
{"lineNum":" 4115","line":"    ino: u64,"},
{"lineNum":" 4116","line":""},
{"lineNum":" 4117","line":"    /// Total size in bytes"},
{"lineNum":" 4118","line":"    size: u64,"},
{"lineNum":" 4119","line":""},
{"lineNum":" 4120","line":"    /// Number of 512B blocks allocated"},
{"lineNum":" 4121","line":"    blocks: u64,"},
{"lineNum":" 4122","line":""},
{"lineNum":" 4123","line":"    /// Mask to show what\'s supported in `attributes`."},
{"lineNum":" 4124","line":"    attributes_mask: u64,"},
{"lineNum":" 4125","line":""},
{"lineNum":" 4126","line":"    /// Last access file timestamp"},
{"lineNum":" 4127","line":"    atime: statx_timestamp,"},
{"lineNum":" 4128","line":""},
{"lineNum":" 4129","line":"    /// Creation file timestamp"},
{"lineNum":" 4130","line":"    btime: statx_timestamp,"},
{"lineNum":" 4131","line":""},
{"lineNum":" 4132","line":"    /// Last status change file timestamp"},
{"lineNum":" 4133","line":"    ctime: statx_timestamp,"},
{"lineNum":" 4134","line":""},
{"lineNum":" 4135","line":"    /// Last modification file timestamp"},
{"lineNum":" 4136","line":"    mtime: statx_timestamp,"},
{"lineNum":" 4137","line":""},
{"lineNum":" 4138","line":"    /// Major ID, if this file represents a device."},
{"lineNum":" 4139","line":"    rdev_major: u32,"},
{"lineNum":" 4140","line":""},
{"lineNum":" 4141","line":"    /// Minor ID, if this file represents a device."},
{"lineNum":" 4142","line":"    rdev_minor: u32,"},
{"lineNum":" 4143","line":""},
{"lineNum":" 4144","line":"    /// Major ID of the device containing the filesystem where this file resides."},
{"lineNum":" 4145","line":"    dev_major: u32,"},
{"lineNum":" 4146","line":""},
{"lineNum":" 4147","line":"    /// Minor ID of the device containing the filesystem where this file resides."},
{"lineNum":" 4148","line":"    dev_minor: u32,"},
{"lineNum":" 4149","line":""},
{"lineNum":" 4150","line":"    __pad2: [14]u64,"},
{"lineNum":" 4151","line":"};"},
{"lineNum":" 4152","line":""},
{"lineNum":" 4153","line":"pub const addrinfo = extern struct {"},
{"lineNum":" 4154","line":"    flags: i32,"},
{"lineNum":" 4155","line":"    family: i32,"},
{"lineNum":" 4156","line":"    socktype: i32,"},
{"lineNum":" 4157","line":"    protocol: i32,"},
{"lineNum":" 4158","line":"    addrlen: socklen_t,"},
{"lineNum":" 4159","line":"    addr: ?*sockaddr,"},
{"lineNum":" 4160","line":"    canonname: ?[*:0]u8,"},
{"lineNum":" 4161","line":"    next: ?*addrinfo,"},
{"lineNum":" 4162","line":"};"},
{"lineNum":" 4163","line":""},
{"lineNum":" 4164","line":"pub const IPPORT_RESERVED = 1024;"},
{"lineNum":" 4165","line":""},
{"lineNum":" 4166","line":"pub const IPPROTO = struct {"},
{"lineNum":" 4167","line":"    pub const IP = 0;"},
{"lineNum":" 4168","line":"    pub const HOPOPTS = 0;"},
{"lineNum":" 4169","line":"    pub const ICMP = 1;"},
{"lineNum":" 4170","line":"    pub const IGMP = 2;"},
{"lineNum":" 4171","line":"    pub const IPIP = 4;"},
{"lineNum":" 4172","line":"    pub const TCP = 6;"},
{"lineNum":" 4173","line":"    pub const EGP = 8;"},
{"lineNum":" 4174","line":"    pub const PUP = 12;"},
{"lineNum":" 4175","line":"    pub const UDP = 17;"},
{"lineNum":" 4176","line":"    pub const IDP = 22;"},
{"lineNum":" 4177","line":"    pub const TP = 29;"},
{"lineNum":" 4178","line":"    pub const DCCP = 33;"},
{"lineNum":" 4179","line":"    pub const IPV6 = 41;"},
{"lineNum":" 4180","line":"    pub const ROUTING = 43;"},
{"lineNum":" 4181","line":"    pub const FRAGMENT = 44;"},
{"lineNum":" 4182","line":"    pub const RSVP = 46;"},
{"lineNum":" 4183","line":"    pub const GRE = 47;"},
{"lineNum":" 4184","line":"    pub const ESP = 50;"},
{"lineNum":" 4185","line":"    pub const AH = 51;"},
{"lineNum":" 4186","line":"    pub const ICMPV6 = 58;"},
{"lineNum":" 4187","line":"    pub const NONE = 59;"},
{"lineNum":" 4188","line":"    pub const DSTOPTS = 60;"},
{"lineNum":" 4189","line":"    pub const MTP = 92;"},
{"lineNum":" 4190","line":"    pub const BEETPH = 94;"},
{"lineNum":" 4191","line":"    pub const ENCAP = 98;"},
{"lineNum":" 4192","line":"    pub const PIM = 103;"},
{"lineNum":" 4193","line":"    pub const COMP = 108;"},
{"lineNum":" 4194","line":"    pub const SCTP = 132;"},
{"lineNum":" 4195","line":"    pub const MH = 135;"},
{"lineNum":" 4196","line":"    pub const UDPLITE = 136;"},
{"lineNum":" 4197","line":"    pub const MPLS = 137;"},
{"lineNum":" 4198","line":"    pub const RAW = 255;"},
{"lineNum":" 4199","line":"    pub const MAX = 256;"},
{"lineNum":" 4200","line":"};"},
{"lineNum":" 4201","line":""},
{"lineNum":" 4202","line":"pub const RR = struct {"},
{"lineNum":" 4203","line":"    pub const A = 1;"},
{"lineNum":" 4204","line":"    pub const CNAME = 5;"},
{"lineNum":" 4205","line":"    pub const AAAA = 28;"},
{"lineNum":" 4206","line":"};"},
{"lineNum":" 4207","line":""},
{"lineNum":" 4208","line":"pub const tcp_repair_opt = extern struct {"},
{"lineNum":" 4209","line":"    opt_code: u32,"},
{"lineNum":" 4210","line":"    opt_val: u32,"},
{"lineNum":" 4211","line":"};"},
{"lineNum":" 4212","line":""},
{"lineNum":" 4213","line":"pub const tcp_repair_window = extern struct {"},
{"lineNum":" 4214","line":"    snd_wl1: u32,"},
{"lineNum":" 4215","line":"    snd_wnd: u32,"},
{"lineNum":" 4216","line":"    max_window: u32,"},
{"lineNum":" 4217","line":"    rcv_wnd: u32,"},
{"lineNum":" 4218","line":"    rcv_wup: u32,"},
{"lineNum":" 4219","line":"};"},
{"lineNum":" 4220","line":""},
{"lineNum":" 4221","line":"pub const TcpRepairOption = enum {"},
{"lineNum":" 4222","line":"    TCP_NO_QUEUE,"},
{"lineNum":" 4223","line":"    TCP_RECV_QUEUE,"},
{"lineNum":" 4224","line":"    TCP_SEND_QUEUE,"},
{"lineNum":" 4225","line":"    TCP_QUEUES_NR,"},
{"lineNum":" 4226","line":"};"},
{"lineNum":" 4227","line":""},
{"lineNum":" 4228","line":"/// why fastopen failed from client perspective"},
{"lineNum":" 4229","line":"pub const tcp_fastopen_client_fail = enum {"},
{"lineNum":" 4230","line":"    /// catch-all"},
{"lineNum":" 4231","line":"    TFO_STATUS_UNSPEC,"},
{"lineNum":" 4232","line":"    /// if not in TFO_CLIENT_NO_COOKIE mode"},
{"lineNum":" 4233","line":"    TFO_COOKIE_UNAVAILABLE,"},
{"lineNum":" 4234","line":"    /// SYN-ACK did not ack SYN data"},
{"lineNum":" 4235","line":"    TFO_DATA_NOT_ACKED,"},
{"lineNum":" 4236","line":"    /// SYN-ACK did not ack SYN data after timeout"},
{"lineNum":" 4237","line":"    TFO_SYN_RETRANSMITTED,"},
{"lineNum":" 4238","line":"};"},
{"lineNum":" 4239","line":""},
{"lineNum":" 4240","line":"/// for TCP_INFO socket option"},
{"lineNum":" 4241","line":"pub const TCPI_OPT_TIMESTAMPS = 1;"},
{"lineNum":" 4242","line":"pub const TCPI_OPT_SACK = 2;"},
{"lineNum":" 4243","line":"pub const TCPI_OPT_WSCALE = 4;"},
{"lineNum":" 4244","line":"/// ECN was negotiated at TCP session init"},
{"lineNum":" 4245","line":"pub const TCPI_OPT_ECN = 8;"},
{"lineNum":" 4246","line":"/// we received at least one packet with ECT"},
{"lineNum":" 4247","line":"pub const TCPI_OPT_ECN_SEEN = 16;"},
{"lineNum":" 4248","line":"/// SYN-ACK acked data in SYN sent or rcvd"},
{"lineNum":" 4249","line":"pub const TCPI_OPT_SYN_DATA = 32;"},
{"lineNum":" 4250","line":""},
{"lineNum":" 4251","line":"pub const nfds_t = usize;"},
{"lineNum":" 4252","line":"pub const pollfd = extern struct {"},
{"lineNum":" 4253","line":"    fd: fd_t,"},
{"lineNum":" 4254","line":"    events: i16,"},
{"lineNum":" 4255","line":"    revents: i16,"},
{"lineNum":" 4256","line":"};"},
{"lineNum":" 4257","line":""},
{"lineNum":" 4258","line":"pub const POLL = struct {"},
{"lineNum":" 4259","line":"    pub const IN = 0x001;"},
{"lineNum":" 4260","line":"    pub const PRI = 0x002;"},
{"lineNum":" 4261","line":"    pub const OUT = 0x004;"},
{"lineNum":" 4262","line":"    pub const ERR = 0x008;"},
{"lineNum":" 4263","line":"    pub const HUP = 0x010;"},
{"lineNum":" 4264","line":"    pub const NVAL = 0x020;"},
{"lineNum":" 4265","line":"    pub const RDNORM = 0x040;"},
{"lineNum":" 4266","line":"    pub const RDBAND = 0x080;"},
{"lineNum":" 4267","line":"};"},
{"lineNum":" 4268","line":""},
{"lineNum":" 4269","line":"pub const HUGETLB_FLAG_ENCODE_SHIFT = 26;"},
{"lineNum":" 4270","line":"pub const HUGETLB_FLAG_ENCODE_MASK = 0x3f;"},
{"lineNum":" 4271","line":"pub const HUGETLB_FLAG_ENCODE_64KB = 16 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4272","line":"pub const HUGETLB_FLAG_ENCODE_512KB = 19 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4273","line":"pub const HUGETLB_FLAG_ENCODE_1MB = 20 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4274","line":"pub const HUGETLB_FLAG_ENCODE_2MB = 21 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4275","line":"pub const HUGETLB_FLAG_ENCODE_8MB = 23 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4276","line":"pub const HUGETLB_FLAG_ENCODE_16MB = 24 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4277","line":"pub const HUGETLB_FLAG_ENCODE_32MB = 25 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4278","line":"pub const HUGETLB_FLAG_ENCODE_256MB = 28 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4279","line":"pub const HUGETLB_FLAG_ENCODE_512MB = 29 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4280","line":"pub const HUGETLB_FLAG_ENCODE_1GB = 30 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4281","line":"pub const HUGETLB_FLAG_ENCODE_2GB = 31 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4282","line":"pub const HUGETLB_FLAG_ENCODE_16GB = 34 << HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4283","line":""},
{"lineNum":" 4284","line":"pub const MFD = struct {"},
{"lineNum":" 4285","line":"    pub const CLOEXEC = 0x0001;"},
{"lineNum":" 4286","line":"    pub const ALLOW_SEALING = 0x0002;"},
{"lineNum":" 4287","line":"    pub const HUGETLB = 0x0004;"},
{"lineNum":" 4288","line":"    pub const ALL_FLAGS = CLOEXEC | ALLOW_SEALING | HUGETLB;"},
{"lineNum":" 4289","line":""},
{"lineNum":" 4290","line":"    pub const HUGE_SHIFT = HUGETLB_FLAG_ENCODE_SHIFT;"},
{"lineNum":" 4291","line":"    pub const HUGE_MASK = HUGETLB_FLAG_ENCODE_MASK;"},
{"lineNum":" 4292","line":"    pub const HUGE_64KB = HUGETLB_FLAG_ENCODE_64KB;"},
{"lineNum":" 4293","line":"    pub const HUGE_512KB = HUGETLB_FLAG_ENCODE_512KB;"},
{"lineNum":" 4294","line":"    pub const HUGE_1MB = HUGETLB_FLAG_ENCODE_1MB;"},
{"lineNum":" 4295","line":"    pub const HUGE_2MB = HUGETLB_FLAG_ENCODE_2MB;"},
{"lineNum":" 4296","line":"    pub const HUGE_8MB = HUGETLB_FLAG_ENCODE_8MB;"},
{"lineNum":" 4297","line":"    pub const HUGE_16MB = HUGETLB_FLAG_ENCODE_16MB;"},
{"lineNum":" 4298","line":"    pub const HUGE_32MB = HUGETLB_FLAG_ENCODE_32MB;"},
{"lineNum":" 4299","line":"    pub const HUGE_256MB = HUGETLB_FLAG_ENCODE_256MB;"},
{"lineNum":" 4300","line":"    pub const HUGE_512MB = HUGETLB_FLAG_ENCODE_512MB;"},
{"lineNum":" 4301","line":"    pub const HUGE_1GB = HUGETLB_FLAG_ENCODE_1GB;"},
{"lineNum":" 4302","line":"    pub const HUGE_2GB = HUGETLB_FLAG_ENCODE_2GB;"},
{"lineNum":" 4303","line":"    pub const HUGE_16GB = HUGETLB_FLAG_ENCODE_16GB;"},
{"lineNum":" 4304","line":"};"},
{"lineNum":" 4305","line":""},
{"lineNum":" 4306","line":"pub const rusage = extern struct {"},
{"lineNum":" 4307","line":"    utime: timeval,"},
{"lineNum":" 4308","line":"    stime: timeval,"},
{"lineNum":" 4309","line":"    maxrss: isize,"},
{"lineNum":" 4310","line":"    ixrss: isize,"},
{"lineNum":" 4311","line":"    idrss: isize,"},
{"lineNum":" 4312","line":"    isrss: isize,"},
{"lineNum":" 4313","line":"    minflt: isize,"},
{"lineNum":" 4314","line":"    majflt: isize,"},
{"lineNum":" 4315","line":"    nswap: isize,"},
{"lineNum":" 4316","line":"    inblock: isize,"},
{"lineNum":" 4317","line":"    oublock: isize,"},
{"lineNum":" 4318","line":"    msgsnd: isize,"},
{"lineNum":" 4319","line":"    msgrcv: isize,"},
{"lineNum":" 4320","line":"    nsignals: isize,"},
{"lineNum":" 4321","line":"    nvcsw: isize,"},
{"lineNum":" 4322","line":"    nivcsw: isize,"},
{"lineNum":" 4323","line":"    __reserved: [16]isize = [1]isize{0} ** 16,"},
{"lineNum":" 4324","line":""},
{"lineNum":" 4325","line":"    pub const SELF = 0;"},
{"lineNum":" 4326","line":"    pub const CHILDREN = -1;"},
{"lineNum":" 4327","line":"    pub const THREAD = 1;"},
{"lineNum":" 4328","line":"};"},
{"lineNum":" 4329","line":""},
{"lineNum":" 4330","line":"pub const cc_t = u8;"},
{"lineNum":" 4331","line":"pub const speed_t = u32;"},
{"lineNum":" 4332","line":"pub const tcflag_t = u32;"},
{"lineNum":" 4333","line":""},
{"lineNum":" 4334","line":"pub const NCCS = 32;"},
{"lineNum":" 4335","line":""},
{"lineNum":" 4336","line":"pub const B0 = 0o0000000;"},
{"lineNum":" 4337","line":"pub const B50 = 0o0000001;"},
{"lineNum":" 4338","line":"pub const B75 = 0o0000002;"},
{"lineNum":" 4339","line":"pub const B110 = 0o0000003;"},
{"lineNum":" 4340","line":"pub const B134 = 0o0000004;"},
{"lineNum":" 4341","line":"pub const B150 = 0o0000005;"},
{"lineNum":" 4342","line":"pub const B200 = 0o0000006;"},
{"lineNum":" 4343","line":"pub const B300 = 0o0000007;"},
{"lineNum":" 4344","line":"pub const B600 = 0o0000010;"},
{"lineNum":" 4345","line":"pub const B1200 = 0o0000011;"},
{"lineNum":" 4346","line":"pub const B1800 = 0o0000012;"},
{"lineNum":" 4347","line":"pub const B2400 = 0o0000013;"},
{"lineNum":" 4348","line":"pub const B4800 = 0o0000014;"},
{"lineNum":" 4349","line":"pub const B9600 = 0o0000015;"},
{"lineNum":" 4350","line":"pub const B19200 = 0o0000016;"},
{"lineNum":" 4351","line":"pub const B38400 = 0o0000017;"},
{"lineNum":" 4352","line":"pub const BOTHER = 0o0010000;"},
{"lineNum":" 4353","line":"pub const B57600 = 0o0010001;"},
{"lineNum":" 4354","line":"pub const B115200 = 0o0010002;"},
{"lineNum":" 4355","line":"pub const B230400 = 0o0010003;"},
{"lineNum":" 4356","line":"pub const B460800 = 0o0010004;"},
{"lineNum":" 4357","line":"pub const B500000 = 0o0010005;"},
{"lineNum":" 4358","line":"pub const B576000 = 0o0010006;"},
{"lineNum":" 4359","line":"pub const B921600 = 0o0010007;"},
{"lineNum":" 4360","line":"pub const B1000000 = 0o0010010;"},
{"lineNum":" 4361","line":"pub const B1152000 = 0o0010011;"},
{"lineNum":" 4362","line":"pub const B1500000 = 0o0010012;"},
{"lineNum":" 4363","line":"pub const B2000000 = 0o0010013;"},
{"lineNum":" 4364","line":"pub const B2500000 = 0o0010014;"},
{"lineNum":" 4365","line":"pub const B3000000 = 0o0010015;"},
{"lineNum":" 4366","line":"pub const B3500000 = 0o0010016;"},
{"lineNum":" 4367","line":"pub const B4000000 = 0o0010017;"},
{"lineNum":" 4368","line":""},
{"lineNum":" 4369","line":"pub const V = switch (native_arch) {"},
{"lineNum":" 4370","line":"    .powerpc, .powerpc64, .powerpc64le => struct {"},
{"lineNum":" 4371","line":"        pub const INTR = 0;"},
{"lineNum":" 4372","line":"        pub const QUIT = 1;"},
{"lineNum":" 4373","line":"        pub const ERASE = 2;"},
{"lineNum":" 4374","line":"        pub const KILL = 3;"},
{"lineNum":" 4375","line":"        pub const EOF = 4;"},
{"lineNum":" 4376","line":"        pub const MIN = 5;"},
{"lineNum":" 4377","line":"        pub const EOL = 6;"},
{"lineNum":" 4378","line":"        pub const TIME = 7;"},
{"lineNum":" 4379","line":"        pub const EOL2 = 8;"},
{"lineNum":" 4380","line":"        pub const SWTC = 9;"},
{"lineNum":" 4381","line":"        pub const WERASE = 10;"},
{"lineNum":" 4382","line":"        pub const REPRINT = 11;"},
{"lineNum":" 4383","line":"        pub const SUSP = 12;"},
{"lineNum":" 4384","line":"        pub const START = 13;"},
{"lineNum":" 4385","line":"        pub const STOP = 14;"},
{"lineNum":" 4386","line":"        pub const LNEXT = 15;"},
{"lineNum":" 4387","line":"        pub const DISCARD = 16;"},
{"lineNum":" 4388","line":"    },"},
{"lineNum":" 4389","line":"    .sparc, .sparc64 => struct {"},
{"lineNum":" 4390","line":"        pub const INTR = 0;"},
{"lineNum":" 4391","line":"        pub const QUIT = 1;"},
{"lineNum":" 4392","line":"        pub const ERASE = 2;"},
{"lineNum":" 4393","line":"        pub const KILL = 3;"},
{"lineNum":" 4394","line":"        pub const EOF = 4;"},
{"lineNum":" 4395","line":"        pub const EOL = 5;"},
{"lineNum":" 4396","line":"        pub const EOL2 = 6;"},
{"lineNum":" 4397","line":"        pub const SWTC = 7;"},
{"lineNum":" 4398","line":"        pub const START = 8;"},
{"lineNum":" 4399","line":"        pub const STOP = 9;"},
{"lineNum":" 4400","line":"        pub const SUSP = 10;"},
{"lineNum":" 4401","line":"        pub const DSUSP = 11;"},
{"lineNum":" 4402","line":"        pub const REPRINT = 12;"},
{"lineNum":" 4403","line":"        pub const DISCARD = 13;"},
{"lineNum":" 4404","line":"        pub const WERASE = 14;"},
{"lineNum":" 4405","line":"        pub const LNEXT = 15;"},
{"lineNum":" 4406","line":"        pub const MIN = EOF;"},
{"lineNum":" 4407","line":"        pub const TIME = EOL;"},
{"lineNum":" 4408","line":"    },"},
{"lineNum":" 4409","line":"    .mips, .mipsel, .mips64, .mips64el => struct {"},
{"lineNum":" 4410","line":"        pub const INTR = 0;"},
{"lineNum":" 4411","line":"        pub const QUIT = 1;"},
{"lineNum":" 4412","line":"        pub const ERASE = 2;"},
{"lineNum":" 4413","line":"        pub const KILL = 3;"},
{"lineNum":" 4414","line":"        pub const MIN = 4;"},
{"lineNum":" 4415","line":"        pub const TIME = 5;"},
{"lineNum":" 4416","line":"        pub const EOL2 = 6;"},
{"lineNum":" 4417","line":"        pub const SWTC = 7;"},
{"lineNum":" 4418","line":"        pub const SWTCH = 7;"},
{"lineNum":" 4419","line":"        pub const START = 8;"},
{"lineNum":" 4420","line":"        pub const STOP = 9;"},
{"lineNum":" 4421","line":"        pub const SUSP = 10;"},
{"lineNum":" 4422","line":"        pub const REPRINT = 12;"},
{"lineNum":" 4423","line":"        pub const DISCARD = 13;"},
{"lineNum":" 4424","line":"        pub const WERASE = 14;"},
{"lineNum":" 4425","line":"        pub const LNEXT = 15;"},
{"lineNum":" 4426","line":"        pub const EOF = 16;"},
{"lineNum":" 4427","line":"        pub const EOL = 17;"},
{"lineNum":" 4428","line":"    },"},
{"lineNum":" 4429","line":"    else => struct {"},
{"lineNum":" 4430","line":"        pub const INTR = 0;"},
{"lineNum":" 4431","line":"        pub const QUIT = 1;"},
{"lineNum":" 4432","line":"        pub const ERASE = 2;"},
{"lineNum":" 4433","line":"        pub const KILL = 3;"},
{"lineNum":" 4434","line":"        pub const EOF = 4;"},
{"lineNum":" 4435","line":"        pub const TIME = 5;"},
{"lineNum":" 4436","line":"        pub const MIN = 6;"},
{"lineNum":" 4437","line":"        pub const SWTC = 7;"},
{"lineNum":" 4438","line":"        pub const START = 8;"},
{"lineNum":" 4439","line":"        pub const STOP = 9;"},
{"lineNum":" 4440","line":"        pub const SUSP = 10;"},
{"lineNum":" 4441","line":"        pub const EOL = 11;"},
{"lineNum":" 4442","line":"        pub const REPRINT = 12;"},
{"lineNum":" 4443","line":"        pub const DISCARD = 13;"},
{"lineNum":" 4444","line":"        pub const WERASE = 14;"},
{"lineNum":" 4445","line":"        pub const LNEXT = 15;"},
{"lineNum":" 4446","line":"        pub const EOL2 = 16;"},
{"lineNum":" 4447","line":"    },"},
{"lineNum":" 4448","line":"};"},
{"lineNum":" 4449","line":""},
{"lineNum":" 4450","line":"pub const IGNBRK: tcflag_t = 1;"},
{"lineNum":" 4451","line":"pub const BRKINT: tcflag_t = 2;"},
{"lineNum":" 4452","line":"pub const IGNPAR: tcflag_t = 4;"},
{"lineNum":" 4453","line":"pub const PARMRK: tcflag_t = 8;"},
{"lineNum":" 4454","line":"pub const INPCK: tcflag_t = 16;"},
{"lineNum":" 4455","line":"pub const ISTRIP: tcflag_t = 32;"},
{"lineNum":" 4456","line":"pub const INLCR: tcflag_t = 64;"},
{"lineNum":" 4457","line":"pub const IGNCR: tcflag_t = 128;"},
{"lineNum":" 4458","line":"pub const ICRNL: tcflag_t = 256;"},
{"lineNum":" 4459","line":"pub const IUCLC: tcflag_t = 512;"},
{"lineNum":" 4460","line":"pub const IXON: tcflag_t = 1024;"},
{"lineNum":" 4461","line":"pub const IXANY: tcflag_t = 2048;"},
{"lineNum":" 4462","line":"pub const IXOFF: tcflag_t = 4096;"},
{"lineNum":" 4463","line":"pub const IMAXBEL: tcflag_t = 8192;"},
{"lineNum":" 4464","line":"pub const IUTF8: tcflag_t = 16384;"},
{"lineNum":" 4465","line":""},
{"lineNum":" 4466","line":"pub const OPOST: tcflag_t = 1;"},
{"lineNum":" 4467","line":"pub const OLCUC: tcflag_t = 2;"},
{"lineNum":" 4468","line":"pub const ONLCR: tcflag_t = 4;"},
{"lineNum":" 4469","line":"pub const OCRNL: tcflag_t = 8;"},
{"lineNum":" 4470","line":"pub const ONOCR: tcflag_t = 16;"},
{"lineNum":" 4471","line":"pub const ONLRET: tcflag_t = 32;"},
{"lineNum":" 4472","line":"pub const OFILL: tcflag_t = 64;"},
{"lineNum":" 4473","line":"pub const OFDEL: tcflag_t = 128;"},
{"lineNum":" 4474","line":"pub const VTDLY: tcflag_t = 16384;"},
{"lineNum":" 4475","line":"pub const VT0: tcflag_t = 0;"},
{"lineNum":" 4476","line":"pub const VT1: tcflag_t = 16384;"},
{"lineNum":" 4477","line":""},
{"lineNum":" 4478","line":"pub const CSIZE: tcflag_t = 48;"},
{"lineNum":" 4479","line":"pub const CS5: tcflag_t = 0;"},
{"lineNum":" 4480","line":"pub const CS6: tcflag_t = 16;"},
{"lineNum":" 4481","line":"pub const CS7: tcflag_t = 32;"},
{"lineNum":" 4482","line":"pub const CS8: tcflag_t = 48;"},
{"lineNum":" 4483","line":"pub const CSTOPB: tcflag_t = 64;"},
{"lineNum":" 4484","line":"pub const CREAD: tcflag_t = 128;"},
{"lineNum":" 4485","line":"pub const PARENB: tcflag_t = 256;"},
{"lineNum":" 4486","line":"pub const PARODD: tcflag_t = 512;"},
{"lineNum":" 4487","line":"pub const HUPCL: tcflag_t = 1024;"},
{"lineNum":" 4488","line":"pub const CLOCAL: tcflag_t = 2048;"},
{"lineNum":" 4489","line":""},
{"lineNum":" 4490","line":"pub const ISIG: tcflag_t = 1;"},
{"lineNum":" 4491","line":"pub const ICANON: tcflag_t = 2;"},
{"lineNum":" 4492","line":"pub const ECHO: tcflag_t = 8;"},
{"lineNum":" 4493","line":"pub const ECHOE: tcflag_t = 16;"},
{"lineNum":" 4494","line":"pub const ECHOK: tcflag_t = 32;"},
{"lineNum":" 4495","line":"pub const ECHONL: tcflag_t = 64;"},
{"lineNum":" 4496","line":"pub const NOFLSH: tcflag_t = 128;"},
{"lineNum":" 4497","line":"pub const TOSTOP: tcflag_t = 256;"},
{"lineNum":" 4498","line":"pub const IEXTEN: tcflag_t = 32768;"},
{"lineNum":" 4499","line":""},
{"lineNum":" 4500","line":"pub const TCSA = enum(c_uint) {"},
{"lineNum":" 4501","line":"    NOW,"},
{"lineNum":" 4502","line":"    DRAIN,"},
{"lineNum":" 4503","line":"    FLUSH,"},
{"lineNum":" 4504","line":"    _,"},
{"lineNum":" 4505","line":"};"},
{"lineNum":" 4506","line":""},
{"lineNum":" 4507","line":"pub const termios = extern struct {"},
{"lineNum":" 4508","line":"    iflag: tcflag_t,"},
{"lineNum":" 4509","line":"    oflag: tcflag_t,"},
{"lineNum":" 4510","line":"    cflag: tcflag_t,"},
{"lineNum":" 4511","line":"    lflag: tcflag_t,"},
{"lineNum":" 4512","line":"    line: cc_t,"},
{"lineNum":" 4513","line":"    cc: [NCCS]cc_t,"},
{"lineNum":" 4514","line":"    ispeed: speed_t,"},
{"lineNum":" 4515","line":"    ospeed: speed_t,"},
{"lineNum":" 4516","line":"};"},
{"lineNum":" 4517","line":""},
{"lineNum":" 4518","line":"pub const SIOCGIFINDEX = 0x8933;"},
{"lineNum":" 4519","line":"pub const IFNAMESIZE = 16;"},
{"lineNum":" 4520","line":""},
{"lineNum":" 4521","line":"pub const ifmap = extern struct {"},
{"lineNum":" 4522","line":"    mem_start: u32,"},
{"lineNum":" 4523","line":"    mem_end: u32,"},
{"lineNum":" 4524","line":"    base_addr: u16,"},
{"lineNum":" 4525","line":"    irq: u8,"},
{"lineNum":" 4526","line":"    dma: u8,"},
{"lineNum":" 4527","line":"    port: u8,"},
{"lineNum":" 4528","line":"};"},
{"lineNum":" 4529","line":""},
{"lineNum":" 4530","line":"pub const ifreq = extern struct {"},
{"lineNum":" 4531","line":"    ifrn: extern union {"},
{"lineNum":" 4532","line":"        name: [IFNAMESIZE]u8,"},
{"lineNum":" 4533","line":"    },"},
{"lineNum":" 4534","line":"    ifru: extern union {"},
{"lineNum":" 4535","line":"        addr: sockaddr,"},
{"lineNum":" 4536","line":"        dstaddr: sockaddr,"},
{"lineNum":" 4537","line":"        broadaddr: sockaddr,"},
{"lineNum":" 4538","line":"        netmask: sockaddr,"},
{"lineNum":" 4539","line":"        hwaddr: sockaddr,"},
{"lineNum":" 4540","line":"        flags: i16,"},
{"lineNum":" 4541","line":"        ivalue: i32,"},
{"lineNum":" 4542","line":"        mtu: i32,"},
{"lineNum":" 4543","line":"        map: ifmap,"},
{"lineNum":" 4544","line":"        slave: [IFNAMESIZE - 1:0]u8,"},
{"lineNum":" 4545","line":"        newname: [IFNAMESIZE - 1:0]u8,"},
{"lineNum":" 4546","line":"        data: ?[*]u8,"},
{"lineNum":" 4547","line":"    },"},
{"lineNum":" 4548","line":"};"},
{"lineNum":" 4549","line":""},
{"lineNum":" 4550","line":"// doc comments copied from musl"},
{"lineNum":" 4551","line":"pub const rlimit_resource = if (native_arch.isMIPS() or native_arch.isSPARC())"},
{"lineNum":" 4552","line":"    arch_bits.rlimit_resource"},
{"lineNum":" 4553","line":"else"},
{"lineNum":" 4554","line":"    enum(c_int) {"},
{"lineNum":" 4555","line":"        /// Per-process CPU limit, in seconds."},
{"lineNum":" 4556","line":"        CPU,"},
{"lineNum":" 4557","line":""},
{"lineNum":" 4558","line":"        /// Largest file that can be created, in bytes."},
{"lineNum":" 4559","line":"        FSIZE,"},
{"lineNum":" 4560","line":""},
{"lineNum":" 4561","line":"        /// Maximum size of data segment, in bytes."},
{"lineNum":" 4562","line":"        DATA,"},
{"lineNum":" 4563","line":""},
{"lineNum":" 4564","line":"        /// Maximum size of stack segment, in bytes."},
{"lineNum":" 4565","line":"        STACK,"},
{"lineNum":" 4566","line":""},
{"lineNum":" 4567","line":"        /// Largest core file that can be created, in bytes."},
{"lineNum":" 4568","line":"        CORE,"},
{"lineNum":" 4569","line":""},
{"lineNum":" 4570","line":"        /// Largest resident set size, in bytes."},
{"lineNum":" 4571","line":"        /// This affects swapping; processes that are exceeding their"},
{"lineNum":" 4572","line":"        /// resident set size will be more likely to have physical memory"},
{"lineNum":" 4573","line":"        /// taken from them."},
{"lineNum":" 4574","line":"        RSS,"},
{"lineNum":" 4575","line":""},
{"lineNum":" 4576","line":"        /// Number of processes."},
{"lineNum":" 4577","line":"        NPROC,"},
{"lineNum":" 4578","line":""},
{"lineNum":" 4579","line":"        /// Number of open files."},
{"lineNum":" 4580","line":"        NOFILE,"},
{"lineNum":" 4581","line":""},
{"lineNum":" 4582","line":"        /// Locked-in-memory address space."},
{"lineNum":" 4583","line":"        MEMLOCK,"},
{"lineNum":" 4584","line":""},
{"lineNum":" 4585","line":"        /// Address space limit."},
{"lineNum":" 4586","line":"        AS,"},
{"lineNum":" 4587","line":""},
{"lineNum":" 4588","line":"        /// Maximum number of file locks."},
{"lineNum":" 4589","line":"        LOCKS,"},
{"lineNum":" 4590","line":""},
{"lineNum":" 4591","line":"        /// Maximum number of pending signals."},
{"lineNum":" 4592","line":"        SIGPENDING,"},
{"lineNum":" 4593","line":""},
{"lineNum":" 4594","line":"        /// Maximum bytes in POSIX message queues."},
{"lineNum":" 4595","line":"        MSGQUEUE,"},
{"lineNum":" 4596","line":""},
{"lineNum":" 4597","line":"        /// Maximum nice priority allowed to raise to."},
{"lineNum":" 4598","line":"        /// Nice levels 19 .. -20 correspond to 0 .. 39"},
{"lineNum":" 4599","line":"        /// values of this resource limit."},
{"lineNum":" 4600","line":"        NICE,"},
{"lineNum":" 4601","line":""},
{"lineNum":" 4602","line":"        /// Maximum realtime priority allowed for non-priviledged"},
{"lineNum":" 4603","line":"        /// processes."},
{"lineNum":" 4604","line":"        RTPRIO,"},
{"lineNum":" 4605","line":""},
{"lineNum":" 4606","line":"        /// Maximum CPU time in µs that a process scheduled under a real-time"},
{"lineNum":" 4607","line":"        /// scheduling policy may consume without making a blocking system"},
{"lineNum":" 4608","line":"        /// call before being forcibly descheduled."},
{"lineNum":" 4609","line":"        RTTIME,"},
{"lineNum":" 4610","line":""},
{"lineNum":" 4611","line":"        _,"},
{"lineNum":" 4612","line":"    };"},
{"lineNum":" 4613","line":""},
{"lineNum":" 4614","line":"pub const rlim_t = u64;"},
{"lineNum":" 4615","line":""},
{"lineNum":" 4616","line":"pub const RLIM = struct {"},
{"lineNum":" 4617","line":"    /// No limit"},
{"lineNum":" 4618","line":"    pub const INFINITY = ~@as(rlim_t, 0);"},
{"lineNum":" 4619","line":""},
{"lineNum":" 4620","line":"    pub const SAVED_MAX = INFINITY;"},
{"lineNum":" 4621","line":"    pub const SAVED_CUR = INFINITY;"},
{"lineNum":" 4622","line":"};"},
{"lineNum":" 4623","line":""},
{"lineNum":" 4624","line":"pub const rlimit = extern struct {"},
{"lineNum":" 4625","line":"    /// Soft limit"},
{"lineNum":" 4626","line":"    cur: rlim_t,"},
{"lineNum":" 4627","line":"    /// Hard limit"},
{"lineNum":" 4628","line":"    max: rlim_t,"},
{"lineNum":" 4629","line":"};"},
{"lineNum":" 4630","line":""},
{"lineNum":" 4631","line":"pub const MADV = struct {"},
{"lineNum":" 4632","line":"    pub const NORMAL = 0;"},
{"lineNum":" 4633","line":"    pub const RANDOM = 1;"},
{"lineNum":" 4634","line":"    pub const SEQUENTIAL = 2;"},
{"lineNum":" 4635","line":"    pub const WILLNEED = 3;"},
{"lineNum":" 4636","line":"    pub const DONTNEED = 4;"},
{"lineNum":" 4637","line":"    pub const FREE = 8;"},
{"lineNum":" 4638","line":"    pub const REMOVE = 9;"},
{"lineNum":" 4639","line":"    pub const DONTFORK = 10;"},
{"lineNum":" 4640","line":"    pub const DOFORK = 11;"},
{"lineNum":" 4641","line":"    pub const MERGEABLE = 12;"},
{"lineNum":" 4642","line":"    pub const UNMERGEABLE = 13;"},
{"lineNum":" 4643","line":"    pub const HUGEPAGE = 14;"},
{"lineNum":" 4644","line":"    pub const NOHUGEPAGE = 15;"},
{"lineNum":" 4645","line":"    pub const DONTDUMP = 16;"},
{"lineNum":" 4646","line":"    pub const DODUMP = 17;"},
{"lineNum":" 4647","line":"    pub const WIPEONFORK = 18;"},
{"lineNum":" 4648","line":"    pub const KEEPONFORK = 19;"},
{"lineNum":" 4649","line":"    pub const COLD = 20;"},
{"lineNum":" 4650","line":"    pub const PAGEOUT = 21;"},
{"lineNum":" 4651","line":"    pub const HWPOISON = 100;"},
{"lineNum":" 4652","line":"    pub const SOFT_OFFLINE = 101;"},
{"lineNum":" 4653","line":"};"},
{"lineNum":" 4654","line":""},
{"lineNum":" 4655","line":"pub const POSIX_FADV = switch (native_arch) {"},
{"lineNum":" 4656","line":"    .s390x => if (@typeInfo(usize).Int.bits == 64) struct {"},
{"lineNum":" 4657","line":"        pub const NORMAL = 0;"},
{"lineNum":" 4658","line":"        pub const RANDOM = 1;"},
{"lineNum":" 4659","line":"        pub const SEQUENTIAL = 2;"},
{"lineNum":" 4660","line":"        pub const WILLNEED = 3;"},
{"lineNum":" 4661","line":"        pub const DONTNEED = 6;"},
{"lineNum":" 4662","line":"        pub const NOREUSE = 7;"},
{"lineNum":" 4663","line":"    } else struct {"},
{"lineNum":" 4664","line":"        pub const NORMAL = 0;"},
{"lineNum":" 4665","line":"        pub const RANDOM = 1;"},
{"lineNum":" 4666","line":"        pub const SEQUENTIAL = 2;"},
{"lineNum":" 4667","line":"        pub const WILLNEED = 3;"},
{"lineNum":" 4668","line":"        pub const DONTNEED = 4;"},
{"lineNum":" 4669","line":"        pub const NOREUSE = 5;"},
{"lineNum":" 4670","line":"    },"},
{"lineNum":" 4671","line":"    else => struct {"},
{"lineNum":" 4672","line":"        pub const NORMAL = 0;"},
{"lineNum":" 4673","line":"        pub const RANDOM = 1;"},
{"lineNum":" 4674","line":"        pub const SEQUENTIAL = 2;"},
{"lineNum":" 4675","line":"        pub const WILLNEED = 3;"},
{"lineNum":" 4676","line":"        pub const DONTNEED = 4;"},
{"lineNum":" 4677","line":"        pub const NOREUSE = 5;"},
{"lineNum":" 4678","line":"    },"},
{"lineNum":" 4679","line":"};"},
{"lineNum":" 4680","line":""},
{"lineNum":" 4681","line":"/// The timespec struct used by the kernel."},
{"lineNum":" 4682","line":"pub const kernel_timespec = if (@sizeOf(usize) >= 8) timespec else extern struct {"},
{"lineNum":" 4683","line":"    tv_sec: i64,"},
{"lineNum":" 4684","line":"    tv_nsec: i64,"},
{"lineNum":" 4685","line":"};"},
{"lineNum":" 4686","line":""},
{"lineNum":" 4687","line":"pub const timespec = extern struct {"},
{"lineNum":" 4688","line":"    tv_sec: isize,"},
{"lineNum":" 4689","line":"    tv_nsec: isize,"},
{"lineNum":" 4690","line":"};"},
{"lineNum":" 4691","line":""},
{"lineNum":" 4692","line":"pub const XDP = struct {"},
{"lineNum":" 4693","line":"    pub const SHARED_UMEM = (1 << 0);"},
{"lineNum":" 4694","line":"    pub const COPY = (1 << 1);"},
{"lineNum":" 4695","line":"    pub const ZEROCOPY = (1 << 2);"},
{"lineNum":" 4696","line":"    pub const UMEM_UNALIGNED_CHUNK_FLAG = (1 << 0);"},
{"lineNum":" 4697","line":"    pub const USE_NEED_WAKEUP = (1 << 3);"},
{"lineNum":" 4698","line":""},
{"lineNum":" 4699","line":"    pub const MMAP_OFFSETS = 1;"},
{"lineNum":" 4700","line":"    pub const RX_RING = 2;"},
{"lineNum":" 4701","line":"    pub const TX_RING = 3;"},
{"lineNum":" 4702","line":"    pub const UMEM_REG = 4;"},
{"lineNum":" 4703","line":"    pub const UMEM_FILL_RING = 5;"},
{"lineNum":" 4704","line":"    pub const UMEM_COMPLETION_RING = 6;"},
{"lineNum":" 4705","line":"    pub const STATISTICS = 7;"},
{"lineNum":" 4706","line":"    pub const OPTIONS = 8;"},
{"lineNum":" 4707","line":""},
{"lineNum":" 4708","line":"    pub const OPTIONS_ZEROCOPY = (1 << 0);"},
{"lineNum":" 4709","line":""},
{"lineNum":" 4710","line":"    pub const PGOFF_RX_RING = 0;"},
{"lineNum":" 4711","line":"    pub const PGOFF_TX_RING = 0x80000000;"},
{"lineNum":" 4712","line":"    pub const UMEM_PGOFF_FILL_RING = 0x100000000;"},
{"lineNum":" 4713","line":"    pub const UMEM_PGOFF_COMPLETION_RING = 0x180000000;"},
{"lineNum":" 4714","line":"};"},
{"lineNum":" 4715","line":""},
{"lineNum":" 4716","line":"pub const xdp_ring_offset = extern struct {"},
{"lineNum":" 4717","line":"    producer: u64,"},
{"lineNum":" 4718","line":"    consumer: u64,"},
{"lineNum":" 4719","line":"    desc: u64,"},
{"lineNum":" 4720","line":"    flags: u64,"},
{"lineNum":" 4721","line":"};"},
{"lineNum":" 4722","line":""},
{"lineNum":" 4723","line":"pub const xdp_mmap_offsets = extern struct {"},
{"lineNum":" 4724","line":"    rx: xdp_ring_offset,"},
{"lineNum":" 4725","line":"    tx: xdp_ring_offset,"},
{"lineNum":" 4726","line":"    fr: xdp_ring_offset,"},
{"lineNum":" 4727","line":"    cr: xdp_ring_offset,"},
{"lineNum":" 4728","line":"};"},
{"lineNum":" 4729","line":""},
{"lineNum":" 4730","line":"pub const xdp_umem_reg = extern struct {"},
{"lineNum":" 4731","line":"    addr: u64,"},
{"lineNum":" 4732","line":"    len: u64,"},
{"lineNum":" 4733","line":"    chunk_size: u32,"},
{"lineNum":" 4734","line":"    headroom: u32,"},
{"lineNum":" 4735","line":"    flags: u32,"},
{"lineNum":" 4736","line":"};"},
{"lineNum":" 4737","line":""},
{"lineNum":" 4738","line":"pub const xdp_statistics = extern struct {"},
{"lineNum":" 4739","line":"    rx_dropped: u64,"},
{"lineNum":" 4740","line":"    rx_invalid_descs: u64,"},
{"lineNum":" 4741","line":"    tx_invalid_descs: u64,"},
{"lineNum":" 4742","line":"    rx_ring_full: u64,"},
{"lineNum":" 4743","line":"    rx_fill_ring_empty_descs: u64,"},
{"lineNum":" 4744","line":"    tx_ring_empty_descs: u64,"},
{"lineNum":" 4745","line":"};"},
{"lineNum":" 4746","line":""},
{"lineNum":" 4747","line":"pub const xdp_options = extern struct {"},
{"lineNum":" 4748","line":"    flags: u32,"},
{"lineNum":" 4749","line":"};"},
{"lineNum":" 4750","line":""},
{"lineNum":" 4751","line":"pub const XSK_UNALIGNED_BUF_OFFSET_SHIFT = 48;"},
{"lineNum":" 4752","line":"pub const XSK_UNALIGNED_BUF_ADDR_MASK = (1 << XSK_UNALIGNED_BUF_OFFSET_SHIFT) - 1;"},
{"lineNum":" 4753","line":""},
{"lineNum":" 4754","line":"pub const xdp_desc = extern struct {"},
{"lineNum":" 4755","line":"    addr: u64,"},
{"lineNum":" 4756","line":"    len: u32,"},
{"lineNum":" 4757","line":"    options: u32,"},
{"lineNum":" 4758","line":"};"},
{"lineNum":" 4759","line":""},
{"lineNum":" 4760","line":"fn issecure_mask(comptime x: comptime_int) comptime_int {"},
{"lineNum":" 4761","line":"    return 1 << x;"},
{"lineNum":" 4762","line":"}"},
{"lineNum":" 4763","line":""},
{"lineNum":" 4764","line":"pub const SECUREBITS_DEFAULT = 0x00000000;"},
{"lineNum":" 4765","line":""},
{"lineNum":" 4766","line":"pub const SECURE_NOROOT = 0;"},
{"lineNum":" 4767","line":"pub const SECURE_NOROOT_LOCKED = 1;"},
{"lineNum":" 4768","line":""},
{"lineNum":" 4769","line":"pub const SECBIT_NOROOT = issecure_mask(SECURE_NOROOT);"},
{"lineNum":" 4770","line":"pub const SECBIT_NOROOT_LOCKED = issecure_mask(SECURE_NOROOT_LOCKED);"},
{"lineNum":" 4771","line":""},
{"lineNum":" 4772","line":"pub const SECURE_NO_SETUID_FIXUP = 2;"},
{"lineNum":" 4773","line":"pub const SECURE_NO_SETUID_FIXUP_LOCKED = 3;"},
{"lineNum":" 4774","line":""},
{"lineNum":" 4775","line":"pub const SECBIT_NO_SETUID_FIXUP = issecure_mask(SECURE_NO_SETUID_FIXUP);"},
{"lineNum":" 4776","line":"pub const SECBIT_NO_SETUID_FIXUP_LOCKED = issecure_mask(SECURE_NO_SETUID_FIXUP_LOCKED);"},
{"lineNum":" 4777","line":""},
{"lineNum":" 4778","line":"pub const SECURE_KEEP_CAPS = 4;"},
{"lineNum":" 4779","line":"pub const SECURE_KEEP_CAPS_LOCKED = 5;"},
{"lineNum":" 4780","line":""},
{"lineNum":" 4781","line":"pub const SECBIT_KEEP_CAPS = issecure_mask(SECURE_KEEP_CAPS);"},
{"lineNum":" 4782","line":"pub const SECBIT_KEEP_CAPS_LOCKED = issecure_mask(SECURE_KEEP_CAPS_LOCKED);"},
{"lineNum":" 4783","line":""},
{"lineNum":" 4784","line":"pub const SECURE_NO_CAP_AMBIENT_RAISE = 6;"},
{"lineNum":" 4785","line":"pub const SECURE_NO_CAP_AMBIENT_RAISE_LOCKED = 7;"},
{"lineNum":" 4786","line":""},
{"lineNum":" 4787","line":"pub const SECBIT_NO_CAP_AMBIENT_RAISE = issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE);"},
{"lineNum":" 4788","line":"pub const SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED = issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE_LOCKED);"},
{"lineNum":" 4789","line":""},
{"lineNum":" 4790","line":"pub const SECURE_ALL_BITS = issecure_mask(SECURE_NOROOT) |"},
{"lineNum":" 4791","line":"    issecure_mask(SECURE_NO_SETUID_FIXUP) |"},
{"lineNum":" 4792","line":"    issecure_mask(SECURE_KEEP_CAPS) |"},
{"lineNum":" 4793","line":"    issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE);"},
{"lineNum":" 4794","line":"pub const SECURE_ALL_LOCKS = SECURE_ALL_BITS << 1;"},
{"lineNum":" 4795","line":""},
{"lineNum":" 4796","line":"pub const PR = enum(i32) {"},
{"lineNum":" 4797","line":"    SET_PDEATHSIG = 1,"},
{"lineNum":" 4798","line":"    GET_PDEATHSIG = 2,"},
{"lineNum":" 4799","line":""},
{"lineNum":" 4800","line":"    GET_DUMPABLE = 3,"},
{"lineNum":" 4801","line":"    SET_DUMPABLE = 4,"},
{"lineNum":" 4802","line":""},
{"lineNum":" 4803","line":"    GET_UNALIGN = 5,"},
{"lineNum":" 4804","line":"    SET_UNALIGN = 6,"},
{"lineNum":" 4805","line":""},
{"lineNum":" 4806","line":"    GET_KEEPCAPS = 7,"},
{"lineNum":" 4807","line":"    SET_KEEPCAPS = 8,"},
{"lineNum":" 4808","line":""},
{"lineNum":" 4809","line":"    GET_FPEMU = 9,"},
{"lineNum":" 4810","line":"    SET_FPEMU = 10,"},
{"lineNum":" 4811","line":""},
{"lineNum":" 4812","line":"    GET_FPEXC = 11,"},
{"lineNum":" 4813","line":"    SET_FPEXC = 12,"},
{"lineNum":" 4814","line":""},
{"lineNum":" 4815","line":"    GET_TIMING = 13,"},
{"lineNum":" 4816","line":"    SET_TIMING = 14,"},
{"lineNum":" 4817","line":""},
{"lineNum":" 4818","line":"    SET_NAME = 15,"},
{"lineNum":" 4819","line":"    GET_NAME = 16,"},
{"lineNum":" 4820","line":""},
{"lineNum":" 4821","line":"    GET_ENDIAN = 19,"},
{"lineNum":" 4822","line":"    SET_ENDIAN = 20,"},
{"lineNum":" 4823","line":""},
{"lineNum":" 4824","line":"    GET_SECCOMP = 21,"},
{"lineNum":" 4825","line":"    SET_SECCOMP = 22,"},
{"lineNum":" 4826","line":""},
{"lineNum":" 4827","line":"    CAPBSET_READ = 23,"},
{"lineNum":" 4828","line":"    CAPBSET_DROP = 24,"},
{"lineNum":" 4829","line":""},
{"lineNum":" 4830","line":"    GET_TSC = 25,"},
{"lineNum":" 4831","line":"    SET_TSC = 26,"},
{"lineNum":" 4832","line":""},
{"lineNum":" 4833","line":"    GET_SECUREBITS = 27,"},
{"lineNum":" 4834","line":"    SET_SECUREBITS = 28,"},
{"lineNum":" 4835","line":""},
{"lineNum":" 4836","line":"    SET_TIMERSLACK = 29,"},
{"lineNum":" 4837","line":"    GET_TIMERSLACK = 30,"},
{"lineNum":" 4838","line":""},
{"lineNum":" 4839","line":"    TASK_PERF_EVENTS_DISABLE = 31,"},
{"lineNum":" 4840","line":"    TASK_PERF_EVENTS_ENABLE = 32,"},
{"lineNum":" 4841","line":""},
{"lineNum":" 4842","line":"    MCE_KILL = 33,"},
{"lineNum":" 4843","line":""},
{"lineNum":" 4844","line":"    MCE_KILL_GET = 34,"},
{"lineNum":" 4845","line":""},
{"lineNum":" 4846","line":"    SET_MM = 35,"},
{"lineNum":" 4847","line":""},
{"lineNum":" 4848","line":"    SET_PTRACER = 0x59616d61,"},
{"lineNum":" 4849","line":""},
{"lineNum":" 4850","line":"    SET_CHILD_SUBREAPER = 36,"},
{"lineNum":" 4851","line":"    GET_CHILD_SUBREAPER = 37,"},
{"lineNum":" 4852","line":""},
{"lineNum":" 4853","line":"    SET_NO_NEW_PRIVS = 38,"},
{"lineNum":" 4854","line":"    GET_NO_NEW_PRIVS = 39,"},
{"lineNum":" 4855","line":""},
{"lineNum":" 4856","line":"    GET_TID_ADDRESS = 40,"},
{"lineNum":" 4857","line":""},
{"lineNum":" 4858","line":"    SET_THP_DISABLE = 41,"},
{"lineNum":" 4859","line":"    GET_THP_DISABLE = 42,"},
{"lineNum":" 4860","line":""},
{"lineNum":" 4861","line":"    MPX_ENABLE_MANAGEMENT = 43,"},
{"lineNum":" 4862","line":"    MPX_DISABLE_MANAGEMENT = 44,"},
{"lineNum":" 4863","line":""},
{"lineNum":" 4864","line":"    SET_FP_MODE = 45,"},
{"lineNum":" 4865","line":"    GET_FP_MODE = 46,"},
{"lineNum":" 4866","line":""},
{"lineNum":" 4867","line":"    CAP_AMBIENT = 47,"},
{"lineNum":" 4868","line":""},
{"lineNum":" 4869","line":"    SVE_SET_VL = 50,"},
{"lineNum":" 4870","line":"    SVE_GET_VL = 51,"},
{"lineNum":" 4871","line":""},
{"lineNum":" 4872","line":"    GET_SPECULATION_CTRL = 52,"},
{"lineNum":" 4873","line":"    SET_SPECULATION_CTRL = 53,"},
{"lineNum":" 4874","line":""},
{"lineNum":" 4875","line":"    _,"},
{"lineNum":" 4876","line":""},
{"lineNum":" 4877","line":"    pub const UNALIGN_NOPRINT = 1;"},
{"lineNum":" 4878","line":"    pub const UNALIGN_SIGBUS = 2;"},
{"lineNum":" 4879","line":""},
{"lineNum":" 4880","line":"    pub const FPEMU_NOPRINT = 1;"},
{"lineNum":" 4881","line":"    pub const FPEMU_SIGFPE = 2;"},
{"lineNum":" 4882","line":""},
{"lineNum":" 4883","line":"    pub const FP_EXC_SW_ENABLE = 0x80;"},
{"lineNum":" 4884","line":"    pub const FP_EXC_DIV = 0x010000;"},
{"lineNum":" 4885","line":"    pub const FP_EXC_OVF = 0x020000;"},
{"lineNum":" 4886","line":"    pub const FP_EXC_UND = 0x040000;"},
{"lineNum":" 4887","line":"    pub const FP_EXC_RES = 0x080000;"},
{"lineNum":" 4888","line":"    pub const FP_EXC_INV = 0x100000;"},
{"lineNum":" 4889","line":"    pub const FP_EXC_DISABLED = 0;"},
{"lineNum":" 4890","line":"    pub const FP_EXC_NONRECOV = 1;"},
{"lineNum":" 4891","line":"    pub const FP_EXC_ASYNC = 2;"},
{"lineNum":" 4892","line":"    pub const FP_EXC_PRECISE = 3;"},
{"lineNum":" 4893","line":""},
{"lineNum":" 4894","line":"    pub const TIMING_STATISTICAL = 0;"},
{"lineNum":" 4895","line":"    pub const TIMING_TIMESTAMP = 1;"},
{"lineNum":" 4896","line":""},
{"lineNum":" 4897","line":"    pub const ENDIAN_BIG = 0;"},
{"lineNum":" 4898","line":"    pub const ENDIAN_LITTLE = 1;"},
{"lineNum":" 4899","line":"    pub const ENDIAN_PPC_LITTLE = 2;"},
{"lineNum":" 4900","line":""},
{"lineNum":" 4901","line":"    pub const TSC_ENABLE = 1;"},
{"lineNum":" 4902","line":"    pub const TSC_SIGSEGV = 2;"},
{"lineNum":" 4903","line":""},
{"lineNum":" 4904","line":"    pub const MCE_KILL_CLEAR = 0;"},
{"lineNum":" 4905","line":"    pub const MCE_KILL_SET = 1;"},
{"lineNum":" 4906","line":""},
{"lineNum":" 4907","line":"    pub const MCE_KILL_LATE = 0;"},
{"lineNum":" 4908","line":"    pub const MCE_KILL_EARLY = 1;"},
{"lineNum":" 4909","line":"    pub const MCE_KILL_DEFAULT = 2;"},
{"lineNum":" 4910","line":""},
{"lineNum":" 4911","line":"    pub const SET_MM_START_CODE = 1;"},
{"lineNum":" 4912","line":"    pub const SET_MM_END_CODE = 2;"},
{"lineNum":" 4913","line":"    pub const SET_MM_START_DATA = 3;"},
{"lineNum":" 4914","line":"    pub const SET_MM_END_DATA = 4;"},
{"lineNum":" 4915","line":"    pub const SET_MM_START_STACK = 5;"},
{"lineNum":" 4916","line":"    pub const SET_MM_START_BRK = 6;"},
{"lineNum":" 4917","line":"    pub const SET_MM_BRK = 7;"},
{"lineNum":" 4918","line":"    pub const SET_MM_ARG_START = 8;"},
{"lineNum":" 4919","line":"    pub const SET_MM_ARG_END = 9;"},
{"lineNum":" 4920","line":"    pub const SET_MM_ENV_START = 10;"},
{"lineNum":" 4921","line":"    pub const SET_MM_ENV_END = 11;"},
{"lineNum":" 4922","line":"    pub const SET_MM_AUXV = 12;"},
{"lineNum":" 4923","line":"    pub const SET_MM_EXE_FILE = 13;"},
{"lineNum":" 4924","line":"    pub const SET_MM_MAP = 14;"},
{"lineNum":" 4925","line":"    pub const SET_MM_MAP_SIZE = 15;"},
{"lineNum":" 4926","line":""},
{"lineNum":" 4927","line":"    pub const SET_PTRACER_ANY = std.math.maxInt(c_ulong);"},
{"lineNum":" 4928","line":""},
{"lineNum":" 4929","line":"    pub const FP_MODE_FR = 1 << 0;"},
{"lineNum":" 4930","line":"    pub const FP_MODE_FRE = 1 << 1;"},
{"lineNum":" 4931","line":""},
{"lineNum":" 4932","line":"    pub const CAP_AMBIENT_IS_SET = 1;"},
{"lineNum":" 4933","line":"    pub const CAP_AMBIENT_RAISE = 2;"},
{"lineNum":" 4934","line":"    pub const CAP_AMBIENT_LOWER = 3;"},
{"lineNum":" 4935","line":"    pub const CAP_AMBIENT_CLEAR_ALL = 4;"},
{"lineNum":" 4936","line":""},
{"lineNum":" 4937","line":"    pub const SVE_SET_VL_ONEXEC = 1 << 18;"},
{"lineNum":" 4938","line":"    pub const SVE_VL_LEN_MASK = 0xffff;"},
{"lineNum":" 4939","line":"    pub const SVE_VL_INHERIT = 1 << 17;"},
{"lineNum":" 4940","line":""},
{"lineNum":" 4941","line":"    pub const SPEC_STORE_BYPASS = 0;"},
{"lineNum":" 4942","line":"    pub const SPEC_NOT_AFFECTED = 0;"},
{"lineNum":" 4943","line":"    pub const SPEC_PRCTL = 1 << 0;"},
{"lineNum":" 4944","line":"    pub const SPEC_ENABLE = 1 << 1;"},
{"lineNum":" 4945","line":"    pub const SPEC_DISABLE = 1 << 2;"},
{"lineNum":" 4946","line":"    pub const SPEC_FORCE_DISABLE = 1 << 3;"},
{"lineNum":" 4947","line":"};"},
{"lineNum":" 4948","line":""},
{"lineNum":" 4949","line":"pub const prctl_mm_map = extern struct {"},
{"lineNum":" 4950","line":"    start_code: u64,"},
{"lineNum":" 4951","line":"    end_code: u64,"},
{"lineNum":" 4952","line":"    start_data: u64,"},
{"lineNum":" 4953","line":"    end_data: u64,"},
{"lineNum":" 4954","line":"    start_brk: u64,"},
{"lineNum":" 4955","line":"    brk: u64,"},
{"lineNum":" 4956","line":"    start_stack: u64,"},
{"lineNum":" 4957","line":"    arg_start: u64,"},
{"lineNum":" 4958","line":"    arg_end: u64,"},
{"lineNum":" 4959","line":"    env_start: u64,"},
{"lineNum":" 4960","line":"    env_end: u64,"},
{"lineNum":" 4961","line":"    auxv: *u64,"},
{"lineNum":" 4962","line":"    auxv_size: u32,"},
{"lineNum":" 4963","line":"    exe_fd: u32,"},
{"lineNum":" 4964","line":"};"},
{"lineNum":" 4965","line":""},
{"lineNum":" 4966","line":"pub const NETLINK = struct {"},
{"lineNum":" 4967","line":"    /// Routing/device hook"},
{"lineNum":" 4968","line":"    pub const ROUTE = 0;"},
{"lineNum":" 4969","line":""},
{"lineNum":" 4970","line":"    /// Unused number"},
{"lineNum":" 4971","line":"    pub const UNUSED = 1;"},
{"lineNum":" 4972","line":""},
{"lineNum":" 4973","line":"    /// Reserved for user mode socket protocols"},
{"lineNum":" 4974","line":"    pub const USERSOCK = 2;"},
{"lineNum":" 4975","line":""},
{"lineNum":" 4976","line":"    /// Unused number, formerly ip_queue"},
{"lineNum":" 4977","line":"    pub const FIREWALL = 3;"},
{"lineNum":" 4978","line":""},
{"lineNum":" 4979","line":"    /// socket monitoring"},
{"lineNum":" 4980","line":"    pub const SOCK_DIAG = 4;"},
{"lineNum":" 4981","line":""},
{"lineNum":" 4982","line":"    /// netfilter/iptables ULOG"},
{"lineNum":" 4983","line":"    pub const NFLOG = 5;"},
{"lineNum":" 4984","line":""},
{"lineNum":" 4985","line":"    /// ipsec"},
{"lineNum":" 4986","line":"    pub const XFRM = 6;"},
{"lineNum":" 4987","line":""},
{"lineNum":" 4988","line":"    /// SELinux event notifications"},
{"lineNum":" 4989","line":"    pub const SELINUX = 7;"},
{"lineNum":" 4990","line":""},
{"lineNum":" 4991","line":"    /// Open-iSCSI"},
{"lineNum":" 4992","line":"    pub const ISCSI = 8;"},
{"lineNum":" 4993","line":""},
{"lineNum":" 4994","line":"    /// auditing"},
{"lineNum":" 4995","line":"    pub const AUDIT = 9;"},
{"lineNum":" 4996","line":""},
{"lineNum":" 4997","line":"    pub const FIB_LOOKUP = 10;"},
{"lineNum":" 4998","line":""},
{"lineNum":" 4999","line":"    pub const CONNECTOR = 11;"},
{"lineNum":" 5000","line":""},
{"lineNum":" 5001","line":"    /// netfilter subsystem"},
{"lineNum":" 5002","line":"    pub const NETFILTER = 12;"},
{"lineNum":" 5003","line":""},
{"lineNum":" 5004","line":"    pub const IP6_FW = 13;"},
{"lineNum":" 5005","line":""},
{"lineNum":" 5006","line":"    /// DECnet routing messages"},
{"lineNum":" 5007","line":"    pub const DNRTMSG = 14;"},
{"lineNum":" 5008","line":""},
{"lineNum":" 5009","line":"    /// Kernel messages to userspace"},
{"lineNum":" 5010","line":"    pub const KOBJECT_UEVENT = 15;"},
{"lineNum":" 5011","line":""},
{"lineNum":" 5012","line":"    pub const GENERIC = 16;"},
{"lineNum":" 5013","line":""},
{"lineNum":" 5014","line":"    // leave room for NETLINK_DM (DM Events)"},
{"lineNum":" 5015","line":""},
{"lineNum":" 5016","line":"    /// SCSI Transports"},
{"lineNum":" 5017","line":"    pub const SCSITRANSPORT = 18;"},
{"lineNum":" 5018","line":""},
{"lineNum":" 5019","line":"    pub const ECRYPTFS = 19;"},
{"lineNum":" 5020","line":""},
{"lineNum":" 5021","line":"    pub const RDMA = 20;"},
{"lineNum":" 5022","line":""},
{"lineNum":" 5023","line":"    /// Crypto layer"},
{"lineNum":" 5024","line":"    pub const CRYPTO = 21;"},
{"lineNum":" 5025","line":""},
{"lineNum":" 5026","line":"    /// SMC monitoring"},
{"lineNum":" 5027","line":"    pub const SMC = 22;"},
{"lineNum":" 5028","line":"};"},
{"lineNum":" 5029","line":""},
{"lineNum":" 5030","line":"// Flags values"},
{"lineNum":" 5031","line":""},
{"lineNum":" 5032","line":"/// It is request message."},
{"lineNum":" 5033","line":"pub const NLM_F_REQUEST = 0x01;"},
{"lineNum":" 5034","line":""},
{"lineNum":" 5035","line":"/// Multipart message, terminated by NLMSG_DONE"},
{"lineNum":" 5036","line":"pub const NLM_F_MULTI = 0x02;"},
{"lineNum":" 5037","line":""},
{"lineNum":" 5038","line":"/// Reply with ack, with zero or error code"},
{"lineNum":" 5039","line":"pub const NLM_F_ACK = 0x04;"},
{"lineNum":" 5040","line":""},
{"lineNum":" 5041","line":"/// Echo this request"},
{"lineNum":" 5042","line":"pub const NLM_F_ECHO = 0x08;"},
{"lineNum":" 5043","line":""},
{"lineNum":" 5044","line":"/// Dump was inconsistent due to sequence change"},
{"lineNum":" 5045","line":"pub const NLM_F_DUMP_INTR = 0x10;"},
{"lineNum":" 5046","line":""},
{"lineNum":" 5047","line":"/// Dump was filtered as requested"},
{"lineNum":" 5048","line":"pub const NLM_F_DUMP_FILTERED = 0x20;"},
{"lineNum":" 5049","line":""},
{"lineNum":" 5050","line":"// Modifiers to GET request"},
{"lineNum":" 5051","line":""},
{"lineNum":" 5052","line":"/// specify tree root"},
{"lineNum":" 5053","line":"pub const NLM_F_ROOT = 0x100;"},
{"lineNum":" 5054","line":""},
{"lineNum":" 5055","line":"/// return all matching"},
{"lineNum":" 5056","line":"pub const NLM_F_MATCH = 0x200;"},
{"lineNum":" 5057","line":""},
{"lineNum":" 5058","line":"/// atomic GET"},
{"lineNum":" 5059","line":"pub const NLM_F_ATOMIC = 0x400;"},
{"lineNum":" 5060","line":"pub const NLM_F_DUMP = NLM_F_ROOT | NLM_F_MATCH;"},
{"lineNum":" 5061","line":""},
{"lineNum":" 5062","line":"// Modifiers to NEW request"},
{"lineNum":" 5063","line":""},
{"lineNum":" 5064","line":"/// Override existing"},
{"lineNum":" 5065","line":"pub const NLM_F_REPLACE = 0x100;"},
{"lineNum":" 5066","line":""},
{"lineNum":" 5067","line":"/// Do not touch, if it exists"},
{"lineNum":" 5068","line":"pub const NLM_F_EXCL = 0x200;"},
{"lineNum":" 5069","line":""},
{"lineNum":" 5070","line":"/// Create, if it does not exist"},
{"lineNum":" 5071","line":"pub const NLM_F_CREATE = 0x400;"},
{"lineNum":" 5072","line":""},
{"lineNum":" 5073","line":"/// Add to end of list"},
{"lineNum":" 5074","line":"pub const NLM_F_APPEND = 0x800;"},
{"lineNum":" 5075","line":""},
{"lineNum":" 5076","line":"// Modifiers to DELETE request"},
{"lineNum":" 5077","line":""},
{"lineNum":" 5078","line":"/// Do not delete recursively"},
{"lineNum":" 5079","line":"pub const NLM_F_NONREC = 0x100;"},
{"lineNum":" 5080","line":""},
{"lineNum":" 5081","line":"// Flags for ACK message"},
{"lineNum":" 5082","line":""},
{"lineNum":" 5083","line":"/// request was capped"},
{"lineNum":" 5084","line":"pub const NLM_F_CAPPED = 0x100;"},
{"lineNum":" 5085","line":""},
{"lineNum":" 5086","line":"/// extended ACK TVLs were included"},
{"lineNum":" 5087","line":"pub const NLM_F_ACK_TLVS = 0x200;"},
{"lineNum":" 5088","line":""},
{"lineNum":" 5089","line":"pub const NetlinkMessageType = enum(u16) {"},
{"lineNum":" 5090","line":"    /// < 0x10: reserved control messages"},
{"lineNum":" 5091","line":"    pub const MIN_TYPE = 0x10;"},
{"lineNum":" 5092","line":""},
{"lineNum":" 5093","line":"    /// Nothing."},
{"lineNum":" 5094","line":"    NOOP = 0x1,"},
{"lineNum":" 5095","line":""},
{"lineNum":" 5096","line":"    /// Error"},
{"lineNum":" 5097","line":"    ERROR = 0x2,"},
{"lineNum":" 5098","line":""},
{"lineNum":" 5099","line":"    /// End of a dump"},
{"lineNum":" 5100","line":"    DONE = 0x3,"},
{"lineNum":" 5101","line":""},
{"lineNum":" 5102","line":"    /// Data lost"},
{"lineNum":" 5103","line":"    OVERRUN = 0x4,"},
{"lineNum":" 5104","line":""},
{"lineNum":" 5105","line":"    // rtlink types"},
{"lineNum":" 5106","line":""},
{"lineNum":" 5107","line":"    RTM_NEWLINK = 16,"},
{"lineNum":" 5108","line":"    RTM_DELLINK,"},
{"lineNum":" 5109","line":"    RTM_GETLINK,"},
{"lineNum":" 5110","line":"    RTM_SETLINK,"},
{"lineNum":" 5111","line":""},
{"lineNum":" 5112","line":"    RTM_NEWADDR = 20,"},
{"lineNum":" 5113","line":"    RTM_DELADDR,"},
{"lineNum":" 5114","line":"    RTM_GETADDR,"},
{"lineNum":" 5115","line":""},
{"lineNum":" 5116","line":"    RTM_NEWROUTE = 24,"},
{"lineNum":" 5117","line":"    RTM_DELROUTE,"},
{"lineNum":" 5118","line":"    RTM_GETROUTE,"},
{"lineNum":" 5119","line":""},
{"lineNum":" 5120","line":"    RTM_NEWNEIGH = 28,"},
{"lineNum":" 5121","line":"    RTM_DELNEIGH,"},
{"lineNum":" 5122","line":"    RTM_GETNEIGH,"},
{"lineNum":" 5123","line":""},
{"lineNum":" 5124","line":"    RTM_NEWRULE = 32,"},
{"lineNum":" 5125","line":"    RTM_DELRULE,"},
{"lineNum":" 5126","line":"    RTM_GETRULE,"},
{"lineNum":" 5127","line":""},
{"lineNum":" 5128","line":"    RTM_NEWQDISC = 36,"},
{"lineNum":" 5129","line":"    RTM_DELQDISC,"},
{"lineNum":" 5130","line":"    RTM_GETQDISC,"},
{"lineNum":" 5131","line":""},
{"lineNum":" 5132","line":"    RTM_NEWTCLASS = 40,"},
{"lineNum":" 5133","line":"    RTM_DELTCLASS,"},
{"lineNum":" 5134","line":"    RTM_GETTCLASS,"},
{"lineNum":" 5135","line":""},
{"lineNum":" 5136","line":"    RTM_NEWTFILTER = 44,"},
{"lineNum":" 5137","line":"    RTM_DELTFILTER,"},
{"lineNum":" 5138","line":"    RTM_GETTFILTER,"},
{"lineNum":" 5139","line":""},
{"lineNum":" 5140","line":"    RTM_NEWACTION = 48,"},
{"lineNum":" 5141","line":"    RTM_DELACTION,"},
{"lineNum":" 5142","line":"    RTM_GETACTION,"},
{"lineNum":" 5143","line":""},
{"lineNum":" 5144","line":"    RTM_NEWPREFIX = 52,"},
{"lineNum":" 5145","line":""},
{"lineNum":" 5146","line":"    RTM_GETMULTICAST = 58,"},
{"lineNum":" 5147","line":""},
{"lineNum":" 5148","line":"    RTM_GETANYCAST = 62,"},
{"lineNum":" 5149","line":""},
{"lineNum":" 5150","line":"    RTM_NEWNEIGHTBL = 64,"},
{"lineNum":" 5151","line":"    RTM_GETNEIGHTBL = 66,"},
{"lineNum":" 5152","line":"    RTM_SETNEIGHTBL,"},
{"lineNum":" 5153","line":""},
{"lineNum":" 5154","line":"    RTM_NEWNDUSEROPT = 68,"},
{"lineNum":" 5155","line":""},
{"lineNum":" 5156","line":"    RTM_NEWADDRLABEL = 72,"},
{"lineNum":" 5157","line":"    RTM_DELADDRLABEL,"},
{"lineNum":" 5158","line":"    RTM_GETADDRLABEL,"},
{"lineNum":" 5159","line":""},
{"lineNum":" 5160","line":"    RTM_GETDCB = 78,"},
{"lineNum":" 5161","line":"    RTM_SETDCB,"},
{"lineNum":" 5162","line":""},
{"lineNum":" 5163","line":"    RTM_NEWNETCONF = 80,"},
{"lineNum":" 5164","line":"    RTM_DELNETCONF,"},
{"lineNum":" 5165","line":"    RTM_GETNETCONF = 82,"},
{"lineNum":" 5166","line":""},
{"lineNum":" 5167","line":"    RTM_NEWMDB = 84,"},
{"lineNum":" 5168","line":"    RTM_DELMDB = 85,"},
{"lineNum":" 5169","line":"    RTM_GETMDB = 86,"},
{"lineNum":" 5170","line":""},
{"lineNum":" 5171","line":"    RTM_NEWNSID = 88,"},
{"lineNum":" 5172","line":"    RTM_DELNSID = 89,"},
{"lineNum":" 5173","line":"    RTM_GETNSID = 90,"},
{"lineNum":" 5174","line":""},
{"lineNum":" 5175","line":"    RTM_NEWSTATS = 92,"},
{"lineNum":" 5176","line":"    RTM_GETSTATS = 94,"},
{"lineNum":" 5177","line":""},
{"lineNum":" 5178","line":"    RTM_NEWCACHEREPORT = 96,"},
{"lineNum":" 5179","line":""},
{"lineNum":" 5180","line":"    RTM_NEWCHAIN = 100,"},
{"lineNum":" 5181","line":"    RTM_DELCHAIN,"},
{"lineNum":" 5182","line":"    RTM_GETCHAIN,"},
{"lineNum":" 5183","line":""},
{"lineNum":" 5184","line":"    RTM_NEWNEXTHOP = 104,"},
{"lineNum":" 5185","line":"    RTM_DELNEXTHOP,"},
{"lineNum":" 5186","line":"    RTM_GETNEXTHOP,"},
{"lineNum":" 5187","line":""},
{"lineNum":" 5188","line":"    _,"},
{"lineNum":" 5189","line":"};"},
{"lineNum":" 5190","line":""},
{"lineNum":" 5191","line":"/// Netlink message header"},
{"lineNum":" 5192","line":"/// Specified in RFC 3549 Section 2.3.2"},
{"lineNum":" 5193","line":"pub const nlmsghdr = extern struct {"},
{"lineNum":" 5194","line":"    /// Length of message including header"},
{"lineNum":" 5195","line":"    len: u32,"},
{"lineNum":" 5196","line":""},
{"lineNum":" 5197","line":"    /// Message content"},
{"lineNum":" 5198","line":"    type: NetlinkMessageType,"},
{"lineNum":" 5199","line":""},
{"lineNum":" 5200","line":"    /// Additional flags"},
{"lineNum":" 5201","line":"    flags: u16,"},
{"lineNum":" 5202","line":""},
{"lineNum":" 5203","line":"    /// Sequence number"},
{"lineNum":" 5204","line":"    seq: u32,"},
{"lineNum":" 5205","line":""},
{"lineNum":" 5206","line":"    /// Sending process port ID"},
{"lineNum":" 5207","line":"    pid: u32,"},
{"lineNum":" 5208","line":"};"},
{"lineNum":" 5209","line":""},
{"lineNum":" 5210","line":"pub const ifinfomsg = extern struct {"},
{"lineNum":" 5211","line":"    family: u8,"},
{"lineNum":" 5212","line":"    __pad1: u8 = 0,"},
{"lineNum":" 5213","line":""},
{"lineNum":" 5214","line":"    /// ARPHRD_*"},
{"lineNum":" 5215","line":"    type: c_ushort,"},
{"lineNum":" 5216","line":""},
{"lineNum":" 5217","line":"    /// Link index"},
{"lineNum":" 5218","line":"    index: c_int,"},
{"lineNum":" 5219","line":""},
{"lineNum":" 5220","line":"    /// IFF_* flags"},
{"lineNum":" 5221","line":"    flags: c_uint,"},
{"lineNum":" 5222","line":""},
{"lineNum":" 5223","line":"    /// IFF_* change mask"},
{"lineNum":" 5224","line":"    change: c_uint,"},
{"lineNum":" 5225","line":"};"},
{"lineNum":" 5226","line":""},
{"lineNum":" 5227","line":"pub const rtattr = extern struct {"},
{"lineNum":" 5228","line":"    /// Length of option"},
{"lineNum":" 5229","line":"    len: c_ushort,"},
{"lineNum":" 5230","line":""},
{"lineNum":" 5231","line":"    /// Type of option"},
{"lineNum":" 5232","line":"    type: IFLA,"},
{"lineNum":" 5233","line":""},
{"lineNum":" 5234","line":"    pub const ALIGNTO = 4;"},
{"lineNum":" 5235","line":"};"},
{"lineNum":" 5236","line":""},
{"lineNum":" 5237","line":"pub const IFLA = enum(c_ushort) {"},
{"lineNum":" 5238","line":"    UNSPEC,"},
{"lineNum":" 5239","line":"    ADDRESS,"},
{"lineNum":" 5240","line":"    BROADCAST,"},
{"lineNum":" 5241","line":"    IFNAME,"},
{"lineNum":" 5242","line":"    MTU,"},
{"lineNum":" 5243","line":"    LINK,"},
{"lineNum":" 5244","line":"    QDISC,"},
{"lineNum":" 5245","line":"    STATS,"},
{"lineNum":" 5246","line":"    COST,"},
{"lineNum":" 5247","line":"    PRIORITY,"},
{"lineNum":" 5248","line":"    MASTER,"},
{"lineNum":" 5249","line":""},
{"lineNum":" 5250","line":"    /// Wireless Extension event"},
{"lineNum":" 5251","line":"    WIRELESS,"},
{"lineNum":" 5252","line":""},
{"lineNum":" 5253","line":"    /// Protocol specific information for a link"},
{"lineNum":" 5254","line":"    PROTINFO,"},
{"lineNum":" 5255","line":""},
{"lineNum":" 5256","line":"    TXQLEN,"},
{"lineNum":" 5257","line":"    MAP,"},
{"lineNum":" 5258","line":"    WEIGHT,"},
{"lineNum":" 5259","line":"    OPERSTATE,"},
{"lineNum":" 5260","line":"    LINKMODE,"},
{"lineNum":" 5261","line":"    LINKINFO,"},
{"lineNum":" 5262","line":"    NET_NS_PID,"},
{"lineNum":" 5263","line":"    IFALIAS,"},
{"lineNum":" 5264","line":""},
{"lineNum":" 5265","line":"    /// Number of VFs if device is SR-IOV PF"},
{"lineNum":" 5266","line":"    NUM_VF,"},
{"lineNum":" 5267","line":""},
{"lineNum":" 5268","line":"    VFINFO_LIST,"},
{"lineNum":" 5269","line":"    STATS64,"},
{"lineNum":" 5270","line":"    VF_PORTS,"},
{"lineNum":" 5271","line":"    PORT_SELF,"},
{"lineNum":" 5272","line":"    AF_SPEC,"},
{"lineNum":" 5273","line":""},
{"lineNum":" 5274","line":"    /// Group the device belongs to"},
{"lineNum":" 5275","line":"    GROUP,"},
{"lineNum":" 5276","line":""},
{"lineNum":" 5277","line":"    NET_NS_FD,"},
{"lineNum":" 5278","line":""},
{"lineNum":" 5279","line":"    /// Extended info mask, VFs, etc"},
{"lineNum":" 5280","line":"    EXT_MASK,"},
{"lineNum":" 5281","line":""},
{"lineNum":" 5282","line":"    /// Promiscuity count: > 0 means acts PROMISC"},
{"lineNum":" 5283","line":"    PROMISCUITY,"},
{"lineNum":" 5284","line":""},
{"lineNum":" 5285","line":"    NUM_TX_QUEUES,"},
{"lineNum":" 5286","line":"    NUM_RX_QUEUES,"},
{"lineNum":" 5287","line":"    CARRIER,"},
{"lineNum":" 5288","line":"    PHYS_PORT_ID,"},
{"lineNum":" 5289","line":"    CARRIER_CHANGES,"},
{"lineNum":" 5290","line":"    PHYS_SWITCH_ID,"},
{"lineNum":" 5291","line":"    LINK_NETNSID,"},
{"lineNum":" 5292","line":"    PHYS_PORT_NAME,"},
{"lineNum":" 5293","line":"    PROTO_DOWN,"},
{"lineNum":" 5294","line":"    GSO_MAX_SEGS,"},
{"lineNum":" 5295","line":"    GSO_MAX_SIZE,"},
{"lineNum":" 5296","line":"    PAD,"},
{"lineNum":" 5297","line":"    XDP,"},
{"lineNum":" 5298","line":"    EVENT,"},
{"lineNum":" 5299","line":""},
{"lineNum":" 5300","line":"    NEW_NETNSID,"},
{"lineNum":" 5301","line":"    IF_NETNSID,"},
{"lineNum":" 5302","line":""},
{"lineNum":" 5303","line":"    CARRIER_UP_COUNT,"},
{"lineNum":" 5304","line":"    CARRIER_DOWN_COUNT,"},
{"lineNum":" 5305","line":"    NEW_IFINDEX,"},
{"lineNum":" 5306","line":"    MIN_MTU,"},
{"lineNum":" 5307","line":"    MAX_MTU,"},
{"lineNum":" 5308","line":""},
{"lineNum":" 5309","line":"    _,"},
{"lineNum":" 5310","line":""},
{"lineNum":" 5311","line":"    pub const TARGET_NETNSID: IFLA = .IF_NETNSID;"},
{"lineNum":" 5312","line":"};"},
{"lineNum":" 5313","line":""},
{"lineNum":" 5314","line":"pub const rtnl_link_ifmap = extern struct {"},
{"lineNum":" 5315","line":"    mem_start: u64,"},
{"lineNum":" 5316","line":"    mem_end: u64,"},
{"lineNum":" 5317","line":"    base_addr: u64,"},
{"lineNum":" 5318","line":"    irq: u16,"},
{"lineNum":" 5319","line":"    dma: u8,"},
{"lineNum":" 5320","line":"    port: u8,"},
{"lineNum":" 5321","line":"};"},
{"lineNum":" 5322","line":""},
{"lineNum":" 5323","line":"pub const rtnl_link_stats = extern struct {"},
{"lineNum":" 5324","line":"    /// total packets received"},
{"lineNum":" 5325","line":"    rx_packets: u32,"},
{"lineNum":" 5326","line":""},
{"lineNum":" 5327","line":"    /// total packets transmitted"},
{"lineNum":" 5328","line":"    tx_packets: u32,"},
{"lineNum":" 5329","line":""},
{"lineNum":" 5330","line":"    /// total bytes received"},
{"lineNum":" 5331","line":"    rx_bytes: u32,"},
{"lineNum":" 5332","line":""},
{"lineNum":" 5333","line":"    /// total bytes transmitted"},
{"lineNum":" 5334","line":"    tx_bytes: u32,"},
{"lineNum":" 5335","line":""},
{"lineNum":" 5336","line":"    /// bad packets received"},
{"lineNum":" 5337","line":"    rx_errors: u32,"},
{"lineNum":" 5338","line":""},
{"lineNum":" 5339","line":"    /// packet transmit problems"},
{"lineNum":" 5340","line":"    tx_errors: u32,"},
{"lineNum":" 5341","line":""},
{"lineNum":" 5342","line":"    /// no space in linux buffers"},
{"lineNum":" 5343","line":"    rx_dropped: u32,"},
{"lineNum":" 5344","line":""},
{"lineNum":" 5345","line":"    /// no space available in linux"},
{"lineNum":" 5346","line":"    tx_dropped: u32,"},
{"lineNum":" 5347","line":""},
{"lineNum":" 5348","line":"    /// multicast packets received"},
{"lineNum":" 5349","line":"    multicast: u32,"},
{"lineNum":" 5350","line":""},
{"lineNum":" 5351","line":"    collisions: u32,"},
{"lineNum":" 5352","line":""},
{"lineNum":" 5353","line":"    // detailed rx_errors"},
{"lineNum":" 5354","line":""},
{"lineNum":" 5355","line":"    rx_length_errors: u32,"},
{"lineNum":" 5356","line":""},
{"lineNum":" 5357","line":"    /// receiver ring buff overflow"},
{"lineNum":" 5358","line":"    rx_over_errors: u32,"},
{"lineNum":" 5359","line":""},
{"lineNum":" 5360","line":"    /// recved pkt with crc error"},
{"lineNum":" 5361","line":"    rx_crc_errors: u32,"},
{"lineNum":" 5362","line":""},
{"lineNum":" 5363","line":"    /// recv\'d frame alignment error"},
{"lineNum":" 5364","line":"    rx_frame_errors: u32,"},
{"lineNum":" 5365","line":""},
{"lineNum":" 5366","line":"    /// recv\'r fifo overrun"},
{"lineNum":" 5367","line":"    rx_fifo_errors: u32,"},
{"lineNum":" 5368","line":""},
{"lineNum":" 5369","line":"    /// receiver missed packet"},
{"lineNum":" 5370","line":"    rx_missed_errors: u32,"},
{"lineNum":" 5371","line":""},
{"lineNum":" 5372","line":"    // detailed tx_errors"},
{"lineNum":" 5373","line":"    tx_aborted_errors: u32,"},
{"lineNum":" 5374","line":"    tx_carrier_errors: u32,"},
{"lineNum":" 5375","line":"    tx_fifo_errors: u32,"},
{"lineNum":" 5376","line":"    tx_heartbeat_errors: u32,"},
{"lineNum":" 5377","line":"    tx_window_errors: u32,"},
{"lineNum":" 5378","line":""},
{"lineNum":" 5379","line":"    // for cslip etc"},
{"lineNum":" 5380","line":""},
{"lineNum":" 5381","line":"    rx_compressed: u32,"},
{"lineNum":" 5382","line":"    tx_compressed: u32,"},
{"lineNum":" 5383","line":""},
{"lineNum":" 5384","line":"    /// dropped, no handler found"},
{"lineNum":" 5385","line":"    rx_nohandler: u32,"},
{"lineNum":" 5386","line":"};"},
{"lineNum":" 5387","line":""},
{"lineNum":" 5388","line":"pub const rtnl_link_stats64 = extern struct {"},
{"lineNum":" 5389","line":"    /// total packets received"},
{"lineNum":" 5390","line":"    rx_packets: u64,"},
{"lineNum":" 5391","line":""},
{"lineNum":" 5392","line":"    /// total packets transmitted"},
{"lineNum":" 5393","line":"    tx_packets: u64,"},
{"lineNum":" 5394","line":""},
{"lineNum":" 5395","line":"    /// total bytes received"},
{"lineNum":" 5396","line":"    rx_bytes: u64,"},
{"lineNum":" 5397","line":""},
{"lineNum":" 5398","line":"    /// total bytes transmitted"},
{"lineNum":" 5399","line":"    tx_bytes: u64,"},
{"lineNum":" 5400","line":""},
{"lineNum":" 5401","line":"    /// bad packets received"},
{"lineNum":" 5402","line":"    rx_errors: u64,"},
{"lineNum":" 5403","line":""},
{"lineNum":" 5404","line":"    /// packet transmit problems"},
{"lineNum":" 5405","line":"    tx_errors: u64,"},
{"lineNum":" 5406","line":""},
{"lineNum":" 5407","line":"    /// no space in linux buffers"},
{"lineNum":" 5408","line":"    rx_dropped: u64,"},
{"lineNum":" 5409","line":""},
{"lineNum":" 5410","line":"    /// no space available in linux"},
{"lineNum":" 5411","line":"    tx_dropped: u64,"},
{"lineNum":" 5412","line":""},
{"lineNum":" 5413","line":"    /// multicast packets received"},
{"lineNum":" 5414","line":"    multicast: u64,"},
{"lineNum":" 5415","line":""},
{"lineNum":" 5416","line":"    collisions: u64,"},
{"lineNum":" 5417","line":""},
{"lineNum":" 5418","line":"    // detailed rx_errors"},
{"lineNum":" 5419","line":""},
{"lineNum":" 5420","line":"    rx_length_errors: u64,"},
{"lineNum":" 5421","line":""},
{"lineNum":" 5422","line":"    /// receiver ring buff overflow"},
{"lineNum":" 5423","line":"    rx_over_errors: u64,"},
{"lineNum":" 5424","line":""},
{"lineNum":" 5425","line":"    /// recved pkt with crc error"},
{"lineNum":" 5426","line":"    rx_crc_errors: u64,"},
{"lineNum":" 5427","line":""},
{"lineNum":" 5428","line":"    /// recv\'d frame alignment error"},
{"lineNum":" 5429","line":"    rx_frame_errors: u64,"},
{"lineNum":" 5430","line":""},
{"lineNum":" 5431","line":"    /// recv\'r fifo overrun"},
{"lineNum":" 5432","line":"    rx_fifo_errors: u64,"},
{"lineNum":" 5433","line":""},
{"lineNum":" 5434","line":"    /// receiver missed packet"},
{"lineNum":" 5435","line":"    rx_missed_errors: u64,"},
{"lineNum":" 5436","line":""},
{"lineNum":" 5437","line":"    // detailed tx_errors"},
{"lineNum":" 5438","line":"    tx_aborted_errors: u64,"},
{"lineNum":" 5439","line":"    tx_carrier_errors: u64,"},
{"lineNum":" 5440","line":"    tx_fifo_errors: u64,"},
{"lineNum":" 5441","line":"    tx_heartbeat_errors: u64,"},
{"lineNum":" 5442","line":"    tx_window_errors: u64,"},
{"lineNum":" 5443","line":""},
{"lineNum":" 5444","line":"    // for cslip etc"},
{"lineNum":" 5445","line":""},
{"lineNum":" 5446","line":"    rx_compressed: u64,"},
{"lineNum":" 5447","line":"    tx_compressed: u64,"},
{"lineNum":" 5448","line":""},
{"lineNum":" 5449","line":"    /// dropped, no handler found"},
{"lineNum":" 5450","line":"    rx_nohandler: u64,"},
{"lineNum":" 5451","line":"};"},
{"lineNum":" 5452","line":""},
{"lineNum":" 5453","line":"pub const perf_event_attr = extern struct {"},
{"lineNum":" 5454","line":"    /// Major type: hardware/software/tracepoint/etc."},
{"lineNum":" 5455","line":"    type: PERF.TYPE = undefined,"},
{"lineNum":" 5456","line":"    /// Size of the attr structure, for fwd/bwd compat."},
{"lineNum":" 5457","line":"    size: u32 = @sizeOf(perf_event_attr),"},
{"lineNum":" 5458","line":"    /// Type specific configuration information."},
{"lineNum":" 5459","line":"    config: u64 = 0,"},
{"lineNum":" 5460","line":""},
{"lineNum":" 5461","line":"    sample_period_or_freq: u64 = 0,"},
{"lineNum":" 5462","line":"    sample_type: u64 = 0,"},
{"lineNum":" 5463","line":"    read_format: u64 = 0,"},
{"lineNum":" 5464","line":""},
{"lineNum":" 5465","line":"    flags: packed struct {"},
{"lineNum":" 5466","line":"        /// off by default"},
{"lineNum":" 5467","line":"        disabled: bool = false,"},
{"lineNum":" 5468","line":"        /// children inherit it"},
{"lineNum":" 5469","line":"        inherit: bool = false,"},
{"lineNum":" 5470","line":"        /// must always be on PMU"},
{"lineNum":" 5471","line":"        pinned: bool = false,"},
{"lineNum":" 5472","line":"        /// only group on PMU"},
{"lineNum":" 5473","line":"        exclusive: bool = false,"},
{"lineNum":" 5474","line":"        /// don\'t count user"},
{"lineNum":" 5475","line":"        exclude_user: bool = false,"},
{"lineNum":" 5476","line":"        /// ditto kernel"},
{"lineNum":" 5477","line":"        exclude_kernel: bool = false,"},
{"lineNum":" 5478","line":"        /// ditto hypervisor"},
{"lineNum":" 5479","line":"        exclude_hv: bool = false,"},
{"lineNum":" 5480","line":"        /// don\'t count when idle"},
{"lineNum":" 5481","line":"        exclude_idle: bool = false,"},
{"lineNum":" 5482","line":"        /// include mmap data"},
{"lineNum":" 5483","line":"        mmap: bool = false,"},
{"lineNum":" 5484","line":"        /// include comm data"},
{"lineNum":" 5485","line":"        comm: bool = false,"},
{"lineNum":" 5486","line":"        /// use freq, not period"},
{"lineNum":" 5487","line":"        freq: bool = false,"},
{"lineNum":" 5488","line":"        /// per task counts"},
{"lineNum":" 5489","line":"        inherit_stat: bool = false,"},
{"lineNum":" 5490","line":"        /// next exec enables"},
{"lineNum":" 5491","line":"        enable_on_exec: bool = false,"},
{"lineNum":" 5492","line":"        /// trace fork/exit"},
{"lineNum":" 5493","line":"        task: bool = false,"},
{"lineNum":" 5494","line":"        /// wakeup_watermark"},
{"lineNum":" 5495","line":"        watermark: bool = false,"},
{"lineNum":" 5496","line":"        /// precise_ip:"},
{"lineNum":" 5497","line":"        ///"},
{"lineNum":" 5498","line":"        ///  0 - SAMPLE_IP can have arbitrary skid"},
{"lineNum":" 5499","line":"        ///  1 - SAMPLE_IP must have constant skid"},
{"lineNum":" 5500","line":"        ///  2 - SAMPLE_IP requested to have 0 skid"},
{"lineNum":" 5501","line":"        ///  3 - SAMPLE_IP must have 0 skid"},
{"lineNum":" 5502","line":"        ///"},
{"lineNum":" 5503","line":"        ///  See also PERF_RECORD_MISC_EXACT_IP"},
{"lineNum":" 5504","line":"        /// skid constraint"},
{"lineNum":" 5505","line":"        precise_ip: u2 = 0,"},
{"lineNum":" 5506","line":"        /// non-exec mmap data"},
{"lineNum":" 5507","line":"        mmap_data: bool = false,"},
{"lineNum":" 5508","line":"        /// sample_type all events"},
{"lineNum":" 5509","line":"        sample_id_all: bool = false,"},
{"lineNum":" 5510","line":""},
{"lineNum":" 5511","line":"        /// don\'t count in host"},
{"lineNum":" 5512","line":"        exclude_host: bool = false,"},
{"lineNum":" 5513","line":"        /// don\'t count in guest"},
{"lineNum":" 5514","line":"        exclude_guest: bool = false,"},
{"lineNum":" 5515","line":""},
{"lineNum":" 5516","line":"        /// exclude kernel callchains"},
{"lineNum":" 5517","line":"        exclude_callchain_kernel: bool = false,"},
{"lineNum":" 5518","line":"        /// exclude user callchains"},
{"lineNum":" 5519","line":"        exclude_callchain_user: bool = false,"},
{"lineNum":" 5520","line":"        /// include mmap with inode data"},
{"lineNum":" 5521","line":"        mmap2: bool = false,"},
{"lineNum":" 5522","line":"        /// flag comm events that are due to an exec"},
{"lineNum":" 5523","line":"        comm_exec: bool = false,"},
{"lineNum":" 5524","line":"        /// use @clockid for time fields"},
{"lineNum":" 5525","line":"        use_clockid: bool = false,"},
{"lineNum":" 5526","line":"        /// context switch data"},
{"lineNum":" 5527","line":"        context_switch: bool = false,"},
{"lineNum":" 5528","line":"        /// Write ring buffer from end to beginning"},
{"lineNum":" 5529","line":"        write_backward: bool = false,"},
{"lineNum":" 5530","line":"        /// include namespaces data"},
{"lineNum":" 5531","line":"        namespaces: bool = false,"},
{"lineNum":" 5532","line":""},
{"lineNum":" 5533","line":"        __reserved_1: u35 = 0,"},
{"lineNum":" 5534","line":"    } = .{},"},
{"lineNum":" 5535","line":"    /// wakeup every n events, or"},
{"lineNum":" 5536","line":"    /// bytes before wakeup"},
{"lineNum":" 5537","line":"    wakeup_events_or_watermark: u32 = 0,"},
{"lineNum":" 5538","line":""},
{"lineNum":" 5539","line":"    bp_type: u32 = 0,"},
{"lineNum":" 5540","line":""},
{"lineNum":" 5541","line":"    /// This field is also used for:"},
{"lineNum":" 5542","line":"    /// bp_addr"},
{"lineNum":" 5543","line":"    /// kprobe_func for perf_kprobe"},
{"lineNum":" 5544","line":"    /// uprobe_path for perf_uprobe"},
{"lineNum":" 5545","line":"    config1: u64 = 0,"},
{"lineNum":" 5546","line":"    /// This field is also used for:"},
{"lineNum":" 5547","line":"    /// bp_len"},
{"lineNum":" 5548","line":"    /// kprobe_addr when kprobe_func == null"},
{"lineNum":" 5549","line":"    /// probe_offset for perf_[k,u]probe"},
{"lineNum":" 5550","line":"    config2: u64 = 0,"},
{"lineNum":" 5551","line":""},
{"lineNum":" 5552","line":"    /// enum perf_branch_sample_type"},
{"lineNum":" 5553","line":"    branch_sample_type: u64 = 0,"},
{"lineNum":" 5554","line":""},
{"lineNum":" 5555","line":"    /// Defines set of user regs to dump on samples."},
{"lineNum":" 5556","line":"    /// See asm/perf_regs.h for details."},
{"lineNum":" 5557","line":"    sample_regs_user: u64 = 0,"},
{"lineNum":" 5558","line":""},
{"lineNum":" 5559","line":"    /// Defines size of the user stack to dump on samples."},
{"lineNum":" 5560","line":"    sample_stack_user: u32 = 0,"},
{"lineNum":" 5561","line":""},
{"lineNum":" 5562","line":"    clockid: i32 = 0,"},
{"lineNum":" 5563","line":"    /// Defines set of regs to dump for each sample"},
{"lineNum":" 5564","line":"    /// state captured on:"},
{"lineNum":" 5565","line":"    ///  - precise = 0: PMU interrupt"},
{"lineNum":" 5566","line":"    ///  - precise > 0: sampled instruction"},
{"lineNum":" 5567","line":"    ///"},
{"lineNum":" 5568","line":"    /// See asm/perf_regs.h for details."},
{"lineNum":" 5569","line":"    sample_regs_intr: u64 = 0,"},
{"lineNum":" 5570","line":""},
{"lineNum":" 5571","line":"    /// Wakeup watermark for AUX area"},
{"lineNum":" 5572","line":"    aux_watermark: u32 = 0,"},
{"lineNum":" 5573","line":"    sample_max_stack: u16 = 0,"},
{"lineNum":" 5574","line":"    /// Align to u64"},
{"lineNum":" 5575","line":"    __reserved_2: u16 = 0,"},
{"lineNum":" 5576","line":"};"},
{"lineNum":" 5577","line":""},
{"lineNum":" 5578","line":"pub const PERF = struct {"},
{"lineNum":" 5579","line":"    pub const TYPE = enum(u32) {"},
{"lineNum":" 5580","line":"        HARDWARE,"},
{"lineNum":" 5581","line":"        SOFTWARE,"},
{"lineNum":" 5582","line":"        TRACEPOINT,"},
{"lineNum":" 5583","line":"        HW_CACHE,"},
{"lineNum":" 5584","line":"        RAW,"},
{"lineNum":" 5585","line":"        BREAKPOINT,"},
{"lineNum":" 5586","line":"        MAX,"},
{"lineNum":" 5587","line":"        _,"},
{"lineNum":" 5588","line":"    };"},
{"lineNum":" 5589","line":""},
{"lineNum":" 5590","line":"    pub const COUNT = struct {"},
{"lineNum":" 5591","line":"        pub const HW = enum(u32) {"},
{"lineNum":" 5592","line":"            CPU_CYCLES,"},
{"lineNum":" 5593","line":"            INSTRUCTIONS,"},
{"lineNum":" 5594","line":"            CACHE_REFERENCES,"},
{"lineNum":" 5595","line":"            CACHE_MISSES,"},
{"lineNum":" 5596","line":"            BRANCH_INSTRUCTIONS,"},
{"lineNum":" 5597","line":"            BRANCH_MISSES,"},
{"lineNum":" 5598","line":"            BUS_CYCLES,"},
{"lineNum":" 5599","line":"            STALLED_CYCLES_FRONTEND,"},
{"lineNum":" 5600","line":"            STALLED_CYCLES_BACKEND,"},
{"lineNum":" 5601","line":"            REF_CPU_CYCLES,"},
{"lineNum":" 5602","line":"            MAX,"},
{"lineNum":" 5603","line":""},
{"lineNum":" 5604","line":"            pub const CACHE = enum(u32) {"},
{"lineNum":" 5605","line":"                L1D,"},
{"lineNum":" 5606","line":"                L1I,"},
{"lineNum":" 5607","line":"                LL,"},
{"lineNum":" 5608","line":"                DTLB,"},
{"lineNum":" 5609","line":"                ITLB,"},
{"lineNum":" 5610","line":"                BPU,"},
{"lineNum":" 5611","line":"                NODE,"},
{"lineNum":" 5612","line":"                MAX,"},
{"lineNum":" 5613","line":""},
{"lineNum":" 5614","line":"                pub const OP = enum(u32) {"},
{"lineNum":" 5615","line":"                    READ,"},
{"lineNum":" 5616","line":"                    WRITE,"},
{"lineNum":" 5617","line":"                    PREFETCH,"},
{"lineNum":" 5618","line":"                    MAX,"},
{"lineNum":" 5619","line":"                };"},
{"lineNum":" 5620","line":""},
{"lineNum":" 5621","line":"                pub const RESULT = enum(u32) {"},
{"lineNum":" 5622","line":"                    ACCESS,"},
{"lineNum":" 5623","line":"                    MISS,"},
{"lineNum":" 5624","line":"                    MAX,"},
{"lineNum":" 5625","line":"                };"},
{"lineNum":" 5626","line":"            };"},
{"lineNum":" 5627","line":"        };"},
{"lineNum":" 5628","line":""},
{"lineNum":" 5629","line":"        pub const SW = enum(u32) {"},
{"lineNum":" 5630","line":"            CPU_CLOCK,"},
{"lineNum":" 5631","line":"            TASK_CLOCK,"},
{"lineNum":" 5632","line":"            PAGE_FAULTS,"},
{"lineNum":" 5633","line":"            CONTEXT_SWITCHES,"},
{"lineNum":" 5634","line":"            CPU_MIGRATIONS,"},
{"lineNum":" 5635","line":"            PAGE_FAULTS_MIN,"},
{"lineNum":" 5636","line":"            PAGE_FAULTS_MAJ,"},
{"lineNum":" 5637","line":"            ALIGNMENT_FAULTS,"},
{"lineNum":" 5638","line":"            EMULATION_FAULTS,"},
{"lineNum":" 5639","line":"            DUMMY,"},
{"lineNum":" 5640","line":"            BPF_OUTPUT,"},
{"lineNum":" 5641","line":"            MAX,"},
{"lineNum":" 5642","line":"        };"},
{"lineNum":" 5643","line":"    };"},
{"lineNum":" 5644","line":""},
{"lineNum":" 5645","line":"    pub const SAMPLE = struct {"},
{"lineNum":" 5646","line":"        pub const IP = 1;"},
{"lineNum":" 5647","line":"        pub const TID = 2;"},
{"lineNum":" 5648","line":"        pub const TIME = 4;"},
{"lineNum":" 5649","line":"        pub const ADDR = 8;"},
{"lineNum":" 5650","line":"        pub const READ = 16;"},
{"lineNum":" 5651","line":"        pub const CALLCHAIN = 32;"},
{"lineNum":" 5652","line":"        pub const ID = 64;"},
{"lineNum":" 5653","line":"        pub const CPU = 128;"},
{"lineNum":" 5654","line":"        pub const PERIOD = 256;"},
{"lineNum":" 5655","line":"        pub const STREAM_ID = 512;"},
{"lineNum":" 5656","line":"        pub const RAW = 1024;"},
{"lineNum":" 5657","line":"        pub const BRANCH_STACK = 2048;"},
{"lineNum":" 5658","line":"        pub const REGS_USER = 4096;"},
{"lineNum":" 5659","line":"        pub const STACK_USER = 8192;"},
{"lineNum":" 5660","line":"        pub const WEIGHT = 16384;"},
{"lineNum":" 5661","line":"        pub const DATA_SRC = 32768;"},
{"lineNum":" 5662","line":"        pub const IDENTIFIER = 65536;"},
{"lineNum":" 5663","line":"        pub const TRANSACTION = 131072;"},
{"lineNum":" 5664","line":"        pub const REGS_INTR = 262144;"},
{"lineNum":" 5665","line":"        pub const PHYS_ADDR = 524288;"},
{"lineNum":" 5666","line":"        pub const MAX = 1048576;"},
{"lineNum":" 5667","line":""},
{"lineNum":" 5668","line":"        pub const BRANCH = struct {"},
{"lineNum":" 5669","line":"            pub const USER = 1 << 0;"},
{"lineNum":" 5670","line":"            pub const KERNEL = 1 << 1;"},
{"lineNum":" 5671","line":"            pub const HV = 1 << 2;"},
{"lineNum":" 5672","line":"            pub const ANY = 1 << 3;"},
{"lineNum":" 5673","line":"            pub const ANY_CALL = 1 << 4;"},
{"lineNum":" 5674","line":"            pub const ANY_RETURN = 1 << 5;"},
{"lineNum":" 5675","line":"            pub const IND_CALL = 1 << 6;"},
{"lineNum":" 5676","line":"            pub const ABORT_TX = 1 << 7;"},
{"lineNum":" 5677","line":"            pub const IN_TX = 1 << 8;"},
{"lineNum":" 5678","line":"            pub const NO_TX = 1 << 9;"},
{"lineNum":" 5679","line":"            pub const COND = 1 << 10;"},
{"lineNum":" 5680","line":"            pub const CALL_STACK = 1 << 11;"},
{"lineNum":" 5681","line":"            pub const IND_JUMP = 1 << 12;"},
{"lineNum":" 5682","line":"            pub const CALL = 1 << 13;"},
{"lineNum":" 5683","line":"            pub const NO_FLAGS = 1 << 14;"},
{"lineNum":" 5684","line":"            pub const NO_CYCLES = 1 << 15;"},
{"lineNum":" 5685","line":"            pub const TYPE_SAVE = 1 << 16;"},
{"lineNum":" 5686","line":"            pub const MAX = 1 << 17;"},
{"lineNum":" 5687","line":"        };"},
{"lineNum":" 5688","line":"    };"},
{"lineNum":" 5689","line":""},
{"lineNum":" 5690","line":"    pub const FLAG = struct {"},
{"lineNum":" 5691","line":"        pub const FD_NO_GROUP = 1 << 0;"},
{"lineNum":" 5692","line":"        pub const FD_OUTPUT = 1 << 1;"},
{"lineNum":" 5693","line":"        pub const PID_CGROUP = 1 << 2;"},
{"lineNum":" 5694","line":"        pub const FD_CLOEXEC = 1 << 3;"},
{"lineNum":" 5695","line":"    };"},
{"lineNum":" 5696","line":""},
{"lineNum":" 5697","line":"    pub const EVENT_IOC = struct {"},
{"lineNum":" 5698","line":"        pub const ENABLE = 9216;"},
{"lineNum":" 5699","line":"        pub const DISABLE = 9217;"},
{"lineNum":" 5700","line":"        pub const REFRESH = 9218;"},
{"lineNum":" 5701","line":"        pub const RESET = 9219;"},
{"lineNum":" 5702","line":"        pub const PERIOD = 1074275332;"},
{"lineNum":" 5703","line":"        pub const SET_OUTPUT = 9221;"},
{"lineNum":" 5704","line":"        pub const SET_FILTER = 1074275334;"},
{"lineNum":" 5705","line":"        pub const SET_BPF = 1074013192;"},
{"lineNum":" 5706","line":"        pub const PAUSE_OUTPUT = 1074013193;"},
{"lineNum":" 5707","line":"        pub const QUERY_BPF = 3221758986;"},
{"lineNum":" 5708","line":"        pub const MODIFY_ATTRIBUTES = 1074275339;"},
{"lineNum":" 5709","line":"    };"},
{"lineNum":" 5710","line":""},
{"lineNum":" 5711","line":"    pub const IOC_FLAG_GROUP = 1;"},
{"lineNum":" 5712","line":"};"},
{"lineNum":" 5713","line":""},
{"lineNum":" 5714","line":"// TODO: Add the rest of the AUDIT defines?"},
{"lineNum":" 5715","line":"pub const AUDIT = struct {"},
{"lineNum":" 5716","line":"    pub const ARCH = enum(u32) {"},
{"lineNum":" 5717","line":"        const @\"64BIT\" = 0x80000000;"},
{"lineNum":" 5718","line":"        const LE = 0x40000000;"},
{"lineNum":" 5719","line":""},
{"lineNum":" 5720","line":"        pub const current: AUDIT.ARCH = switch (native_arch) {"},
{"lineNum":" 5721","line":"            .x86 => .X86,"},
{"lineNum":" 5722","line":"            .x86_64 => .X86_64,"},
{"lineNum":" 5723","line":"            .aarch64 => .AARCH64,"},
{"lineNum":" 5724","line":"            .arm, .thumb => .ARM,"},
{"lineNum":" 5725","line":"            .riscv64 => .RISCV64,"},
{"lineNum":" 5726","line":"            .sparc64 => .SPARC64,"},
{"lineNum":" 5727","line":"            .mips => .MIPS,"},
{"lineNum":" 5728","line":"            .mipsel => .MIPSEL,"},
{"lineNum":" 5729","line":"            .powerpc => .PPC,"},
{"lineNum":" 5730","line":"            .powerpc64 => .PPC64,"},
{"lineNum":" 5731","line":"            .powerpc64le => .PPC64LE,"},
{"lineNum":" 5732","line":"            else => @compileError(\"unsupported architecture\"),"},
{"lineNum":" 5733","line":"        };"},
{"lineNum":" 5734","line":""},
{"lineNum":" 5735","line":"        AARCH64 = toAudit(.aarch64),"},
{"lineNum":" 5736","line":"        ARM = toAudit(.arm),"},
{"lineNum":" 5737","line":"        ARMEB = toAudit(.armeb),"},
{"lineNum":" 5738","line":"        CSKY = toAudit(.csky),"},
{"lineNum":" 5739","line":"        HEXAGON = @intFromEnum(std.elf.EM.HEXAGON),"},
{"lineNum":" 5740","line":"        X86 = toAudit(.x86),"},
{"lineNum":" 5741","line":"        M68K = toAudit(.m68k),"},
{"lineNum":" 5742","line":"        MIPS = toAudit(.mips),"},
{"lineNum":" 5743","line":"        MIPSEL = toAudit(.mips) | LE,"},
{"lineNum":" 5744","line":"        MIPS64 = toAudit(.mips64),"},
{"lineNum":" 5745","line":"        MIPSEL64 = toAudit(.mips64) | LE,"},
{"lineNum":" 5746","line":"        PPC = toAudit(.powerpc),"},
{"lineNum":" 5747","line":"        PPC64 = toAudit(.powerpc64),"},
{"lineNum":" 5748","line":"        PPC64LE = toAudit(.powerpc64le),"},
{"lineNum":" 5749","line":"        RISCV32 = toAudit(.riscv32),"},
{"lineNum":" 5750","line":"        RISCV64 = toAudit(.riscv64),"},
{"lineNum":" 5751","line":"        S390X = toAudit(.s390x),"},
{"lineNum":" 5752","line":"        SPARC = toAudit(.sparc),"},
{"lineNum":" 5753","line":"        SPARC64 = toAudit(.sparc64),"},
{"lineNum":" 5754","line":"        X86_64 = toAudit(.x86_64),"},
{"lineNum":" 5755","line":""},
{"lineNum":" 5756","line":"        fn toAudit(arch: std.Target.Cpu.Arch) u32 {"},
{"lineNum":" 5757","line":"            var res: u32 = @intFromEnum(arch.toElfMachine());"},
{"lineNum":" 5758","line":"            if (arch.endian() == .Little) res |= LE;"},
{"lineNum":" 5759","line":"            switch (arch) {"},
{"lineNum":" 5760","line":"                .aarch64,"},
{"lineNum":" 5761","line":"                .mips64,"},
{"lineNum":" 5762","line":"                .mips64el,"},
{"lineNum":" 5763","line":"                .powerpc64,"},
{"lineNum":" 5764","line":"                .powerpc64le,"},
{"lineNum":" 5765","line":"                .riscv64,"},
{"lineNum":" 5766","line":"                .sparc64,"},
{"lineNum":" 5767","line":"                .x86_64,"},
{"lineNum":" 5768","line":"                => res |= @\"64BIT\","},
{"lineNum":" 5769","line":"                else => {},"},
{"lineNum":" 5770","line":"            }"},
{"lineNum":" 5771","line":"            return res;"},
{"lineNum":" 5772","line":"        }"},
{"lineNum":" 5773","line":"    };"},
{"lineNum":" 5774","line":"};"},
{"lineNum":" 5775","line":""},
{"lineNum":" 5776","line":"pub const PTRACE = struct {"},
{"lineNum":" 5777","line":"    pub const TRACEME = 0;"},
{"lineNum":" 5778","line":"    pub const PEEKTEXT = 1;"},
{"lineNum":" 5779","line":"    pub const PEEKDATA = 2;"},
{"lineNum":" 5780","line":"    pub const PEEKUSER = 3;"},
{"lineNum":" 5781","line":"    pub const POKETEXT = 4;"},
{"lineNum":" 5782","line":"    pub const POKEDATA = 5;"},
{"lineNum":" 5783","line":"    pub const POKEUSER = 6;"},
{"lineNum":" 5784","line":"    pub const CONT = 7;"},
{"lineNum":" 5785","line":"    pub const KILL = 8;"},
{"lineNum":" 5786","line":"    pub const SINGLESTEP = 9;"},
{"lineNum":" 5787","line":"    pub const GETREGS = 12;"},
{"lineNum":" 5788","line":"    pub const SETREGS = 13;"},
{"lineNum":" 5789","line":"    pub const GETFPREGS = 14;"},
{"lineNum":" 5790","line":"    pub const SETFPREGS = 15;"},
{"lineNum":" 5791","line":"    pub const ATTACH = 16;"},
{"lineNum":" 5792","line":"    pub const DETACH = 17;"},
{"lineNum":" 5793","line":"    pub const GETFPXREGS = 18;"},
{"lineNum":" 5794","line":"    pub const SETFPXREGS = 19;"},
{"lineNum":" 5795","line":"    pub const SYSCALL = 24;"},
{"lineNum":" 5796","line":"    pub const SETOPTIONS = 0x4200;"},
{"lineNum":" 5797","line":"    pub const GETEVENTMSG = 0x4201;"},
{"lineNum":" 5798","line":"    pub const GETSIGINFO = 0x4202;"},
{"lineNum":" 5799","line":"    pub const SETSIGINFO = 0x4203;"},
{"lineNum":" 5800","line":"    pub const GETREGSET = 0x4204;"},
{"lineNum":" 5801","line":"    pub const SETREGSET = 0x4205;"},
{"lineNum":" 5802","line":"    pub const SEIZE = 0x4206;"},
{"lineNum":" 5803","line":"    pub const INTERRUPT = 0x4207;"},
{"lineNum":" 5804","line":"    pub const LISTEN = 0x4208;"},
{"lineNum":" 5805","line":"    pub const PEEKSIGINFO = 0x4209;"},
{"lineNum":" 5806","line":"    pub const GETSIGMASK = 0x420a;"},
{"lineNum":" 5807","line":"    pub const SETSIGMASK = 0x420b;"},
{"lineNum":" 5808","line":"    pub const SECCOMP_GET_FILTER = 0x420c;"},
{"lineNum":" 5809","line":"    pub const SECCOMP_GET_METADATA = 0x420d;"},
{"lineNum":" 5810","line":"    pub const GET_SYSCALL_INFO = 0x420e;"},
{"lineNum":" 5811","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 89, "covered" : 57,};
var merged_data = [];
