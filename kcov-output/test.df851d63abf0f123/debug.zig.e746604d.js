var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const math = std.math;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const io = std.io;"},
{"lineNum":"    6","line":"const os = std.os;"},
{"lineNum":"    7","line":"const fs = std.fs;"},
{"lineNum":"    8","line":"const testing = std.testing;"},
{"lineNum":"    9","line":"const elf = std.elf;"},
{"lineNum":"   10","line":"const DW = std.dwarf;"},
{"lineNum":"   11","line":"const macho = std.macho;"},
{"lineNum":"   12","line":"const coff = std.coff;"},
{"lineNum":"   13","line":"const pdb = std.pdb;"},
{"lineNum":"   14","line":"const ArrayList = std.ArrayList;"},
{"lineNum":"   15","line":"const root = @import(\"root\");"},
{"lineNum":"   16","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"   17","line":"const File = std.fs.File;"},
{"lineNum":"   18","line":"const windows = std.os.windows;"},
{"lineNum":"   19","line":"const native_arch = builtin.cpu.arch;"},
{"lineNum":"   20","line":"const native_os = builtin.os.tag;"},
{"lineNum":"   21","line":"const native_endian = native_arch.endian();"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"pub const runtime_safety = switch (builtin.mode) {"},
{"lineNum":"   24","line":"    .Debug, .ReleaseSafe => true,"},
{"lineNum":"   25","line":"    .ReleaseFast, .ReleaseSmall => false,"},
{"lineNum":"   26","line":"};"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"pub const sys_can_stack_trace = switch (builtin.cpu.arch) {"},
{"lineNum":"   29","line":"    // Observed to go into an infinite loop."},
{"lineNum":"   30","line":"    // TODO: Make this work."},
{"lineNum":"   31","line":"    .mips,"},
{"lineNum":"   32","line":"    .mipsel,"},
{"lineNum":"   33","line":"    => false,"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    // `@returnAddress()` in LLVM 10 gives"},
{"lineNum":"   36","line":"    // \"Non-Emscripten WebAssembly hasn\'t implemented __builtin_return_address\"."},
{"lineNum":"   37","line":"    .wasm32,"},
{"lineNum":"   38","line":"    .wasm64,"},
{"lineNum":"   39","line":"    => builtin.os.tag == .emscripten,"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    // `@returnAddress()` is unsupported in LLVM 13."},
{"lineNum":"   42","line":"    .bpfel,"},
{"lineNum":"   43","line":"    .bpfeb,"},
{"lineNum":"   44","line":"    => false,"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    else => true,"},
{"lineNum":"   47","line":"};"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"pub const LineInfo = struct {"},
{"lineNum":"   50","line":"    line: u64,"},
{"lineNum":"   51","line":"    column: u64,"},
{"lineNum":"   52","line":"    file_name: []const u8,"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    pub fn deinit(self: LineInfo, allocator: mem.Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"        allocator.free(self.file_name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":"};"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"pub const SymbolInfo = struct {"},
{"lineNum":"   60","line":"    symbol_name: []const u8 = \"???\","},
{"lineNum":"   61","line":"    compile_unit_name: []const u8 = \"???\","},
{"lineNum":"   62","line":"    line_info: ?LineInfo = null,"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    pub fn deinit(self: SymbolInfo, allocator: mem.Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"        if (self.line_info) |li| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"            li.deinit(allocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   67","line":"        }"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":"};"},
{"lineNum":"   70","line":"const PdbOrDwarf = union(enum) {"},
{"lineNum":"   71","line":"    pdb: pdb.Pdb,"},
{"lineNum":"   72","line":"    dwarf: DW.DwarfInfo,"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    fn deinit(self: *PdbOrDwarf, allocator: mem.Allocator) void {"},
{"lineNum":"   75","line":"        switch (self.*) {"},
{"lineNum":"   76","line":"            .pdb => |*inner| inner.deinit(),"},
{"lineNum":"   77","line":"            .dwarf => |*inner| inner.deinit(allocator),"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":"};"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"var stderr_mutex = std.Thread.Mutex{};"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"/// Print to stderr, unbuffered, and silently returning on failure. Intended"},
{"lineNum":"   85","line":"/// for use in \"printf debugging.\" Use `std.log` functions for proper logging."},
{"lineNum":"   86","line":"pub fn print(comptime fmt: []const u8, args: anytype) void {","class":"linePartCov","hits":"16","order":"1800","possible_hits":"61",},
{"lineNum":"   87","line":"    stderr_mutex.lock();","class":"linePartCov","hits":"16","order":"1801","possible_hits":"61",},
{"lineNum":"   88","line":"    defer stderr_mutex.unlock();","class":"linePartCov","hits":"16","order":"1808","possible_hits":"122",},
{"lineNum":"   89","line":"    const stderr = io.getStdErr().writer();","class":"linePartCov","hits":"16","order":"1802","possible_hits":"61",},
{"lineNum":"   90","line":"    nosuspend stderr.print(fmt, args) catch return;","class":"linePartCov","hits":"32","order":"1805","possible_hits":"122",},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"pub fn getStderrMutex() *std.Thread.Mutex {"},
{"lineNum":"   94","line":"    return &stderr_mutex;"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"/// TODO multithreaded awareness"},
{"lineNum":"   98","line":"var self_debug_info: ?DebugInfo = null;"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"pub fn getSelfDebugInfo() !*DebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    if (self_debug_info) |*info| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"        return info;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"    } else {"},
{"lineNum":"  104","line":"        self_debug_info = try openSelfDebugInfo(getDebugInfoAllocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"        return &self_debug_info.?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"/// Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned."},
{"lineNum":"  110","line":"/// TODO multithreaded awareness"},
{"lineNum":"  111","line":"pub fn dumpCurrentStackTrace(start_addr: ?usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"    nosuspend {"},
{"lineNum":"  113","line":"        if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  114","line":"            if (native_os == .wasi) {"},
{"lineNum":"  115","line":"                const stderr = io.getStdErr().writer();"},
{"lineNum":"  116","line":"                stderr.print(\"Unable to dump stack trace: not implemented for Wasm\\n\", .{}) catch return;"},
{"lineNum":"  117","line":"            }"},
{"lineNum":"  118","line":"            return;"},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":"        const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"        if (builtin.strip_debug_info) {"},
{"lineNum":"  122","line":"            stderr.print(\"Unable to dump stack trace: debug info stripped\\n\", .{}) catch return;"},
{"lineNum":"  123","line":"            return;"},
{"lineNum":"  124","line":"        }"},
{"lineNum":"  125","line":"        const debug_info = getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"            stderr.print(\"Unable to dump stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  128","line":"        };"},
{"lineNum":"  129","line":"        writeCurrentStackTrace(stderr, debug_info, io.tty.detectConfig(io.getStdErr()), start_addr) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"            stderr.print(\"Unable to dump stack trace: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"        };"},
{"lineNum":"  133","line":"    }"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"pub const have_ucontext = @hasDecl(os.system, \"ucontext_t\") and"},
{"lineNum":"  137","line":"    (builtin.os.tag != .linux or switch (builtin.cpu.arch) {"},
{"lineNum":"  138","line":"    .mips, .mipsel, .mips64, .mips64el, .riscv64 => false,"},
{"lineNum":"  139","line":"    else => true,"},
{"lineNum":"  140","line":"});"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"/// Platform-specific thread state. This contains register state, and on some platforms"},
{"lineNum":"  143","line":"/// information about the stack. This is not safe to trivially copy, because some platforms"},
{"lineNum":"  144","line":"/// use internal pointers within this structure. To make a copy, use `copyContext`."},
{"lineNum":"  145","line":"pub const ThreadContext = blk: {"},
{"lineNum":"  146","line":"    if (native_os == .windows) {"},
{"lineNum":"  147","line":"        break :blk std.os.windows.CONTEXT;"},
{"lineNum":"  148","line":"    } else if (have_ucontext) {"},
{"lineNum":"  149","line":"        break :blk os.ucontext_t;"},
{"lineNum":"  150","line":"    } else {"},
{"lineNum":"  151","line":"        break :blk void;"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":"};"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"/// Copies one context to another, updating any internal pointers"},
{"lineNum":"  156","line":"pub fn copyContext(source: *const ThreadContext, dest: *ThreadContext) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"    if (!have_ucontext) return {};"},
{"lineNum":"  158","line":"    dest.* = source.*;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"    relocateContext(dest);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"}"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"/// Updates any internal pointers in the context to reflect its current location"},
{"lineNum":"  163","line":"pub fn relocateContext(context: *ThreadContext) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"    return switch (native_os) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"        .macos => {"},
{"lineNum":"  166","line":"            context.mcontext = &context.__mcontext_data;"},
{"lineNum":"  167","line":"        },"},
{"lineNum":"  168","line":"        else => {},"},
{"lineNum":"  169","line":"    };"},
{"lineNum":"  170","line":"}"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"pub const have_getcontext = @hasDecl(os.system, \"getcontext\") and"},
{"lineNum":"  173","line":"    (builtin.os.tag != .linux or switch (builtin.cpu.arch) {"},
{"lineNum":"  174","line":"    .x86,"},
{"lineNum":"  175","line":"    .x86_64,"},
{"lineNum":"  176","line":"    => true,"},
{"lineNum":"  177","line":"    else => builtin.link_libc and !builtin.target.isMusl(),"},
{"lineNum":"  178","line":"});"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"/// Capture the current context. The register values in the context will reflect the"},
{"lineNum":"  181","line":"/// state after the platform `getcontext` function returns."},
{"lineNum":"  182","line":"///"},
{"lineNum":"  183","line":"/// It is valid to call this if the platform doesn\'t have context capturing support,"},
{"lineNum":"  184","line":"/// in that case false will be returned."},
{"lineNum":"  185","line":"pub inline fn getContext(context: *ThreadContext) bool {"},
{"lineNum":"  186","line":"    if (native_os == .windows) {"},
{"lineNum":"  187","line":"        context.* = std.mem.zeroes(windows.CONTEXT);"},
{"lineNum":"  188","line":"        windows.ntdll.RtlCaptureContext(context);"},
{"lineNum":"  189","line":"        return true;"},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    const result = have_getcontext and os.system.getcontext(context) == 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"    if (native_os == .macos) {"},
{"lineNum":"  194","line":"        assert(context.mcsize == @sizeOf(std.c.mcontext_t));"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        // On aarch64-macos, the system getcontext doesn\'t write anything into the pc"},
{"lineNum":"  197","line":"        // register slot, it only writes lr. This makes the context consistent with"},
{"lineNum":"  198","line":"        // other aarch64 getcontext implementations which write the current lr"},
{"lineNum":"  199","line":"        // (where getcontext will return to) into both the lr and pc slot of the context."},
{"lineNum":"  200","line":"        if (native_arch == .aarch64) context.mcontext.ss.pc = context.mcontext.ss.lr;"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    return result;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"}"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"/// Tries to print the stack trace starting from the supplied base pointer to stderr,"},
{"lineNum":"  207","line":"/// unbuffered, and ignores any error returned."},
{"lineNum":"  208","line":"/// TODO multithreaded awareness"},
{"lineNum":"  209","line":"pub fn dumpStackTraceFromBase(context: *const ThreadContext) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"    nosuspend {"},
{"lineNum":"  211","line":"        if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  212","line":"            if (native_os == .wasi) {"},
{"lineNum":"  213","line":"                const stderr = io.getStdErr().writer();"},
{"lineNum":"  214","line":"                stderr.print(\"Unable to dump stack trace: not implemented for Wasm\\n\", .{}) catch return;"},
{"lineNum":"  215","line":"            }"},
{"lineNum":"  216","line":"            return;"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":"        const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"        if (builtin.strip_debug_info) {"},
{"lineNum":"  220","line":"            stderr.print(\"Unable to dump stack trace: debug info stripped\\n\", .{}) catch return;"},
{"lineNum":"  221","line":"            return;"},
{"lineNum":"  222","line":"        }"},
{"lineNum":"  223","line":"        const debug_info = getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"            stderr.print(\"Unable to dump stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"        };"},
{"lineNum":"  227","line":"        const tty_config = io.tty.detectConfig(io.getStdErr());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"        if (native_os == .windows) {"},
{"lineNum":"  229","line":"            // On x86_64 and aarch64, the stack will be unwound using RtlVirtualUnwind using the context"},
{"lineNum":"  230","line":"            // provided by the exception handler. On x86, RtlVirtualUnwind doesn\'t exist. Instead, a new backtrace"},
{"lineNum":"  231","line":"            // will be captured and frames prior to the exception will be filtered."},
{"lineNum":"  232","line":"            // The caveat is that RtlCaptureStackBackTrace does not include the KiUserExceptionDispatcher frame,"},
{"lineNum":"  233","line":"            // which is where the IP in `context` points to, so it can\'t be used as start_addr."},
{"lineNum":"  234","line":"            // Instead, start_addr is recovered from the stack."},
{"lineNum":"  235","line":"            const start_addr = if (builtin.cpu.arch == .x86) @as(*const usize, @ptrFromInt(context.getRegs().bp + 4)).* else null;"},
{"lineNum":"  236","line":"            writeStackTraceWindows(stderr, debug_info, tty_config, context, start_addr) catch return;"},
{"lineNum":"  237","line":"            return;"},
{"lineNum":"  238","line":"        }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        var it = StackIterator.initWithContext(null, debug_info, context) catch return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  241","line":"        defer it.deinit();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  242","line":"        printSourceAtAddress(debug_info, stderr, it.unwind_state.?.dwarf_context.pc, tty_config) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"        while (it.next()) |return_address| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"            printLastUnwindError(&it, debug_info, stderr, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"            // On arm64 macOS, the address of the last frame is 0x0 rather than 0x1 as on x86_64 macOS,"},
{"lineNum":"  248","line":"            // therefore, we do a check for `return_address == 0` before subtracting 1 from it to avoid"},
{"lineNum":"  249","line":"            // an overflow. We do not need to signal `StackIterator` as it will correctly detect this"},
{"lineNum":"  250","line":"            // condition on the subsequent iteration and return `null` thus terminating the loop."},
{"lineNum":"  251","line":"            // same behaviour for x86-windows-msvc"},
{"lineNum":"  252","line":"            const address = if (return_address == 0) return_address else return_address - 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  253","line":"            printSourceAtAddress(debug_info, stderr, address, tty_config) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"        } else printLastUnwindError(&it, debug_info, stderr, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  255","line":"    }"},
{"lineNum":"  256","line":"}"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"/// Returns a slice with the same pointer as addresses, with a potentially smaller len."},
{"lineNum":"  259","line":"/// On Windows, when first_address is not null, we ask for at least 32 stack frames,"},
{"lineNum":"  260","line":"/// and then try to find the first address. If addresses.len is more than 32, we"},
{"lineNum":"  261","line":"/// capture that many stack frames exactly, and then look for the first address,"},
{"lineNum":"  262","line":"/// chopping off the irrelevant frames and shifting so that the returned addresses pointer"},
{"lineNum":"  263","line":"/// equals the passed in addresses pointer."},
{"lineNum":"  264","line":"pub fn captureStackTrace(first_address: ?usize, stack_trace: *std.builtin.StackTrace) void {","class":"lineCov","hits":"1","order":"3008","possible_hits":"1",},
{"lineNum":"  265","line":"    if (native_os == .windows) {"},
{"lineNum":"  266","line":"        const addrs = stack_trace.instruction_addresses;"},
{"lineNum":"  267","line":"        const first_addr = first_address orelse {"},
{"lineNum":"  268","line":"            stack_trace.index = walkStackWindows(addrs[0..], null);"},
{"lineNum":"  269","line":"            return;"},
{"lineNum":"  270","line":"        };"},
{"lineNum":"  271","line":"        var addr_buf_stack: [32]usize = undefined;"},
{"lineNum":"  272","line":"        const addr_buf = if (addr_buf_stack.len > addrs.len) addr_buf_stack[0..] else addrs;"},
{"lineNum":"  273","line":"        const n = walkStackWindows(addr_buf[0..], null);"},
{"lineNum":"  274","line":"        const first_index = for (addr_buf[0..n], 0..) |addr, i| {"},
{"lineNum":"  275","line":"            if (addr == first_addr) {"},
{"lineNum":"  276","line":"                break i;"},
{"lineNum":"  277","line":"            }"},
{"lineNum":"  278","line":"        } else {"},
{"lineNum":"  279","line":"            stack_trace.index = 0;"},
{"lineNum":"  280","line":"            return;"},
{"lineNum":"  281","line":"        };"},
{"lineNum":"  282","line":"        const end_index = @min(first_index + addrs.len, n);"},
{"lineNum":"  283","line":"        const slice = addr_buf[first_index..end_index];"},
{"lineNum":"  284","line":"        // We use a for loop here because slice and addrs may alias."},
{"lineNum":"  285","line":"        for (slice, 0..) |addr, i| {"},
{"lineNum":"  286","line":"            addrs[i] = addr;"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"        stack_trace.index = slice.len;"},
{"lineNum":"  289","line":"    } else {"},
{"lineNum":"  290","line":"        // TODO: This should use the DWARF unwinder if .eh_frame_hdr is available (so that full debug info parsing isn\'t required)."},
{"lineNum":"  291","line":"        //       A new path for loading DebugInfo needs to be created which will only attempt to parse in-memory sections, because"},
{"lineNum":"  292","line":"        //       stopping to load other debug info (ie. source line info) from disk here is not required for unwinding."},
{"lineNum":"  293","line":"        var it = StackIterator.init(first_address, null);","class":"lineCov","hits":"1","order":"3009","possible_hits":"1",},
{"lineNum":"  294","line":"        defer it.deinit();","class":"lineCov","hits":"4","order":"3045","possible_hits":"4",},
{"lineNum":"  295","line":"        for (stack_trace.instruction_addresses, 0..) |*addr, i| {","class":"lineCov","hits":"3","order":"3012","possible_hits":"3",},
{"lineNum":"  296","line":"            addr.* = it.next() orelse {","class":"lineCov","hits":"2","order":"3013","possible_hits":"2",},
{"lineNum":"  297","line":"                stack_trace.index = i;","class":"lineCov","hits":"1","order":"3160","possible_hits":"1",},
{"lineNum":"  298","line":"                return;"},
{"lineNum":"  299","line":"            };"},
{"lineNum":"  300","line":"        }"},
{"lineNum":"  301","line":"        stack_trace.index = stack_trace.instruction_addresses.len;","class":"lineCov","hits":"1","order":"3047","possible_hits":"1",},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"/// Tries to print a stack trace to stderr, unbuffered, and ignores any error returned."},
{"lineNum":"  306","line":"/// TODO multithreaded awareness"},
{"lineNum":"  307","line":"pub fn dumpStackTrace(stack_trace: std.builtin.StackTrace) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  308","line":"    nosuspend {"},
{"lineNum":"  309","line":"        if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  310","line":"            if (native_os == .wasi) {"},
{"lineNum":"  311","line":"                const stderr = io.getStdErr().writer();"},
{"lineNum":"  312","line":"                stderr.print(\"Unable to dump stack trace: not implemented for Wasm\\n\", .{}) catch return;"},
{"lineNum":"  313","line":"            }"},
{"lineNum":"  314","line":"            return;"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":"        const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"        if (builtin.strip_debug_info) {"},
{"lineNum":"  318","line":"            stderr.print(\"Unable to dump stack trace: debug info stripped\\n\", .{}) catch return;"},
{"lineNum":"  319","line":"            return;"},
{"lineNum":"  320","line":"        }"},
{"lineNum":"  321","line":"        const debug_info = getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  322","line":"            stderr.print(\"Unable to dump stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  323","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  324","line":"        };"},
{"lineNum":"  325","line":"        writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, io.tty.detectConfig(io.getStdErr())) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  326","line":"            stderr.print(\"Unable to dump stack trace: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  327","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":"        };"},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"/// This function invokes undefined behavior when `ok` is `false`."},
{"lineNum":"  333","line":"/// In Debug and ReleaseSafe modes, calls to this function are always"},
{"lineNum":"  334","line":"/// generated, and the `unreachable` statement triggers a panic."},
{"lineNum":"  335","line":"/// In ReleaseFast and ReleaseSmall modes, calls to this function are"},
{"lineNum":"  336","line":"/// optimized away, and in fact the optimizer is able to use the assertion"},
{"lineNum":"  337","line":"/// in its heuristics."},
{"lineNum":"  338","line":"/// Inside a test block, it is best to use the `std.testing` module rather"},
{"lineNum":"  339","line":"/// than this function, because this function may not detect a test failure"},
{"lineNum":"  340","line":"/// in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert"},
{"lineNum":"  341","line":"/// function is the correct function to use."},
{"lineNum":"  342","line":"pub fn assert(ok: bool) void {","class":"lineCov","hits":"1","order":"55","possible_hits":"1",},
{"lineNum":"  343","line":"    if (!ok) unreachable; // assertion failure","class":"lineCov","hits":"1","order":"56","possible_hits":"1",},
{"lineNum":"  344","line":"}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"pub fn panic(comptime format: []const u8, args: anytype) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  347","line":"    @setCold(true);"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    panicExtra(null, null, format, args);","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  350","line":"}"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"/// `panicExtra` is useful when you want to print out an `@errorReturnTrace`"},
{"lineNum":"  353","line":"/// and also print out some values."},
{"lineNum":"  354","line":"pub fn panicExtra("},
{"lineNum":"  355","line":"    trace: ?*std.builtin.StackTrace,"},
{"lineNum":"  356","line":"    ret_addr: ?usize,"},
{"lineNum":"  357","line":"    comptime format: []const u8,"},
{"lineNum":"  358","line":"    args: anytype,"},
{"lineNum":"  359","line":") noreturn {","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  360","line":"    @setCold(true);"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    const size = 0x1000;"},
{"lineNum":"  363","line":"    const trunc_msg = \"(msg truncated)\";","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  364","line":"    var buf: [size + trunc_msg.len]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  365","line":"    // a minor annoyance with this is that it will result in the NoSpaceLeft"},
{"lineNum":"  366","line":"    // error being part of the @panic stack trace (but that error should"},
{"lineNum":"  367","line":"    // only happen rarely)"},
{"lineNum":"  368","line":"    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"50",},
{"lineNum":"  369","line":"        error.NoSpaceLeft => blk: {"},
{"lineNum":"  370","line":"            @memcpy(buf[size..], trunc_msg);","class":"lineNoCov","hits":"0","possible_hits":"50",},
{"lineNum":"  371","line":"            break :blk &buf;","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  372","line":"        },"},
{"lineNum":"  373","line":"    };"},
{"lineNum":"  374","line":"    std.builtin.panic(msg, trace, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  375","line":"}"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"/// Non-zero whenever the program triggered a panic."},
{"lineNum":"  378","line":"/// The counter is incremented/decremented atomically."},
{"lineNum":"  379","line":"var panicking = std.atomic.Atomic(u8).init(0);"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"// Locked to avoid interleaving panic messages from multiple threads."},
{"lineNum":"  382","line":"var panic_mutex = std.Thread.Mutex{};"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"/// Counts how many times the panic handler is invoked by this thread."},
{"lineNum":"  385","line":"/// This is used to catch and handle panics triggered by the panic handler."},
{"lineNum":"  386","line":"threadlocal var panic_stage: usize = 0;"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"// `panicImpl` could be useful in implementing a custom panic handler which"},
{"lineNum":"  389","line":"// calls the default handler (on supported platforms)"},
{"lineNum":"  390","line":"pub fn panicImpl(trace: ?*const std.builtin.StackTrace, first_trace_addr: ?usize, msg: []const u8) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"    @setCold(true);"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    if (enable_segfault_handler) {"},
{"lineNum":"  394","line":"        // If a segfault happens while panicking, we want it to actually segfault, not trigger"},
{"lineNum":"  395","line":"        // the handler."},
{"lineNum":"  396","line":"        resetSegfaultHandler();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    // Note there is similar logic in handleSegfaultPosix and handleSegfaultWindowsExtra."},
{"lineNum":"  400","line":"    nosuspend switch (panic_stage) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"        0 => {"},
{"lineNum":"  402","line":"            panic_stage = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"            _ = panicking.fetchAdd(1, .SeqCst);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            // Make sure to release the mutex when done"},
{"lineNum":"  407","line":"            {"},
{"lineNum":"  408","line":"                panic_mutex.lock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"                defer panic_mutex.unlock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"                const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"                if (builtin.single_threaded) {"},
{"lineNum":"  413","line":"                    stderr.print(\"panic: \", .{}) catch os.abort();"},
{"lineNum":"  414","line":"                } else {"},
{"lineNum":"  415","line":"                    const current_thread_id = std.Thread.getCurrentId();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"                    stderr.print(\"thread {} panic: \", .{current_thread_id}) catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  417","line":"                }"},
{"lineNum":"  418","line":"                stderr.print(\"{s}\\n\", .{msg}) catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"                if (trace) |t| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":"                    dumpStackTrace(t.*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"                }"},
{"lineNum":"  422","line":"                dumpCurrentStackTrace(first_trace_addr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"            }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"            waitForOtherThreadToFinishPanicking();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"        },"},
{"lineNum":"  427","line":"        1 => {"},
{"lineNum":"  428","line":"            panic_stage = 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"            // A panic happened while trying to print a previous panic message,"},
{"lineNum":"  431","line":"            // we\'re still holding the mutex but that\'s fine as we\'re going to"},
{"lineNum":"  432","line":"            // call abort()"},
{"lineNum":"  433","line":"            const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":"            stderr.print(\"Panicked during a panic. Aborting.\\n\", .{}) catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":"        },"},
{"lineNum":"  436","line":"        else => {"},
{"lineNum":"  437","line":"            // Panicked while printing \"Panicked during a panic.\""},
{"lineNum":"  438","line":"        },"},
{"lineNum":"  439","line":"    };"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"/// Must be called only after adding 1 to `panicking`. There are three callsites."},
{"lineNum":"  445","line":"fn waitForOtherThreadToFinishPanicking() void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  446","line":"    if (panicking.fetchSub(1, .SeqCst) != 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"        // Another thread is panicking, wait for the last one to finish"},
{"lineNum":"  448","line":"        // and call abort()"},
{"lineNum":"  449","line":"        if (builtin.single_threaded) unreachable;"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"        // Sleep forever without hammering the CPU"},
{"lineNum":"  452","line":"        var futex = std.atomic.Atomic(u32).init(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"        while (true) std.Thread.Futex.wait(&futex, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":"        unreachable;"},
{"lineNum":"  455","line":"    }"},
{"lineNum":"  456","line":"}"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"pub fn writeStackTrace("},
{"lineNum":"  459","line":"    stack_trace: std.builtin.StackTrace,"},
{"lineNum":"  460","line":"    out_stream: anytype,"},
{"lineNum":"  461","line":"    allocator: mem.Allocator,"},
{"lineNum":"  462","line":"    debug_info: *DebugInfo,"},
{"lineNum":"  463","line":"    tty_config: io.tty.Config,"},
{"lineNum":"  464","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"    _ = allocator;"},
{"lineNum":"  466","line":"    if (builtin.strip_debug_info) return error.MissingDebugInfo;"},
{"lineNum":"  467","line":"    var frame_index: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"    var frames_left: usize = @min(stack_trace.index, stack_trace.instruction_addresses.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    while (frames_left != 0) : ({","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"        frames_left -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":"        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  473","line":"    }) {"},
{"lineNum":"  474","line":"        const return_address = stack_trace.instruction_addresses[frame_index];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  475","line":"        try printSourceAtAddress(debug_info, out_stream, return_address - 1, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  476","line":"    }"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"    if (stack_trace.index > stack_trace.instruction_addresses.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"        const dropped_frames = stack_trace.index - stack_trace.instruction_addresses.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"        tty_config.setColor(out_stream, .bold) catch {};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  482","line":"        try out_stream.print(\"({d} additional stack frames skipped...)\\n\", .{dropped_frames});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  483","line":"        tty_config.setColor(out_stream, .reset) catch {};","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  484","line":"    }"},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"pub const UnwindError = if (have_ucontext)"},
{"lineNum":"  488","line":"    @typeInfo(@typeInfo(@TypeOf(StackIterator.next_unwind)).Fn.return_type.?).ErrorUnion.error_set"},
{"lineNum":"  489","line":"else"},
{"lineNum":"  490","line":"    void;"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"pub const StackIterator = struct {"},
{"lineNum":"  493","line":"    // Skip every frame before this address is found."},
{"lineNum":"  494","line":"    first_address: ?usize,"},
{"lineNum":"  495","line":"    // Last known value of the frame pointer register."},
{"lineNum":"  496","line":"    fp: usize,"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    // When DebugInfo and a register context is available, this iterator can unwind"},
{"lineNum":"  499","line":"    // stacks with frames that don\'t use a frame pointer (ie. -fomit-frame-pointer),"},
{"lineNum":"  500","line":"    // using DWARF and MachO unwind info."},
{"lineNum":"  501","line":"    unwind_state: if (have_ucontext) ?struct {"},
{"lineNum":"  502","line":"        debug_info: *DebugInfo,"},
{"lineNum":"  503","line":"        dwarf_context: DW.UnwindContext,"},
{"lineNum":"  504","line":"        last_error: ?UnwindError = null,"},
{"lineNum":"  505","line":"        failed: bool = false,"},
{"lineNum":"  506","line":"    } else void = if (have_ucontext) null else {},"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    pub fn init(first_address: ?usize, fp: ?usize) StackIterator {","class":"lineCov","hits":"1","order":"3010","possible_hits":"1",},
{"lineNum":"  509","line":"        if (native_arch == .sparc64) {"},
{"lineNum":"  510","line":"            // Flush all the register windows on stack."},
{"lineNum":"  511","line":"            asm volatile ("},
{"lineNum":"  512","line":"                \\\\ flushw"},
{"lineNum":"  513","line":"                ::: \"memory\");"},
{"lineNum":"  514","line":"        }"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"        return StackIterator{","class":"lineCov","hits":"1","order":"3011","possible_hits":"1",},
{"lineNum":"  517","line":"            .first_address = first_address,"},
{"lineNum":"  518","line":"            .fp = fp orelse @frameAddress(),"},
{"lineNum":"  519","line":"        };"},
{"lineNum":"  520","line":"    }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"    pub fn initWithContext(first_address: ?usize, debug_info: *DebugInfo, context: *const os.ucontext_t) !StackIterator {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  523","line":"        // The implementation of DWARF unwinding on aarch64-macos is not complete. However, Apple mandates that"},
{"lineNum":"  524","line":"        // the frame pointer register is always used, so on this platform we can safely use the FP-based unwinder."},
{"lineNum":"  525","line":"        if (comptime builtin.target.isDarwin() and native_arch == .aarch64) {"},
{"lineNum":"  526","line":"            return init(first_address, context.mcontext.ss.fp);"},
{"lineNum":"  527","line":"        } else {"},
{"lineNum":"  528","line":"            var iterator = init(first_address, null);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  529","line":"            iterator.unwind_state = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  530","line":"                .debug_info = debug_info,"},
{"lineNum":"  531","line":"                .dwarf_context = try DW.UnwindContext.init(debug_info.allocator, context, &isValidMemory),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  532","line":"            };"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"            return iterator;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  535","line":"        }"},
{"lineNum":"  536","line":"    }"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    pub fn deinit(self: *StackIterator) void {","class":"lineCov","hits":"1","order":"3048","possible_hits":"1",},
{"lineNum":"  539","line":"        if (have_ucontext and self.unwind_state != null) self.unwind_state.?.dwarf_context.deinit();","class":"lineCov","hits":"1","order":"3049","possible_hits":"1",},
{"lineNum":"  540","line":"    }"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    pub fn getLastError(self: *StackIterator) ?struct {"},
{"lineNum":"  543","line":"        err: UnwindError,"},
{"lineNum":"  544","line":"        address: usize,"},
{"lineNum":"  545","line":"    } {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"        if (!have_ucontext) return null;"},
{"lineNum":"  547","line":"        if (self.unwind_state) |*unwind_state| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  548","line":"            if (unwind_state.last_error) |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  549","line":"                unwind_state.last_error = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"                return .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  551","line":"                    .err = err,"},
{"lineNum":"  552","line":"                    .address = unwind_state.dwarf_context.pc,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"                };"},
{"lineNum":"  554","line":"            }"},
{"lineNum":"  555","line":"        }"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":"    }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    // Offset of the saved BP wrt the frame pointer."},
{"lineNum":"  561","line":"    const fp_offset = if (native_arch.isRISCV())"},
{"lineNum":"  562","line":"        // On RISC-V the frame pointer points to the top of the saved register"},
{"lineNum":"  563","line":"        // area, on pretty much every other architecture it points to the stack"},
{"lineNum":"  564","line":"        // slot where the previous frame pointer is saved."},
{"lineNum":"  565","line":"        2 * @sizeOf(usize)"},
{"lineNum":"  566","line":"    else if (native_arch.isSPARC())"},
{"lineNum":"  567","line":"        // On SPARC the previous frame pointer is stored at 14 slots past %fp+BIAS."},
{"lineNum":"  568","line":"        14 * @sizeOf(usize)"},
{"lineNum":"  569","line":"    else"},
{"lineNum":"  570","line":"        0;"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    const fp_bias = if (native_arch.isSPARC())"},
{"lineNum":"  573","line":"        // On SPARC frame pointers are biased by a constant."},
{"lineNum":"  574","line":"        2047"},
{"lineNum":"  575","line":"    else"},
{"lineNum":"  576","line":"        0;"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    // Positive offset of the saved PC wrt the frame pointer."},
{"lineNum":"  579","line":"    const pc_offset = if (native_arch == .powerpc64le)"},
{"lineNum":"  580","line":"        2 * @sizeOf(usize)"},
{"lineNum":"  581","line":"    else"},
{"lineNum":"  582","line":"        @sizeOf(usize);"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    pub fn next(self: *StackIterator) ?usize {","class":"lineCov","hits":"1","order":"3014","possible_hits":"1",},
{"lineNum":"  585","line":"        var address = self.next_internal() orelse return null;","class":"lineCov","hits":"2","order":"3015","possible_hits":"2",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"        if (self.first_address) |first_address| {","class":"lineCov","hits":"2","order":"3041","possible_hits":"2",},
{"lineNum":"  588","line":"            while (address != first_address) {","class":"lineCov","hits":"1","order":"3042","possible_hits":"1",},
{"lineNum":"  589","line":"                address = self.next_internal() orelse return null;","class":"lineCov","hits":"1","order":"3043","possible_hits":"1",},
{"lineNum":"  590","line":"            }"},
{"lineNum":"  591","line":"            self.first_address = null;","class":"lineCov","hits":"1","order":"3046","possible_hits":"1",},
{"lineNum":"  592","line":"        }"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"        return address;","class":"lineCov","hits":"1","order":"3044","possible_hits":"1",},
{"lineNum":"  595","line":"    }"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    fn isValidMemory(address: usize) bool {","class":"lineCov","hits":"1","order":"3025","possible_hits":"1",},
{"lineNum":"  598","line":"        // We are unable to determine validity of memory for freestanding targets"},
{"lineNum":"  599","line":"        if (native_os == .freestanding) return true;"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"        const aligned_address = address & ~@as(usize, @intCast((mem.page_size - 1)));","class":"lineCov","hits":"1","order":"3026","possible_hits":"1",},
{"lineNum":"  602","line":"        if (aligned_address == 0) return false;","class":"linePartCov","hits":"1","order":"3027","possible_hits":"2",},
{"lineNum":"  603","line":"        const aligned_memory = @as([*]align(mem.page_size) u8, @ptrFromInt(aligned_address))[0..mem.page_size];","class":"lineCov","hits":"3","order":"3028","possible_hits":"3",},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"        if (native_os != .windows) {"},
{"lineNum":"  606","line":"            if (native_os != .wasi) {"},
{"lineNum":"  607","line":"                os.msync(aligned_memory, os.MSF.ASYNC) catch |err| {","class":"lineCov","hits":"2","order":"3029","possible_hits":"2",},
{"lineNum":"  608","line":"                    switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":"                        os.MSyncError.UnmappedMemory => {"},
{"lineNum":"  610","line":"                            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"                        },"},
{"lineNum":"  612","line":"                        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"                    }"},
{"lineNum":"  614","line":"                };"},
{"lineNum":"  615","line":"            }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"            return true;","class":"lineCov","hits":"1","order":"3035","possible_hits":"1",},
{"lineNum":"  618","line":"        } else {"},
{"lineNum":"  619","line":"            const w = os.windows;"},
{"lineNum":"  620","line":"            var memory_info: w.MEMORY_BASIC_INFORMATION = undefined;"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"            // The only error this function can throw is ERROR_INVALID_PARAMETER."},
{"lineNum":"  623","line":"            // supply an address that invalid i\'ll be thrown."},
{"lineNum":"  624","line":"            const rc = w.VirtualQuery(aligned_memory, &memory_info, aligned_memory.len) catch {"},
{"lineNum":"  625","line":"                return false;"},
{"lineNum":"  626","line":"            };"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"            // Result code has to be bigger than zero (number of bytes written)"},
{"lineNum":"  629","line":"            if (rc == 0) {"},
{"lineNum":"  630","line":"                return false;"},
{"lineNum":"  631","line":"            }"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"            // Free pages cannot be read, they are unmapped"},
{"lineNum":"  634","line":"            if (memory_info.State == w.MEM_FREE) {"},
{"lineNum":"  635","line":"                return false;"},
{"lineNum":"  636","line":"            }"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"            return true;"},
{"lineNum":"  639","line":"        }"},
{"lineNum":"  640","line":"    }"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"    fn next_unwind(self: *StackIterator) !usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  643","line":"        const unwind_state = &self.unwind_state.?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  644","line":"        const module = try unwind_state.debug_info.getModuleForAddress(unwind_state.dwarf_context.pc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  645","line":"        switch (native_os) {"},
{"lineNum":"  646","line":"            .macos, .ios, .watchos, .tvos => {"},
{"lineNum":"  647","line":"                // __unwind_info is a requirement for unwinding on Darwin. It may fall back to DWARF, but unwinding"},
{"lineNum":"  648","line":"                // via DWARF before attempting to use the compact unwind info will produce incorrect results."},
{"lineNum":"  649","line":"                if (module.unwind_info) |unwind_info| {"},
{"lineNum":"  650","line":"                    if (DW.unwindFrameMachO(&unwind_state.dwarf_context, unwind_info, module.eh_frame, module.base_address)) |return_address| {"},
{"lineNum":"  651","line":"                        return return_address;"},
{"lineNum":"  652","line":"                    } else |err| {"},
{"lineNum":"  653","line":"                        if (err != error.RequiresDWARFUnwind) return err;"},
{"lineNum":"  654","line":"                    }"},
{"lineNum":"  655","line":"                } else return error.MissingUnwindInfo;"},
{"lineNum":"  656","line":"            },"},
{"lineNum":"  657","line":"            else => {},"},
{"lineNum":"  658","line":"        }"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"        if (try module.getDwarfInfoForAddress(unwind_state.debug_info.allocator, unwind_state.dwarf_context.pc)) |di| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"            return di.unwindFrame(&unwind_state.dwarf_context, null);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  662","line":"        } else return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"    }"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"    fn next_internal(self: *StackIterator) ?usize {","class":"lineCov","hits":"1","order":"3016","possible_hits":"1",},
{"lineNum":"  666","line":"        if (have_ucontext) {"},
{"lineNum":"  667","line":"            if (self.unwind_state) |*unwind_state| {","class":"linePartCov","hits":"1","order":"3017","possible_hits":"2",},
{"lineNum":"  668","line":"                if (!unwind_state.failed) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":"                    if (unwind_state.dwarf_context.pc == 0) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  670","line":"                    if (self.next_unwind()) |return_address| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  671","line":"                        self.fp = unwind_state.dwarf_context.getFp() catch 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  672","line":"                        return return_address;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  673","line":"                    } else |err| {"},
{"lineNum":"  674","line":"                        unwind_state.last_error = err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"                        unwind_state.failed = true;","class":"linePartCov","hits":"1","order":"3018","possible_hits":"4",},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"                        // Fall back to fp-based unwinding on the first failure."},
{"lineNum":"  678","line":"                        // We can\'t attempt it again for other modules higher in the"},
{"lineNum":"  679","line":"                        // stack because the full register state won\'t have been unwound."},
{"lineNum":"  680","line":"                    }"},
{"lineNum":"  681","line":"                }"},
{"lineNum":"  682","line":"            }"},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"        const fp = if (comptime native_arch.isSPARC())"},
{"lineNum":"  686","line":"            // On SPARC the offset is positive. (!)"},
{"lineNum":"  687","line":"            math.add(usize, self.fp, fp_offset) catch return null"},
{"lineNum":"  688","line":"        else"},
{"lineNum":"  689","line":"            math.sub(usize, self.fp, fp_offset) catch return null;","class":"lineCov","hits":"3","order":"3019","possible_hits":"3",},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"        // Sanity check."},
{"lineNum":"  692","line":"        if (fp == 0 or !mem.isAligned(fp, @alignOf(usize)) or !isValidMemory(fp))","class":"lineCov","hits":"2","order":"3024","possible_hits":"2",},
{"lineNum":"  693","line":"            return null;","class":"lineCov","hits":"1","order":"3159","possible_hits":"1",},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"        const new_fp = math.add(usize, @as(*const usize, @ptrFromInt(fp)).*, fp_bias) catch return null;","class":"lineCov","hits":"3","order":"3036","possible_hits":"3",},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"        // Sanity check: the stack grows down thus all the parent frames must be"},
{"lineNum":"  698","line":"        // be at addresses that are greater (or equal) than the previous one."},
{"lineNum":"  699","line":"        // A zero frame pointer often signals this is the last frame, that case"},
{"lineNum":"  700","line":"        // is gracefully handled by the next call to next_internal."},
{"lineNum":"  701","line":"        if (new_fp != 0 and new_fp < self.fp)","class":"lineCov","hits":"2","order":"3037","possible_hits":"2",},
{"lineNum":"  702","line":"            return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"        const new_pc = @as("},
{"lineNum":"  705","line":"            *const usize,"},
{"lineNum":"  706","line":"            @ptrFromInt(math.add(usize, fp, pc_offset) catch return null),","class":"lineCov","hits":"3","order":"3038","possible_hits":"3",},
{"lineNum":"  707","line":"        ).*;"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"        self.fp = new_fp;","class":"lineCov","hits":"1","order":"3039","possible_hits":"1",},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"        return new_pc;","class":"lineCov","hits":"1","order":"3040","possible_hits":"1",},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":"};"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"pub fn writeCurrentStackTrace("},
{"lineNum":"  716","line":"    out_stream: anytype,"},
{"lineNum":"  717","line":"    debug_info: *DebugInfo,"},
{"lineNum":"  718","line":"    tty_config: io.tty.Config,"},
{"lineNum":"  719","line":"    start_addr: ?usize,"},
{"lineNum":"  720","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":"    var context: ThreadContext = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"    const has_context = getContext(&context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":"    if (native_os == .windows) {"},
{"lineNum":"  724","line":"        return writeStackTraceWindows(out_stream, debug_info, tty_config, &context, start_addr);"},
{"lineNum":"  725","line":"    }"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"    var it = (if (has_context) blk: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  728","line":"        break :blk StackIterator.initWithContext(start_addr, debug_info, &context) catch null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  729","line":"    } else null) orelse StackIterator.init(start_addr, null);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  730","line":"    defer it.deinit();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"    while (it.next()) |return_address| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  733","line":"        printLastUnwindError(&it, debug_info, out_stream, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"        // On arm64 macOS, the address of the last frame is 0x0 rather than 0x1 as on x86_64 macOS,"},
{"lineNum":"  736","line":"        // therefore, we do a check for `return_address == 0` before subtracting 1 from it to avoid"},
{"lineNum":"  737","line":"        // an overflow. We do not need to signal `StackIterator` as it will correctly detect this"},
{"lineNum":"  738","line":"        // condition on the subsequent iteration and return `null` thus terminating the loop."},
{"lineNum":"  739","line":"        // same behaviour for x86-windows-msvc"},
{"lineNum":"  740","line":"        const address = if (return_address == 0) return_address else return_address - 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  741","line":"        try printSourceAtAddress(debug_info, out_stream, address, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  742","line":"    } else printLastUnwindError(&it, debug_info, out_stream, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  743","line":"}"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"pub noinline fn walkStackWindows(addresses: []usize, existing_context: ?*const windows.CONTEXT) usize {"},
{"lineNum":"  746","line":"    if (builtin.cpu.arch == .x86) {"},
{"lineNum":"  747","line":"        // RtlVirtualUnwind doesn\'t exist on x86"},
{"lineNum":"  748","line":"        return windows.ntdll.RtlCaptureStackBackTrace(0, addresses.len, @as(**anyopaque, @ptrCast(addresses.ptr)), null);"},
{"lineNum":"  749","line":"    }"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"    const tib = @as(*const windows.NT_TIB, @ptrCast(&windows.teb().Reserved1));"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    var context: windows.CONTEXT = undefined;"},
{"lineNum":"  754","line":"    if (existing_context) |context_ptr| {"},
{"lineNum":"  755","line":"        context = context_ptr.*;"},
{"lineNum":"  756","line":"    } else {"},
{"lineNum":"  757","line":"        context = std.mem.zeroes(windows.CONTEXT);"},
{"lineNum":"  758","line":"        windows.ntdll.RtlCaptureContext(&context);"},
{"lineNum":"  759","line":"    }"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    var i: usize = 0;"},
{"lineNum":"  762","line":"    var image_base: usize = undefined;"},
{"lineNum":"  763","line":"    var history_table: windows.UNWIND_HISTORY_TABLE = std.mem.zeroes(windows.UNWIND_HISTORY_TABLE);"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"    while (i < addresses.len) : (i += 1) {"},
{"lineNum":"  766","line":"        const current_regs = context.getRegs();"},
{"lineNum":"  767","line":"        if (windows.ntdll.RtlLookupFunctionEntry(current_regs.ip, &image_base, &history_table)) |runtime_function| {"},
{"lineNum":"  768","line":"            var handler_data: ?*anyopaque = null;"},
{"lineNum":"  769","line":"            var establisher_frame: u64 = undefined;"},
{"lineNum":"  770","line":"            _ = windows.ntdll.RtlVirtualUnwind("},
{"lineNum":"  771","line":"                windows.UNW_FLAG_NHANDLER,"},
{"lineNum":"  772","line":"                image_base,"},
{"lineNum":"  773","line":"                current_regs.ip,"},
{"lineNum":"  774","line":"                runtime_function,"},
{"lineNum":"  775","line":"                &context,"},
{"lineNum":"  776","line":"                &handler_data,"},
{"lineNum":"  777","line":"                &establisher_frame,"},
{"lineNum":"  778","line":"                null,"},
{"lineNum":"  779","line":"            );"},
{"lineNum":"  780","line":"        } else {"},
{"lineNum":"  781","line":"            // leaf function"},
{"lineNum":"  782","line":"            context.setIp(@as(*u64, @ptrFromInt(current_regs.sp)).*);"},
{"lineNum":"  783","line":"            context.setSp(current_regs.sp + @sizeOf(usize));"},
{"lineNum":"  784","line":"        }"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"        const next_regs = context.getRegs();"},
{"lineNum":"  787","line":"        if (next_regs.sp < @intFromPtr(tib.StackLimit) or next_regs.sp > @intFromPtr(tib.StackBase)) {"},
{"lineNum":"  788","line":"            break;"},
{"lineNum":"  789","line":"        }"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"        if (next_regs.ip == 0) {"},
{"lineNum":"  792","line":"            break;"},
{"lineNum":"  793","line":"        }"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"        addresses[i] = next_regs.ip;"},
{"lineNum":"  796","line":"    }"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"    return i;"},
{"lineNum":"  799","line":"}"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"pub fn writeStackTraceWindows("},
{"lineNum":"  802","line":"    out_stream: anytype,"},
{"lineNum":"  803","line":"    debug_info: *DebugInfo,"},
{"lineNum":"  804","line":"    tty_config: io.tty.Config,"},
{"lineNum":"  805","line":"    context: *const windows.CONTEXT,"},
{"lineNum":"  806","line":"    start_addr: ?usize,"},
{"lineNum":"  807","line":") !void {"},
{"lineNum":"  808","line":"    var addr_buf: [1024]usize = undefined;"},
{"lineNum":"  809","line":"    const n = walkStackWindows(addr_buf[0..], context);"},
{"lineNum":"  810","line":"    const addrs = addr_buf[0..n];"},
{"lineNum":"  811","line":"    var start_i: usize = if (start_addr) |saddr| blk: {"},
{"lineNum":"  812","line":"        for (addrs, 0..) |addr, i| {"},
{"lineNum":"  813","line":"            if (addr == saddr) break :blk i;"},
{"lineNum":"  814","line":"        }"},
{"lineNum":"  815","line":"        return;"},
{"lineNum":"  816","line":"    } else 0;"},
{"lineNum":"  817","line":"    for (addrs[start_i..]) |addr| {"},
{"lineNum":"  818","line":"        try printSourceAtAddress(debug_info, out_stream, addr - 1, tty_config);"},
{"lineNum":"  819","line":"    }"},
{"lineNum":"  820","line":"}"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"fn machoSearchSymbols(symbols: []const MachoSymbol, address: usize) ?*const MachoSymbol {"},
{"lineNum":"  823","line":"    var min: usize = 0;"},
{"lineNum":"  824","line":"    var max: usize = symbols.len - 1;"},
{"lineNum":"  825","line":"    while (min < max) {"},
{"lineNum":"  826","line":"        const mid = min + (max - min) / 2;"},
{"lineNum":"  827","line":"        const curr = &symbols[mid];"},
{"lineNum":"  828","line":"        const next = &symbols[mid + 1];"},
{"lineNum":"  829","line":"        if (address >= next.address()) {"},
{"lineNum":"  830","line":"            min = mid + 1;"},
{"lineNum":"  831","line":"        } else if (address < curr.address()) {"},
{"lineNum":"  832","line":"            max = mid;"},
{"lineNum":"  833","line":"        } else {"},
{"lineNum":"  834","line":"            return curr;"},
{"lineNum":"  835","line":"        }"},
{"lineNum":"  836","line":"    }"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    const max_sym = &symbols[symbols.len - 1];"},
{"lineNum":"  839","line":"    if (address >= max_sym.address())"},
{"lineNum":"  840","line":"        return max_sym;"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"    return null;"},
{"lineNum":"  843","line":"}"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"test \"machoSearchSymbols\" {"},
{"lineNum":"  846","line":"    const symbols = [_]MachoSymbol{"},
{"lineNum":"  847","line":"        .{ .addr = 100, .strx = undefined, .size = undefined, .ofile = undefined },"},
{"lineNum":"  848","line":"        .{ .addr = 200, .strx = undefined, .size = undefined, .ofile = undefined },"},
{"lineNum":"  849","line":"        .{ .addr = 300, .strx = undefined, .size = undefined, .ofile = undefined },"},
{"lineNum":"  850","line":"    };"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"    try testing.expectEqual(@as(?*const MachoSymbol, null), machoSearchSymbols(&symbols, 0));"},
{"lineNum":"  853","line":"    try testing.expectEqual(@as(?*const MachoSymbol, null), machoSearchSymbols(&symbols, 99));"},
{"lineNum":"  854","line":"    try testing.expectEqual(&symbols[0], machoSearchSymbols(&symbols, 100).?);"},
{"lineNum":"  855","line":"    try testing.expectEqual(&symbols[0], machoSearchSymbols(&symbols, 150).?);"},
{"lineNum":"  856","line":"    try testing.expectEqual(&symbols[0], machoSearchSymbols(&symbols, 199).?);"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"    try testing.expectEqual(&symbols[1], machoSearchSymbols(&symbols, 200).?);"},
{"lineNum":"  859","line":"    try testing.expectEqual(&symbols[1], machoSearchSymbols(&symbols, 250).?);"},
{"lineNum":"  860","line":"    try testing.expectEqual(&symbols[1], machoSearchSymbols(&symbols, 299).?);"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"    try testing.expectEqual(&symbols[2], machoSearchSymbols(&symbols, 300).?);"},
{"lineNum":"  863","line":"    try testing.expectEqual(&symbols[2], machoSearchSymbols(&symbols, 301).?);"},
{"lineNum":"  864","line":"    try testing.expectEqual(&symbols[2], machoSearchSymbols(&symbols, 5000).?);"},
{"lineNum":"  865","line":"}"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"fn printUnknownSource(debug_info: *DebugInfo, out_stream: anytype, address: usize, tty_config: io.tty.Config) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  868","line":"    const module_name = debug_info.getModuleNameForAddress(address);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  869","line":"    return printLineInfo(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  870","line":"        out_stream,"},
{"lineNum":"  871","line":"        null,"},
{"lineNum":"  872","line":"        address,"},
{"lineNum":"  873","line":"        \"???\","},
{"lineNum":"  874","line":"        module_name orelse \"???\","},
{"lineNum":"  875","line":"        tty_config,"},
{"lineNum":"  876","line":"        printLineFromFileAnyOs,"},
{"lineNum":"  877","line":"    );"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"fn printLastUnwindError(it: *StackIterator, debug_info: *DebugInfo, out_stream: anytype, tty_config: io.tty.Config) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  881","line":"    if (!have_ucontext) return;"},
{"lineNum":"  882","line":"    if (it.getLastError()) |unwind_error| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  883","line":"        printUnwindError(debug_info, out_stream, unwind_error.address, unwind_error.err, tty_config) catch {};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  884","line":"    }"},
{"lineNum":"  885","line":"}"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"fn printUnwindError(debug_info: *DebugInfo, out_stream: anytype, address: usize, err: UnwindError, tty_config: io.tty.Config) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  888","line":"    const module_name = debug_info.getModuleNameForAddress(address) orelse \"???\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  889","line":"    try tty_config.setColor(out_stream, .dim);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  890","line":"    if (err == error.MissingDebugInfo) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  891","line":"        try out_stream.print(\"Unwind information for `{s}:0x{x}` was not available, trace may be incomplete\\n\\n\", .{ module_name, address });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  892","line":"    } else {"},
{"lineNum":"  893","line":"        try out_stream.print(\"Unwind error at address `{s}:0x{x}` ({}), trace may be incomplete\\n\\n\", .{ module_name, address, err });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  894","line":"    }"},
{"lineNum":"  895","line":"    try tty_config.setColor(out_stream, .reset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  896","line":"}"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"pub fn printSourceAtAddress(debug_info: *DebugInfo, out_stream: anytype, address: usize, tty_config: io.tty.Config) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  899","line":"    const module = debug_info.getModuleForAddress(address) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  900","line":"        error.MissingDebugInfo, error.InvalidDebugInfo => return printUnknownSource(debug_info, out_stream, address, tty_config),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  901","line":"        else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  902","line":"    };"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"    const symbol_info = module.getSymbolAtAddress(debug_info.allocator, address) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  905","line":"        error.MissingDebugInfo, error.InvalidDebugInfo => return printUnknownSource(debug_info, out_stream, address, tty_config),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  906","line":"        else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  907","line":"    };"},
{"lineNum":"  908","line":"    defer symbol_info.deinit(debug_info.allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"    return printLineInfo(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  911","line":"        out_stream,"},
{"lineNum":"  912","line":"        symbol_info.line_info,"},
{"lineNum":"  913","line":"        address,"},
{"lineNum":"  914","line":"        symbol_info.symbol_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  915","line":"        symbol_info.compile_unit_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  916","line":"        tty_config,"},
{"lineNum":"  917","line":"        printLineFromFileAnyOs,"},
{"lineNum":"  918","line":"    );"},
{"lineNum":"  919","line":"}"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"fn printLineInfo("},
{"lineNum":"  922","line":"    out_stream: anytype,"},
{"lineNum":"  923","line":"    line_info: ?LineInfo,"},
{"lineNum":"  924","line":"    address: usize,"},
{"lineNum":"  925","line":"    symbol_name: []const u8,"},
{"lineNum":"  926","line":"    compile_unit_name: []const u8,"},
{"lineNum":"  927","line":"    tty_config: io.tty.Config,"},
{"lineNum":"  928","line":"    comptime printLineFromFile: anytype,"},
{"lineNum":"  929","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"    nosuspend {"},
{"lineNum":"  931","line":"        try tty_config.setColor(out_stream, .bold);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"        if (line_info) |*li| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  934","line":"            try out_stream.print(\"{s}:{d}:{d}\", .{ li.file_name, li.line, li.column });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  935","line":"        } else {"},
{"lineNum":"  936","line":"            try out_stream.writeAll(\"???:?:?\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  937","line":"        }"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"        try tty_config.setColor(out_stream, .reset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  940","line":"        try out_stream.writeAll(\": \");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  941","line":"        try tty_config.setColor(out_stream, .dim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  942","line":"        try out_stream.print(\"0x{x} in {s} ({s})\", .{ address, symbol_name, compile_unit_name });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"        try tty_config.setColor(out_stream, .reset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  944","line":"        try out_stream.writeAll(\"\\n\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"        // Show the matching source code line if possible"},
{"lineNum":"  947","line":"        if (line_info) |li| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  948","line":"            if (printLineFromFile(out_stream, li)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  949","line":"                if (li.column > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  950","line":"                    // The caret already takes one char"},
{"lineNum":"  951","line":"                    const space_needed = @as(usize, @intCast(li.column - 1));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"                    try out_stream.writeByteNTimes(\' \', space_needed);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  954","line":"                    try tty_config.setColor(out_stream, .green);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  955","line":"                    try out_stream.writeAll(\"^\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  956","line":"                    try tty_config.setColor(out_stream, .reset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  957","line":"                }"},
{"lineNum":"  958","line":"                try out_stream.writeAll(\"\\n\");","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  959","line":"            } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  960","line":"                error.EndOfFile, error.FileNotFound => {},"},
{"lineNum":"  961","line":"                error.BadPathName => {},"},
{"lineNum":"  962","line":"                error.AccessDenied => {},"},
{"lineNum":"  963","line":"                else => return err,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  964","line":"            }"},
{"lineNum":"  965","line":"        }"},
{"lineNum":"  966","line":"    }"},
{"lineNum":"  967","line":"}"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"pub const OpenSelfDebugInfoError = error{"},
{"lineNum":"  970","line":"    MissingDebugInfo,"},
{"lineNum":"  971","line":"    UnsupportedOperatingSystem,"},
{"lineNum":"  972","line":"} || @typeInfo(@typeInfo(@TypeOf(DebugInfo.init)).Fn.return_type.?).ErrorUnion.error_set;"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"pub fn openSelfDebugInfo(allocator: mem.Allocator) OpenSelfDebugInfoError!DebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  975","line":"    nosuspend {"},
{"lineNum":"  976","line":"        if (builtin.strip_debug_info)"},
{"lineNum":"  977","line":"            return error.MissingDebugInfo;"},
{"lineNum":"  978","line":"        if (@hasDecl(root, \"os\") and @hasDecl(root.os, \"debug\") and @hasDecl(root.os.debug, \"openSelfDebugInfo\")) {"},
{"lineNum":"  979","line":"            return root.os.debug.openSelfDebugInfo(allocator);"},
{"lineNum":"  980","line":"        }"},
{"lineNum":"  981","line":"        switch (native_os) {"},
{"lineNum":"  982","line":"            .linux,"},
{"lineNum":"  983","line":"            .freebsd,"},
{"lineNum":"  984","line":"            .netbsd,"},
{"lineNum":"  985","line":"            .dragonfly,"},
{"lineNum":"  986","line":"            .openbsd,"},
{"lineNum":"  987","line":"            .macos,"},
{"lineNum":"  988","line":"            .solaris,"},
{"lineNum":"  989","line":"            .windows,"},
{"lineNum":"  990","line":"            => return try DebugInfo.init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  991","line":"            else => return error.UnsupportedOperatingSystem,"},
{"lineNum":"  992","line":"        }"},
{"lineNum":"  993","line":"    }"},
{"lineNum":"  994","line":"}"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"fn readCoffDebugInfo(allocator: mem.Allocator, coff_obj: *coff.Coff) !ModuleDebugInfo {"},
{"lineNum":"  997","line":"    nosuspend {"},
{"lineNum":"  998","line":"        var di = ModuleDebugInfo{"},
{"lineNum":"  999","line":"            .base_address = undefined,"},
{"lineNum":" 1000","line":"            .coff_image_base = coff_obj.getImageBase(),"},
{"lineNum":" 1001","line":"            .coff_section_headers = undefined,"},
{"lineNum":" 1002","line":"            .debug_data = undefined,"},
{"lineNum":" 1003","line":"        };"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"        if (coff_obj.getSectionByName(\".debug_info\")) |_| {"},
{"lineNum":" 1006","line":"            // This coff file has embedded DWARF debug info"},
{"lineNum":" 1007","line":"            var sections: DW.DwarfInfo.SectionArray = DW.DwarfInfo.null_section_array;"},
{"lineNum":" 1008","line":"            errdefer for (sections) |section| if (section) |s| if (s.owned) allocator.free(s.data);"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"            inline for (@typeInfo(DW.DwarfSection).Enum.fields, 0..) |section, i| {"},
{"lineNum":" 1011","line":"                sections[i] = if (coff_obj.getSectionByName(\".\" ++ section.name)) |section_header| blk: {"},
{"lineNum":" 1012","line":"                    break :blk .{"},
{"lineNum":" 1013","line":"                        .data = try coff_obj.getSectionDataAlloc(section_header, allocator),"},
{"lineNum":" 1014","line":"                        .virtual_address = section_header.virtual_address,"},
{"lineNum":" 1015","line":"                        .owned = true,"},
{"lineNum":" 1016","line":"                    };"},
{"lineNum":" 1017","line":"                } else null;"},
{"lineNum":" 1018","line":"            }"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"            var dwarf = DW.DwarfInfo{"},
{"lineNum":" 1021","line":"                .endian = native_endian,"},
{"lineNum":" 1022","line":"                .sections = sections,"},
{"lineNum":" 1023","line":"                .is_macho = false,"},
{"lineNum":" 1024","line":"            };"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"            try DW.openDwarfDebugInfo(&dwarf, allocator);"},
{"lineNum":" 1027","line":"            di.debug_data = PdbOrDwarf{ .dwarf = dwarf };"},
{"lineNum":" 1028","line":"            return di;"},
{"lineNum":" 1029","line":"        }"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"        // Only used by pdb path"},
{"lineNum":" 1032","line":"        di.coff_section_headers = try coff_obj.getSectionHeadersAlloc(allocator);"},
{"lineNum":" 1033","line":"        errdefer allocator.free(di.coff_section_headers);"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"        var path_buf: [windows.MAX_PATH]u8 = undefined;"},
{"lineNum":" 1036","line":"        const len = try coff_obj.getPdbPath(path_buf[0..]);"},
{"lineNum":" 1037","line":"        const raw_path = path_buf[0..len];"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"        const path = try fs.path.resolve(allocator, &[_][]const u8{raw_path});"},
{"lineNum":" 1040","line":"        defer allocator.free(path);"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"        di.debug_data = PdbOrDwarf{ .pdb = undefined };"},
{"lineNum":" 1043","line":"        di.debug_data.pdb = pdb.Pdb.init(allocator, path) catch |err| switch (err) {"},
{"lineNum":" 1044","line":"            error.FileNotFound, error.IsDir => return error.MissingDebugInfo,"},
{"lineNum":" 1045","line":"            else => return err,"},
{"lineNum":" 1046","line":"        };"},
{"lineNum":" 1047","line":"        try di.debug_data.pdb.parseInfoStream();"},
{"lineNum":" 1048","line":"        try di.debug_data.pdb.parseDbiStream();"},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"        if (!mem.eql(u8, &coff_obj.guid, &di.debug_data.pdb.guid) or coff_obj.age != di.debug_data.pdb.age)"},
{"lineNum":" 1051","line":"            return error.InvalidDebugInfo;"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"        return di;"},
{"lineNum":" 1054","line":"    }"},
{"lineNum":" 1055","line":"}"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"fn chopSlice(ptr: []const u8, offset: u64, size: u64) error{Overflow}![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1058","line":"    const start = math.cast(usize, offset) orelse return error.Overflow;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1059","line":"    const end = start + (math.cast(usize, size) orelse return error.Overflow);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1060","line":"    return ptr[start..end];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1061","line":"}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"/// Reads debug info from an ELF file, or the current binary if none in specified."},
{"lineNum":" 1064","line":"/// If the required sections aren\'t present but a reference to external debug info is,"},
{"lineNum":" 1065","line":"/// then this this function will recurse to attempt to load the debug sections from"},
{"lineNum":" 1066","line":"/// an external file."},
{"lineNum":" 1067","line":"pub fn readElfDebugInfo("},
{"lineNum":" 1068","line":"    allocator: mem.Allocator,"},
{"lineNum":" 1069","line":"    elf_filename: ?[]const u8,"},
{"lineNum":" 1070","line":"    build_id: ?[]const u8,"},
{"lineNum":" 1071","line":"    expected_crc: ?u32,"},
{"lineNum":" 1072","line":"    parent_sections: *DW.DwarfInfo.SectionArray,"},
{"lineNum":" 1073","line":"    parent_mapped_mem: ?[]align(mem.page_size) const u8,"},
{"lineNum":" 1074","line":") !ModuleDebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1075","line":"    nosuspend {"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"        // TODO https://github.com/ziglang/zig/issues/5525"},
{"lineNum":" 1078","line":"        const elf_file = (if (elf_filename) |filename| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1079","line":"            break :blk if (fs.path.isAbsolute(filename))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1080","line":"                fs.openFileAbsolute(filename, .{ .intended_io_mode = .blocking })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1081","line":"            else"},
{"lineNum":" 1082","line":"                fs.cwd().openFile(filename, .{ .intended_io_mode = .blocking });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1083","line":"        } else fs.openSelfExe(.{ .intended_io_mode = .blocking })) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1084","line":"            error.FileNotFound => return error.MissingDebugInfo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1085","line":"            else => return err,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1086","line":"        };"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"        const mapped_mem = try mapWholeFile(elf_file);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1089","line":"        if (expected_crc) |crc| if (crc != std.hash.crc.Crc32SmallWithPoly(.IEEE).hash(mapped_mem)) return error.InvalidDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"        const hdr: *const elf.Ehdr = @ptrCast(&mapped_mem[0]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1092","line":"        if (!mem.eql(u8, hdr.e_ident[0..4], elf.MAGIC)) return error.InvalidElfMagic;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1093","line":"        if (hdr.e_ident[elf.EI_VERSION] != 1) return error.InvalidElfVersion;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"        const endian: std.builtin.Endian = switch (hdr.e_ident[elf.EI_DATA]) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1096","line":"            elf.ELFDATA2LSB => .Little,"},
{"lineNum":" 1097","line":"            elf.ELFDATA2MSB => .Big,"},
{"lineNum":" 1098","line":"            else => return error.InvalidElfEndian,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1099","line":"        };"},
{"lineNum":" 1100","line":"        assert(endian == native_endian); // this is our own debug info","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"        const shoff = hdr.e_shoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1103","line":"        const str_section_off = shoff + @as(u64, hdr.e_shentsize) * @as(u64, hdr.e_shstrndx);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1104","line":"        const str_shdr: *const elf.Shdr = @ptrCast(@alignCast(&mapped_mem[math.cast(usize, str_section_off) orelse return error.Overflow]));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1105","line":"        const header_strings = mapped_mem[str_shdr.sh_offset..][0..str_shdr.sh_size];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1106","line":"        const shdrs = @as("},
{"lineNum":" 1107","line":"            [*]const elf.Shdr,"},
{"lineNum":" 1108","line":"            @ptrCast(@alignCast(&mapped_mem[shoff])),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1109","line":"        )[0..hdr.e_shnum];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"        var sections: DW.DwarfInfo.SectionArray = DW.DwarfInfo.null_section_array;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"        // Combine section list. This takes ownership over any owned sections from the parent scope."},
{"lineNum":" 1114","line":"        for (parent_sections, &sections) |*parent, *section| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1115","line":"            if (parent.*) |*p| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1116","line":"                section.* = p.*;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1117","line":"                p.owned = false;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1118","line":"            }"},
{"lineNum":" 1119","line":"        }"},
{"lineNum":" 1120","line":"        errdefer for (sections) |section| if (section) |s| if (s.owned) allocator.free(s.data);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"        var separate_debug_filename: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1123","line":"        var separate_debug_crc: ?u32 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        for (shdrs) |*shdr| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1126","line":"            if (shdr.sh_type == elf.SHT_NULL or shdr.sh_type == elf.SHT_NOBITS) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1127","line":"            const name = mem.sliceTo(header_strings[shdr.sh_name..], 0);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"            if (mem.eql(u8, name, \".gnu_debuglink\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1130","line":"                const gnu_debuglink = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1131","line":"                const debug_filename = mem.sliceTo(@as([*:0]const u8, @ptrCast(gnu_debuglink.ptr)), 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1132","line":"                const crc_offset = mem.alignForward(usize, @intFromPtr(&debug_filename[debug_filename.len]) + 1, 4) - @intFromPtr(gnu_debuglink.ptr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1133","line":"                const crc_bytes = gnu_debuglink[crc_offset .. crc_offset + 4];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1134","line":"                separate_debug_crc = mem.readIntSliceNative(u32, crc_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1135","line":"                separate_debug_filename = debug_filename;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1136","line":"                continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1137","line":"            }"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"            var section_index: ?usize = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1140","line":"            inline for (@typeInfo(DW.DwarfSection).Enum.fields, 0..) |section, i| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1141","line":"                if (mem.eql(u8, \".\" ++ section.name, name)) section_index = i;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1142","line":"            }"},
{"lineNum":" 1143","line":"            if (section_index == null) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1144","line":"            if (sections[section_index.?] != null) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"            const section_bytes = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1147","line":"            sections[section_index.?] = if ((shdr.sh_flags & elf.SHF_COMPRESSED) > 0) blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1148","line":"                var section_stream = io.fixedBufferStream(section_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1149","line":"                var section_reader = section_stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1150","line":"                const chdr = section_reader.readStruct(elf.Chdr) catch continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1151","line":"                if (chdr.ch_type != .ZLIB) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"                var zlib_stream = std.compress.zlib.decompressStream(allocator, section_stream.reader()) catch continue;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1154","line":"                defer zlib_stream.deinit();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"                var decompressed_section = try allocator.alloc(u8, chdr.ch_size);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1157","line":"                errdefer allocator.free(decompressed_section);"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"                const read = zlib_stream.reader().readAll(decompressed_section) catch continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1160","line":"                assert(read == decompressed_section.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"                break :blk .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1163","line":"                    .data = decompressed_section,"},
{"lineNum":" 1164","line":"                    .virtual_address = shdr.sh_addr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1165","line":"                    .owned = true,"},
{"lineNum":" 1166","line":"                };"},
{"lineNum":" 1167","line":"            } else .{"},
{"lineNum":" 1168","line":"                .data = section_bytes,"},
{"lineNum":" 1169","line":"                .virtual_address = shdr.sh_addr,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1170","line":"                .owned = false,"},
{"lineNum":" 1171","line":"            };"},
{"lineNum":" 1172","line":"        }"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"        const missing_debug_info ="},
{"lineNum":" 1175","line":"            sections[@intFromEnum(DW.DwarfSection.debug_info)] == null or","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1176","line":"            sections[@intFromEnum(DW.DwarfSection.debug_abbrev)] == null or","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1177","line":"            sections[@intFromEnum(DW.DwarfSection.debug_str)] == null or","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1178","line":"            sections[@intFromEnum(DW.DwarfSection.debug_line)] == null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"        // Attempt to load debug info from an external file"},
{"lineNum":" 1181","line":"        // See: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html"},
{"lineNum":" 1182","line":"        if (missing_debug_info) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"            // Only allow one level of debug info nesting"},
{"lineNum":" 1185","line":"            if (parent_mapped_mem) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1186","line":"                return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1187","line":"            }"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"            const global_debug_directories = [_][]const u8{"},
{"lineNum":" 1190","line":"                \"/usr/lib/debug\","},
{"lineNum":" 1191","line":"            };"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"            // <global debug directory>/.build-id/<2-character id prefix>/<id remainder>.debug"},
{"lineNum":" 1194","line":"            if (build_id) |id| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1195","line":"                if (id.len < 3) break :blk;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"                // Either md5 (16 bytes) or sha1 (20 bytes) are used here in practice"},
{"lineNum":" 1198","line":"                const extension = \".debug\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1199","line":"                var id_prefix_buf: [2]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1200","line":"                var filename_buf: [38 + extension.len]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"                _ = std.fmt.bufPrint(&id_prefix_buf, \"{s}\", .{std.fmt.fmtSliceHexLower(id[0..1])}) catch unreachable;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1203","line":"                const filename = std.fmt.bufPrint(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1204","line":"                    &filename_buf,"},
{"lineNum":" 1205","line":"                    \"{s}\" ++ extension,"},
{"lineNum":" 1206","line":"                    .{std.fmt.fmtSliceHexLower(id[1..])},","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1207","line":"                ) catch break :blk;"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"                for (global_debug_directories) |global_directory| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1210","line":"                    const path = try fs.path.join(allocator, &.{ global_directory, \".build-id\", &id_prefix_buf, filename });","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1211","line":"                    defer allocator.free(path);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"                    return readElfDebugInfo(allocator, path, null, separate_debug_crc, &sections, mapped_mem) catch continue;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1214","line":"                }"},
{"lineNum":" 1215","line":"            }"},
{"lineNum":" 1216","line":""},
{"lineNum":" 1217","line":"            // use the path from .gnu_debuglink, in the same search order as gdb"},
{"lineNum":" 1218","line":"            if (separate_debug_filename) |separate_filename| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1219","line":"                if (elf_filename != null and mem.eql(u8, elf_filename.?, separate_filename)) return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"                // <cwd>/<gnu_debuglink>"},
{"lineNum":" 1222","line":"                if (readElfDebugInfo(allocator, separate_filename, null, separate_debug_crc, &sections, mapped_mem)) |debug_info| return debug_info else |_| {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"                // <cwd>/.debug/<gnu_debuglink>"},
{"lineNum":" 1225","line":"                {"},
{"lineNum":" 1226","line":"                    const path = try fs.path.join(allocator, &.{ \".debug\", separate_filename });","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1227","line":"                    defer allocator.free(path);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"                    if (readElfDebugInfo(allocator, path, null, separate_debug_crc, &sections, mapped_mem)) |debug_info| return debug_info else |_| {}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1230","line":"                }"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"                var cwd_buf: [fs.MAX_PATH_BYTES]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1233","line":"                const cwd_path = fs.cwd().realpath(\"\", &cwd_buf) catch break :blk;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"                // <global debug directory>/<absolute folder of current binary>/<gnu_debuglink>"},
{"lineNum":" 1236","line":"                for (global_debug_directories) |global_directory| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1237","line":"                    const path = try fs.path.join(allocator, &.{ global_directory, cwd_path, separate_filename });","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1238","line":"                    defer allocator.free(path);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1239","line":"                    if (readElfDebugInfo(allocator, path, null, separate_debug_crc, &sections, mapped_mem)) |debug_info| return debug_info else |_| {}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1240","line":"                }"},
{"lineNum":" 1241","line":"            }"},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"            return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1244","line":"        }"},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"        var di = DW.DwarfInfo{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1247","line":"            .endian = endian,"},
{"lineNum":" 1248","line":"            .sections = sections,"},
{"lineNum":" 1249","line":"            .is_macho = false,"},
{"lineNum":" 1250","line":"        };"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"        try DW.openDwarfDebugInfo(&di, allocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"        return ModuleDebugInfo{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1255","line":"            .base_address = undefined,"},
{"lineNum":" 1256","line":"            .dwarf = di,"},
{"lineNum":" 1257","line":"            .mapped_memory = parent_mapped_mem orelse mapped_mem,"},
{"lineNum":" 1258","line":"            .external_mapped_memory = if (parent_mapped_mem != null) mapped_mem else null,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1259","line":"        };"},
{"lineNum":" 1260","line":"    }"},
{"lineNum":" 1261","line":"}"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"/// This takes ownership of macho_file: users of this function should not close"},
{"lineNum":" 1264","line":"/// it themselves, even on error."},
{"lineNum":" 1265","line":"/// TODO it\'s weird to take ownership even on error, rework this code."},
{"lineNum":" 1266","line":"fn readMachODebugInfo(allocator: mem.Allocator, macho_file: File) !ModuleDebugInfo {"},
{"lineNum":" 1267","line":"    const mapped_mem = try mapWholeFile(macho_file);"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"    const hdr: *const macho.mach_header_64 = @ptrCast(@alignCast(mapped_mem.ptr));"},
{"lineNum":" 1270","line":"    if (hdr.magic != macho.MH_MAGIC_64)"},
{"lineNum":" 1271","line":"        return error.InvalidDebugInfo;"},
{"lineNum":" 1272","line":""},
{"lineNum":" 1273","line":"    var it = macho.LoadCommandIterator{"},
{"lineNum":" 1274","line":"        .ncmds = hdr.ncmds,"},
{"lineNum":" 1275","line":"        .buffer = mapped_mem[@sizeOf(macho.mach_header_64)..][0..hdr.sizeofcmds],"},
{"lineNum":" 1276","line":"    };"},
{"lineNum":" 1277","line":"    const symtab = while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1278","line":"        .SYMTAB => break cmd.cast(macho.symtab_command).?,"},
{"lineNum":" 1279","line":"        else => {},"},
{"lineNum":" 1280","line":"    } else return error.MissingDebugInfo;"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"    const syms = @as("},
{"lineNum":" 1283","line":"        [*]const macho.nlist_64,"},
{"lineNum":" 1284","line":"        @ptrCast(@alignCast(&mapped_mem[symtab.symoff])),"},
{"lineNum":" 1285","line":"    )[0..symtab.nsyms];"},
{"lineNum":" 1286","line":"    const strings = mapped_mem[symtab.stroff..][0 .. symtab.strsize - 1 :0];"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"    const symbols_buf = try allocator.alloc(MachoSymbol, syms.len);"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"    var ofile: u32 = undefined;"},
{"lineNum":" 1291","line":"    var last_sym: MachoSymbol = undefined;"},
{"lineNum":" 1292","line":"    var symbol_index: usize = 0;"},
{"lineNum":" 1293","line":"    var state: enum {"},
{"lineNum":" 1294","line":"        init,"},
{"lineNum":" 1295","line":"        oso_open,"},
{"lineNum":" 1296","line":"        oso_close,"},
{"lineNum":" 1297","line":"        bnsym,"},
{"lineNum":" 1298","line":"        fun_strx,"},
{"lineNum":" 1299","line":"        fun_size,"},
{"lineNum":" 1300","line":"        ensym,"},
{"lineNum":" 1301","line":"    } = .init;"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"    for (syms) |*sym| {"},
{"lineNum":" 1304","line":"        if (!sym.stab()) continue;"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"        // TODO handle globals N_GSYM, and statics N_STSYM"},
{"lineNum":" 1307","line":"        switch (sym.n_type) {"},
{"lineNum":" 1308","line":"            macho.N_OSO => {"},
{"lineNum":" 1309","line":"                switch (state) {"},
{"lineNum":" 1310","line":"                    .init, .oso_close => {"},
{"lineNum":" 1311","line":"                        state = .oso_open;"},
{"lineNum":" 1312","line":"                        ofile = sym.n_strx;"},
{"lineNum":" 1313","line":"                    },"},
{"lineNum":" 1314","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1315","line":"                }"},
{"lineNum":" 1316","line":"            },"},
{"lineNum":" 1317","line":"            macho.N_BNSYM => {"},
{"lineNum":" 1318","line":"                switch (state) {"},
{"lineNum":" 1319","line":"                    .oso_open, .ensym => {"},
{"lineNum":" 1320","line":"                        state = .bnsym;"},
{"lineNum":" 1321","line":"                        last_sym = .{"},
{"lineNum":" 1322","line":"                            .strx = 0,"},
{"lineNum":" 1323","line":"                            .addr = sym.n_value,"},
{"lineNum":" 1324","line":"                            .size = 0,"},
{"lineNum":" 1325","line":"                            .ofile = ofile,"},
{"lineNum":" 1326","line":"                        };"},
{"lineNum":" 1327","line":"                    },"},
{"lineNum":" 1328","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1329","line":"                }"},
{"lineNum":" 1330","line":"            },"},
{"lineNum":" 1331","line":"            macho.N_FUN => {"},
{"lineNum":" 1332","line":"                switch (state) {"},
{"lineNum":" 1333","line":"                    .bnsym => {"},
{"lineNum":" 1334","line":"                        state = .fun_strx;"},
{"lineNum":" 1335","line":"                        last_sym.strx = sym.n_strx;"},
{"lineNum":" 1336","line":"                    },"},
{"lineNum":" 1337","line":"                    .fun_strx => {"},
{"lineNum":" 1338","line":"                        state = .fun_size;"},
{"lineNum":" 1339","line":"                        last_sym.size = @as(u32, @intCast(sym.n_value));"},
{"lineNum":" 1340","line":"                    },"},
{"lineNum":" 1341","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1342","line":"                }"},
{"lineNum":" 1343","line":"            },"},
{"lineNum":" 1344","line":"            macho.N_ENSYM => {"},
{"lineNum":" 1345","line":"                switch (state) {"},
{"lineNum":" 1346","line":"                    .fun_size => {"},
{"lineNum":" 1347","line":"                        state = .ensym;"},
{"lineNum":" 1348","line":"                        symbols_buf[symbol_index] = last_sym;"},
{"lineNum":" 1349","line":"                        symbol_index += 1;"},
{"lineNum":" 1350","line":"                    },"},
{"lineNum":" 1351","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1352","line":"                }"},
{"lineNum":" 1353","line":"            },"},
{"lineNum":" 1354","line":"            macho.N_SO => {"},
{"lineNum":" 1355","line":"                switch (state) {"},
{"lineNum":" 1356","line":"                    .init, .oso_close => {},"},
{"lineNum":" 1357","line":"                    .oso_open, .ensym => {"},
{"lineNum":" 1358","line":"                        state = .oso_close;"},
{"lineNum":" 1359","line":"                    },"},
{"lineNum":" 1360","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1361","line":"                }"},
{"lineNum":" 1362","line":"            },"},
{"lineNum":" 1363","line":"            else => {},"},
{"lineNum":" 1364","line":"        }"},
{"lineNum":" 1365","line":"    }"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"    switch (state) {"},
{"lineNum":" 1368","line":"        .init => return error.MissingDebugInfo,"},
{"lineNum":" 1369","line":"        .oso_close => {},"},
{"lineNum":" 1370","line":"        else => return error.InvalidDebugInfo,"},
{"lineNum":" 1371","line":"    }"},
{"lineNum":" 1372","line":""},
{"lineNum":" 1373","line":"    const symbols = try allocator.realloc(symbols_buf, symbol_index);"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"    // Even though lld emits symbols in ascending order, this debug code"},
{"lineNum":" 1376","line":"    // should work for programs linked in any valid way."},
{"lineNum":" 1377","line":"    // This sort is so that we can binary search later."},
{"lineNum":" 1378","line":"    mem.sort(MachoSymbol, symbols, {}, MachoSymbol.addressLessThan);"},
{"lineNum":" 1379","line":""},
{"lineNum":" 1380","line":"    return ModuleDebugInfo{"},
{"lineNum":" 1381","line":"        .base_address = undefined,"},
{"lineNum":" 1382","line":"        .vmaddr_slide = undefined,"},
{"lineNum":" 1383","line":"        .mapped_memory = mapped_mem,"},
{"lineNum":" 1384","line":"        .ofiles = ModuleDebugInfo.OFileTable.init(allocator),"},
{"lineNum":" 1385","line":"        .symbols = symbols,"},
{"lineNum":" 1386","line":"        .strings = strings,"},
{"lineNum":" 1387","line":"    };"},
{"lineNum":" 1388","line":"}"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"fn printLineFromFileAnyOs(out_stream: anytype, line_info: LineInfo) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1391","line":"    // Need this to always block even in async I/O mode, because this could potentially"},
{"lineNum":" 1392","line":"    // be called from e.g. the event loop code crashing."},
{"lineNum":" 1393","line":"    var f = try fs.cwd().openFile(line_info.file_name, .{ .intended_io_mode = .blocking });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1394","line":"    defer f.close();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1395","line":"    // TODO fstat and make sure that the file has the correct size"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"    var buf: [mem.page_size]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1398","line":"    var line: usize = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1399","line":"    var column: usize = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1400","line":"    while (true) {"},
{"lineNum":" 1401","line":"        const amt_read = try f.read(buf[0..]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1402","line":"        const slice = buf[0..amt_read];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"        for (slice) |byte| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1405","line":"            if (line == line_info.line) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1406","line":"                switch (byte) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1407","line":"                    \'\\t\' => try out_stream.writeByte(\' \'),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1408","line":"                    else => try out_stream.writeByte(byte),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1409","line":"                }"},
{"lineNum":" 1410","line":"                if (byte == \'\\n\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1411","line":"                    return;"},
{"lineNum":" 1412","line":"                }"},
{"lineNum":" 1413","line":"            }"},
{"lineNum":" 1414","line":"            if (byte == \'\\n\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1415","line":"                line += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1416","line":"                column = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1417","line":"            } else {"},
{"lineNum":" 1418","line":"                column += 1;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1419","line":"            }"},
{"lineNum":" 1420","line":"        }"},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"        if (amt_read < buf.len) return error.EndOfFile;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1423","line":"    }"},
{"lineNum":" 1424","line":"}"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"const MachoSymbol = struct {"},
{"lineNum":" 1427","line":"    strx: u32,"},
{"lineNum":" 1428","line":"    addr: u64,"},
{"lineNum":" 1429","line":"    size: u32,"},
{"lineNum":" 1430","line":"    ofile: u32,"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"    /// Returns the address from the macho file"},
{"lineNum":" 1433","line":"    fn address(self: MachoSymbol) u64 {"},
{"lineNum":" 1434","line":"        return self.addr;"},
{"lineNum":" 1435","line":"    }"},
{"lineNum":" 1436","line":""},
{"lineNum":" 1437","line":"    fn addressLessThan(context: void, lhs: MachoSymbol, rhs: MachoSymbol) bool {"},
{"lineNum":" 1438","line":"        _ = context;"},
{"lineNum":" 1439","line":"        return lhs.addr < rhs.addr;"},
{"lineNum":" 1440","line":"    }"},
{"lineNum":" 1441","line":"};"},
{"lineNum":" 1442","line":""},
{"lineNum":" 1443","line":"/// `file` is expected to have been opened with .intended_io_mode == .blocking."},
{"lineNum":" 1444","line":"/// Takes ownership of file, even on error."},
{"lineNum":" 1445","line":"/// TODO it\'s weird to take ownership even on error, rework this code."},
{"lineNum":" 1446","line":"fn mapWholeFile(file: File) ![]align(mem.page_size) const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1447","line":"    nosuspend {"},
{"lineNum":" 1448","line":"        defer file.close();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1449","line":""},
{"lineNum":" 1450","line":"        const file_len = math.cast(usize, try file.getEndPos()) orelse math.maxInt(usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1451","line":"        const mapped_mem = try os.mmap(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1452","line":"            null,"},
{"lineNum":" 1453","line":"            file_len,"},
{"lineNum":" 1454","line":"            os.PROT.READ,"},
{"lineNum":" 1455","line":"            os.MAP.SHARED,"},
{"lineNum":" 1456","line":"            file.handle,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1457","line":"            0,"},
{"lineNum":" 1458","line":"        );"},
{"lineNum":" 1459","line":"        errdefer os.munmap(mapped_mem);"},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"        return mapped_mem;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1462","line":"    }"},
{"lineNum":" 1463","line":"}"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"pub const WindowsModuleInfo = struct {"},
{"lineNum":" 1466","line":"    base_address: usize,"},
{"lineNum":" 1467","line":"    size: u32,"},
{"lineNum":" 1468","line":"    name: []const u8,"},
{"lineNum":" 1469","line":"    handle: windows.HMODULE,"},
{"lineNum":" 1470","line":""},
{"lineNum":" 1471","line":"    // Set when the image file needed to be mapped from disk"},
{"lineNum":" 1472","line":"    mapped_file: ?struct {"},
{"lineNum":" 1473","line":"        file: File,"},
{"lineNum":" 1474","line":"        section_handle: windows.HANDLE,"},
{"lineNum":" 1475","line":"        section_view: []const u8,"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":"        pub fn deinit(self: @This()) void {"},
{"lineNum":" 1478","line":"            const process_handle = windows.kernel32.GetCurrentProcess();"},
{"lineNum":" 1479","line":"            assert(windows.ntdll.NtUnmapViewOfSection(process_handle, @constCast(@ptrCast(self.section_view.ptr))) == .SUCCESS);"},
{"lineNum":" 1480","line":"            windows.CloseHandle(self.section_handle);"},
{"lineNum":" 1481","line":"            self.file.close();"},
{"lineNum":" 1482","line":"        }"},
{"lineNum":" 1483","line":"    } = null,"},
{"lineNum":" 1484","line":"};"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"pub const DebugInfo = struct {"},
{"lineNum":" 1487","line":"    allocator: mem.Allocator,"},
{"lineNum":" 1488","line":"    address_map: std.AutoHashMap(usize, *ModuleDebugInfo),"},
{"lineNum":" 1489","line":"    modules: if (native_os == .windows) std.ArrayListUnmanaged(WindowsModuleInfo) else void,"},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"    pub fn init(allocator: mem.Allocator) !DebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1492","line":"        var debug_info = DebugInfo{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1493","line":"            .allocator = allocator,"},
{"lineNum":" 1494","line":"            .address_map = std.AutoHashMap(usize, *ModuleDebugInfo).init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1495","line":"            .modules = if (native_os == .windows) .{} else {},"},
{"lineNum":" 1496","line":"        };"},
{"lineNum":" 1497","line":""},
{"lineNum":" 1498","line":"        if (native_os == .windows) {"},
{"lineNum":" 1499","line":"            errdefer debug_info.modules.deinit(allocator);"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"            const handle = windows.kernel32.CreateToolhelp32Snapshot(windows.TH32CS_SNAPMODULE | windows.TH32CS_SNAPMODULE32, 0);"},
{"lineNum":" 1502","line":"            if (handle == windows.INVALID_HANDLE_VALUE) {"},
{"lineNum":" 1503","line":"                switch (windows.kernel32.GetLastError()) {"},
{"lineNum":" 1504","line":"                    else => |err| return windows.unexpectedError(err),"},
{"lineNum":" 1505","line":"                }"},
{"lineNum":" 1506","line":"            }"},
{"lineNum":" 1507","line":"            defer windows.CloseHandle(handle);"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"            var module_entry: windows.MODULEENTRY32 = undefined;"},
{"lineNum":" 1510","line":"            module_entry.dwSize = @sizeOf(windows.MODULEENTRY32);"},
{"lineNum":" 1511","line":"            if (windows.kernel32.Module32First(handle, &module_entry) == 0) {"},
{"lineNum":" 1512","line":"                return error.MissingDebugInfo;"},
{"lineNum":" 1513","line":"            }"},
{"lineNum":" 1514","line":""},
{"lineNum":" 1515","line":"            var module_valid = true;"},
{"lineNum":" 1516","line":"            while (module_valid) {"},
{"lineNum":" 1517","line":"                const module_info = try debug_info.modules.addOne(allocator);"},
{"lineNum":" 1518","line":"                const name = allocator.dupe(u8, mem.sliceTo(&module_entry.szModule, 0)) catch &.{};"},
{"lineNum":" 1519","line":"                errdefer allocator.free(name);"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"                module_info.* = .{"},
{"lineNum":" 1522","line":"                    .base_address = @intFromPtr(module_entry.modBaseAddr),"},
{"lineNum":" 1523","line":"                    .size = module_entry.modBaseSize,"},
{"lineNum":" 1524","line":"                    .name = name,"},
{"lineNum":" 1525","line":"                    .handle = module_entry.hModule,"},
{"lineNum":" 1526","line":"                };"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"                module_valid = windows.kernel32.Module32Next(handle, &module_entry) == 1;"},
{"lineNum":" 1529","line":"            }"},
{"lineNum":" 1530","line":"        }"},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"        return debug_info;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1533","line":"    }"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"    pub fn deinit(self: *DebugInfo) void {"},
{"lineNum":" 1536","line":"        var it = self.address_map.iterator();"},
{"lineNum":" 1537","line":"        while (it.next()) |entry| {"},
{"lineNum":" 1538","line":"            const mdi = entry.value_ptr.*;"},
{"lineNum":" 1539","line":"            mdi.deinit(self.allocator);"},
{"lineNum":" 1540","line":"            self.allocator.destroy(mdi);"},
{"lineNum":" 1541","line":"        }"},
{"lineNum":" 1542","line":"        self.address_map.deinit();"},
{"lineNum":" 1543","line":"        if (native_os == .windows) {"},
{"lineNum":" 1544","line":"            for (self.modules.items) |module| {"},
{"lineNum":" 1545","line":"                self.allocator.free(module.name);"},
{"lineNum":" 1546","line":"                if (module.mapped_file) |mapped_file| mapped_file.deinit();"},
{"lineNum":" 1547","line":"            }"},
{"lineNum":" 1548","line":"            self.modules.deinit(self.allocator);"},
{"lineNum":" 1549","line":"        }"},
{"lineNum":" 1550","line":"    }"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"    pub fn getModuleForAddress(self: *DebugInfo, address: usize) !*ModuleDebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1553","line":"        if (comptime builtin.target.isDarwin()) {"},
{"lineNum":" 1554","line":"            return self.lookupModuleDyld(address);"},
{"lineNum":" 1555","line":"        } else if (native_os == .windows) {"},
{"lineNum":" 1556","line":"            return self.lookupModuleWin32(address);"},
{"lineNum":" 1557","line":"        } else if (native_os == .haiku) {"},
{"lineNum":" 1558","line":"            return self.lookupModuleHaiku(address);"},
{"lineNum":" 1559","line":"        } else if (comptime builtin.target.isWasm()) {"},
{"lineNum":" 1560","line":"            return self.lookupModuleWasm(address);"},
{"lineNum":" 1561","line":"        } else {"},
{"lineNum":" 1562","line":"            return self.lookupModuleDl(address);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1563","line":"        }"},
{"lineNum":" 1564","line":"    }"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"    // Returns the module name for a given address."},
{"lineNum":" 1567","line":"    // This can be called when getModuleForAddress fails, so implementations should provide"},
{"lineNum":" 1568","line":"    // a path that doesn\'t rely on any side-effects of a prior successful module lookup."},
{"lineNum":" 1569","line":"    pub fn getModuleNameForAddress(self: *DebugInfo, address: usize) ?[]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1570","line":"        if (comptime builtin.target.isDarwin()) {"},
{"lineNum":" 1571","line":"            return self.lookupModuleNameDyld(address);"},
{"lineNum":" 1572","line":"        } else if (native_os == .windows) {"},
{"lineNum":" 1573","line":"            return self.lookupModuleNameWin32(address);"},
{"lineNum":" 1574","line":"        } else if (native_os == .haiku) {"},
{"lineNum":" 1575","line":"            return null;"},
{"lineNum":" 1576","line":"        } else if (comptime builtin.target.isWasm()) {"},
{"lineNum":" 1577","line":"            return null;"},
{"lineNum":" 1578","line":"        } else {"},
{"lineNum":" 1579","line":"            return self.lookupModuleNameDl(address);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1580","line":"        }"},
{"lineNum":" 1581","line":"    }"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"    fn lookupModuleDyld(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1584","line":"        const image_count = std.c._dyld_image_count();"},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"        var i: u32 = 0;"},
{"lineNum":" 1587","line":"        while (i < image_count) : (i += 1) {"},
{"lineNum":" 1588","line":"            const header = std.c._dyld_get_image_header(i) orelse continue;"},
{"lineNum":" 1589","line":"            const base_address = @intFromPtr(header);"},
{"lineNum":" 1590","line":"            if (address < base_address) continue;"},
{"lineNum":" 1591","line":"            const vmaddr_slide = std.c._dyld_get_image_vmaddr_slide(i);"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"            var it = macho.LoadCommandIterator{"},
{"lineNum":" 1594","line":"                .ncmds = header.ncmds,"},
{"lineNum":" 1595","line":"                .buffer = @alignCast(@as("},
{"lineNum":" 1596","line":"                    [*]u8,"},
{"lineNum":" 1597","line":"                    @ptrFromInt(@intFromPtr(header) + @sizeOf(macho.mach_header_64)),"},
{"lineNum":" 1598","line":"                )[0..header.sizeofcmds]),"},
{"lineNum":" 1599","line":"            };"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"            var unwind_info: ?[]const u8 = null;"},
{"lineNum":" 1602","line":"            var eh_frame: ?[]const u8 = null;"},
{"lineNum":" 1603","line":"            while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1604","line":"                .SEGMENT_64 => {"},
{"lineNum":" 1605","line":"                    const segment_cmd = cmd.cast(macho.segment_command_64).?;"},
{"lineNum":" 1606","line":"                    if (!mem.eql(u8, \"__TEXT\", segment_cmd.segName())) continue;"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"                    const seg_start = segment_cmd.vmaddr + vmaddr_slide;"},
{"lineNum":" 1609","line":"                    const seg_end = seg_start + segment_cmd.vmsize;"},
{"lineNum":" 1610","line":"                    if (address >= seg_start and address < seg_end) {"},
{"lineNum":" 1611","line":"                        if (self.address_map.get(base_address)) |obj_di| {"},
{"lineNum":" 1612","line":"                            return obj_di;"},
{"lineNum":" 1613","line":"                        }"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"                        for (cmd.getSections()) |sect| {"},
{"lineNum":" 1616","line":"                            if (mem.eql(u8, \"__unwind_info\", sect.sectName())) {"},
{"lineNum":" 1617","line":"                                unwind_info = @as([*]const u8, @ptrFromInt(sect.addr + vmaddr_slide))[0..sect.size];"},
{"lineNum":" 1618","line":"                            } else if (mem.eql(u8, \"__eh_frame\", sect.sectName())) {"},
{"lineNum":" 1619","line":"                                eh_frame = @as([*]const u8, @ptrFromInt(sect.addr + vmaddr_slide))[0..sect.size];"},
{"lineNum":" 1620","line":"                            }"},
{"lineNum":" 1621","line":"                        }"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"                        const obj_di = try self.allocator.create(ModuleDebugInfo);"},
{"lineNum":" 1624","line":"                        errdefer self.allocator.destroy(obj_di);"},
{"lineNum":" 1625","line":""},
{"lineNum":" 1626","line":"                        const macho_path = mem.sliceTo(std.c._dyld_get_image_name(i), 0);"},
{"lineNum":" 1627","line":"                        const macho_file = fs.cwd().openFile(macho_path, .{"},
{"lineNum":" 1628","line":"                            .intended_io_mode = .blocking,"},
{"lineNum":" 1629","line":"                        }) catch |err| switch (err) {"},
{"lineNum":" 1630","line":"                            error.FileNotFound => return error.MissingDebugInfo,"},
{"lineNum":" 1631","line":"                            else => return err,"},
{"lineNum":" 1632","line":"                        };"},
{"lineNum":" 1633","line":"                        obj_di.* = try readMachODebugInfo(self.allocator, macho_file);"},
{"lineNum":" 1634","line":"                        obj_di.base_address = base_address;"},
{"lineNum":" 1635","line":"                        obj_di.vmaddr_slide = vmaddr_slide;"},
{"lineNum":" 1636","line":"                        obj_di.unwind_info = unwind_info;"},
{"lineNum":" 1637","line":"                        obj_di.eh_frame = eh_frame;"},
{"lineNum":" 1638","line":""},
{"lineNum":" 1639","line":"                        try self.address_map.putNoClobber(base_address, obj_di);"},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"                        return obj_di;"},
{"lineNum":" 1642","line":"                    }"},
{"lineNum":" 1643","line":"                },"},
{"lineNum":" 1644","line":"                else => {},"},
{"lineNum":" 1645","line":"            };"},
{"lineNum":" 1646","line":"        }"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"        return error.MissingDebugInfo;"},
{"lineNum":" 1649","line":"    }"},
{"lineNum":" 1650","line":""},
{"lineNum":" 1651","line":"    fn lookupModuleNameDyld(self: *DebugInfo, address: usize) ?[]const u8 {"},
{"lineNum":" 1652","line":"        _ = self;"},
{"lineNum":" 1653","line":"        const image_count = std.c._dyld_image_count();"},
{"lineNum":" 1654","line":""},
{"lineNum":" 1655","line":"        var i: u32 = 0;"},
{"lineNum":" 1656","line":"        while (i < image_count) : (i += 1) {"},
{"lineNum":" 1657","line":"            const header = std.c._dyld_get_image_header(i) orelse continue;"},
{"lineNum":" 1658","line":"            const base_address = @intFromPtr(header);"},
{"lineNum":" 1659","line":"            if (address < base_address) continue;"},
{"lineNum":" 1660","line":"            const vmaddr_slide = std.c._dyld_get_image_vmaddr_slide(i);"},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"            var it = macho.LoadCommandIterator{"},
{"lineNum":" 1663","line":"                .ncmds = header.ncmds,"},
{"lineNum":" 1664","line":"                .buffer = @alignCast(@as("},
{"lineNum":" 1665","line":"                    [*]u8,"},
{"lineNum":" 1666","line":"                    @ptrFromInt(@intFromPtr(header) + @sizeOf(macho.mach_header_64)),"},
{"lineNum":" 1667","line":"                )[0..header.sizeofcmds]),"},
{"lineNum":" 1668","line":"            };"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"            while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1671","line":"                .SEGMENT_64 => {"},
{"lineNum":" 1672","line":"                    const segment_cmd = cmd.cast(macho.segment_command_64).?;"},
{"lineNum":" 1673","line":"                    if (!mem.eql(u8, \"__TEXT\", segment_cmd.segName())) continue;"},
{"lineNum":" 1674","line":""},
{"lineNum":" 1675","line":"                    const original_address = address - vmaddr_slide;"},
{"lineNum":" 1676","line":"                    const seg_start = segment_cmd.vmaddr;"},
{"lineNum":" 1677","line":"                    const seg_end = seg_start + segment_cmd.vmsize;"},
{"lineNum":" 1678","line":"                    if (original_address >= seg_start and original_address < seg_end) {"},
{"lineNum":" 1679","line":"                        return fs.path.basename(mem.sliceTo(std.c._dyld_get_image_name(i), 0));"},
{"lineNum":" 1680","line":"                    }"},
{"lineNum":" 1681","line":"                },"},
{"lineNum":" 1682","line":"                else => {},"},
{"lineNum":" 1683","line":"            };"},
{"lineNum":" 1684","line":"        }"},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"        return null;"},
{"lineNum":" 1687","line":"    }"},
{"lineNum":" 1688","line":""},
{"lineNum":" 1689","line":"    fn lookupModuleWin32(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1690","line":"        for (self.modules.items) |*module| {"},
{"lineNum":" 1691","line":"            if (address >= module.base_address and address < module.base_address + module.size) {"},
{"lineNum":" 1692","line":"                if (self.address_map.get(module.base_address)) |obj_di| {"},
{"lineNum":" 1693","line":"                    return obj_di;"},
{"lineNum":" 1694","line":"                }"},
{"lineNum":" 1695","line":""},
{"lineNum":" 1696","line":"                const obj_di = try self.allocator.create(ModuleDebugInfo);"},
{"lineNum":" 1697","line":"                errdefer self.allocator.destroy(obj_di);"},
{"lineNum":" 1698","line":""},
{"lineNum":" 1699","line":"                const mapped_module = @as([*]const u8, @ptrFromInt(module.base_address))[0..module.size];"},
{"lineNum":" 1700","line":"                var coff_obj = try coff.Coff.init(mapped_module);"},
{"lineNum":" 1701","line":""},
{"lineNum":" 1702","line":"                // The string table is not mapped into memory by the loader, so if a section name is in the"},
{"lineNum":" 1703","line":"                // string table then we have to map the full image file from disk. This can happen when"},
{"lineNum":" 1704","line":"                // a binary is produced with -gdwarf, since the section names are longer than 8 bytes."},
{"lineNum":" 1705","line":"                if (coff_obj.strtabRequired()) {"},
{"lineNum":" 1706","line":"                    var name_buffer: [windows.PATH_MAX_WIDE + 4:0]u16 = undefined;"},
{"lineNum":" 1707","line":"                    // openFileAbsoluteW requires the prefix to be present"},
{"lineNum":" 1708","line":"                    mem.copy(u16, name_buffer[0..4], &[_]u16{ \'\\\\\', \'?\', \'?\', \'\\\\\' });"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"                    const process_handle = windows.kernel32.GetCurrentProcess();"},
{"lineNum":" 1711","line":"                    const len = windows.kernel32.K32GetModuleFileNameExW("},
{"lineNum":" 1712","line":"                        process_handle,"},
{"lineNum":" 1713","line":"                        module.handle,"},
{"lineNum":" 1714","line":"                        @ptrCast(&name_buffer[4]),"},
{"lineNum":" 1715","line":"                        windows.PATH_MAX_WIDE,"},
{"lineNum":" 1716","line":"                    );"},
{"lineNum":" 1717","line":""},
{"lineNum":" 1718","line":"                    if (len == 0) return error.MissingDebugInfo;"},
{"lineNum":" 1719","line":"                    const coff_file = fs.openFileAbsoluteW(name_buffer[0 .. len + 4 :0], .{}) catch |err| switch (err) {"},
{"lineNum":" 1720","line":"                        error.FileNotFound => return error.MissingDebugInfo,"},
{"lineNum":" 1721","line":"                        else => return err,"},
{"lineNum":" 1722","line":"                    };"},
{"lineNum":" 1723","line":"                    errdefer coff_file.close();"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"                    var section_handle: windows.HANDLE = undefined;"},
{"lineNum":" 1726","line":"                    const create_section_rc = windows.ntdll.NtCreateSection("},
{"lineNum":" 1727","line":"                        &section_handle,"},
{"lineNum":" 1728","line":"                        windows.STANDARD_RIGHTS_REQUIRED | windows.SECTION_QUERY | windows.SECTION_MAP_READ,"},
{"lineNum":" 1729","line":"                        null,"},
{"lineNum":" 1730","line":"                        null,"},
{"lineNum":" 1731","line":"                        windows.PAGE_READONLY,"},
{"lineNum":" 1732","line":"                        // The documentation states that if no AllocationAttribute is specified, then SEC_COMMIT is the default."},
{"lineNum":" 1733","line":"                        // In practice, this isn\'t the case and specifying 0 will result in INVALID_PARAMETER_6."},
{"lineNum":" 1734","line":"                        windows.SEC_COMMIT,"},
{"lineNum":" 1735","line":"                        coff_file.handle,"},
{"lineNum":" 1736","line":"                    );"},
{"lineNum":" 1737","line":"                    if (create_section_rc != .SUCCESS) return error.MissingDebugInfo;"},
{"lineNum":" 1738","line":"                    errdefer windows.CloseHandle(section_handle);"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"                    var coff_len: usize = 0;"},
{"lineNum":" 1741","line":"                    var base_ptr: usize = 0;"},
{"lineNum":" 1742","line":"                    const map_section_rc = windows.ntdll.NtMapViewOfSection("},
{"lineNum":" 1743","line":"                        section_handle,"},
{"lineNum":" 1744","line":"                        process_handle,"},
{"lineNum":" 1745","line":"                        @ptrCast(&base_ptr),"},
{"lineNum":" 1746","line":"                        null,"},
{"lineNum":" 1747","line":"                        0,"},
{"lineNum":" 1748","line":"                        null,"},
{"lineNum":" 1749","line":"                        &coff_len,"},
{"lineNum":" 1750","line":"                        .ViewUnmap,"},
{"lineNum":" 1751","line":"                        0,"},
{"lineNum":" 1752","line":"                        windows.PAGE_READONLY,"},
{"lineNum":" 1753","line":"                    );"},
{"lineNum":" 1754","line":"                    if (map_section_rc != .SUCCESS) return error.MissingDebugInfo;"},
{"lineNum":" 1755","line":"                    errdefer assert(windows.ntdll.NtUnmapViewOfSection(process_handle, @ptrFromInt(base_ptr)) == .SUCCESS);"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"                    const section_view = @as([*]const u8, @ptrFromInt(base_ptr))[0..coff_len];"},
{"lineNum":" 1758","line":"                    coff_obj = try coff.Coff.init(section_view);"},
{"lineNum":" 1759","line":""},
{"lineNum":" 1760","line":"                    module.mapped_file = .{"},
{"lineNum":" 1761","line":"                        .file = coff_file,"},
{"lineNum":" 1762","line":"                        .section_handle = section_handle,"},
{"lineNum":" 1763","line":"                        .section_view = section_view,"},
{"lineNum":" 1764","line":"                    };"},
{"lineNum":" 1765","line":"                }"},
{"lineNum":" 1766","line":"                errdefer if (module.mapped_file) |mapped_file| mapped_file.deinit();"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"                obj_di.* = try readCoffDebugInfo(self.allocator, &coff_obj);"},
{"lineNum":" 1769","line":"                obj_di.base_address = module.base_address;"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"                try self.address_map.putNoClobber(module.base_address, obj_di);"},
{"lineNum":" 1772","line":"                return obj_di;"},
{"lineNum":" 1773","line":"            }"},
{"lineNum":" 1774","line":"        }"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"        return error.MissingDebugInfo;"},
{"lineNum":" 1777","line":"    }"},
{"lineNum":" 1778","line":""},
{"lineNum":" 1779","line":"    fn lookupModuleNameWin32(self: *DebugInfo, address: usize) ?[]const u8 {"},
{"lineNum":" 1780","line":"        for (self.modules.items) |module| {"},
{"lineNum":" 1781","line":"            if (address >= module.base_address and address < module.base_address + module.size) {"},
{"lineNum":" 1782","line":"                return module.name;"},
{"lineNum":" 1783","line":"            }"},
{"lineNum":" 1784","line":"        }"},
{"lineNum":" 1785","line":"        return null;"},
{"lineNum":" 1786","line":"    }"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":"    fn lookupModuleNameDl(self: *DebugInfo, address: usize) ?[]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1789","line":"        _ = self;"},
{"lineNum":" 1790","line":""},
{"lineNum":" 1791","line":"        var ctx: struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1792","line":"            // Input"},
{"lineNum":" 1793","line":"            address: usize,"},
{"lineNum":" 1794","line":"            // Output"},
{"lineNum":" 1795","line":"            name: []const u8 = \"\","},
{"lineNum":" 1796","line":"        } = .{ .address = address };"},
{"lineNum":" 1797","line":"        const CtxTy = @TypeOf(ctx);"},
{"lineNum":" 1798","line":""},
{"lineNum":" 1799","line":"        if (os.dl_iterate_phdr(&ctx, error{Found}, struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1800","line":"            fn callback(info: *os.dl_phdr_info, size: usize, context: *CtxTy) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1801","line":"                _ = size;"},
{"lineNum":" 1802","line":"                if (context.address < info.dlpi_addr) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1803","line":"                const phdrs = info.dlpi_phdr[0..info.dlpi_phnum];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1804","line":"                for (phdrs) |*phdr| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1805","line":"                    if (phdr.p_type != elf.PT_LOAD) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"                    const seg_start = info.dlpi_addr +% phdr.p_vaddr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1808","line":"                    const seg_end = seg_start + phdr.p_memsz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1809","line":"                    if (context.address >= seg_start and context.address < seg_end) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1810","line":"                        context.name = mem.sliceTo(info.dlpi_name, 0) orelse \"\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1811","line":"                        break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1812","line":"                    }"},
{"lineNum":" 1813","line":"                } else return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1814","line":""},
{"lineNum":" 1815","line":"                return error.Found;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1816","line":"            }"},
{"lineNum":" 1817","line":"        }.callback)) {"},
{"lineNum":" 1818","line":"            return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1819","line":"        } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1820","line":"            error.Found => return fs.path.basename(ctx.name),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1821","line":"        }"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"        return null;"},
{"lineNum":" 1824","line":"    }"},
{"lineNum":" 1825","line":""},
{"lineNum":" 1826","line":"    fn lookupModuleDl(self: *DebugInfo, address: usize) !*ModuleDebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1827","line":"        var ctx: struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1828","line":"            // Input"},
{"lineNum":" 1829","line":"            address: usize,"},
{"lineNum":" 1830","line":"            // Output"},
{"lineNum":" 1831","line":"            base_address: usize = undefined,"},
{"lineNum":" 1832","line":"            name: []const u8 = undefined,"},
{"lineNum":" 1833","line":"            build_id: ?[]const u8 = null,"},
{"lineNum":" 1834","line":"            gnu_eh_frame: ?[]const u8 = null,"},
{"lineNum":" 1835","line":"        } = .{ .address = address };"},
{"lineNum":" 1836","line":"        const CtxTy = @TypeOf(ctx);"},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"        if (os.dl_iterate_phdr(&ctx, error{Found}, struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1839","line":"            fn callback(info: *os.dl_phdr_info, size: usize, context: *CtxTy) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1840","line":"                _ = size;"},
{"lineNum":" 1841","line":"                // The base address is too high"},
{"lineNum":" 1842","line":"                if (context.address < info.dlpi_addr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1843","line":"                    return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1844","line":""},
{"lineNum":" 1845","line":"                const phdrs = info.dlpi_phdr[0..info.dlpi_phnum];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1846","line":"                for (phdrs) |*phdr| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1847","line":"                    if (phdr.p_type != elf.PT_LOAD) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"                    // Overflowing addition is used to handle the case of VSDOs having a p_vaddr = 0xffffffffff700000"},
{"lineNum":" 1850","line":"                    const seg_start = info.dlpi_addr +% phdr.p_vaddr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1851","line":"                    const seg_end = seg_start + phdr.p_memsz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1852","line":"                    if (context.address >= seg_start and context.address < seg_end) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1853","line":"                        // Android libc uses NULL instead of an empty string to mark the"},
{"lineNum":" 1854","line":"                        // main program"},
{"lineNum":" 1855","line":"                        context.name = mem.sliceTo(info.dlpi_name, 0) orelse \"\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1856","line":"                        context.base_address = info.dlpi_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1857","line":"                        break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1858","line":"                    }"},
{"lineNum":" 1859","line":"                } else return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1860","line":""},
{"lineNum":" 1861","line":"                for (info.dlpi_phdr[0..info.dlpi_phnum]) |phdr| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1862","line":"                    switch (phdr.p_type) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1863","line":"                        elf.PT_NOTE => {"},
{"lineNum":" 1864","line":"                            // Look for .note.gnu.build-id"},
{"lineNum":" 1865","line":"                            const note_bytes = @as([*]const u8, @ptrFromInt(info.dlpi_addr + phdr.p_vaddr))[0..phdr.p_memsz];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1866","line":"                            const name_size = mem.readIntSliceNative(u32, note_bytes[0..4]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1867","line":"                            if (name_size != 4) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1868","line":"                            const desc_size = mem.readIntSliceNative(u32, note_bytes[4..8]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1869","line":"                            const note_type = mem.readIntSliceNative(u32, note_bytes[8..12]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1870","line":"                            if (note_type != elf.NT_GNU_BUILD_ID) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1871","line":"                            if (!mem.eql(u8, \"GNU\\x00\", note_bytes[12..16])) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1872","line":"                            context.build_id = note_bytes[16..][0..desc_size];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1873","line":"                        },"},
{"lineNum":" 1874","line":"                        elf.PT_GNU_EH_FRAME => {"},
{"lineNum":" 1875","line":"                            context.gnu_eh_frame = @as([*]const u8, @ptrFromInt(info.dlpi_addr + phdr.p_vaddr))[0..phdr.p_memsz];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1876","line":"                        },"},
{"lineNum":" 1877","line":"                        else => {},"},
{"lineNum":" 1878","line":"                    }"},
{"lineNum":" 1879","line":"                }"},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"                // Stop the iteration"},
{"lineNum":" 1882","line":"                return error.Found;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1883","line":"            }"},
{"lineNum":" 1884","line":"        }.callback)) {"},
{"lineNum":" 1885","line":"            return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1886","line":"        } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1887","line":"            error.Found => {},"},
{"lineNum":" 1888","line":"        }"},
{"lineNum":" 1889","line":""},
{"lineNum":" 1890","line":"        if (self.address_map.get(ctx.base_address)) |obj_di| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1891","line":"            return obj_di;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1892","line":"        }"},
{"lineNum":" 1893","line":""},
{"lineNum":" 1894","line":"        const obj_di = try self.allocator.create(ModuleDebugInfo);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1895","line":"        errdefer self.allocator.destroy(obj_di);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"        var sections: DW.DwarfInfo.SectionArray = DW.DwarfInfo.null_section_array;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1898","line":"        if (ctx.gnu_eh_frame) |eh_frame_hdr| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1899","line":"            // This is a special case - pointer offsets inside .eh_frame_hdr"},
{"lineNum":" 1900","line":"            // are encoded relative to its base address, so we must use the"},
{"lineNum":" 1901","line":"            // version that is already memory mapped, and not the one that"},
{"lineNum":" 1902","line":"            // will be mapped separately from the ELF file."},
{"lineNum":" 1903","line":"            sections[@intFromEnum(DW.DwarfSection.eh_frame_hdr)] = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1904","line":"                .data = eh_frame_hdr,"},
{"lineNum":" 1905","line":"                .owned = false,"},
{"lineNum":" 1906","line":"            };"},
{"lineNum":" 1907","line":"        }"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"        obj_di.* = try readElfDebugInfo(self.allocator, if (ctx.name.len > 0) ctx.name else null, ctx.build_id, null, &sections, null);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1910","line":"        obj_di.base_address = ctx.base_address;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1911","line":""},
{"lineNum":" 1912","line":"        // Missing unwind info isn\'t treated as a failure, as the unwinder will fall back to FP-based unwinding"},
{"lineNum":" 1913","line":"        obj_di.dwarf.scanAllUnwindInfo(self.allocator, ctx.base_address) catch {};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1914","line":""},
{"lineNum":" 1915","line":"        try self.address_map.putNoClobber(ctx.base_address, obj_di);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1916","line":""},
{"lineNum":" 1917","line":"        return obj_di;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1918","line":"    }"},
{"lineNum":" 1919","line":""},
{"lineNum":" 1920","line":"    fn lookupModuleHaiku(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1921","line":"        _ = self;"},
{"lineNum":" 1922","line":"        _ = address;"},
{"lineNum":" 1923","line":"        @panic(\"TODO implement lookup module for Haiku\");"},
{"lineNum":" 1924","line":"    }"},
{"lineNum":" 1925","line":""},
{"lineNum":" 1926","line":"    fn lookupModuleWasm(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1927","line":"        _ = self;"},
{"lineNum":" 1928","line":"        _ = address;"},
{"lineNum":" 1929","line":"        @panic(\"TODO implement lookup module for Wasm\");"},
{"lineNum":" 1930","line":"    }"},
{"lineNum":" 1931","line":"};"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"pub const ModuleDebugInfo = switch (native_os) {"},
{"lineNum":" 1934","line":"    .macos, .ios, .watchos, .tvos => struct {"},
{"lineNum":" 1935","line":"        base_address: usize,"},
{"lineNum":" 1936","line":"        vmaddr_slide: usize,"},
{"lineNum":" 1937","line":"        mapped_memory: []align(mem.page_size) const u8,"},
{"lineNum":" 1938","line":"        symbols: []const MachoSymbol,"},
{"lineNum":" 1939","line":"        strings: [:0]const u8,"},
{"lineNum":" 1940","line":"        ofiles: OFileTable,"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"        // Backed by the in-memory sections mapped by the loader"},
{"lineNum":" 1943","line":"        unwind_info: ?[]const u8 = null,"},
{"lineNum":" 1944","line":"        eh_frame: ?[]const u8 = null,"},
{"lineNum":" 1945","line":""},
{"lineNum":" 1946","line":"        const OFileTable = std.StringHashMap(OFileInfo);"},
{"lineNum":" 1947","line":"        const OFileInfo = struct {"},
{"lineNum":" 1948","line":"            di: DW.DwarfInfo,"},
{"lineNum":" 1949","line":"            addr_table: std.StringHashMap(u64),"},
{"lineNum":" 1950","line":"        };"},
{"lineNum":" 1951","line":""},
{"lineNum":" 1952","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 1953","line":"            var it = self.ofiles.iterator();"},
{"lineNum":" 1954","line":"            while (it.next()) |entry| {"},
{"lineNum":" 1955","line":"                const ofile = entry.value_ptr;"},
{"lineNum":" 1956","line":"                ofile.di.deinit(allocator);"},
{"lineNum":" 1957","line":"                ofile.addr_table.deinit();"},
{"lineNum":" 1958","line":"            }"},
{"lineNum":" 1959","line":"            self.ofiles.deinit();"},
{"lineNum":" 1960","line":"            allocator.free(self.symbols);"},
{"lineNum":" 1961","line":"            os.munmap(self.mapped_memory);"},
{"lineNum":" 1962","line":"        }"},
{"lineNum":" 1963","line":""},
{"lineNum":" 1964","line":"        fn loadOFile(self: *@This(), allocator: mem.Allocator, o_file_path: []const u8) !*OFileInfo {"},
{"lineNum":" 1965","line":"            const o_file = try fs.cwd().openFile(o_file_path, .{ .intended_io_mode = .blocking });"},
{"lineNum":" 1966","line":"            const mapped_mem = try mapWholeFile(o_file);"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"            const hdr: *const macho.mach_header_64 = @ptrCast(@alignCast(mapped_mem.ptr));"},
{"lineNum":" 1969","line":"            if (hdr.magic != std.macho.MH_MAGIC_64)"},
{"lineNum":" 1970","line":"                return error.InvalidDebugInfo;"},
{"lineNum":" 1971","line":""},
{"lineNum":" 1972","line":"            var segcmd: ?macho.LoadCommandIterator.LoadCommand = null;"},
{"lineNum":" 1973","line":"            var symtabcmd: ?macho.symtab_command = null;"},
{"lineNum":" 1974","line":"            var it = macho.LoadCommandIterator{"},
{"lineNum":" 1975","line":"                .ncmds = hdr.ncmds,"},
{"lineNum":" 1976","line":"                .buffer = mapped_mem[@sizeOf(macho.mach_header_64)..][0..hdr.sizeofcmds],"},
{"lineNum":" 1977","line":"            };"},
{"lineNum":" 1978","line":"            while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1979","line":"                .SEGMENT_64 => segcmd = cmd,"},
{"lineNum":" 1980","line":"                .SYMTAB => symtabcmd = cmd.cast(macho.symtab_command).?,"},
{"lineNum":" 1981","line":"                else => {},"},
{"lineNum":" 1982","line":"            };"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"            if (segcmd == null or symtabcmd == null) return error.MissingDebugInfo;"},
{"lineNum":" 1985","line":""},
{"lineNum":" 1986","line":"            // Parse symbols"},
{"lineNum":" 1987","line":"            const strtab = @as("},
{"lineNum":" 1988","line":"                [*]const u8,"},
{"lineNum":" 1989","line":"                @ptrCast(&mapped_mem[symtabcmd.?.stroff]),"},
{"lineNum":" 1990","line":"            )[0 .. symtabcmd.?.strsize - 1 :0];"},
{"lineNum":" 1991","line":"            const symtab = @as("},
{"lineNum":" 1992","line":"                [*]const macho.nlist_64,"},
{"lineNum":" 1993","line":"                @ptrCast(@alignCast(&mapped_mem[symtabcmd.?.symoff])),"},
{"lineNum":" 1994","line":"            )[0..symtabcmd.?.nsyms];"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"            // TODO handle tentative (common) symbols"},
{"lineNum":" 1997","line":"            var addr_table = std.StringHashMap(u64).init(allocator);"},
{"lineNum":" 1998","line":"            try addr_table.ensureTotalCapacity(@as(u32, @intCast(symtab.len)));"},
{"lineNum":" 1999","line":"            for (symtab) |sym| {"},
{"lineNum":" 2000","line":"                if (sym.n_strx == 0) continue;"},
{"lineNum":" 2001","line":"                if (sym.undf() or sym.tentative() or sym.abs()) continue;"},
{"lineNum":" 2002","line":"                const sym_name = mem.sliceTo(strtab[sym.n_strx..], 0);"},
{"lineNum":" 2003","line":"                // TODO is it possible to have a symbol collision?"},
{"lineNum":" 2004","line":"                addr_table.putAssumeCapacityNoClobber(sym_name, sym.n_value);"},
{"lineNum":" 2005","line":"            }"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"            var sections: DW.DwarfInfo.SectionArray = DW.DwarfInfo.null_section_array;"},
{"lineNum":" 2008","line":"            if (self.eh_frame) |eh_frame| sections[@intFromEnum(DW.DwarfSection.eh_frame)] = .{"},
{"lineNum":" 2009","line":"                .data = eh_frame,"},
{"lineNum":" 2010","line":"                .owned = false,"},
{"lineNum":" 2011","line":"            };"},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"            for (segcmd.?.getSections()) |sect| {"},
{"lineNum":" 2014","line":"                if (!std.mem.eql(u8, \"__DWARF\", sect.segName())) continue;"},
{"lineNum":" 2015","line":""},
{"lineNum":" 2016","line":"                var section_index: ?usize = null;"},
{"lineNum":" 2017","line":"                inline for (@typeInfo(DW.DwarfSection).Enum.fields, 0..) |section, i| {"},
{"lineNum":" 2018","line":"                    if (mem.eql(u8, \"__\" ++ section.name, sect.sectName())) section_index = i;"},
{"lineNum":" 2019","line":"                }"},
{"lineNum":" 2020","line":"                if (section_index == null) continue;"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"                const section_bytes = try chopSlice(mapped_mem, sect.offset, sect.size);"},
{"lineNum":" 2023","line":"                sections[section_index.?] = .{"},
{"lineNum":" 2024","line":"                    .data = section_bytes,"},
{"lineNum":" 2025","line":"                    .virtual_address = sect.addr,"},
{"lineNum":" 2026","line":"                    .owned = false,"},
{"lineNum":" 2027","line":"                };"},
{"lineNum":" 2028","line":"            }"},
{"lineNum":" 2029","line":""},
{"lineNum":" 2030","line":"            const missing_debug_info ="},
{"lineNum":" 2031","line":"                sections[@intFromEnum(DW.DwarfSection.debug_info)] == null or"},
{"lineNum":" 2032","line":"                sections[@intFromEnum(DW.DwarfSection.debug_abbrev)] == null or"},
{"lineNum":" 2033","line":"                sections[@intFromEnum(DW.DwarfSection.debug_str)] == null or"},
{"lineNum":" 2034","line":"                sections[@intFromEnum(DW.DwarfSection.debug_line)] == null;"},
{"lineNum":" 2035","line":"            if (missing_debug_info) return error.MissingDebugInfo;"},
{"lineNum":" 2036","line":""},
{"lineNum":" 2037","line":"            var di = DW.DwarfInfo{"},
{"lineNum":" 2038","line":"                .endian = .Little,"},
{"lineNum":" 2039","line":"                .sections = sections,"},
{"lineNum":" 2040","line":"                .is_macho = true,"},
{"lineNum":" 2041","line":"            };"},
{"lineNum":" 2042","line":""},
{"lineNum":" 2043","line":"            try DW.openDwarfDebugInfo(&di, allocator);"},
{"lineNum":" 2044","line":"            var info = OFileInfo{"},
{"lineNum":" 2045","line":"                .di = di,"},
{"lineNum":" 2046","line":"                .addr_table = addr_table,"},
{"lineNum":" 2047","line":"            };"},
{"lineNum":" 2048","line":""},
{"lineNum":" 2049","line":"            // Add the debug info to the cache"},
{"lineNum":" 2050","line":"            const result = try self.ofiles.getOrPut(o_file_path);"},
{"lineNum":" 2051","line":"            assert(!result.found_existing);"},
{"lineNum":" 2052","line":"            result.value_ptr.* = info;"},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":"            return result.value_ptr;"},
{"lineNum":" 2055","line":"        }"},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {"},
{"lineNum":" 2058","line":"            nosuspend {"},
{"lineNum":" 2059","line":"                const result = try self.getOFileInfoForAddress(allocator, address);"},
{"lineNum":" 2060","line":"                if (result.symbol == null) return .{};"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"                // Take the symbol name from the N_FUN STAB entry, we\'re going to"},
{"lineNum":" 2063","line":"                // use it if we fail to find the DWARF infos"},
{"lineNum":" 2064","line":"                const stab_symbol = mem.sliceTo(self.strings[result.symbol.?.strx..], 0);"},
{"lineNum":" 2065","line":"                if (result.o_file_info == null) return .{ .symbol_name = stab_symbol };"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"                // Translate again the address, this time into an address inside the"},
{"lineNum":" 2068","line":"                // .o file"},
{"lineNum":" 2069","line":"                const relocated_address_o = result.o_file_info.?.addr_table.get(stab_symbol) orelse return .{"},
{"lineNum":" 2070","line":"                    .symbol_name = \"???\","},
{"lineNum":" 2071","line":"                };"},
{"lineNum":" 2072","line":""},
{"lineNum":" 2073","line":"                const addr_off = result.relocated_address - result.symbol.?.addr;"},
{"lineNum":" 2074","line":"                const o_file_di = &result.o_file_info.?.di;"},
{"lineNum":" 2075","line":"                if (o_file_di.findCompileUnit(relocated_address_o)) |compile_unit| {"},
{"lineNum":" 2076","line":"                    return SymbolInfo{"},
{"lineNum":" 2077","line":"                        .symbol_name = o_file_di.getSymbolName(relocated_address_o) orelse \"???\","},
{"lineNum":" 2078","line":"                        .compile_unit_name = compile_unit.die.getAttrString("},
{"lineNum":" 2079","line":"                            o_file_di,"},
{"lineNum":" 2080","line":"                            DW.AT.name,"},
{"lineNum":" 2081","line":"                            o_file_di.section(.debug_str),"},
{"lineNum":" 2082","line":"                            compile_unit.*,"},
{"lineNum":" 2083","line":"                        ) catch |err| switch (err) {"},
{"lineNum":" 2084","line":"                            error.MissingDebugInfo, error.InvalidDebugInfo => \"???\","},
{"lineNum":" 2085","line":"                        },"},
{"lineNum":" 2086","line":"                        .line_info = o_file_di.getLineNumberInfo("},
{"lineNum":" 2087","line":"                            allocator,"},
{"lineNum":" 2088","line":"                            compile_unit.*,"},
{"lineNum":" 2089","line":"                            relocated_address_o + addr_off,"},
{"lineNum":" 2090","line":"                        ) catch |err| switch (err) {"},
{"lineNum":" 2091","line":"                            error.MissingDebugInfo, error.InvalidDebugInfo => null,"},
{"lineNum":" 2092","line":"                            else => return err,"},
{"lineNum":" 2093","line":"                        },"},
{"lineNum":" 2094","line":"                    };"},
{"lineNum":" 2095","line":"                } else |err| switch (err) {"},
{"lineNum":" 2096","line":"                    error.MissingDebugInfo, error.InvalidDebugInfo => {"},
{"lineNum":" 2097","line":"                        return SymbolInfo{ .symbol_name = stab_symbol };"},
{"lineNum":" 2098","line":"                    },"},
{"lineNum":" 2099","line":"                    else => return err,"},
{"lineNum":" 2100","line":"                }"},
{"lineNum":" 2101","line":"            }"},
{"lineNum":" 2102","line":"        }"},
{"lineNum":" 2103","line":""},
{"lineNum":" 2104","line":"        pub fn getOFileInfoForAddress(self: *@This(), allocator: mem.Allocator, address: usize) !struct {"},
{"lineNum":" 2105","line":"            relocated_address: usize,"},
{"lineNum":" 2106","line":"            symbol: ?*const MachoSymbol = null,"},
{"lineNum":" 2107","line":"            o_file_info: ?*OFileInfo = null,"},
{"lineNum":" 2108","line":"        } {"},
{"lineNum":" 2109","line":"            nosuspend {"},
{"lineNum":" 2110","line":"                // Translate the VA into an address into this object"},
{"lineNum":" 2111","line":"                const relocated_address = address - self.vmaddr_slide;"},
{"lineNum":" 2112","line":""},
{"lineNum":" 2113","line":"                // Find the .o file where this symbol is defined"},
{"lineNum":" 2114","line":"                const symbol = machoSearchSymbols(self.symbols, relocated_address) orelse return .{"},
{"lineNum":" 2115","line":"                    .relocated_address = relocated_address,"},
{"lineNum":" 2116","line":"                };"},
{"lineNum":" 2117","line":""},
{"lineNum":" 2118","line":"                // Check if its debug infos are already in the cache"},
{"lineNum":" 2119","line":"                const o_file_path = mem.sliceTo(self.strings[symbol.ofile..], 0);"},
{"lineNum":" 2120","line":"                var o_file_info = self.ofiles.getPtr(o_file_path) orelse"},
{"lineNum":" 2121","line":"                    (self.loadOFile(allocator, o_file_path) catch |err| switch (err) {"},
{"lineNum":" 2122","line":"                    error.FileNotFound,"},
{"lineNum":" 2123","line":"                    error.MissingDebugInfo,"},
{"lineNum":" 2124","line":"                    error.InvalidDebugInfo,"},
{"lineNum":" 2125","line":"                    => return .{"},
{"lineNum":" 2126","line":"                        .relocated_address = relocated_address,"},
{"lineNum":" 2127","line":"                        .symbol = symbol,"},
{"lineNum":" 2128","line":"                    },"},
{"lineNum":" 2129","line":"                    else => return err,"},
{"lineNum":" 2130","line":"                });"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"                return .{"},
{"lineNum":" 2133","line":"                    .relocated_address = relocated_address,"},
{"lineNum":" 2134","line":"                    .symbol = symbol,"},
{"lineNum":" 2135","line":"                    .o_file_info = o_file_info,"},
{"lineNum":" 2136","line":"                };"},
{"lineNum":" 2137","line":"            }"},
{"lineNum":" 2138","line":"        }"},
{"lineNum":" 2139","line":""},
{"lineNum":" 2140","line":"        pub fn getDwarfInfoForAddress(self: *@This(), allocator: mem.Allocator, address: usize) !?*const DW.DwarfInfo {"},
{"lineNum":" 2141","line":"            return if ((try self.getOFileInfoForAddress(allocator, address)).o_file_info) |o_file_info| &o_file_info.di else null;"},
{"lineNum":" 2142","line":"        }"},
{"lineNum":" 2143","line":"    },"},
{"lineNum":" 2144","line":"    .uefi, .windows => struct {"},
{"lineNum":" 2145","line":"        base_address: usize,"},
{"lineNum":" 2146","line":"        debug_data: PdbOrDwarf,"},
{"lineNum":" 2147","line":"        coff_image_base: u64,"},
{"lineNum":" 2148","line":"        /// Only used if debug_data is .pdb"},
{"lineNum":" 2149","line":"        coff_section_headers: []coff.SectionHeader,"},
{"lineNum":" 2150","line":""},
{"lineNum":" 2151","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 2152","line":"            self.debug_data.deinit(allocator);"},
{"lineNum":" 2153","line":"            if (self.debug_data == .pdb) {"},
{"lineNum":" 2154","line":"                allocator.free(self.coff_section_headers);"},
{"lineNum":" 2155","line":"            }"},
{"lineNum":" 2156","line":"        }"},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {"},
{"lineNum":" 2159","line":"            // Translate the VA into an address into this object"},
{"lineNum":" 2160","line":"            const relocated_address = address - self.base_address;"},
{"lineNum":" 2161","line":""},
{"lineNum":" 2162","line":"            switch (self.debug_data) {"},
{"lineNum":" 2163","line":"                .dwarf => |*dwarf| {"},
{"lineNum":" 2164","line":"                    const dwarf_address = relocated_address + self.coff_image_base;"},
{"lineNum":" 2165","line":"                    return getSymbolFromDwarf(allocator, dwarf_address, dwarf);"},
{"lineNum":" 2166","line":"                },"},
{"lineNum":" 2167","line":"                .pdb => {"},
{"lineNum":" 2168","line":"                    // fallthrough to pdb handling"},
{"lineNum":" 2169","line":"                },"},
{"lineNum":" 2170","line":"            }"},
{"lineNum":" 2171","line":""},
{"lineNum":" 2172","line":"            var coff_section: *align(1) const coff.SectionHeader = undefined;"},
{"lineNum":" 2173","line":"            const mod_index = for (self.debug_data.pdb.sect_contribs) |sect_contrib| {"},
{"lineNum":" 2174","line":"                if (sect_contrib.Section > self.coff_section_headers.len) continue;"},
{"lineNum":" 2175","line":"                // Remember that SectionContribEntry.Section is 1-based."},
{"lineNum":" 2176","line":"                coff_section = &self.coff_section_headers[sect_contrib.Section - 1];"},
{"lineNum":" 2177","line":""},
{"lineNum":" 2178","line":"                const vaddr_start = coff_section.virtual_address + sect_contrib.Offset;"},
{"lineNum":" 2179","line":"                const vaddr_end = vaddr_start + sect_contrib.Size;"},
{"lineNum":" 2180","line":"                if (relocated_address >= vaddr_start and relocated_address < vaddr_end) {"},
{"lineNum":" 2181","line":"                    break sect_contrib.ModuleIndex;"},
{"lineNum":" 2182","line":"                }"},
{"lineNum":" 2183","line":"            } else {"},
{"lineNum":" 2184","line":"                // we have no information to add to the address"},
{"lineNum":" 2185","line":"                return SymbolInfo{};"},
{"lineNum":" 2186","line":"            };"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"            const module = (try self.debug_data.pdb.getModule(mod_index)) orelse"},
{"lineNum":" 2189","line":"                return error.InvalidDebugInfo;"},
{"lineNum":" 2190","line":"            const obj_basename = fs.path.basename(module.obj_file_name);"},
{"lineNum":" 2191","line":""},
{"lineNum":" 2192","line":"            const symbol_name = self.debug_data.pdb.getSymbolName("},
{"lineNum":" 2193","line":"                module,"},
{"lineNum":" 2194","line":"                relocated_address - coff_section.virtual_address,"},
{"lineNum":" 2195","line":"            ) orelse \"???\";"},
{"lineNum":" 2196","line":"            const opt_line_info = try self.debug_data.pdb.getLineNumberInfo("},
{"lineNum":" 2197","line":"                module,"},
{"lineNum":" 2198","line":"                relocated_address - coff_section.virtual_address,"},
{"lineNum":" 2199","line":"            );"},
{"lineNum":" 2200","line":""},
{"lineNum":" 2201","line":"            return SymbolInfo{"},
{"lineNum":" 2202","line":"                .symbol_name = symbol_name,"},
{"lineNum":" 2203","line":"                .compile_unit_name = obj_basename,"},
{"lineNum":" 2204","line":"                .line_info = opt_line_info,"},
{"lineNum":" 2205","line":"            };"},
{"lineNum":" 2206","line":"        }"},
{"lineNum":" 2207","line":""},
{"lineNum":" 2208","line":"        pub fn getDwarfInfoForAddress(self: *@This(), allocator: mem.Allocator, address: usize) !?*const DW.DwarfInfo {"},
{"lineNum":" 2209","line":"            _ = allocator;"},
{"lineNum":" 2210","line":"            _ = address;"},
{"lineNum":" 2211","line":""},
{"lineNum":" 2212","line":"            return switch (self.debug_data) {"},
{"lineNum":" 2213","line":"                .dwarf => |*dwarf| dwarf,"},
{"lineNum":" 2214","line":"                else => null,"},
{"lineNum":" 2215","line":"            };"},
{"lineNum":" 2216","line":"        }"},
{"lineNum":" 2217","line":"    },"},
{"lineNum":" 2218","line":"    .linux, .netbsd, .freebsd, .dragonfly, .openbsd, .haiku, .solaris => struct {"},
{"lineNum":" 2219","line":"        base_address: usize,"},
{"lineNum":" 2220","line":"        dwarf: DW.DwarfInfo,"},
{"lineNum":" 2221","line":"        mapped_memory: []align(mem.page_size) const u8,"},
{"lineNum":" 2222","line":"        external_mapped_memory: ?[]align(mem.page_size) const u8,"},
{"lineNum":" 2223","line":""},
{"lineNum":" 2224","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 2225","line":"            self.dwarf.deinit(allocator);"},
{"lineNum":" 2226","line":"            os.munmap(self.mapped_memory);"},
{"lineNum":" 2227","line":"            if (self.external_mapped_memory) |m| os.munmap(m);"},
{"lineNum":" 2228","line":"        }"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2231","line":"            // Translate the VA into an address into this object"},
{"lineNum":" 2232","line":"            const relocated_address = address - self.base_address;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2233","line":"            return getSymbolFromDwarf(allocator, relocated_address, &self.dwarf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2234","line":"        }"},
{"lineNum":" 2235","line":""},
{"lineNum":" 2236","line":"        pub fn getDwarfInfoForAddress(self: *@This(), allocator: mem.Allocator, address: usize) !?*const DW.DwarfInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2237","line":"            _ = allocator;"},
{"lineNum":" 2238","line":"            _ = address;"},
{"lineNum":" 2239","line":"            return &self.dwarf;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2240","line":"        }"},
{"lineNum":" 2241","line":"    },"},
{"lineNum":" 2242","line":"    .wasi => struct {"},
{"lineNum":" 2243","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 2244","line":"            _ = self;"},
{"lineNum":" 2245","line":"            _ = allocator;"},
{"lineNum":" 2246","line":"        }"},
{"lineNum":" 2247","line":""},
{"lineNum":" 2248","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {"},
{"lineNum":" 2249","line":"            _ = self;"},
{"lineNum":" 2250","line":"            _ = allocator;"},
{"lineNum":" 2251","line":"            _ = address;"},
{"lineNum":" 2252","line":"            return SymbolInfo{};"},
{"lineNum":" 2253","line":"        }"},
{"lineNum":" 2254","line":""},
{"lineNum":" 2255","line":"        pub fn getDwarfInfoForAddress(self: *@This(), allocator: mem.Allocator, address: usize) !?*const DW.DwarfInfo {"},
{"lineNum":" 2256","line":"            _ = self;"},
{"lineNum":" 2257","line":"            _ = allocator;"},
{"lineNum":" 2258","line":"            _ = address;"},
{"lineNum":" 2259","line":"            return null;"},
{"lineNum":" 2260","line":"        }"},
{"lineNum":" 2261","line":"    },"},
{"lineNum":" 2262","line":"    else => DW.DwarfInfo,"},
{"lineNum":" 2263","line":"};"},
{"lineNum":" 2264","line":""},
{"lineNum":" 2265","line":"fn getSymbolFromDwarf(allocator: mem.Allocator, address: u64, di: *DW.DwarfInfo) !SymbolInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2266","line":"    if (nosuspend di.findCompileUnit(address)) |compile_unit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2267","line":"        return SymbolInfo{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2268","line":"            .symbol_name = nosuspend di.getSymbolName(address) orelse \"???\",","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2269","line":"            .compile_unit_name = compile_unit.die.getAttrString(di, DW.AT.name, di.section(.debug_str), compile_unit.*) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2270","line":"                error.MissingDebugInfo, error.InvalidDebugInfo => \"???\","},
{"lineNum":" 2271","line":"            },"},
{"lineNum":" 2272","line":"            .line_info = nosuspend di.getLineNumberInfo(allocator, compile_unit.*, address) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2273","line":"                error.MissingDebugInfo, error.InvalidDebugInfo => null,"},
{"lineNum":" 2274","line":"                else => return err,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2275","line":"            },"},
{"lineNum":" 2276","line":"        };"},
{"lineNum":" 2277","line":"    } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2278","line":"        error.MissingDebugInfo, error.InvalidDebugInfo => {"},
{"lineNum":" 2279","line":"            return SymbolInfo{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2280","line":"        },"},
{"lineNum":" 2281","line":"        else => return err,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2282","line":"    }"},
{"lineNum":" 2283","line":"}"},
{"lineNum":" 2284","line":""},
{"lineNum":" 2285","line":"/// TODO multithreaded awareness"},
{"lineNum":" 2286","line":"var debug_info_allocator: ?mem.Allocator = null;"},
{"lineNum":" 2287","line":"var debug_info_arena_allocator: std.heap.ArenaAllocator = undefined;"},
{"lineNum":" 2288","line":"fn getDebugInfoAllocator() mem.Allocator {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2289","line":"    if (debug_info_allocator) |a| return a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2290","line":""},
{"lineNum":" 2291","line":"    debug_info_arena_allocator = std.heap.ArenaAllocator.init(std.heap.page_allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2292","line":"    const allocator = debug_info_arena_allocator.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2293","line":"    debug_info_allocator = allocator;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2294","line":"    return allocator;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2295","line":"}"},
{"lineNum":" 2296","line":""},
{"lineNum":" 2297","line":"/// Whether or not the current target can print useful debug information when a segfault occurs."},
{"lineNum":" 2298","line":"pub const have_segfault_handling_support = switch (native_os) {"},
{"lineNum":" 2299","line":"    .linux,"},
{"lineNum":" 2300","line":"    .macos,"},
{"lineNum":" 2301","line":"    .netbsd,"},
{"lineNum":" 2302","line":"    .solaris,"},
{"lineNum":" 2303","line":"    .windows,"},
{"lineNum":" 2304","line":"    => true,"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":"    .freebsd, .openbsd => @hasDecl(os.system, \"ucontext_t\"),"},
{"lineNum":" 2307","line":"    else => false,"},
{"lineNum":" 2308","line":"};"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"const enable_segfault_handler = std.options.enable_segfault_handler;"},
{"lineNum":" 2311","line":"pub const default_enable_segfault_handler = runtime_safety and have_segfault_handling_support;"},
{"lineNum":" 2312","line":""},
{"lineNum":" 2313","line":"pub fn maybeEnableSegfaultHandler() void {","class":"lineCov","hits":"1","order":"122","possible_hits":"1",},
{"lineNum":" 2314","line":"    if (enable_segfault_handler) {"},
{"lineNum":" 2315","line":"        std.debug.attachSegfaultHandler();","class":"lineCov","hits":"1","order":"123","possible_hits":"1",},
{"lineNum":" 2316","line":"    }"},
{"lineNum":" 2317","line":"}"},
{"lineNum":" 2318","line":""},
{"lineNum":" 2319","line":"var windows_segfault_handle: ?windows.HANDLE = null;"},
{"lineNum":" 2320","line":""},
{"lineNum":" 2321","line":"pub fn updateSegfaultHandler(act: ?*const os.Sigaction) error{OperationNotSupported}!void {","class":"lineCov","hits":"1","order":"129","possible_hits":"1",},
{"lineNum":" 2322","line":"    try os.sigaction(os.SIG.SEGV, act, null);","class":"lineCov","hits":"1","order":"130","possible_hits":"1",},
{"lineNum":" 2323","line":"    try os.sigaction(os.SIG.ILL, act, null);","class":"lineCov","hits":"1","order":"152","possible_hits":"1",},
{"lineNum":" 2324","line":"    try os.sigaction(os.SIG.BUS, act, null);","class":"lineCov","hits":"1","order":"153","possible_hits":"1",},
{"lineNum":" 2325","line":"    try os.sigaction(os.SIG.FPE, act, null);","class":"lineCov","hits":"1","order":"154","possible_hits":"1",},
{"lineNum":" 2326","line":"}"},
{"lineNum":" 2327","line":""},
{"lineNum":" 2328","line":"/// Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");"},
{"lineNum":" 2329","line":"pub fn attachSegfaultHandler() void {","class":"lineCov","hits":"1","order":"124","possible_hits":"1",},
{"lineNum":" 2330","line":"    if (!have_segfault_handling_support) {"},
{"lineNum":" 2331","line":"        @compileError(\"segfault handler not supported for this target\");"},
{"lineNum":" 2332","line":"    }"},
{"lineNum":" 2333","line":"    if (native_os == .windows) {"},
{"lineNum":" 2334","line":"        windows_segfault_handle = windows.kernel32.AddVectoredExceptionHandler(0, handleSegfaultWindows);"},
{"lineNum":" 2335","line":"        return;"},
{"lineNum":" 2336","line":"    }"},
{"lineNum":" 2337","line":"    var act = os.Sigaction{","class":"lineCov","hits":"1","order":"125","possible_hits":"1",},
{"lineNum":" 2338","line":"        .handler = .{ .sigaction = handleSegfaultPosix },"},
{"lineNum":" 2339","line":"        .mask = os.empty_sigset,"},
{"lineNum":" 2340","line":"        .flags = (os.SA.SIGINFO | os.SA.RESTART | os.SA.RESETHAND),"},
{"lineNum":" 2341","line":"    };"},
{"lineNum":" 2342","line":""},
{"lineNum":" 2343","line":"    updateSegfaultHandler(&act) catch {","class":"lineCov","hits":"2","order":"128","possible_hits":"2",},
{"lineNum":" 2344","line":"        @panic(\"unable to install segfault handler, maybe adjust have_segfault_handling_support in std/debug.zig\");","class":"linePartCov","hits":"1","order":"155","possible_hits":"2",},
{"lineNum":" 2345","line":"    };"},
{"lineNum":" 2346","line":"}"},
{"lineNum":" 2347","line":""},
{"lineNum":" 2348","line":"fn resetSegfaultHandler() void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2349","line":"    if (native_os == .windows) {"},
{"lineNum":" 2350","line":"        if (windows_segfault_handle) |handle| {"},
{"lineNum":" 2351","line":"            assert(windows.kernel32.RemoveVectoredExceptionHandler(handle) != 0);"},
{"lineNum":" 2352","line":"            windows_segfault_handle = null;"},
{"lineNum":" 2353","line":"        }"},
{"lineNum":" 2354","line":"        return;"},
{"lineNum":" 2355","line":"    }"},
{"lineNum":" 2356","line":"    var act = os.Sigaction{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2357","line":"        .handler = .{ .handler = os.SIG.DFL },"},
{"lineNum":" 2358","line":"        .mask = os.empty_sigset,"},
{"lineNum":" 2359","line":"        .flags = 0,"},
{"lineNum":" 2360","line":"    };"},
{"lineNum":" 2361","line":"    // To avoid a double-panic, do nothing if an error happens here."},
{"lineNum":" 2362","line":"    updateSegfaultHandler(&act) catch {};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2363","line":"}"},
{"lineNum":" 2364","line":""},
{"lineNum":" 2365","line":"fn handleSegfaultPosix(sig: i32, info: *const os.siginfo_t, ctx_ptr: ?*const anyopaque) callconv(.C) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2366","line":"    // Reset to the default handler so that if a segfault happens in this handler it will crash"},
{"lineNum":" 2367","line":"    // the process. Also when this handler returns, the original instruction will be repeated"},
{"lineNum":" 2368","line":"    // and the resulting segfault will crash the process rather than continually dump stack traces."},
{"lineNum":" 2369","line":"    resetSegfaultHandler();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2370","line":""},
{"lineNum":" 2371","line":"    const addr = switch (native_os) {"},
{"lineNum":" 2372","line":"        .linux => @intFromPtr(info.fields.sigfault.addr),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2373","line":"        .freebsd, .macos => @intFromPtr(info.addr),"},
{"lineNum":" 2374","line":"        .netbsd => @intFromPtr(info.info.reason.fault.addr),"},
{"lineNum":" 2375","line":"        .openbsd => @intFromPtr(info.data.fault.addr),"},
{"lineNum":" 2376","line":"        .solaris => @intFromPtr(info.reason.fault.addr),"},
{"lineNum":" 2377","line":"        else => unreachable,"},
{"lineNum":" 2378","line":"    };"},
{"lineNum":" 2379","line":""},
{"lineNum":" 2380","line":"    nosuspend switch (panic_stage) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2381","line":"        0 => {"},
{"lineNum":" 2382","line":"            panic_stage = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2383","line":"            _ = panicking.fetchAdd(1, .SeqCst);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2384","line":""},
{"lineNum":" 2385","line":"            {"},
{"lineNum":" 2386","line":"                panic_mutex.lock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2387","line":"                defer panic_mutex.unlock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2388","line":""},
{"lineNum":" 2389","line":"                dumpSegfaultInfoPosix(sig, addr, ctx_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2390","line":"            }"},
{"lineNum":" 2391","line":""},
{"lineNum":" 2392","line":"            waitForOtherThreadToFinishPanicking();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2393","line":"        },"},
{"lineNum":" 2394","line":"        else => {"},
{"lineNum":" 2395","line":"            // panic mutex already locked"},
{"lineNum":" 2396","line":"            dumpSegfaultInfoPosix(sig, addr, ctx_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2397","line":"        },"},
{"lineNum":" 2398","line":"    };"},
{"lineNum":" 2399","line":""},
{"lineNum":" 2400","line":"    // We cannot allow the signal handler to return because when it runs the original instruction"},
{"lineNum":" 2401","line":"    // again, the memory may be mapped and undefined behavior would occur rather than repeating"},
{"lineNum":" 2402","line":"    // the segfault. So we simply abort here."},
{"lineNum":" 2403","line":"    os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2404","line":"}"},
{"lineNum":" 2405","line":""},
{"lineNum":" 2406","line":"fn dumpSegfaultInfoPosix(sig: i32, addr: usize, ctx_ptr: ?*const anyopaque) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2407","line":"    const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2408","line":"    _ = switch (sig) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2409","line":"        os.SIG.SEGV => stderr.print(\"Segmentation fault at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2410","line":"        os.SIG.ILL => stderr.print(\"Illegal instruction at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2411","line":"        os.SIG.BUS => stderr.print(\"Bus error at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2412","line":"        os.SIG.FPE => stderr.print(\"Arithmetic exception at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2413","line":"        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2414","line":"    } catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2415","line":""},
{"lineNum":" 2416","line":"    switch (native_arch) {"},
{"lineNum":" 2417","line":"        .x86,"},
{"lineNum":" 2418","line":"        .x86_64,"},
{"lineNum":" 2419","line":"        .arm,"},
{"lineNum":" 2420","line":"        .aarch64,"},
{"lineNum":" 2421","line":"        => {"},
{"lineNum":" 2422","line":"            const ctx: *const os.ucontext_t = @ptrCast(@alignCast(ctx_ptr));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2423","line":"            dumpStackTraceFromBase(ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2424","line":"        },"},
{"lineNum":" 2425","line":"        else => {},"},
{"lineNum":" 2426","line":"    }"},
{"lineNum":" 2427","line":"}"},
{"lineNum":" 2428","line":""},
{"lineNum":" 2429","line":"fn handleSegfaultWindows(info: *windows.EXCEPTION_POINTERS) callconv(windows.WINAPI) c_long {"},
{"lineNum":" 2430","line":"    switch (info.ExceptionRecord.ExceptionCode) {"},
{"lineNum":" 2431","line":"        windows.EXCEPTION_DATATYPE_MISALIGNMENT => handleSegfaultWindowsExtra(info, 0, \"Unaligned Memory Access\"),"},
{"lineNum":" 2432","line":"        windows.EXCEPTION_ACCESS_VIOLATION => handleSegfaultWindowsExtra(info, 1, null),"},
{"lineNum":" 2433","line":"        windows.EXCEPTION_ILLEGAL_INSTRUCTION => handleSegfaultWindowsExtra(info, 2, null),"},
{"lineNum":" 2434","line":"        windows.EXCEPTION_STACK_OVERFLOW => handleSegfaultWindowsExtra(info, 0, \"Stack Overflow\"),"},
{"lineNum":" 2435","line":"        else => return windows.EXCEPTION_CONTINUE_SEARCH,"},
{"lineNum":" 2436","line":"    }"},
{"lineNum":" 2437","line":"}"},
{"lineNum":" 2438","line":""},
{"lineNum":" 2439","line":"fn handleSegfaultWindowsExtra("},
{"lineNum":" 2440","line":"    info: *windows.EXCEPTION_POINTERS,"},
{"lineNum":" 2441","line":"    msg: u8,"},
{"lineNum":" 2442","line":"    label: ?[]const u8,"},
{"lineNum":" 2443","line":") noreturn {"},
{"lineNum":" 2444","line":"    const exception_address = @intFromPtr(info.ExceptionRecord.ExceptionAddress);"},
{"lineNum":" 2445","line":"    if (@hasDecl(windows, \"CONTEXT\")) {"},
{"lineNum":" 2446","line":"        nosuspend switch (panic_stage) {"},
{"lineNum":" 2447","line":"            0 => {"},
{"lineNum":" 2448","line":"                panic_stage = 1;"},
{"lineNum":" 2449","line":"                _ = panicking.fetchAdd(1, .SeqCst);"},
{"lineNum":" 2450","line":""},
{"lineNum":" 2451","line":"                {"},
{"lineNum":" 2452","line":"                    panic_mutex.lock();"},
{"lineNum":" 2453","line":"                    defer panic_mutex.unlock();"},
{"lineNum":" 2454","line":""},
{"lineNum":" 2455","line":"                    dumpSegfaultInfoWindows(info, msg, label);"},
{"lineNum":" 2456","line":"                }"},
{"lineNum":" 2457","line":""},
{"lineNum":" 2458","line":"                waitForOtherThreadToFinishPanicking();"},
{"lineNum":" 2459","line":"            },"},
{"lineNum":" 2460","line":"            else => {"},
{"lineNum":" 2461","line":"                // panic mutex already locked"},
{"lineNum":" 2462","line":"                dumpSegfaultInfoWindows(info, msg, label);"},
{"lineNum":" 2463","line":"            },"},
{"lineNum":" 2464","line":"        };"},
{"lineNum":" 2465","line":"        os.abort();"},
{"lineNum":" 2466","line":"    } else {"},
{"lineNum":" 2467","line":"        switch (msg) {"},
{"lineNum":" 2468","line":"            0 => panicImpl(null, exception_address, \"{s}\", label.?),"},
{"lineNum":" 2469","line":"            1 => {"},
{"lineNum":" 2470","line":"                const format_item = \"Segmentation fault at address 0x{x}\";"},
{"lineNum":" 2471","line":"                var buf: [format_item.len + 64]u8 = undefined; // 64 is arbitrary, but sufficiently large"},
{"lineNum":" 2472","line":"                const to_print = std.fmt.bufPrint(buf[0..buf.len], format_item, .{info.ExceptionRecord.ExceptionInformation[1]}) catch unreachable;"},
{"lineNum":" 2473","line":"                panicImpl(null, exception_address, to_print);"},
{"lineNum":" 2474","line":"            },"},
{"lineNum":" 2475","line":"            2 => panicImpl(null, exception_address, \"Illegal Instruction\"),"},
{"lineNum":" 2476","line":"            else => unreachable,"},
{"lineNum":" 2477","line":"        }"},
{"lineNum":" 2478","line":"    }"},
{"lineNum":" 2479","line":"}"},
{"lineNum":" 2480","line":""},
{"lineNum":" 2481","line":"fn dumpSegfaultInfoWindows(info: *windows.EXCEPTION_POINTERS, msg: u8, label: ?[]const u8) void {"},
{"lineNum":" 2482","line":"    const stderr = io.getStdErr().writer();"},
{"lineNum":" 2483","line":"    _ = switch (msg) {"},
{"lineNum":" 2484","line":"        0 => stderr.print(\"{s}\\n\", .{label.?}),"},
{"lineNum":" 2485","line":"        1 => stderr.print(\"Segmentation fault at address 0x{x}\\n\", .{info.ExceptionRecord.ExceptionInformation[1]}),"},
{"lineNum":" 2486","line":"        2 => stderr.print(\"Illegal instruction at address 0x{x}\\n\", .{info.ContextRecord.getRegs().ip}),"},
{"lineNum":" 2487","line":"        else => unreachable,"},
{"lineNum":" 2488","line":"    } catch os.abort();"},
{"lineNum":" 2489","line":""},
{"lineNum":" 2490","line":"    dumpStackTraceFromBase(info.ContextRecord);"},
{"lineNum":" 2491","line":"}"},
{"lineNum":" 2492","line":""},
{"lineNum":" 2493","line":"pub fn dumpStackPointerAddr(prefix: []const u8) void {"},
{"lineNum":" 2494","line":"    const sp = asm (\"\""},
{"lineNum":" 2495","line":"        : [argc] \"={rsp}\" (-> usize),"},
{"lineNum":" 2496","line":"    );"},
{"lineNum":" 2497","line":"    std.debug.print(\"{} sp = 0x{x}\\n\", .{ prefix, sp });"},
{"lineNum":" 2498","line":"}"},
{"lineNum":" 2499","line":""},
{"lineNum":" 2500","line":"test \"manage resources correctly\" {"},
{"lineNum":" 2501","line":"    if (builtin.os.tag == .wasi) return error.SkipZigTest;"},
{"lineNum":" 2502","line":""},
{"lineNum":" 2503","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":" 2504","line":"        // https://github.com/ziglang/zig/issues/13963"},
{"lineNum":" 2505","line":"        return error.SkipZigTest;"},
{"lineNum":" 2506","line":"    }"},
{"lineNum":" 2507","line":""},
{"lineNum":" 2508","line":"    const writer = std.io.null_writer;"},
{"lineNum":" 2509","line":"    var di = try openSelfDebugInfo(testing.allocator);"},
{"lineNum":" 2510","line":"    defer di.deinit();"},
{"lineNum":" 2511","line":"    try printSourceAtAddress(&di, writer, showMyTrace(), io.tty.detectConfig(std.io.getStdErr()));"},
{"lineNum":" 2512","line":"}"},
{"lineNum":" 2513","line":""},
{"lineNum":" 2514","line":"noinline fn showMyTrace() usize {"},
{"lineNum":" 2515","line":"    return @returnAddress();"},
{"lineNum":" 2516","line":"}"},
{"lineNum":" 2517","line":""},
{"lineNum":" 2518","line":"/// This API helps you track where a value originated and where it was mutated,"},
{"lineNum":" 2519","line":"/// or any other points of interest."},
{"lineNum":" 2520","line":"/// In debug mode, it adds a small size penalty (104 bytes on 64-bit architectures)"},
{"lineNum":" 2521","line":"/// to the aggregate that you add it to."},
{"lineNum":" 2522","line":"/// In release mode, it is size 0 and all methods are no-ops."},
{"lineNum":" 2523","line":"/// This is a pre-made type with default settings."},
{"lineNum":" 2524","line":"/// For more advanced usage, see `ConfigurableTrace`."},
{"lineNum":" 2525","line":"pub const Trace = ConfigurableTrace(2, 4, builtin.mode == .Debug);"},
{"lineNum":" 2526","line":""},
{"lineNum":" 2527","line":"pub fn ConfigurableTrace(comptime size: usize, comptime stack_frame_count: usize, comptime is_enabled: bool) type {"},
{"lineNum":" 2528","line":"    return struct {"},
{"lineNum":" 2529","line":"        addrs: [actual_size][stack_frame_count]usize = undefined,"},
{"lineNum":" 2530","line":"        notes: [actual_size][]const u8 = undefined,"},
{"lineNum":" 2531","line":"        index: Index = 0,"},
{"lineNum":" 2532","line":""},
{"lineNum":" 2533","line":"        const actual_size = if (enabled) size else 0;"},
{"lineNum":" 2534","line":"        const Index = if (enabled) usize else u0;"},
{"lineNum":" 2535","line":""},
{"lineNum":" 2536","line":"        pub const enabled = is_enabled;"},
{"lineNum":" 2537","line":""},
{"lineNum":" 2538","line":"        pub const add = if (enabled) addNoInline else addNoOp;"},
{"lineNum":" 2539","line":""},
{"lineNum":" 2540","line":"        pub noinline fn addNoInline(t: *@This(), note: []const u8) void {"},
{"lineNum":" 2541","line":"            comptime assert(enabled);"},
{"lineNum":" 2542","line":"            return addAddr(t, @returnAddress(), note);"},
{"lineNum":" 2543","line":"        }"},
{"lineNum":" 2544","line":""},
{"lineNum":" 2545","line":"        pub inline fn addNoOp(t: *@This(), note: []const u8) void {"},
{"lineNum":" 2546","line":"            _ = t;"},
{"lineNum":" 2547","line":"            _ = note;"},
{"lineNum":" 2548","line":"            comptime assert(!enabled);"},
{"lineNum":" 2549","line":"        }"},
{"lineNum":" 2550","line":""},
{"lineNum":" 2551","line":"        pub fn addAddr(t: *@This(), addr: usize, note: []const u8) void {"},
{"lineNum":" 2552","line":"            if (!enabled) return;"},
{"lineNum":" 2553","line":""},
{"lineNum":" 2554","line":"            if (t.index < size) {"},
{"lineNum":" 2555","line":"                t.notes[t.index] = note;"},
{"lineNum":" 2556","line":"                t.addrs[t.index] = [1]usize{0} ** stack_frame_count;"},
{"lineNum":" 2557","line":"                var stack_trace: std.builtin.StackTrace = .{"},
{"lineNum":" 2558","line":"                    .index = 0,"},
{"lineNum":" 2559","line":"                    .instruction_addresses = &t.addrs[t.index],"},
{"lineNum":" 2560","line":"                };"},
{"lineNum":" 2561","line":"                captureStackTrace(addr, &stack_trace);"},
{"lineNum":" 2562","line":"            }"},
{"lineNum":" 2563","line":"            // Keep counting even if the end is reached so that the"},
{"lineNum":" 2564","line":"            // user can find out how much more size they need."},
{"lineNum":" 2565","line":"            t.index += 1;"},
{"lineNum":" 2566","line":"        }"},
{"lineNum":" 2567","line":""},
{"lineNum":" 2568","line":"        pub fn dump(t: @This()) void {"},
{"lineNum":" 2569","line":"            if (!enabled) return;"},
{"lineNum":" 2570","line":""},
{"lineNum":" 2571","line":"            const tty_config = io.tty.detectConfig(std.io.getStdErr());"},
{"lineNum":" 2572","line":"            const stderr = io.getStdErr().writer();"},
{"lineNum":" 2573","line":"            const end = @min(t.index, size);"},
{"lineNum":" 2574","line":"            const debug_info = getSelfDebugInfo() catch |err| {"},
{"lineNum":" 2575","line":"                stderr.print("},
{"lineNum":" 2576","line":"                    \"Unable to dump stack trace: Unable to open debug info: {s}\\n\","},
{"lineNum":" 2577","line":"                    .{@errorName(err)},"},
{"lineNum":" 2578","line":"                ) catch return;"},
{"lineNum":" 2579","line":"                return;"},
{"lineNum":" 2580","line":"            };"},
{"lineNum":" 2581","line":"            for (t.addrs[0..end], 0..) |frames_array, i| {"},
{"lineNum":" 2582","line":"                stderr.print(\"{s}:\\n\", .{t.notes[i]}) catch return;"},
{"lineNum":" 2583","line":"                var frames_array_mutable = frames_array;"},
{"lineNum":" 2584","line":"                const frames = mem.sliceTo(frames_array_mutable[0..], 0);"},
{"lineNum":" 2585","line":"                const stack_trace: std.builtin.StackTrace = .{"},
{"lineNum":" 2586","line":"                    .index = frames.len,"},
{"lineNum":" 2587","line":"                    .instruction_addresses = frames,"},
{"lineNum":" 2588","line":"                };"},
{"lineNum":" 2589","line":"                writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, tty_config) catch continue;"},
{"lineNum":" 2590","line":"            }"},
{"lineNum":" 2591","line":"            if (t.index > end) {"},
{"lineNum":" 2592","line":"                stderr.print(\"{d} more traces not shown; consider increasing trace size\\n\", .{"},
{"lineNum":" 2593","line":"                    t.index - end,"},
{"lineNum":" 2594","line":"                }) catch return;"},
{"lineNum":" 2595","line":"            }"},
{"lineNum":" 2596","line":"        }"},
{"lineNum":" 2597","line":""},
{"lineNum":" 2598","line":"        pub fn format("},
{"lineNum":" 2599","line":"            t: Trace,"},
{"lineNum":" 2600","line":"            comptime fmt: []const u8,"},
{"lineNum":" 2601","line":"            options: std.fmt.FormatOptions,"},
{"lineNum":" 2602","line":"            writer: anytype,"},
{"lineNum":" 2603","line":"        ) !void {"},
{"lineNum":" 2604","line":"            if (fmt.len != 0) std.fmt.invalidFmtError(fmt, t);"},
{"lineNum":" 2605","line":"            _ = options;"},
{"lineNum":" 2606","line":"            if (enabled) {"},
{"lineNum":" 2607","line":"                try writer.writeAll(\"\\n\");"},
{"lineNum":" 2608","line":"                t.dump();"},
{"lineNum":" 2609","line":"                try writer.writeAll(\"\\n\");"},
{"lineNum":" 2610","line":"            } else {"},
{"lineNum":" 2611","line":"                return writer.writeAll(\"(value tracing disabled)\");"},
{"lineNum":" 2612","line":"            }"},
{"lineNum":" 2613","line":"        }"},
{"lineNum":" 2614","line":"    };"},
{"lineNum":" 2615","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 473, "covered" : 53,};
var merged_data = [];
