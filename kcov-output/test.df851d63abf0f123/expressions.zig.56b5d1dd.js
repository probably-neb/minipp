var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const OP = @import(\"OP.zig\");"},
{"lineNum":"    4","line":"const leb = std.leb;"},
{"lineNum":"    5","line":"const dwarf = std.dwarf;"},
{"lineNum":"    6","line":"const abi = dwarf.abi;"},
{"lineNum":"    7","line":"const mem = std.mem;"},
{"lineNum":"    8","line":"const assert = std.debug.assert;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"/// Expressions can be evaluated in different contexts, each requiring its own set of inputs."},
{"lineNum":"   11","line":"/// Callers should specify all the fields relevant to their context. If a field is required"},
{"lineNum":"   12","line":"/// by the expression and it isn\'t in the context, error.IncompleteExpressionContext is returned."},
{"lineNum":"   13","line":"pub const ExpressionContext = struct {"},
{"lineNum":"   14","line":"    /// This expression is from a DWARF64 section"},
{"lineNum":"   15","line":"    is_64: bool = false,"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    /// If specified, any addresses will pass through this function before being acccessed"},
{"lineNum":"   18","line":"    isValidMemory: ?*const fn (address: usize) bool = null,"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    /// The compilation unit this expression relates to, if any"},
{"lineNum":"   21","line":"    compile_unit: ?*const dwarf.CompileUnit = null,"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    /// When evaluating a user-presented expression, this is the address of the object being evaluated"},
{"lineNum":"   24","line":"    object_address: ?*const anyopaque = null,"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    /// .debug_addr section"},
{"lineNum":"   27","line":"    debug_addr: ?[]const u8 = null,"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    /// Thread context"},
{"lineNum":"   30","line":"    thread_context: ?*std.debug.ThreadContext = null,"},
{"lineNum":"   31","line":"    reg_context: ?abi.RegisterContext = null,"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    /// Call frame address, if in a CFI context"},
{"lineNum":"   34","line":"    cfa: ?usize = null,"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    /// This expression is a sub-expression from an OP.entry_value instruction"},
{"lineNum":"   37","line":"    entry_value_context: bool = false,"},
{"lineNum":"   38","line":"};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub const ExpressionOptions = struct {"},
{"lineNum":"   41","line":"    /// The address size of the target architecture"},
{"lineNum":"   42","line":"    addr_size: u8 = @sizeOf(usize),"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    /// Endianess of the target architecture"},
{"lineNum":"   45","line":"    endian: std.builtin.Endian = builtin.target.cpu.arch.endian(),"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    /// Restrict the stack machine to a subset of opcodes used in call frame instructions"},
{"lineNum":"   48","line":"    call_frame_context: bool = false,"},
{"lineNum":"   49","line":"};"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"// Explcitly defined to support executing sub-expressions"},
{"lineNum":"   52","line":"pub const ExpressionError = error{"},
{"lineNum":"   53","line":"    UnimplementedExpressionCall,"},
{"lineNum":"   54","line":"    UnimplementedOpcode,"},
{"lineNum":"   55","line":"    UnimplementedUserOpcode,"},
{"lineNum":"   56","line":"    UnimplementedTypedComparison,"},
{"lineNum":"   57","line":"    UnimplementedTypeConversion,"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    UnknownExpressionOpcode,"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    IncompleteExpressionContext,"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    InvalidCFAOpcode,"},
{"lineNum":"   64","line":"    InvalidExpression,"},
{"lineNum":"   65","line":"    InvalidFrameBase,"},
{"lineNum":"   66","line":"    InvalidIntegralTypeSize,"},
{"lineNum":"   67","line":"    InvalidRegister,"},
{"lineNum":"   68","line":"    InvalidSubExpression,"},
{"lineNum":"   69","line":"    InvalidTypeLength,"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    TruncatedIntegralType,"},
{"lineNum":"   72","line":"} || abi.AbiError || error{ EndOfStream, Overflow, OutOfMemory, DivisionByZero };"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"/// A stack machine that can decode and run DWARF expressions."},
{"lineNum":"   75","line":"/// Expressions can be decoded for non-native address size and endianness,"},
{"lineNum":"   76","line":"/// but can only be executed if the current target matches the configuration."},
{"lineNum":"   77","line":"pub fn StackMachine(comptime options: ExpressionOptions) type {"},
{"lineNum":"   78","line":"    const addr_type = switch (options.addr_size) {"},
{"lineNum":"   79","line":"        2 => u16,"},
{"lineNum":"   80","line":"        4 => u32,"},
{"lineNum":"   81","line":"        8 => u64,"},
{"lineNum":"   82","line":"        else => @compileError(\"Unsupported address size of \" ++ options.addr_size),"},
{"lineNum":"   83","line":"    };"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    const addr_type_signed = switch (options.addr_size) {"},
{"lineNum":"   86","line":"        2 => i16,"},
{"lineNum":"   87","line":"        4 => i32,"},
{"lineNum":"   88","line":"        8 => i64,"},
{"lineNum":"   89","line":"        else => @compileError(\"Unsupported address size of \" ++ options.addr_size),"},
{"lineNum":"   90","line":"    };"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    return struct {"},
{"lineNum":"   93","line":"        const Self = @This();"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        const Operand = union(enum) {"},
{"lineNum":"   96","line":"            generic: addr_type,"},
{"lineNum":"   97","line":"            register: u8,"},
{"lineNum":"   98","line":"            type_size: u8,"},
{"lineNum":"   99","line":"            branch_offset: i16,"},
{"lineNum":"  100","line":"            base_register: struct {"},
{"lineNum":"  101","line":"                base_register: u8,"},
{"lineNum":"  102","line":"                offset: i64,"},
{"lineNum":"  103","line":"            },"},
{"lineNum":"  104","line":"            composite_location: struct {"},
{"lineNum":"  105","line":"                size: u64,"},
{"lineNum":"  106","line":"                offset: i64,"},
{"lineNum":"  107","line":"            },"},
{"lineNum":"  108","line":"            block: []const u8,"},
{"lineNum":"  109","line":"            register_type: struct {"},
{"lineNum":"  110","line":"                register: u8,"},
{"lineNum":"  111","line":"                type_offset: addr_type,"},
{"lineNum":"  112","line":"            },"},
{"lineNum":"  113","line":"            const_type: struct {"},
{"lineNum":"  114","line":"                type_offset: addr_type,"},
{"lineNum":"  115","line":"                value_bytes: []const u8,"},
{"lineNum":"  116","line":"            },"},
{"lineNum":"  117","line":"            deref_type: struct {"},
{"lineNum":"  118","line":"                size: u8,"},
{"lineNum":"  119","line":"                type_offset: addr_type,"},
{"lineNum":"  120","line":"            },"},
{"lineNum":"  121","line":"        };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        const Value = union(enum) {"},
{"lineNum":"  124","line":"            generic: addr_type,"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            // Typed value with a maximum size of a register"},
{"lineNum":"  127","line":"            regval_type: struct {"},
{"lineNum":"  128","line":"                // Offset of DW_TAG_base_type DIE"},
{"lineNum":"  129","line":"                type_offset: addr_type,"},
{"lineNum":"  130","line":"                type_size: u8,"},
{"lineNum":"  131","line":"                value: addr_type,"},
{"lineNum":"  132","line":"            },"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"            // Typed value specified directly in the instruction stream"},
{"lineNum":"  135","line":"            const_type: struct {"},
{"lineNum":"  136","line":"                // Offset of DW_TAG_base_type DIE"},
{"lineNum":"  137","line":"                type_offset: addr_type,"},
{"lineNum":"  138","line":"                // Backed by the instruction stream"},
{"lineNum":"  139","line":"                value_bytes: []const u8,"},
{"lineNum":"  140","line":"            },"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"            pub fn asIntegral(self: Value) !addr_type {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"                return switch (self) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  144","line":"                    .generic => |v| v,"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"                    // TODO: For these two prongs, look up the type and assert it\'s integral?"},
{"lineNum":"  147","line":"                    .regval_type => |regval_type| regval_type.value,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"                    .const_type => |const_type| {"},
{"lineNum":"  149","line":"                        const value: u64 = switch (const_type.value_bytes.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"                            1 => mem.readIntSliceNative(u8, const_type.value_bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"                            2 => mem.readIntSliceNative(u16, const_type.value_bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"                            4 => mem.readIntSliceNative(u32, const_type.value_bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"                            8 => mem.readIntSliceNative(u64, const_type.value_bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"                            else => return error.InvalidIntegralTypeSize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"                        };"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"                        return std.math.cast(addr_type, value) orelse error.TruncatedIntegralType;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  158","line":"                    },"},
{"lineNum":"  159","line":"                };"},
{"lineNum":"  160","line":"            }"},
{"lineNum":"  161","line":"        };"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        stack: std.ArrayListUnmanaged(Value) = .{},"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        pub fn reset(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"            self.stack.clearRetainingCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"        }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        pub fn deinit(self: *Self, allocator: std.mem.Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"            self.stack.deinit(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"        }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"        fn generic(value: anytype) Operand {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  174","line":"            const int_info = @typeInfo(@TypeOf(value)).Int;"},
{"lineNum":"  175","line":"            if (@sizeOf(@TypeOf(value)) > options.addr_size) {"},
{"lineNum":"  176","line":"                return .{ .generic = switch (int_info.signedness) {"},
{"lineNum":"  177","line":"                    .signed => @bitCast(@as(addr_type_signed, @truncate(value))),"},
{"lineNum":"  178","line":"                    .unsigned => @truncate(value),"},
{"lineNum":"  179","line":"                } };"},
{"lineNum":"  180","line":"            } else {"},
{"lineNum":"  181","line":"                return .{ .generic = switch (int_info.signedness) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  182","line":"                    .signed => @bitCast(@as(addr_type_signed, @intCast(value))),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  183","line":"                    .unsigned => @intCast(value),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  184","line":"                } };"},
{"lineNum":"  185","line":"            }"},
{"lineNum":"  186","line":"        }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        pub fn readOperand(stream: *std.io.FixedBufferStream([]const u8), opcode: u8, context: ExpressionContext) !?Operand {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"            const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"            return switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":"                OP.addr => generic(try reader.readInt(addr_type, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"                OP.call_ref => if (context.is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"                    generic(try reader.readInt(u64, options.endian))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"                else"},
{"lineNum":"  195","line":"                    generic(try reader.readInt(u32, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  196","line":"                OP.const1u,"},
{"lineNum":"  197","line":"                OP.pick,"},
{"lineNum":"  198","line":"                => generic(try reader.readByte()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"                OP.deref_size,"},
{"lineNum":"  200","line":"                OP.xderef_size,"},
{"lineNum":"  201","line":"                => .{ .type_size = try reader.readByte() },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"                OP.const1s => generic(try reader.readByteSigned()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"                OP.const2u,"},
{"lineNum":"  204","line":"                OP.call2,"},
{"lineNum":"  205","line":"                => generic(try reader.readInt(u16, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"                OP.call4 => generic(try reader.readInt(u32, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"                OP.const2s => generic(try reader.readInt(i16, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"                OP.bra,"},
{"lineNum":"  209","line":"                OP.skip,"},
{"lineNum":"  210","line":"                => .{ .branch_offset = try reader.readInt(i16, options.endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"                OP.const4u => generic(try reader.readInt(u32, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"                OP.const4s => generic(try reader.readInt(i32, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"                OP.const8u => generic(try reader.readInt(u64, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"                OP.const8s => generic(try reader.readInt(i64, options.endian)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"                OP.constu,"},
{"lineNum":"  216","line":"                OP.plus_uconst,"},
{"lineNum":"  217","line":"                OP.addrx,"},
{"lineNum":"  218","line":"                OP.constx,"},
{"lineNum":"  219","line":"                OP.convert,"},
{"lineNum":"  220","line":"                OP.reinterpret,"},
{"lineNum":"  221","line":"                => generic(try leb.readULEB128(u64, reader)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"                OP.consts,"},
{"lineNum":"  223","line":"                OP.fbreg,"},
{"lineNum":"  224","line":"                => generic(try leb.readILEB128(i64, reader)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"                OP.lit0...OP.lit31 => |n| generic(n - OP.lit0),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"                OP.reg0...OP.reg31 => |n| .{ .register = n - OP.reg0 },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"                OP.breg0...OP.breg31 => |n| .{ .base_register = .{"},
{"lineNum":"  228","line":"                    .base_register = n - OP.breg0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"                    .offset = try leb.readILEB128(i64, reader),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"                } },"},
{"lineNum":"  231","line":"                OP.regx => .{ .register = try leb.readULEB128(u8, reader) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"                OP.bregx => blk: {"},
{"lineNum":"  233","line":"                    const base_register = try leb.readULEB128(u8, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"                    const offset = try leb.readILEB128(i64, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"                    break :blk .{ .base_register = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"                        .base_register = base_register,"},
{"lineNum":"  237","line":"                        .offset = offset,"},
{"lineNum":"  238","line":"                    } };"},
{"lineNum":"  239","line":"                },"},
{"lineNum":"  240","line":"                OP.regval_type => blk: {"},
{"lineNum":"  241","line":"                    const register = try leb.readULEB128(u8, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"                    const type_offset = try leb.readULEB128(addr_type, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"                    break :blk .{ .register_type = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"                        .register = register,"},
{"lineNum":"  245","line":"                        .type_offset = type_offset,"},
{"lineNum":"  246","line":"                    } };"},
{"lineNum":"  247","line":"                },"},
{"lineNum":"  248","line":"                OP.piece => .{"},
{"lineNum":"  249","line":"                    .composite_location = .{"},
{"lineNum":"  250","line":"                        .size = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"                        .offset = 0,"},
{"lineNum":"  252","line":"                    },"},
{"lineNum":"  253","line":"                },"},
{"lineNum":"  254","line":"                OP.bit_piece => blk: {"},
{"lineNum":"  255","line":"                    const size = try leb.readULEB128(u8, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"                    const offset = try leb.readILEB128(i64, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":"                    break :blk .{ .composite_location = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"                        .size = size,"},
{"lineNum":"  259","line":"                        .offset = offset,"},
{"lineNum":"  260","line":"                    } };"},
{"lineNum":"  261","line":"                },"},
{"lineNum":"  262","line":"                OP.implicit_value, OP.entry_value => blk: {"},
{"lineNum":"  263","line":"                    const size = try leb.readULEB128(u8, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"                    if (stream.pos + size > stream.buffer.len) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  265","line":"                    const block = stream.buffer[stream.pos..][0..size];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  266","line":"                    stream.pos += size;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  267","line":"                    break :blk .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"                        .block = block,"},
{"lineNum":"  269","line":"                    };"},
{"lineNum":"  270","line":"                },"},
{"lineNum":"  271","line":"                OP.const_type => blk: {"},
{"lineNum":"  272","line":"                    const type_offset = try leb.readULEB128(addr_type, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"                    const size = try reader.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"                    if (stream.pos + size > stream.buffer.len) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  275","line":"                    const value_bytes = stream.buffer[stream.pos..][0..size];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  276","line":"                    stream.pos += size;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  277","line":"                    break :blk .{ .const_type = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"                        .type_offset = type_offset,"},
{"lineNum":"  279","line":"                        .value_bytes = value_bytes,"},
{"lineNum":"  280","line":"                    } };"},
{"lineNum":"  281","line":"                },"},
{"lineNum":"  282","line":"                OP.deref_type,"},
{"lineNum":"  283","line":"                OP.xderef_type,"},
{"lineNum":"  284","line":"                => .{"},
{"lineNum":"  285","line":"                    .deref_type = .{"},
{"lineNum":"  286","line":"                        .size = try reader.readByte(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"                        .type_offset = try leb.readULEB128(addr_type, reader),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  288","line":"                    },"},
{"lineNum":"  289","line":"                },"},
{"lineNum":"  290","line":"                OP.lo_user...OP.hi_user => return error.UnimplementedUserOpcode,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"                else => null,"},
{"lineNum":"  292","line":"            };"},
{"lineNum":"  293","line":"        }"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        pub fn run("},
{"lineNum":"  296","line":"            self: *Self,"},
{"lineNum":"  297","line":"            expression: []const u8,"},
{"lineNum":"  298","line":"            allocator: std.mem.Allocator,"},
{"lineNum":"  299","line":"            context: ExpressionContext,"},
{"lineNum":"  300","line":"            initial_value: ?usize,"},
{"lineNum":"  301","line":"        ) ExpressionError!?Value {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"            if (initial_value) |i| try self.stack.append(allocator, .{ .generic = i });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  303","line":"            var stream = std.io.fixedBufferStream(expression);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"            while (try self.step(&stream, allocator, context)) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"            if (self.stack.items.len == 0) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"            return self.stack.items[self.stack.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  307","line":"        }"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"        /// Reads an opcode and its operands from `stream`, then executes it"},
{"lineNum":"  310","line":"        pub fn step("},
{"lineNum":"  311","line":"            self: *Self,"},
{"lineNum":"  312","line":"            stream: *std.io.FixedBufferStream([]const u8),"},
{"lineNum":"  313","line":"            allocator: std.mem.Allocator,"},
{"lineNum":"  314","line":"            context: ExpressionContext,"},
{"lineNum":"  315","line":"        ) ExpressionError!bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"            if (@sizeOf(usize) != @sizeOf(addr_type) or options.endian != comptime builtin.target.cpu.arch.endian())"},
{"lineNum":"  317","line":"                @compileError(\"Execution of non-native address sizes / endianness is not supported\");"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"            const opcode = try stream.reader().readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"            if (options.call_frame_context and !isOpcodeValidInCFA(opcode)) return error.InvalidCFAOpcode;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  321","line":"            const operand = try readOperand(stream, opcode, context);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  322","line":"            switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"                // 2.5.1.1: Literal Encodings"},
{"lineNum":"  325","line":"                OP.lit0...OP.lit31,"},
{"lineNum":"  326","line":"                OP.addr,"},
{"lineNum":"  327","line":"                OP.const1u,"},
{"lineNum":"  328","line":"                OP.const2u,"},
{"lineNum":"  329","line":"                OP.const4u,"},
{"lineNum":"  330","line":"                OP.const8u,"},
{"lineNum":"  331","line":"                OP.const1s,"},
{"lineNum":"  332","line":"                OP.const2s,"},
{"lineNum":"  333","line":"                OP.const4s,"},
{"lineNum":"  334","line":"                OP.const8s,"},
{"lineNum":"  335","line":"                OP.constu,"},
{"lineNum":"  336","line":"                OP.consts,"},
{"lineNum":"  337","line":"                => try self.stack.append(allocator, .{ .generic = operand.?.generic }),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"                OP.const_type => {"},
{"lineNum":"  340","line":"                    const const_type = operand.?.const_type;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  341","line":"                    try self.stack.append(allocator, .{ .const_type = .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  342","line":"                        .type_offset = const_type.type_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"                        .value_bytes = const_type.value_bytes,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  344","line":"                    } });"},
{"lineNum":"  345","line":"                },"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"                OP.addrx,"},
{"lineNum":"  348","line":"                OP.constx,"},
{"lineNum":"  349","line":"                => {"},
{"lineNum":"  350","line":"                    if (context.compile_unit == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  351","line":"                    if (context.debug_addr == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  352","line":"                    const debug_addr_index = operand.?.generic;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  353","line":"                    const offset = context.compile_unit.?.addr_base + debug_addr_index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  354","line":"                    if (offset >= context.debug_addr.?.len) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  355","line":"                    const value = mem.readIntSliceNative(usize, context.debug_addr.?[offset..][0..@sizeOf(usize)]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  356","line":"                    try self.stack.append(allocator, .{ .generic = value });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  357","line":"                },"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"                // 2.5.1.2: Register Values"},
{"lineNum":"  360","line":"                OP.fbreg => {"},
{"lineNum":"  361","line":"                    if (context.compile_unit == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  362","line":"                    if (context.compile_unit.?.frame_base == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"                    const offset: i64 = @intCast(operand.?.generic);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  365","line":"                    _ = offset;"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"                    switch (context.compile_unit.?.frame_base.?.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  368","line":"                        .ExprLoc => {"},
{"lineNum":"  369","line":"                            // TODO: Run this expression in a nested stack machine"},
{"lineNum":"  370","line":"                            return error.UnimplementedOpcode;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"                        },"},
{"lineNum":"  372","line":"                        .LocListOffset => {"},
{"lineNum":"  373","line":"                            // TODO: Read value from .debug_loclists"},
{"lineNum":"  374","line":"                            return error.UnimplementedOpcode;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"                        },"},
{"lineNum":"  376","line":"                        .SecOffset => {"},
{"lineNum":"  377","line":"                            // TODO: Read value from .debug_loclists"},
{"lineNum":"  378","line":"                            return error.UnimplementedOpcode;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"                        },"},
{"lineNum":"  380","line":"                        else => return error.InvalidFrameBase,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"                    }"},
{"lineNum":"  382","line":"                },"},
{"lineNum":"  383","line":"                OP.breg0...OP.breg31,"},
{"lineNum":"  384","line":"                OP.bregx,"},
{"lineNum":"  385","line":"                => {"},
{"lineNum":"  386","line":"                    if (context.thread_context == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"                    const base_register = operand.?.base_register;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  389","line":"                    var value: i64 = @intCast(mem.readIntSliceNative(usize, try abi.regBytes(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  390","line":"                        context.thread_context.?,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  391","line":"                        base_register.base_register,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"                        context.reg_context,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"                    )));"},
{"lineNum":"  394","line":"                    value += base_register.offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"                    try self.stack.append(allocator, .{ .generic = @intCast(value) });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"                },"},
{"lineNum":"  397","line":"                OP.regval_type => {"},
{"lineNum":"  398","line":"                    const register_type = operand.?.register_type;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  399","line":"                    const value = mem.readIntSliceNative(usize, try abi.regBytes(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":"                        context.thread_context.?,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  401","line":"                        register_type.register,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":"                        context.reg_context,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"                    ));"},
{"lineNum":"  404","line":"                    try self.stack.append(allocator, .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"                        .regval_type = .{"},
{"lineNum":"  406","line":"                            .type_offset = register_type.type_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"                            .type_size = @sizeOf(addr_type),"},
{"lineNum":"  408","line":"                            .value = value,"},
{"lineNum":"  409","line":"                        },"},
{"lineNum":"  410","line":"                    });"},
{"lineNum":"  411","line":"                },"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"                // 2.5.1.3: Stack Operations"},
{"lineNum":"  414","line":"                OP.dup => {"},
{"lineNum":"  415","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  416","line":"                    try self.stack.append(allocator, self.stack.items[self.stack.items.len - 1]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  417","line":"                },"},
{"lineNum":"  418","line":"                OP.drop => {"},
{"lineNum":"  419","line":"                    _ = self.stack.pop();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"                },"},
{"lineNum":"  421","line":"                OP.pick, OP.over => {"},
{"lineNum":"  422","line":"                    const stack_index = if (opcode == OP.over) 1 else operand.?.generic;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  423","line":"                    if (stack_index >= self.stack.items.len) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  424","line":"                    try self.stack.append(allocator, self.stack.items[self.stack.items.len - 1 - stack_index]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  425","line":"                },"},
{"lineNum":"  426","line":"                OP.swap => {"},
{"lineNum":"  427","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  428","line":"                    mem.swap(Value, &self.stack.items[self.stack.items.len - 1], &self.stack.items[self.stack.items.len - 2]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  429","line":"                },"},
{"lineNum":"  430","line":"                OP.rot => {"},
{"lineNum":"  431","line":"                    if (self.stack.items.len < 3) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":"                    const first = self.stack.items[self.stack.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  433","line":"                    self.stack.items[self.stack.items.len - 1] = self.stack.items[self.stack.items.len - 2];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  434","line":"                    self.stack.items[self.stack.items.len - 2] = self.stack.items[self.stack.items.len - 3];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  435","line":"                    self.stack.items[self.stack.items.len - 3] = first;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  436","line":"                },"},
{"lineNum":"  437","line":"                OP.deref,"},
{"lineNum":"  438","line":"                OP.xderef,"},
{"lineNum":"  439","line":"                OP.deref_size,"},
{"lineNum":"  440","line":"                OP.xderef_size,"},
{"lineNum":"  441","line":"                OP.deref_type,"},
{"lineNum":"  442","line":"                OP.xderef_type,"},
{"lineNum":"  443","line":"                => {"},
{"lineNum":"  444","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  445","line":"                    var addr = try self.stack.items[self.stack.items.len - 1].asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":"                    const addr_space_identifier: ?usize = switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"                        OP.xderef,"},
{"lineNum":"  448","line":"                        OP.xderef_size,"},
{"lineNum":"  449","line":"                        OP.xderef_type,"},
{"lineNum":"  450","line":"                        => blk: {"},
{"lineNum":"  451","line":"                            _ = self.stack.pop();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  452","line":"                            if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  453","line":"                            break :blk try self.stack.items[self.stack.items.len - 1].asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  454","line":"                        },"},
{"lineNum":"  455","line":"                        else => null,"},
{"lineNum":"  456","line":"                    };"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"                    // Usage of addr_space_identifier in the address calculation is implementation defined."},
{"lineNum":"  459","line":"                    // This code will need to be updated to handle any architectures that utilize this."},
{"lineNum":"  460","line":"                    _ = addr_space_identifier;"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"                    if (context.isValidMemory) |isValidMemory| if (!isValidMemory(addr)) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  463","line":"                    const size = switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  464","line":"                        OP.deref,"},
{"lineNum":"  465","line":"                        OP.xderef,"},
{"lineNum":"  466","line":"                        => @sizeOf(addr_type),"},
{"lineNum":"  467","line":"                        OP.deref_size,"},
{"lineNum":"  468","line":"                        OP.xderef_size,"},
{"lineNum":"  469","line":"                        => operand.?.type_size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"                        OP.deref_type,"},
{"lineNum":"  471","line":"                        OP.xderef_type,"},
{"lineNum":"  472","line":"                        => operand.?.deref_type.size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"                        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  474","line":"                    };"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"                    const value: addr_type = std.math.cast(addr_type, @as(u64, switch (size) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  477","line":"                        1 => @as(*const u8, @ptrFromInt(addr)).*,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"                        2 => @as(*const u16, @ptrFromInt(addr)).*,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"                        4 => @as(*const u32, @ptrFromInt(addr)).*,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"                        8 => @as(*const u64, @ptrFromInt(addr)).*,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"                        else => return error.InvalidExpression,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"                    })) orelse return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"                    switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"                        OP.deref_type,"},
{"lineNum":"  486","line":"                        OP.xderef_type,"},
{"lineNum":"  487","line":"                        => {"},
{"lineNum":"  488","line":"                            self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  489","line":"                                .regval_type = .{"},
{"lineNum":"  490","line":"                                    .type_offset = operand.?.deref_type.type_offset,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  491","line":"                                    .type_size = operand.?.deref_type.size,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  492","line":"                                    .value = value,"},
{"lineNum":"  493","line":"                                },"},
{"lineNum":"  494","line":"                            };"},
{"lineNum":"  495","line":"                        },"},
{"lineNum":"  496","line":"                        else => {"},
{"lineNum":"  497","line":"                            self.stack.items[self.stack.items.len - 1] = .{ .generic = value };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  498","line":"                        },"},
{"lineNum":"  499","line":"                    }"},
{"lineNum":"  500","line":"                },"},
{"lineNum":"  501","line":"                OP.push_object_address => {"},
{"lineNum":"  502","line":"                    // In sub-expressions, `push_object_address` is not meaningful (as per the"},
{"lineNum":"  503","line":"                    // spec), so treat it like a nop"},
{"lineNum":"  504","line":"                    if (!context.entry_value_context) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  505","line":"                        if (context.object_address == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  506","line":"                        try self.stack.append(allocator, .{ .generic = @intFromPtr(context.object_address.?) });","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  507","line":"                    }"},
{"lineNum":"  508","line":"                },"},
{"lineNum":"  509","line":"                OP.form_tls_address => {"},
{"lineNum":"  510","line":"                    return error.UnimplementedOpcode;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  511","line":"                },"},
{"lineNum":"  512","line":"                OP.call_frame_cfa => {"},
{"lineNum":"  513","line":"                    if (context.cfa) |cfa| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  514","line":"                        try self.stack.append(allocator, .{ .generic = cfa });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  515","line":"                    } else return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  516","line":"                },"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"                // 2.5.1.4: Arithmetic and Logical Operations"},
{"lineNum":"  519","line":"                OP.abs => {"},
{"lineNum":"  520","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  521","line":"                    const value: isize = @bitCast(try self.stack.items[self.stack.items.len - 1].asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  522","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  523","line":"                        .generic = std.math.absCast(value),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  524","line":"                    };"},
{"lineNum":"  525","line":"                },"},
{"lineNum":"  526","line":"                OP.@\"and\" => {"},
{"lineNum":"  527","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  528","line":"                    const a = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  529","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  530","line":"                        .generic = a & try self.stack.items[self.stack.items.len - 1].asIntegral(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  531","line":"                    };"},
{"lineNum":"  532","line":"                },"},
{"lineNum":"  533","line":"                OP.div => {"},
{"lineNum":"  534","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  535","line":"                    const a: isize = @bitCast(try self.stack.pop().asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  536","line":"                    const b: isize = @bitCast(try self.stack.items[self.stack.items.len - 1].asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  537","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  538","line":"                        .generic = @bitCast(try std.math.divTrunc(isize, b, a)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  539","line":"                    };"},
{"lineNum":"  540","line":"                },"},
{"lineNum":"  541","line":"                OP.minus => {"},
{"lineNum":"  542","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  543","line":"                    const b = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  544","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  545","line":"                        .generic = try std.math.sub(addr_type, try self.stack.items[self.stack.items.len - 1].asIntegral(), b),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  546","line":"                    };"},
{"lineNum":"  547","line":"                },"},
{"lineNum":"  548","line":"                OP.mod => {"},
{"lineNum":"  549","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  550","line":"                    const a: isize = @bitCast(try self.stack.pop().asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"                    const b: isize = @bitCast(try self.stack.items[self.stack.items.len - 1].asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  552","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  553","line":"                        .generic = @bitCast(@mod(b, a)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  554","line":"                    };"},
{"lineNum":"  555","line":"                },"},
{"lineNum":"  556","line":"                OP.mul => {"},
{"lineNum":"  557","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  558","line":"                    const a: isize = @bitCast(try self.stack.pop().asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  559","line":"                    const b: isize = @bitCast(try self.stack.items[self.stack.items.len - 1].asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  560","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  561","line":"                        .generic = @bitCast(@mulWithOverflow(a, b)[0]),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"                    };"},
{"lineNum":"  563","line":"                },"},
{"lineNum":"  564","line":"                OP.neg => {"},
{"lineNum":"  565","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  566","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  567","line":"                        .generic = @bitCast("},
{"lineNum":"  568","line":"                            try std.math.negate(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"                                @as(isize, @bitCast(try self.stack.items[self.stack.items.len - 1].asIntegral())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  570","line":"                            ),"},
{"lineNum":"  571","line":"                        ),"},
{"lineNum":"  572","line":"                    };"},
{"lineNum":"  573","line":"                },"},
{"lineNum":"  574","line":"                OP.not => {"},
{"lineNum":"  575","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  576","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  577","line":"                        .generic = ~try self.stack.items[self.stack.items.len - 1].asIntegral(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  578","line":"                    };"},
{"lineNum":"  579","line":"                },"},
{"lineNum":"  580","line":"                OP.@\"or\" => {"},
{"lineNum":"  581","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  582","line":"                    const a = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  583","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  584","line":"                        .generic = a | try self.stack.items[self.stack.items.len - 1].asIntegral(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  585","line":"                    };"},
{"lineNum":"  586","line":"                },"},
{"lineNum":"  587","line":"                OP.plus => {"},
{"lineNum":"  588","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  589","line":"                    const b = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  590","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  591","line":"                        .generic = try std.math.add(addr_type, try self.stack.items[self.stack.items.len - 1].asIntegral(), b),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  592","line":"                    };"},
{"lineNum":"  593","line":"                },"},
{"lineNum":"  594","line":"                OP.plus_uconst => {"},
{"lineNum":"  595","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  596","line":"                    const constant = operand.?.generic;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  597","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  598","line":"                        .generic = try std.math.add(addr_type, try self.stack.items[self.stack.items.len - 1].asIntegral(), constant),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  599","line":"                    };"},
{"lineNum":"  600","line":"                },"},
{"lineNum":"  601","line":"                OP.shl => {"},
{"lineNum":"  602","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":"                    const a = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  604","line":"                    const b = try self.stack.items[self.stack.items.len - 1].asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  606","line":"                        .generic = std.math.shl(usize, b, a),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  607","line":"                    };"},
{"lineNum":"  608","line":"                },"},
{"lineNum":"  609","line":"                OP.shr => {"},
{"lineNum":"  610","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  611","line":"                    const a = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  612","line":"                    const b = try self.stack.items[self.stack.items.len - 1].asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  614","line":"                        .generic = std.math.shr(usize, b, a),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":"                    };"},
{"lineNum":"  616","line":"                },"},
{"lineNum":"  617","line":"                OP.shra => {"},
{"lineNum":"  618","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  619","line":"                    const a = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  620","line":"                    const b: isize = @bitCast(try self.stack.items[self.stack.items.len - 1].asIntegral());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  622","line":"                        .generic = @bitCast(std.math.shr(isize, b, a)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"                    };"},
{"lineNum":"  624","line":"                },"},
{"lineNum":"  625","line":"                OP.xor => {"},
{"lineNum":"  626","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  627","line":"                    const a = try self.stack.pop().asIntegral();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  628","line":"                    self.stack.items[self.stack.items.len - 1] = .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  629","line":"                        .generic = a ^ try self.stack.items[self.stack.items.len - 1].asIntegral(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  630","line":"                    };"},
{"lineNum":"  631","line":"                },"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"                // 2.5.1.5: Control Flow Operations"},
{"lineNum":"  634","line":"                OP.le,"},
{"lineNum":"  635","line":"                OP.ge,"},
{"lineNum":"  636","line":"                OP.eq,"},
{"lineNum":"  637","line":"                OP.lt,"},
{"lineNum":"  638","line":"                OP.gt,"},
{"lineNum":"  639","line":"                OP.ne,"},
{"lineNum":"  640","line":"                => {"},
{"lineNum":"  641","line":"                    if (self.stack.items.len < 2) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  642","line":"                    const a = self.stack.pop();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  643","line":"                    const b = self.stack.items[self.stack.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"                    if (a == .generic and b == .generic) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  646","line":"                        const a_int: isize = @bitCast(a.asIntegral() catch unreachable);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  647","line":"                        const b_int: isize = @bitCast(b.asIntegral() catch unreachable);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  648","line":"                        const result = @intFromBool(switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  649","line":"                            OP.le => b_int <= a_int,"},
{"lineNum":"  650","line":"                            OP.ge => b_int >= a_int,"},
{"lineNum":"  651","line":"                            OP.eq => b_int == a_int,"},
{"lineNum":"  652","line":"                            OP.lt => b_int < a_int,"},
{"lineNum":"  653","line":"                            OP.gt => b_int > a_int,"},
{"lineNum":"  654","line":"                            OP.ne => b_int != a_int,"},
{"lineNum":"  655","line":"                            else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  656","line":"                        });"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"                        self.stack.items[self.stack.items.len - 1] = .{ .generic = result };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  659","line":"                    } else {"},
{"lineNum":"  660","line":"                        // TODO: Load the types referenced by these values, find their comparison operator, and run it"},
{"lineNum":"  661","line":"                        return error.UnimplementedTypedComparison;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  662","line":"                    }"},
{"lineNum":"  663","line":"                },"},
{"lineNum":"  664","line":"                OP.skip, OP.bra => {"},
{"lineNum":"  665","line":"                    const branch_offset = operand.?.branch_offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  666","line":"                    const condition = if (opcode == OP.bra) blk: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":"                        if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  668","line":"                        break :blk try self.stack.pop().asIntegral() != 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  669","line":"                    } else true;"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"                    if (condition) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  672","line":"                        const new_pos = std.math.cast(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"                            usize,"},
{"lineNum":"  674","line":"                            try std.math.add(isize, @as(isize, @intCast(stream.pos)), branch_offset),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  675","line":"                        ) orelse return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"                        if (new_pos < 0 or new_pos > stream.buffer.len) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  678","line":"                        stream.pos = new_pos;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  679","line":"                    }"},
{"lineNum":"  680","line":"                },"},
{"lineNum":"  681","line":"                OP.call2,"},
{"lineNum":"  682","line":"                OP.call4,"},
{"lineNum":"  683","line":"                OP.call_ref,"},
{"lineNum":"  684","line":"                => {"},
{"lineNum":"  685","line":"                    const debug_info_offset = operand.?.generic;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  686","line":"                    _ = debug_info_offset;"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"                    // TODO: Load a DIE entry at debug_info_offset in a .debug_info section (the spec says that it"},
{"lineNum":"  689","line":"                    //       can be in a separate exe / shared object from the one containing this expression)."},
{"lineNum":"  690","line":"                    //       Transfer control to the DW_AT_location attribute, with the current stack as input."},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"                    return error.UnimplementedExpressionCall;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  693","line":"                },"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"                // 2.5.1.6: Type Conversions"},
{"lineNum":"  696","line":"                OP.convert => {"},
{"lineNum":"  697","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  698","line":"                    const type_offset = operand.?.generic;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"                    // TODO: Load the DW_TAG_base_type entries in context.compile_unit and verify both types are the same size"},
{"lineNum":"  701","line":"                    const value = self.stack.items[self.stack.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  702","line":"                    if (type_offset == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  703","line":"                        self.stack.items[self.stack.items.len - 1] = .{ .generic = try value.asIntegral() };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  704","line":"                    } else {"},
{"lineNum":"  705","line":"                        // TODO: Load the DW_TAG_base_type entry in context.compile_unit, find a conversion operator"},
{"lineNum":"  706","line":"                        //       from the old type to the new type, run it."},
{"lineNum":"  707","line":"                        return error.UnimplementedTypeConversion;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  708","line":"                    }"},
{"lineNum":"  709","line":"                },"},
{"lineNum":"  710","line":"                OP.reinterpret => {"},
{"lineNum":"  711","line":"                    if (self.stack.items.len == 0) return error.InvalidExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  712","line":"                    const type_offset = operand.?.generic;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"                    // TODO: Load the DW_TAG_base_type entries in context.compile_unit and verify both types are the same size"},
{"lineNum":"  715","line":"                    const value = self.stack.items[self.stack.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  716","line":"                    if (type_offset == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  717","line":"                        self.stack.items[self.stack.items.len - 1] = .{ .generic = try value.asIntegral() };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  718","line":"                    } else {"},
{"lineNum":"  719","line":"                        self.stack.items[self.stack.items.len - 1] = switch (value) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  720","line":"                            .generic => |v| .{"},
{"lineNum":"  721","line":"                                .regval_type = .{"},
{"lineNum":"  722","line":"                                    .type_offset = type_offset,"},
{"lineNum":"  723","line":"                                    .type_size = @sizeOf(addr_type),"},
{"lineNum":"  724","line":"                                    .value = v,"},
{"lineNum":"  725","line":"                                },"},
{"lineNum":"  726","line":"                            },"},
{"lineNum":"  727","line":"                            .regval_type => |r| .{"},
{"lineNum":"  728","line":"                                .regval_type = .{"},
{"lineNum":"  729","line":"                                    .type_offset = type_offset,"},
{"lineNum":"  730","line":"                                    .type_size = r.type_size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  731","line":"                                    .value = r.value,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  732","line":"                                },"},
{"lineNum":"  733","line":"                            },"},
{"lineNum":"  734","line":"                            .const_type => |c| .{"},
{"lineNum":"  735","line":"                                .const_type = .{"},
{"lineNum":"  736","line":"                                    .type_offset = type_offset,"},
{"lineNum":"  737","line":"                                    .value_bytes = c.value_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"                                },"},
{"lineNum":"  739","line":"                            },"},
{"lineNum":"  740","line":"                        };"},
{"lineNum":"  741","line":"                    }"},
{"lineNum":"  742","line":"                },"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"                // 2.5.1.7: Special Operations"},
{"lineNum":"  745","line":"                OP.nop => {},"},
{"lineNum":"  746","line":"                OP.entry_value => {"},
{"lineNum":"  747","line":"                    const block = operand.?.block;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  748","line":"                    if (block.len == 0) return error.InvalidSubExpression;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"                    // TODO: The spec states that this sub-expression needs to observe the state (ie. registers)"},
{"lineNum":"  751","line":"                    //       as it was upon entering the current subprogram. If this isn\'t being called at the"},
{"lineNum":"  752","line":"                    //       end of a frame unwind operation, an additional ThreadContext with this state will be needed."},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"                    if (isOpcodeRegisterLocation(block[0])) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  755","line":"                        if (context.thread_context == null) return error.IncompleteExpressionContext;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"                        var block_stream = std.io.fixedBufferStream(block);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":"                        const register = (try readOperand(&block_stream, block[0], context)).?.register;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  759","line":"                        const value = mem.readIntSliceNative(usize, try abi.regBytes(context.thread_context.?, register, context.reg_context));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  760","line":"                        try self.stack.append(allocator, .{ .generic = value });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  761","line":"                    } else {"},
{"lineNum":"  762","line":"                        var stack_machine: Self = .{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  763","line":"                        defer stack_machine.deinit(allocator);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"                        var sub_context = context;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":"                        sub_context.entry_value_context = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":"                        const result = try stack_machine.run(block, allocator, sub_context, null);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  768","line":"                        try self.stack.append(allocator, result orelse return error.InvalidSubExpression);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  769","line":"                    }"},
{"lineNum":"  770","line":"                },"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"                // These have already been handled by readOperand"},
{"lineNum":"  773","line":"                OP.lo_user...OP.hi_user => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"                else => {"},
{"lineNum":"  775","line":"                    //std.debug.print(\"Unknown DWARF expression opcode: {x}\\n\", .{opcode});"},
{"lineNum":"  776","line":"                    return error.UnknownExpressionOpcode;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  777","line":"                },"},
{"lineNum":"  778","line":"            }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"            return stream.pos < stream.buffer.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  781","line":"        }"},
{"lineNum":"  782","line":"    };"},
{"lineNum":"  783","line":"}"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"pub fn Builder(comptime options: ExpressionOptions) type {"},
{"lineNum":"  786","line":"    const addr_type = switch (options.addr_size) {"},
{"lineNum":"  787","line":"        2 => u16,"},
{"lineNum":"  788","line":"        4 => u32,"},
{"lineNum":"  789","line":"        8 => u64,"},
{"lineNum":"  790","line":"        else => @compileError(\"Unsupported address size of \" ++ options.addr_size),"},
{"lineNum":"  791","line":"    };"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"    return struct {"},
{"lineNum":"  794","line":"        /// Zero-operand instructions"},
{"lineNum":"  795","line":"        pub fn writeOpcode(writer: anytype, comptime opcode: u8) !void {"},
{"lineNum":"  796","line":"            if (options.call_frame_context and !comptime isOpcodeValidInCFA(opcode)) return error.InvalidCFAOpcode;"},
{"lineNum":"  797","line":"            switch (opcode) {"},
{"lineNum":"  798","line":"                OP.dup,"},
{"lineNum":"  799","line":"                OP.drop,"},
{"lineNum":"  800","line":"                OP.over,"},
{"lineNum":"  801","line":"                OP.swap,"},
{"lineNum":"  802","line":"                OP.rot,"},
{"lineNum":"  803","line":"                OP.deref,"},
{"lineNum":"  804","line":"                OP.xderef,"},
{"lineNum":"  805","line":"                OP.push_object_address,"},
{"lineNum":"  806","line":"                OP.form_tls_address,"},
{"lineNum":"  807","line":"                OP.call_frame_cfa,"},
{"lineNum":"  808","line":"                OP.abs,"},
{"lineNum":"  809","line":"                OP.@\"and\","},
{"lineNum":"  810","line":"                OP.div,"},
{"lineNum":"  811","line":"                OP.minus,"},
{"lineNum":"  812","line":"                OP.mod,"},
{"lineNum":"  813","line":"                OP.mul,"},
{"lineNum":"  814","line":"                OP.neg,"},
{"lineNum":"  815","line":"                OP.not,"},
{"lineNum":"  816","line":"                OP.@\"or\","},
{"lineNum":"  817","line":"                OP.plus,"},
{"lineNum":"  818","line":"                OP.shl,"},
{"lineNum":"  819","line":"                OP.shr,"},
{"lineNum":"  820","line":"                OP.shra,"},
{"lineNum":"  821","line":"                OP.xor,"},
{"lineNum":"  822","line":"                OP.le,"},
{"lineNum":"  823","line":"                OP.ge,"},
{"lineNum":"  824","line":"                OP.eq,"},
{"lineNum":"  825","line":"                OP.lt,"},
{"lineNum":"  826","line":"                OP.gt,"},
{"lineNum":"  827","line":"                OP.ne,"},
{"lineNum":"  828","line":"                OP.nop,"},
{"lineNum":"  829","line":"                OP.stack_value,"},
{"lineNum":"  830","line":"                => try writer.writeByte(opcode),"},
{"lineNum":"  831","line":"                else => @compileError(\"This opcode requires operands, use `write<Opcode>()` instead\"),"},
{"lineNum":"  832","line":"            }"},
{"lineNum":"  833","line":"        }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"        // 2.5.1.1: Literal Encodings"},
{"lineNum":"  836","line":"        pub fn writeLiteral(writer: anytype, literal: u8) !void {"},
{"lineNum":"  837","line":"            switch (literal) {"},
{"lineNum":"  838","line":"                0...31 => |n| try writer.writeByte(n + OP.lit0),"},
{"lineNum":"  839","line":"                else => return error.InvalidLiteral,"},
{"lineNum":"  840","line":"            }"},
{"lineNum":"  841","line":"        }"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"        pub fn writeConst(writer: anytype, comptime T: type, value: T) !void {"},
{"lineNum":"  844","line":"            if (@typeInfo(T) != .Int) @compileError(\"Constants must be integers\");"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"            switch (T) {"},
{"lineNum":"  847","line":"                u8, i8, u16, i16, u32, i32, u64, i64 => {"},
{"lineNum":"  848","line":"                    try writer.writeByte(switch (T) {"},
{"lineNum":"  849","line":"                        u8 => OP.const1u,"},
{"lineNum":"  850","line":"                        i8 => OP.const1s,"},
{"lineNum":"  851","line":"                        u16 => OP.const2u,"},
{"lineNum":"  852","line":"                        i16 => OP.const2s,"},
{"lineNum":"  853","line":"                        u32 => OP.const4u,"},
{"lineNum":"  854","line":"                        i32 => OP.const4s,"},
{"lineNum":"  855","line":"                        u64 => OP.const8u,"},
{"lineNum":"  856","line":"                        i64 => OP.const8s,"},
{"lineNum":"  857","line":"                        else => unreachable,"},
{"lineNum":"  858","line":"                    });"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"                    try writer.writeInt(T, value, options.endian);"},
{"lineNum":"  861","line":"                },"},
{"lineNum":"  862","line":"                else => switch (@typeInfo(T).Int.signedness) {"},
{"lineNum":"  863","line":"                    .unsigned => {"},
{"lineNum":"  864","line":"                        try writer.writeByte(OP.constu);"},
{"lineNum":"  865","line":"                        try leb.writeULEB128(writer, value);"},
{"lineNum":"  866","line":"                    },"},
{"lineNum":"  867","line":"                    .signed => {"},
{"lineNum":"  868","line":"                        try writer.writeByte(OP.consts);"},
{"lineNum":"  869","line":"                        try leb.writeILEB128(writer, value);"},
{"lineNum":"  870","line":"                    },"},
{"lineNum":"  871","line":"                },"},
{"lineNum":"  872","line":"            }"},
{"lineNum":"  873","line":"        }"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"        pub fn writeConstx(writer: anytype, debug_addr_offset: anytype) !void {"},
{"lineNum":"  876","line":"            try writer.writeByte(OP.constx);"},
{"lineNum":"  877","line":"            try leb.writeULEB128(writer, debug_addr_offset);"},
{"lineNum":"  878","line":"        }"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"        pub fn writeConstType(writer: anytype, die_offset: anytype, value_bytes: []const u8) !void {"},
{"lineNum":"  881","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  882","line":"            if (value_bytes.len > 0xff) return error.InvalidTypeLength;"},
{"lineNum":"  883","line":"            try writer.writeByte(OP.const_type);"},
{"lineNum":"  884","line":"            try leb.writeULEB128(writer, die_offset);"},
{"lineNum":"  885","line":"            try writer.writeByte(@intCast(value_bytes.len));"},
{"lineNum":"  886","line":"            try writer.writeAll(value_bytes);"},
{"lineNum":"  887","line":"        }"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"        pub fn writeAddr(writer: anytype, value: addr_type) !void {"},
{"lineNum":"  890","line":"            try writer.writeByte(OP.addr);"},
{"lineNum":"  891","line":"            try writer.writeInt(addr_type, value, options.endian);"},
{"lineNum":"  892","line":"        }"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"        pub fn writeAddrx(writer: anytype, debug_addr_offset: anytype) !void {"},
{"lineNum":"  895","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  896","line":"            try writer.writeByte(OP.addrx);"},
{"lineNum":"  897","line":"            try leb.writeULEB128(writer, debug_addr_offset);"},
{"lineNum":"  898","line":"        }"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"        // 2.5.1.2: Register Values"},
{"lineNum":"  901","line":"        pub fn writeFbreg(writer: anytype, offset: anytype) !void {"},
{"lineNum":"  902","line":"            try writer.writeByte(OP.fbreg);"},
{"lineNum":"  903","line":"            try leb.writeILEB128(writer, offset);"},
{"lineNum":"  904","line":"        }"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"        pub fn writeBreg(writer: anytype, register: u8, offset: anytype) !void {"},
{"lineNum":"  907","line":"            if (register > 31) return error.InvalidRegister;"},
{"lineNum":"  908","line":"            try writer.writeByte(OP.breg0 + register);"},
{"lineNum":"  909","line":"            try leb.writeILEB128(writer, offset);"},
{"lineNum":"  910","line":"        }"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"        pub fn writeBregx(writer: anytype, register: anytype, offset: anytype) !void {"},
{"lineNum":"  913","line":"            try writer.writeByte(OP.bregx);"},
{"lineNum":"  914","line":"            try leb.writeULEB128(writer, register);"},
{"lineNum":"  915","line":"            try leb.writeILEB128(writer, offset);"},
{"lineNum":"  916","line":"        }"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"        pub fn writeRegvalType(writer: anytype, register: anytype, offset: anytype) !void {"},
{"lineNum":"  919","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  920","line":"            try writer.writeByte(OP.regval_type);"},
{"lineNum":"  921","line":"            try leb.writeULEB128(writer, register);"},
{"lineNum":"  922","line":"            try leb.writeULEB128(writer, offset);"},
{"lineNum":"  923","line":"        }"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"        // 2.5.1.3: Stack Operations"},
{"lineNum":"  926","line":"        pub fn writePick(writer: anytype, index: u8) !void {"},
{"lineNum":"  927","line":"            try writer.writeByte(OP.pick);"},
{"lineNum":"  928","line":"            try writer.writeByte(index);"},
{"lineNum":"  929","line":"        }"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"        pub fn writeDerefSize(writer: anytype, size: u8) !void {"},
{"lineNum":"  932","line":"            try writer.writeByte(OP.deref_size);"},
{"lineNum":"  933","line":"            try writer.writeByte(size);"},
{"lineNum":"  934","line":"        }"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"        pub fn writeXDerefSize(writer: anytype, size: u8) !void {"},
{"lineNum":"  937","line":"            try writer.writeByte(OP.xderef_size);"},
{"lineNum":"  938","line":"            try writer.writeByte(size);"},
{"lineNum":"  939","line":"        }"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"        pub fn writeDerefType(writer: anytype, size: u8, die_offset: anytype) !void {"},
{"lineNum":"  942","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  943","line":"            try writer.writeByte(OP.deref_type);"},
{"lineNum":"  944","line":"            try writer.writeByte(size);"},
{"lineNum":"  945","line":"            try leb.writeULEB128(writer, die_offset);"},
{"lineNum":"  946","line":"        }"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"        pub fn writeXDerefType(writer: anytype, size: u8, die_offset: anytype) !void {"},
{"lineNum":"  949","line":"            try writer.writeByte(OP.xderef_type);"},
{"lineNum":"  950","line":"            try writer.writeByte(size);"},
{"lineNum":"  951","line":"            try leb.writeULEB128(writer, die_offset);"},
{"lineNum":"  952","line":"        }"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"        // 2.5.1.4: Arithmetic and Logical Operations"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"        pub fn writePlusUconst(writer: anytype, uint_value: anytype) !void {"},
{"lineNum":"  957","line":"            try writer.writeByte(OP.plus_uconst);"},
{"lineNum":"  958","line":"            try leb.writeULEB128(writer, uint_value);"},
{"lineNum":"  959","line":"        }"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"        // 2.5.1.5: Control Flow Operations"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"        pub fn writeSkip(writer: anytype, offset: i16) !void {"},
{"lineNum":"  964","line":"            try writer.writeByte(OP.skip);"},
{"lineNum":"  965","line":"            try writer.writeInt(i16, offset, options.endian);"},
{"lineNum":"  966","line":"        }"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"        pub fn writeBra(writer: anytype, offset: i16) !void {"},
{"lineNum":"  969","line":"            try writer.writeByte(OP.bra);"},
{"lineNum":"  970","line":"            try writer.writeInt(i16, offset, options.endian);"},
{"lineNum":"  971","line":"        }"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"        pub fn writeCall(writer: anytype, comptime T: type, offset: T) !void {"},
{"lineNum":"  974","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  975","line":"            switch (T) {"},
{"lineNum":"  976","line":"                u16 => try writer.writeByte(OP.call2),"},
{"lineNum":"  977","line":"                u32 => try writer.writeByte(OP.call4),"},
{"lineNum":"  978","line":"                else => @compileError(\"Call operand must be a 2 or 4 byte offset\"),"},
{"lineNum":"  979","line":"            }"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"            try writer.writeInt(T, offset, options.endian);"},
{"lineNum":"  982","line":"        }"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"        pub fn writeCallRef(writer: anytype, comptime is_64: bool, value: if (is_64) u64 else u32) !void {"},
{"lineNum":"  985","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  986","line":"            try writer.writeByte(OP.call_ref);"},
{"lineNum":"  987","line":"            try writer.writeInt(if (is_64) u64 else u32, value, options.endian);"},
{"lineNum":"  988","line":"        }"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"        pub fn writeConvert(writer: anytype, die_offset: anytype) !void {"},
{"lineNum":"  991","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  992","line":"            try writer.writeByte(OP.convert);"},
{"lineNum":"  993","line":"            try leb.writeULEB128(writer, die_offset);"},
{"lineNum":"  994","line":"        }"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"        pub fn writeReinterpret(writer: anytype, die_offset: anytype) !void {"},
{"lineNum":"  997","line":"            if (options.call_frame_context) return error.InvalidCFAOpcode;"},
{"lineNum":"  998","line":"            try writer.writeByte(OP.reinterpret);"},
{"lineNum":"  999","line":"            try leb.writeULEB128(writer, die_offset);"},
{"lineNum":" 1000","line":"        }"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"        // 2.5.1.7: Special Operations"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"        pub fn writeEntryValue(writer: anytype, expression: []const u8) !void {"},
{"lineNum":" 1005","line":"            try writer.writeByte(OP.entry_value);"},
{"lineNum":" 1006","line":"            try leb.writeULEB128(writer, expression.len);"},
{"lineNum":" 1007","line":"            try writer.writeAll(expression);"},
{"lineNum":" 1008","line":"        }"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"        // 2.6: Location Descriptions"},
{"lineNum":" 1011","line":"        pub fn writeReg(writer: anytype, register: u8) !void {"},
{"lineNum":" 1012","line":"            try writer.writeByte(OP.reg0 + register);"},
{"lineNum":" 1013","line":"        }"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"        pub fn writeRegx(writer: anytype, register: anytype) !void {"},
{"lineNum":" 1016","line":"            try writer.writeByte(OP.regx);"},
{"lineNum":" 1017","line":"            try leb.writeULEB128(writer, register);"},
{"lineNum":" 1018","line":"        }"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"        pub fn writeImplicitValue(writer: anytype, value_bytes: []const u8) !void {"},
{"lineNum":" 1021","line":"            try writer.writeByte(OP.implicit_value);"},
{"lineNum":" 1022","line":"            try leb.writeULEB128(writer, value_bytes.len);"},
{"lineNum":" 1023","line":"            try writer.writeAll(value_bytes);"},
{"lineNum":" 1024","line":"        }"},
{"lineNum":" 1025","line":"    };"},
{"lineNum":" 1026","line":"}"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"// Certain opcodes are not allowed in a CFA context, see 6.4.2"},
{"lineNum":" 1029","line":"fn isOpcodeValidInCFA(opcode: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1030","line":"    return switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1031","line":"        OP.addrx,"},
{"lineNum":" 1032","line":"        OP.call2,"},
{"lineNum":" 1033","line":"        OP.call4,"},
{"lineNum":" 1034","line":"        OP.call_ref,"},
{"lineNum":" 1035","line":"        OP.const_type,"},
{"lineNum":" 1036","line":"        OP.constx,"},
{"lineNum":" 1037","line":"        OP.convert,"},
{"lineNum":" 1038","line":"        OP.deref_type,"},
{"lineNum":" 1039","line":"        OP.regval_type,"},
{"lineNum":" 1040","line":"        OP.reinterpret,"},
{"lineNum":" 1041","line":"        OP.push_object_address,"},
{"lineNum":" 1042","line":"        OP.call_frame_cfa,"},
{"lineNum":" 1043","line":"        => false,"},
{"lineNum":" 1044","line":"        else => true,"},
{"lineNum":" 1045","line":"    };"},
{"lineNum":" 1046","line":"}"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"fn isOpcodeRegisterLocation(opcode: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1049","line":"    return switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1050","line":"        OP.reg0...OP.reg31, OP.regx => true,"},
{"lineNum":" 1051","line":"        else => false,"},
{"lineNum":" 1052","line":"    };"},
{"lineNum":" 1053","line":"}"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"const testing = std.testing;"},
{"lineNum":" 1056","line":"test \"DWARF expressions\" {"},
{"lineNum":" 1057","line":"    const allocator = std.testing.allocator;"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"    const options = ExpressionOptions{};"},
{"lineNum":" 1060","line":"    var stack_machine = StackMachine(options){};"},
{"lineNum":" 1061","line":"    defer stack_machine.deinit(allocator);"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"    const b = Builder(options);"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"    var program = std.ArrayList(u8).init(allocator);"},
{"lineNum":" 1066","line":"    defer program.deinit();"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    const writer = program.writer();"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"    // Literals"},
{"lineNum":" 1071","line":"    {"},
{"lineNum":" 1072","line":"        const context = ExpressionContext{};"},
{"lineNum":" 1073","line":"        for (0..32) |i| {"},
{"lineNum":" 1074","line":"            try b.writeLiteral(writer, @intCast(i));"},
{"lineNum":" 1075","line":"        }"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"        _ = try stack_machine.run(program.items, allocator, context, 0);"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"        for (0..32) |i| {"},
{"lineNum":" 1080","line":"            const expected = 31 - i;"},
{"lineNum":" 1081","line":"            try testing.expectEqual(expected, stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1082","line":"        }"},
{"lineNum":" 1083","line":"    }"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"    // Constants"},
{"lineNum":" 1086","line":"    {"},
{"lineNum":" 1087","line":"        stack_machine.reset();"},
{"lineNum":" 1088","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"        const input = [_]comptime_int{"},
{"lineNum":" 1091","line":"            1,"},
{"lineNum":" 1092","line":"            -1,"},
{"lineNum":" 1093","line":"            @as(usize, @truncate(0x0fff)),"},
{"lineNum":" 1094","line":"            @as(isize, @truncate(-0x0fff)),"},
{"lineNum":" 1095","line":"            @as(usize, @truncate(0x0fffffff)),"},
{"lineNum":" 1096","line":"            @as(isize, @truncate(-0x0fffffff)),"},
{"lineNum":" 1097","line":"            @as(usize, @truncate(0x0fffffffffffffff)),"},
{"lineNum":" 1098","line":"            @as(isize, @truncate(-0x0fffffffffffffff)),"},
{"lineNum":" 1099","line":"            @as(usize, @truncate(0x8000000)),"},
{"lineNum":" 1100","line":"            @as(isize, @truncate(-0x8000000)),"},
{"lineNum":" 1101","line":"            @as(usize, @truncate(0x12345678_12345678)),"},
{"lineNum":" 1102","line":"            @as(usize, @truncate(0xffffffff_ffffffff)),"},
{"lineNum":" 1103","line":"            @as(usize, @truncate(0xeeeeeeee_eeeeeeee)),"},
{"lineNum":" 1104","line":"        };"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"        try b.writeConst(writer, u8, input[0]);"},
{"lineNum":" 1107","line":"        try b.writeConst(writer, i8, input[1]);"},
{"lineNum":" 1108","line":"        try b.writeConst(writer, u16, input[2]);"},
{"lineNum":" 1109","line":"        try b.writeConst(writer, i16, input[3]);"},
{"lineNum":" 1110","line":"        try b.writeConst(writer, u32, input[4]);"},
{"lineNum":" 1111","line":"        try b.writeConst(writer, i32, input[5]);"},
{"lineNum":" 1112","line":"        try b.writeConst(writer, u64, input[6]);"},
{"lineNum":" 1113","line":"        try b.writeConst(writer, i64, input[7]);"},
{"lineNum":" 1114","line":"        try b.writeConst(writer, u28, input[8]);"},
{"lineNum":" 1115","line":"        try b.writeConst(writer, i28, input[9]);"},
{"lineNum":" 1116","line":"        try b.writeAddr(writer, input[10]);"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"        var mock_compile_unit: dwarf.CompileUnit = undefined;"},
{"lineNum":" 1119","line":"        mock_compile_unit.addr_base = 1;"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"        var mock_debug_addr = std.ArrayList(u8).init(allocator);"},
{"lineNum":" 1122","line":"        defer mock_debug_addr.deinit();"},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"        try mock_debug_addr.writer().writeIntNative(u16, 0);"},
{"lineNum":" 1125","line":"        try mock_debug_addr.writer().writeIntNative(usize, input[11]);"},
{"lineNum":" 1126","line":"        try mock_debug_addr.writer().writeIntNative(usize, input[12]);"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        const context = ExpressionContext{"},
{"lineNum":" 1129","line":"            .compile_unit = &mock_compile_unit,"},
{"lineNum":" 1130","line":"            .debug_addr = mock_debug_addr.items,"},
{"lineNum":" 1131","line":"        };"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"        try b.writeConstx(writer, @as(usize, 1));"},
{"lineNum":" 1134","line":"        try b.writeAddrx(writer, @as(usize, 1 + @sizeOf(usize)));"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"        const die_offset: usize = @truncate(0xaabbccdd);"},
{"lineNum":" 1137","line":"        const type_bytes: []const u8 = &.{ 1, 2, 3, 4 };"},
{"lineNum":" 1138","line":"        try b.writeConstType(writer, die_offset, type_bytes);"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"        _ = try stack_machine.run(program.items, allocator, context, 0);"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"        const const_type = stack_machine.stack.popOrNull().?.const_type;"},
{"lineNum":" 1143","line":"        try testing.expectEqual(die_offset, const_type.type_offset);"},
{"lineNum":" 1144","line":"        try testing.expectEqualSlices(u8, type_bytes, const_type.value_bytes);"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"        const expected = .{"},
{"lineNum":" 1147","line":"            .{ usize, input[12], usize },"},
{"lineNum":" 1148","line":"            .{ usize, input[11], usize },"},
{"lineNum":" 1149","line":"            .{ usize, input[10], usize },"},
{"lineNum":" 1150","line":"            .{ isize, input[9], isize },"},
{"lineNum":" 1151","line":"            .{ usize, input[8], usize },"},
{"lineNum":" 1152","line":"            .{ isize, input[7], isize },"},
{"lineNum":" 1153","line":"            .{ usize, input[6], usize },"},
{"lineNum":" 1154","line":"            .{ isize, input[5], isize },"},
{"lineNum":" 1155","line":"            .{ usize, input[4], usize },"},
{"lineNum":" 1156","line":"            .{ isize, input[3], isize },"},
{"lineNum":" 1157","line":"            .{ usize, input[2], usize },"},
{"lineNum":" 1158","line":"            .{ isize, input[1], isize },"},
{"lineNum":" 1159","line":"            .{ usize, input[0], usize },"},
{"lineNum":" 1160","line":"        };"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"        inline for (expected) |e| {"},
{"lineNum":" 1163","line":"            try testing.expectEqual(@as(e[0], e[1]), @as(e[2], @bitCast(stack_machine.stack.popOrNull().?.generic)));"},
{"lineNum":" 1164","line":"        }"},
{"lineNum":" 1165","line":"    }"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"    // Register values"},
{"lineNum":" 1168","line":"    if (@sizeOf(std.debug.ThreadContext) != 0) {"},
{"lineNum":" 1169","line":"        stack_machine.reset();"},
{"lineNum":" 1170","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"        const reg_context = abi.RegisterContext{"},
{"lineNum":" 1173","line":"            .eh_frame = true,"},
{"lineNum":" 1174","line":"            .is_macho = builtin.os.tag == .macos,"},
{"lineNum":" 1175","line":"        };"},
{"lineNum":" 1176","line":"        var thread_context: std.debug.ThreadContext = undefined;"},
{"lineNum":" 1177","line":"        std.debug.relocateContext(&thread_context);"},
{"lineNum":" 1178","line":"        const context = ExpressionContext{"},
{"lineNum":" 1179","line":"            .thread_context = &thread_context,"},
{"lineNum":" 1180","line":"            .reg_context = reg_context,"},
{"lineNum":" 1181","line":"        };"},
{"lineNum":" 1182","line":""},
{"lineNum":" 1183","line":"        // Only test register operations on arch / os that have them implemented"},
{"lineNum":" 1184","line":"        if (abi.regBytes(&thread_context, 0, reg_context)) |reg_bytes| {"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"            // TODO: Test fbreg (once implemented): mock a DIE and point compile_unit.frame_base at it"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"            mem.writeIntSliceNative(usize, reg_bytes, 0xee);"},
{"lineNum":" 1189","line":"            (try abi.regValueNative(usize, &thread_context, abi.fpRegNum(reg_context), reg_context)).* = 1;"},
{"lineNum":" 1190","line":"            (try abi.regValueNative(usize, &thread_context, abi.spRegNum(reg_context), reg_context)).* = 2;"},
{"lineNum":" 1191","line":"            (try abi.regValueNative(usize, &thread_context, abi.ipRegNum(), reg_context)).* = 3;"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"            try b.writeBreg(writer, abi.fpRegNum(reg_context), @as(usize, 100));"},
{"lineNum":" 1194","line":"            try b.writeBreg(writer, abi.spRegNum(reg_context), @as(usize, 200));"},
{"lineNum":" 1195","line":"            try b.writeBregx(writer, abi.ipRegNum(), @as(usize, 300));"},
{"lineNum":" 1196","line":"            try b.writeRegvalType(writer, @as(u8, 0), @as(usize, 400));"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"            _ = try stack_machine.run(program.items, allocator, context, 0);"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"            const regval_type = stack_machine.stack.popOrNull().?.regval_type;"},
{"lineNum":" 1201","line":"            try testing.expectEqual(@as(usize, 400), regval_type.type_offset);"},
{"lineNum":" 1202","line":"            try testing.expectEqual(@as(u8, @sizeOf(usize)), regval_type.type_size);"},
{"lineNum":" 1203","line":"            try testing.expectEqual(@as(usize, 0xee), regval_type.value);"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"            try testing.expectEqual(@as(usize, 303), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1206","line":"            try testing.expectEqual(@as(usize, 202), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1207","line":"            try testing.expectEqual(@as(usize, 101), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1208","line":"        } else |err| {"},
{"lineNum":" 1209","line":"            switch (err) {"},
{"lineNum":" 1210","line":"                error.UnimplementedArch,"},
{"lineNum":" 1211","line":"                error.UnimplementedOs,"},
{"lineNum":" 1212","line":"                error.ThreadContextNotSupported,"},
{"lineNum":" 1213","line":"                => {},"},
{"lineNum":" 1214","line":"                else => return err,"},
{"lineNum":" 1215","line":"            }"},
{"lineNum":" 1216","line":"        }"},
{"lineNum":" 1217","line":"    }"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"    // Stack operations"},
{"lineNum":" 1220","line":"    {"},
{"lineNum":" 1221","line":"        var context = ExpressionContext{};"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"        stack_machine.reset();"},
{"lineNum":" 1224","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1225","line":"        try b.writeConst(writer, u8, 1);"},
{"lineNum":" 1226","line":"        try b.writeOpcode(writer, OP.dup);"},
{"lineNum":" 1227","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1228","line":"        try testing.expectEqual(@as(usize, 1), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1229","line":"        try testing.expectEqual(@as(usize, 1), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"        stack_machine.reset();"},
{"lineNum":" 1232","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1233","line":"        try b.writeConst(writer, u8, 1);"},
{"lineNum":" 1234","line":"        try b.writeOpcode(writer, OP.drop);"},
{"lineNum":" 1235","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1236","line":"        try testing.expect(stack_machine.stack.popOrNull() == null);"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"        stack_machine.reset();"},
{"lineNum":" 1239","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1240","line":"        try b.writeConst(writer, u8, 4);"},
{"lineNum":" 1241","line":"        try b.writeConst(writer, u8, 5);"},
{"lineNum":" 1242","line":"        try b.writeConst(writer, u8, 6);"},
{"lineNum":" 1243","line":"        try b.writePick(writer, 2);"},
{"lineNum":" 1244","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1245","line":"        try testing.expectEqual(@as(usize, 4), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"        stack_machine.reset();"},
{"lineNum":" 1248","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1249","line":"        try b.writeConst(writer, u8, 4);"},
{"lineNum":" 1250","line":"        try b.writeConst(writer, u8, 5);"},
{"lineNum":" 1251","line":"        try b.writeConst(writer, u8, 6);"},
{"lineNum":" 1252","line":"        try b.writeOpcode(writer, OP.over);"},
{"lineNum":" 1253","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1254","line":"        try testing.expectEqual(@as(usize, 5), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"        stack_machine.reset();"},
{"lineNum":" 1257","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1258","line":"        try b.writeConst(writer, u8, 5);"},
{"lineNum":" 1259","line":"        try b.writeConst(writer, u8, 6);"},
{"lineNum":" 1260","line":"        try b.writeOpcode(writer, OP.swap);"},
{"lineNum":" 1261","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1262","line":"        try testing.expectEqual(@as(usize, 5), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1263","line":"        try testing.expectEqual(@as(usize, 6), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"        stack_machine.reset();"},
{"lineNum":" 1266","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1267","line":"        try b.writeConst(writer, u8, 4);"},
{"lineNum":" 1268","line":"        try b.writeConst(writer, u8, 5);"},
{"lineNum":" 1269","line":"        try b.writeConst(writer, u8, 6);"},
{"lineNum":" 1270","line":"        try b.writeOpcode(writer, OP.rot);"},
{"lineNum":" 1271","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1272","line":"        try testing.expectEqual(@as(usize, 5), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1273","line":"        try testing.expectEqual(@as(usize, 4), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1274","line":"        try testing.expectEqual(@as(usize, 6), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"        const deref_target: usize = @truncate(0xffeeffee_ffeeffee);"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"        stack_machine.reset();"},
{"lineNum":" 1279","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1280","line":"        try b.writeAddr(writer, @intFromPtr(&deref_target));"},
{"lineNum":" 1281","line":"        try b.writeOpcode(writer, OP.deref);"},
{"lineNum":" 1282","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1283","line":"        try testing.expectEqual(deref_target, stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":"        stack_machine.reset();"},
{"lineNum":" 1286","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1287","line":"        try b.writeLiteral(writer, 0);"},
{"lineNum":" 1288","line":"        try b.writeAddr(writer, @intFromPtr(&deref_target));"},
{"lineNum":" 1289","line":"        try b.writeOpcode(writer, OP.xderef);"},
{"lineNum":" 1290","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1291","line":"        try testing.expectEqual(deref_target, stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"        stack_machine.reset();"},
{"lineNum":" 1294","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1295","line":"        try b.writeAddr(writer, @intFromPtr(&deref_target));"},
{"lineNum":" 1296","line":"        try b.writeDerefSize(writer, 1);"},
{"lineNum":" 1297","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1298","line":"        try testing.expectEqual(@as(usize, @as(*const u8, @ptrCast(&deref_target)).*), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"        stack_machine.reset();"},
{"lineNum":" 1301","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1302","line":"        try b.writeLiteral(writer, 0);"},
{"lineNum":" 1303","line":"        try b.writeAddr(writer, @intFromPtr(&deref_target));"},
{"lineNum":" 1304","line":"        try b.writeXDerefSize(writer, 1);"},
{"lineNum":" 1305","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1306","line":"        try testing.expectEqual(@as(usize, @as(*const u8, @ptrCast(&deref_target)).*), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"        const type_offset: usize = @truncate(0xaabbaabb_aabbaabb);"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"        stack_machine.reset();"},
{"lineNum":" 1311","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1312","line":"        try b.writeAddr(writer, @intFromPtr(&deref_target));"},
{"lineNum":" 1313","line":"        try b.writeDerefType(writer, 1, type_offset);"},
{"lineNum":" 1314","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1315","line":"        const deref_type = stack_machine.stack.popOrNull().?.regval_type;"},
{"lineNum":" 1316","line":"        try testing.expectEqual(type_offset, deref_type.type_offset);"},
{"lineNum":" 1317","line":"        try testing.expectEqual(@as(u8, 1), deref_type.type_size);"},
{"lineNum":" 1318","line":"        try testing.expectEqual(@as(usize, @as(*const u8, @ptrCast(&deref_target)).*), deref_type.value);"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"        stack_machine.reset();"},
{"lineNum":" 1321","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1322","line":"        try b.writeLiteral(writer, 0);"},
{"lineNum":" 1323","line":"        try b.writeAddr(writer, @intFromPtr(&deref_target));"},
{"lineNum":" 1324","line":"        try b.writeXDerefType(writer, 1, type_offset);"},
{"lineNum":" 1325","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1326","line":"        const xderef_type = stack_machine.stack.popOrNull().?.regval_type;"},
{"lineNum":" 1327","line":"        try testing.expectEqual(type_offset, xderef_type.type_offset);"},
{"lineNum":" 1328","line":"        try testing.expectEqual(@as(u8, 1), xderef_type.type_size);"},
{"lineNum":" 1329","line":"        try testing.expectEqual(@as(usize, @as(*const u8, @ptrCast(&deref_target)).*), xderef_type.value);"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"        context.object_address = &deref_target;"},
{"lineNum":" 1332","line":""},
{"lineNum":" 1333","line":"        stack_machine.reset();"},
{"lineNum":" 1334","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1335","line":"        try b.writeOpcode(writer, OP.push_object_address);"},
{"lineNum":" 1336","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1337","line":"        try testing.expectEqual(@as(usize, @intFromPtr(context.object_address.?)), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1338","line":""},
{"lineNum":" 1339","line":"        // TODO: Test OP.form_tls_address"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"        context.cfa = @truncate(0xccddccdd_ccddccdd);"},
{"lineNum":" 1342","line":""},
{"lineNum":" 1343","line":"        stack_machine.reset();"},
{"lineNum":" 1344","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1345","line":"        try b.writeOpcode(writer, OP.call_frame_cfa);"},
{"lineNum":" 1346","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1347","line":"        try testing.expectEqual(context.cfa.?, stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1348","line":"    }"},
{"lineNum":" 1349","line":""},
{"lineNum":" 1350","line":"    // Arithmetic and Logical Operations"},
{"lineNum":" 1351","line":"    {"},
{"lineNum":" 1352","line":"        var context = ExpressionContext{};"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"        stack_machine.reset();"},
{"lineNum":" 1355","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1356","line":"        try b.writeConst(writer, i16, -4096);"},
{"lineNum":" 1357","line":"        try b.writeOpcode(writer, OP.abs);"},
{"lineNum":" 1358","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1359","line":"        try testing.expectEqual(@as(usize, 4096), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"        stack_machine.reset();"},
{"lineNum":" 1362","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1363","line":"        try b.writeConst(writer, u16, 0xff0f);"},
{"lineNum":" 1364","line":"        try b.writeConst(writer, u16, 0xf0ff);"},
{"lineNum":" 1365","line":"        try b.writeOpcode(writer, OP.@\"and\");"},
{"lineNum":" 1366","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1367","line":"        try testing.expectEqual(@as(usize, 0xf00f), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"        stack_machine.reset();"},
{"lineNum":" 1370","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1371","line":"        try b.writeConst(writer, i16, -404);"},
{"lineNum":" 1372","line":"        try b.writeConst(writer, i16, 100);"},
{"lineNum":" 1373","line":"        try b.writeOpcode(writer, OP.div);"},
{"lineNum":" 1374","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1375","line":"        try testing.expectEqual(@as(isize, -404 / 100), @as(isize, @bitCast(stack_machine.stack.popOrNull().?.generic)));"},
{"lineNum":" 1376","line":""},
{"lineNum":" 1377","line":"        stack_machine.reset();"},
{"lineNum":" 1378","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1379","line":"        try b.writeConst(writer, u16, 200);"},
{"lineNum":" 1380","line":"        try b.writeConst(writer, u16, 50);"},
{"lineNum":" 1381","line":"        try b.writeOpcode(writer, OP.minus);"},
{"lineNum":" 1382","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1383","line":"        try testing.expectEqual(@as(usize, 150), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"        stack_machine.reset();"},
{"lineNum":" 1386","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1387","line":"        try b.writeConst(writer, u16, 123);"},
{"lineNum":" 1388","line":"        try b.writeConst(writer, u16, 100);"},
{"lineNum":" 1389","line":"        try b.writeOpcode(writer, OP.mod);"},
{"lineNum":" 1390","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1391","line":"        try testing.expectEqual(@as(usize, 23), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"        stack_machine.reset();"},
{"lineNum":" 1394","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1395","line":"        try b.writeConst(writer, u16, 0xff);"},
{"lineNum":" 1396","line":"        try b.writeConst(writer, u16, 0xee);"},
{"lineNum":" 1397","line":"        try b.writeOpcode(writer, OP.mul);"},
{"lineNum":" 1398","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1399","line":"        try testing.expectEqual(@as(usize, 0xed12), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"        stack_machine.reset();"},
{"lineNum":" 1402","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1403","line":"        try b.writeConst(writer, u16, 5);"},
{"lineNum":" 1404","line":"        try b.writeOpcode(writer, OP.neg);"},
{"lineNum":" 1405","line":"        try b.writeConst(writer, i16, -6);"},
{"lineNum":" 1406","line":"        try b.writeOpcode(writer, OP.neg);"},
{"lineNum":" 1407","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1408","line":"        try testing.expectEqual(@as(usize, 6), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1409","line":"        try testing.expectEqual(@as(isize, -5), @as(isize, @bitCast(stack_machine.stack.popOrNull().?.generic)));"},
{"lineNum":" 1410","line":""},
{"lineNum":" 1411","line":"        stack_machine.reset();"},
{"lineNum":" 1412","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1413","line":"        try b.writeConst(writer, u16, 0xff0f);"},
{"lineNum":" 1414","line":"        try b.writeOpcode(writer, OP.not);"},
{"lineNum":" 1415","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1416","line":"        try testing.expectEqual(~@as(usize, 0xff0f), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1417","line":""},
{"lineNum":" 1418","line":"        stack_machine.reset();"},
{"lineNum":" 1419","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1420","line":"        try b.writeConst(writer, u16, 0xff0f);"},
{"lineNum":" 1421","line":"        try b.writeConst(writer, u16, 0xf0ff);"},
{"lineNum":" 1422","line":"        try b.writeOpcode(writer, OP.@\"or\");"},
{"lineNum":" 1423","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1424","line":"        try testing.expectEqual(@as(usize, 0xffff), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"        stack_machine.reset();"},
{"lineNum":" 1427","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1428","line":"        try b.writeConst(writer, i16, 402);"},
{"lineNum":" 1429","line":"        try b.writeConst(writer, i16, 100);"},
{"lineNum":" 1430","line":"        try b.writeOpcode(writer, OP.plus);"},
{"lineNum":" 1431","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1432","line":"        try testing.expectEqual(@as(usize, 502), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"        stack_machine.reset();"},
{"lineNum":" 1435","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1436","line":"        try b.writeConst(writer, u16, 4096);"},
{"lineNum":" 1437","line":"        try b.writePlusUconst(writer, @as(usize, 8192));"},
{"lineNum":" 1438","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1439","line":"        try testing.expectEqual(@as(usize, 4096 + 8192), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"        stack_machine.reset();"},
{"lineNum":" 1442","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1443","line":"        try b.writeConst(writer, u16, 0xfff);"},
{"lineNum":" 1444","line":"        try b.writeConst(writer, u16, 1);"},
{"lineNum":" 1445","line":"        try b.writeOpcode(writer, OP.shl);"},
{"lineNum":" 1446","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1447","line":"        try testing.expectEqual(@as(usize, 0xfff << 1), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"        stack_machine.reset();"},
{"lineNum":" 1450","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1451","line":"        try b.writeConst(writer, u16, 0xfff);"},
{"lineNum":" 1452","line":"        try b.writeConst(writer, u16, 1);"},
{"lineNum":" 1453","line":"        try b.writeOpcode(writer, OP.shr);"},
{"lineNum":" 1454","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1455","line":"        try testing.expectEqual(@as(usize, 0xfff >> 1), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"        stack_machine.reset();"},
{"lineNum":" 1458","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1459","line":"        try b.writeConst(writer, u16, 0xfff);"},
{"lineNum":" 1460","line":"        try b.writeConst(writer, u16, 1);"},
{"lineNum":" 1461","line":"        try b.writeOpcode(writer, OP.shr);"},
{"lineNum":" 1462","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1463","line":"        try testing.expectEqual(@as(usize, @bitCast(@as(isize, 0xfff) >> 1)), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"        stack_machine.reset();"},
{"lineNum":" 1466","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1467","line":"        try b.writeConst(writer, u16, 0xf0ff);"},
{"lineNum":" 1468","line":"        try b.writeConst(writer, u16, 0xff0f);"},
{"lineNum":" 1469","line":"        try b.writeOpcode(writer, OP.xor);"},
{"lineNum":" 1470","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1471","line":"        try testing.expectEqual(@as(usize, 0x0ff0), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1472","line":"    }"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"    // Control Flow Operations"},
{"lineNum":" 1475","line":"    {"},
{"lineNum":" 1476","line":"        var context = ExpressionContext{};"},
{"lineNum":" 1477","line":"        const expected = .{"},
{"lineNum":" 1478","line":"            .{ OP.le, 1, 1, 0 },"},
{"lineNum":" 1479","line":"            .{ OP.ge, 1, 0, 1 },"},
{"lineNum":" 1480","line":"            .{ OP.eq, 1, 0, 0 },"},
{"lineNum":" 1481","line":"            .{ OP.lt, 0, 1, 0 },"},
{"lineNum":" 1482","line":"            .{ OP.gt, 0, 0, 1 },"},
{"lineNum":" 1483","line":"            .{ OP.ne, 0, 1, 1 },"},
{"lineNum":" 1484","line":"        };"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"        inline for (expected) |e| {"},
{"lineNum":" 1487","line":"            stack_machine.reset();"},
{"lineNum":" 1488","line":"            program.clearRetainingCapacity();"},
{"lineNum":" 1489","line":""},
{"lineNum":" 1490","line":"            try b.writeConst(writer, u16, 0);"},
{"lineNum":" 1491","line":"            try b.writeConst(writer, u16, 0);"},
{"lineNum":" 1492","line":"            try b.writeOpcode(writer, e[0]);"},
{"lineNum":" 1493","line":"            try b.writeConst(writer, u16, 0);"},
{"lineNum":" 1494","line":"            try b.writeConst(writer, u16, 1);"},
{"lineNum":" 1495","line":"            try b.writeOpcode(writer, e[0]);"},
{"lineNum":" 1496","line":"            try b.writeConst(writer, u16, 1);"},
{"lineNum":" 1497","line":"            try b.writeConst(writer, u16, 0);"},
{"lineNum":" 1498","line":"            try b.writeOpcode(writer, e[0]);"},
{"lineNum":" 1499","line":"            _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1500","line":"            try testing.expectEqual(@as(usize, e[3]), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1501","line":"            try testing.expectEqual(@as(usize, e[2]), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1502","line":"            try testing.expectEqual(@as(usize, e[1]), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1503","line":"        }"},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"        stack_machine.reset();"},
{"lineNum":" 1506","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1507","line":"        try b.writeLiteral(writer, 2);"},
{"lineNum":" 1508","line":"        try b.writeSkip(writer, 1);"},
{"lineNum":" 1509","line":"        try b.writeLiteral(writer, 3);"},
{"lineNum":" 1510","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1511","line":"        try testing.expectEqual(@as(usize, 2), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"        stack_machine.reset();"},
{"lineNum":" 1514","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1515","line":"        try b.writeLiteral(writer, 2);"},
{"lineNum":" 1516","line":"        try b.writeBra(writer, 1);"},
{"lineNum":" 1517","line":"        try b.writeLiteral(writer, 3);"},
{"lineNum":" 1518","line":"        try b.writeLiteral(writer, 0);"},
{"lineNum":" 1519","line":"        try b.writeBra(writer, 1);"},
{"lineNum":" 1520","line":"        try b.writeLiteral(writer, 4);"},
{"lineNum":" 1521","line":"        try b.writeLiteral(writer, 5);"},
{"lineNum":" 1522","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1523","line":"        try testing.expectEqual(@as(usize, 5), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1524","line":"        try testing.expectEqual(@as(usize, 4), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1525","line":"        try testing.expect(stack_machine.stack.popOrNull() == null);"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"        // TODO: Test call2, call4, call_ref once implemented"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"    }"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"    // Type conversions"},
{"lineNum":" 1532","line":"    {"},
{"lineNum":" 1533","line":"        var context = ExpressionContext{};"},
{"lineNum":" 1534","line":"        stack_machine.reset();"},
{"lineNum":" 1535","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1536","line":""},
{"lineNum":" 1537","line":"        // TODO: Test typed OP.convert once implemented"},
{"lineNum":" 1538","line":""},
{"lineNum":" 1539","line":"        const value: usize = @truncate(0xffeeffee_ffeeffee);"},
{"lineNum":" 1540","line":"        var value_bytes: [options.addr_size]u8 = undefined;"},
{"lineNum":" 1541","line":"        mem.writeIntSliceNative(usize, &value_bytes, value);"},
{"lineNum":" 1542","line":""},
{"lineNum":" 1543","line":"        // Convert to generic type"},
{"lineNum":" 1544","line":"        stack_machine.reset();"},
{"lineNum":" 1545","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1546","line":"        try b.writeConstType(writer, @as(usize, 0), &value_bytes);"},
{"lineNum":" 1547","line":"        try b.writeConvert(writer, @as(usize, 0));"},
{"lineNum":" 1548","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1549","line":"        try testing.expectEqual(value, stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"        // Reinterpret to generic type"},
{"lineNum":" 1552","line":"        stack_machine.reset();"},
{"lineNum":" 1553","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1554","line":"        try b.writeConstType(writer, @as(usize, 0), &value_bytes);"},
{"lineNum":" 1555","line":"        try b.writeReinterpret(writer, @as(usize, 0));"},
{"lineNum":" 1556","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1557","line":"        try testing.expectEqual(value, stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"        // Reinterpret to new type"},
{"lineNum":" 1560","line":"        const die_offset: usize = 0xffee;"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"        stack_machine.reset();"},
{"lineNum":" 1563","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1564","line":"        try b.writeConstType(writer, @as(usize, 0), &value_bytes);"},
{"lineNum":" 1565","line":"        try b.writeReinterpret(writer, die_offset);"},
{"lineNum":" 1566","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1567","line":"        const const_type = stack_machine.stack.popOrNull().?.const_type;"},
{"lineNum":" 1568","line":"        try testing.expectEqual(die_offset, const_type.type_offset);"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"        stack_machine.reset();"},
{"lineNum":" 1571","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1572","line":"        try b.writeLiteral(writer, 0);"},
{"lineNum":" 1573","line":"        try b.writeReinterpret(writer, die_offset);"},
{"lineNum":" 1574","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1575","line":"        const regval_type = stack_machine.stack.popOrNull().?.regval_type;"},
{"lineNum":" 1576","line":"        try testing.expectEqual(die_offset, regval_type.type_offset);"},
{"lineNum":" 1577","line":"    }"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"    // Special operations"},
{"lineNum":" 1580","line":"    {"},
{"lineNum":" 1581","line":"        var context = ExpressionContext{};"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"        stack_machine.reset();"},
{"lineNum":" 1584","line":"        program.clearRetainingCapacity();"},
{"lineNum":" 1585","line":"        try b.writeOpcode(writer, OP.nop);"},
{"lineNum":" 1586","line":"        _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1587","line":"        try testing.expect(stack_machine.stack.popOrNull() == null);"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"        // Sub-expression"},
{"lineNum":" 1590","line":"        {"},
{"lineNum":" 1591","line":"            var sub_program = std.ArrayList(u8).init(allocator);"},
{"lineNum":" 1592","line":"            defer sub_program.deinit();"},
{"lineNum":" 1593","line":"            const sub_writer = sub_program.writer();"},
{"lineNum":" 1594","line":"            try b.writeLiteral(sub_writer, 3);"},
{"lineNum":" 1595","line":""},
{"lineNum":" 1596","line":"            stack_machine.reset();"},
{"lineNum":" 1597","line":"            program.clearRetainingCapacity();"},
{"lineNum":" 1598","line":"            try b.writeEntryValue(writer, sub_program.items);"},
{"lineNum":" 1599","line":"            _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1600","line":"            try testing.expectEqual(@as(usize, 3), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1601","line":"        }"},
{"lineNum":" 1602","line":""},
{"lineNum":" 1603","line":"        // Register location description"},
{"lineNum":" 1604","line":"        const reg_context = abi.RegisterContext{"},
{"lineNum":" 1605","line":"            .eh_frame = true,"},
{"lineNum":" 1606","line":"            .is_macho = builtin.os.tag == .macos,"},
{"lineNum":" 1607","line":"        };"},
{"lineNum":" 1608","line":"        var thread_context: std.debug.ThreadContext = undefined;"},
{"lineNum":" 1609","line":"        std.debug.relocateContext(&thread_context);"},
{"lineNum":" 1610","line":"        context = ExpressionContext{"},
{"lineNum":" 1611","line":"            .thread_context = &thread_context,"},
{"lineNum":" 1612","line":"            .reg_context = reg_context,"},
{"lineNum":" 1613","line":"        };"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"        if (abi.regBytes(&thread_context, 0, reg_context)) |reg_bytes| {"},
{"lineNum":" 1616","line":"            mem.writeIntSliceNative(usize, reg_bytes, 0xee);"},
{"lineNum":" 1617","line":""},
{"lineNum":" 1618","line":"            var sub_program = std.ArrayList(u8).init(allocator);"},
{"lineNum":" 1619","line":"            defer sub_program.deinit();"},
{"lineNum":" 1620","line":"            const sub_writer = sub_program.writer();"},
{"lineNum":" 1621","line":"            try b.writeReg(sub_writer, 0);"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"            stack_machine.reset();"},
{"lineNum":" 1624","line":"            program.clearRetainingCapacity();"},
{"lineNum":" 1625","line":"            try b.writeEntryValue(writer, sub_program.items);"},
{"lineNum":" 1626","line":"            _ = try stack_machine.run(program.items, allocator, context, null);"},
{"lineNum":" 1627","line":"            try testing.expectEqual(@as(usize, 0xee), stack_machine.stack.popOrNull().?.generic);"},
{"lineNum":" 1628","line":"        } else |err| {"},
{"lineNum":" 1629","line":"            switch (err) {"},
{"lineNum":" 1630","line":"                error.UnimplementedArch,"},
{"lineNum":" 1631","line":"                error.UnimplementedOs,"},
{"lineNum":" 1632","line":"                error.ThreadContextNotSupported,"},
{"lineNum":" 1633","line":"                => {},"},
{"lineNum":" 1634","line":"                else => return err,"},
{"lineNum":" 1635","line":"            }"},
{"lineNum":" 1636","line":"        }"},
{"lineNum":" 1637","line":"    }"},
{"lineNum":" 1638","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:48", "instrumented" : 279, "covered" : 0,};
var merged_data = [];
