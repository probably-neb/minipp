var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const debug = std.debug;"},
{"lineNum":"    3","line":"const assert = debug.assert;"},
{"lineNum":"    4","line":"const testing = std.testing;"},
{"lineNum":"    5","line":"const math = std.math;"},
{"lineNum":"    6","line":"const mem = std.mem;"},
{"lineNum":"    7","line":"const meta = std.meta;"},
{"lineNum":"    8","line":"const trait = meta.trait;"},
{"lineNum":"    9","line":"const autoHash = std.hash.autoHash;"},
{"lineNum":"   10","line":"const Wyhash = std.hash.Wyhash;"},
{"lineNum":"   11","line":"const Allocator = mem.Allocator;"},
{"lineNum":"   12","line":"const hash_map = @This();"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"/// An ArrayHashMap with default hash and equal functions."},
{"lineNum":"   15","line":"/// See AutoContext for a description of the hash and equal implementations."},
{"lineNum":"   16","line":"pub fn AutoArrayHashMap(comptime K: type, comptime V: type) type {"},
{"lineNum":"   17","line":"    return ArrayHashMap(K, V, AutoContext(K), !autoEqlIsCheap(K));"},
{"lineNum":"   18","line":"}"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"/// An ArrayHashMapUnmanaged with default hash and equal functions."},
{"lineNum":"   21","line":"/// See AutoContext for a description of the hash and equal implementations."},
{"lineNum":"   22","line":"pub fn AutoArrayHashMapUnmanaged(comptime K: type, comptime V: type) type {"},
{"lineNum":"   23","line":"    return ArrayHashMapUnmanaged(K, V, AutoContext(K), !autoEqlIsCheap(K));"},
{"lineNum":"   24","line":"}"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"/// Builtin hashmap for strings as keys."},
{"lineNum":"   27","line":"pub fn StringArrayHashMap(comptime V: type) type {"},
{"lineNum":"   28","line":"    return ArrayHashMap([]const u8, V, StringContext, true);"},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"pub fn StringArrayHashMapUnmanaged(comptime V: type) type {"},
{"lineNum":"   32","line":"    return ArrayHashMapUnmanaged([]const u8, V, StringContext, true);"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"pub const StringContext = struct {"},
{"lineNum":"   36","line":"    pub fn hash(self: @This(), s: []const u8) u32 {"},
{"lineNum":"   37","line":"        _ = self;"},
{"lineNum":"   38","line":"        return hashString(s);"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":"    pub fn eql(self: @This(), a: []const u8, b: []const u8, b_index: usize) bool {"},
{"lineNum":"   41","line":"        _ = self;"},
{"lineNum":"   42","line":"        _ = b_index;"},
{"lineNum":"   43","line":"        return eqlString(a, b);"},
{"lineNum":"   44","line":"    }"},
{"lineNum":"   45","line":"};"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"pub fn eqlString(a: []const u8, b: []const u8) bool {"},
{"lineNum":"   48","line":"    return mem.eql(u8, a, b);"},
{"lineNum":"   49","line":"}"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"pub fn hashString(s: []const u8) u32 {"},
{"lineNum":"   52","line":"    return @as(u32, @truncate(std.hash.Wyhash.hash(0, s)));"},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"/// Insertion order is preserved."},
{"lineNum":"   56","line":"/// Deletions perform a \"swap removal\" on the entries list."},
{"lineNum":"   57","line":"/// Modifying the hash map while iterating is allowed, however, one must understand"},
{"lineNum":"   58","line":"/// the (well defined) behavior when mixing insertions and deletions with iteration."},
{"lineNum":"   59","line":"/// For a hash map that can be initialized directly that does not store an Allocator"},
{"lineNum":"   60","line":"/// field, see `ArrayHashMapUnmanaged`."},
{"lineNum":"   61","line":"/// When `store_hash` is `false`, this data structure is biased towards cheap `eql`"},
{"lineNum":"   62","line":"/// functions. It does not store each item\'s hash in the table. Setting `store_hash`"},
{"lineNum":"   63","line":"/// to `true` incurs slightly more memory cost by storing each key\'s hash in the table"},
{"lineNum":"   64","line":"/// but only has to call `eql` for hash collisions."},
{"lineNum":"   65","line":"/// If typical operations (except iteration over entries) need to be faster, prefer"},
{"lineNum":"   66","line":"/// the alternative `std.HashMap`."},
{"lineNum":"   67","line":"/// Context must be a struct type with two member functions:"},
{"lineNum":"   68","line":"///   hash(self, K) u32"},
{"lineNum":"   69","line":"///   eql(self, K, K, usize) bool"},
{"lineNum":"   70","line":"/// Adapted variants of many functions are provided.  These variants"},
{"lineNum":"   71","line":"/// take a pseudo key instead of a key.  Their context must have the functions:"},
{"lineNum":"   72","line":"///   hash(self, PseudoKey) u32"},
{"lineNum":"   73","line":"///   eql(self, PseudoKey, K, usize) bool"},
{"lineNum":"   74","line":"pub fn ArrayHashMap("},
{"lineNum":"   75","line":"    comptime K: type,"},
{"lineNum":"   76","line":"    comptime V: type,"},
{"lineNum":"   77","line":"    comptime Context: type,"},
{"lineNum":"   78","line":"    comptime store_hash: bool,"},
{"lineNum":"   79","line":") type {"},
{"lineNum":"   80","line":"    return struct {"},
{"lineNum":"   81","line":"        unmanaged: Unmanaged,"},
{"lineNum":"   82","line":"        allocator: Allocator,"},
{"lineNum":"   83","line":"        ctx: Context,"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"        /// The ArrayHashMapUnmanaged type using the same settings as this managed map."},
{"lineNum":"   86","line":"        pub const Unmanaged = ArrayHashMapUnmanaged(K, V, Context, store_hash);"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        /// Pointers to a key and value in the backing store of this map."},
{"lineNum":"   89","line":"        /// Modifying the key is allowed only if it does not change the hash."},
{"lineNum":"   90","line":"        /// Modifying the value is allowed."},
{"lineNum":"   91","line":"        /// Entry pointers become invalid whenever this ArrayHashMap is modified,"},
{"lineNum":"   92","line":"        /// unless `ensureTotalCapacity`/`ensureUnusedCapacity` was previously used."},
{"lineNum":"   93","line":"        pub const Entry = Unmanaged.Entry;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        /// A KV pair which has been copied out of the backing store"},
{"lineNum":"   96","line":"        pub const KV = Unmanaged.KV;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        /// The Data type used for the MultiArrayList backing this map"},
{"lineNum":"   99","line":"        pub const Data = Unmanaged.Data;"},
{"lineNum":"  100","line":"        /// The MultiArrayList type backing this map"},
{"lineNum":"  101","line":"        pub const DataList = Unmanaged.DataList;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        /// The stored hash type, either u32 or void."},
{"lineNum":"  104","line":"        pub const Hash = Unmanaged.Hash;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        /// getOrPut variants return this structure, with pointers"},
{"lineNum":"  107","line":"        /// to the backing store and a flag to indicate whether an"},
{"lineNum":"  108","line":"        /// existing entry was found."},
{"lineNum":"  109","line":"        /// Modifying the key is allowed only if it does not change the hash."},
{"lineNum":"  110","line":"        /// Modifying the value is allowed."},
{"lineNum":"  111","line":"        /// Entry pointers become invalid whenever this ArrayHashMap is modified,"},
{"lineNum":"  112","line":"        /// unless `ensureTotalCapacity`/`ensureUnusedCapacity` was previously used."},
{"lineNum":"  113","line":"        pub const GetOrPutResult = Unmanaged.GetOrPutResult;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        /// An Iterator over Entry pointers."},
{"lineNum":"  116","line":"        pub const Iterator = Unmanaged.Iterator;"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"        const Self = @This();"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        /// Create an ArrayHashMap instance which will use a specified allocator."},
{"lineNum":"  121","line":"        pub fn init(allocator: Allocator) Self {"},
{"lineNum":"  122","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  123","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call initContext instead.\");"},
{"lineNum":"  124","line":"            return initContext(allocator, undefined);"},
{"lineNum":"  125","line":"        }"},
{"lineNum":"  126","line":"        pub fn initContext(allocator: Allocator, ctx: Context) Self {"},
{"lineNum":"  127","line":"            return .{"},
{"lineNum":"  128","line":"                .unmanaged = .{},"},
{"lineNum":"  129","line":"                .allocator = allocator,"},
{"lineNum":"  130","line":"                .ctx = ctx,"},
{"lineNum":"  131","line":"            };"},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        /// Frees the backing allocation and leaves the map in an undefined state."},
{"lineNum":"  135","line":"        /// Note that this does not free keys or values.  You must take care of that"},
{"lineNum":"  136","line":"        /// before calling this function, if it is needed."},
{"lineNum":"  137","line":"        pub fn deinit(self: *Self) void {"},
{"lineNum":"  138","line":"            self.unmanaged.deinit(self.allocator);"},
{"lineNum":"  139","line":"            self.* = undefined;"},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        /// Clears the map but retains the backing allocation for future use."},
{"lineNum":"  143","line":"        pub fn clearRetainingCapacity(self: *Self) void {"},
{"lineNum":"  144","line":"            return self.unmanaged.clearRetainingCapacity();"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        /// Clears the map and releases the backing allocation"},
{"lineNum":"  148","line":"        pub fn clearAndFree(self: *Self) void {"},
{"lineNum":"  149","line":"            return self.unmanaged.clearAndFree(self.allocator);"},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"        /// Returns the number of KV pairs stored in this map."},
{"lineNum":"  153","line":"        pub fn count(self: Self) usize {"},
{"lineNum":"  154","line":"            return self.unmanaged.count();"},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        /// Returns the backing array of keys in this map."},
{"lineNum":"  158","line":"        /// Modifying the map may invalidate this array."},
{"lineNum":"  159","line":"        pub fn keys(self: Self) []K {"},
{"lineNum":"  160","line":"            return self.unmanaged.keys();"},
{"lineNum":"  161","line":"        }"},
{"lineNum":"  162","line":"        /// Returns the backing array of values in this map."},
{"lineNum":"  163","line":"        /// Modifying the map may invalidate this array."},
{"lineNum":"  164","line":"        pub fn values(self: Self) []V {"},
{"lineNum":"  165","line":"            return self.unmanaged.values();"},
{"lineNum":"  166","line":"        }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"        /// Returns an iterator over the pairs in this map."},
{"lineNum":"  169","line":"        /// Modifying the map may invalidate this iterator."},
{"lineNum":"  170","line":"        pub fn iterator(self: *const Self) Iterator {"},
{"lineNum":"  171","line":"            return self.unmanaged.iterator();"},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        /// If key exists this function cannot fail."},
{"lineNum":"  175","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  176","line":"        /// `Entry` pointer points to it, and found_existing is true."},
{"lineNum":"  177","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  178","line":"        /// the `Entry` pointer points to it. Caller should then initialize"},
{"lineNum":"  179","line":"        /// the value (but not the key)."},
{"lineNum":"  180","line":"        pub fn getOrPut(self: *Self, key: K) !GetOrPutResult {"},
{"lineNum":"  181","line":"            return self.unmanaged.getOrPutContext(self.allocator, key, self.ctx);"},
{"lineNum":"  182","line":"        }"},
{"lineNum":"  183","line":"        pub fn getOrPutAdapted(self: *Self, key: anytype, ctx: anytype) !GetOrPutResult {"},
{"lineNum":"  184","line":"            return self.unmanaged.getOrPutContextAdapted(self.allocator, key, ctx, self.ctx);"},
{"lineNum":"  185","line":"        }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  188","line":"        /// `Entry` pointer points to it, and found_existing is true."},
{"lineNum":"  189","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  190","line":"        /// the `Entry` pointer points to it. Caller should then initialize"},
{"lineNum":"  191","line":"        /// the value (but not the key)."},
{"lineNum":"  192","line":"        /// If a new entry needs to be stored, this function asserts there"},
{"lineNum":"  193","line":"        /// is enough capacity to store it."},
{"lineNum":"  194","line":"        pub fn getOrPutAssumeCapacity(self: *Self, key: K) GetOrPutResult {"},
{"lineNum":"  195","line":"            return self.unmanaged.getOrPutAssumeCapacityContext(key, self.ctx);"},
{"lineNum":"  196","line":"        }"},
{"lineNum":"  197","line":"        pub fn getOrPutAssumeCapacityAdapted(self: *Self, key: anytype, ctx: anytype) GetOrPutResult {"},
{"lineNum":"  198","line":"            return self.unmanaged.getOrPutAssumeCapacityAdapted(key, ctx);"},
{"lineNum":"  199","line":"        }"},
{"lineNum":"  200","line":"        pub fn getOrPutValue(self: *Self, key: K, value: V) !GetOrPutResult {"},
{"lineNum":"  201","line":"            return self.unmanaged.getOrPutValueContext(self.allocator, key, value, self.ctx);"},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        /// Increases capacity, guaranteeing that insertions up until the"},
{"lineNum":"  205","line":"        /// `expected_count` will not cause an allocation, and therefore cannot fail."},
{"lineNum":"  206","line":"        pub fn ensureTotalCapacity(self: *Self, new_capacity: usize) !void {"},
{"lineNum":"  207","line":"            return self.unmanaged.ensureTotalCapacityContext(self.allocator, new_capacity, self.ctx);"},
{"lineNum":"  208","line":"        }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        /// Increases capacity, guaranteeing that insertions up until"},
{"lineNum":"  211","line":"        /// `additional_count` **more** items will not cause an allocation, and"},
{"lineNum":"  212","line":"        /// therefore cannot fail."},
{"lineNum":"  213","line":"        pub fn ensureUnusedCapacity(self: *Self, additional_count: usize) !void {"},
{"lineNum":"  214","line":"            return self.unmanaged.ensureUnusedCapacityContext(self.allocator, additional_count, self.ctx);"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        /// Returns the number of total elements which may be present before it is"},
{"lineNum":"  218","line":"        /// no longer guaranteed that no allocations will be performed."},
{"lineNum":"  219","line":"        pub fn capacity(self: Self) usize {"},
{"lineNum":"  220","line":"            return self.unmanaged.capacity();"},
{"lineNum":"  221","line":"        }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":"  224","line":"        /// existing data, see `getOrPut`."},
{"lineNum":"  225","line":"        pub fn put(self: *Self, key: K, value: V) !void {"},
{"lineNum":"  226","line":"            return self.unmanaged.putContext(self.allocator, key, value, self.ctx);"},
{"lineNum":"  227","line":"        }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"        /// Inserts a key-value pair into the hash map, asserting that no previous"},
{"lineNum":"  230","line":"        /// entry with the same key is already present"},
{"lineNum":"  231","line":"        pub fn putNoClobber(self: *Self, key: K, value: V) !void {"},
{"lineNum":"  232","line":"            return self.unmanaged.putNoClobberContext(self.allocator, key, value, self.ctx);"},
{"lineNum":"  233","line":"        }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":"  236","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":"  237","line":"        /// existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":"  238","line":"        pub fn putAssumeCapacity(self: *Self, key: K, value: V) void {"},
{"lineNum":"  239","line":"            return self.unmanaged.putAssumeCapacityContext(key, value, self.ctx);"},
{"lineNum":"  240","line":"        }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":"  243","line":"        /// Asserts that it does not clobber any existing data."},
{"lineNum":"  244","line":"        /// To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":"  245","line":"        pub fn putAssumeCapacityNoClobber(self: *Self, key: K, value: V) void {"},
{"lineNum":"  246","line":"            return self.unmanaged.putAssumeCapacityNoClobberContext(key, value, self.ctx);"},
{"lineNum":"  247","line":"        }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":"  250","line":"        pub fn fetchPut(self: *Self, key: K, value: V) !?KV {"},
{"lineNum":"  251","line":"            return self.unmanaged.fetchPutContext(self.allocator, key, value, self.ctx);"},
{"lineNum":"  252","line":"        }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":"  255","line":"        /// If insertion happuns, asserts there is enough capacity without allocating."},
{"lineNum":"  256","line":"        pub fn fetchPutAssumeCapacity(self: *Self, key: K, value: V) ?KV {"},
{"lineNum":"  257","line":"            return self.unmanaged.fetchPutAssumeCapacityContext(key, value, self.ctx);"},
{"lineNum":"  258","line":"        }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"        /// Finds pointers to the key and value storage associated with a key."},
{"lineNum":"  261","line":"        pub fn getEntry(self: Self, key: K) ?Entry {"},
{"lineNum":"  262","line":"            return self.unmanaged.getEntryContext(key, self.ctx);"},
{"lineNum":"  263","line":"        }"},
{"lineNum":"  264","line":"        pub fn getEntryAdapted(self: Self, key: anytype, ctx: anytype) ?Entry {"},
{"lineNum":"  265","line":"            return self.unmanaged.getEntryAdapted(key, ctx);"},
{"lineNum":"  266","line":"        }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"        /// Finds the index in the `entries` array where a key is stored"},
{"lineNum":"  269","line":"        pub fn getIndex(self: Self, key: K) ?usize {"},
{"lineNum":"  270","line":"            return self.unmanaged.getIndexContext(key, self.ctx);"},
{"lineNum":"  271","line":"        }"},
{"lineNum":"  272","line":"        pub fn getIndexAdapted(self: Self, key: anytype, ctx: anytype) ?usize {"},
{"lineNum":"  273","line":"            return self.unmanaged.getIndexAdapted(key, ctx);"},
{"lineNum":"  274","line":"        }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        /// Find the value associated with a key"},
{"lineNum":"  277","line":"        pub fn get(self: Self, key: K) ?V {"},
{"lineNum":"  278","line":"            return self.unmanaged.getContext(key, self.ctx);"},
{"lineNum":"  279","line":"        }"},
{"lineNum":"  280","line":"        pub fn getAdapted(self: Self, key: anytype, ctx: anytype) ?V {"},
{"lineNum":"  281","line":"            return self.unmanaged.getAdapted(key, ctx);"},
{"lineNum":"  282","line":"        }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"        /// Find a pointer to the value associated with a key"},
{"lineNum":"  285","line":"        pub fn getPtr(self: Self, key: K) ?*V {"},
{"lineNum":"  286","line":"            return self.unmanaged.getPtrContext(key, self.ctx);"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"        pub fn getPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*V {"},
{"lineNum":"  289","line":"            return self.unmanaged.getPtrAdapted(key, ctx);"},
{"lineNum":"  290","line":"        }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        /// Find the actual key associated with an adapted key"},
{"lineNum":"  293","line":"        pub fn getKey(self: Self, key: K) ?K {"},
{"lineNum":"  294","line":"            return self.unmanaged.getKeyContext(key, self.ctx);"},
{"lineNum":"  295","line":"        }"},
{"lineNum":"  296","line":"        pub fn getKeyAdapted(self: Self, key: anytype, ctx: anytype) ?K {"},
{"lineNum":"  297","line":"            return self.unmanaged.getKeyAdapted(key, ctx);"},
{"lineNum":"  298","line":"        }"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"        /// Find a pointer to the actual key associated with an adapted key"},
{"lineNum":"  301","line":"        pub fn getKeyPtr(self: Self, key: K) ?*K {"},
{"lineNum":"  302","line":"            return self.unmanaged.getKeyPtrContext(key, self.ctx);"},
{"lineNum":"  303","line":"        }"},
{"lineNum":"  304","line":"        pub fn getKeyPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*K {"},
{"lineNum":"  305","line":"            return self.unmanaged.getKeyPtrAdapted(key, ctx);"},
{"lineNum":"  306","line":"        }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"        /// Check whether a key is stored in the map"},
{"lineNum":"  309","line":"        pub fn contains(self: Self, key: K) bool {"},
{"lineNum":"  310","line":"            return self.unmanaged.containsContext(key, self.ctx);"},
{"lineNum":"  311","line":"        }"},
{"lineNum":"  312","line":"        pub fn containsAdapted(self: Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":"  313","line":"            return self.unmanaged.containsAdapted(key, ctx);"},
{"lineNum":"  314","line":"        }"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":"  317","line":"        /// the hash map, and then returned from this function. The entry is"},
{"lineNum":"  318","line":"        /// removed from the underlying array by swapping it with the last"},
{"lineNum":"  319","line":"        /// element."},
{"lineNum":"  320","line":"        pub fn fetchSwapRemove(self: *Self, key: K) ?KV {"},
{"lineNum":"  321","line":"            return self.unmanaged.fetchSwapRemoveContext(key, self.ctx);"},
{"lineNum":"  322","line":"        }"},
{"lineNum":"  323","line":"        pub fn fetchSwapRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {"},
{"lineNum":"  324","line":"            return self.unmanaged.fetchSwapRemoveContextAdapted(key, ctx, self.ctx);"},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":"  328","line":"        /// the hash map, and then returned from this function. The entry is"},
{"lineNum":"  329","line":"        /// removed from the underlying array by shifting all elements forward"},
{"lineNum":"  330","line":"        /// thereby maintaining the current ordering."},
{"lineNum":"  331","line":"        pub fn fetchOrderedRemove(self: *Self, key: K) ?KV {"},
{"lineNum":"  332","line":"            return self.unmanaged.fetchOrderedRemoveContext(key, self.ctx);"},
{"lineNum":"  333","line":"        }"},
{"lineNum":"  334","line":"        pub fn fetchOrderedRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {"},
{"lineNum":"  335","line":"            return self.unmanaged.fetchOrderedRemoveContextAdapted(key, ctx, self.ctx);"},
{"lineNum":"  336","line":"        }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":"  339","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":"  340","line":"        /// by swapping it with the last element.  Returns true if an entry"},
{"lineNum":"  341","line":"        /// was removed, false otherwise."},
{"lineNum":"  342","line":"        pub fn swapRemove(self: *Self, key: K) bool {"},
{"lineNum":"  343","line":"            return self.unmanaged.swapRemoveContext(key, self.ctx);"},
{"lineNum":"  344","line":"        }"},
{"lineNum":"  345","line":"        pub fn swapRemoveAdapted(self: *Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":"  346","line":"            return self.unmanaged.swapRemoveContextAdapted(key, ctx, self.ctx);"},
{"lineNum":"  347","line":"        }"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":"  350","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":"  351","line":"        /// by shifting all elements forward, thereby maintaining the"},
{"lineNum":"  352","line":"        /// current ordering.  Returns true if an entry was removed, false otherwise."},
{"lineNum":"  353","line":"        pub fn orderedRemove(self: *Self, key: K) bool {"},
{"lineNum":"  354","line":"            return self.unmanaged.orderedRemoveContext(key, self.ctx);"},
{"lineNum":"  355","line":"        }"},
{"lineNum":"  356","line":"        pub fn orderedRemoveAdapted(self: *Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":"  357","line":"            return self.unmanaged.orderedRemoveContextAdapted(key, ctx, self.ctx);"},
{"lineNum":"  358","line":"        }"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"        /// Deletes the item at the specified index in `entries` from"},
{"lineNum":"  361","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":"  362","line":"        /// by swapping it with the last element."},
{"lineNum":"  363","line":"        pub fn swapRemoveAt(self: *Self, index: usize) void {"},
{"lineNum":"  364","line":"            self.unmanaged.swapRemoveAtContext(index, self.ctx);"},
{"lineNum":"  365","line":"        }"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"        /// Deletes the item at the specified index in `entries` from"},
{"lineNum":"  368","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":"  369","line":"        /// by shifting all elements forward, thereby maintaining the"},
{"lineNum":"  370","line":"        /// current ordering."},
{"lineNum":"  371","line":"        pub fn orderedRemoveAt(self: *Self, index: usize) void {"},
{"lineNum":"  372","line":"            self.unmanaged.orderedRemoveAtContext(index, self.ctx);"},
{"lineNum":"  373","line":"        }"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"        /// Create a copy of the hash map which can be modified separately."},
{"lineNum":"  376","line":"        /// The copy uses the same context and allocator as this instance."},
{"lineNum":"  377","line":"        pub fn clone(self: Self) !Self {"},
{"lineNum":"  378","line":"            var other = try self.unmanaged.cloneContext(self.allocator, self.ctx);"},
{"lineNum":"  379","line":"            return other.promoteContext(self.allocator, self.ctx);"},
{"lineNum":"  380","line":"        }"},
{"lineNum":"  381","line":"        /// Create a copy of the hash map which can be modified separately."},
{"lineNum":"  382","line":"        /// The copy uses the same context as this instance, but the specified"},
{"lineNum":"  383","line":"        /// allocator."},
{"lineNum":"  384","line":"        pub fn cloneWithAllocator(self: Self, allocator: Allocator) !Self {"},
{"lineNum":"  385","line":"            var other = try self.unmanaged.cloneContext(allocator, self.ctx);"},
{"lineNum":"  386","line":"            return other.promoteContext(allocator, self.ctx);"},
{"lineNum":"  387","line":"        }"},
{"lineNum":"  388","line":"        /// Create a copy of the hash map which can be modified separately."},
{"lineNum":"  389","line":"        /// The copy uses the same allocator as this instance, but the"},
{"lineNum":"  390","line":"        /// specified context."},
{"lineNum":"  391","line":"        pub fn cloneWithContext(self: Self, ctx: anytype) !ArrayHashMap(K, V, @TypeOf(ctx), store_hash) {"},
{"lineNum":"  392","line":"            var other = try self.unmanaged.cloneContext(self.allocator, ctx);"},
{"lineNum":"  393","line":"            return other.promoteContext(self.allocator, ctx);"},
{"lineNum":"  394","line":"        }"},
{"lineNum":"  395","line":"        /// Create a copy of the hash map which can be modified separately."},
{"lineNum":"  396","line":"        /// The copy uses the specified allocator and context."},
{"lineNum":"  397","line":"        pub fn cloneWithAllocatorAndContext(self: Self, allocator: Allocator, ctx: anytype) !ArrayHashMap(K, V, @TypeOf(ctx), store_hash) {"},
{"lineNum":"  398","line":"            var other = try self.unmanaged.cloneContext(allocator, ctx);"},
{"lineNum":"  399","line":"            return other.promoteContext(allocator, ctx);"},
{"lineNum":"  400","line":"        }"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"        /// Set the map to an empty state, making deinitialization a no-op, and"},
{"lineNum":"  403","line":"        /// returning a copy of the original."},
{"lineNum":"  404","line":"        pub fn move(self: *Self) Self {"},
{"lineNum":"  405","line":"            const result = self.*;"},
{"lineNum":"  406","line":"            self.unmanaged = .{};"},
{"lineNum":"  407","line":"            return result;"},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"        /// Rebuilds the key indexes. If the underlying entries has been modified directly, users"},
{"lineNum":"  411","line":"        /// can call `reIndex` to update the indexes to account for these new entries."},
{"lineNum":"  412","line":"        pub fn reIndex(self: *Self) !void {"},
{"lineNum":"  413","line":"            return self.unmanaged.reIndexContext(self.allocator, self.ctx);"},
{"lineNum":"  414","line":"        }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"        /// Sorts the entries and then rebuilds the index."},
{"lineNum":"  417","line":"        /// `sort_ctx` must have this method:"},
{"lineNum":"  418","line":"        /// `fn lessThan(ctx: @TypeOf(ctx), a_index: usize, b_index: usize) bool`"},
{"lineNum":"  419","line":"        pub fn sort(self: *Self, sort_ctx: anytype) void {"},
{"lineNum":"  420","line":"            return self.unmanaged.sortContext(sort_ctx, self.ctx);"},
{"lineNum":"  421","line":"        }"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"        /// Shrinks the underlying `Entry` array to `new_len` elements and discards any associated"},
{"lineNum":"  424","line":"        /// index entries. Keeps capacity the same."},
{"lineNum":"  425","line":"        pub fn shrinkRetainingCapacity(self: *Self, new_len: usize) void {"},
{"lineNum":"  426","line":"            return self.unmanaged.shrinkRetainingCapacityContext(new_len, self.ctx);"},
{"lineNum":"  427","line":"        }"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"        /// Shrinks the underlying `Entry` array to `new_len` elements and discards any associated"},
{"lineNum":"  430","line":"        /// index entries. Reduces allocated capacity."},
{"lineNum":"  431","line":"        pub fn shrinkAndFree(self: *Self, new_len: usize) void {"},
{"lineNum":"  432","line":"            return self.unmanaged.shrinkAndFreeContext(self.allocator, new_len, self.ctx);"},
{"lineNum":"  433","line":"        }"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"        /// Removes the last inserted `Entry` in the hash map and returns it."},
{"lineNum":"  436","line":"        pub fn pop(self: *Self) KV {"},
{"lineNum":"  437","line":"            return self.unmanaged.popContext(self.ctx);"},
{"lineNum":"  438","line":"        }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"        /// Removes the last inserted `Entry` in the hash map and returns it if count is nonzero."},
{"lineNum":"  441","line":"        /// Otherwise returns null."},
{"lineNum":"  442","line":"        pub fn popOrNull(self: *Self) ?KV {"},
{"lineNum":"  443","line":"            return self.unmanaged.popOrNullContext(self.ctx);"},
{"lineNum":"  444","line":"        }"},
{"lineNum":"  445","line":"    };"},
{"lineNum":"  446","line":"}"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"/// General purpose hash table."},
{"lineNum":"  449","line":"/// Insertion order is preserved."},
{"lineNum":"  450","line":"/// Deletions perform a \"swap removal\" on the entries list."},
{"lineNum":"  451","line":"/// Modifying the hash map while iterating is allowed, however, one must understand"},
{"lineNum":"  452","line":"/// the (well defined) behavior when mixing insertions and deletions with iteration."},
{"lineNum":"  453","line":"/// This type does not store an Allocator field - the Allocator must be passed in"},
{"lineNum":"  454","line":"/// with each function call that requires it. See `ArrayHashMap` for a type that stores"},
{"lineNum":"  455","line":"/// an Allocator field for convenience."},
{"lineNum":"  456","line":"/// Can be initialized directly using the default field values."},
{"lineNum":"  457","line":"/// This type is designed to have low overhead for small numbers of entries. When"},
{"lineNum":"  458","line":"/// `store_hash` is `false` and the number of entries in the map is less than 9,"},
{"lineNum":"  459","line":"/// the overhead cost of using `ArrayHashMapUnmanaged` rather than `std.ArrayList` is"},
{"lineNum":"  460","line":"/// only a single pointer-sized integer."},
{"lineNum":"  461","line":"/// When `store_hash` is `false`, this data structure is biased towards cheap `eql`"},
{"lineNum":"  462","line":"/// functions. It does not store each item\'s hash in the table. Setting `store_hash`"},
{"lineNum":"  463","line":"/// to `true` incurs slightly more memory cost by storing each key\'s hash in the table"},
{"lineNum":"  464","line":"/// but guarantees only one call to `eql` per insertion/deletion."},
{"lineNum":"  465","line":"/// Context must be a struct type with two member functions:"},
{"lineNum":"  466","line":"///   hash(self, K) u32"},
{"lineNum":"  467","line":"///   eql(self, K, K) bool"},
{"lineNum":"  468","line":"/// Adapted variants of many functions are provided.  These variants"},
{"lineNum":"  469","line":"/// take a pseudo key instead of a key.  Their context must have the functions:"},
{"lineNum":"  470","line":"///   hash(self, PseudoKey) u32"},
{"lineNum":"  471","line":"///   eql(self, PseudoKey, K) bool"},
{"lineNum":"  472","line":"pub fn ArrayHashMapUnmanaged("},
{"lineNum":"  473","line":"    comptime K: type,"},
{"lineNum":"  474","line":"    comptime V: type,"},
{"lineNum":"  475","line":"    comptime Context: type,"},
{"lineNum":"  476","line":"    comptime store_hash: bool,"},
{"lineNum":"  477","line":") type {"},
{"lineNum":"  478","line":"    return struct {"},
{"lineNum":"  479","line":"        /// It is permitted to access this field directly."},
{"lineNum":"  480","line":"        entries: DataList = .{},"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"        /// When entries length is less than `linear_scan_max`, this remains `null`."},
{"lineNum":"  483","line":"        /// Once entries length grows big enough, this field is allocated. There is"},
{"lineNum":"  484","line":"        /// an IndexHeader followed by an array of Index(I) structs, where I is defined"},
{"lineNum":"  485","line":"        /// by how many total indexes there are."},
{"lineNum":"  486","line":"        index_header: ?*IndexHeader = null,"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"        comptime {"},
{"lineNum":"  489","line":"            std.hash_map.verifyContext(Context, K, K, u32, true);"},
{"lineNum":"  490","line":"        }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"        /// Modifying the key is allowed only if it does not change the hash."},
{"lineNum":"  493","line":"        /// Modifying the value is allowed."},
{"lineNum":"  494","line":"        /// Entry pointers become invalid whenever this ArrayHashMap is modified,"},
{"lineNum":"  495","line":"        /// unless `ensureTotalCapacity`/`ensureUnusedCapacity` was previously used."},
{"lineNum":"  496","line":"        pub const Entry = struct {"},
{"lineNum":"  497","line":"            key_ptr: *K,"},
{"lineNum":"  498","line":"            value_ptr: *V,"},
{"lineNum":"  499","line":"        };"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"        /// A KV pair which has been copied out of the backing store"},
{"lineNum":"  502","line":"        pub const KV = struct {"},
{"lineNum":"  503","line":"            key: K,"},
{"lineNum":"  504","line":"            value: V,"},
{"lineNum":"  505","line":"        };"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"        /// The Data type used for the MultiArrayList backing this map"},
{"lineNum":"  508","line":"        pub const Data = struct {"},
{"lineNum":"  509","line":"            hash: Hash,"},
{"lineNum":"  510","line":"            key: K,"},
{"lineNum":"  511","line":"            value: V,"},
{"lineNum":"  512","line":"        };"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"        /// The MultiArrayList type backing this map"},
{"lineNum":"  515","line":"        pub const DataList = std.MultiArrayList(Data);"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        /// The stored hash type, either u32 or void."},
{"lineNum":"  518","line":"        pub const Hash = if (store_hash) u32 else void;"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"        /// getOrPut variants return this structure, with pointers"},
{"lineNum":"  521","line":"        /// to the backing store and a flag to indicate whether an"},
{"lineNum":"  522","line":"        /// existing entry was found."},
{"lineNum":"  523","line":"        /// Modifying the key is allowed only if it does not change the hash."},
{"lineNum":"  524","line":"        /// Modifying the value is allowed."},
{"lineNum":"  525","line":"        /// Entry pointers become invalid whenever this ArrayHashMap is modified,"},
{"lineNum":"  526","line":"        /// unless `ensureTotalCapacity`/`ensureUnusedCapacity` was previously used."},
{"lineNum":"  527","line":"        pub const GetOrPutResult = struct {"},
{"lineNum":"  528","line":"            key_ptr: *K,"},
{"lineNum":"  529","line":"            value_ptr: *V,"},
{"lineNum":"  530","line":"            found_existing: bool,"},
{"lineNum":"  531","line":"            index: usize,"},
{"lineNum":"  532","line":"        };"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"        /// The ArrayHashMap type using the same settings as this managed map."},
{"lineNum":"  535","line":"        pub const Managed = ArrayHashMap(K, V, Context, store_hash);"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"        /// Some functions require a context only if hashes are not stored."},
{"lineNum":"  538","line":"        /// To keep the api simple, this type is only used internally."},
{"lineNum":"  539","line":"        const ByIndexContext = if (store_hash) void else Context;"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"        const Self = @This();"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"        const linear_scan_max = 8;"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"        const RemovalType = enum {"},
{"lineNum":"  546","line":"            swap,"},
{"lineNum":"  547","line":"            ordered,"},
{"lineNum":"  548","line":"        };"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"        /// Convert from an unmanaged map to a managed map.  After calling this,"},
{"lineNum":"  551","line":"        /// the promoted map should no longer be used."},
{"lineNum":"  552","line":"        pub fn promote(self: Self, allocator: Allocator) Managed {"},
{"lineNum":"  553","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  554","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call promoteContext instead.\");"},
{"lineNum":"  555","line":"            return self.promoteContext(allocator, undefined);"},
{"lineNum":"  556","line":"        }"},
{"lineNum":"  557","line":"        pub fn promoteContext(self: Self, allocator: Allocator, ctx: Context) Managed {"},
{"lineNum":"  558","line":"            return .{"},
{"lineNum":"  559","line":"                .unmanaged = self,"},
{"lineNum":"  560","line":"                .allocator = allocator,"},
{"lineNum":"  561","line":"                .ctx = ctx,"},
{"lineNum":"  562","line":"            };"},
{"lineNum":"  563","line":"        }"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"        /// Frees the backing allocation and leaves the map in an undefined state."},
{"lineNum":"  566","line":"        /// Note that this does not free keys or values.  You must take care of that"},
{"lineNum":"  567","line":"        /// before calling this function, if it is needed."},
{"lineNum":"  568","line":"        pub fn deinit(self: *Self, allocator: Allocator) void {"},
{"lineNum":"  569","line":"            self.entries.deinit(allocator);"},
{"lineNum":"  570","line":"            if (self.index_header) |header| {"},
{"lineNum":"  571","line":"                header.free(allocator);"},
{"lineNum":"  572","line":"            }"},
{"lineNum":"  573","line":"            self.* = undefined;"},
{"lineNum":"  574","line":"        }"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"        /// Clears the map but retains the backing allocation for future use."},
{"lineNum":"  577","line":"        pub fn clearRetainingCapacity(self: *Self) void {"},
{"lineNum":"  578","line":"            self.entries.len = 0;"},
{"lineNum":"  579","line":"            if (self.index_header) |header| {"},
{"lineNum":"  580","line":"                switch (header.capacityIndexType()) {"},
{"lineNum":"  581","line":"                    .u8 => @memset(header.indexes(u8), Index(u8).empty),"},
{"lineNum":"  582","line":"                    .u16 => @memset(header.indexes(u16), Index(u16).empty),"},
{"lineNum":"  583","line":"                    .u32 => @memset(header.indexes(u32), Index(u32).empty),"},
{"lineNum":"  584","line":"                }"},
{"lineNum":"  585","line":"            }"},
{"lineNum":"  586","line":"        }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"        /// Clears the map and releases the backing allocation"},
{"lineNum":"  589","line":"        pub fn clearAndFree(self: *Self, allocator: Allocator) void {"},
{"lineNum":"  590","line":"            self.entries.shrinkAndFree(allocator, 0);"},
{"lineNum":"  591","line":"            if (self.index_header) |header| {"},
{"lineNum":"  592","line":"                header.free(allocator);"},
{"lineNum":"  593","line":"                self.index_header = null;"},
{"lineNum":"  594","line":"            }"},
{"lineNum":"  595","line":"        }"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"        /// Returns the number of KV pairs stored in this map."},
{"lineNum":"  598","line":"        pub fn count(self: Self) usize {"},
{"lineNum":"  599","line":"            return self.entries.len;"},
{"lineNum":"  600","line":"        }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"        /// Returns the backing array of keys in this map."},
{"lineNum":"  603","line":"        /// Modifying the map may invalidate this array."},
{"lineNum":"  604","line":"        pub fn keys(self: Self) []K {"},
{"lineNum":"  605","line":"            return self.entries.items(.key);"},
{"lineNum":"  606","line":"        }"},
{"lineNum":"  607","line":"        /// Returns the backing array of values in this map."},
{"lineNum":"  608","line":"        /// Modifying the map may invalidate this array."},
{"lineNum":"  609","line":"        pub fn values(self: Self) []V {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"            return self.entries.items(.value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"        /// Returns an iterator over the pairs in this map."},
{"lineNum":"  614","line":"        /// Modifying the map may invalidate this iterator."},
{"lineNum":"  615","line":"        pub fn iterator(self: Self) Iterator {"},
{"lineNum":"  616","line":"            const slice = self.entries.slice();"},
{"lineNum":"  617","line":"            return .{"},
{"lineNum":"  618","line":"                .keys = slice.items(.key).ptr,"},
{"lineNum":"  619","line":"                .values = slice.items(.value).ptr,"},
{"lineNum":"  620","line":"                .len = @as(u32, @intCast(slice.len)),"},
{"lineNum":"  621","line":"            };"},
{"lineNum":"  622","line":"        }"},
{"lineNum":"  623","line":"        pub const Iterator = struct {"},
{"lineNum":"  624","line":"            keys: [*]K,"},
{"lineNum":"  625","line":"            values: [*]V,"},
{"lineNum":"  626","line":"            len: u32,"},
{"lineNum":"  627","line":"            index: u32 = 0,"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"            pub fn next(it: *Iterator) ?Entry {"},
{"lineNum":"  630","line":"                if (it.index >= it.len) return null;"},
{"lineNum":"  631","line":"                const result = Entry{"},
{"lineNum":"  632","line":"                    .key_ptr = &it.keys[it.index],"},
{"lineNum":"  633","line":"                    // workaround for #6974"},
{"lineNum":"  634","line":"                    .value_ptr = if (@sizeOf(*V) == 0) undefined else &it.values[it.index],"},
{"lineNum":"  635","line":"                };"},
{"lineNum":"  636","line":"                it.index += 1;"},
{"lineNum":"  637","line":"                return result;"},
{"lineNum":"  638","line":"            }"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"            /// Reset the iterator to the initial index"},
{"lineNum":"  641","line":"            pub fn reset(it: *Iterator) void {"},
{"lineNum":"  642","line":"                it.index = 0;"},
{"lineNum":"  643","line":"            }"},
{"lineNum":"  644","line":"        };"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"        /// If key exists this function cannot fail."},
{"lineNum":"  647","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  648","line":"        /// `Entry` pointer points to it, and found_existing is true."},
{"lineNum":"  649","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  650","line":"        /// the `Entry` pointer points to it. Caller should then initialize"},
{"lineNum":"  651","line":"        /// the value (but not the key)."},
{"lineNum":"  652","line":"        pub fn getOrPut(self: *Self, allocator: Allocator, key: K) !GetOrPutResult {"},
{"lineNum":"  653","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  654","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutContext instead.\");"},
{"lineNum":"  655","line":"            return self.getOrPutContext(allocator, key, undefined);"},
{"lineNum":"  656","line":"        }"},
{"lineNum":"  657","line":"        pub fn getOrPutContext(self: *Self, allocator: Allocator, key: K, ctx: Context) !GetOrPutResult {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  658","line":"            const gop = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  659","line":"            if (!gop.found_existing) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  660","line":"                gop.key_ptr.* = key;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"            }"},
{"lineNum":"  662","line":"            return gop;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"        }"},
{"lineNum":"  664","line":"        pub fn getOrPutAdapted(self: *Self, allocator: Allocator, key: anytype, key_ctx: anytype) !GetOrPutResult {"},
{"lineNum":"  665","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  666","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutContextAdapted instead.\");"},
{"lineNum":"  667","line":"            return self.getOrPutContextAdapted(allocator, key, key_ctx, undefined);"},
{"lineNum":"  668","line":"        }"},
{"lineNum":"  669","line":"        pub fn getOrPutContextAdapted(self: *Self, allocator: Allocator, key: anytype, key_ctx: anytype, ctx: Context) !GetOrPutResult {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"            self.ensureTotalCapacityContext(allocator, self.entries.len + 1, ctx) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  671","line":"                // \"If key exists this function cannot fail.\""},
{"lineNum":"  672","line":"                const index = self.getIndexAdapted(key, key_ctx) orelse return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  673","line":"                const slice = self.entries.slice();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"                return GetOrPutResult{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  675","line":"                    .key_ptr = &slice.items(.key)[index],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  676","line":"                    // workaround for #6974"},
{"lineNum":"  677","line":"                    .value_ptr = if (@sizeOf(*V) == 0) undefined else &slice.items(.value)[index],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  678","line":"                    .found_existing = true,"},
{"lineNum":"  679","line":"                    .index = index,"},
{"lineNum":"  680","line":"                };"},
{"lineNum":"  681","line":"            };"},
{"lineNum":"  682","line":"            return self.getOrPutAssumeCapacityAdapted(key, key_ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  686","line":"        /// `Entry` pointer points to it, and found_existing is true."},
{"lineNum":"  687","line":"        /// Otherwise, puts a new item with undefined value, and"},
{"lineNum":"  688","line":"        /// the `Entry` pointer points to it. Caller should then initialize"},
{"lineNum":"  689","line":"        /// the value (but not the key)."},
{"lineNum":"  690","line":"        /// If a new entry needs to be stored, this function asserts there"},
{"lineNum":"  691","line":"        /// is enough capacity to store it."},
{"lineNum":"  692","line":"        pub fn getOrPutAssumeCapacity(self: *Self, key: K) GetOrPutResult {"},
{"lineNum":"  693","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  694","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutAssumeCapacityContext instead.\");"},
{"lineNum":"  695","line":"            return self.getOrPutAssumeCapacityContext(key, undefined);"},
{"lineNum":"  696","line":"        }"},
{"lineNum":"  697","line":"        pub fn getOrPutAssumeCapacityContext(self: *Self, key: K, ctx: Context) GetOrPutResult {"},
{"lineNum":"  698","line":"            const gop = self.getOrPutAssumeCapacityAdapted(key, ctx);"},
{"lineNum":"  699","line":"            if (!gop.found_existing) {"},
{"lineNum":"  700","line":"                gop.key_ptr.* = key;"},
{"lineNum":"  701","line":"            }"},
{"lineNum":"  702","line":"            return gop;"},
{"lineNum":"  703","line":"        }"},
{"lineNum":"  704","line":"        /// If there is an existing item with `key`, then the result"},
{"lineNum":"  705","line":"        /// `Entry` pointers point to it, and found_existing is true."},
{"lineNum":"  706","line":"        /// Otherwise, puts a new item with undefined key and value, and"},
{"lineNum":"  707","line":"        /// the `Entry` pointers point to it. Caller must then initialize"},
{"lineNum":"  708","line":"        /// both the key and the value."},
{"lineNum":"  709","line":"        /// If a new entry needs to be stored, this function asserts there"},
{"lineNum":"  710","line":"        /// is enough capacity to store it."},
{"lineNum":"  711","line":"        pub fn getOrPutAssumeCapacityAdapted(self: *Self, key: anytype, ctx: anytype) GetOrPutResult {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"            const header = self.index_header orelse {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  713","line":"                // Linear scan."},
{"lineNum":"  714","line":"                const h = if (store_hash) checkedHash(ctx, key) else {};"},
{"lineNum":"  715","line":"                const slice = self.entries.slice();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  716","line":"                const hashes_array = slice.items(.hash);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  717","line":"                const keys_array = slice.items(.key);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  718","line":"                for (keys_array, 0..) |*item_key, i| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  719","line":"                    if (hashes_array[i] == h and checkedEql(ctx, key, item_key.*, i)) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  720","line":"                        return GetOrPutResult{","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  721","line":"                            .key_ptr = item_key,"},
{"lineNum":"  722","line":"                            // workaround for #6974"},
{"lineNum":"  723","line":"                            .value_ptr = if (@sizeOf(*V) == 0) undefined else &slice.items(.value)[i],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  724","line":"                            .found_existing = true,"},
{"lineNum":"  725","line":"                            .index = i,"},
{"lineNum":"  726","line":"                        };"},
{"lineNum":"  727","line":"                    }"},
{"lineNum":"  728","line":"                }"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"                const index = self.entries.addOneAssumeCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  731","line":"                // The slice length changed, so we directly index the pointer."},
{"lineNum":"  732","line":"                if (store_hash) hashes_array.ptr[index] = h;"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"                return GetOrPutResult{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  735","line":"                    .key_ptr = &keys_array.ptr[index],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  736","line":"                    // workaround for #6974"},
{"lineNum":"  737","line":"                    .value_ptr = if (@sizeOf(*V) == 0) undefined else &slice.items(.value).ptr[index],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"                    .found_existing = false,"},
{"lineNum":"  739","line":"                    .index = index,"},
{"lineNum":"  740","line":"                };"},
{"lineNum":"  741","line":"            };"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"            switch (header.capacityIndexType()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  744","line":"                .u8 => return self.getOrPutInternal(key, ctx, header, u8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  745","line":"                .u16 => return self.getOrPutInternal(key, ctx, header, u16),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  746","line":"                .u32 => return self.getOrPutInternal(key, ctx, header, u32),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  747","line":"            }"},
{"lineNum":"  748","line":"        }"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"        pub fn getOrPutValue(self: *Self, allocator: Allocator, key: K, value: V) !GetOrPutResult {"},
{"lineNum":"  751","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  752","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getOrPutValueContext instead.\");"},
{"lineNum":"  753","line":"            return self.getOrPutValueContext(allocator, key, value, undefined);"},
{"lineNum":"  754","line":"        }"},
{"lineNum":"  755","line":"        pub fn getOrPutValueContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) !GetOrPutResult {"},
{"lineNum":"  756","line":"            const res = try self.getOrPutContextAdapted(allocator, key, ctx, ctx);"},
{"lineNum":"  757","line":"            if (!res.found_existing) {"},
{"lineNum":"  758","line":"                res.key_ptr.* = key;"},
{"lineNum":"  759","line":"                res.value_ptr.* = value;"},
{"lineNum":"  760","line":"            }"},
{"lineNum":"  761","line":"            return res;"},
{"lineNum":"  762","line":"        }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"        /// Increases capacity, guaranteeing that insertions up until the"},
{"lineNum":"  765","line":"        /// `expected_count` will not cause an allocation, and therefore cannot fail."},
{"lineNum":"  766","line":"        pub fn ensureTotalCapacity(self: *Self, allocator: Allocator, new_capacity: usize) !void {"},
{"lineNum":"  767","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":"  768","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call ensureTotalCapacityContext instead.\");"},
{"lineNum":"  769","line":"            return self.ensureTotalCapacityContext(allocator, new_capacity, undefined);"},
{"lineNum":"  770","line":"        }"},
{"lineNum":"  771","line":"        pub fn ensureTotalCapacityContext(self: *Self, allocator: Allocator, new_capacity: usize, ctx: Context) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  772","line":"            if (new_capacity <= linear_scan_max) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  773","line":"                try self.entries.ensureTotalCapacity(allocator, new_capacity);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  774","line":"                return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  775","line":"            }"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"            if (self.index_header) |header| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  778","line":"                if (new_capacity <= header.capacity()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":"                    try self.entries.ensureTotalCapacity(allocator, new_capacity);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  780","line":"                    return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  781","line":"                }"},
{"lineNum":"  782","line":"            }"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"            try self.entries.ensureTotalCapacity(allocator, new_capacity);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  785","line":"            const new_bit_index = try IndexHeader.findBitIndex(new_capacity);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  786","line":"            const new_header = try IndexHeader.alloc(allocator, new_bit_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"            if (self.index_header) |old_header| old_header.free(allocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  789","line":"            self.insertAllEntriesIntoNewHeader(if (store_hash) {} else ctx, new_header);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":"            self.index_header = new_header;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  791","line":"        }"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"        /// Increases capacity, guaranteeing that insertions up until"},
{"lineNum":"  794","line":"        /// `additional_count` **more** items will not cause an allocation, and"},
{"lineNum":"  795","line":"        /// therefore cannot fail."},
{"lineNum":"  796","line":"        pub fn ensureUnusedCapacity("},
{"lineNum":"  797","line":"            self: *Self,"},
{"lineNum":"  798","line":"            allocator: Allocator,"},
{"lineNum":"  799","line":"            additional_capacity: usize,"},
{"lineNum":"  800","line":"        ) !void {"},
{"lineNum":"  801","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  802","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call ensureTotalCapacityContext instead.\");"},
{"lineNum":"  803","line":"            return self.ensureUnusedCapacityContext(allocator, additional_capacity, undefined);"},
{"lineNum":"  804","line":"        }"},
{"lineNum":"  805","line":"        pub fn ensureUnusedCapacityContext("},
{"lineNum":"  806","line":"            self: *Self,"},
{"lineNum":"  807","line":"            allocator: Allocator,"},
{"lineNum":"  808","line":"            additional_capacity: usize,"},
{"lineNum":"  809","line":"            ctx: Context,"},
{"lineNum":"  810","line":"        ) !void {"},
{"lineNum":"  811","line":"            return self.ensureTotalCapacityContext(allocator, self.count() + additional_capacity, ctx);"},
{"lineNum":"  812","line":"        }"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        /// Returns the number of total elements which may be present before it is"},
{"lineNum":"  815","line":"        /// no longer guaranteed that no allocations will be performed."},
{"lineNum":"  816","line":"        pub fn capacity(self: Self) usize {"},
{"lineNum":"  817","line":"            const entry_cap = self.entries.capacity;"},
{"lineNum":"  818","line":"            const header = self.index_header orelse return @min(linear_scan_max, entry_cap);"},
{"lineNum":"  819","line":"            const indexes_cap = header.capacity();"},
{"lineNum":"  820","line":"            return @min(entry_cap, indexes_cap);"},
{"lineNum":"  821","line":"        }"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":"  824","line":"        /// existing data, see `getOrPut`."},
{"lineNum":"  825","line":"        pub fn put(self: *Self, allocator: Allocator, key: K, value: V) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  827","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putContext instead.\");"},
{"lineNum":"  828","line":"            return self.putContext(allocator, key, value, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":"        }"},
{"lineNum":"  830","line":"        pub fn putContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"            const result = try self.getOrPutContext(allocator, key, ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"            result.value_ptr.* = value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"        }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"        /// Inserts a key-value pair into the hash map, asserting that no previous"},
{"lineNum":"  836","line":"        /// entry with the same key is already present"},
{"lineNum":"  837","line":"        pub fn putNoClobber(self: *Self, allocator: Allocator, key: K, value: V) !void {"},
{"lineNum":"  838","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  839","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putNoClobberContext instead.\");"},
{"lineNum":"  840","line":"            return self.putNoClobberContext(allocator, key, value, undefined);"},
{"lineNum":"  841","line":"        }"},
{"lineNum":"  842","line":"        pub fn putNoClobberContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) !void {"},
{"lineNum":"  843","line":"            const result = try self.getOrPutContext(allocator, key, ctx);"},
{"lineNum":"  844","line":"            assert(!result.found_existing);"},
{"lineNum":"  845","line":"            result.value_ptr.* = value;"},
{"lineNum":"  846","line":"        }"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":"  849","line":"        /// Clobbers any existing data. To detect if a put would clobber"},
{"lineNum":"  850","line":"        /// existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":"  851","line":"        pub fn putAssumeCapacity(self: *Self, key: K, value: V) void {"},
{"lineNum":"  852","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  853","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putAssumeCapacityContext instead.\");"},
{"lineNum":"  854","line":"            return self.putAssumeCapacityContext(key, value, undefined);"},
{"lineNum":"  855","line":"        }"},
{"lineNum":"  856","line":"        pub fn putAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) void {"},
{"lineNum":"  857","line":"            const result = self.getOrPutAssumeCapacityContext(key, ctx);"},
{"lineNum":"  858","line":"            result.value_ptr.* = value;"},
{"lineNum":"  859","line":"        }"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"        /// Asserts there is enough capacity to store the new key-value pair."},
{"lineNum":"  862","line":"        /// Asserts that it does not clobber any existing data."},
{"lineNum":"  863","line":"        /// To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`."},
{"lineNum":"  864","line":"        pub fn putAssumeCapacityNoClobber(self: *Self, key: K, value: V) void {"},
{"lineNum":"  865","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  866","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call putAssumeCapacityNoClobberContext instead.\");"},
{"lineNum":"  867","line":"            return self.putAssumeCapacityNoClobberContext(key, value, undefined);"},
{"lineNum":"  868","line":"        }"},
{"lineNum":"  869","line":"        pub fn putAssumeCapacityNoClobberContext(self: *Self, key: K, value: V, ctx: Context) void {"},
{"lineNum":"  870","line":"            const result = self.getOrPutAssumeCapacityContext(key, ctx);"},
{"lineNum":"  871","line":"            assert(!result.found_existing);"},
{"lineNum":"  872","line":"            result.value_ptr.* = value;"},
{"lineNum":"  873","line":"        }"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":"  876","line":"        pub fn fetchPut(self: *Self, allocator: Allocator, key: K, value: V) !?KV {"},
{"lineNum":"  877","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  878","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchPutContext instead.\");"},
{"lineNum":"  879","line":"            return self.fetchPutContext(allocator, key, value, undefined);"},
{"lineNum":"  880","line":"        }"},
{"lineNum":"  881","line":"        pub fn fetchPutContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) !?KV {"},
{"lineNum":"  882","line":"            const gop = try self.getOrPutContext(allocator, key, ctx);"},
{"lineNum":"  883","line":"            var result: ?KV = null;"},
{"lineNum":"  884","line":"            if (gop.found_existing) {"},
{"lineNum":"  885","line":"                result = KV{"},
{"lineNum":"  886","line":"                    .key = gop.key_ptr.*,"},
{"lineNum":"  887","line":"                    .value = gop.value_ptr.*,"},
{"lineNum":"  888","line":"                };"},
{"lineNum":"  889","line":"            }"},
{"lineNum":"  890","line":"            gop.value_ptr.* = value;"},
{"lineNum":"  891","line":"            return result;"},
{"lineNum":"  892","line":"        }"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"        /// Inserts a new `Entry` into the hash map, returning the previous one, if any."},
{"lineNum":"  895","line":"        /// If insertion happens, asserts there is enough capacity without allocating."},
{"lineNum":"  896","line":"        pub fn fetchPutAssumeCapacity(self: *Self, key: K, value: V) ?KV {"},
{"lineNum":"  897","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  898","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchPutAssumeCapacityContext instead.\");"},
{"lineNum":"  899","line":"            return self.fetchPutAssumeCapacityContext(key, value, undefined);"},
{"lineNum":"  900","line":"        }"},
{"lineNum":"  901","line":"        pub fn fetchPutAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) ?KV {"},
{"lineNum":"  902","line":"            const gop = self.getOrPutAssumeCapacityContext(key, ctx);"},
{"lineNum":"  903","line":"            var result: ?KV = null;"},
{"lineNum":"  904","line":"            if (gop.found_existing) {"},
{"lineNum":"  905","line":"                result = KV{"},
{"lineNum":"  906","line":"                    .key = gop.key_ptr.*,"},
{"lineNum":"  907","line":"                    .value = gop.value_ptr.*,"},
{"lineNum":"  908","line":"                };"},
{"lineNum":"  909","line":"            }"},
{"lineNum":"  910","line":"            gop.value_ptr.* = value;"},
{"lineNum":"  911","line":"            return result;"},
{"lineNum":"  912","line":"        }"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"        /// Finds pointers to the key and value storage associated with a key."},
{"lineNum":"  915","line":"        pub fn getEntry(self: Self, key: K) ?Entry {"},
{"lineNum":"  916","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  917","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getEntryContext instead.\");"},
{"lineNum":"  918","line":"            return self.getEntryContext(key, undefined);"},
{"lineNum":"  919","line":"        }"},
{"lineNum":"  920","line":"        pub fn getEntryContext(self: Self, key: K, ctx: Context) ?Entry {"},
{"lineNum":"  921","line":"            return self.getEntryAdapted(key, ctx);"},
{"lineNum":"  922","line":"        }"},
{"lineNum":"  923","line":"        pub fn getEntryAdapted(self: Self, key: anytype, ctx: anytype) ?Entry {"},
{"lineNum":"  924","line":"            const index = self.getIndexAdapted(key, ctx) orelse return null;"},
{"lineNum":"  925","line":"            const slice = self.entries.slice();"},
{"lineNum":"  926","line":"            return Entry{"},
{"lineNum":"  927","line":"                .key_ptr = &slice.items(.key)[index],"},
{"lineNum":"  928","line":"                // workaround for #6974"},
{"lineNum":"  929","line":"                .value_ptr = if (@sizeOf(*V) == 0) undefined else &slice.items(.value)[index],"},
{"lineNum":"  930","line":"            };"},
{"lineNum":"  931","line":"        }"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"        /// Finds the index in the `entries` array where a key is stored"},
{"lineNum":"  934","line":"        pub fn getIndex(self: Self, key: K) ?usize {"},
{"lineNum":"  935","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  936","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getIndexContext instead.\");"},
{"lineNum":"  937","line":"            return self.getIndexContext(key, undefined);"},
{"lineNum":"  938","line":"        }"},
{"lineNum":"  939","line":"        pub fn getIndexContext(self: Self, key: K, ctx: Context) ?usize {"},
{"lineNum":"  940","line":"            return self.getIndexAdapted(key, ctx);"},
{"lineNum":"  941","line":"        }"},
{"lineNum":"  942","line":"        pub fn getIndexAdapted(self: Self, key: anytype, ctx: anytype) ?usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"            const header = self.index_header orelse {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  944","line":"                // Linear scan."},
{"lineNum":"  945","line":"                const h = if (store_hash) checkedHash(ctx, key) else {};"},
{"lineNum":"  946","line":"                const slice = self.entries.slice();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":"                const hashes_array = slice.items(.hash);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":"                const keys_array = slice.items(.key);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  949","line":"                for (keys_array, 0..) |*item_key, i| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  950","line":"                    if (hashes_array[i] == h and checkedEql(ctx, key, item_key.*, i)) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  951","line":"                        return i;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  952","line":"                    }"},
{"lineNum":"  953","line":"                }"},
{"lineNum":"  954","line":"                return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  955","line":"            };"},
{"lineNum":"  956","line":"            switch (header.capacityIndexType()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  957","line":"                .u8 => return self.getIndexWithHeaderGeneric(key, ctx, header, u8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  958","line":"                .u16 => return self.getIndexWithHeaderGeneric(key, ctx, header, u16),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  959","line":"                .u32 => return self.getIndexWithHeaderGeneric(key, ctx, header, u32),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  960","line":"            }"},
{"lineNum":"  961","line":"        }"},
{"lineNum":"  962","line":"        fn getIndexWithHeaderGeneric(self: Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type) ?usize {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  963","line":"            const indexes = header.indexes(I);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  964","line":"            const slot = self.getSlotByKey(key, ctx, header, I, indexes) orelse return null;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  965","line":"            return indexes[slot].entry_index;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  966","line":"        }"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"        /// Find the value associated with a key"},
{"lineNum":"  969","line":"        pub fn get(self: Self, key: K) ?V {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  970","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  971","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getContext instead.\");"},
{"lineNum":"  972","line":"            return self.getContext(key, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  973","line":"        }"},
{"lineNum":"  974","line":"        pub fn getContext(self: Self, key: K, ctx: Context) ?V {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  975","line":"            return self.getAdapted(key, ctx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  976","line":"        }"},
{"lineNum":"  977","line":"        pub fn getAdapted(self: Self, key: anytype, ctx: anytype) ?V {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  978","line":"            const index = self.getIndexAdapted(key, ctx) orelse return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  979","line":"            return self.values()[index];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  980","line":"        }"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"        /// Find a pointer to the value associated with a key"},
{"lineNum":"  983","line":"        pub fn getPtr(self: Self, key: K) ?*V {"},
{"lineNum":"  984","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":"  985","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getPtrContext instead.\");"},
{"lineNum":"  986","line":"            return self.getPtrContext(key, undefined);"},
{"lineNum":"  987","line":"        }"},
{"lineNum":"  988","line":"        pub fn getPtrContext(self: Self, key: K, ctx: Context) ?*V {"},
{"lineNum":"  989","line":"            return self.getPtrAdapted(key, ctx);"},
{"lineNum":"  990","line":"        }"},
{"lineNum":"  991","line":"        pub fn getPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*V {"},
{"lineNum":"  992","line":"            const index = self.getIndexAdapted(key, ctx) orelse return null;"},
{"lineNum":"  993","line":"            // workaround for #6974"},
{"lineNum":"  994","line":"            return if (@sizeOf(*V) == 0) @as(*V, undefined) else &self.values()[index];"},
{"lineNum":"  995","line":"        }"},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"        /// Find the actual key associated with an adapted key"},
{"lineNum":"  998","line":"        pub fn getKey(self: Self, key: K) ?K {"},
{"lineNum":"  999","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1000","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getKeyContext instead.\");"},
{"lineNum":" 1001","line":"            return self.getKeyContext(key, undefined);"},
{"lineNum":" 1002","line":"        }"},
{"lineNum":" 1003","line":"        pub fn getKeyContext(self: Self, key: K, ctx: Context) ?K {"},
{"lineNum":" 1004","line":"            return self.getKeyAdapted(key, ctx);"},
{"lineNum":" 1005","line":"        }"},
{"lineNum":" 1006","line":"        pub fn getKeyAdapted(self: Self, key: anytype, ctx: anytype) ?K {"},
{"lineNum":" 1007","line":"            const index = self.getIndexAdapted(key, ctx) orelse return null;"},
{"lineNum":" 1008","line":"            return self.keys()[index];"},
{"lineNum":" 1009","line":"        }"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"        /// Find a pointer to the actual key associated with an adapted key"},
{"lineNum":" 1012","line":"        pub fn getKeyPtr(self: Self, key: K) ?*K {"},
{"lineNum":" 1013","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1014","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call getKeyPtrContext instead.\");"},
{"lineNum":" 1015","line":"            return self.getKeyPtrContext(key, undefined);"},
{"lineNum":" 1016","line":"        }"},
{"lineNum":" 1017","line":"        pub fn getKeyPtrContext(self: Self, key: K, ctx: Context) ?*K {"},
{"lineNum":" 1018","line":"            return self.getKeyPtrAdapted(key, ctx);"},
{"lineNum":" 1019","line":"        }"},
{"lineNum":" 1020","line":"        pub fn getKeyPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*K {"},
{"lineNum":" 1021","line":"            const index = self.getIndexAdapted(key, ctx) orelse return null;"},
{"lineNum":" 1022","line":"            return &self.keys()[index];"},
{"lineNum":" 1023","line":"        }"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"        /// Check whether a key is stored in the map"},
{"lineNum":" 1026","line":"        pub fn contains(self: Self, key: K) bool {"},
{"lineNum":" 1027","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1028","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call containsContext instead.\");"},
{"lineNum":" 1029","line":"            return self.containsContext(key, undefined);"},
{"lineNum":" 1030","line":"        }"},
{"lineNum":" 1031","line":"        pub fn containsContext(self: Self, key: K, ctx: Context) bool {"},
{"lineNum":" 1032","line":"            return self.containsAdapted(key, ctx);"},
{"lineNum":" 1033","line":"        }"},
{"lineNum":" 1034","line":"        pub fn containsAdapted(self: Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":" 1035","line":"            return self.getIndexAdapted(key, ctx) != null;"},
{"lineNum":" 1036","line":"        }"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":" 1039","line":"        /// the hash map, and then returned from this function. The entry is"},
{"lineNum":" 1040","line":"        /// removed from the underlying array by swapping it with the last"},
{"lineNum":" 1041","line":"        /// element."},
{"lineNum":" 1042","line":"        pub fn fetchSwapRemove(self: *Self, key: K) ?KV {"},
{"lineNum":" 1043","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1044","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchSwapRemoveContext instead.\");"},
{"lineNum":" 1045","line":"            return self.fetchSwapRemoveContext(key, undefined);"},
{"lineNum":" 1046","line":"        }"},
{"lineNum":" 1047","line":"        pub fn fetchSwapRemoveContext(self: *Self, key: K, ctx: Context) ?KV {"},
{"lineNum":" 1048","line":"            return self.fetchSwapRemoveContextAdapted(key, ctx, ctx);"},
{"lineNum":" 1049","line":"        }"},
{"lineNum":" 1050","line":"        pub fn fetchSwapRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {"},
{"lineNum":" 1051","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1052","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchSwapRemoveContextAdapted instead.\");"},
{"lineNum":" 1053","line":"            return self.fetchSwapRemoveContextAdapted(key, ctx, undefined);"},
{"lineNum":" 1054","line":"        }"},
{"lineNum":" 1055","line":"        pub fn fetchSwapRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) ?KV {"},
{"lineNum":" 1056","line":"            return self.fetchRemoveByKey(key, key_ctx, if (store_hash) {} else ctx, .swap);"},
{"lineNum":" 1057","line":"        }"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":" 1060","line":"        /// the hash map, and then returned from this function. The entry is"},
{"lineNum":" 1061","line":"        /// removed from the underlying array by shifting all elements forward"},
{"lineNum":" 1062","line":"        /// thereby maintaining the current ordering."},
{"lineNum":" 1063","line":"        pub fn fetchOrderedRemove(self: *Self, key: K) ?KV {"},
{"lineNum":" 1064","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1065","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchOrderedRemoveContext instead.\");"},
{"lineNum":" 1066","line":"            return self.fetchOrderedRemoveContext(key, undefined);"},
{"lineNum":" 1067","line":"        }"},
{"lineNum":" 1068","line":"        pub fn fetchOrderedRemoveContext(self: *Self, key: K, ctx: Context) ?KV {"},
{"lineNum":" 1069","line":"            return self.fetchOrderedRemoveContextAdapted(key, ctx, ctx);"},
{"lineNum":" 1070","line":"        }"},
{"lineNum":" 1071","line":"        pub fn fetchOrderedRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {"},
{"lineNum":" 1072","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1073","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call fetchOrderedRemoveContextAdapted instead.\");"},
{"lineNum":" 1074","line":"            return self.fetchOrderedRemoveContextAdapted(key, ctx, undefined);"},
{"lineNum":" 1075","line":"        }"},
{"lineNum":" 1076","line":"        pub fn fetchOrderedRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) ?KV {"},
{"lineNum":" 1077","line":"            return self.fetchRemoveByKey(key, key_ctx, if (store_hash) {} else ctx, .ordered);"},
{"lineNum":" 1078","line":"        }"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":" 1081","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":" 1082","line":"        /// by swapping it with the last element.  Returns true if an entry"},
{"lineNum":" 1083","line":"        /// was removed, false otherwise."},
{"lineNum":" 1084","line":"        pub fn swapRemove(self: *Self, key: K) bool {"},
{"lineNum":" 1085","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1086","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call swapRemoveContext instead.\");"},
{"lineNum":" 1087","line":"            return self.swapRemoveContext(key, undefined);"},
{"lineNum":" 1088","line":"        }"},
{"lineNum":" 1089","line":"        pub fn swapRemoveContext(self: *Self, key: K, ctx: Context) bool {"},
{"lineNum":" 1090","line":"            return self.swapRemoveContextAdapted(key, ctx, ctx);"},
{"lineNum":" 1091","line":"        }"},
{"lineNum":" 1092","line":"        pub fn swapRemoveAdapted(self: *Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":" 1093","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1094","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call swapRemoveContextAdapted instead.\");"},
{"lineNum":" 1095","line":"            return self.swapRemoveContextAdapted(key, ctx, undefined);"},
{"lineNum":" 1096","line":"        }"},
{"lineNum":" 1097","line":"        pub fn swapRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) bool {"},
{"lineNum":" 1098","line":"            return self.removeByKey(key, key_ctx, if (store_hash) {} else ctx, .swap);"},
{"lineNum":" 1099","line":"        }"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"        /// If there is an `Entry` with a matching key, it is deleted from"},
{"lineNum":" 1102","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":" 1103","line":"        /// by shifting all elements forward, thereby maintaining the"},
{"lineNum":" 1104","line":"        /// current ordering.  Returns true if an entry was removed, false otherwise."},
{"lineNum":" 1105","line":"        pub fn orderedRemove(self: *Self, key: K) bool {"},
{"lineNum":" 1106","line":"            if (@sizeOf(Context) != 0)"},
{"lineNum":" 1107","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call orderedRemoveContext instead.\");"},
{"lineNum":" 1108","line":"            return self.orderedRemoveContext(key, undefined);"},
{"lineNum":" 1109","line":"        }"},
{"lineNum":" 1110","line":"        pub fn orderedRemoveContext(self: *Self, key: K, ctx: Context) bool {"},
{"lineNum":" 1111","line":"            return self.orderedRemoveContextAdapted(key, ctx, ctx);"},
{"lineNum":" 1112","line":"        }"},
{"lineNum":" 1113","line":"        pub fn orderedRemoveAdapted(self: *Self, key: anytype, ctx: anytype) bool {"},
{"lineNum":" 1114","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1115","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call orderedRemoveContextAdapted instead.\");"},
{"lineNum":" 1116","line":"            return self.orderedRemoveContextAdapted(key, ctx, undefined);"},
{"lineNum":" 1117","line":"        }"},
{"lineNum":" 1118","line":"        pub fn orderedRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) bool {"},
{"lineNum":" 1119","line":"            return self.removeByKey(key, key_ctx, if (store_hash) {} else ctx, .ordered);"},
{"lineNum":" 1120","line":"        }"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"        /// Deletes the item at the specified index in `entries` from"},
{"lineNum":" 1123","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":" 1124","line":"        /// by swapping it with the last element."},
{"lineNum":" 1125","line":"        pub fn swapRemoveAt(self: *Self, index: usize) void {"},
{"lineNum":" 1126","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1127","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call swapRemoveAtContext instead.\");"},
{"lineNum":" 1128","line":"            return self.swapRemoveAtContext(index, undefined);"},
{"lineNum":" 1129","line":"        }"},
{"lineNum":" 1130","line":"        pub fn swapRemoveAtContext(self: *Self, index: usize, ctx: Context) void {"},
{"lineNum":" 1131","line":"            self.removeByIndex(index, if (store_hash) {} else ctx, .swap);"},
{"lineNum":" 1132","line":"        }"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"        /// Deletes the item at the specified index in `entries` from"},
{"lineNum":" 1135","line":"        /// the hash map. The entry is removed from the underlying array"},
{"lineNum":" 1136","line":"        /// by shifting all elements forward, thereby maintaining the"},
{"lineNum":" 1137","line":"        /// current ordering."},
{"lineNum":" 1138","line":"        pub fn orderedRemoveAt(self: *Self, index: usize) void {"},
{"lineNum":" 1139","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1140","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call orderedRemoveAtContext instead.\");"},
{"lineNum":" 1141","line":"            return self.orderedRemoveAtContext(index, undefined);"},
{"lineNum":" 1142","line":"        }"},
{"lineNum":" 1143","line":"        pub fn orderedRemoveAtContext(self: *Self, index: usize, ctx: Context) void {"},
{"lineNum":" 1144","line":"            self.removeByIndex(index, if (store_hash) {} else ctx, .ordered);"},
{"lineNum":" 1145","line":"        }"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"        /// Create a copy of the hash map which can be modified separately."},
{"lineNum":" 1148","line":"        /// The copy uses the same context as this instance, but is allocated"},
{"lineNum":" 1149","line":"        /// with the provided allocator."},
{"lineNum":" 1150","line":"        pub fn clone(self: Self, allocator: Allocator) !Self {"},
{"lineNum":" 1151","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1152","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call cloneContext instead.\");"},
{"lineNum":" 1153","line":"            return self.cloneContext(allocator, undefined);"},
{"lineNum":" 1154","line":"        }"},
{"lineNum":" 1155","line":"        pub fn cloneContext(self: Self, allocator: Allocator, ctx: Context) !Self {"},
{"lineNum":" 1156","line":"            var other: Self = .{};"},
{"lineNum":" 1157","line":"            other.entries = try self.entries.clone(allocator);"},
{"lineNum":" 1158","line":"            errdefer other.entries.deinit(allocator);"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"            if (self.index_header) |header| {"},
{"lineNum":" 1161","line":"                // TODO: I\'m pretty sure this could be memcpy\'d instead of"},
{"lineNum":" 1162","line":"                // doing all this work."},
{"lineNum":" 1163","line":"                const new_header = try IndexHeader.alloc(allocator, header.bit_index);"},
{"lineNum":" 1164","line":"                other.insertAllEntriesIntoNewHeader(if (store_hash) {} else ctx, new_header);"},
{"lineNum":" 1165","line":"                other.index_header = new_header;"},
{"lineNum":" 1166","line":"            }"},
{"lineNum":" 1167","line":"            return other;"},
{"lineNum":" 1168","line":"        }"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"        /// Set the map to an empty state, making deinitialization a no-op, and"},
{"lineNum":" 1171","line":"        /// returning a copy of the original."},
{"lineNum":" 1172","line":"        pub fn move(self: *Self) Self {"},
{"lineNum":" 1173","line":"            const result = self.*;"},
{"lineNum":" 1174","line":"            self.* = .{};"},
{"lineNum":" 1175","line":"            return result;"},
{"lineNum":" 1176","line":"        }"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"        /// Rebuilds the key indexes. If the underlying entries has been modified directly, users"},
{"lineNum":" 1179","line":"        /// can call `reIndex` to update the indexes to account for these new entries."},
{"lineNum":" 1180","line":"        pub fn reIndex(self: *Self, allocator: Allocator) !void {"},
{"lineNum":" 1181","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1182","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call reIndexContext instead.\");"},
{"lineNum":" 1183","line":"            return self.reIndexContext(allocator, undefined);"},
{"lineNum":" 1184","line":"        }"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"        pub fn reIndexContext(self: *Self, allocator: Allocator, ctx: Context) !void {"},
{"lineNum":" 1187","line":"            if (self.entries.capacity <= linear_scan_max) return;"},
{"lineNum":" 1188","line":"            // We\'re going to rebuild the index header and replace the existing one (if any). The"},
{"lineNum":" 1189","line":"            // indexes should sized such that they will be at most 60% full."},
{"lineNum":" 1190","line":"            const bit_index = try IndexHeader.findBitIndex(self.entries.capacity);"},
{"lineNum":" 1191","line":"            const new_header = try IndexHeader.alloc(allocator, bit_index);"},
{"lineNum":" 1192","line":"            if (self.index_header) |header| header.free(allocator);"},
{"lineNum":" 1193","line":"            self.insertAllEntriesIntoNewHeader(if (store_hash) {} else ctx, new_header);"},
{"lineNum":" 1194","line":"            self.index_header = new_header;"},
{"lineNum":" 1195","line":"        }"},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"        /// Sorts the entries and then rebuilds the index."},
{"lineNum":" 1198","line":"        /// `sort_ctx` must have this method:"},
{"lineNum":" 1199","line":"        /// `fn lessThan(ctx: @TypeOf(ctx), a_index: usize, b_index: usize) bool`"},
{"lineNum":" 1200","line":"        pub inline fn sort(self: *Self, sort_ctx: anytype) void {"},
{"lineNum":" 1201","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1202","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call sortContext instead.\");"},
{"lineNum":" 1203","line":"            return self.sortContext(sort_ctx, undefined);"},
{"lineNum":" 1204","line":"        }"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"        pub fn sortContext(self: *Self, sort_ctx: anytype, ctx: Context) void {"},
{"lineNum":" 1207","line":"            self.entries.sort(sort_ctx);"},
{"lineNum":" 1208","line":"            const header = self.index_header orelse return;"},
{"lineNum":" 1209","line":"            header.reset();"},
{"lineNum":" 1210","line":"            self.insertAllEntriesIntoNewHeader(if (store_hash) {} else ctx, header);"},
{"lineNum":" 1211","line":"        }"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"        /// Shrinks the underlying `Entry` array to `new_len` elements and discards any associated"},
{"lineNum":" 1214","line":"        /// index entries. Keeps capacity the same."},
{"lineNum":" 1215","line":"        pub fn shrinkRetainingCapacity(self: *Self, new_len: usize) void {"},
{"lineNum":" 1216","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1217","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call shrinkRetainingCapacityContext instead.\");"},
{"lineNum":" 1218","line":"            return self.shrinkRetainingCapacityContext(new_len, undefined);"},
{"lineNum":" 1219","line":"        }"},
{"lineNum":" 1220","line":"        pub fn shrinkRetainingCapacityContext(self: *Self, new_len: usize, ctx: Context) void {"},
{"lineNum":" 1221","line":"            // Remove index entries from the new length onwards."},
{"lineNum":" 1222","line":"            // Explicitly choose to ONLY remove index entries and not the underlying array list"},
{"lineNum":" 1223","line":"            // entries as we\'re going to remove them in the subsequent shrink call."},
{"lineNum":" 1224","line":"            if (self.index_header) |header| {"},
{"lineNum":" 1225","line":"                var i: usize = new_len;"},
{"lineNum":" 1226","line":"                while (i < self.entries.len) : (i += 1)"},
{"lineNum":" 1227","line":"                    self.removeFromIndexByIndex(i, if (store_hash) {} else ctx, header);"},
{"lineNum":" 1228","line":"            }"},
{"lineNum":" 1229","line":"            self.entries.shrinkRetainingCapacity(new_len);"},
{"lineNum":" 1230","line":"        }"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"        /// Shrinks the underlying `Entry` array to `new_len` elements and discards any associated"},
{"lineNum":" 1233","line":"        /// index entries. Reduces allocated capacity."},
{"lineNum":" 1234","line":"        pub fn shrinkAndFree(self: *Self, allocator: Allocator, new_len: usize) void {"},
{"lineNum":" 1235","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1236","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call shrinkAndFreeContext instead.\");"},
{"lineNum":" 1237","line":"            return self.shrinkAndFreeContext(allocator, new_len, undefined);"},
{"lineNum":" 1238","line":"        }"},
{"lineNum":" 1239","line":"        pub fn shrinkAndFreeContext(self: *Self, allocator: Allocator, new_len: usize, ctx: Context) void {"},
{"lineNum":" 1240","line":"            // Remove index entries from the new length onwards."},
{"lineNum":" 1241","line":"            // Explicitly choose to ONLY remove index entries and not the underlying array list"},
{"lineNum":" 1242","line":"            // entries as we\'re going to remove them in the subsequent shrink call."},
{"lineNum":" 1243","line":"            if (self.index_header) |header| {"},
{"lineNum":" 1244","line":"                var i: usize = new_len;"},
{"lineNum":" 1245","line":"                while (i < self.entries.len) : (i += 1)"},
{"lineNum":" 1246","line":"                    self.removeFromIndexByIndex(i, if (store_hash) {} else ctx, header);"},
{"lineNum":" 1247","line":"            }"},
{"lineNum":" 1248","line":"            self.entries.shrinkAndFree(allocator, new_len);"},
{"lineNum":" 1249","line":"        }"},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"        /// Removes the last inserted `Entry` in the hash map and returns it."},
{"lineNum":" 1252","line":"        pub fn pop(self: *Self) KV {"},
{"lineNum":" 1253","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1254","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call popContext instead.\");"},
{"lineNum":" 1255","line":"            return self.popContext(undefined);"},
{"lineNum":" 1256","line":"        }"},
{"lineNum":" 1257","line":"        pub fn popContext(self: *Self, ctx: Context) KV {"},
{"lineNum":" 1258","line":"            const item = self.entries.get(self.entries.len - 1);"},
{"lineNum":" 1259","line":"            if (self.index_header) |header|"},
{"lineNum":" 1260","line":"                self.removeFromIndexByIndex(self.entries.len - 1, if (store_hash) {} else ctx, header);"},
{"lineNum":" 1261","line":"            self.entries.len -= 1;"},
{"lineNum":" 1262","line":"            return .{"},
{"lineNum":" 1263","line":"                .key = item.key,"},
{"lineNum":" 1264","line":"                .value = item.value,"},
{"lineNum":" 1265","line":"            };"},
{"lineNum":" 1266","line":"        }"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"        /// Removes the last inserted `Entry` in the hash map and returns it if count is nonzero."},
{"lineNum":" 1269","line":"        /// Otherwise returns null."},
{"lineNum":" 1270","line":"        pub fn popOrNull(self: *Self) ?KV {"},
{"lineNum":" 1271","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1272","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call popContext instead.\");"},
{"lineNum":" 1273","line":"            return self.popOrNullContext(undefined);"},
{"lineNum":" 1274","line":"        }"},
{"lineNum":" 1275","line":"        pub fn popOrNullContext(self: *Self, ctx: Context) ?KV {"},
{"lineNum":" 1276","line":"            return if (self.entries.len == 0) null else self.popContext(ctx);"},
{"lineNum":" 1277","line":"        }"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"        // ------------------ No pub fns below this point ------------------"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"        fn fetchRemoveByKey(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, comptime removal_type: RemovalType) ?KV {"},
{"lineNum":" 1282","line":"            const header = self.index_header orelse {"},
{"lineNum":" 1283","line":"                // Linear scan."},
{"lineNum":" 1284","line":"                const key_hash = if (store_hash) key_ctx.hash(key) else {};"},
{"lineNum":" 1285","line":"                const slice = self.entries.slice();"},
{"lineNum":" 1286","line":"                const hashes_array = if (store_hash) slice.items(.hash) else {};"},
{"lineNum":" 1287","line":"                const keys_array = slice.items(.key);"},
{"lineNum":" 1288","line":"                for (keys_array, 0..) |*item_key, i| {"},
{"lineNum":" 1289","line":"                    const hash_match = if (store_hash) hashes_array[i] == key_hash else true;"},
{"lineNum":" 1290","line":"                    if (hash_match and key_ctx.eql(key, item_key.*, i)) {"},
{"lineNum":" 1291","line":"                        const removed_entry: KV = .{"},
{"lineNum":" 1292","line":"                            .key = keys_array[i],"},
{"lineNum":" 1293","line":"                            .value = slice.items(.value)[i],"},
{"lineNum":" 1294","line":"                        };"},
{"lineNum":" 1295","line":"                        switch (removal_type) {"},
{"lineNum":" 1296","line":"                            .swap => self.entries.swapRemove(i),"},
{"lineNum":" 1297","line":"                            .ordered => self.entries.orderedRemove(i),"},
{"lineNum":" 1298","line":"                        }"},
{"lineNum":" 1299","line":"                        return removed_entry;"},
{"lineNum":" 1300","line":"                    }"},
{"lineNum":" 1301","line":"                }"},
{"lineNum":" 1302","line":"                return null;"},
{"lineNum":" 1303","line":"            };"},
{"lineNum":" 1304","line":"            return switch (header.capacityIndexType()) {"},
{"lineNum":" 1305","line":"                .u8 => self.fetchRemoveByKeyGeneric(key, key_ctx, ctx, header, u8, removal_type),"},
{"lineNum":" 1306","line":"                .u16 => self.fetchRemoveByKeyGeneric(key, key_ctx, ctx, header, u16, removal_type),"},
{"lineNum":" 1307","line":"                .u32 => self.fetchRemoveByKeyGeneric(key, key_ctx, ctx, header, u32, removal_type),"},
{"lineNum":" 1308","line":"            };"},
{"lineNum":" 1309","line":"        }"},
{"lineNum":" 1310","line":"        fn fetchRemoveByKeyGeneric(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, comptime removal_type: RemovalType) ?KV {"},
{"lineNum":" 1311","line":"            const indexes = header.indexes(I);"},
{"lineNum":" 1312","line":"            const entry_index = self.removeFromIndexByKey(key, key_ctx, header, I, indexes) orelse return null;"},
{"lineNum":" 1313","line":"            const slice = self.entries.slice();"},
{"lineNum":" 1314","line":"            const removed_entry: KV = .{"},
{"lineNum":" 1315","line":"                .key = slice.items(.key)[entry_index],"},
{"lineNum":" 1316","line":"                .value = slice.items(.value)[entry_index],"},
{"lineNum":" 1317","line":"            };"},
{"lineNum":" 1318","line":"            self.removeFromArrayAndUpdateIndex(entry_index, ctx, header, I, indexes, removal_type);"},
{"lineNum":" 1319","line":"            return removed_entry;"},
{"lineNum":" 1320","line":"        }"},
{"lineNum":" 1321","line":""},
{"lineNum":" 1322","line":"        fn removeByKey(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, comptime removal_type: RemovalType) bool {"},
{"lineNum":" 1323","line":"            const header = self.index_header orelse {"},
{"lineNum":" 1324","line":"                // Linear scan."},
{"lineNum":" 1325","line":"                const key_hash = if (store_hash) key_ctx.hash(key) else {};"},
{"lineNum":" 1326","line":"                const slice = self.entries.slice();"},
{"lineNum":" 1327","line":"                const hashes_array = if (store_hash) slice.items(.hash) else {};"},
{"lineNum":" 1328","line":"                const keys_array = slice.items(.key);"},
{"lineNum":" 1329","line":"                for (keys_array, 0..) |*item_key, i| {"},
{"lineNum":" 1330","line":"                    const hash_match = if (store_hash) hashes_array[i] == key_hash else true;"},
{"lineNum":" 1331","line":"                    if (hash_match and key_ctx.eql(key, item_key.*, i)) {"},
{"lineNum":" 1332","line":"                        switch (removal_type) {"},
{"lineNum":" 1333","line":"                            .swap => self.entries.swapRemove(i),"},
{"lineNum":" 1334","line":"                            .ordered => self.entries.orderedRemove(i),"},
{"lineNum":" 1335","line":"                        }"},
{"lineNum":" 1336","line":"                        return true;"},
{"lineNum":" 1337","line":"                    }"},
{"lineNum":" 1338","line":"                }"},
{"lineNum":" 1339","line":"                return false;"},
{"lineNum":" 1340","line":"            };"},
{"lineNum":" 1341","line":"            return switch (header.capacityIndexType()) {"},
{"lineNum":" 1342","line":"                .u8 => self.removeByKeyGeneric(key, key_ctx, ctx, header, u8, removal_type),"},
{"lineNum":" 1343","line":"                .u16 => self.removeByKeyGeneric(key, key_ctx, ctx, header, u16, removal_type),"},
{"lineNum":" 1344","line":"                .u32 => self.removeByKeyGeneric(key, key_ctx, ctx, header, u32, removal_type),"},
{"lineNum":" 1345","line":"            };"},
{"lineNum":" 1346","line":"        }"},
{"lineNum":" 1347","line":"        fn removeByKeyGeneric(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, comptime removal_type: RemovalType) bool {"},
{"lineNum":" 1348","line":"            const indexes = header.indexes(I);"},
{"lineNum":" 1349","line":"            const entry_index = self.removeFromIndexByKey(key, key_ctx, header, I, indexes) orelse return false;"},
{"lineNum":" 1350","line":"            self.removeFromArrayAndUpdateIndex(entry_index, ctx, header, I, indexes, removal_type);"},
{"lineNum":" 1351","line":"            return true;"},
{"lineNum":" 1352","line":"        }"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"        fn removeByIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, comptime removal_type: RemovalType) void {"},
{"lineNum":" 1355","line":"            assert(entry_index < self.entries.len);"},
{"lineNum":" 1356","line":"            const header = self.index_header orelse {"},
{"lineNum":" 1357","line":"                switch (removal_type) {"},
{"lineNum":" 1358","line":"                    .swap => self.entries.swapRemove(entry_index),"},
{"lineNum":" 1359","line":"                    .ordered => self.entries.orderedRemove(entry_index),"},
{"lineNum":" 1360","line":"                }"},
{"lineNum":" 1361","line":"                return;"},
{"lineNum":" 1362","line":"            };"},
{"lineNum":" 1363","line":"            switch (header.capacityIndexType()) {"},
{"lineNum":" 1364","line":"                .u8 => self.removeByIndexGeneric(entry_index, ctx, header, u8, removal_type),"},
{"lineNum":" 1365","line":"                .u16 => self.removeByIndexGeneric(entry_index, ctx, header, u16, removal_type),"},
{"lineNum":" 1366","line":"                .u32 => self.removeByIndexGeneric(entry_index, ctx, header, u32, removal_type),"},
{"lineNum":" 1367","line":"            }"},
{"lineNum":" 1368","line":"        }"},
{"lineNum":" 1369","line":"        fn removeByIndexGeneric(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, comptime removal_type: RemovalType) void {"},
{"lineNum":" 1370","line":"            const indexes = header.indexes(I);"},
{"lineNum":" 1371","line":"            self.removeFromIndexByIndexGeneric(entry_index, ctx, header, I, indexes);"},
{"lineNum":" 1372","line":"            self.removeFromArrayAndUpdateIndex(entry_index, ctx, header, I, indexes, removal_type);"},
{"lineNum":" 1373","line":"        }"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"        fn removeFromArrayAndUpdateIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, indexes: []Index(I), comptime removal_type: RemovalType) void {"},
{"lineNum":" 1376","line":"            const last_index = self.entries.len - 1; // overflow => remove from empty map"},
{"lineNum":" 1377","line":"            switch (removal_type) {"},
{"lineNum":" 1378","line":"                .swap => {"},
{"lineNum":" 1379","line":"                    if (last_index != entry_index) {"},
{"lineNum":" 1380","line":"                        // Because of the swap remove, now we need to update the index that was"},
{"lineNum":" 1381","line":"                        // pointing to the last entry and is now pointing to this removed item slot."},
{"lineNum":" 1382","line":"                        self.updateEntryIndex(header, last_index, entry_index, ctx, I, indexes);"},
{"lineNum":" 1383","line":"                    }"},
{"lineNum":" 1384","line":"                    // updateEntryIndex reads from the old entry index,"},
{"lineNum":" 1385","line":"                    // so it needs to run before removal."},
{"lineNum":" 1386","line":"                    self.entries.swapRemove(entry_index);"},
{"lineNum":" 1387","line":"                },"},
{"lineNum":" 1388","line":"                .ordered => {"},
{"lineNum":" 1389","line":"                    var i: usize = entry_index;"},
{"lineNum":" 1390","line":"                    while (i < last_index) : (i += 1) {"},
{"lineNum":" 1391","line":"                        // Because of the ordered remove, everything from the entry index onwards has"},
{"lineNum":" 1392","line":"                        // been shifted forward so we\'ll need to update the index entries."},
{"lineNum":" 1393","line":"                        self.updateEntryIndex(header, i + 1, i, ctx, I, indexes);"},
{"lineNum":" 1394","line":"                    }"},
{"lineNum":" 1395","line":"                    // updateEntryIndex reads from the old entry index,"},
{"lineNum":" 1396","line":"                    // so it needs to run before removal."},
{"lineNum":" 1397","line":"                    self.entries.orderedRemove(entry_index);"},
{"lineNum":" 1398","line":"                },"},
{"lineNum":" 1399","line":"            }"},
{"lineNum":" 1400","line":"        }"},
{"lineNum":" 1401","line":""},
{"lineNum":" 1402","line":"        fn updateEntryIndex("},
{"lineNum":" 1403","line":"            self: *Self,"},
{"lineNum":" 1404","line":"            header: *IndexHeader,"},
{"lineNum":" 1405","line":"            old_entry_index: usize,"},
{"lineNum":" 1406","line":"            new_entry_index: usize,"},
{"lineNum":" 1407","line":"            ctx: ByIndexContext,"},
{"lineNum":" 1408","line":"            comptime I: type,"},
{"lineNum":" 1409","line":"            indexes: []Index(I),"},
{"lineNum":" 1410","line":"        ) void {"},
{"lineNum":" 1411","line":"            const slot = self.getSlotByIndex(old_entry_index, ctx, header, I, indexes);"},
{"lineNum":" 1412","line":"            indexes[slot].entry_index = @as(I, @intCast(new_entry_index));"},
{"lineNum":" 1413","line":"        }"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"        fn removeFromIndexByIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader) void {"},
{"lineNum":" 1416","line":"            switch (header.capacityIndexType()) {"},
{"lineNum":" 1417","line":"                .u8 => self.removeFromIndexByIndexGeneric(entry_index, ctx, header, u8, header.indexes(u8)),"},
{"lineNum":" 1418","line":"                .u16 => self.removeFromIndexByIndexGeneric(entry_index, ctx, header, u16, header.indexes(u16)),"},
{"lineNum":" 1419","line":"                .u32 => self.removeFromIndexByIndexGeneric(entry_index, ctx, header, u32, header.indexes(u32)),"},
{"lineNum":" 1420","line":"            }"},
{"lineNum":" 1421","line":"        }"},
{"lineNum":" 1422","line":"        fn removeFromIndexByIndexGeneric(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, indexes: []Index(I)) void {"},
{"lineNum":" 1423","line":"            const slot = self.getSlotByIndex(entry_index, ctx, header, I, indexes);"},
{"lineNum":" 1424","line":"            removeSlot(slot, header, I, indexes);"},
{"lineNum":" 1425","line":"        }"},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"        fn removeFromIndexByKey(self: *Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type, indexes: []Index(I)) ?usize {"},
{"lineNum":" 1428","line":"            const slot = self.getSlotByKey(key, ctx, header, I, indexes) orelse return null;"},
{"lineNum":" 1429","line":"            const removed_entry_index = indexes[slot].entry_index;"},
{"lineNum":" 1430","line":"            removeSlot(slot, header, I, indexes);"},
{"lineNum":" 1431","line":"            return removed_entry_index;"},
{"lineNum":" 1432","line":"        }"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"        fn removeSlot(removed_slot: usize, header: *IndexHeader, comptime I: type, indexes: []Index(I)) void {"},
{"lineNum":" 1435","line":"            const start_index = removed_slot +% 1;"},
{"lineNum":" 1436","line":"            const end_index = start_index +% indexes.len;"},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"            var last_slot = removed_slot;"},
{"lineNum":" 1439","line":"            var index: usize = start_index;"},
{"lineNum":" 1440","line":"            while (index != end_index) : (index +%= 1) {"},
{"lineNum":" 1441","line":"                const slot = header.constrainIndex(index);"},
{"lineNum":" 1442","line":"                const slot_data = indexes[slot];"},
{"lineNum":" 1443","line":"                if (slot_data.isEmpty() or slot_data.distance_from_start_index == 0) {"},
{"lineNum":" 1444","line":"                    indexes[last_slot].setEmpty();"},
{"lineNum":" 1445","line":"                    return;"},
{"lineNum":" 1446","line":"                }"},
{"lineNum":" 1447","line":"                indexes[last_slot] = .{"},
{"lineNum":" 1448","line":"                    .entry_index = slot_data.entry_index,"},
{"lineNum":" 1449","line":"                    .distance_from_start_index = slot_data.distance_from_start_index - 1,"},
{"lineNum":" 1450","line":"                };"},
{"lineNum":" 1451","line":"                last_slot = slot;"},
{"lineNum":" 1452","line":"            }"},
{"lineNum":" 1453","line":"            unreachable;"},
{"lineNum":" 1454","line":"        }"},
{"lineNum":" 1455","line":""},
{"lineNum":" 1456","line":"        fn getSlotByIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, indexes: []Index(I)) usize {"},
{"lineNum":" 1457","line":"            const slice = self.entries.slice();"},
{"lineNum":" 1458","line":"            const h = if (store_hash) slice.items(.hash)[entry_index] else checkedHash(ctx, slice.items(.key)[entry_index]);"},
{"lineNum":" 1459","line":"            const start_index = safeTruncate(usize, h);"},
{"lineNum":" 1460","line":"            const end_index = start_index +% indexes.len;"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"            var index = start_index;"},
{"lineNum":" 1463","line":"            var distance_from_start_index: I = 0;"},
{"lineNum":" 1464","line":"            while (index != end_index) : ({"},
{"lineNum":" 1465","line":"                index +%= 1;"},
{"lineNum":" 1466","line":"                distance_from_start_index += 1;"},
{"lineNum":" 1467","line":"            }) {"},
{"lineNum":" 1468","line":"                const slot = header.constrainIndex(index);"},
{"lineNum":" 1469","line":"                const slot_data = indexes[slot];"},
{"lineNum":" 1470","line":""},
{"lineNum":" 1471","line":"                // This is the fundamental property of the array hash map index.  If this"},
{"lineNum":" 1472","line":"                // assert fails, it probably means that the entry was not in the index."},
{"lineNum":" 1473","line":"                assert(!slot_data.isEmpty());"},
{"lineNum":" 1474","line":"                assert(slot_data.distance_from_start_index >= distance_from_start_index);"},
{"lineNum":" 1475","line":""},
{"lineNum":" 1476","line":"                if (slot_data.entry_index == entry_index) {"},
{"lineNum":" 1477","line":"                    return slot;"},
{"lineNum":" 1478","line":"                }"},
{"lineNum":" 1479","line":"            }"},
{"lineNum":" 1480","line":"            unreachable;"},
{"lineNum":" 1481","line":"        }"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"        /// Must `ensureTotalCapacity`/`ensureUnusedCapacity` before calling this."},
{"lineNum":" 1484","line":"        fn getOrPutInternal(self: *Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type) GetOrPutResult {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1485","line":"            const slice = self.entries.slice();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1486","line":"            const hashes_array = if (store_hash) slice.items(.hash) else {};"},
{"lineNum":" 1487","line":"            const keys_array = slice.items(.key);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1488","line":"            const values_array = slice.items(.value);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1489","line":"            const indexes = header.indexes(I);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"            const h = checkedHash(ctx, key);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1492","line":"            const start_index = safeTruncate(usize, h);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1493","line":"            const end_index = start_index +% indexes.len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"            var index = start_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1496","line":"            var distance_from_start_index: I = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1497","line":"            while (index != end_index) : ({","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1498","line":"                index +%= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1499","line":"                distance_from_start_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1500","line":"            }) {"},
{"lineNum":" 1501","line":"                var slot = header.constrainIndex(index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1502","line":"                var slot_data = indexes[slot];","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1503","line":""},
{"lineNum":" 1504","line":"                // If the slot is empty, there can be no more items in this run."},
{"lineNum":" 1505","line":"                // We didn\'t find a matching item, so this must be new."},
{"lineNum":" 1506","line":"                // Put it in the empty slot."},
{"lineNum":" 1507","line":"                if (slot_data.isEmpty()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1508","line":"                    const new_index = self.entries.addOneAssumeCapacity();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1509","line":"                    indexes[slot] = .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1510","line":"                        .distance_from_start_index = distance_from_start_index,"},
{"lineNum":" 1511","line":"                        .entry_index = @as(I, @intCast(new_index)),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1512","line":"                    };"},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"                    // update the hash if applicable"},
{"lineNum":" 1515","line":"                    if (store_hash) hashes_array.ptr[new_index] = h;"},
{"lineNum":" 1516","line":""},
{"lineNum":" 1517","line":"                    return .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1518","line":"                        .found_existing = false,"},
{"lineNum":" 1519","line":"                        .key_ptr = &keys_array.ptr[new_index],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1520","line":"                        // workaround for #6974"},
{"lineNum":" 1521","line":"                        .value_ptr = if (@sizeOf(*V) == 0) undefined else &values_array.ptr[new_index],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1522","line":"                        .index = new_index,"},
{"lineNum":" 1523","line":"                    };"},
{"lineNum":" 1524","line":"                }"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"                // This pointer survives the following append because we call"},
{"lineNum":" 1527","line":"                // entries.ensureTotalCapacity before getOrPutInternal."},
{"lineNum":" 1528","line":"                const i = slot_data.entry_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1529","line":"                const hash_match = if (store_hash) h == hashes_array[i] else true;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1530","line":"                if (hash_match and checkedEql(ctx, key, keys_array[i], i)) {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1531","line":"                    return .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1532","line":"                        .found_existing = true,"},
{"lineNum":" 1533","line":"                        .key_ptr = &keys_array[slot_data.entry_index],","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1534","line":"                        // workaround for #6974"},
{"lineNum":" 1535","line":"                        .value_ptr = if (@sizeOf(*V) == 0) undefined else &values_array[slot_data.entry_index],","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1536","line":"                        .index = slot_data.entry_index,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1537","line":"                    };"},
{"lineNum":" 1538","line":"                }"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"                // If the entry is closer to its target than our current distance,"},
{"lineNum":" 1541","line":"                // the entry we are looking for does not exist.  It would be in"},
{"lineNum":" 1542","line":"                // this slot instead if it was here.  So stop looking, and switch"},
{"lineNum":" 1543","line":"                // to insert mode."},
{"lineNum":" 1544","line":"                if (slot_data.distance_from_start_index < distance_from_start_index) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1545","line":"                    // In this case, we did not find the item. We will put a new entry."},
{"lineNum":" 1546","line":"                    // However, we will use this index for the new entry, and move"},
{"lineNum":" 1547","line":"                    // the previous index down the line, to keep the max distance_from_start_index"},
{"lineNum":" 1548","line":"                    // as small as possible."},
{"lineNum":" 1549","line":"                    const new_index = self.entries.addOneAssumeCapacity();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1550","line":"                    if (store_hash) hashes_array.ptr[new_index] = h;"},
{"lineNum":" 1551","line":"                    indexes[slot] = .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1552","line":"                        .entry_index = @as(I, @intCast(new_index)),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1553","line":"                        .distance_from_start_index = distance_from_start_index,"},
{"lineNum":" 1554","line":"                    };"},
{"lineNum":" 1555","line":"                    distance_from_start_index = slot_data.distance_from_start_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1556","line":"                    var displaced_index = slot_data.entry_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"                    // Find somewhere to put the index we replaced by shifting"},
{"lineNum":" 1559","line":"                    // following indexes backwards."},
{"lineNum":" 1560","line":"                    index +%= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1561","line":"                    distance_from_start_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1562","line":"                    while (index != end_index) : ({","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1563","line":"                        index +%= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1564","line":"                        distance_from_start_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1565","line":"                    }) {"},
{"lineNum":" 1566","line":"                        slot = header.constrainIndex(index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1567","line":"                        slot_data = indexes[slot];","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1568","line":"                        if (slot_data.isEmpty()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1569","line":"                            indexes[slot] = .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1570","line":"                                .entry_index = displaced_index,"},
{"lineNum":" 1571","line":"                                .distance_from_start_index = distance_from_start_index,"},
{"lineNum":" 1572","line":"                            };"},
{"lineNum":" 1573","line":"                            return .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1574","line":"                                .found_existing = false,"},
{"lineNum":" 1575","line":"                                .key_ptr = &keys_array.ptr[new_index],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1576","line":"                                // workaround for #6974"},
{"lineNum":" 1577","line":"                                .value_ptr = if (@sizeOf(*V) == 0) undefined else &values_array.ptr[new_index],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1578","line":"                                .index = new_index,"},
{"lineNum":" 1579","line":"                            };"},
{"lineNum":" 1580","line":"                        }"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"                        if (slot_data.distance_from_start_index < distance_from_start_index) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1583","line":"                            indexes[slot] = .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1584","line":"                                .entry_index = displaced_index,"},
{"lineNum":" 1585","line":"                                .distance_from_start_index = distance_from_start_index,"},
{"lineNum":" 1586","line":"                            };"},
{"lineNum":" 1587","line":"                            displaced_index = slot_data.entry_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1588","line":"                            distance_from_start_index = slot_data.distance_from_start_index;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1589","line":"                        }"},
{"lineNum":" 1590","line":"                    }"},
{"lineNum":" 1591","line":"                    unreachable;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1592","line":"                }"},
{"lineNum":" 1593","line":"            }"},
{"lineNum":" 1594","line":"            unreachable;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1595","line":"        }"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"        fn getSlotByKey(self: Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type, indexes: []Index(I)) ?usize {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1598","line":"            const slice = self.entries.slice();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1599","line":"            const hashes_array = if (store_hash) slice.items(.hash) else {};"},
{"lineNum":" 1600","line":"            const keys_array = slice.items(.key);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1601","line":"            const h = checkedHash(ctx, key);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1602","line":""},
{"lineNum":" 1603","line":"            const start_index = safeTruncate(usize, h);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1604","line":"            const end_index = start_index +% indexes.len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1605","line":""},
{"lineNum":" 1606","line":"            var index = start_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1607","line":"            var distance_from_start_index: I = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1608","line":"            while (index != end_index) : ({","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1609","line":"                index +%= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1610","line":"                distance_from_start_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1611","line":"            }) {"},
{"lineNum":" 1612","line":"                const slot = header.constrainIndex(index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1613","line":"                const slot_data = indexes[slot];","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1614","line":"                if (slot_data.isEmpty() or slot_data.distance_from_start_index < distance_from_start_index)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1615","line":"                    return null;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"                const i = slot_data.entry_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1618","line":"                const hash_match = if (store_hash) h == hashes_array[i] else true;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1619","line":"                if (hash_match and checkedEql(ctx, key, keys_array[i], i))","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1620","line":"                    return slot;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1621","line":"            }"},
{"lineNum":" 1622","line":"            unreachable;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1623","line":"        }"},
{"lineNum":" 1624","line":""},
{"lineNum":" 1625","line":"        fn insertAllEntriesIntoNewHeader(self: *Self, ctx: ByIndexContext, header: *IndexHeader) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1626","line":"            switch (header.capacityIndexType()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1627","line":"                .u8 => return self.insertAllEntriesIntoNewHeaderGeneric(ctx, header, u8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1628","line":"                .u16 => return self.insertAllEntriesIntoNewHeaderGeneric(ctx, header, u16),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1629","line":"                .u32 => return self.insertAllEntriesIntoNewHeaderGeneric(ctx, header, u32),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1630","line":"            }"},
{"lineNum":" 1631","line":"        }"},
{"lineNum":" 1632","line":"        fn insertAllEntriesIntoNewHeaderGeneric(self: *Self, ctx: ByIndexContext, header: *IndexHeader, comptime I: type) void {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1633","line":"            const slice = self.entries.slice();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1634","line":"            const items = if (store_hash) slice.items(.hash) else slice.items(.key);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1635","line":"            const indexes = header.indexes(I);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1636","line":""},
{"lineNum":" 1637","line":"            entry_loop: for (items, 0..) |key, i| {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1638","line":"                const h = if (store_hash) key else checkedHash(ctx, key);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1639","line":"                const start_index = safeTruncate(usize, h);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1640","line":"                const end_index = start_index +% indexes.len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1641","line":"                var index = start_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1642","line":"                var entry_index = @as(I, @intCast(i));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1643","line":"                var distance_from_start_index: I = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1644","line":"                while (index != end_index) : ({","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1645","line":"                    index +%= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1646","line":"                    distance_from_start_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1647","line":"                }) {"},
{"lineNum":" 1648","line":"                    const slot = header.constrainIndex(index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1649","line":"                    const next_index = indexes[slot];","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1650","line":"                    if (next_index.isEmpty()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1651","line":"                        indexes[slot] = .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1652","line":"                            .distance_from_start_index = distance_from_start_index,"},
{"lineNum":" 1653","line":"                            .entry_index = entry_index,"},
{"lineNum":" 1654","line":"                        };"},
{"lineNum":" 1655","line":"                        continue :entry_loop;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1656","line":"                    }"},
{"lineNum":" 1657","line":"                    if (next_index.distance_from_start_index < distance_from_start_index) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1658","line":"                        indexes[slot] = .{","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1659","line":"                            .distance_from_start_index = distance_from_start_index,"},
{"lineNum":" 1660","line":"                            .entry_index = entry_index,"},
{"lineNum":" 1661","line":"                        };"},
{"lineNum":" 1662","line":"                        distance_from_start_index = next_index.distance_from_start_index;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1663","line":"                        entry_index = next_index.entry_index;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1664","line":"                    }"},
{"lineNum":" 1665","line":"                }"},
{"lineNum":" 1666","line":"                unreachable;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1667","line":"            }"},
{"lineNum":" 1668","line":"        }"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"        inline fn checkedHash(ctx: anytype, key: anytype) u32 {"},
{"lineNum":" 1671","line":"            comptime std.hash_map.verifyContext(@TypeOf(ctx), @TypeOf(key), K, u32, true);"},
{"lineNum":" 1672","line":"            // If you get a compile error on the next line, it means that your"},
{"lineNum":" 1673","line":"            // generic hash function doesn\'t accept your key."},
{"lineNum":" 1674","line":"            const hash = ctx.hash(key);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1675","line":"            if (@TypeOf(hash) != u32) {"},
{"lineNum":" 1676","line":"                @compileError(\"Context \" ++ @typeName(@TypeOf(ctx)) ++ \" has a generic hash function that returns the wrong type!\\n\" ++"},
{"lineNum":" 1677","line":"                    @typeName(u32) ++ \" was expected, but found \" ++ @typeName(@TypeOf(hash)));"},
{"lineNum":" 1678","line":"            }"},
{"lineNum":" 1679","line":"            return hash;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1680","line":"        }"},
{"lineNum":" 1681","line":"        inline fn checkedEql(ctx: anytype, a: anytype, b: K, b_index: usize) bool {"},
{"lineNum":" 1682","line":"            comptime std.hash_map.verifyContext(@TypeOf(ctx), @TypeOf(a), K, u32, true);"},
{"lineNum":" 1683","line":"            // If you get a compile error on the next line, it means that your"},
{"lineNum":" 1684","line":"            // generic eql function doesn\'t accept (self, adapt key, K, index)."},
{"lineNum":" 1685","line":"            const eql = ctx.eql(a, b, b_index);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1686","line":"            if (@TypeOf(eql) != bool) {"},
{"lineNum":" 1687","line":"                @compileError(\"Context \" ++ @typeName(@TypeOf(ctx)) ++ \" has a generic eql function that returns the wrong type!\\n\" ++"},
{"lineNum":" 1688","line":"                    @typeName(bool) ++ \" was expected, but found \" ++ @typeName(@TypeOf(eql)));"},
{"lineNum":" 1689","line":"            }"},
{"lineNum":" 1690","line":"            return eql;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1691","line":"        }"},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"        fn dumpState(self: Self, comptime keyFmt: []const u8, comptime valueFmt: []const u8) void {"},
{"lineNum":" 1694","line":"            if (@sizeOf(ByIndexContext) != 0)"},
{"lineNum":" 1695","line":"                @compileError(\"Cannot infer context \" ++ @typeName(Context) ++ \", call dumpStateContext instead.\");"},
{"lineNum":" 1696","line":"            self.dumpStateContext(keyFmt, valueFmt, undefined);"},
{"lineNum":" 1697","line":"        }"},
{"lineNum":" 1698","line":"        fn dumpStateContext(self: Self, comptime keyFmt: []const u8, comptime valueFmt: []const u8, ctx: Context) void {"},
{"lineNum":" 1699","line":"            const p = std.debug.print;"},
{"lineNum":" 1700","line":"            p(\"{s}:\\n\", .{@typeName(Self)});"},
{"lineNum":" 1701","line":"            const slice = self.entries.slice();"},
{"lineNum":" 1702","line":"            const hash_status = if (store_hash) \"stored\" else \"computed\";"},
{"lineNum":" 1703","line":"            p(\"  len={} capacity={} hashes {s}\\n\", .{ slice.len, slice.capacity, hash_status });"},
{"lineNum":" 1704","line":"            var i: usize = 0;"},
{"lineNum":" 1705","line":"            const mask: u32 = if (self.index_header) |header| header.mask() else ~@as(u32, 0);"},
{"lineNum":" 1706","line":"            while (i < slice.len) : (i += 1) {"},
{"lineNum":" 1707","line":"                const hash = if (store_hash) slice.items(.hash)[i] else checkedHash(ctx, slice.items(.key)[i]);"},
{"lineNum":" 1708","line":"                if (store_hash) {"},
{"lineNum":" 1709","line":"                    p("},
{"lineNum":" 1710","line":"                        \"  [{}]: key=\" ++ keyFmt ++ \" value=\" ++ valueFmt ++ \" hash=0x{x} slot=[0x{x}]\\n\","},
{"lineNum":" 1711","line":"                        .{ i, slice.items(.key)[i], slice.items(.value)[i], hash, hash & mask },"},
{"lineNum":" 1712","line":"                    );"},
{"lineNum":" 1713","line":"                } else {"},
{"lineNum":" 1714","line":"                    p("},
{"lineNum":" 1715","line":"                        \"  [{}]: key=\" ++ keyFmt ++ \" value=\" ++ valueFmt ++ \" slot=[0x{x}]\\n\","},
{"lineNum":" 1716","line":"                        .{ i, slice.items(.key)[i], slice.items(.value)[i], hash & mask },"},
{"lineNum":" 1717","line":"                    );"},
{"lineNum":" 1718","line":"                }"},
{"lineNum":" 1719","line":"            }"},
{"lineNum":" 1720","line":"            if (self.index_header) |header| {"},
{"lineNum":" 1721","line":"                p(\"\\n\", .{});"},
{"lineNum":" 1722","line":"                switch (header.capacityIndexType()) {"},
{"lineNum":" 1723","line":"                    .u8 => dumpIndex(header, u8),"},
{"lineNum":" 1724","line":"                    .u16 => dumpIndex(header, u16),"},
{"lineNum":" 1725","line":"                    .u32 => dumpIndex(header, u32),"},
{"lineNum":" 1726","line":"                }"},
{"lineNum":" 1727","line":"            }"},
{"lineNum":" 1728","line":"        }"},
{"lineNum":" 1729","line":"        fn dumpIndex(header: *IndexHeader, comptime I: type) void {"},
{"lineNum":" 1730","line":"            const p = std.debug.print;"},
{"lineNum":" 1731","line":"            p(\"  index len=0x{x} type={}\\n\", .{ header.length(), header.capacityIndexType() });"},
{"lineNum":" 1732","line":"            const indexes = header.indexes(I);"},
{"lineNum":" 1733","line":"            if (indexes.len == 0) return;"},
{"lineNum":" 1734","line":"            var is_empty = false;"},
{"lineNum":" 1735","line":"            for (indexes, 0..) |idx, i| {"},
{"lineNum":" 1736","line":"                if (idx.isEmpty()) {"},
{"lineNum":" 1737","line":"                    is_empty = true;"},
{"lineNum":" 1738","line":"                } else {"},
{"lineNum":" 1739","line":"                    if (is_empty) {"},
{"lineNum":" 1740","line":"                        is_empty = false;"},
{"lineNum":" 1741","line":"                        p(\"  ...\\n\", .{});"},
{"lineNum":" 1742","line":"                    }"},
{"lineNum":" 1743","line":"                    p(\"  [0x{x}]: [{}] +{}\\n\", .{ i, idx.entry_index, idx.distance_from_start_index });"},
{"lineNum":" 1744","line":"                }"},
{"lineNum":" 1745","line":"            }"},
{"lineNum":" 1746","line":"            if (is_empty) {"},
{"lineNum":" 1747","line":"                p(\"  ...\\n\", .{});"},
{"lineNum":" 1748","line":"            }"},
{"lineNum":" 1749","line":"        }"},
{"lineNum":" 1750","line":"    };"},
{"lineNum":" 1751","line":"}"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":"const CapacityIndexType = enum { u8, u16, u32 };"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"fn capacityIndexType(bit_index: u8) CapacityIndexType {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1756","line":"    if (bit_index <= 8)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1757","line":"        return .u8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1758","line":"    if (bit_index <= 16)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1759","line":"        return .u16;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1760","line":"    assert(bit_index <= 32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1761","line":"    return .u32;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1762","line":"}"},
{"lineNum":" 1763","line":""},
{"lineNum":" 1764","line":"fn capacityIndexSize(bit_index: u8) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1765","line":"    switch (capacityIndexType(bit_index)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1766","line":"        .u8 => return @sizeOf(Index(u8)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1767","line":"        .u16 => return @sizeOf(Index(u16)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1768","line":"        .u32 => return @sizeOf(Index(u32)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1769","line":"    }"},
{"lineNum":" 1770","line":"}"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"/// @truncate fails if the target type is larger than the"},
{"lineNum":" 1773","line":"/// target value.  This causes problems when one of the types"},
{"lineNum":" 1774","line":"/// is usize, which may be larger or smaller than u32 on different"},
{"lineNum":" 1775","line":"/// systems.  This version of truncate is safe to use if either"},
{"lineNum":" 1776","line":"/// parameter has dynamic size, and will perform widening conversion"},
{"lineNum":" 1777","line":"/// when needed.  Both arguments must have the same signedness."},
{"lineNum":" 1778","line":"fn safeTruncate(comptime T: type, val: anytype) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1779","line":"    if (@bitSizeOf(T) >= @bitSizeOf(@TypeOf(val)))"},
{"lineNum":" 1780","line":"        return val;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1781","line":"    return @as(T, @truncate(val));"},
{"lineNum":" 1782","line":"}"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"/// A single entry in the lookup acceleration structure.  These structs"},
{"lineNum":" 1785","line":"/// are found in an array after the IndexHeader.  Hashes index into this"},
{"lineNum":" 1786","line":"/// array, and linear probing is used for collisions."},
{"lineNum":" 1787","line":"fn Index(comptime I: type) type {"},
{"lineNum":" 1788","line":"    return extern struct {"},
{"lineNum":" 1789","line":"        const Self = @This();"},
{"lineNum":" 1790","line":""},
{"lineNum":" 1791","line":"        /// The index of this entry in the backing store.  If the index is"},
{"lineNum":" 1792","line":"        /// empty, this is empty_sentinel."},
{"lineNum":" 1793","line":"        entry_index: I,"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"        /// The distance between this slot and its ideal placement.  This is"},
{"lineNum":" 1796","line":"        /// used to keep maximum scan length small.  This value is undefined"},
{"lineNum":" 1797","line":"        /// if the index is empty."},
{"lineNum":" 1798","line":"        distance_from_start_index: I,"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"        /// The special entry_index value marking an empty slot."},
{"lineNum":" 1801","line":"        const empty_sentinel = ~@as(I, 0);"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"        /// A constant empty index"},
{"lineNum":" 1804","line":"        const empty = Self{"},
{"lineNum":" 1805","line":"            .entry_index = empty_sentinel,"},
{"lineNum":" 1806","line":"            .distance_from_start_index = undefined,"},
{"lineNum":" 1807","line":"        };"},
{"lineNum":" 1808","line":""},
{"lineNum":" 1809","line":"        /// Checks if a slot is empty"},
{"lineNum":" 1810","line":"        fn isEmpty(idx: Self) bool {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1811","line":"            return idx.entry_index == empty_sentinel;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1812","line":"        }"},
{"lineNum":" 1813","line":""},
{"lineNum":" 1814","line":"        /// Sets a slot to empty"},
{"lineNum":" 1815","line":"        fn setEmpty(idx: *Self) void {"},
{"lineNum":" 1816","line":"            idx.entry_index = empty_sentinel;"},
{"lineNum":" 1817","line":"            idx.distance_from_start_index = undefined;"},
{"lineNum":" 1818","line":"        }"},
{"lineNum":" 1819","line":"    };"},
{"lineNum":" 1820","line":"}"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"/// the byte size of the index must fit in a usize.  This is a power of two"},
{"lineNum":" 1823","line":"/// length * the size of an Index(u32).  The index is 8 bytes (3 bits repr)"},
{"lineNum":" 1824","line":"/// and max_usize + 1 is not representable, so we need to subtract out 4 bits."},
{"lineNum":" 1825","line":"const max_representable_index_len = @bitSizeOf(usize) - 4;"},
{"lineNum":" 1826","line":"const max_bit_index = @min(32, max_representable_index_len);"},
{"lineNum":" 1827","line":"const min_bit_index = 5;"},
{"lineNum":" 1828","line":"const max_capacity = (1 << max_bit_index) - 1;"},
{"lineNum":" 1829","line":"const index_capacities = blk: {"},
{"lineNum":" 1830","line":"    var caps: [max_bit_index + 1]u32 = undefined;"},
{"lineNum":" 1831","line":"    for (caps[0..max_bit_index], 0..) |*item, i| {"},
{"lineNum":" 1832","line":"        item.* = (1 << i) * 3 / 5;"},
{"lineNum":" 1833","line":"    }"},
{"lineNum":" 1834","line":"    caps[max_bit_index] = max_capacity;"},
{"lineNum":" 1835","line":"    break :blk caps;"},
{"lineNum":" 1836","line":"};"},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"/// This struct is trailed by two arrays of length indexes_len"},
{"lineNum":" 1839","line":"/// of integers, whose integer size is determined by indexes_len."},
{"lineNum":" 1840","line":"/// These arrays are indexed by constrainIndex(hash).  The"},
{"lineNum":" 1841","line":"/// entryIndexes array contains the index in the dense backing store"},
{"lineNum":" 1842","line":"/// where the entry\'s data can be found.  Entries which are not in"},
{"lineNum":" 1843","line":"/// use have their index value set to emptySentinel(I)."},
{"lineNum":" 1844","line":"/// The entryDistances array stores the distance between an entry"},
{"lineNum":" 1845","line":"/// and its ideal hash bucket.  This is used when adding elements"},
{"lineNum":" 1846","line":"/// to balance the maximum scan length."},
{"lineNum":" 1847","line":"const IndexHeader = struct {"},
{"lineNum":" 1848","line":"    /// This field tracks the total number of items in the arrays following"},
{"lineNum":" 1849","line":"    /// this header.  It is the bit index of the power of two number of indices."},
{"lineNum":" 1850","line":"    /// This value is between min_bit_index and max_bit_index, inclusive."},
{"lineNum":" 1851","line":"    bit_index: u8 align(@alignOf(u32)),"},
{"lineNum":" 1852","line":""},
{"lineNum":" 1853","line":"    /// Map from an incrementing index to an index slot in the attached arrays."},
{"lineNum":" 1854","line":"    fn constrainIndex(header: IndexHeader, i: usize) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1855","line":"        // This is an optimization for modulo of power of two integers;"},
{"lineNum":" 1856","line":"        // it requires `indexes_len` to always be a power of two."},
{"lineNum":" 1857","line":"        return @as(usize, @intCast(i & header.mask()));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1858","line":"    }"},
{"lineNum":" 1859","line":""},
{"lineNum":" 1860","line":"    /// Returns the attached array of indexes.  I must match the type"},
{"lineNum":" 1861","line":"    /// returned by capacityIndexType."},
{"lineNum":" 1862","line":"    fn indexes(header: *IndexHeader, comptime I: type) []Index(I) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1863","line":"        const start_ptr: [*]Index(I) = @alignCast(@ptrCast(@as([*]u8, @ptrCast(header)) + @sizeOf(IndexHeader)));","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1864","line":"        return start_ptr[0..header.length()];","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1865","line":"    }"},
{"lineNum":" 1866","line":""},
{"lineNum":" 1867","line":"    /// Returns the type used for the index arrays."},
{"lineNum":" 1868","line":"    fn capacityIndexType(header: IndexHeader) CapacityIndexType {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1869","line":"        return hash_map.capacityIndexType(header.bit_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1870","line":"    }"},
{"lineNum":" 1871","line":""},
{"lineNum":" 1872","line":"    fn capacity(self: IndexHeader) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1873","line":"        return index_capacities[self.bit_index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1874","line":"    }"},
{"lineNum":" 1875","line":"    fn length(self: IndexHeader) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1876","line":"        return @as(usize, 1) << @as(math.Log2Int(usize), @intCast(self.bit_index));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1877","line":"    }"},
{"lineNum":" 1878","line":"    fn mask(self: IndexHeader) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1879","line":"        return @as(u32, @intCast(self.length() - 1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1880","line":"    }"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"    fn findBitIndex(desired_capacity: usize) !u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1883","line":"        if (desired_capacity > max_capacity) return error.OutOfMemory;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1884","line":"        var new_bit_index = @as(u8, @intCast(std.math.log2_int_ceil(usize, desired_capacity)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1885","line":"        if (desired_capacity > index_capacities[new_bit_index]) new_bit_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1886","line":"        if (new_bit_index < min_bit_index) new_bit_index = min_bit_index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1887","line":"        assert(desired_capacity <= index_capacities[new_bit_index]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1888","line":"        return new_bit_index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1889","line":"    }"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"    /// Allocates an index header, and fills the entryIndexes array with empty."},
{"lineNum":" 1892","line":"    /// The distance array contents are undefined."},
{"lineNum":" 1893","line":"    fn alloc(allocator: Allocator, new_bit_index: u8) !*IndexHeader {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1894","line":"        const len = @as(usize, 1) << @as(math.Log2Int(usize), @intCast(new_bit_index));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1895","line":"        const index_size = hash_map.capacityIndexSize(new_bit_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1896","line":"        const nbytes = @sizeOf(IndexHeader) + index_size * len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1897","line":"        const bytes = try allocator.alignedAlloc(u8, @alignOf(IndexHeader), nbytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1898","line":"        @memset(bytes[@sizeOf(IndexHeader)..], 0xff);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1899","line":"        const result: *IndexHeader = @alignCast(@ptrCast(bytes.ptr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1900","line":"        result.* = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1901","line":"            .bit_index = new_bit_index,"},
{"lineNum":" 1902","line":"        };"},
{"lineNum":" 1903","line":"        return result;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1904","line":"    }"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"    /// Releases the memory for a header and its associated arrays."},
{"lineNum":" 1907","line":"    fn free(header: *IndexHeader, allocator: Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1908","line":"        const index_size = hash_map.capacityIndexSize(header.bit_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1909","line":"        const ptr: [*]align(@alignOf(IndexHeader)) u8 = @ptrCast(header);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1910","line":"        const slice = ptr[0 .. @sizeOf(IndexHeader) + header.length() * index_size];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1911","line":"        allocator.free(slice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1912","line":"    }"},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"    /// Puts an IndexHeader into the state that it would be in after being freshly allocated."},
{"lineNum":" 1915","line":"    fn reset(header: *IndexHeader) void {"},
{"lineNum":" 1916","line":"        const index_size = hash_map.capacityIndexSize(header.bit_index);"},
{"lineNum":" 1917","line":"        const ptr: [*]align(@alignOf(IndexHeader)) u8 = @ptrCast(header);"},
{"lineNum":" 1918","line":"        const nbytes = @sizeOf(IndexHeader) + header.length() * index_size;"},
{"lineNum":" 1919","line":"        @memset(ptr[@sizeOf(IndexHeader)..nbytes], 0xff);"},
{"lineNum":" 1920","line":"    }"},
{"lineNum":" 1921","line":""},
{"lineNum":" 1922","line":"    // Verify that the header has sufficient alignment to produce aligned arrays."},
{"lineNum":" 1923","line":"    comptime {"},
{"lineNum":" 1924","line":"        if (@alignOf(u32) > @alignOf(IndexHeader))"},
{"lineNum":" 1925","line":"            @compileError(\"IndexHeader must have a larger alignment than its indexes!\");"},
{"lineNum":" 1926","line":"    }"},
{"lineNum":" 1927","line":"};"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"test \"basic hash map usage\" {"},
{"lineNum":" 1930","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 1931","line":"    defer map.deinit();"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"    try testing.expect((try map.fetchPut(1, 11)) == null);"},
{"lineNum":" 1934","line":"    try testing.expect((try map.fetchPut(2, 22)) == null);"},
{"lineNum":" 1935","line":"    try testing.expect((try map.fetchPut(3, 33)) == null);"},
{"lineNum":" 1936","line":"    try testing.expect((try map.fetchPut(4, 44)) == null);"},
{"lineNum":" 1937","line":""},
{"lineNum":" 1938","line":"    try map.putNoClobber(5, 55);"},
{"lineNum":" 1939","line":"    try testing.expect((try map.fetchPut(5, 66)).?.value == 55);"},
{"lineNum":" 1940","line":"    try testing.expect((try map.fetchPut(5, 55)).?.value == 66);"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"    const gop1 = try map.getOrPut(5);"},
{"lineNum":" 1943","line":"    try testing.expect(gop1.found_existing == true);"},
{"lineNum":" 1944","line":"    try testing.expect(gop1.value_ptr.* == 55);"},
{"lineNum":" 1945","line":"    try testing.expect(gop1.index == 4);"},
{"lineNum":" 1946","line":"    gop1.value_ptr.* = 77;"},
{"lineNum":" 1947","line":"    try testing.expect(map.getEntry(5).?.value_ptr.* == 77);"},
{"lineNum":" 1948","line":""},
{"lineNum":" 1949","line":"    const gop2 = try map.getOrPut(99);"},
{"lineNum":" 1950","line":"    try testing.expect(gop2.found_existing == false);"},
{"lineNum":" 1951","line":"    try testing.expect(gop2.index == 5);"},
{"lineNum":" 1952","line":"    gop2.value_ptr.* = 42;"},
{"lineNum":" 1953","line":"    try testing.expect(map.getEntry(99).?.value_ptr.* == 42);"},
{"lineNum":" 1954","line":""},
{"lineNum":" 1955","line":"    const gop3 = try map.getOrPutValue(5, 5);"},
{"lineNum":" 1956","line":"    try testing.expect(gop3.value_ptr.* == 77);"},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"    const gop4 = try map.getOrPutValue(100, 41);"},
{"lineNum":" 1959","line":"    try testing.expect(gop4.value_ptr.* == 41);"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"    try testing.expect(map.contains(2));"},
{"lineNum":" 1962","line":"    try testing.expect(map.getEntry(2).?.value_ptr.* == 22);"},
{"lineNum":" 1963","line":"    try testing.expect(map.get(2).? == 22);"},
{"lineNum":" 1964","line":""},
{"lineNum":" 1965","line":"    const rmv1 = map.fetchSwapRemove(2);"},
{"lineNum":" 1966","line":"    try testing.expect(rmv1.?.key == 2);"},
{"lineNum":" 1967","line":"    try testing.expect(rmv1.?.value == 22);"},
{"lineNum":" 1968","line":"    try testing.expect(map.fetchSwapRemove(2) == null);"},
{"lineNum":" 1969","line":"    try testing.expect(map.swapRemove(2) == false);"},
{"lineNum":" 1970","line":"    try testing.expect(map.getEntry(2) == null);"},
{"lineNum":" 1971","line":"    try testing.expect(map.get(2) == null);"},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"    // Since we\'ve used `swapRemove` above, the index of this entry should remain unchanged."},
{"lineNum":" 1974","line":"    try testing.expect(map.getIndex(100).? == 1);"},
{"lineNum":" 1975","line":"    const gop5 = try map.getOrPut(5);"},
{"lineNum":" 1976","line":"    try testing.expect(gop5.found_existing == true);"},
{"lineNum":" 1977","line":"    try testing.expect(gop5.value_ptr.* == 77);"},
{"lineNum":" 1978","line":"    try testing.expect(gop5.index == 4);"},
{"lineNum":" 1979","line":""},
{"lineNum":" 1980","line":"    // Whereas, if we do an `orderedRemove`, it should move the index forward one spot."},
{"lineNum":" 1981","line":"    const rmv2 = map.fetchOrderedRemove(100);"},
{"lineNum":" 1982","line":"    try testing.expect(rmv2.?.key == 100);"},
{"lineNum":" 1983","line":"    try testing.expect(rmv2.?.value == 41);"},
{"lineNum":" 1984","line":"    try testing.expect(map.fetchOrderedRemove(100) == null);"},
{"lineNum":" 1985","line":"    try testing.expect(map.orderedRemove(100) == false);"},
{"lineNum":" 1986","line":"    try testing.expect(map.getEntry(100) == null);"},
{"lineNum":" 1987","line":"    try testing.expect(map.get(100) == null);"},
{"lineNum":" 1988","line":"    const gop6 = try map.getOrPut(5);"},
{"lineNum":" 1989","line":"    try testing.expect(gop6.found_existing == true);"},
{"lineNum":" 1990","line":"    try testing.expect(gop6.value_ptr.* == 77);"},
{"lineNum":" 1991","line":"    try testing.expect(gop6.index == 3);"},
{"lineNum":" 1992","line":""},
{"lineNum":" 1993","line":"    try testing.expect(map.swapRemove(3));"},
{"lineNum":" 1994","line":"}"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"test \"iterator hash map\" {"},
{"lineNum":" 1997","line":"    var reset_map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 1998","line":"    defer reset_map.deinit();"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":"    // test ensureTotalCapacity with a 0 parameter"},
{"lineNum":" 2001","line":"    try reset_map.ensureTotalCapacity(0);"},
{"lineNum":" 2002","line":""},
{"lineNum":" 2003","line":"    try reset_map.putNoClobber(0, 11);"},
{"lineNum":" 2004","line":"    try reset_map.putNoClobber(1, 22);"},
{"lineNum":" 2005","line":"    try reset_map.putNoClobber(2, 33);"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"    var keys = [_]i32{"},
{"lineNum":" 2008","line":"        0, 2, 1,"},
{"lineNum":" 2009","line":"    };"},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":"    var values = [_]i32{"},
{"lineNum":" 2012","line":"        11, 33, 22,"},
{"lineNum":" 2013","line":"    };"},
{"lineNum":" 2014","line":""},
{"lineNum":" 2015","line":"    var buffer = [_]i32{"},
{"lineNum":" 2016","line":"        0, 0, 0,"},
{"lineNum":" 2017","line":"    };"},
{"lineNum":" 2018","line":""},
{"lineNum":" 2019","line":"    var it = reset_map.iterator();"},
{"lineNum":" 2020","line":"    const first_entry = it.next().?;"},
{"lineNum":" 2021","line":"    it.reset();"},
{"lineNum":" 2022","line":""},
{"lineNum":" 2023","line":"    var count: usize = 0;"},
{"lineNum":" 2024","line":"    while (it.next()) |entry| : (count += 1) {"},
{"lineNum":" 2025","line":"        buffer[@as(usize, @intCast(entry.key_ptr.*))] = entry.value_ptr.*;"},
{"lineNum":" 2026","line":"    }"},
{"lineNum":" 2027","line":"    try testing.expect(count == 3);"},
{"lineNum":" 2028","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2029","line":""},
{"lineNum":" 2030","line":"    for (buffer, 0..) |_, i| {"},
{"lineNum":" 2031","line":"        try testing.expect(buffer[@as(usize, @intCast(keys[i]))] == values[i]);"},
{"lineNum":" 2032","line":"    }"},
{"lineNum":" 2033","line":""},
{"lineNum":" 2034","line":"    it.reset();"},
{"lineNum":" 2035","line":"    count = 0;"},
{"lineNum":" 2036","line":"    while (it.next()) |entry| {"},
{"lineNum":" 2037","line":"        buffer[@as(usize, @intCast(entry.key_ptr.*))] = entry.value_ptr.*;"},
{"lineNum":" 2038","line":"        count += 1;"},
{"lineNum":" 2039","line":"        if (count >= 2) break;"},
{"lineNum":" 2040","line":"    }"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"    for (buffer[0..2], 0..) |_, i| {"},
{"lineNum":" 2043","line":"        try testing.expect(buffer[@as(usize, @intCast(keys[i]))] == values[i]);"},
{"lineNum":" 2044","line":"    }"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"    it.reset();"},
{"lineNum":" 2047","line":"    var entry = it.next().?;"},
{"lineNum":" 2048","line":"    try testing.expect(entry.key_ptr.* == first_entry.key_ptr.*);"},
{"lineNum":" 2049","line":"    try testing.expect(entry.value_ptr.* == first_entry.value_ptr.*);"},
{"lineNum":" 2050","line":"}"},
{"lineNum":" 2051","line":""},
{"lineNum":" 2052","line":"test \"ensure capacity\" {"},
{"lineNum":" 2053","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2054","line":"    defer map.deinit();"},
{"lineNum":" 2055","line":""},
{"lineNum":" 2056","line":"    try map.ensureTotalCapacity(20);"},
{"lineNum":" 2057","line":"    const initial_capacity = map.capacity();"},
{"lineNum":" 2058","line":"    try testing.expect(initial_capacity >= 20);"},
{"lineNum":" 2059","line":"    var i: i32 = 0;"},
{"lineNum":" 2060","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 2061","line":"        try testing.expect(map.fetchPutAssumeCapacity(i, i + 10) == null);"},
{"lineNum":" 2062","line":"    }"},
{"lineNum":" 2063","line":"    // shouldn\'t resize from putAssumeCapacity"},
{"lineNum":" 2064","line":"    try testing.expect(initial_capacity == map.capacity());"},
{"lineNum":" 2065","line":"}"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"test \"ensure capacity leak\" {"},
{"lineNum":" 2068","line":"    try testing.checkAllAllocationFailures(std.testing.allocator, struct {"},
{"lineNum":" 2069","line":"        pub fn f(allocator: Allocator) !void {"},
{"lineNum":" 2070","line":"            var map = AutoArrayHashMap(i32, i32).init(allocator);"},
{"lineNum":" 2071","line":"            defer map.deinit();"},
{"lineNum":" 2072","line":""},
{"lineNum":" 2073","line":"            var i: i32 = 0;"},
{"lineNum":" 2074","line":"            // put more than `linear_scan_max` in so index_header gets allocated."},
{"lineNum":" 2075","line":"            while (i <= 20) : (i += 1) try map.put(i, i);"},
{"lineNum":" 2076","line":"        }"},
{"lineNum":" 2077","line":"    }.f, .{});"},
{"lineNum":" 2078","line":"}"},
{"lineNum":" 2079","line":""},
{"lineNum":" 2080","line":"test \"big map\" {"},
{"lineNum":" 2081","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2082","line":"    defer map.deinit();"},
{"lineNum":" 2083","line":""},
{"lineNum":" 2084","line":"    var i: i32 = 0;"},
{"lineNum":" 2085","line":"    while (i < 8) : (i += 1) {"},
{"lineNum":" 2086","line":"        try map.put(i, i + 10);"},
{"lineNum":" 2087","line":"    }"},
{"lineNum":" 2088","line":""},
{"lineNum":" 2089","line":"    i = 0;"},
{"lineNum":" 2090","line":"    while (i < 8) : (i += 1) {"},
{"lineNum":" 2091","line":"        try testing.expectEqual(@as(?i32, i + 10), map.get(i));"},
{"lineNum":" 2092","line":"    }"},
{"lineNum":" 2093","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 2094","line":"        try testing.expectEqual(@as(?i32, null), map.get(i));"},
{"lineNum":" 2095","line":"    }"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"    i = 4;"},
{"lineNum":" 2098","line":"    while (i < 12) : (i += 1) {"},
{"lineNum":" 2099","line":"        try map.put(i, i + 12);"},
{"lineNum":" 2100","line":"    }"},
{"lineNum":" 2101","line":""},
{"lineNum":" 2102","line":"    i = 0;"},
{"lineNum":" 2103","line":"    while (i < 4) : (i += 1) {"},
{"lineNum":" 2104","line":"        try testing.expectEqual(@as(?i32, i + 10), map.get(i));"},
{"lineNum":" 2105","line":"    }"},
{"lineNum":" 2106","line":"    while (i < 12) : (i += 1) {"},
{"lineNum":" 2107","line":"        try testing.expectEqual(@as(?i32, i + 12), map.get(i));"},
{"lineNum":" 2108","line":"    }"},
{"lineNum":" 2109","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 2110","line":"        try testing.expectEqual(@as(?i32, null), map.get(i));"},
{"lineNum":" 2111","line":"    }"},
{"lineNum":" 2112","line":""},
{"lineNum":" 2113","line":"    i = 0;"},
{"lineNum":" 2114","line":"    while (i < 4) : (i += 1) {"},
{"lineNum":" 2115","line":"        try testing.expect(map.orderedRemove(i));"},
{"lineNum":" 2116","line":"    }"},
{"lineNum":" 2117","line":"    while (i < 8) : (i += 1) {"},
{"lineNum":" 2118","line":"        try testing.expect(map.swapRemove(i));"},
{"lineNum":" 2119","line":"    }"},
{"lineNum":" 2120","line":""},
{"lineNum":" 2121","line":"    i = 0;"},
{"lineNum":" 2122","line":"    while (i < 8) : (i += 1) {"},
{"lineNum":" 2123","line":"        try testing.expectEqual(@as(?i32, null), map.get(i));"},
{"lineNum":" 2124","line":"    }"},
{"lineNum":" 2125","line":"    while (i < 12) : (i += 1) {"},
{"lineNum":" 2126","line":"        try testing.expectEqual(@as(?i32, i + 12), map.get(i));"},
{"lineNum":" 2127","line":"    }"},
{"lineNum":" 2128","line":"    while (i < 16) : (i += 1) {"},
{"lineNum":" 2129","line":"        try testing.expectEqual(@as(?i32, null), map.get(i));"},
{"lineNum":" 2130","line":"    }"},
{"lineNum":" 2131","line":"}"},
{"lineNum":" 2132","line":""},
{"lineNum":" 2133","line":"test \"clone\" {"},
{"lineNum":" 2134","line":"    var original = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2135","line":"    defer original.deinit();"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"    // put more than `linear_scan_max` so we can test that the index header is properly cloned"},
{"lineNum":" 2138","line":"    var i: u8 = 0;"},
{"lineNum":" 2139","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 2140","line":"        try original.putNoClobber(i, i * 10);"},
{"lineNum":" 2141","line":"    }"},
{"lineNum":" 2142","line":""},
{"lineNum":" 2143","line":"    var copy = try original.clone();"},
{"lineNum":" 2144","line":"    defer copy.deinit();"},
{"lineNum":" 2145","line":""},
{"lineNum":" 2146","line":"    i = 0;"},
{"lineNum":" 2147","line":"    while (i < 10) : (i += 1) {"},
{"lineNum":" 2148","line":"        try testing.expect(original.get(i).? == i * 10);"},
{"lineNum":" 2149","line":"        try testing.expect(copy.get(i).? == i * 10);"},
{"lineNum":" 2150","line":"        try testing.expect(original.getPtr(i).? != copy.getPtr(i).?);"},
{"lineNum":" 2151","line":"    }"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"    while (i < 20) : (i += 1) {"},
{"lineNum":" 2154","line":"        try testing.expect(original.get(i) == null);"},
{"lineNum":" 2155","line":"        try testing.expect(copy.get(i) == null);"},
{"lineNum":" 2156","line":"    }"},
{"lineNum":" 2157","line":"}"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"test \"shrink\" {"},
{"lineNum":" 2160","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2161","line":"    defer map.deinit();"},
{"lineNum":" 2162","line":""},
{"lineNum":" 2163","line":"    // This test is more interesting if we insert enough entries to allocate the index header."},
{"lineNum":" 2164","line":"    const num_entries = 20;"},
{"lineNum":" 2165","line":"    var i: i32 = 0;"},
{"lineNum":" 2166","line":"    while (i < num_entries) : (i += 1)"},
{"lineNum":" 2167","line":"        try testing.expect((try map.fetchPut(i, i * 10)) == null);"},
{"lineNum":" 2168","line":""},
{"lineNum":" 2169","line":"    try testing.expect(map.unmanaged.index_header != null);"},
{"lineNum":" 2170","line":"    try testing.expect(map.count() == num_entries);"},
{"lineNum":" 2171","line":""},
{"lineNum":" 2172","line":"    // Test `shrinkRetainingCapacity`."},
{"lineNum":" 2173","line":"    map.shrinkRetainingCapacity(17);"},
{"lineNum":" 2174","line":"    try testing.expect(map.count() == 17);"},
{"lineNum":" 2175","line":"    try testing.expect(map.capacity() == 20);"},
{"lineNum":" 2176","line":"    i = 0;"},
{"lineNum":" 2177","line":"    while (i < num_entries) : (i += 1) {"},
{"lineNum":" 2178","line":"        const gop = try map.getOrPut(i);"},
{"lineNum":" 2179","line":"        if (i < 17) {"},
{"lineNum":" 2180","line":"            try testing.expect(gop.found_existing == true);"},
{"lineNum":" 2181","line":"            try testing.expect(gop.value_ptr.* == i * 10);"},
{"lineNum":" 2182","line":"        } else try testing.expect(gop.found_existing == false);"},
{"lineNum":" 2183","line":"    }"},
{"lineNum":" 2184","line":""},
{"lineNum":" 2185","line":"    // Test `shrinkAndFree`."},
{"lineNum":" 2186","line":"    map.shrinkAndFree(15);"},
{"lineNum":" 2187","line":"    try testing.expect(map.count() == 15);"},
{"lineNum":" 2188","line":"    try testing.expect(map.capacity() == 15);"},
{"lineNum":" 2189","line":"    i = 0;"},
{"lineNum":" 2190","line":"    while (i < num_entries) : (i += 1) {"},
{"lineNum":" 2191","line":"        const gop = try map.getOrPut(i);"},
{"lineNum":" 2192","line":"        if (i < 15) {"},
{"lineNum":" 2193","line":"            try testing.expect(gop.found_existing == true);"},
{"lineNum":" 2194","line":"            try testing.expect(gop.value_ptr.* == i * 10);"},
{"lineNum":" 2195","line":"        } else try testing.expect(gop.found_existing == false);"},
{"lineNum":" 2196","line":"    }"},
{"lineNum":" 2197","line":"}"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"test \"pop\" {"},
{"lineNum":" 2200","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2201","line":"    defer map.deinit();"},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"    // Insert just enough entries so that the map expands. Afterwards,"},
{"lineNum":" 2204","line":"    // pop all entries out of the map."},
{"lineNum":" 2205","line":""},
{"lineNum":" 2206","line":"    var i: i32 = 0;"},
{"lineNum":" 2207","line":"    while (i < 9) : (i += 1) {"},
{"lineNum":" 2208","line":"        try testing.expect((try map.fetchPut(i, i)) == null);"},
{"lineNum":" 2209","line":"    }"},
{"lineNum":" 2210","line":""},
{"lineNum":" 2211","line":"    while (i > 0) : (i -= 1) {"},
{"lineNum":" 2212","line":"        const pop = map.pop();"},
{"lineNum":" 2213","line":"        try testing.expect(pop.key == i - 1 and pop.value == i - 1);"},
{"lineNum":" 2214","line":"    }"},
{"lineNum":" 2215","line":"}"},
{"lineNum":" 2216","line":""},
{"lineNum":" 2217","line":"test \"popOrNull\" {"},
{"lineNum":" 2218","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2219","line":"    defer map.deinit();"},
{"lineNum":" 2220","line":""},
{"lineNum":" 2221","line":"    // Insert just enough entries so that the map expands. Afterwards,"},
{"lineNum":" 2222","line":"    // pop all entries out of the map."},
{"lineNum":" 2223","line":""},
{"lineNum":" 2224","line":"    var i: i32 = 0;"},
{"lineNum":" 2225","line":"    while (i < 9) : (i += 1) {"},
{"lineNum":" 2226","line":"        try testing.expect((try map.fetchPut(i, i)) == null);"},
{"lineNum":" 2227","line":"    }"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"    while (map.popOrNull()) |pop| {"},
{"lineNum":" 2230","line":"        try testing.expect(pop.key == i - 1 and pop.value == i - 1);"},
{"lineNum":" 2231","line":"        i -= 1;"},
{"lineNum":" 2232","line":"    }"},
{"lineNum":" 2233","line":""},
{"lineNum":" 2234","line":"    try testing.expect(map.count() == 0);"},
{"lineNum":" 2235","line":"}"},
{"lineNum":" 2236","line":""},
{"lineNum":" 2237","line":"test \"reIndex\" {"},
{"lineNum":" 2238","line":"    var map = ArrayHashMap(i32, i32, AutoContext(i32), true).init(std.testing.allocator);"},
{"lineNum":" 2239","line":"    defer map.deinit();"},
{"lineNum":" 2240","line":""},
{"lineNum":" 2241","line":"    // Populate via the API."},
{"lineNum":" 2242","line":"    const num_indexed_entries = 20;"},
{"lineNum":" 2243","line":"    var i: i32 = 0;"},
{"lineNum":" 2244","line":"    while (i < num_indexed_entries) : (i += 1)"},
{"lineNum":" 2245","line":"        try testing.expect((try map.fetchPut(i, i * 10)) == null);"},
{"lineNum":" 2246","line":""},
{"lineNum":" 2247","line":"    // Make sure we allocated an index header."},
{"lineNum":" 2248","line":"    try testing.expect(map.unmanaged.index_header != null);"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"    // Now write to the underlying array list directly."},
{"lineNum":" 2251","line":"    const num_unindexed_entries = 20;"},
{"lineNum":" 2252","line":"    const hash = getAutoHashFn(i32, void);"},
{"lineNum":" 2253","line":"    var al = &map.unmanaged.entries;"},
{"lineNum":" 2254","line":"    while (i < num_indexed_entries + num_unindexed_entries) : (i += 1) {"},
{"lineNum":" 2255","line":"        try al.append(std.testing.allocator, .{"},
{"lineNum":" 2256","line":"            .key = i,"},
{"lineNum":" 2257","line":"            .value = i * 10,"},
{"lineNum":" 2258","line":"            .hash = hash({}, i),"},
{"lineNum":" 2259","line":"        });"},
{"lineNum":" 2260","line":"    }"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"    // After reindexing, we should see everything."},
{"lineNum":" 2263","line":"    try map.reIndex();"},
{"lineNum":" 2264","line":"    i = 0;"},
{"lineNum":" 2265","line":"    while (i < num_indexed_entries + num_unindexed_entries) : (i += 1) {"},
{"lineNum":" 2266","line":"        const gop = try map.getOrPut(i);"},
{"lineNum":" 2267","line":"        try testing.expect(gop.found_existing == true);"},
{"lineNum":" 2268","line":"        try testing.expect(gop.value_ptr.* == i * 10);"},
{"lineNum":" 2269","line":"        try testing.expect(gop.index == i);"},
{"lineNum":" 2270","line":"    }"},
{"lineNum":" 2271","line":"}"},
{"lineNum":" 2272","line":""},
{"lineNum":" 2273","line":"test \"auto store_hash\" {"},
{"lineNum":" 2274","line":"    const HasCheapEql = AutoArrayHashMap(i32, i32);"},
{"lineNum":" 2275","line":"    const HasExpensiveEql = AutoArrayHashMap([32]i32, i32);"},
{"lineNum":" 2276","line":"    try testing.expect(meta.fieldInfo(HasCheapEql.Data, .hash).type == void);"},
{"lineNum":" 2277","line":"    try testing.expect(meta.fieldInfo(HasExpensiveEql.Data, .hash).type != void);"},
{"lineNum":" 2278","line":""},
{"lineNum":" 2279","line":"    const HasCheapEqlUn = AutoArrayHashMapUnmanaged(i32, i32);"},
{"lineNum":" 2280","line":"    const HasExpensiveEqlUn = AutoArrayHashMapUnmanaged([32]i32, i32);"},
{"lineNum":" 2281","line":"    try testing.expect(meta.fieldInfo(HasCheapEqlUn.Data, .hash).type == void);"},
{"lineNum":" 2282","line":"    try testing.expect(meta.fieldInfo(HasExpensiveEqlUn.Data, .hash).type != void);"},
{"lineNum":" 2283","line":"}"},
{"lineNum":" 2284","line":""},
{"lineNum":" 2285","line":"test \"sort\" {"},
{"lineNum":" 2286","line":"    var map = AutoArrayHashMap(i32, i32).init(std.testing.allocator);"},
{"lineNum":" 2287","line":"    defer map.deinit();"},
{"lineNum":" 2288","line":""},
{"lineNum":" 2289","line":"    for ([_]i32{ 8, 3, 12, 10, 2, 4, 9, 5, 6, 13, 14, 15, 16, 1, 11, 17, 7 }) |x| {"},
{"lineNum":" 2290","line":"        try map.put(x, x * 3);"},
{"lineNum":" 2291","line":"    }"},
{"lineNum":" 2292","line":""},
{"lineNum":" 2293","line":"    const C = struct {"},
{"lineNum":" 2294","line":"        keys: []i32,"},
{"lineNum":" 2295","line":""},
{"lineNum":" 2296","line":"        pub fn lessThan(ctx: @This(), a_index: usize, b_index: usize) bool {"},
{"lineNum":" 2297","line":"            return ctx.keys[a_index] < ctx.keys[b_index];"},
{"lineNum":" 2298","line":"        }"},
{"lineNum":" 2299","line":"    };"},
{"lineNum":" 2300","line":""},
{"lineNum":" 2301","line":"    map.sort(C{ .keys = map.keys() });"},
{"lineNum":" 2302","line":""},
{"lineNum":" 2303","line":"    var x: i32 = 1;"},
{"lineNum":" 2304","line":"    for (map.keys(), 0..) |key, i| {"},
{"lineNum":" 2305","line":"        try testing.expect(key == x);"},
{"lineNum":" 2306","line":"        try testing.expect(map.values()[i] == x * 3);"},
{"lineNum":" 2307","line":"        x += 1;"},
{"lineNum":" 2308","line":"    }"},
{"lineNum":" 2309","line":"}"},
{"lineNum":" 2310","line":""},
{"lineNum":" 2311","line":"pub fn getHashPtrAddrFn(comptime K: type, comptime Context: type) (fn (Context, K) u32) {"},
{"lineNum":" 2312","line":"    return struct {"},
{"lineNum":" 2313","line":"        fn hash(ctx: Context, key: K) u32 {"},
{"lineNum":" 2314","line":"            _ = ctx;"},
{"lineNum":" 2315","line":"            return getAutoHashFn(usize, void)({}, @intFromPtr(key));"},
{"lineNum":" 2316","line":"        }"},
{"lineNum":" 2317","line":"    }.hash;"},
{"lineNum":" 2318","line":"}"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"pub fn getTrivialEqlFn(comptime K: type, comptime Context: type) (fn (Context, K, K) bool) {"},
{"lineNum":" 2321","line":"    return struct {"},
{"lineNum":" 2322","line":"        fn eql(ctx: Context, a: K, b: K) bool {"},
{"lineNum":" 2323","line":"            _ = ctx;"},
{"lineNum":" 2324","line":"            return a == b;"},
{"lineNum":" 2325","line":"        }"},
{"lineNum":" 2326","line":"    }.eql;"},
{"lineNum":" 2327","line":"}"},
{"lineNum":" 2328","line":""},
{"lineNum":" 2329","line":"pub fn AutoContext(comptime K: type) type {"},
{"lineNum":" 2330","line":"    return struct {"},
{"lineNum":" 2331","line":"        pub const hash = getAutoHashFn(K, @This());"},
{"lineNum":" 2332","line":"        pub const eql = getAutoEqlFn(K, @This());"},
{"lineNum":" 2333","line":"    };"},
{"lineNum":" 2334","line":"}"},
{"lineNum":" 2335","line":""},
{"lineNum":" 2336","line":"pub fn getAutoHashFn(comptime K: type, comptime Context: type) (fn (Context, K) u32) {"},
{"lineNum":" 2337","line":"    return struct {"},
{"lineNum":" 2338","line":"        fn hash(ctx: Context, key: K) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2339","line":"            _ = ctx;"},
{"lineNum":" 2340","line":"            if (comptime trait.hasUniqueRepresentation(K)) {"},
{"lineNum":" 2341","line":"                return @as(u32, @truncate(Wyhash.hash(0, std.mem.asBytes(&key))));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2342","line":"            } else {"},
{"lineNum":" 2343","line":"                var hasher = Wyhash.init(0);"},
{"lineNum":" 2344","line":"                autoHash(&hasher, key);"},
{"lineNum":" 2345","line":"                return @as(u32, @truncate(hasher.final()));"},
{"lineNum":" 2346","line":"            }"},
{"lineNum":" 2347","line":"        }"},
{"lineNum":" 2348","line":"    }.hash;"},
{"lineNum":" 2349","line":"}"},
{"lineNum":" 2350","line":""},
{"lineNum":" 2351","line":"pub fn getAutoEqlFn(comptime K: type, comptime Context: type) (fn (Context, K, K, usize) bool) {"},
{"lineNum":" 2352","line":"    return struct {"},
{"lineNum":" 2353","line":"        fn eql(ctx: Context, a: K, b: K, b_index: usize) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2354","line":"            _ = b_index;"},
{"lineNum":" 2355","line":"            _ = ctx;"},
{"lineNum":" 2356","line":"            return meta.eql(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2357","line":"        }"},
{"lineNum":" 2358","line":"    }.eql;"},
{"lineNum":" 2359","line":"}"},
{"lineNum":" 2360","line":""},
{"lineNum":" 2361","line":"pub fn autoEqlIsCheap(comptime K: type) bool {"},
{"lineNum":" 2362","line":"    return switch (@typeInfo(K)) {"},
{"lineNum":" 2363","line":"        .Bool,"},
{"lineNum":" 2364","line":"        .Int,"},
{"lineNum":" 2365","line":"        .Float,"},
{"lineNum":" 2366","line":"        .Pointer,"},
{"lineNum":" 2367","line":"        .ComptimeFloat,"},
{"lineNum":" 2368","line":"        .ComptimeInt,"},
{"lineNum":" 2369","line":"        .Enum,"},
{"lineNum":" 2370","line":"        .Fn,"},
{"lineNum":" 2371","line":"        .ErrorSet,"},
{"lineNum":" 2372","line":"        .AnyFrame,"},
{"lineNum":" 2373","line":"        .EnumLiteral,"},
{"lineNum":" 2374","line":"        => true,"},
{"lineNum":" 2375","line":"        else => false,"},
{"lineNum":" 2376","line":"    };"},
{"lineNum":" 2377","line":"}"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"pub fn getAutoHashStratFn(comptime K: type, comptime Context: type, comptime strategy: std.hash.Strategy) (fn (Context, K) u32) {"},
{"lineNum":" 2380","line":"    return struct {"},
{"lineNum":" 2381","line":"        fn hash(ctx: Context, key: K) u32 {"},
{"lineNum":" 2382","line":"            _ = ctx;"},
{"lineNum":" 2383","line":"            var hasher = Wyhash.init(0);"},
{"lineNum":" 2384","line":"            std.hash.autoHashStrat(&hasher, key, strategy);"},
{"lineNum":" 2385","line":"            return @as(u32, @truncate(hasher.final()));"},
{"lineNum":" 2386","line":"        }"},
{"lineNum":" 2387","line":"    }.hash;"},
{"lineNum":" 2388","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 235, "covered" : 0,};
var merged_data = [];
