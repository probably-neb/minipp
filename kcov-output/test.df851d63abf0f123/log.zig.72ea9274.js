var data = {lines:[
{"lineNum":"    1","line":"//! std.log is a standardized interface for logging which allows for the logging"},
{"lineNum":"    2","line":"//! of programs and libraries using this interface to be formatted and filtered"},
{"lineNum":"    3","line":"//! by the implementer of the `std.options.logFn` function."},
{"lineNum":"    4","line":"//!"},
{"lineNum":"    5","line":"//! Each log message has an associated scope enum, which can be used to give"},
{"lineNum":"    6","line":"//! context to the logging. The logging functions in std.log implicitly use a"},
{"lineNum":"    7","line":"//! scope of .default."},
{"lineNum":"    8","line":"//!"},
{"lineNum":"    9","line":"//! A logging namespace using a custom scope can be created using the"},
{"lineNum":"   10","line":"//! std.log.scoped function, passing the scope as an argument; the logging"},
{"lineNum":"   11","line":"//! functions in the resulting struct use the provided scope parameter."},
{"lineNum":"   12","line":"//! For example, a library called \'libfoo\' might use"},
{"lineNum":"   13","line":"//! `const log = std.log.scoped(.libfoo);` to use .libfoo as the scope of its"},
{"lineNum":"   14","line":"//! log messages."},
{"lineNum":"   15","line":"//!"},
{"lineNum":"   16","line":"//! An example `logFn` might look something like this:"},
{"lineNum":"   17","line":"//!"},
{"lineNum":"   18","line":"//! ```"},
{"lineNum":"   19","line":"//! const std = @import(\"std\");"},
{"lineNum":"   20","line":"//!"},
{"lineNum":"   21","line":"//! pub const std_options = struct {"},
{"lineNum":"   22","line":"//!     // Set the log level to info"},
{"lineNum":"   23","line":"//!     pub const log_level = .info;"},
{"lineNum":"   24","line":"//!"},
{"lineNum":"   25","line":"//!     // Define logFn to override the std implementation"},
{"lineNum":"   26","line":"//!     pub const logFn = myLogFn;"},
{"lineNum":"   27","line":"//! };"},
{"lineNum":"   28","line":"//!"},
{"lineNum":"   29","line":"//! pub fn myLogFn("},
{"lineNum":"   30","line":"//!     comptime level: std.log.Level,"},
{"lineNum":"   31","line":"//!     comptime scope: @TypeOf(.EnumLiteral),"},
{"lineNum":"   32","line":"//!     comptime format: []const u8,"},
{"lineNum":"   33","line":"//!     args: anytype,"},
{"lineNum":"   34","line":"//! ) void {"},
{"lineNum":"   35","line":"//!     // Ignore all non-error logging from sources other than"},
{"lineNum":"   36","line":"//!     // .my_project, .nice_library and the default"},
{"lineNum":"   37","line":"//!     const scope_prefix = \"(\" ++ switch (scope) {"},
{"lineNum":"   38","line":"//!         .my_project, .nice_library, std.log.default_log_scope => @tagName(scope),"},
{"lineNum":"   39","line":"//!         else => if (@intFromEnum(level) <= @intFromEnum(std.log.Level.err))"},
{"lineNum":"   40","line":"//!             @tagName(scope)"},
{"lineNum":"   41","line":"//!         else"},
{"lineNum":"   42","line":"//!             return,"},
{"lineNum":"   43","line":"//!     } ++ \"): \";"},
{"lineNum":"   44","line":"//!"},
{"lineNum":"   45","line":"//!     const prefix = \"[\" ++ comptime level.asText() ++ \"] \" ++ scope_prefix;"},
{"lineNum":"   46","line":"//!"},
{"lineNum":"   47","line":"//!     // Print the message to stderr, silently ignoring any errors"},
{"lineNum":"   48","line":"//!     std.debug.getStderrMutex().lock();"},
{"lineNum":"   49","line":"//!     defer std.debug.getStderrMutex().unlock();"},
{"lineNum":"   50","line":"//!     const stderr = std.io.getStdErr().writer();"},
{"lineNum":"   51","line":"//!     nosuspend stderr.print(prefix ++ format ++ \"\\n\", args) catch return;"},
{"lineNum":"   52","line":"//! }"},
{"lineNum":"   53","line":"//!"},
{"lineNum":"   54","line":"//! pub fn main() void {"},
{"lineNum":"   55","line":"//!     // Using the default scope:"},
{"lineNum":"   56","line":"//!     std.log.debug(\"A borderline useless debug log message\", .{}); // Won\'t be printed as log_level is .info"},
{"lineNum":"   57","line":"//!     std.log.info(\"Flux capacitor is starting to overheat\", .{});"},
{"lineNum":"   58","line":"//!"},
{"lineNum":"   59","line":"//!     // Using scoped logging:"},
{"lineNum":"   60","line":"//!     const my_project_log = std.log.scoped(.my_project);"},
{"lineNum":"   61","line":"//!     const nice_library_log = std.log.scoped(.nice_library);"},
{"lineNum":"   62","line":"//!     const verbose_lib_log = std.log.scoped(.verbose_lib);"},
{"lineNum":"   63","line":"//!"},
{"lineNum":"   64","line":"//!     my_project_log.debug(\"Starting up\", .{}); // Won\'t be printed as log_level is .info"},
{"lineNum":"   65","line":"//!     nice_library_log.warn(\"Something went very wrong, sorry\", .{});"},
{"lineNum":"   66","line":"//!     verbose_lib_log.warn(\"Added 1 + 1: {}\", .{1 + 1}); // Won\'t be printed as it gets filtered out by our log function"},
{"lineNum":"   67","line":"//! }"},
{"lineNum":"   68","line":"//! ```"},
{"lineNum":"   69","line":"//! Which produces the following output:"},
{"lineNum":"   70","line":"//! ```"},
{"lineNum":"   71","line":"//! [info] (default): Flux capacitor is starting to overheat"},
{"lineNum":"   72","line":"//! [warning] (nice_library): Something went very wrong, sorry"},
{"lineNum":"   73","line":"//! ```"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"const std = @import(\"std.zig\");"},
{"lineNum":"   76","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"pub const Level = enum {"},
{"lineNum":"   79","line":"    /// Error: something has gone wrong. This might be recoverable or might"},
{"lineNum":"   80","line":"    /// be followed by the program exiting."},
{"lineNum":"   81","line":"    err,"},
{"lineNum":"   82","line":"    /// Warning: it is uncertain if something has gone wrong or not, but the"},
{"lineNum":"   83","line":"    /// circumstances would be worth investigating."},
{"lineNum":"   84","line":"    warn,"},
{"lineNum":"   85","line":"    /// Info: general messages about the state of the program."},
{"lineNum":"   86","line":"    info,"},
{"lineNum":"   87","line":"    /// Debug: messages only useful for debugging."},
{"lineNum":"   88","line":"    debug,"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    /// Returns a string literal of the given level in full text form."},
{"lineNum":"   91","line":"    pub fn asText(comptime self: Level) []const u8 {"},
{"lineNum":"   92","line":"        return switch (self) {"},
{"lineNum":"   93","line":"            .err => \"error\","},
{"lineNum":"   94","line":"            .warn => \"warning\","},
{"lineNum":"   95","line":"            .info => \"info\","},
{"lineNum":"   96","line":"            .debug => \"debug\","},
{"lineNum":"   97","line":"        };"},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":"};"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"/// The default log level is based on build mode."},
{"lineNum":"  102","line":"pub const default_level: Level = switch (builtin.mode) {"},
{"lineNum":"  103","line":"    .Debug => .debug,"},
{"lineNum":"  104","line":"    .ReleaseSafe => .info,"},
{"lineNum":"  105","line":"    .ReleaseFast, .ReleaseSmall => .err,"},
{"lineNum":"  106","line":"};"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"const level = std.options.log_level;"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"pub const ScopeLevel = struct {"},
{"lineNum":"  111","line":"    scope: @Type(.EnumLiteral),"},
{"lineNum":"  112","line":"    level: Level,"},
{"lineNum":"  113","line":"};"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"const scope_levels = std.options.log_scope_levels;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"fn log("},
{"lineNum":"  118","line":"    comptime message_level: Level,"},
{"lineNum":"  119","line":"    comptime scope: @Type(.EnumLiteral),"},
{"lineNum":"  120","line":"    comptime format: []const u8,"},
{"lineNum":"  121","line":"    args: anytype,"},
{"lineNum":"  122","line":") void {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  123","line":"    if (comptime !logEnabled(message_level, scope)) return;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    std.options.logFn(message_level, scope, format, args);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  126","line":"}"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"/// Determine if a specific log message level and scope combination are enabled for logging."},
{"lineNum":"  129","line":"pub fn logEnabled(comptime message_level: Level, comptime scope: @Type(.EnumLiteral)) bool {"},
{"lineNum":"  130","line":"    inline for (scope_levels) |scope_level| {"},
{"lineNum":"  131","line":"        if (scope_level.scope == scope) return @intFromEnum(message_level) <= @intFromEnum(scope_level.level);"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"    return @intFromEnum(message_level) <= @intFromEnum(level);"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"/// Determine if a specific log message level using the default log scope is enabled for logging."},
{"lineNum":"  137","line":"pub fn defaultLogEnabled(comptime message_level: Level) bool {"},
{"lineNum":"  138","line":"    return comptime logEnabled(message_level, default_log_scope);"},
{"lineNum":"  139","line":"}"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"/// The default implementation for the log function, custom log functions may"},
{"lineNum":"  142","line":"/// forward log messages to this function."},
{"lineNum":"  143","line":"pub fn defaultLog("},
{"lineNum":"  144","line":"    comptime message_level: Level,"},
{"lineNum":"  145","line":"    comptime scope: @Type(.EnumLiteral),"},
{"lineNum":"  146","line":"    comptime format: []const u8,"},
{"lineNum":"  147","line":"    args: anytype,"},
{"lineNum":"  148","line":") void {"},
{"lineNum":"  149","line":"    const level_txt = comptime message_level.asText();"},
{"lineNum":"  150","line":"    const prefix2 = if (scope == .default) \": \" else \"(\" ++ @tagName(scope) ++ \"): \";"},
{"lineNum":"  151","line":"    const stderr = std.io.getStdErr().writer();"},
{"lineNum":"  152","line":"    std.debug.getStderrMutex().lock();"},
{"lineNum":"  153","line":"    defer std.debug.getStderrMutex().unlock();"},
{"lineNum":"  154","line":"    nosuspend stderr.print(level_txt ++ prefix2 ++ format ++ \"\\n\", args) catch return;"},
{"lineNum":"  155","line":"}"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"/// Returns a scoped logging namespace that logs all messages using the scope"},
{"lineNum":"  158","line":"/// provided here."},
{"lineNum":"  159","line":"pub fn scoped(comptime scope: @Type(.EnumLiteral)) type {"},
{"lineNum":"  160","line":"    return struct {"},
{"lineNum":"  161","line":"        /// Log an error message. This log level is intended to be used"},
{"lineNum":"  162","line":"        /// when something has gone wrong. This might be recoverable or might"},
{"lineNum":"  163","line":"        /// be followed by the program exiting."},
{"lineNum":"  164","line":"        pub fn err("},
{"lineNum":"  165","line":"            comptime format: []const u8,"},
{"lineNum":"  166","line":"            args: anytype,"},
{"lineNum":"  167","line":"        ) void {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  168","line":"            @setCold(true);"},
{"lineNum":"  169","line":"            log(.err, scope, format, args);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  170","line":"        }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        /// Log a warning message. This log level is intended to be used if"},
{"lineNum":"  173","line":"        /// it is uncertain whether something has gone wrong or not, but the"},
{"lineNum":"  174","line":"        /// circumstances would be worth investigating."},
{"lineNum":"  175","line":"        pub fn warn("},
{"lineNum":"  176","line":"            comptime format: []const u8,"},
{"lineNum":"  177","line":"            args: anytype,"},
{"lineNum":"  178","line":"        ) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"            log(.warn, scope, format, args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"        }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        /// Log an info message. This log level is intended to be used for"},
{"lineNum":"  183","line":"        /// general messages about the state of the program."},
{"lineNum":"  184","line":"        pub fn info("},
{"lineNum":"  185","line":"            comptime format: []const u8,"},
{"lineNum":"  186","line":"            args: anytype,"},
{"lineNum":"  187","line":"        ) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"            log(.info, scope, format, args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"        }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"        /// Log a debug message. This log level is intended to be used for"},
{"lineNum":"  192","line":"        /// messages which are only useful for debugging."},
{"lineNum":"  193","line":"        pub fn debug("},
{"lineNum":"  194","line":"            comptime format: []const u8,"},
{"lineNum":"  195","line":"            args: anytype,"},
{"lineNum":"  196","line":"        ) void {"},
{"lineNum":"  197","line":"            log(.debug, scope, format, args);"},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":"    };"},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"pub const default_log_scope = .default;"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"/// The default scoped logging namespace."},
{"lineNum":"  205","line":"pub const default = scoped(default_log_scope);"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"/// Log an error message using the default scope. This log level is intended to"},
{"lineNum":"  208","line":"/// be used when something has gone wrong. This might be recoverable or might"},
{"lineNum":"  209","line":"/// be followed by the program exiting."},
{"lineNum":"  210","line":"pub const err = default.err;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"/// Log a warning message using the default scope. This log level is intended"},
{"lineNum":"  213","line":"/// to be used if it is uncertain whether something has gone wrong or not, but"},
{"lineNum":"  214","line":"/// the circumstances would be worth investigating."},
{"lineNum":"  215","line":"pub const warn = default.warn;"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"/// Log an info message using the default scope. This log level is intended to"},
{"lineNum":"  218","line":"/// be used for general messages about the state of the program."},
{"lineNum":"  219","line":"pub const info = default.info;"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"/// Log a debug message using the default scope. This log level is intended to"},
{"lineNum":"  222","line":"/// be used for messages which are only useful for debugging."},
{"lineNum":"  223","line":"pub const debug = default.debug;"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
