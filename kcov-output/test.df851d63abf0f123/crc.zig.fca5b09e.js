var data = {lines:[
{"lineNum":"    1","line":"// There are two implementations of CRC32 implemented with the following key characteristics:"},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// - Crc32WithPoly uses 8Kb of tables but is ~10x faster than the small method."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// - Crc32SmallWithPoly uses only 64 bytes of memory but is slower. Be aware that this is"},
{"lineNum":"    6","line":"//   still moderately fast just slow relative to the slicing approach."},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    9","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"   10","line":"const debug = std.debug;"},
{"lineNum":"   11","line":"const testing = std.testing;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"pub usingnamespace @import(\"crc/catalog.zig\");"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"pub fn Algorithm(comptime W: type) type {"},
{"lineNum":"   16","line":"    return struct {"},
{"lineNum":"   17","line":"        polynomial: W,"},
{"lineNum":"   18","line":"        initial: W,"},
{"lineNum":"   19","line":"        reflect_input: bool,"},
{"lineNum":"   20","line":"        reflect_output: bool,"},
{"lineNum":"   21","line":"        xor_output: W,"},
{"lineNum":"   22","line":"    };"},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"pub fn Crc(comptime W: type, comptime algorithm: Algorithm(W)) type {"},
{"lineNum":"   26","line":"    return struct {"},
{"lineNum":"   27","line":"        const Self = @This();"},
{"lineNum":"   28","line":"        const I = if (@bitSizeOf(W) < 8) u8 else W;"},
{"lineNum":"   29","line":"        const lookup_table = blk: {"},
{"lineNum":"   30","line":"            @setEvalBranchQuota(2500);"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"            const poly = if (algorithm.reflect_input)"},
{"lineNum":"   33","line":"                @bitReverse(@as(I, algorithm.polynomial)) >> (@bitSizeOf(I) - @bitSizeOf(W))"},
{"lineNum":"   34","line":"            else"},
{"lineNum":"   35","line":"                @as(I, algorithm.polynomial) << (@bitSizeOf(I) - @bitSizeOf(W));"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"            var table: [256]I = undefined;"},
{"lineNum":"   38","line":"            for (&table, 0..) |*e, i| {"},
{"lineNum":"   39","line":"                var crc: I = i;"},
{"lineNum":"   40","line":"                if (algorithm.reflect_input) {"},
{"lineNum":"   41","line":"                    var j: usize = 0;"},
{"lineNum":"   42","line":"                    while (j < 8) : (j += 1) {"},
{"lineNum":"   43","line":"                        crc = (crc >> 1) ^ ((crc & 1) * poly);"},
{"lineNum":"   44","line":"                    }"},
{"lineNum":"   45","line":"                } else {"},
{"lineNum":"   46","line":"                    crc <<= @bitSizeOf(I) - 8;"},
{"lineNum":"   47","line":"                    var j: usize = 0;"},
{"lineNum":"   48","line":"                    while (j < 8) : (j += 1) {"},
{"lineNum":"   49","line":"                        crc = (crc << 1) ^ (((crc >> (@bitSizeOf(I) - 1)) & 1) * poly);"},
{"lineNum":"   50","line":"                    }"},
{"lineNum":"   51","line":"                }"},
{"lineNum":"   52","line":"                e.* = crc;"},
{"lineNum":"   53","line":"            }"},
{"lineNum":"   54","line":"            break :blk table;"},
{"lineNum":"   55","line":"        };"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        crc: I,"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        pub fn init() Self {"},
{"lineNum":"   60","line":"            const initial = if (algorithm.reflect_input)"},
{"lineNum":"   61","line":"                @bitReverse(@as(I, algorithm.initial)) >> (@bitSizeOf(I) - @bitSizeOf(W))"},
{"lineNum":"   62","line":"            else"},
{"lineNum":"   63","line":"                @as(I, algorithm.initial) << (@bitSizeOf(I) - @bitSizeOf(W));"},
{"lineNum":"   64","line":"            return Self{ .crc = initial };"},
{"lineNum":"   65","line":"        }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        inline fn tableEntry(index: I) I {"},
{"lineNum":"   68","line":"            return lookup_table[@as(u8, @intCast(index & 0xFF))];"},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        pub fn update(self: *Self, bytes: []const u8) void {"},
{"lineNum":"   72","line":"            var i: usize = 0;"},
{"lineNum":"   73","line":"            if (@bitSizeOf(I) <= 8) {"},
{"lineNum":"   74","line":"                while (i < bytes.len) : (i += 1) {"},
{"lineNum":"   75","line":"                    self.crc = tableEntry(self.crc ^ bytes[i]);"},
{"lineNum":"   76","line":"                }"},
{"lineNum":"   77","line":"            } else if (algorithm.reflect_input) {"},
{"lineNum":"   78","line":"                while (i < bytes.len) : (i += 1) {"},
{"lineNum":"   79","line":"                    const table_index = self.crc ^ bytes[i];"},
{"lineNum":"   80","line":"                    self.crc = tableEntry(table_index) ^ (self.crc >> 8);"},
{"lineNum":"   81","line":"                }"},
{"lineNum":"   82","line":"            } else {"},
{"lineNum":"   83","line":"                while (i < bytes.len) : (i += 1) {"},
{"lineNum":"   84","line":"                    const table_index = (self.crc >> (@bitSizeOf(I) - 8)) ^ bytes[i];"},
{"lineNum":"   85","line":"                    self.crc = tableEntry(table_index) ^ (self.crc << 8);"},
{"lineNum":"   86","line":"                }"},
{"lineNum":"   87","line":"            }"},
{"lineNum":"   88","line":"        }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        pub fn final(self: Self) W {"},
{"lineNum":"   91","line":"            var c = self.crc;"},
{"lineNum":"   92","line":"            if (algorithm.reflect_input != algorithm.reflect_output) {"},
{"lineNum":"   93","line":"                c = @bitReverse(c);"},
{"lineNum":"   94","line":"            }"},
{"lineNum":"   95","line":"            if (!algorithm.reflect_output) {"},
{"lineNum":"   96","line":"                c >>= @bitSizeOf(I) - @bitSizeOf(W);"},
{"lineNum":"   97","line":"            }"},
{"lineNum":"   98","line":"            return @as(W, @intCast(c ^ algorithm.xor_output));"},
{"lineNum":"   99","line":"        }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        pub fn hash(bytes: []const u8) W {"},
{"lineNum":"  102","line":"            var c = Self.init();"},
{"lineNum":"  103","line":"            c.update(bytes);"},
{"lineNum":"  104","line":"            return c.final();"},
{"lineNum":"  105","line":"        }"},
{"lineNum":"  106","line":"    };"},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"pub const Polynomial = enum(u32) {"},
{"lineNum":"  110","line":"    IEEE = 0xedb88320,"},
{"lineNum":"  111","line":"    Castagnoli = 0x82f63b78,"},
{"lineNum":"  112","line":"    Koopman = 0xeb31d82e,"},
{"lineNum":"  113","line":"    _,"},
{"lineNum":"  114","line":"};"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"// IEEE is by far the most common CRC and so is aliased by default."},
{"lineNum":"  117","line":"pub const Crc32 = Crc32WithPoly(.IEEE);"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"// slicing-by-8 crc32 implementation."},
{"lineNum":"  120","line":"pub fn Crc32WithPoly(comptime poly: Polynomial) type {"},
{"lineNum":"  121","line":"    return struct {"},
{"lineNum":"  122","line":"        const Self = @This();"},
{"lineNum":"  123","line":"        const lookup_tables = block: {"},
{"lineNum":"  124","line":"            @setEvalBranchQuota(20000);"},
{"lineNum":"  125","line":"            var tables: [8][256]u32 = undefined;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"            for (&tables[0], 0..) |*e, i| {"},
{"lineNum":"  128","line":"                var crc = @as(u32, @intCast(i));"},
{"lineNum":"  129","line":"                var j: usize = 0;"},
{"lineNum":"  130","line":"                while (j < 8) : (j += 1) {"},
{"lineNum":"  131","line":"                    if (crc & 1 == 1) {"},
{"lineNum":"  132","line":"                        crc = (crc >> 1) ^ @intFromEnum(poly);"},
{"lineNum":"  133","line":"                    } else {"},
{"lineNum":"  134","line":"                        crc = (crc >> 1);"},
{"lineNum":"  135","line":"                    }"},
{"lineNum":"  136","line":"                }"},
{"lineNum":"  137","line":"                e.* = crc;"},
{"lineNum":"  138","line":"            }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"            var i: usize = 0;"},
{"lineNum":"  141","line":"            while (i < 256) : (i += 1) {"},
{"lineNum":"  142","line":"                var crc = tables[0][i];"},
{"lineNum":"  143","line":"                var j: usize = 1;"},
{"lineNum":"  144","line":"                while (j < 8) : (j += 1) {"},
{"lineNum":"  145","line":"                    const index: u8 = @truncate(crc);"},
{"lineNum":"  146","line":"                    crc = tables[0][index] ^ (crc >> 8);"},
{"lineNum":"  147","line":"                    tables[j][i] = crc;"},
{"lineNum":"  148","line":"                }"},
{"lineNum":"  149","line":"            }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"            break :block tables;"},
{"lineNum":"  152","line":"        };"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        crc: u32,"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"        pub fn init() Self {"},
{"lineNum":"  157","line":"            return Self{ .crc = 0xffffffff };"},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        pub fn update(self: *Self, input: []const u8) void {"},
{"lineNum":"  161","line":"            var i: usize = 0;"},
{"lineNum":"  162","line":"            while (i + 8 <= input.len) : (i += 8) {"},
{"lineNum":"  163","line":"                const p = input[i..][0..8];"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"                // Unrolling this way gives ~50Mb/s increase"},
{"lineNum":"  166","line":"                self.crc ^= std.mem.readIntLittle(u32, p[0..4]);"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"                self.crc ="},
{"lineNum":"  169","line":"                    lookup_tables[0][p[7]] ^"},
{"lineNum":"  170","line":"                    lookup_tables[1][p[6]] ^"},
{"lineNum":"  171","line":"                    lookup_tables[2][p[5]] ^"},
{"lineNum":"  172","line":"                    lookup_tables[3][p[4]] ^"},
{"lineNum":"  173","line":"                    lookup_tables[4][@as(u8, @truncate(self.crc >> 24))] ^"},
{"lineNum":"  174","line":"                    lookup_tables[5][@as(u8, @truncate(self.crc >> 16))] ^"},
{"lineNum":"  175","line":"                    lookup_tables[6][@as(u8, @truncate(self.crc >> 8))] ^"},
{"lineNum":"  176","line":"                    lookup_tables[7][@as(u8, @truncate(self.crc >> 0))];"},
{"lineNum":"  177","line":"            }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"            while (i < input.len) : (i += 1) {"},
{"lineNum":"  180","line":"                const index = @as(u8, @truncate(self.crc)) ^ input[i];"},
{"lineNum":"  181","line":"                self.crc = (self.crc >> 8) ^ lookup_tables[0][index];"},
{"lineNum":"  182","line":"            }"},
{"lineNum":"  183","line":"        }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        pub fn final(self: *Self) u32 {"},
{"lineNum":"  186","line":"            return ~self.crc;"},
{"lineNum":"  187","line":"        }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        pub fn hash(input: []const u8) u32 {"},
{"lineNum":"  190","line":"            var c = Self.init();"},
{"lineNum":"  191","line":"            c.update(input);"},
{"lineNum":"  192","line":"            return c.final();"},
{"lineNum":"  193","line":"        }"},
{"lineNum":"  194","line":"    };"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"test \"crc32 ieee\" {"},
{"lineNum":"  198","line":"    const Crc32Ieee = Crc32WithPoly(.IEEE);"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    try testing.expect(Crc32Ieee.hash(\"\") == 0x00000000);"},
{"lineNum":"  201","line":"    try testing.expect(Crc32Ieee.hash(\"a\") == 0xe8b7be43);"},
{"lineNum":"  202","line":"    try testing.expect(Crc32Ieee.hash(\"abc\") == 0x352441c2);"},
{"lineNum":"  203","line":"}"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"test \"crc32 castagnoli\" {"},
{"lineNum":"  206","line":"    const Crc32Castagnoli = Crc32WithPoly(.Castagnoli);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    try testing.expect(Crc32Castagnoli.hash(\"\") == 0x00000000);"},
{"lineNum":"  209","line":"    try testing.expect(Crc32Castagnoli.hash(\"a\") == 0xc1d04330);"},
{"lineNum":"  210","line":"    try testing.expect(Crc32Castagnoli.hash(\"abc\") == 0x364b3fb7);"},
{"lineNum":"  211","line":"}"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"// half-byte lookup table implementation."},
{"lineNum":"  214","line":"pub fn Crc32SmallWithPoly(comptime poly: Polynomial) type {"},
{"lineNum":"  215","line":"    return struct {"},
{"lineNum":"  216","line":"        const Self = @This();"},
{"lineNum":"  217","line":"        const lookup_table = block: {"},
{"lineNum":"  218","line":"            var table: [16]u32 = undefined;"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"            for (&table, 0..) |*e, i| {"},
{"lineNum":"  221","line":"                var crc = @as(u32, @intCast(i * 16));"},
{"lineNum":"  222","line":"                var j: usize = 0;"},
{"lineNum":"  223","line":"                while (j < 8) : (j += 1) {"},
{"lineNum":"  224","line":"                    if (crc & 1 == 1) {"},
{"lineNum":"  225","line":"                        crc = (crc >> 1) ^ @intFromEnum(poly);"},
{"lineNum":"  226","line":"                    } else {"},
{"lineNum":"  227","line":"                        crc = (crc >> 1);"},
{"lineNum":"  228","line":"                    }"},
{"lineNum":"  229","line":"                }"},
{"lineNum":"  230","line":"                e.* = crc;"},
{"lineNum":"  231","line":"            }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"            break :block table;"},
{"lineNum":"  234","line":"        };"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        crc: u32,"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"        pub fn init() Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"            return Self{ .crc = 0xffffffff };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"        }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        pub fn update(self: *Self, input: []const u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"            for (input) |b| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  244","line":"                self.crc = lookup_table[@as(u4, @truncate(self.crc ^ (b >> 0)))] ^ (self.crc >> 4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  245","line":"                self.crc = lookup_table[@as(u4, @truncate(self.crc ^ (b >> 4)))] ^ (self.crc >> 4);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  246","line":"            }"},
{"lineNum":"  247","line":"        }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"        pub fn final(self: *Self) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"            return ~self.crc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        pub fn hash(input: []const u8) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"            var c = Self.init();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"            c.update(input);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"            return c.final();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":"        }"},
{"lineNum":"  258","line":"    };"},
{"lineNum":"  259","line":"}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"test \"small crc32 ieee\" {"},
{"lineNum":"  262","line":"    const Crc32Ieee = Crc32SmallWithPoly(.IEEE);"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    try testing.expect(Crc32Ieee.hash(\"\") == 0x00000000);"},
{"lineNum":"  265","line":"    try testing.expect(Crc32Ieee.hash(\"a\") == 0xe8b7be43);"},
{"lineNum":"  266","line":"    try testing.expect(Crc32Ieee.hash(\"abc\") == 0x352441c2);"},
{"lineNum":"  267","line":"}"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"test \"small crc32 castagnoli\" {"},
{"lineNum":"  270","line":"    const Crc32Castagnoli = Crc32SmallWithPoly(.Castagnoli);"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    try testing.expect(Crc32Castagnoli.hash(\"\") == 0x00000000);"},
{"lineNum":"  273","line":"    try testing.expect(Crc32Castagnoli.hash(\"a\") == 0xc1d04330);"},
{"lineNum":"  274","line":"    try testing.expect(Crc32Castagnoli.hash(\"abc\") == 0x364b3fb7);"},
{"lineNum":"  275","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
