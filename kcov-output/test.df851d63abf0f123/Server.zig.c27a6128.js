var data = {lines:[
{"lineNum":"    1","line":"in: std.fs.File,"},
{"lineNum":"    2","line":"out: std.fs.File,"},
{"lineNum":"    3","line":"receive_fifo: std.fifo.LinearFifo(u8, .Dynamic),"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"pub const Message = struct {"},
{"lineNum":"    6","line":"    pub const Header = extern struct {"},
{"lineNum":"    7","line":"        tag: Tag,"},
{"lineNum":"    8","line":"        /// Size of the body only; does not include this Header."},
{"lineNum":"    9","line":"        bytes_len: u32,"},
{"lineNum":"   10","line":"    };"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"    pub const Tag = enum(u32) {"},
{"lineNum":"   13","line":"        /// Body is a UTF-8 string."},
{"lineNum":"   14","line":"        zig_version,"},
{"lineNum":"   15","line":"        /// Body is an ErrorBundle."},
{"lineNum":"   16","line":"        error_bundle,"},
{"lineNum":"   17","line":"        /// Body is a UTF-8 string."},
{"lineNum":"   18","line":"        progress,"},
{"lineNum":"   19","line":"        /// Body is a EmitBinPath."},
{"lineNum":"   20","line":"        emit_bin_path,"},
{"lineNum":"   21","line":"        /// Body is a TestMetadata"},
{"lineNum":"   22","line":"        test_metadata,"},
{"lineNum":"   23","line":"        /// Body is a TestResults"},
{"lineNum":"   24","line":"        test_results,"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"        _,"},
{"lineNum":"   27","line":"    };"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    /// Trailing:"},
{"lineNum":"   30","line":"    /// * extra: [extra_len]u32,"},
{"lineNum":"   31","line":"    /// * string_bytes: [string_bytes_len]u8,"},
{"lineNum":"   32","line":"    /// See `std.zig.ErrorBundle`."},
{"lineNum":"   33","line":"    pub const ErrorBundle = extern struct {"},
{"lineNum":"   34","line":"        extra_len: u32,"},
{"lineNum":"   35","line":"        string_bytes_len: u32,"},
{"lineNum":"   36","line":"    };"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    /// Trailing:"},
{"lineNum":"   39","line":"    /// * name: [tests_len]u32"},
{"lineNum":"   40","line":"    ///   - null-terminated string_bytes index"},
{"lineNum":"   41","line":"    /// * async_frame_len: [tests_len]u32,"},
{"lineNum":"   42","line":"    ///   - 0 means not async"},
{"lineNum":"   43","line":"    /// * expected_panic_msg: [tests_len]u32,"},
{"lineNum":"   44","line":"    ///   - null-terminated string_bytes index"},
{"lineNum":"   45","line":"    ///   - 0 means does not expect pani"},
{"lineNum":"   46","line":"    /// * string_bytes: [string_bytes_len]u8,"},
{"lineNum":"   47","line":"    pub const TestMetadata = extern struct {"},
{"lineNum":"   48","line":"        string_bytes_len: u32,"},
{"lineNum":"   49","line":"        tests_len: u32,"},
{"lineNum":"   50","line":"    };"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    pub const TestResults = extern struct {"},
{"lineNum":"   53","line":"        index: u32,"},
{"lineNum":"   54","line":"        flags: Flags,"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        pub const Flags = packed struct(u8) {"},
{"lineNum":"   57","line":"            fail: bool,"},
{"lineNum":"   58","line":"            skip: bool,"},
{"lineNum":"   59","line":"            leak: bool,"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"            reserved: u5 = 0,"},
{"lineNum":"   62","line":"        };"},
{"lineNum":"   63","line":"    };"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    /// Trailing:"},
{"lineNum":"   66","line":"    /// * the file system path the emitted binary can be found"},
{"lineNum":"   67","line":"    pub const EmitBinPath = extern struct {"},
{"lineNum":"   68","line":"        flags: Flags,"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"        pub const Flags = packed struct(u8) {"},
{"lineNum":"   71","line":"            cache_hit: bool,"},
{"lineNum":"   72","line":"            reserved: u7 = 0,"},
{"lineNum":"   73","line":"        };"},
{"lineNum":"   74","line":"    };"},
{"lineNum":"   75","line":"};"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"pub const Options = struct {"},
{"lineNum":"   78","line":"    gpa: Allocator,"},
{"lineNum":"   79","line":"    in: std.fs.File,"},
{"lineNum":"   80","line":"    out: std.fs.File,"},
{"lineNum":"   81","line":"    zig_version: []const u8,"},
{"lineNum":"   82","line":"};"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"pub fn init(options: Options) !Server {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"    var s: Server = .{"},
{"lineNum":"   86","line":"        .in = options.in,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"        .out = options.out,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"        .receive_fifo = std.fifo.LinearFifo(u8, .Dynamic).init(options.gpa),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    };"},
{"lineNum":"   90","line":"    try s.serveStringMessage(.zig_version, options.zig_version);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"    return s;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"pub fn deinit(s: *Server) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"    s.receive_fifo.deinit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"    s.* = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"pub fn receiveMessage(s: *Server) !InMessage.Header {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    const Header = InMessage.Header;"},
{"lineNum":"  101","line":"    const fifo = &s.receive_fifo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    while (true) {"},
{"lineNum":"  104","line":"        const buf = fifo.readableSlice(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"        assert(fifo.readableLength() == buf.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"        if (buf.len >= @sizeOf(Header)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"            // workaround for https://github.com/ziglang/zig/issues/14904"},
{"lineNum":"  108","line":"            const bytes_len = bswap_and_workaround_u32(buf[4..][0..4]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  109","line":"            const tag = bswap_and_workaround_tag(buf[0..][0..4]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"            if (buf.len - @sizeOf(Header) >= bytes_len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"                fifo.discard(@sizeOf(Header));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"                return .{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"                    .tag = tag,"},
{"lineNum":"  115","line":"                    .bytes_len = bytes_len,"},
{"lineNum":"  116","line":"                };"},
{"lineNum":"  117","line":"            } else {"},
{"lineNum":"  118","line":"                const needed = bytes_len - (buf.len - @sizeOf(Header));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"                const write_buffer = try fifo.writableWithSize(needed);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"                const amt = try s.in.read(write_buffer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                fifo.update(amt);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"            }"},
{"lineNum":"  124","line":"        }"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"        const write_buffer = try fifo.writableWithSize(256);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"        const amt = try s.in.read(write_buffer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"        fifo.update(amt);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":"}"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"pub fn receiveBody_u32(s: *Server) !u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"    const fifo = &s.receive_fifo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"    const buf = fifo.readableSlice(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"    const result = @as(*align(1) const u32, @ptrCast(buf[0..4])).*;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"    fifo.discard(4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"    return bswap(result);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"}"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"pub fn serveStringMessage(s: *Server, tag: OutMessage.Tag, msg: []const u8) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"    return s.serveMessage(.{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  142","line":"        .tag = tag,"},
{"lineNum":"  143","line":"        .bytes_len = @as(u32, @intCast(msg.len)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  144","line":"    }, &.{msg});"},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"pub fn serveMessage("},
{"lineNum":"  148","line":"    s: *const Server,"},
{"lineNum":"  149","line":"    header: OutMessage.Header,"},
{"lineNum":"  150","line":"    bufs: []const []const u8,"},
{"lineNum":"  151","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"    var iovecs: [10]std.os.iovec_const = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"    const header_le = bswap(header);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"    iovecs[0] = .{"},
{"lineNum":"  155","line":"        .iov_base = @as([*]const u8, @ptrCast(&header_le)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"        .iov_len = @sizeOf(OutMessage.Header),"},
{"lineNum":"  157","line":"    };"},
{"lineNum":"  158","line":"    for (bufs, iovecs[1 .. bufs.len + 1]) |buf, *iovec| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  159","line":"        iovec.* = .{"},
{"lineNum":"  160","line":"            .iov_base = buf.ptr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"            .iov_len = buf.len,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"        };"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":"    try s.out.writevAll(iovecs[0 .. bufs.len + 1]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":"}"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"pub fn serveEmitBinPath("},
{"lineNum":"  168","line":"    s: *Server,"},
{"lineNum":"  169","line":"    fs_path: []const u8,"},
{"lineNum":"  170","line":"    header: OutMessage.EmitBinPath,"},
{"lineNum":"  171","line":") !void {"},
{"lineNum":"  172","line":"    try s.serveMessage(.{"},
{"lineNum":"  173","line":"        .tag = .emit_bin_path,"},
{"lineNum":"  174","line":"        .bytes_len = @as(u32, @intCast(fs_path.len + @sizeOf(OutMessage.EmitBinPath))),"},
{"lineNum":"  175","line":"    }, &.{"},
{"lineNum":"  176","line":"        std.mem.asBytes(&header),"},
{"lineNum":"  177","line":"        fs_path,"},
{"lineNum":"  178","line":"    });"},
{"lineNum":"  179","line":"}"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"pub fn serveTestResults("},
{"lineNum":"  182","line":"    s: *Server,"},
{"lineNum":"  183","line":"    msg: OutMessage.TestResults,"},
{"lineNum":"  184","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"    const msg_le = bswap(msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"    try s.serveMessage(.{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  187","line":"        .tag = .test_results,"},
{"lineNum":"  188","line":"        .bytes_len = @as(u32, @intCast(@sizeOf(OutMessage.TestResults))),"},
{"lineNum":"  189","line":"    }, &.{"},
{"lineNum":"  190","line":"        std.mem.asBytes(&msg_le),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"    });"},
{"lineNum":"  192","line":"}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"pub fn serveErrorBundle(s: *Server, error_bundle: std.zig.ErrorBundle) !void {"},
{"lineNum":"  195","line":"    const eb_hdr: OutMessage.ErrorBundle = .{"},
{"lineNum":"  196","line":"        .extra_len = @as(u32, @intCast(error_bundle.extra.len)),"},
{"lineNum":"  197","line":"        .string_bytes_len = @as(u32, @intCast(error_bundle.string_bytes.len)),"},
{"lineNum":"  198","line":"    };"},
{"lineNum":"  199","line":"    const bytes_len = @sizeOf(OutMessage.ErrorBundle) +"},
{"lineNum":"  200","line":"        4 * error_bundle.extra.len + error_bundle.string_bytes.len;"},
{"lineNum":"  201","line":"    try s.serveMessage(.{"},
{"lineNum":"  202","line":"        .tag = .error_bundle,"},
{"lineNum":"  203","line":"        .bytes_len = @as(u32, @intCast(bytes_len)),"},
{"lineNum":"  204","line":"    }, &.{"},
{"lineNum":"  205","line":"        std.mem.asBytes(&eb_hdr),"},
{"lineNum":"  206","line":"        // TODO: implement @ptrCast between slices changing the length"},
{"lineNum":"  207","line":"        std.mem.sliceAsBytes(error_bundle.extra),"},
{"lineNum":"  208","line":"        error_bundle.string_bytes,"},
{"lineNum":"  209","line":"    });"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"pub const TestMetadata = struct {"},
{"lineNum":"  213","line":"    names: []u32,"},
{"lineNum":"  214","line":"    async_frame_sizes: []u32,"},
{"lineNum":"  215","line":"    expected_panic_msgs: []u32,"},
{"lineNum":"  216","line":"    string_bytes: []const u8,"},
{"lineNum":"  217","line":"};"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"pub fn serveTestMetadata(s: *Server, test_metadata: TestMetadata) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"    const header: OutMessage.TestMetadata = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"        .tests_len = bswap(@as(u32, @intCast(test_metadata.names.len))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":"        .string_bytes_len = bswap(@as(u32, @intCast(test_metadata.string_bytes.len))),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  223","line":"    };"},
{"lineNum":"  224","line":"    const bytes_len = @sizeOf(OutMessage.TestMetadata) +","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"        3 * 4 * test_metadata.names.len + test_metadata.string_bytes.len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    if (need_bswap) {"},
{"lineNum":"  228","line":"        bswap_u32_array(test_metadata.names);"},
{"lineNum":"  229","line":"        bswap_u32_array(test_metadata.async_frame_sizes);"},
{"lineNum":"  230","line":"        bswap_u32_array(test_metadata.expected_panic_msgs);"},
{"lineNum":"  231","line":"    }"},
{"lineNum":"  232","line":"    defer if (need_bswap) {"},
{"lineNum":"  233","line":"        bswap_u32_array(test_metadata.names);"},
{"lineNum":"  234","line":"        bswap_u32_array(test_metadata.async_frame_sizes);"},
{"lineNum":"  235","line":"        bswap_u32_array(test_metadata.expected_panic_msgs);"},
{"lineNum":"  236","line":"    };"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    return s.serveMessage(.{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  239","line":"        .tag = .test_metadata,"},
{"lineNum":"  240","line":"        .bytes_len = @as(u32, @intCast(bytes_len)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"    }, &.{"},
{"lineNum":"  242","line":"        std.mem.asBytes(&header),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"        // TODO: implement @ptrCast between slices changing the length"},
{"lineNum":"  244","line":"        std.mem.sliceAsBytes(test_metadata.names),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"        std.mem.sliceAsBytes(test_metadata.async_frame_sizes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"        std.mem.sliceAsBytes(test_metadata.expected_panic_msgs),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"        test_metadata.string_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"    });"},
{"lineNum":"  249","line":"}"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"fn bswap(x: anytype) @TypeOf(x) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  252","line":"    if (!need_bswap) return x;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    const T = @TypeOf(x);"},
{"lineNum":"  255","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  256","line":"        .Enum => return @as(T, @enumFromInt(@byteSwap(@intFromEnum(x)))),"},
{"lineNum":"  257","line":"        .Int => return @byteSwap(x),"},
{"lineNum":"  258","line":"        .Struct => |info| switch (info.layout) {"},
{"lineNum":"  259","line":"            .Extern => {"},
{"lineNum":"  260","line":"                var result: T = undefined;"},
{"lineNum":"  261","line":"                inline for (info.fields) |field| {"},
{"lineNum":"  262","line":"                    @field(result, field.name) = bswap(@field(x, field.name));"},
{"lineNum":"  263","line":"                }"},
{"lineNum":"  264","line":"                return result;"},
{"lineNum":"  265","line":"            },"},
{"lineNum":"  266","line":"            .Packed => {"},
{"lineNum":"  267","line":"                const I = info.backing_integer.?;"},
{"lineNum":"  268","line":"                return @as(T, @bitCast(@byteSwap(@as(I, @bitCast(x)))));"},
{"lineNum":"  269","line":"            },"},
{"lineNum":"  270","line":"            .Auto => @compileError(\"auto layout struct\"),"},
{"lineNum":"  271","line":"        },"},
{"lineNum":"  272","line":"        else => @compileError(\"bswap on type \" ++ @typeName(T)),"},
{"lineNum":"  273","line":"    }"},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"fn bswap_u32_array(slice: []u32) void {"},
{"lineNum":"  277","line":"    comptime assert(need_bswap);"},
{"lineNum":"  278","line":"    for (slice) |*elem| elem.* = @byteSwap(elem.*);"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"/// workaround for https://github.com/ziglang/zig/issues/14904"},
{"lineNum":"  282","line":"fn bswap_and_workaround_u32(bytes_ptr: *const [4]u8) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"    return std.mem.readIntLittle(u32, bytes_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"}"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"/// workaround for https://github.com/ziglang/zig/issues/14904"},
{"lineNum":"  287","line":"fn bswap_and_workaround_tag(bytes_ptr: *const [4]u8) InMessage.Tag {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"    const int = std.mem.readIntLittle(u32, bytes_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"    return @as(InMessage.Tag, @enumFromInt(int));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"}"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"const OutMessage = std.zig.Server.Message;"},
{"lineNum":"  293","line":"const InMessage = std.zig.Client.Message;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"const Server = @This();"},
{"lineNum":"  296","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"  297","line":"const std = @import(\"std\");"},
{"lineNum":"  298","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"  299","line":"const assert = std.debug.assert;"},
{"lineNum":"  300","line":"const native_endian = builtin.target.cpu.arch.endian();"},
{"lineNum":"  301","line":"const need_bswap = native_endian != .Little;"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 68, "covered" : 0,};
var merged_data = [];
