var data = {lines:[
{"lineNum":"    1","line":"//! This API non-allocating, non-fallible, and thread-safe."},
{"lineNum":"    2","line":"//! The tradeoff is that users of this API must provide the storage"},
{"lineNum":"    3","line":"//! for each `Progress.Node`."},
{"lineNum":"    4","line":"//!"},
{"lineNum":"    5","line":"//! Initialize the struct directly, overriding these fields as desired:"},
{"lineNum":"    6","line":"//! * `refresh_rate_ms`"},
{"lineNum":"    7","line":"//! * `initial_delay_ms`"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"const std = @import(\"std\");"},
{"lineNum":"   10","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"   11","line":"const windows = std.os.windows;"},
{"lineNum":"   12","line":"const testing = std.testing;"},
{"lineNum":"   13","line":"const assert = std.debug.assert;"},
{"lineNum":"   14","line":"const Progress = @This();"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"/// `null` if the current node (and its children) should"},
{"lineNum":"   17","line":"/// not print on update()"},
{"lineNum":"   18","line":"terminal: ?std.fs.File = undefined,"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"/// Is this a windows API terminal (note: this is not the same as being run on windows"},
{"lineNum":"   21","line":"/// because other terminals exist like MSYS/git-bash)"},
{"lineNum":"   22","line":"is_windows_terminal: bool = false,"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"/// Whether the terminal supports ANSI escape codes."},
{"lineNum":"   25","line":"supports_ansi_escape_codes: bool = false,"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"/// If the terminal is \"dumb\", don\'t print output."},
{"lineNum":"   28","line":"/// This can be useful if you don\'t want to print all"},
{"lineNum":"   29","line":"/// the stages of code generation if there are a lot."},
{"lineNum":"   30","line":"/// You should not use it if the user should see output"},
{"lineNum":"   31","line":"/// for example showing the user what tests run."},
{"lineNum":"   32","line":"dont_print_on_dumb: bool = false,"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"root: Node = undefined,"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"/// Keeps track of how much time has passed since the beginning."},
{"lineNum":"   37","line":"/// Used to compare with `initial_delay_ms` and `refresh_rate_ms`."},
{"lineNum":"   38","line":"timer: ?std.time.Timer = null,"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"/// When the previous refresh was written to the terminal."},
{"lineNum":"   41","line":"/// Used to compare with `refresh_rate_ms`."},
{"lineNum":"   42","line":"prev_refresh_timestamp: u64 = undefined,"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"/// This buffer represents the maximum number of bytes written to the terminal"},
{"lineNum":"   45","line":"/// with each refresh."},
{"lineNum":"   46","line":"output_buffer: [100]u8 = undefined,"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"/// How many nanoseconds between writing updates to the terminal."},
{"lineNum":"   49","line":"refresh_rate_ns: u64 = 50 * std.time.ns_per_ms,"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/// How many nanoseconds to keep the output hidden"},
{"lineNum":"   52","line":"initial_delay_ns: u64 = 500 * std.time.ns_per_ms,"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"done: bool = true,"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"/// Protects the `refresh` function, as well as `node.recently_updated_child`."},
{"lineNum":"   57","line":"/// Without this, callsites would call `Node.end` and then free `Node` memory"},
{"lineNum":"   58","line":"/// while it was still being accessed by the `refresh` function."},
{"lineNum":"   59","line":"update_mutex: std.Thread.Mutex = .{},"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"/// Keeps track of how many columns in the terminal have been output, so that"},
{"lineNum":"   62","line":"/// we can move the cursor back later."},
{"lineNum":"   63","line":"columns_written: usize = undefined,"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"/// Represents one unit of progress. Each node can have children nodes, or"},
{"lineNum":"   66","line":"/// one can use integers with `update`."},
{"lineNum":"   67","line":"pub const Node = struct {"},
{"lineNum":"   68","line":"    context: *Progress,"},
{"lineNum":"   69","line":"    parent: ?*Node,"},
{"lineNum":"   70","line":"    name: []const u8,"},
{"lineNum":"   71","line":"    unit: []const u8 = \"\","},
{"lineNum":"   72","line":"    /// Must be handled atomically to be thread-safe."},
{"lineNum":"   73","line":"    recently_updated_child: ?*Node = null,"},
{"lineNum":"   74","line":"    /// Must be handled atomically to be thread-safe. 0 means null."},
{"lineNum":"   75","line":"    unprotected_estimated_total_items: usize,"},
{"lineNum":"   76","line":"    /// Must be handled atomically to be thread-safe."},
{"lineNum":"   77","line":"    unprotected_completed_items: usize,"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    /// Create a new child progress node. Thread-safe."},
{"lineNum":"   80","line":"    /// Call `Node.end` when done."},
{"lineNum":"   81","line":"    /// TODO solve https://github.com/ziglang/zig/issues/2765 and then change this"},
{"lineNum":"   82","line":"    /// API to set `self.parent.recently_updated_child` with the return value."},
{"lineNum":"   83","line":"    /// Until that is fixed you probably want to call `activate` on the return value."},
{"lineNum":"   84","line":"    /// Passing 0 for `estimated_total_items` means unknown."},
{"lineNum":"   85","line":"    pub fn start(self: *Node, name: []const u8, estimated_total_items: usize) Node {","class":"lineCov","hits":"1","order":"491","possible_hits":"1",},
{"lineNum":"   86","line":"        return Node{","class":"lineCov","hits":"1","order":"493","possible_hits":"1",},
{"lineNum":"   87","line":"            .context = self.context,","class":"lineCov","hits":"1","order":"492","possible_hits":"1",},
{"lineNum":"   88","line":"            .parent = self,"},
{"lineNum":"   89","line":"            .name = name,"},
{"lineNum":"   90","line":"            .unprotected_estimated_total_items = estimated_total_items,"},
{"lineNum":"   91","line":"            .unprotected_completed_items = 0,"},
{"lineNum":"   92","line":"        };"},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    /// This is the same as calling `start` and then `end` on the returned `Node`. Thread-safe."},
{"lineNum":"   96","line":"    pub fn completeOne(self: *Node) void {","class":"lineCov","hits":"1","order":"1265","possible_hits":"1",},
{"lineNum":"   97","line":"        if (self.parent) |parent| {","class":"linePartCov","hits":"1","order":"1266","possible_hits":"2",},
{"lineNum":"   98","line":"            @atomicStore(?*Node, &parent.recently_updated_child, self, .Release);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"        }"},
{"lineNum":"  100","line":"        _ = @atomicRmw(usize, &self.unprotected_completed_items, .Add, 1, .Monotonic);","class":"lineCov","hits":"1","order":"1267","possible_hits":"1",},
{"lineNum":"  101","line":"        self.context.maybeRefresh();","class":"lineCov","hits":"1","order":"1268","possible_hits":"1",},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    /// Finish a started `Node`. Thread-safe."},
{"lineNum":"  105","line":"    pub fn end(self: *Node) void {","class":"lineCov","hits":"1","order":"1249","possible_hits":"1",},
{"lineNum":"  106","line":"        self.context.maybeRefresh();","class":"lineCov","hits":"1","order":"1250","possible_hits":"1",},
{"lineNum":"  107","line":"        if (self.parent) |parent| {","class":"lineCov","hits":"2","order":"1251","possible_hits":"2",},
{"lineNum":"  108","line":"            {"},
{"lineNum":"  109","line":"                self.context.update_mutex.lock();","class":"lineCov","hits":"1","order":"1252","possible_hits":"1",},
{"lineNum":"  110","line":"                defer self.context.update_mutex.unlock();","class":"lineCov","hits":"1","order":"1263","possible_hits":"1",},
{"lineNum":"  111","line":"                _ = @cmpxchgStrong(?*Node, &parent.recently_updated_child, self, null, .Monotonic, .Monotonic);","class":"lineCov","hits":"1","order":"1262","possible_hits":"1",},
{"lineNum":"  112","line":"            }"},
{"lineNum":"  113","line":"            parent.completeOne();","class":"lineCov","hits":"1","order":"1264","possible_hits":"1",},
{"lineNum":"  114","line":"        } else {"},
{"lineNum":"  115","line":"            self.context.update_mutex.lock();","class":"lineCov","hits":"1","order":"3532","possible_hits":"1",},
{"lineNum":"  116","line":"            defer self.context.update_mutex.unlock();","class":"lineCov","hits":"2","order":"1269","possible_hits":"2",},
{"lineNum":"  117","line":"            self.context.done = true;","class":"lineCov","hits":"1","order":"3533","possible_hits":"1",},
{"lineNum":"  118","line":"            self.context.refreshWithHeldLock();","class":"lineCov","hits":"1","order":"3534","possible_hits":"1",},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    /// Tell the parent node that this node is actively being worked on. Thread-safe."},
{"lineNum":"  123","line":"    pub fn activate(self: *Node) void {","class":"lineCov","hits":"1","order":"495","possible_hits":"1",},
{"lineNum":"  124","line":"        if (self.parent) |parent| {","class":"lineCov","hits":"2","order":"496","possible_hits":"2",},
{"lineNum":"  125","line":"            @atomicStore(?*Node, &parent.recently_updated_child, self, .Release);","class":"lineCov","hits":"1","order":"497","possible_hits":"1",},
{"lineNum":"  126","line":"            self.context.maybeRefresh();","class":"lineCov","hits":"2","order":"498","possible_hits":"2",},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    /// Thread-safe."},
{"lineNum":"  131","line":"    pub fn setName(self: *Node, name: []const u8) void {"},
{"lineNum":"  132","line":"        const progress = self.context;"},
{"lineNum":"  133","line":"        progress.update_mutex.lock();"},
{"lineNum":"  134","line":"        defer progress.update_mutex.unlock();"},
{"lineNum":"  135","line":"        self.name = name;"},
{"lineNum":"  136","line":"        if (self.parent) |parent| {"},
{"lineNum":"  137","line":"            @atomicStore(?*Node, &parent.recently_updated_child, self, .Release);"},
{"lineNum":"  138","line":"            if (parent.parent) |grand_parent| {"},
{"lineNum":"  139","line":"                @atomicStore(?*Node, &grand_parent.recently_updated_child, parent, .Release);"},
{"lineNum":"  140","line":"            }"},
{"lineNum":"  141","line":"            if (progress.timer) |*timer| progress.maybeRefreshWithHeldLock(timer);"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    /// Thread-safe."},
{"lineNum":"  146","line":"    pub fn setUnit(self: *Node, unit: []const u8) void {"},
{"lineNum":"  147","line":"        const progress = self.context;"},
{"lineNum":"  148","line":"        progress.update_mutex.lock();"},
{"lineNum":"  149","line":"        defer progress.update_mutex.unlock();"},
{"lineNum":"  150","line":"        self.unit = unit;"},
{"lineNum":"  151","line":"        if (self.parent) |parent| {"},
{"lineNum":"  152","line":"            @atomicStore(?*Node, &parent.recently_updated_child, self, .Release);"},
{"lineNum":"  153","line":"            if (parent.parent) |grand_parent| {"},
{"lineNum":"  154","line":"                @atomicStore(?*Node, &grand_parent.recently_updated_child, parent, .Release);"},
{"lineNum":"  155","line":"            }"},
{"lineNum":"  156","line":"            if (progress.timer) |*timer| progress.maybeRefreshWithHeldLock(timer);"},
{"lineNum":"  157","line":"        }"},
{"lineNum":"  158","line":"    }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    /// Thread-safe. 0 means unknown."},
{"lineNum":"  161","line":"    pub fn setEstimatedTotalItems(self: *Node, count: usize) void {"},
{"lineNum":"  162","line":"        @atomicStore(usize, &self.unprotected_estimated_total_items, count, .Monotonic);"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    /// Thread-safe."},
{"lineNum":"  166","line":"    pub fn setCompletedItems(self: *Node, completed_items: usize) void {"},
{"lineNum":"  167","line":"        @atomicStore(usize, &self.unprotected_completed_items, completed_items, .Monotonic);"},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":"};"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"/// Create a new progress node."},
{"lineNum":"  172","line":"/// Call `Node.end` when done."},
{"lineNum":"  173","line":"/// TODO solve https://github.com/ziglang/zig/issues/2765 and then change this"},
{"lineNum":"  174","line":"/// API to return Progress rather than accept it as a parameter."},
{"lineNum":"  175","line":"/// `estimated_total_items` value of 0 means unknown."},
{"lineNum":"  176","line":"pub fn start(self: *Progress, name: []const u8, estimated_total_items: usize) *Node {","class":"lineCov","hits":"1","order":"352","possible_hits":"1",},
{"lineNum":"  177","line":"    const stderr = std.io.getStdErr();","class":"lineCov","hits":"1","order":"353","possible_hits":"1",},
{"lineNum":"  178","line":"    self.terminal = null;","class":"lineCov","hits":"1","order":"359","possible_hits":"1",},
{"lineNum":"  179","line":"    if (stderr.supportsAnsiEscapeCodes()) {","class":"lineCov","hits":"1","order":"360","possible_hits":"1",},
{"lineNum":"  180","line":"        self.terminal = stderr;","class":"lineCov","hits":"1","order":"392","possible_hits":"1",},
{"lineNum":"  181","line":"        self.supports_ansi_escape_codes = true;","class":"lineCov","hits":"1","order":"393","possible_hits":"1",},
{"lineNum":"  182","line":"    } else if (builtin.os.tag == .windows and stderr.isTty()) {"},
{"lineNum":"  183","line":"        self.is_windows_terminal = true;"},
{"lineNum":"  184","line":"        self.terminal = stderr;"},
{"lineNum":"  185","line":"    } else if (builtin.os.tag != .windows) {"},
{"lineNum":"  186","line":"        // we are in a \"dumb\" terminal like in acme or writing to a file"},
{"lineNum":"  187","line":"        self.terminal = stderr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":"    self.root = Node{","class":"lineCov","hits":"1","order":"394","possible_hits":"1",},
{"lineNum":"  190","line":"        .context = self,"},
{"lineNum":"  191","line":"        .parent = null,"},
{"lineNum":"  192","line":"        .name = name,"},
{"lineNum":"  193","line":"        .unprotected_estimated_total_items = estimated_total_items,"},
{"lineNum":"  194","line":"        .unprotected_completed_items = 0,"},
{"lineNum":"  195","line":"    };"},
{"lineNum":"  196","line":"    self.columns_written = 0;","class":"lineCov","hits":"1","order":"395","possible_hits":"1",},
{"lineNum":"  197","line":"    self.prev_refresh_timestamp = 0;","class":"lineCov","hits":"1","order":"396","possible_hits":"1",},
{"lineNum":"  198","line":"    self.timer = std.time.Timer.start() catch null;","class":"lineCov","hits":"2","order":"397","possible_hits":"2",},
{"lineNum":"  199","line":"    self.done = false;","class":"lineCov","hits":"1","order":"480","possible_hits":"1",},
{"lineNum":"  200","line":"    return &self.root;","class":"lineCov","hits":"1","order":"481","possible_hits":"1",},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"/// Updates the terminal if enough time has passed since last update. Thread-safe."},
{"lineNum":"  204","line":"pub fn maybeRefresh(self: *Progress) void {","class":"lineCov","hits":"1","order":"499","possible_hits":"1",},
{"lineNum":"  205","line":"    if (self.timer) |*timer| {","class":"lineCov","hits":"2","order":"500","possible_hits":"2",},
{"lineNum":"  206","line":"        if (!self.update_mutex.tryLock()) return;","class":"linePartCov","hits":"1","order":"501","possible_hits":"2",},
{"lineNum":"  207","line":"        defer self.update_mutex.unlock();","class":"linePartCov","hits":"2","order":"558","possible_hits":"3",},
{"lineNum":"  208","line":"        maybeRefreshWithHeldLock(self, timer);","class":"lineCov","hits":"1","order":"531","possible_hits":"1",},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"fn maybeRefreshWithHeldLock(self: *Progress, timer: *std.time.Timer) void {","class":"lineCov","hits":"1","order":"532","possible_hits":"1",},
{"lineNum":"  213","line":"    const now = timer.read();","class":"lineCov","hits":"1","order":"533","possible_hits":"1",},
{"lineNum":"  214","line":"    if (now < self.initial_delay_ns) return;","class":"lineCov","hits":"2","order":"557","possible_hits":"2",},
{"lineNum":"  215","line":"    // TODO I have observed this to happen sometimes. I think we need to follow Rust\'s"},
{"lineNum":"  216","line":"    // lead and guarantee monotonically increasing times in the std lib itself."},
{"lineNum":"  217","line":"    if (now < self.prev_refresh_timestamp) return;","class":"linePartCov","hits":"1","order":"2808","possible_hits":"2",},
{"lineNum":"  218","line":"    if (now - self.prev_refresh_timestamp < self.refresh_rate_ns) return;","class":"linePartCov","hits":"1","order":"2809","possible_hits":"2",},
{"lineNum":"  219","line":"    return self.refreshWithHeldLock();","class":"lineCov","hits":"1","order":"2810","possible_hits":"1",},
{"lineNum":"  220","line":"}"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"/// Updates the terminal and resets `self.next_refresh_timestamp`. Thread-safe."},
{"lineNum":"  223","line":"pub fn refresh(self: *Progress) void {","class":"lineCov","hits":"1","order":"573","possible_hits":"1",},
{"lineNum":"  224","line":"    if (!self.update_mutex.tryLock()) return;","class":"linePartCov","hits":"1","order":"574","possible_hits":"2",},
{"lineNum":"  225","line":"    defer self.update_mutex.unlock();","class":"lineCov","hits":"1","order":"694","possible_hits":"1",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    return self.refreshWithHeldLock();","class":"lineCov","hits":"2","order":"575","possible_hits":"2",},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"fn clearWithHeldLock(p: *Progress, end_ptr: *usize) void {","class":"lineCov","hits":"1","order":"582","possible_hits":"1",},
{"lineNum":"  231","line":"    const file = p.terminal orelse return;","class":"lineCov","hits":"2","order":"583","possible_hits":"2",},
{"lineNum":"  232","line":"    var end = end_ptr.*;","class":"lineCov","hits":"1","order":"584","possible_hits":"1",},
{"lineNum":"  233","line":"    if (p.columns_written > 0) {","class":"lineCov","hits":"1","order":"585","possible_hits":"1",},
{"lineNum":"  234","line":"        // restore the cursor position by moving the cursor"},
{"lineNum":"  235","line":"        // `columns_written` cells to the left, then clear the rest of the"},
{"lineNum":"  236","line":"        // line"},
{"lineNum":"  237","line":"        if (p.supports_ansi_escape_codes) {","class":"lineCov","hits":"1","order":"1294","possible_hits":"1",},
{"lineNum":"  238","line":"            end += (std.fmt.bufPrint(p.output_buffer[end..], \"\\x1b[{d}D\", .{p.columns_written}) catch unreachable).len;","class":"lineCov","hits":"2","order":"1295","possible_hits":"2",},
{"lineNum":"  239","line":"            end += (std.fmt.bufPrint(p.output_buffer[end..], \"\\x1b[0K\", .{}) catch unreachable).len;","class":"lineCov","hits":"1","order":"1296","possible_hits":"1",},
{"lineNum":"  240","line":"        } else if (builtin.os.tag == .windows) winapi: {"},
{"lineNum":"  241","line":"            std.debug.assert(p.is_windows_terminal);"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"            var info: windows.CONSOLE_SCREEN_BUFFER_INFO = undefined;"},
{"lineNum":"  244","line":"            if (windows.kernel32.GetConsoleScreenBufferInfo(file.handle, &info) != windows.TRUE) {"},
{"lineNum":"  245","line":"                // stop trying to write to this file"},
{"lineNum":"  246","line":"                p.terminal = null;"},
{"lineNum":"  247","line":"                break :winapi;"},
{"lineNum":"  248","line":"            }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            var cursor_pos = windows.COORD{"},
{"lineNum":"  251","line":"                .X = info.dwCursorPosition.X - @as(windows.SHORT, @intCast(p.columns_written)),"},
{"lineNum":"  252","line":"                .Y = info.dwCursorPosition.Y,"},
{"lineNum":"  253","line":"            };"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"            if (cursor_pos.X < 0)"},
{"lineNum":"  256","line":"                cursor_pos.X = 0;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"            const fill_chars = @as(windows.DWORD, @intCast(info.dwSize.X - cursor_pos.X));"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"            var written: windows.DWORD = undefined;"},
{"lineNum":"  261","line":"            if (windows.kernel32.FillConsoleOutputAttribute("},
{"lineNum":"  262","line":"                file.handle,"},
{"lineNum":"  263","line":"                info.wAttributes,"},
{"lineNum":"  264","line":"                fill_chars,"},
{"lineNum":"  265","line":"                cursor_pos,"},
{"lineNum":"  266","line":"                &written,"},
{"lineNum":"  267","line":"            ) != windows.TRUE) {"},
{"lineNum":"  268","line":"                // stop trying to write to this file"},
{"lineNum":"  269","line":"                p.terminal = null;"},
{"lineNum":"  270","line":"                break :winapi;"},
{"lineNum":"  271","line":"            }"},
{"lineNum":"  272","line":"            if (windows.kernel32.FillConsoleOutputCharacterW("},
{"lineNum":"  273","line":"                file.handle,"},
{"lineNum":"  274","line":"                \' \',"},
{"lineNum":"  275","line":"                fill_chars,"},
{"lineNum":"  276","line":"                cursor_pos,"},
{"lineNum":"  277","line":"                &written,"},
{"lineNum":"  278","line":"            ) != windows.TRUE) {"},
{"lineNum":"  279","line":"                // stop trying to write to this file"},
{"lineNum":"  280","line":"                p.terminal = null;"},
{"lineNum":"  281","line":"                break :winapi;"},
{"lineNum":"  282","line":"            }"},
{"lineNum":"  283","line":"            if (windows.kernel32.SetConsoleCursorPosition(file.handle, cursor_pos) != windows.TRUE) {"},
{"lineNum":"  284","line":"                // stop trying to write to this file"},
{"lineNum":"  285","line":"                p.terminal = null;"},
{"lineNum":"  286","line":"                break :winapi;"},
{"lineNum":"  287","line":"            }"},
{"lineNum":"  288","line":"        } else {"},
{"lineNum":"  289","line":"            // we are in a \"dumb\" terminal like in acme or writing to a file"},
{"lineNum":"  290","line":"            p.output_buffer[end] = \'\\n\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  291","line":"            end += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  292","line":"        }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"        p.columns_written = 0;","class":"lineCov","hits":"1","order":"586","possible_hits":"1",},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":"    end_ptr.* = end;","class":"lineCov","hits":"1","order":"587","possible_hits":"1",},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"fn refreshWithHeldLock(self: *Progress) void {","class":"lineCov","hits":"1","order":"576","possible_hits":"1",},
{"lineNum":"  300","line":"    const is_dumb = !self.supports_ansi_escape_codes and !self.is_windows_terminal;","class":"linePartCov","hits":"1","order":"577","possible_hits":"2",},
{"lineNum":"  301","line":"    if (is_dumb and self.dont_print_on_dumb) return;","class":"lineCov","hits":"2","order":"578","possible_hits":"2",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    const file = self.terminal orelse return;","class":"lineCov","hits":"3","order":"579","possible_hits":"3",},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    var end: usize = 0;","class":"lineCov","hits":"1","order":"580","possible_hits":"1",},
{"lineNum":"  306","line":"    clearWithHeldLock(self, &end);","class":"lineCov","hits":"1","order":"581","possible_hits":"1",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    if (!self.done) {","class":"lineCov","hits":"1","order":"588","possible_hits":"1",},
{"lineNum":"  309","line":"        var need_ellipse = false;","class":"lineCov","hits":"1","order":"589","possible_hits":"1",},
{"lineNum":"  310","line":"        var maybe_node: ?*Node = &self.root;","class":"lineCov","hits":"1","order":"590","possible_hits":"1",},
{"lineNum":"  311","line":"        while (maybe_node) |node| {","class":"lineCov","hits":"2","order":"591","possible_hits":"2",},
{"lineNum":"  312","line":"            if (need_ellipse) {","class":"lineCov","hits":"1","order":"592","possible_hits":"1",},
{"lineNum":"  313","line":"                self.bufWrite(&end, \"... \", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"            }"},
{"lineNum":"  315","line":"            need_ellipse = false;","class":"lineCov","hits":"1","order":"593","possible_hits":"1",},
{"lineNum":"  316","line":"            const eti = @atomicLoad(usize, &node.unprotected_estimated_total_items, .Monotonic);","class":"lineCov","hits":"1","order":"594","possible_hits":"1",},
{"lineNum":"  317","line":"            const completed_items = @atomicLoad(usize, &node.unprotected_completed_items, .Monotonic);","class":"lineCov","hits":"1","order":"595","possible_hits":"1",},
{"lineNum":"  318","line":"            const current_item = completed_items + 1;","class":"linePartCov","hits":"1","order":"596","possible_hits":"2",},
{"lineNum":"  319","line":"            if (node.name.len != 0 or eti > 0) {","class":"lineCov","hits":"2","order":"597","possible_hits":"2",},
{"lineNum":"  320","line":"                if (node.name.len != 0) {","class":"lineCov","hits":"1","order":"598","possible_hits":"1",},
{"lineNum":"  321","line":"                    self.bufWrite(&end, \"{s}\", .{node.name});","class":"lineCov","hits":"1","order":"599","possible_hits":"1",},
{"lineNum":"  322","line":"                    need_ellipse = true;","class":"lineCov","hits":"1","order":"643","possible_hits":"1",},
{"lineNum":"  323","line":"                }"},
{"lineNum":"  324","line":"                if (eti > 0) {","class":"lineCov","hits":"1","order":"644","possible_hits":"1",},
{"lineNum":"  325","line":"                    if (need_ellipse) self.bufWrite(&end, \" \", .{});","class":"lineCov","hits":"2","order":"645","possible_hits":"2",},
{"lineNum":"  326","line":"                    self.bufWrite(&end, \"[{d}/{d}{s}] \", .{ current_item, eti, node.unit });","class":"lineCov","hits":"1","order":"647","possible_hits":"1",},
{"lineNum":"  327","line":"                    need_ellipse = false;","class":"lineCov","hits":"1","order":"675","possible_hits":"1",},
{"lineNum":"  328","line":"                } else if (completed_items != 0) {","class":"lineCov","hits":"1","order":"678","possible_hits":"1",},
{"lineNum":"  329","line":"                    if (need_ellipse) self.bufWrite(&end, \" \", .{});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  330","line":"                    self.bufWrite(&end, \"[{d}{s}] \", .{ current_item, node.unit });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"                    need_ellipse = false;","class":"linePartCov","hits":"3","order":"676","possible_hits":"5",},
{"lineNum":"  332","line":"                }"},
{"lineNum":"  333","line":"            }"},
{"lineNum":"  334","line":"            maybe_node = @atomicLoad(?*Node, &node.recently_updated_child, .Acquire);","class":"lineCov","hits":"3","order":"677","possible_hits":"3",},
{"lineNum":"  335","line":"        }"},
{"lineNum":"  336","line":"        if (need_ellipse) {","class":"lineCov","hits":"1","order":"679","possible_hits":"1",},
{"lineNum":"  337","line":"            self.bufWrite(&end, \"... \", .{});","class":"lineCov","hits":"2","order":"680","possible_hits":"2",},
{"lineNum":"  338","line":"        }"},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    _ = file.write(self.output_buffer[0..end]) catch {","class":"lineCov","hits":"2","order":"681","possible_hits":"2",},
{"lineNum":"  342","line":"        // stop trying to write to this file"},
{"lineNum":"  343","line":"        self.terminal = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"    };"},
{"lineNum":"  345","line":"    if (self.timer) |*timer| {","class":"lineCov","hits":"2","order":"692","possible_hits":"2",},
{"lineNum":"  346","line":"        self.prev_refresh_timestamp = timer.read();","class":"lineCov","hits":"2","order":"693","possible_hits":"2",},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"pub fn log(self: *Progress, comptime format: []const u8, args: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  351","line":"    const file = self.terminal orelse {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  352","line":"        std.debug.print(format, args);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  353","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  354","line":"    };"},
{"lineNum":"  355","line":"    self.refresh();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  356","line":"    file.writer().print(format, args) catch {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  357","line":"        self.terminal = null;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  358","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  359","line":"    };"},
{"lineNum":"  360","line":"    self.columns_written = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  361","line":"}"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"/// Allows the caller to freely write to stderr until unlock_stderr() is called."},
{"lineNum":"  364","line":"/// During the lock, the progress information is cleared from the terminal."},
{"lineNum":"  365","line":"pub fn lock_stderr(p: *Progress) void {"},
{"lineNum":"  366","line":"    p.update_mutex.lock();"},
{"lineNum":"  367","line":"    if (p.terminal) |file| {"},
{"lineNum":"  368","line":"        var end: usize = 0;"},
{"lineNum":"  369","line":"        clearWithHeldLock(p, &end);"},
{"lineNum":"  370","line":"        _ = file.write(p.output_buffer[0..end]) catch {"},
{"lineNum":"  371","line":"            // stop trying to write to this file"},
{"lineNum":"  372","line":"            p.terminal = null;"},
{"lineNum":"  373","line":"        };"},
{"lineNum":"  374","line":"    }"},
{"lineNum":"  375","line":"    std.debug.getStderrMutex().lock();"},
{"lineNum":"  376","line":"}"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"pub fn unlock_stderr(p: *Progress) void {"},
{"lineNum":"  379","line":"    std.debug.getStderrMutex().unlock();"},
{"lineNum":"  380","line":"    p.update_mutex.unlock();"},
{"lineNum":"  381","line":"}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"fn bufWrite(self: *Progress, end: *usize, comptime format: []const u8, args: anytype) void {","class":"linePartCov","hits":"4","order":"600","possible_hits":"5",},
{"lineNum":"  384","line":"    if (std.fmt.bufPrint(self.output_buffer[end.*..], format, args)) |written| {","class":"linePartCov","hits":"8","order":"601","possible_hits":"10",},
{"lineNum":"  385","line":"        const amt = written.len;","class":"linePartCov","hits":"4","order":"639","possible_hits":"5",},
{"lineNum":"  386","line":"        end.* += amt;","class":"linePartCov","hits":"4","order":"640","possible_hits":"10",},
{"lineNum":"  387","line":"        self.columns_written += amt;","class":"linePartCov","hits":"4","order":"641","possible_hits":"10",},
{"lineNum":"  388","line":"    } else |err| switch (err) {","class":"linePartCov","hits":"4","order":"642","possible_hits":"15",},
{"lineNum":"  389","line":"        error.NoSpaceLeft => {"},
{"lineNum":"  390","line":"            self.columns_written += self.output_buffer.len - end.*;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  391","line":"            end.* = self.output_buffer.len;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  392","line":"            const suffix = \"... \";","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  393","line":"            @memcpy(self.output_buffer[self.output_buffer.len - suffix.len ..], suffix);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  394","line":"        },"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"test \"basic functionality\" {"},
{"lineNum":"  399","line":"    var disable = true;"},
{"lineNum":"  400","line":"    if (disable) {"},
{"lineNum":"  401","line":"        // This test is disabled because it uses time.sleep() and is therefore slow. It also"},
{"lineNum":"  402","line":"        // prints bogus progress data to stderr."},
{"lineNum":"  403","line":"        return error.SkipZigTest;"},
{"lineNum":"  404","line":"    }"},
{"lineNum":"  405","line":"    var progress = Progress{};"},
{"lineNum":"  406","line":"    const root_node = progress.start(\"\", 100);"},
{"lineNum":"  407","line":"    defer root_node.end();"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    const speed_factor = std.time.ns_per_ms;"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    const sub_task_names = [_][]const u8{"},
{"lineNum":"  412","line":"        \"reticulating splines\","},
{"lineNum":"  413","line":"        \"adjusting shoes\","},
{"lineNum":"  414","line":"        \"climbing towers\","},
{"lineNum":"  415","line":"        \"pouring juice\","},
{"lineNum":"  416","line":"    };"},
{"lineNum":"  417","line":"    var next_sub_task: usize = 0;"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    var i: usize = 0;"},
{"lineNum":"  420","line":"    while (i < 100) : (i += 1) {"},
{"lineNum":"  421","line":"        var node = root_node.start(sub_task_names[next_sub_task], 5);"},
{"lineNum":"  422","line":"        node.activate();"},
{"lineNum":"  423","line":"        next_sub_task = (next_sub_task + 1) % sub_task_names.len;"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"        node.completeOne();"},
{"lineNum":"  426","line":"        std.time.sleep(5 * speed_factor);"},
{"lineNum":"  427","line":"        node.completeOne();"},
{"lineNum":"  428","line":"        node.completeOne();"},
{"lineNum":"  429","line":"        std.time.sleep(5 * speed_factor);"},
{"lineNum":"  430","line":"        node.completeOne();"},
{"lineNum":"  431","line":"        node.completeOne();"},
{"lineNum":"  432","line":"        std.time.sleep(5 * speed_factor);"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"        node.end();"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"        std.time.sleep(5 * speed_factor);"},
{"lineNum":"  437","line":"    }"},
{"lineNum":"  438","line":"    {"},
{"lineNum":"  439","line":"        var node = root_node.start(\"this is a really long name designed to activate the truncation code. let\'s find out if it works\", 0);"},
{"lineNum":"  440","line":"        node.activate();"},
{"lineNum":"  441","line":"        std.time.sleep(10 * speed_factor);"},
{"lineNum":"  442","line":"        progress.refresh();"},
{"lineNum":"  443","line":"        std.time.sleep(10 * speed_factor);"},
{"lineNum":"  444","line":"        node.end();"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 116, "covered" : 95,};
var merged_data = [];
