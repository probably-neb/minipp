var data = {lines:[
{"lineNum":"    1","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    2","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    3","line":"const mem = std.mem;"},
{"lineNum":"    4","line":"const debug = std.debug;"},
{"lineNum":"    5","line":"const leb = std.leb;"},
{"lineNum":"    6","line":"const dwarf = std.dwarf;"},
{"lineNum":"    7","line":"const abi = dwarf.abi;"},
{"lineNum":"    8","line":"const expressions = dwarf.expressions;"},
{"lineNum":"    9","line":"const assert = std.debug.assert;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"const Opcode = enum(u8) {"},
{"lineNum":"   12","line":"    advance_loc = 0x1 << 6,"},
{"lineNum":"   13","line":"    offset = 0x2 << 6,"},
{"lineNum":"   14","line":"    restore = 0x3 << 6,"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    nop = 0x00,"},
{"lineNum":"   17","line":"    set_loc = 0x01,"},
{"lineNum":"   18","line":"    advance_loc1 = 0x02,"},
{"lineNum":"   19","line":"    advance_loc2 = 0x03,"},
{"lineNum":"   20","line":"    advance_loc4 = 0x04,"},
{"lineNum":"   21","line":"    offset_extended = 0x05,"},
{"lineNum":"   22","line":"    restore_extended = 0x06,"},
{"lineNum":"   23","line":"    undefined = 0x07,"},
{"lineNum":"   24","line":"    same_value = 0x08,"},
{"lineNum":"   25","line":"    register = 0x09,"},
{"lineNum":"   26","line":"    remember_state = 0x0a,"},
{"lineNum":"   27","line":"    restore_state = 0x0b,"},
{"lineNum":"   28","line":"    def_cfa = 0x0c,"},
{"lineNum":"   29","line":"    def_cfa_register = 0x0d,"},
{"lineNum":"   30","line":"    def_cfa_offset = 0x0e,"},
{"lineNum":"   31","line":"    def_cfa_expression = 0x0f,"},
{"lineNum":"   32","line":"    expression = 0x10,"},
{"lineNum":"   33","line":"    offset_extended_sf = 0x11,"},
{"lineNum":"   34","line":"    def_cfa_sf = 0x12,"},
{"lineNum":"   35","line":"    def_cfa_offset_sf = 0x13,"},
{"lineNum":"   36","line":"    val_offset = 0x14,"},
{"lineNum":"   37","line":"    val_offset_sf = 0x15,"},
{"lineNum":"   38","line":"    val_expression = 0x16,"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    // These opcodes encode an operand in the lower 6 bits of the opcode itself"},
{"lineNum":"   41","line":"    pub const lo_inline = @intFromEnum(Opcode.advance_loc);"},
{"lineNum":"   42","line":"    pub const hi_inline = @intFromEnum(Opcode.restore) | 0b111111;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    // These opcodes are trailed by zero or more operands"},
{"lineNum":"   45","line":"    pub const lo_reserved = @intFromEnum(Opcode.nop);"},
{"lineNum":"   46","line":"    pub const hi_reserved = @intFromEnum(Opcode.val_expression);"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    // Vendor-specific opcodes"},
{"lineNum":"   49","line":"    pub const lo_user = 0x1c;"},
{"lineNum":"   50","line":"    pub const hi_user = 0x3f;"},
{"lineNum":"   51","line":"};"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"fn readBlock(stream: *std.io.FixedBufferStream([]const u8)) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"    const block_len = try leb.readULEB128(usize, reader);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"    if (stream.pos + block_len > stream.buffer.len) return error.InvalidOperand;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    const block = stream.buffer[stream.pos..][0..block_len];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   59","line":"    reader.context.pos += block_len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    return block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"pub const Instruction = union(Opcode) {"},
{"lineNum":"   65","line":"    advance_loc: struct {"},
{"lineNum":"   66","line":"        delta: u8,"},
{"lineNum":"   67","line":"    },"},
{"lineNum":"   68","line":"    offset: struct {"},
{"lineNum":"   69","line":"        register: u8,"},
{"lineNum":"   70","line":"        offset: u64,"},
{"lineNum":"   71","line":"    },"},
{"lineNum":"   72","line":"    offset_extended: struct {"},
{"lineNum":"   73","line":"        register: u8,"},
{"lineNum":"   74","line":"        offset: u64,"},
{"lineNum":"   75","line":"    },"},
{"lineNum":"   76","line":"    restore: struct {"},
{"lineNum":"   77","line":"        register: u8,"},
{"lineNum":"   78","line":"    },"},
{"lineNum":"   79","line":"    restore_extended: struct {"},
{"lineNum":"   80","line":"        register: u8,"},
{"lineNum":"   81","line":"    },"},
{"lineNum":"   82","line":"    nop: void,"},
{"lineNum":"   83","line":"    set_loc: struct {"},
{"lineNum":"   84","line":"        address: u64,"},
{"lineNum":"   85","line":"    },"},
{"lineNum":"   86","line":"    advance_loc1: struct {"},
{"lineNum":"   87","line":"        delta: u8,"},
{"lineNum":"   88","line":"    },"},
{"lineNum":"   89","line":"    advance_loc2: struct {"},
{"lineNum":"   90","line":"        delta: u16,"},
{"lineNum":"   91","line":"    },"},
{"lineNum":"   92","line":"    advance_loc4: struct {"},
{"lineNum":"   93","line":"        delta: u32,"},
{"lineNum":"   94","line":"    },"},
{"lineNum":"   95","line":"    undefined: struct {"},
{"lineNum":"   96","line":"        register: u8,"},
{"lineNum":"   97","line":"    },"},
{"lineNum":"   98","line":"    same_value: struct {"},
{"lineNum":"   99","line":"        register: u8,"},
{"lineNum":"  100","line":"    },"},
{"lineNum":"  101","line":"    register: struct {"},
{"lineNum":"  102","line":"        register: u8,"},
{"lineNum":"  103","line":"        target_register: u8,"},
{"lineNum":"  104","line":"    },"},
{"lineNum":"  105","line":"    remember_state: void,"},
{"lineNum":"  106","line":"    restore_state: void,"},
{"lineNum":"  107","line":"    def_cfa: struct {"},
{"lineNum":"  108","line":"        register: u8,"},
{"lineNum":"  109","line":"        offset: u64,"},
{"lineNum":"  110","line":"    },"},
{"lineNum":"  111","line":"    def_cfa_register: struct {"},
{"lineNum":"  112","line":"        register: u8,"},
{"lineNum":"  113","line":"    },"},
{"lineNum":"  114","line":"    def_cfa_offset: struct {"},
{"lineNum":"  115","line":"        offset: u64,"},
{"lineNum":"  116","line":"    },"},
{"lineNum":"  117","line":"    def_cfa_expression: struct {"},
{"lineNum":"  118","line":"        block: []const u8,"},
{"lineNum":"  119","line":"    },"},
{"lineNum":"  120","line":"    expression: struct {"},
{"lineNum":"  121","line":"        register: u8,"},
{"lineNum":"  122","line":"        block: []const u8,"},
{"lineNum":"  123","line":"    },"},
{"lineNum":"  124","line":"    offset_extended_sf: struct {"},
{"lineNum":"  125","line":"        register: u8,"},
{"lineNum":"  126","line":"        offset: i64,"},
{"lineNum":"  127","line":"    },"},
{"lineNum":"  128","line":"    def_cfa_sf: struct {"},
{"lineNum":"  129","line":"        register: u8,"},
{"lineNum":"  130","line":"        offset: i64,"},
{"lineNum":"  131","line":"    },"},
{"lineNum":"  132","line":"    def_cfa_offset_sf: struct {"},
{"lineNum":"  133","line":"        offset: i64,"},
{"lineNum":"  134","line":"    },"},
{"lineNum":"  135","line":"    val_offset: struct {"},
{"lineNum":"  136","line":"        register: u8,"},
{"lineNum":"  137","line":"        offset: u64,"},
{"lineNum":"  138","line":"    },"},
{"lineNum":"  139","line":"    val_offset_sf: struct {"},
{"lineNum":"  140","line":"        register: u8,"},
{"lineNum":"  141","line":"        offset: i64,"},
{"lineNum":"  142","line":"    },"},
{"lineNum":"  143","line":"    val_expression: struct {"},
{"lineNum":"  144","line":"        register: u8,"},
{"lineNum":"  145","line":"        block: []const u8,"},
{"lineNum":"  146","line":"    },"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    pub fn read("},
{"lineNum":"  149","line":"        stream: *std.io.FixedBufferStream([]const u8),"},
{"lineNum":"  150","line":"        addr_size_bytes: u8,"},
{"lineNum":"  151","line":"        endian: std.builtin.Endian,"},
{"lineNum":"  152","line":"    ) !Instruction {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"        const reader = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"        switch (try reader.readByte()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"            Opcode.lo_inline...Opcode.hi_inline => |opcode| {"},
{"lineNum":"  156","line":"                const e: Opcode = @enumFromInt(opcode & 0b11000000);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  157","line":"                const value: u6 = @intCast(opcode & 0b111111);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  158","line":"                return switch (e) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  159","line":"                    .advance_loc => .{"},
{"lineNum":"  160","line":"                        .advance_loc = .{ .delta = value },"},
{"lineNum":"  161","line":"                    },"},
{"lineNum":"  162","line":"                    .offset => .{"},
{"lineNum":"  163","line":"                        .offset = .{"},
{"lineNum":"  164","line":"                            .register = value,"},
{"lineNum":"  165","line":"                            .offset = try leb.readULEB128(u64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"                        },"},
{"lineNum":"  167","line":"                    },"},
{"lineNum":"  168","line":"                    .restore => .{"},
{"lineNum":"  169","line":"                        .restore = .{ .register = value },"},
{"lineNum":"  170","line":"                    },"},
{"lineNum":"  171","line":"                    else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"                };"},
{"lineNum":"  173","line":"            },"},
{"lineNum":"  174","line":"            Opcode.lo_reserved...Opcode.hi_reserved => |opcode| {"},
{"lineNum":"  175","line":"                const e: Opcode = @enumFromInt(opcode);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  176","line":"                return switch (e) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  177","line":"                    .advance_loc,"},
{"lineNum":"  178","line":"                    .offset,"},
{"lineNum":"  179","line":"                    .restore,"},
{"lineNum":"  180","line":"                    => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"                    .nop => .{ .nop = {} },"},
{"lineNum":"  182","line":"                    .set_loc => .{"},
{"lineNum":"  183","line":"                        .set_loc = .{"},
{"lineNum":"  184","line":"                            .address = switch (addr_size_bytes) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"                                2 => try reader.readInt(u16, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"                                4 => try reader.readInt(u32, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"                                8 => try reader.readInt(u64, endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"                                else => return error.InvalidAddrSize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"                            },"},
{"lineNum":"  190","line":"                        },"},
{"lineNum":"  191","line":"                    },"},
{"lineNum":"  192","line":"                    .advance_loc1 => .{"},
{"lineNum":"  193","line":"                        .advance_loc1 = .{ .delta = try reader.readByte() },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                    },"},
{"lineNum":"  195","line":"                    .advance_loc2 => .{"},
{"lineNum":"  196","line":"                        .advance_loc2 = .{ .delta = try reader.readInt(u16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"                    },"},
{"lineNum":"  198","line":"                    .advance_loc4 => .{"},
{"lineNum":"  199","line":"                        .advance_loc4 = .{ .delta = try reader.readInt(u32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"                    },"},
{"lineNum":"  201","line":"                    .offset_extended => .{"},
{"lineNum":"  202","line":"                        .offset_extended = .{"},
{"lineNum":"  203","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"                            .offset = try leb.readULEB128(u64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"                        },"},
{"lineNum":"  206","line":"                    },"},
{"lineNum":"  207","line":"                    .restore_extended => .{"},
{"lineNum":"  208","line":"                        .restore_extended = .{"},
{"lineNum":"  209","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"                        },"},
{"lineNum":"  211","line":"                    },"},
{"lineNum":"  212","line":"                    .undefined => .{"},
{"lineNum":"  213","line":"                        .undefined = .{"},
{"lineNum":"  214","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"                        },"},
{"lineNum":"  216","line":"                    },"},
{"lineNum":"  217","line":"                    .same_value => .{"},
{"lineNum":"  218","line":"                        .same_value = .{"},
{"lineNum":"  219","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"                        },"},
{"lineNum":"  221","line":"                    },"},
{"lineNum":"  222","line":"                    .register => .{"},
{"lineNum":"  223","line":"                        .register = .{"},
{"lineNum":"  224","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"                            .target_register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"                        },"},
{"lineNum":"  227","line":"                    },"},
{"lineNum":"  228","line":"                    .remember_state => .{ .remember_state = {} },"},
{"lineNum":"  229","line":"                    .restore_state => .{ .restore_state = {} },"},
{"lineNum":"  230","line":"                    .def_cfa => .{"},
{"lineNum":"  231","line":"                        .def_cfa = .{"},
{"lineNum":"  232","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"                            .offset = try leb.readULEB128(u64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"                        },"},
{"lineNum":"  235","line":"                    },"},
{"lineNum":"  236","line":"                    .def_cfa_register => .{"},
{"lineNum":"  237","line":"                        .def_cfa_register = .{"},
{"lineNum":"  238","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"                        },"},
{"lineNum":"  240","line":"                    },"},
{"lineNum":"  241","line":"                    .def_cfa_offset => .{"},
{"lineNum":"  242","line":"                        .def_cfa_offset = .{"},
{"lineNum":"  243","line":"                            .offset = try leb.readULEB128(u64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"                        },"},
{"lineNum":"  245","line":"                    },"},
{"lineNum":"  246","line":"                    .def_cfa_expression => .{"},
{"lineNum":"  247","line":"                        .def_cfa_expression = .{"},
{"lineNum":"  248","line":"                            .block = try readBlock(stream),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"                        },"},
{"lineNum":"  250","line":"                    },"},
{"lineNum":"  251","line":"                    .expression => .{"},
{"lineNum":"  252","line":"                        .expression = .{"},
{"lineNum":"  253","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"                            .block = try readBlock(stream),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"                        },"},
{"lineNum":"  256","line":"                    },"},
{"lineNum":"  257","line":"                    .offset_extended_sf => .{"},
{"lineNum":"  258","line":"                        .offset_extended_sf = .{"},
{"lineNum":"  259","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"                            .offset = try leb.readILEB128(i64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"                        },"},
{"lineNum":"  262","line":"                    },"},
{"lineNum":"  263","line":"                    .def_cfa_sf => .{"},
{"lineNum":"  264","line":"                        .def_cfa_sf = .{"},
{"lineNum":"  265","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"                            .offset = try leb.readILEB128(i64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"                        },"},
{"lineNum":"  268","line":"                    },"},
{"lineNum":"  269","line":"                    .def_cfa_offset_sf => .{"},
{"lineNum":"  270","line":"                        .def_cfa_offset_sf = .{"},
{"lineNum":"  271","line":"                            .offset = try leb.readILEB128(i64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"                        },"},
{"lineNum":"  273","line":"                    },"},
{"lineNum":"  274","line":"                    .val_offset => .{"},
{"lineNum":"  275","line":"                        .val_offset = .{"},
{"lineNum":"  276","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"                            .offset = try leb.readULEB128(u64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"                        },"},
{"lineNum":"  279","line":"                    },"},
{"lineNum":"  280","line":"                    .val_offset_sf => .{"},
{"lineNum":"  281","line":"                        .val_offset_sf = .{"},
{"lineNum":"  282","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"                            .offset = try leb.readILEB128(i64, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"                        },"},
{"lineNum":"  285","line":"                    },"},
{"lineNum":"  286","line":"                    .val_expression => .{"},
{"lineNum":"  287","line":"                        .val_expression = .{"},
{"lineNum":"  288","line":"                            .register = try leb.readULEB128(u8, reader),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"                            .block = try readBlock(stream),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"                        },"},
{"lineNum":"  291","line":"                    },"},
{"lineNum":"  292","line":"                };"},
{"lineNum":"  293","line":"            },"},
{"lineNum":"  294","line":"            Opcode.lo_user...Opcode.hi_user => return error.UnimplementedUserOpcode,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"            else => return error.InvalidOpcode,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"        }"},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":"};"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"/// Since register rules are applied (usually) during a panic,"},
{"lineNum":"  301","line":"/// checked addition / subtraction is used so that we can return"},
{"lineNum":"  302","line":"/// an error and fall back to FP-based unwinding."},
{"lineNum":"  303","line":"pub fn applyOffset(base: usize, offset: i64) !usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"    return if (offset >= 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  305","line":"        try std.math.add(usize, base, @as(usize, @intCast(offset)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"    else"},
{"lineNum":"  307","line":"        try std.math.sub(usize, base, @as(usize, @intCast(-offset)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"/// This is a virtual machine that runs DWARF call frame instructions."},
{"lineNum":"  311","line":"pub const VirtualMachine = struct {"},
{"lineNum":"  312","line":"    /// See section 6.4.1 of the DWARF5 specification for details on each"},
{"lineNum":"  313","line":"    const RegisterRule = union(enum) {"},
{"lineNum":"  314","line":"        // The spec says that the default rule for each column is the undefined rule."},
{"lineNum":"  315","line":"        // However, it also allows ABI / compiler authors to specify alternate defaults, so"},
{"lineNum":"  316","line":"        // there is a distinction made here."},
{"lineNum":"  317","line":"        default: void,"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"        undefined: void,"},
{"lineNum":"  320","line":"        same_value: void,"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        // offset(N)"},
{"lineNum":"  323","line":"        offset: i64,"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"        // val_offset(N)"},
{"lineNum":"  326","line":"        val_offset: i64,"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"        // register(R)"},
{"lineNum":"  329","line":"        register: u8,"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"        // expression(E)"},
{"lineNum":"  332","line":"        expression: []const u8,"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"        // val_expression(E)"},
{"lineNum":"  335","line":"        val_expression: []const u8,"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"        // Augmenter-defined rule"},
{"lineNum":"  338","line":"        architectural: void,"},
{"lineNum":"  339","line":"    };"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    /// Each row contains unwinding rules for a set of registers."},
{"lineNum":"  342","line":"    pub const Row = struct {"},
{"lineNum":"  343","line":"        /// Offset from `FrameDescriptionEntry.pc_begin`"},
{"lineNum":"  344","line":"        offset: u64 = 0,"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"        /// Special-case column that defines the CFA (Canonical Frame Address) rule."},
{"lineNum":"  347","line":"        /// The register field of this column defines the register that CFA is derived from."},
{"lineNum":"  348","line":"        cfa: Column = .{},"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"        /// The register fields in these columns define the register the rule applies to."},
{"lineNum":"  351","line":"        columns: ColumnRange = .{},"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"        /// Indicates that the next write to any column in this row needs to copy"},
{"lineNum":"  354","line":"        /// the backing column storage first, as it may be referenced by previous rows."},
{"lineNum":"  355","line":"        copy_on_write: bool = false,"},
{"lineNum":"  356","line":"    };"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    pub const Column = struct {"},
{"lineNum":"  359","line":"        register: ?u8 = null,"},
{"lineNum":"  360","line":"        rule: RegisterRule = .{ .default = {} },"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"        /// Resolves the register rule and places the result into `out` (see dwarf.abi.regBytes)"},
{"lineNum":"  363","line":"        pub fn resolveValue("},
{"lineNum":"  364","line":"            self: Column,"},
{"lineNum":"  365","line":"            context: *dwarf.UnwindContext,"},
{"lineNum":"  366","line":"            expression_context: dwarf.expressions.ExpressionContext,"},
{"lineNum":"  367","line":"            out: []u8,"},
{"lineNum":"  368","line":"        ) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"            switch (self.rule) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"                .default => {"},
{"lineNum":"  371","line":"                    const register = self.register orelse return error.InvalidRegister;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"                    try abi.getRegDefaultValue(register, context, out);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"                },"},
{"lineNum":"  374","line":"                .undefined => {"},
{"lineNum":"  375","line":"                    @memset(out, undefined);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"                },"},
{"lineNum":"  377","line":"                .same_value => {"},
{"lineNum":"  378","line":"                    // TODO: This copy could be eliminated if callers always copy the state then call this function to update it"},
{"lineNum":"  379","line":"                    const register = self.register orelse return error.InvalidRegister;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  380","line":"                    const src = try abi.regBytes(context.thread_context, register, context.reg_context);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  381","line":"                    if (src.len != out.len) return error.RegisterSizeMismatch;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  382","line":"                    @memcpy(out, src);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  383","line":"                },"},
{"lineNum":"  384","line":"                .offset => |offset| {"},
{"lineNum":"  385","line":"                    if (context.cfa) |cfa| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"                        const addr = try applyOffset(cfa, offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  387","line":"                        if (expression_context.isValidMemory) |isValidMemory| if (!isValidMemory(addr)) return error.InvalidAddress;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  388","line":"                        const ptr: *const usize = @ptrFromInt(addr);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  389","line":"                        mem.writeIntSliceNative(usize, out, ptr.*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"                    } else return error.InvalidCFA;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  391","line":"                },"},
{"lineNum":"  392","line":"                .val_offset => |offset| {"},
{"lineNum":"  393","line":"                    if (context.cfa) |cfa| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  394","line":"                        mem.writeIntSliceNative(usize, out, try applyOffset(cfa, offset));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"                    } else return error.InvalidCFA;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  396","line":"                },"},
{"lineNum":"  397","line":"                .register => |register| {"},
{"lineNum":"  398","line":"                    const src = try abi.regBytes(context.thread_context, register, context.reg_context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"                    if (src.len != out.len) return error.RegisterSizeMismatch;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":"                    @memcpy(out, try abi.regBytes(context.thread_context, register, context.reg_context));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  401","line":"                },"},
{"lineNum":"  402","line":"                .expression => |expression| {"},
{"lineNum":"  403","line":"                    context.stack_machine.reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"                    const value = try context.stack_machine.run(expression, context.allocator, expression_context, context.cfa.?);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"                    const addr = if (value) |v| blk: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  406","line":"                        if (v != .generic) return error.InvalidExpressionValue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  407","line":"                        break :blk v.generic;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"                    } else return error.NoExpressionValue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"                    if (!context.isValidMemory(addr)) return error.InvalidExpressionAddress;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  411","line":"                    const ptr: *usize = @ptrFromInt(addr);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  412","line":"                    mem.writeIntSliceNative(usize, out, ptr.*);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  413","line":"                },"},
{"lineNum":"  414","line":"                .val_expression => |expression| {"},
{"lineNum":"  415","line":"                    context.stack_machine.reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"                    const value = try context.stack_machine.run(expression, context.allocator, expression_context, context.cfa.?);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"                    if (value) |v| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  418","line":"                        if (v != .generic) return error.InvalidExpressionValue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"                        mem.writeIntSliceNative(usize, out, v.generic);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":"                    } else return error.NoExpressionValue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  421","line":"                },"},
{"lineNum":"  422","line":"                .architectural => return error.UnimplementedRegisterRule,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"            }"},
{"lineNum":"  424","line":"        }"},
{"lineNum":"  425","line":"    };"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"    const ColumnRange = struct {"},
{"lineNum":"  428","line":"        /// Index into `columns` of the first column in this row."},
{"lineNum":"  429","line":"        start: usize = undefined,"},
{"lineNum":"  430","line":"        len: u8 = 0,"},
{"lineNum":"  431","line":"    };"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    columns: std.ArrayListUnmanaged(Column) = .{},"},
{"lineNum":"  434","line":"    stack: std.ArrayListUnmanaged(ColumnRange) = .{},"},
{"lineNum":"  435","line":"    current_row: Row = .{},"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    /// The result of executing the CIE\'s initial_instructions"},
{"lineNum":"  438","line":"    cie_row: ?Row = null,"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"    pub fn deinit(self: *VirtualMachine, allocator: std.mem.Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"        self.stack.deinit(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"        self.columns.deinit(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"        self.* = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  444","line":"    }"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    pub fn reset(self: *VirtualMachine) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"        self.stack.clearRetainingCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"        self.columns.clearRetainingCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  449","line":"        self.current_row = .{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"        self.cie_row = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    /// Return a slice backed by the row\'s non-CFA columns"},
{"lineNum":"  454","line":"    pub fn rowColumns(self: VirtualMachine, row: Row) []Column {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":"        return self.columns.items[row.columns.start..][0..row.columns.len];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":"    }"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    /// Either retrieves or adds a column for `register` (non-CFA) in the current row."},
{"lineNum":"  459","line":"    fn getOrAddColumn(self: *VirtualMachine, allocator: std.mem.Allocator, register: u8) !*Column {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"        for (self.rowColumns(self.current_row)) |*c| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  461","line":"            if (c.register == register) return c;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  462","line":"        }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"        if (self.current_row.columns.len == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"            self.current_row.columns.start = self.columns.items.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"        }"},
{"lineNum":"  467","line":"        self.current_row.columns.len += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"        const column = try self.columns.addOne(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"        column.* = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"            .register = register,"},
{"lineNum":"  472","line":"        };"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"        return column;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    /// Runs the CIE instructions, then the FDE instructions. Execution halts"},
{"lineNum":"  478","line":"    /// once the row that corresponds to `pc` is known, and the row is returned."},
{"lineNum":"  479","line":"    pub fn runTo("},
{"lineNum":"  480","line":"        self: *VirtualMachine,"},
{"lineNum":"  481","line":"        allocator: std.mem.Allocator,"},
{"lineNum":"  482","line":"        pc: u64,"},
{"lineNum":"  483","line":"        cie: dwarf.CommonInformationEntry,"},
{"lineNum":"  484","line":"        fde: dwarf.FrameDescriptionEntry,"},
{"lineNum":"  485","line":"        addr_size_bytes: u8,"},
{"lineNum":"  486","line":"        endian: std.builtin.Endian,"},
{"lineNum":"  487","line":"    ) !Row {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"        assert(self.cie_row == null);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  489","line":"        if (pc < fde.pc_begin or pc >= fde.pc_begin + fde.pc_range) return error.AddressOutOfRange;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"        var prev_row: Row = self.current_row;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        var cie_stream = std.io.fixedBufferStream(cie.initial_instructions);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"        var fde_stream = std.io.fixedBufferStream(fde.instructions);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"        var streams = [_]*std.io.FixedBufferStream([]const u8){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  496","line":"            &cie_stream,"},
{"lineNum":"  497","line":"            &fde_stream,"},
{"lineNum":"  498","line":"        };"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"        for (&streams, 0..) |stream, i| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  501","line":"            while (stream.pos < stream.buffer.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":"                const instruction = try dwarf.call_frame.Instruction.read(stream, addr_size_bytes, endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  503","line":"                prev_row = try self.step(allocator, cie, i == 0, instruction);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"                if (pc < fde.pc_begin + self.current_row.offset) return prev_row;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  505","line":"            }"},
{"lineNum":"  506","line":"        }"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"        return self.current_row;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":"    }"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"    pub fn runToNative("},
{"lineNum":"  512","line":"        self: *VirtualMachine,"},
{"lineNum":"  513","line":"        allocator: std.mem.Allocator,"},
{"lineNum":"  514","line":"        pc: u64,"},
{"lineNum":"  515","line":"        cie: dwarf.CommonInformationEntry,"},
{"lineNum":"  516","line":"        fde: dwarf.FrameDescriptionEntry,"},
{"lineNum":"  517","line":"    ) !Row {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  518","line":"        return self.runTo(allocator, pc, cie, fde, @sizeOf(usize), builtin.target.cpu.arch.endian());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  519","line":"    }"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    fn resolveCopyOnWrite(self: *VirtualMachine, allocator: std.mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":"        if (!self.current_row.copy_on_write) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"        const new_start = self.columns.items.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  525","line":"        if (self.current_row.columns.len > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"            try self.columns.ensureUnusedCapacity(allocator, self.current_row.columns.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  527","line":"            self.columns.appendSliceAssumeCapacity(self.rowColumns(self.current_row));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"            self.current_row.columns.start = new_start;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  529","line":"        }"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"    /// Executes a single instruction."},
{"lineNum":"  533","line":"    /// If this instruction is from the CIE, `is_initial` should be set."},
{"lineNum":"  534","line":"    /// Returns the value of `current_row` before executing this instruction."},
{"lineNum":"  535","line":"    pub fn step("},
{"lineNum":"  536","line":"        self: *VirtualMachine,"},
{"lineNum":"  537","line":"        allocator: std.mem.Allocator,"},
{"lineNum":"  538","line":"        cie: dwarf.CommonInformationEntry,"},
{"lineNum":"  539","line":"        is_initial: bool,"},
{"lineNum":"  540","line":"        instruction: Instruction,"},
{"lineNum":"  541","line":"    ) !Row {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"        // CIE instructions must be run before FDE instructions"},
{"lineNum":"  543","line":"        assert(!is_initial or self.cie_row == null);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  544","line":"        if (!is_initial and self.cie_row == null) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  545","line":"            self.cie_row = self.current_row;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"            self.current_row.copy_on_write = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"        }"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"        const prev_row = self.current_row;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"        switch (instruction) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"            .set_loc => |i| {"},
{"lineNum":"  552","line":"                if (i.address <= self.current_row.offset) return error.InvalidOperation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  553","line":"                // TODO: Check cie.segment_selector_size != 0 for DWARFV4"},
{"lineNum":"  554","line":"                self.current_row.offset = i.address;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":"            },"},
{"lineNum":"  556","line":"            inline .advance_loc,"},
{"lineNum":"  557","line":"            .advance_loc1,"},
{"lineNum":"  558","line":"            .advance_loc2,"},
{"lineNum":"  559","line":"            .advance_loc4,"},
{"lineNum":"  560","line":"            => |i| {"},
{"lineNum":"  561","line":"                self.current_row.offset += i.delta * cie.code_alignment_factor;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  562","line":"                self.current_row.copy_on_write = true;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  563","line":"            },"},
{"lineNum":"  564","line":"            inline .offset,"},
{"lineNum":"  565","line":"            .offset_extended,"},
{"lineNum":"  566","line":"            .offset_extended_sf,"},
{"lineNum":"  567","line":"            => |i| {"},
{"lineNum":"  568","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  569","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  570","line":"                column.rule = .{ .offset = @as(i64, @intCast(i.offset)) * cie.data_alignment_factor };","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  571","line":"            },"},
{"lineNum":"  572","line":"            inline .restore,"},
{"lineNum":"  573","line":"            .restore_extended,"},
{"lineNum":"  574","line":"            => |i| {"},
{"lineNum":"  575","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  576","line":"                if (self.cie_row) |cie_row| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  577","line":"                    const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  578","line":"                    column.rule = for (self.rowColumns(cie_row)) |cie_column| {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  579","line":"                        if (cie_column.register == i.register) break cie_column.rule;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  580","line":"                    } else .{ .default = {} };"},
{"lineNum":"  581","line":"                } else return error.InvalidOperation;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  582","line":"            },"},
{"lineNum":"  583","line":"            .nop => {},"},
{"lineNum":"  584","line":"            .undefined => |i| {"},
{"lineNum":"  585","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"                column.rule = .{ .undefined = {} };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  588","line":"            },"},
{"lineNum":"  589","line":"            .same_value => |i| {"},
{"lineNum":"  590","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"                column.rule = .{ .same_value = {} };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"            },"},
{"lineNum":"  594","line":"            .register => |i| {"},
{"lineNum":"  595","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  596","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"                column.rule = .{ .register = i.target_register };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"            },"},
{"lineNum":"  599","line":"            .remember_state => {"},
{"lineNum":"  600","line":"                try self.stack.append(allocator, self.current_row.columns);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"                self.current_row.copy_on_write = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  602","line":"            },"},
{"lineNum":"  603","line":"            .restore_state => {"},
{"lineNum":"  604","line":"                const restored_columns = self.stack.popOrNull() orelse return error.InvalidOperation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  605","line":"                self.columns.shrinkRetainingCapacity(self.columns.items.len - self.current_row.columns.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  606","line":"                try self.columns.ensureUnusedCapacity(allocator, restored_columns.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"                self.current_row.columns.start = self.columns.items.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":"                self.current_row.columns.len = restored_columns.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"                self.columns.appendSliceAssumeCapacity(self.columns.items[restored_columns.start..][0..restored_columns.len]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"            },"},
{"lineNum":"  612","line":"            .def_cfa => |i| {"},
{"lineNum":"  613","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"                self.current_row.cfa = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":"                    .register = i.register,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  616","line":"                    .rule = .{ .val_offset = @intCast(i.offset) },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"                };"},
{"lineNum":"  618","line":"            },"},
{"lineNum":"  619","line":"            .def_cfa_sf => |i| {"},
{"lineNum":"  620","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":"                self.current_row.cfa = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"                    .register = i.register,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"                    .rule = .{ .val_offset = i.offset * cie.data_alignment_factor },","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"                };"},
{"lineNum":"  625","line":"            },"},
{"lineNum":"  626","line":"            .def_cfa_register => |i| {"},
{"lineNum":"  627","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":"                if (self.current_row.cfa.register == null or self.current_row.cfa.rule != .val_offset) return error.InvalidOperation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  629","line":"                self.current_row.cfa.register = i.register;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  630","line":"            },"},
{"lineNum":"  631","line":"            .def_cfa_offset => |i| {"},
{"lineNum":"  632","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"                if (self.current_row.cfa.register == null or self.current_row.cfa.rule != .val_offset) return error.InvalidOperation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  634","line":"                self.current_row.cfa.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":"                    .val_offset = @intCast(i.offset),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  636","line":"                };"},
{"lineNum":"  637","line":"            },"},
{"lineNum":"  638","line":"            .def_cfa_offset_sf => |i| {"},
{"lineNum":"  639","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":"                if (self.current_row.cfa.register == null or self.current_row.cfa.rule != .val_offset) return error.InvalidOperation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  641","line":"                self.current_row.cfa.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"                    .val_offset = i.offset * cie.data_alignment_factor,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  643","line":"                };"},
{"lineNum":"  644","line":"            },"},
{"lineNum":"  645","line":"            .def_cfa_expression => |i| {"},
{"lineNum":"  646","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":"                self.current_row.cfa.register = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  648","line":"                self.current_row.cfa.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  649","line":"                    .expression = i.block,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"                };"},
{"lineNum":"  651","line":"            },"},
{"lineNum":"  652","line":"            .expression => |i| {"},
{"lineNum":"  653","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  654","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  655","line":"                column.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  656","line":"                    .expression = i.block,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  657","line":"                };"},
{"lineNum":"  658","line":"            },"},
{"lineNum":"  659","line":"            .val_offset => |i| {"},
{"lineNum":"  660","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"                column.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"                    .val_offset = @as(i64, @intCast(i.offset)) * cie.data_alignment_factor,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  664","line":"                };"},
{"lineNum":"  665","line":"            },"},
{"lineNum":"  666","line":"            .val_offset_sf => |i| {"},
{"lineNum":"  667","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":"                column.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"                    .val_offset = i.offset * cie.data_alignment_factor,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  671","line":"                };"},
{"lineNum":"  672","line":"            },"},
{"lineNum":"  673","line":"            .val_expression => |i| {"},
{"lineNum":"  674","line":"                try self.resolveCopyOnWrite(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"                const column = try self.getOrAddColumn(allocator, i.register);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  676","line":"                column.rule = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"                    .val_expression = i.block,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":"                };"},
{"lineNum":"  679","line":"            },"},
{"lineNum":"  680","line":"        }"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"        return prev_row;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  683","line":"    }"},
{"lineNum":"  684","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:48", "instrumented" : 213, "covered" : 0,};
var merged_data = [];
