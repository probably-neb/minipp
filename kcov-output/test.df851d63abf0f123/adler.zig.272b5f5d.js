var data = {lines:[
{"lineNum":"    1","line":"// Adler32 checksum."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// https://tools.ietf.org/html/rfc1950#section-9"},
{"lineNum":"    4","line":"// https://github.com/madler/zlib/blob/master/adler32.c"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    7","line":"const testing = std.testing;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"pub const Adler32 = struct {"},
{"lineNum":"   10","line":"    const base = 65521;"},
{"lineNum":"   11","line":"    const nmax = 5552;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    adler: u32,"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    pub fn init() Adler32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   16","line":"        return Adler32{ .adler = 1 };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"    }"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    // This fast variant is taken from zlib. It reduces the required modulos and unrolls longer"},
{"lineNum":"   20","line":"    // buffer inputs and should be much quicker."},
{"lineNum":"   21","line":"    pub fn update(self: *Adler32, input: []const u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"        var s1 = self.adler & 0xffff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"        var s2 = (self.adler >> 16) & 0xffff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"        if (input.len == 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"            s1 +%= input[0];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   27","line":"            if (s1 >= base) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"                s1 -= base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"            }"},
{"lineNum":"   30","line":"            s2 +%= s1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"            if (s2 >= base) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"                s2 -= base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"            }"},
{"lineNum":"   34","line":"        } else if (input.len < 16) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"            for (input) |b| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   36","line":"                s1 +%= b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"                s2 +%= s1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"            }"},
{"lineNum":"   39","line":"            if (s1 >= base) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"                s1 -= base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"            }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"            s2 %= base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"        } else {"},
{"lineNum":"   45","line":"            const n = nmax / 16; // note: 16 | nmax"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"            var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"            while (i + nmax <= input.len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"                var rounds: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"                while (rounds < n) : (rounds += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   52","line":"                    comptime var j: usize = 0;"},
{"lineNum":"   53","line":"                    inline while (j < 16) : (j += 1) {"},
{"lineNum":"   54","line":"                        s1 +%= input[i + j];","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   55","line":"                        s2 +%= s1;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   56","line":"                    }"},
{"lineNum":"   57","line":"                    i += 16;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"                }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"                s1 %= base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"                s2 %= base;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":"            }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"            if (i < input.len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   65","line":"                while (i + 16 <= input.len) : (i += 16) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   66","line":"                    comptime var j: usize = 0;"},
{"lineNum":"   67","line":"                    inline while (j < 16) : (j += 1) {"},
{"lineNum":"   68","line":"                        s1 +%= input[i + j];","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   69","line":"                        s2 +%= s1;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   70","line":"                    }"},
{"lineNum":"   71","line":"                }"},
{"lineNum":"   72","line":"                while (i < input.len) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   73","line":"                    s1 +%= input[i];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"                    s2 +%= s1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"                }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"                s1 %= base;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"                s2 %= base;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   79","line":"            }"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        self.adler = s1 | (s2 << 16);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    pub fn final(self: *Adler32) u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"        return self.adler;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    pub fn hash(input: []const u8) u32 {"},
{"lineNum":"   90","line":"        var c = Adler32.init();"},
{"lineNum":"   91","line":"        c.update(input);"},
{"lineNum":"   92","line":"        return c.final();"},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"test \"adler32 sanity\" {"},
{"lineNum":"   97","line":"    try testing.expectEqual(@as(u32, 0x620062), Adler32.hash(\"a\"));"},
{"lineNum":"   98","line":"    try testing.expectEqual(@as(u32, 0xbc002ed), Adler32.hash(\"example\"));"},
{"lineNum":"   99","line":"}"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"test \"adler32 long\" {"},
{"lineNum":"  102","line":"    const long1 = [_]u8{1} ** 1024;"},
{"lineNum":"  103","line":"    try testing.expectEqual(@as(u32, 0x06780401), Adler32.hash(long1[0..]));"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    const long2 = [_]u8{1} ** 1025;"},
{"lineNum":"  106","line":"    try testing.expectEqual(@as(u32, 0x0a7a0402), Adler32.hash(long2[0..]));"},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"test \"adler32 very long\" {"},
{"lineNum":"  110","line":"    const long = [_]u8{1} ** 5553;"},
{"lineNum":"  111","line":"    try testing.expectEqual(@as(u32, 0x707f15b2), Adler32.hash(long[0..]));"},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"test \"adler32 very long with variation\" {"},
{"lineNum":"  115","line":"    const long = comptime blk: {"},
{"lineNum":"  116","line":"        @setEvalBranchQuota(7000);"},
{"lineNum":"  117","line":"        var result: [6000]u8 = undefined;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        var i: usize = 0;"},
{"lineNum":"  120","line":"        while (i < result.len) : (i += 1) {"},
{"lineNum":"  121","line":"            result[i] = @as(u8, @truncate(i));"},
{"lineNum":"  122","line":"        }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        break :blk result;"},
{"lineNum":"  125","line":"    };"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    try testing.expectEqual(@as(u32, 0x5af38d6e), std.hash.Adler32.hash(long[0..]));"},
{"lineNum":"  128","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 40, "covered" : 0,};
var merged_data = [];
