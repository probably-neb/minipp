var data = {lines:[
{"lineNum":"    1","line":"//! The deflate package is a translation of the Go code of the compress/flate package from"},
{"lineNum":"    2","line":"//! https://go.googlesource.com/go/+/refs/tags/go1.17/src/compress/flate/"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const deflate = @import(\"deflate/compressor.zig\");"},
{"lineNum":"    5","line":"const inflate = @import(\"deflate/decompressor.zig\");"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub const Compression = deflate.Compression;"},
{"lineNum":"    8","line":"pub const CompressorOptions = deflate.CompressorOptions;"},
{"lineNum":"    9","line":"pub const Compressor = deflate.Compressor;"},
{"lineNum":"   10","line":"pub const Decompressor = inflate.Decompressor;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"pub const compressor = deflate.compressor;"},
{"lineNum":"   13","line":"pub const decompressor = inflate.decompressor;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"/// Copies elements from a source `src` slice into a destination `dst` slice."},
{"lineNum":"   16","line":"/// The copy never returns an error but might not be complete if the destination is too small."},
{"lineNum":"   17","line":"/// Returns the number of elements copied, which will be the minimum of `src.len` and `dst.len`."},
{"lineNum":"   18","line":"/// TODO: remove this smelly function"},
{"lineNum":"   19","line":"pub fn copy(dst: []u8, src: []const u8) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   20","line":"    if (dst.len <= src.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":"        @memcpy(dst, src[0..dst.len]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   22","line":"        return dst.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"    } else {"},
{"lineNum":"   24","line":"        @memcpy(dst[0..src.len], src);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   25","line":"        return src.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"    }"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"test {"},
{"lineNum":"   30","line":"    _ = @import(\"deflate/token.zig\");"},
{"lineNum":"   31","line":"    _ = @import(\"deflate/bits_utils.zig\");"},
{"lineNum":"   32","line":"    _ = @import(\"deflate/dict_decoder.zig\");"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    _ = @import(\"deflate/huffman_code.zig\");"},
{"lineNum":"   35","line":"    _ = @import(\"deflate/huffman_bit_writer.zig\");"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    _ = @import(\"deflate/compressor.zig\");"},
{"lineNum":"   38","line":"    _ = @import(\"deflate/compressor_test.zig\");"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    _ = @import(\"deflate/deflate_fast.zig\");"},
{"lineNum":"   41","line":"    _ = @import(\"deflate/deflate_fast_test.zig\");"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    _ = @import(\"deflate/decompressor.zig\");"},
{"lineNum":"   44","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
