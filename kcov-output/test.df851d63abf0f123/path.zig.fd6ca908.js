var data = {lines:[
{"lineNum":"    1","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    2","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    3","line":"const debug = std.debug;"},
{"lineNum":"    4","line":"const assert = debug.assert;"},
{"lineNum":"    5","line":"const testing = std.testing;"},
{"lineNum":"    6","line":"const mem = std.mem;"},
{"lineNum":"    7","line":"const fmt = std.fmt;"},
{"lineNum":"    8","line":"const ascii = std.ascii;"},
{"lineNum":"    9","line":"const Allocator = mem.Allocator;"},
{"lineNum":"   10","line":"const math = std.math;"},
{"lineNum":"   11","line":"const windows = std.os.windows;"},
{"lineNum":"   12","line":"const os = std.os;"},
{"lineNum":"   13","line":"const fs = std.fs;"},
{"lineNum":"   14","line":"const process = std.process;"},
{"lineNum":"   15","line":"const native_os = builtin.target.os.tag;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"pub const sep_windows = \'\\\\\';"},
{"lineNum":"   18","line":"pub const sep_posix = \'/\';"},
{"lineNum":"   19","line":"pub const sep = switch (native_os) {"},
{"lineNum":"   20","line":"    .windows, .uefi => sep_windows,"},
{"lineNum":"   21","line":"    else => sep_posix,"},
{"lineNum":"   22","line":"};"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"pub const sep_str_windows = \"\\\\\";"},
{"lineNum":"   25","line":"pub const sep_str_posix = \"/\";"},
{"lineNum":"   26","line":"pub const sep_str = switch (native_os) {"},
{"lineNum":"   27","line":"    .windows, .uefi => sep_str_windows,"},
{"lineNum":"   28","line":"    else => sep_str_posix,"},
{"lineNum":"   29","line":"};"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"pub const delimiter_windows = \';\';"},
{"lineNum":"   32","line":"pub const delimiter_posix = \':\';"},
{"lineNum":"   33","line":"pub const delimiter = if (native_os == .windows) delimiter_windows else delimiter_posix;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/// Returns if the given byte is a valid path separator"},
{"lineNum":"   36","line":"pub fn isSep(byte: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    return switch (native_os) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"        .windows => byte == \'/\' or byte == \'\\\\\',"},
{"lineNum":"   39","line":"        .uefi => byte == \'\\\\\',"},
{"lineNum":"   40","line":"        else => byte == \'/\',"},
{"lineNum":"   41","line":"    };"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"pub const PathType = enum {"},
{"lineNum":"   45","line":"    windows,"},
{"lineNum":"   46","line":"    uefi,"},
{"lineNum":"   47","line":"    posix,"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    /// Returns true if `c` is a valid path separator for the `path_type`."},
{"lineNum":"   50","line":"    pub inline fn isSep(comptime path_type: PathType, comptime T: type, c: T) bool {"},
{"lineNum":"   51","line":"        return switch (path_type) {"},
{"lineNum":"   52","line":"            .windows => c == \'/\' or c == \'\\\\\',"},
{"lineNum":"   53","line":"            .posix => c == \'/\',"},
{"lineNum":"   54","line":"            .uefi => c == \'\\\\\',"},
{"lineNum":"   55","line":"        };"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":"};"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"/// This is different from mem.join in that the separator will not be repeated if"},
{"lineNum":"   60","line":"/// it is found at the end or beginning of a pair of consecutive paths."},
{"lineNum":"   61","line":"fn joinSepMaybeZ(allocator: Allocator, separator: u8, comptime sepPredicate: fn (u8) bool, paths: []const []const u8, zero: bool) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"    if (paths.len == 0) return if (zero) try allocator.dupe(u8, &[1]u8{0}) else &[0]u8{};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    // Find first non-empty path index."},
{"lineNum":"   65","line":"    const first_path_index = blk: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"        for (paths, 0..) |path, index| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   67","line":"            if (path.len == 0) continue else break :blk index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   68","line":"        }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"        // All paths provided were empty, so return early."},
{"lineNum":"   71","line":"        return if (zero) try allocator.dupe(u8, &[1]u8{0}) else &[0]u8{};","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   72","line":"    };"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    // Calculate length needed for resulting joined path buffer."},
{"lineNum":"   75","line":"    const total_len = blk: {"},
{"lineNum":"   76","line":"        var sum: usize = paths[first_path_index].len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   77","line":"        var prev_path = paths[first_path_index];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   78","line":"        assert(prev_path.len > 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"        var i: usize = first_path_index + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":"        while (i < paths.len) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   81","line":"            const this_path = paths[i];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   82","line":"            if (this_path.len == 0) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"            const prev_sep = sepPredicate(prev_path[prev_path.len - 1]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   84","line":"            const this_sep = sepPredicate(this_path[0]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   85","line":"            sum += @intFromBool(!prev_sep and !this_sep);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"            sum += if (prev_sep and this_sep) this_path.len - 1 else this_path.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"            prev_path = this_path;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"        }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        if (zero) sum += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"        break :blk sum;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    };"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    const buf = try allocator.alloc(u8, total_len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"    errdefer allocator.free(buf);"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    @memcpy(buf[0..paths[first_path_index].len], paths[first_path_index]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   98","line":"    var buf_index: usize = paths[first_path_index].len;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"    var prev_path = paths[first_path_index];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  100","line":"    assert(prev_path.len > 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    var i: usize = first_path_index + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"    while (i < paths.len) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  103","line":"        const this_path = paths[i];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  104","line":"        if (this_path.len == 0) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"        const prev_sep = sepPredicate(prev_path[prev_path.len - 1]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  106","line":"        const this_sep = sepPredicate(this_path[0]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  107","line":"        if (!prev_sep and !this_sep) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"            buf[buf_index] = separator;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  109","line":"            buf_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":"        const adjusted_path = if (prev_sep and this_sep) this_path[1..] else this_path;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  112","line":"        @memcpy(buf[buf_index..][0..adjusted_path.len], adjusted_path);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":"        buf_index += adjusted_path.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"        prev_path = this_path;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    if (zero) buf[buf.len - 1] = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    // No need for shrink since buf is exactly the correct size."},
{"lineNum":"  120","line":"    return buf;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"/// Naively combines a series of paths with the native path separator."},
{"lineNum":"  124","line":"/// Allocates memory for the result, which must be freed by the caller."},
{"lineNum":"  125","line":"pub fn join(allocator: Allocator, paths: []const []const u8) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"    return joinSepMaybeZ(allocator, sep, isSep, paths, false);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"/// Naively combines a series of paths with the native path separator and null terminator."},
{"lineNum":"  130","line":"/// Allocates memory for the result, which must be freed by the caller."},
{"lineNum":"  131","line":"pub fn joinZ(allocator: Allocator, paths: []const []const u8) ![:0]u8 {"},
{"lineNum":"  132","line":"    const out = try joinSepMaybeZ(allocator, sep, isSep, paths, true);"},
{"lineNum":"  133","line":"    return out[0 .. out.len - 1 :0];"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"fn testJoinMaybeZUefi(paths: []const []const u8, expected: []const u8, zero: bool) !void {"},
{"lineNum":"  137","line":"    const uefiIsSep = struct {"},
{"lineNum":"  138","line":"        fn isSep(byte: u8) bool {"},
{"lineNum":"  139","line":"            return byte == \'\\\\\';"},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"    }.isSep;"},
{"lineNum":"  142","line":"    const actual = try joinSepMaybeZ(testing.allocator, sep_windows, uefiIsSep, paths, zero);"},
{"lineNum":"  143","line":"    defer testing.allocator.free(actual);"},
{"lineNum":"  144","line":"    try testing.expectEqualSlices(u8, expected, if (zero) actual[0 .. actual.len - 1 :0] else actual);"},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"fn testJoinMaybeZWindows(paths: []const []const u8, expected: []const u8, zero: bool) !void {"},
{"lineNum":"  148","line":"    const windowsIsSep = struct {"},
{"lineNum":"  149","line":"        fn isSep(byte: u8) bool {"},
{"lineNum":"  150","line":"            return byte == \'/\' or byte == \'\\\\\';"},
{"lineNum":"  151","line":"        }"},
{"lineNum":"  152","line":"    }.isSep;"},
{"lineNum":"  153","line":"    const actual = try joinSepMaybeZ(testing.allocator, sep_windows, windowsIsSep, paths, zero);"},
{"lineNum":"  154","line":"    defer testing.allocator.free(actual);"},
{"lineNum":"  155","line":"    try testing.expectEqualSlices(u8, expected, if (zero) actual[0 .. actual.len - 1 :0] else actual);"},
{"lineNum":"  156","line":"}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"fn testJoinMaybeZPosix(paths: []const []const u8, expected: []const u8, zero: bool) !void {"},
{"lineNum":"  159","line":"    const posixIsSep = struct {"},
{"lineNum":"  160","line":"        fn isSep(byte: u8) bool {"},
{"lineNum":"  161","line":"            return byte == \'/\';"},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":"    }.isSep;"},
{"lineNum":"  164","line":"    const actual = try joinSepMaybeZ(testing.allocator, sep_posix, posixIsSep, paths, zero);"},
{"lineNum":"  165","line":"    defer testing.allocator.free(actual);"},
{"lineNum":"  166","line":"    try testing.expectEqualSlices(u8, expected, if (zero) actual[0 .. actual.len - 1 :0] else actual);"},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"test \"join\" {"},
{"lineNum":"  170","line":"    {"},
{"lineNum":"  171","line":"        const actual: []u8 = try join(testing.allocator, &[_][]const u8{});"},
{"lineNum":"  172","line":"        defer testing.allocator.free(actual);"},
{"lineNum":"  173","line":"        try testing.expectEqualSlices(u8, \"\", actual);"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":"    {"},
{"lineNum":"  176","line":"        const actual: [:0]u8 = try joinZ(testing.allocator, &[_][]const u8{});"},
{"lineNum":"  177","line":"        defer testing.allocator.free(actual);"},
{"lineNum":"  178","line":"        try testing.expectEqualSlices(u8, \"\", actual);"},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":"    for (&[_]bool{ false, true }) |zero| {"},
{"lineNum":"  181","line":"        try testJoinMaybeZWindows(&[_][]const u8{}, \"\", zero);"},
{"lineNum":"  182","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\a\\\\b\", \"c\" }, \"c:\\\\a\\\\b\\\\c\", zero);"},
{"lineNum":"  183","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\a\\\\b\", \"c\" }, \"c:\\\\a\\\\b\\\\c\", zero);"},
{"lineNum":"  184","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\a\\\\b\\\\\", \"c\" }, \"c:\\\\a\\\\b\\\\c\", zero);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\\", \"a\", \"b\\\\\", \"c\" }, \"c:\\\\a\\\\b\\\\c\", zero);"},
{"lineNum":"  187","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\a\\\\\", \"b\\\\\", \"c\" }, \"c:\\\\a\\\\b\\\\c\", zero);"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        try testJoinMaybeZWindows("},
{"lineNum":"  190","line":"            &[_][]const u8{ \"c:\\\\home\\\\andy\\\\dev\\\\zig\\\\build\\\\lib\\\\zig\\\\std\", \"io.zig\" },"},
{"lineNum":"  191","line":"            \"c:\\\\home\\\\andy\\\\dev\\\\zig\\\\build\\\\lib\\\\zig\\\\std\\\\io.zig\","},
{"lineNum":"  192","line":"            zero,"},
{"lineNum":"  193","line":"        );"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        try testJoinMaybeZUefi(&[_][]const u8{ \"EFI\", \"Boot\", \"bootx64.efi\" }, \"EFI\\\\Boot\\\\bootx64.efi\", zero);"},
{"lineNum":"  196","line":"        try testJoinMaybeZUefi(&[_][]const u8{ \"EFI\\\\Boot\", \"bootx64.efi\" }, \"EFI\\\\Boot\\\\bootx64.efi\", zero);"},
{"lineNum":"  197","line":"        try testJoinMaybeZUefi(&[_][]const u8{ \"EFI\\\\\", \"\\\\Boot\", \"bootx64.efi\" }, \"EFI\\\\Boot\\\\bootx64.efi\", zero);"},
{"lineNum":"  198","line":"        try testJoinMaybeZUefi(&[_][]const u8{ \"EFI\\\\\", \"\\\\Boot\\\\\", \"\\\\bootx64.efi\" }, \"EFI\\\\Boot\\\\bootx64.efi\", zero);"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\\", \"a\", \"b/\", \"c\" }, \"c:\\\\a\\\\b/c\", zero);"},
{"lineNum":"  201","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\a/\", \"b\\\\\", \"/c\" }, \"c:\\\\a/b\\\\c\", zero);"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"\", \"c:\\\\\", \"\", \"\", \"a\", \"b\\\\\", \"c\", \"\" }, \"c:\\\\a\\\\b\\\\c\", zero);"},
{"lineNum":"  204","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"c:\\\\a/\", \"\", \"b\\\\\", \"\", \"/c\" }, \"c:\\\\a/b\\\\c\", zero);"},
{"lineNum":"  205","line":"        try testJoinMaybeZWindows(&[_][]const u8{ \"\", \"\" }, \"\", zero);"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        try testJoinMaybeZPosix(&[_][]const u8{}, \"\", zero);"},
{"lineNum":"  208","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"/a/b\", \"c\" }, \"/a/b/c\", zero);"},
{"lineNum":"  209","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"/a/b/\", \"c\" }, \"/a/b/c\", zero);"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"/\", \"a\", \"b/\", \"c\" }, \"/a/b/c\", zero);"},
{"lineNum":"  212","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"/a/\", \"b/\", \"c\" }, \"/a/b/c\", zero);"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"        try testJoinMaybeZPosix("},
{"lineNum":"  215","line":"            &[_][]const u8{ \"/home/andy/dev/zig/build/lib/zig/std\", \"io.zig\" },"},
{"lineNum":"  216","line":"            \"/home/andy/dev/zig/build/lib/zig/std/io.zig\","},
{"lineNum":"  217","line":"            zero,"},
{"lineNum":"  218","line":"        );"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"a\", \"/c\" }, \"a/c\", zero);"},
{"lineNum":"  221","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"a/\", \"/c\" }, \"a/c\", zero);"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"\", \"/\", \"a\", \"\", \"b/\", \"c\", \"\" }, \"/a/b/c\", zero);"},
{"lineNum":"  224","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"/a/\", \"\", \"\", \"b/\", \"c\" }, \"/a/b/c\", zero);"},
{"lineNum":"  225","line":"        try testJoinMaybeZPosix(&[_][]const u8{ \"\", \"\" }, \"\", zero);"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":"}"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"pub fn isAbsoluteZ(path_c: [*:0]const u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"    if (native_os == .windows) {"},
{"lineNum":"  231","line":"        return isAbsoluteWindowsZ(path_c);"},
{"lineNum":"  232","line":"    } else {"},
{"lineNum":"  233","line":"        return isAbsolutePosixZ(path_c);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"pub fn isAbsolute(path: []const u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"    if (native_os == .windows) {"},
{"lineNum":"  239","line":"        return isAbsoluteWindows(path);"},
{"lineNum":"  240","line":"    } else {"},
{"lineNum":"  241","line":"        return isAbsolutePosix(path);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"fn isAbsoluteWindowsImpl(comptime T: type, path: []const T) bool {"},
{"lineNum":"  246","line":"    if (path.len < 1)"},
{"lineNum":"  247","line":"        return false;"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    if (path[0] == \'/\')"},
{"lineNum":"  250","line":"        return true;"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    if (path[0] == \'\\\\\')"},
{"lineNum":"  253","line":"        return true;"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    if (path.len < 3)"},
{"lineNum":"  256","line":"        return false;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    if (path[1] == \':\') {"},
{"lineNum":"  259","line":"        if (path[2] == \'/\')"},
{"lineNum":"  260","line":"            return true;"},
{"lineNum":"  261","line":"        if (path[2] == \'\\\\\')"},
{"lineNum":"  262","line":"            return true;"},
{"lineNum":"  263","line":"    }"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    return false;"},
{"lineNum":"  266","line":"}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"pub fn isAbsoluteWindows(path: []const u8) bool {"},
{"lineNum":"  269","line":"    return isAbsoluteWindowsImpl(u8, path);"},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"pub fn isAbsoluteWindowsW(path_w: [*:0]const u16) bool {"},
{"lineNum":"  273","line":"    return isAbsoluteWindowsImpl(u16, mem.sliceTo(path_w, 0));"},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"pub fn isAbsoluteWindowsWTF16(path: []const u16) bool {"},
{"lineNum":"  277","line":"    return isAbsoluteWindowsImpl(u16, path);"},
{"lineNum":"  278","line":"}"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"pub fn isAbsoluteWindowsZ(path_c: [*:0]const u8) bool {"},
{"lineNum":"  281","line":"    return isAbsoluteWindowsImpl(u8, mem.sliceTo(path_c, 0));"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"pub fn isAbsolutePosix(path: []const u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"    return path.len > 0 and path[0] == sep_posix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"pub fn isAbsolutePosixZ(path_c: [*:0]const u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"    return isAbsolutePosix(mem.sliceTo(path_c, 0));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"}"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"test \"isAbsoluteWindows\" {"},
{"lineNum":"  293","line":"    try testIsAbsoluteWindows(\"\", false);"},
{"lineNum":"  294","line":"    try testIsAbsoluteWindows(\"/\", true);"},
{"lineNum":"  295","line":"    try testIsAbsoluteWindows(\"//\", true);"},
{"lineNum":"  296","line":"    try testIsAbsoluteWindows(\"//server\", true);"},
{"lineNum":"  297","line":"    try testIsAbsoluteWindows(\"//server/file\", true);"},
{"lineNum":"  298","line":"    try testIsAbsoluteWindows(\"\\\\\\\\server\\\\file\", true);"},
{"lineNum":"  299","line":"    try testIsAbsoluteWindows(\"\\\\\\\\server\", true);"},
{"lineNum":"  300","line":"    try testIsAbsoluteWindows(\"\\\\\\\\\", true);"},
{"lineNum":"  301","line":"    try testIsAbsoluteWindows(\"c\", false);"},
{"lineNum":"  302","line":"    try testIsAbsoluteWindows(\"c:\", false);"},
{"lineNum":"  303","line":"    try testIsAbsoluteWindows(\"c:\\\\\", true);"},
{"lineNum":"  304","line":"    try testIsAbsoluteWindows(\"c:/\", true);"},
{"lineNum":"  305","line":"    try testIsAbsoluteWindows(\"c://\", true);"},
{"lineNum":"  306","line":"    try testIsAbsoluteWindows(\"C:/Users/\", true);"},
{"lineNum":"  307","line":"    try testIsAbsoluteWindows(\"C:\\\\Users\\\\\", true);"},
{"lineNum":"  308","line":"    try testIsAbsoluteWindows(\"C:cwd/another\", false);"},
{"lineNum":"  309","line":"    try testIsAbsoluteWindows(\"C:cwd\\\\another\", false);"},
{"lineNum":"  310","line":"    try testIsAbsoluteWindows(\"directory/directory\", false);"},
{"lineNum":"  311","line":"    try testIsAbsoluteWindows(\"directory\\\\directory\", false);"},
{"lineNum":"  312","line":"    try testIsAbsoluteWindows(\"/usr/local\", true);"},
{"lineNum":"  313","line":"}"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"test \"isAbsolutePosix\" {"},
{"lineNum":"  316","line":"    try testIsAbsolutePosix(\"\", false);"},
{"lineNum":"  317","line":"    try testIsAbsolutePosix(\"/home/foo\", true);"},
{"lineNum":"  318","line":"    try testIsAbsolutePosix(\"/home/foo/..\", true);"},
{"lineNum":"  319","line":"    try testIsAbsolutePosix(\"bar/\", false);"},
{"lineNum":"  320","line":"    try testIsAbsolutePosix(\"./baz\", false);"},
{"lineNum":"  321","line":"}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"fn testIsAbsoluteWindows(path: []const u8, expected_result: bool) !void {"},
{"lineNum":"  324","line":"    try testing.expectEqual(expected_result, isAbsoluteWindows(path));"},
{"lineNum":"  325","line":"}"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"fn testIsAbsolutePosix(path: []const u8, expected_result: bool) !void {"},
{"lineNum":"  328","line":"    try testing.expectEqual(expected_result, isAbsolutePosix(path));"},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"pub const WindowsPath = struct {"},
{"lineNum":"  332","line":"    is_abs: bool,"},
{"lineNum":"  333","line":"    kind: Kind,"},
{"lineNum":"  334","line":"    disk_designator: []const u8,"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    pub const Kind = enum {"},
{"lineNum":"  337","line":"        None,"},
{"lineNum":"  338","line":"        Drive,"},
{"lineNum":"  339","line":"        NetworkShare,"},
{"lineNum":"  340","line":"    };"},
{"lineNum":"  341","line":"};"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"pub fn windowsParsePath(path: []const u8) WindowsPath {"},
{"lineNum":"  344","line":"    if (path.len >= 2 and path[1] == \':\') {"},
{"lineNum":"  345","line":"        return WindowsPath{"},
{"lineNum":"  346","line":"            .is_abs = isAbsoluteWindows(path),"},
{"lineNum":"  347","line":"            .kind = WindowsPath.Kind.Drive,"},
{"lineNum":"  348","line":"            .disk_designator = path[0..2],"},
{"lineNum":"  349","line":"        };"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":"    if (path.len >= 1 and (path[0] == \'/\' or path[0] == \'\\\\\') and"},
{"lineNum":"  352","line":"        (path.len == 1 or (path[1] != \'/\' and path[1] != \'\\\\\')))"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"        return WindowsPath{"},
{"lineNum":"  355","line":"            .is_abs = true,"},
{"lineNum":"  356","line":"            .kind = WindowsPath.Kind.None,"},
{"lineNum":"  357","line":"            .disk_designator = path[0..0],"},
{"lineNum":"  358","line":"        };"},
{"lineNum":"  359","line":"    }"},
{"lineNum":"  360","line":"    const relative_path = WindowsPath{"},
{"lineNum":"  361","line":"        .kind = WindowsPath.Kind.None,"},
{"lineNum":"  362","line":"        .disk_designator = &[_]u8{},"},
{"lineNum":"  363","line":"        .is_abs = false,"},
{"lineNum":"  364","line":"    };"},
{"lineNum":"  365","line":"    if (path.len < \"//a/b\".len) {"},
{"lineNum":"  366","line":"        return relative_path;"},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    inline for (\"/\\\\\") |this_sep| {"},
{"lineNum":"  370","line":"        const two_sep = [_]u8{ this_sep, this_sep };"},
{"lineNum":"  371","line":"        if (mem.startsWith(u8, path, &two_sep)) {"},
{"lineNum":"  372","line":"            if (path[2] == this_sep) {"},
{"lineNum":"  373","line":"                return relative_path;"},
{"lineNum":"  374","line":"            }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"            var it = mem.tokenizeScalar(u8, path, this_sep);"},
{"lineNum":"  377","line":"            _ = (it.next() orelse return relative_path);"},
{"lineNum":"  378","line":"            _ = (it.next() orelse return relative_path);"},
{"lineNum":"  379","line":"            return WindowsPath{"},
{"lineNum":"  380","line":"                .is_abs = isAbsoluteWindows(path),"},
{"lineNum":"  381","line":"                .kind = WindowsPath.Kind.NetworkShare,"},
{"lineNum":"  382","line":"                .disk_designator = path[0..it.index],"},
{"lineNum":"  383","line":"            };"},
{"lineNum":"  384","line":"        }"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":"    return relative_path;"},
{"lineNum":"  387","line":"}"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"test \"windowsParsePath\" {"},
{"lineNum":"  390","line":"    {"},
{"lineNum":"  391","line":"        const parsed = windowsParsePath(\"//a/b\");"},
{"lineNum":"  392","line":"        try testing.expect(parsed.is_abs);"},
{"lineNum":"  393","line":"        try testing.expect(parsed.kind == WindowsPath.Kind.NetworkShare);"},
{"lineNum":"  394","line":"        try testing.expect(mem.eql(u8, parsed.disk_designator, \"//a/b\"));"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":"    {"},
{"lineNum":"  397","line":"        const parsed = windowsParsePath(\"\\\\\\\\a\\\\b\");"},
{"lineNum":"  398","line":"        try testing.expect(parsed.is_abs);"},
{"lineNum":"  399","line":"        try testing.expect(parsed.kind == WindowsPath.Kind.NetworkShare);"},
{"lineNum":"  400","line":"        try testing.expect(mem.eql(u8, parsed.disk_designator, \"\\\\\\\\a\\\\b\"));"},
{"lineNum":"  401","line":"    }"},
{"lineNum":"  402","line":"    {"},
{"lineNum":"  403","line":"        const parsed = windowsParsePath(\"\\\\\\\\a\\\\\");"},
{"lineNum":"  404","line":"        try testing.expect(!parsed.is_abs);"},
{"lineNum":"  405","line":"        try testing.expect(parsed.kind == WindowsPath.Kind.None);"},
{"lineNum":"  406","line":"        try testing.expect(mem.eql(u8, parsed.disk_designator, \"\"));"},
{"lineNum":"  407","line":"    }"},
{"lineNum":"  408","line":"    {"},
{"lineNum":"  409","line":"        const parsed = windowsParsePath(\"/usr/local\");"},
{"lineNum":"  410","line":"        try testing.expect(parsed.is_abs);"},
{"lineNum":"  411","line":"        try testing.expect(parsed.kind == WindowsPath.Kind.None);"},
{"lineNum":"  412","line":"        try testing.expect(mem.eql(u8, parsed.disk_designator, \"\"));"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":"    {"},
{"lineNum":"  415","line":"        const parsed = windowsParsePath(\"c:../\");"},
{"lineNum":"  416","line":"        try testing.expect(!parsed.is_abs);"},
{"lineNum":"  417","line":"        try testing.expect(parsed.kind == WindowsPath.Kind.Drive);"},
{"lineNum":"  418","line":"        try testing.expect(mem.eql(u8, parsed.disk_designator, \"c:\"));"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":"}"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"pub fn diskDesignator(path: []const u8) []const u8 {"},
{"lineNum":"  423","line":"    if (native_os == .windows) {"},
{"lineNum":"  424","line":"        return diskDesignatorWindows(path);"},
{"lineNum":"  425","line":"    } else {"},
{"lineNum":"  426","line":"        return \"\";"},
{"lineNum":"  427","line":"    }"},
{"lineNum":"  428","line":"}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"pub fn diskDesignatorWindows(path: []const u8) []const u8 {"},
{"lineNum":"  431","line":"    return windowsParsePath(path).disk_designator;"},
{"lineNum":"  432","line":"}"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"fn networkShareServersEql(ns1: []const u8, ns2: []const u8) bool {"},
{"lineNum":"  435","line":"    const sep1 = ns1[0];"},
{"lineNum":"  436","line":"    const sep2 = ns2[0];"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"    var it1 = mem.tokenizeScalar(u8, ns1, sep1);"},
{"lineNum":"  439","line":"    var it2 = mem.tokenizeScalar(u8, ns2, sep2);"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    return windows.eqlIgnoreCaseUtf8(it1.next().?, it2.next().?);"},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"fn compareDiskDesignators(kind: WindowsPath.Kind, p1: []const u8, p2: []const u8) bool {"},
{"lineNum":"  445","line":"    switch (kind) {"},
{"lineNum":"  446","line":"        WindowsPath.Kind.None => {"},
{"lineNum":"  447","line":"            assert(p1.len == 0);"},
{"lineNum":"  448","line":"            assert(p2.len == 0);"},
{"lineNum":"  449","line":"            return true;"},
{"lineNum":"  450","line":"        },"},
{"lineNum":"  451","line":"        WindowsPath.Kind.Drive => {"},
{"lineNum":"  452","line":"            return ascii.toUpper(p1[0]) == ascii.toUpper(p2[0]);"},
{"lineNum":"  453","line":"        },"},
{"lineNum":"  454","line":"        WindowsPath.Kind.NetworkShare => {"},
{"lineNum":"  455","line":"            const sep1 = p1[0];"},
{"lineNum":"  456","line":"            const sep2 = p2[0];"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"            var it1 = mem.tokenizeScalar(u8, p1, sep1);"},
{"lineNum":"  459","line":"            var it2 = mem.tokenizeScalar(u8, p2, sep2);"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"            return windows.eqlIgnoreCaseUtf8(it1.next().?, it2.next().?) and windows.eqlIgnoreCaseUtf8(it1.next().?, it2.next().?);"},
{"lineNum":"  462","line":"        },"},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":"}"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"/// On Windows, this calls `resolveWindows` and on POSIX it calls `resolvePosix`."},
{"lineNum":"  467","line":"pub fn resolve(allocator: Allocator, paths: []const []const u8) ![]u8 {"},
{"lineNum":"  468","line":"    if (native_os == .windows) {"},
{"lineNum":"  469","line":"        return resolveWindows(allocator, paths);"},
{"lineNum":"  470","line":"    } else {"},
{"lineNum":"  471","line":"        return resolvePosix(allocator, paths);"},
{"lineNum":"  472","line":"    }"},
{"lineNum":"  473","line":"}"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"/// This function is like a series of `cd` statements executed one after another."},
{"lineNum":"  476","line":"/// It resolves \".\" and \"..\", but will not convert relative path to absolute path, use std.fs.Dir.realpath instead."},
{"lineNum":"  477","line":"/// The result does not have a trailing path separator."},
{"lineNum":"  478","line":"/// Each drive has its own current working directory."},
{"lineNum":"  479","line":"/// Path separators are canonicalized to \'\\\\\' and drives are canonicalized to capital letters."},
{"lineNum":"  480","line":"/// Note: all usage of this function should be audited due to the existence of symlinks."},
{"lineNum":"  481","line":"/// Without performing actual syscalls, resolving `..` could be incorrect."},
{"lineNum":"  482","line":"/// This API may break in the future: https://github.com/ziglang/zig/issues/13613"},
{"lineNum":"  483","line":"pub fn resolveWindows(allocator: Allocator, paths: []const []const u8) ![]u8 {"},
{"lineNum":"  484","line":"    assert(paths.len > 0);"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    // determine which disk designator we will result with, if any"},
{"lineNum":"  487","line":"    var result_drive_buf = \"_:\".*;"},
{"lineNum":"  488","line":"    var disk_designator: []const u8 = \"\";"},
{"lineNum":"  489","line":"    var drive_kind = WindowsPath.Kind.None;"},
{"lineNum":"  490","line":"    var have_abs_path = false;"},
{"lineNum":"  491","line":"    var first_index: usize = 0;"},
{"lineNum":"  492","line":"    for (paths, 0..) |p, i| {"},
{"lineNum":"  493","line":"        const parsed = windowsParsePath(p);"},
{"lineNum":"  494","line":"        if (parsed.is_abs) {"},
{"lineNum":"  495","line":"            have_abs_path = true;"},
{"lineNum":"  496","line":"            first_index = i;"},
{"lineNum":"  497","line":"        }"},
{"lineNum":"  498","line":"        switch (parsed.kind) {"},
{"lineNum":"  499","line":"            .Drive => {"},
{"lineNum":"  500","line":"                result_drive_buf[0] = ascii.toUpper(parsed.disk_designator[0]);"},
{"lineNum":"  501","line":"                disk_designator = result_drive_buf[0..];"},
{"lineNum":"  502","line":"                drive_kind = WindowsPath.Kind.Drive;"},
{"lineNum":"  503","line":"            },"},
{"lineNum":"  504","line":"            .NetworkShare => {"},
{"lineNum":"  505","line":"                disk_designator = parsed.disk_designator;"},
{"lineNum":"  506","line":"                drive_kind = WindowsPath.Kind.NetworkShare;"},
{"lineNum":"  507","line":"            },"},
{"lineNum":"  508","line":"            .None => {},"},
{"lineNum":"  509","line":"        }"},
{"lineNum":"  510","line":"    }"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"    // if we will result with a disk designator, loop again to determine"},
{"lineNum":"  513","line":"    // which is the last time the disk designator is absolutely specified, if any"},
{"lineNum":"  514","line":"    // and count up the max bytes for paths related to this disk designator"},
{"lineNum":"  515","line":"    if (drive_kind != WindowsPath.Kind.None) {"},
{"lineNum":"  516","line":"        have_abs_path = false;"},
{"lineNum":"  517","line":"        first_index = 0;"},
{"lineNum":"  518","line":"        var correct_disk_designator = false;"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"        for (paths, 0..) |p, i| {"},
{"lineNum":"  521","line":"            const parsed = windowsParsePath(p);"},
{"lineNum":"  522","line":"            if (parsed.kind != WindowsPath.Kind.None) {"},
{"lineNum":"  523","line":"                if (parsed.kind == drive_kind) {"},
{"lineNum":"  524","line":"                    correct_disk_designator = compareDiskDesignators(drive_kind, disk_designator, parsed.disk_designator);"},
{"lineNum":"  525","line":"                } else {"},
{"lineNum":"  526","line":"                    continue;"},
{"lineNum":"  527","line":"                }"},
{"lineNum":"  528","line":"            }"},
{"lineNum":"  529","line":"            if (!correct_disk_designator) {"},
{"lineNum":"  530","line":"                continue;"},
{"lineNum":"  531","line":"            }"},
{"lineNum":"  532","line":"            if (parsed.is_abs) {"},
{"lineNum":"  533","line":"                first_index = i;"},
{"lineNum":"  534","line":"                have_abs_path = true;"},
{"lineNum":"  535","line":"            }"},
{"lineNum":"  536","line":"        }"},
{"lineNum":"  537","line":"    }"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    // Allocate result and fill in the disk designator."},
{"lineNum":"  540","line":"    var result = std.ArrayList(u8).init(allocator);"},
{"lineNum":"  541","line":"    defer result.deinit();"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    const disk_designator_len: usize = l: {"},
{"lineNum":"  544","line":"        if (!have_abs_path) break :l 0;"},
{"lineNum":"  545","line":"        switch (drive_kind) {"},
{"lineNum":"  546","line":"            .Drive => {"},
{"lineNum":"  547","line":"                try result.appendSlice(disk_designator);"},
{"lineNum":"  548","line":"                break :l disk_designator.len;"},
{"lineNum":"  549","line":"            },"},
{"lineNum":"  550","line":"            .NetworkShare => {"},
{"lineNum":"  551","line":"                var it = mem.tokenizeAny(u8, paths[first_index], \"/\\\\\");"},
{"lineNum":"  552","line":"                const server_name = it.next().?;"},
{"lineNum":"  553","line":"                const other_name = it.next().?;"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"                try result.ensureUnusedCapacity(2 + 1 + server_name.len + other_name.len);"},
{"lineNum":"  556","line":"                result.appendSliceAssumeCapacity(\"\\\\\\\\\");"},
{"lineNum":"  557","line":"                result.appendSliceAssumeCapacity(server_name);"},
{"lineNum":"  558","line":"                result.appendAssumeCapacity(\'\\\\\');"},
{"lineNum":"  559","line":"                result.appendSliceAssumeCapacity(other_name);"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"                break :l result.items.len;"},
{"lineNum":"  562","line":"            },"},
{"lineNum":"  563","line":"            .None => {"},
{"lineNum":"  564","line":"                break :l 1;"},
{"lineNum":"  565","line":"            },"},
{"lineNum":"  566","line":"        }"},
{"lineNum":"  567","line":"    };"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    var correct_disk_designator = true;"},
{"lineNum":"  570","line":"    var negative_count: usize = 0;"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    for (paths[first_index..]) |p| {"},
{"lineNum":"  573","line":"        const parsed = windowsParsePath(p);"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"        if (parsed.kind != .None) {"},
{"lineNum":"  576","line":"            if (parsed.kind == drive_kind) {"},
{"lineNum":"  577","line":"                const dd = result.items[0..disk_designator_len];"},
{"lineNum":"  578","line":"                correct_disk_designator = compareDiskDesignators(drive_kind, dd, parsed.disk_designator);"},
{"lineNum":"  579","line":"            } else {"},
{"lineNum":"  580","line":"                continue;"},
{"lineNum":"  581","line":"            }"},
{"lineNum":"  582","line":"        }"},
{"lineNum":"  583","line":"        if (!correct_disk_designator) {"},
{"lineNum":"  584","line":"            continue;"},
{"lineNum":"  585","line":"        }"},
{"lineNum":"  586","line":"        var it = mem.tokenizeAny(u8, p[parsed.disk_designator.len..], \"/\\\\\");"},
{"lineNum":"  587","line":"        while (it.next()) |component| {"},
{"lineNum":"  588","line":"            if (mem.eql(u8, component, \".\")) {"},
{"lineNum":"  589","line":"                continue;"},
{"lineNum":"  590","line":"            } else if (mem.eql(u8, component, \"..\")) {"},
{"lineNum":"  591","line":"                if (result.items.len == 0) {"},
{"lineNum":"  592","line":"                    negative_count += 1;"},
{"lineNum":"  593","line":"                    continue;"},
{"lineNum":"  594","line":"                }"},
{"lineNum":"  595","line":"                while (true) {"},
{"lineNum":"  596","line":"                    if (result.items.len == disk_designator_len) {"},
{"lineNum":"  597","line":"                        break;"},
{"lineNum":"  598","line":"                    }"},
{"lineNum":"  599","line":"                    const end_with_sep = switch (result.items[result.items.len - 1]) {"},
{"lineNum":"  600","line":"                        \'\\\\\', \'/\' => true,"},
{"lineNum":"  601","line":"                        else => false,"},
{"lineNum":"  602","line":"                    };"},
{"lineNum":"  603","line":"                    result.items.len -= 1;"},
{"lineNum":"  604","line":"                    if (end_with_sep or result.items.len == 0) break;"},
{"lineNum":"  605","line":"                }"},
{"lineNum":"  606","line":"            } else if (!have_abs_path and result.items.len == 0) {"},
{"lineNum":"  607","line":"                try result.appendSlice(component);"},
{"lineNum":"  608","line":"            } else {"},
{"lineNum":"  609","line":"                try result.ensureUnusedCapacity(1 + component.len);"},
{"lineNum":"  610","line":"                result.appendAssumeCapacity(\'\\\\\');"},
{"lineNum":"  611","line":"                result.appendSliceAssumeCapacity(component);"},
{"lineNum":"  612","line":"            }"},
{"lineNum":"  613","line":"        }"},
{"lineNum":"  614","line":"    }"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"    if (disk_designator_len != 0 and result.items.len == disk_designator_len) {"},
{"lineNum":"  617","line":"        try result.append(\'\\\\\');"},
{"lineNum":"  618","line":"        return result.toOwnedSlice();"},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"    if (result.items.len == 0) {"},
{"lineNum":"  622","line":"        if (negative_count == 0) {"},
{"lineNum":"  623","line":"            return allocator.dupe(u8, \".\");"},
{"lineNum":"  624","line":"        } else {"},
{"lineNum":"  625","line":"            const real_result = try allocator.alloc(u8, 3 * negative_count - 1);"},
{"lineNum":"  626","line":"            var count = negative_count - 1;"},
{"lineNum":"  627","line":"            var i: usize = 0;"},
{"lineNum":"  628","line":"            while (count > 0) : (count -= 1) {"},
{"lineNum":"  629","line":"                real_result[i..][0..3].* = \"..\\\\\".*;"},
{"lineNum":"  630","line":"                i += 3;"},
{"lineNum":"  631","line":"            }"},
{"lineNum":"  632","line":"            real_result[i..][0..2].* = \"..\".*;"},
{"lineNum":"  633","line":"            return real_result;"},
{"lineNum":"  634","line":"        }"},
{"lineNum":"  635","line":"    }"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    if (negative_count == 0) {"},
{"lineNum":"  638","line":"        return result.toOwnedSlice();"},
{"lineNum":"  639","line":"    } else {"},
{"lineNum":"  640","line":"        const real_result = try allocator.alloc(u8, 3 * negative_count + result.items.len);"},
{"lineNum":"  641","line":"        var count = negative_count;"},
{"lineNum":"  642","line":"        var i: usize = 0;"},
{"lineNum":"  643","line":"        while (count > 0) : (count -= 1) {"},
{"lineNum":"  644","line":"            real_result[i..][0..3].* = \"..\\\\\".*;"},
{"lineNum":"  645","line":"            i += 3;"},
{"lineNum":"  646","line":"        }"},
{"lineNum":"  647","line":"        @memcpy(real_result[i..][0..result.items.len], result.items);"},
{"lineNum":"  648","line":"        return real_result;"},
{"lineNum":"  649","line":"    }"},
{"lineNum":"  650","line":"}"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"/// This function is like a series of `cd` statements executed one after another."},
{"lineNum":"  653","line":"/// It resolves \".\" and \"..\", but will not convert relative path to absolute path, use std.fs.Dir.realpath instead."},
{"lineNum":"  654","line":"/// The result does not have a trailing path separator."},
{"lineNum":"  655","line":"/// This function does not perform any syscalls. Executing this series of path"},
{"lineNum":"  656","line":"/// lookups on the actual filesystem may produce different results due to"},
{"lineNum":"  657","line":"/// symlinks."},
{"lineNum":"  658","line":"pub fn resolvePosix(allocator: Allocator, paths: []const []const u8) Allocator.Error![]u8 {"},
{"lineNum":"  659","line":"    assert(paths.len > 0);"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"    var result = std.ArrayList(u8).init(allocator);"},
{"lineNum":"  662","line":"    defer result.deinit();"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    var negative_count: usize = 0;"},
{"lineNum":"  665","line":"    var is_abs = false;"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    for (paths) |p| {"},
{"lineNum":"  668","line":"        if (isAbsolutePosix(p)) {"},
{"lineNum":"  669","line":"            is_abs = true;"},
{"lineNum":"  670","line":"            negative_count = 0;"},
{"lineNum":"  671","line":"            result.clearRetainingCapacity();"},
{"lineNum":"  672","line":"        }"},
{"lineNum":"  673","line":"        var it = mem.tokenizeScalar(u8, p, \'/\');"},
{"lineNum":"  674","line":"        while (it.next()) |component| {"},
{"lineNum":"  675","line":"            if (mem.eql(u8, component, \".\")) {"},
{"lineNum":"  676","line":"                continue;"},
{"lineNum":"  677","line":"            } else if (mem.eql(u8, component, \"..\")) {"},
{"lineNum":"  678","line":"                if (result.items.len == 0) {"},
{"lineNum":"  679","line":"                    negative_count += @intFromBool(!is_abs);"},
{"lineNum":"  680","line":"                    continue;"},
{"lineNum":"  681","line":"                }"},
{"lineNum":"  682","line":"                while (true) {"},
{"lineNum":"  683","line":"                    const ends_with_slash = result.items[result.items.len - 1] == \'/\';"},
{"lineNum":"  684","line":"                    result.items.len -= 1;"},
{"lineNum":"  685","line":"                    if (ends_with_slash or result.items.len == 0) break;"},
{"lineNum":"  686","line":"                }"},
{"lineNum":"  687","line":"            } else if (result.items.len > 0 or is_abs) {"},
{"lineNum":"  688","line":"                try result.ensureUnusedCapacity(1 + component.len);"},
{"lineNum":"  689","line":"                result.appendAssumeCapacity(\'/\');"},
{"lineNum":"  690","line":"                result.appendSliceAssumeCapacity(component);"},
{"lineNum":"  691","line":"            } else {"},
{"lineNum":"  692","line":"                try result.appendSlice(component);"},
{"lineNum":"  693","line":"            }"},
{"lineNum":"  694","line":"        }"},
{"lineNum":"  695","line":"    }"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"    if (result.items.len == 0) {"},
{"lineNum":"  698","line":"        if (is_abs) {"},
{"lineNum":"  699","line":"            return allocator.dupe(u8, \"/\");"},
{"lineNum":"  700","line":"        }"},
{"lineNum":"  701","line":"        if (negative_count == 0) {"},
{"lineNum":"  702","line":"            return allocator.dupe(u8, \".\");"},
{"lineNum":"  703","line":"        } else {"},
{"lineNum":"  704","line":"            const real_result = try allocator.alloc(u8, 3 * negative_count - 1);"},
{"lineNum":"  705","line":"            var count = negative_count - 1;"},
{"lineNum":"  706","line":"            var i: usize = 0;"},
{"lineNum":"  707","line":"            while (count > 0) : (count -= 1) {"},
{"lineNum":"  708","line":"                real_result[i..][0..3].* = \"../\".*;"},
{"lineNum":"  709","line":"                i += 3;"},
{"lineNum":"  710","line":"            }"},
{"lineNum":"  711","line":"            real_result[i..][0..2].* = \"..\".*;"},
{"lineNum":"  712","line":"            return real_result;"},
{"lineNum":"  713","line":"        }"},
{"lineNum":"  714","line":"    }"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"    if (negative_count == 0) {"},
{"lineNum":"  717","line":"        return result.toOwnedSlice();"},
{"lineNum":"  718","line":"    } else {"},
{"lineNum":"  719","line":"        const real_result = try allocator.alloc(u8, 3 * negative_count + result.items.len);"},
{"lineNum":"  720","line":"        var count = negative_count;"},
{"lineNum":"  721","line":"        var i: usize = 0;"},
{"lineNum":"  722","line":"        while (count > 0) : (count -= 1) {"},
{"lineNum":"  723","line":"            real_result[i..][0..3].* = \"../\".*;"},
{"lineNum":"  724","line":"            i += 3;"},
{"lineNum":"  725","line":"        }"},
{"lineNum":"  726","line":"        @memcpy(real_result[i..][0..result.items.len], result.items);"},
{"lineNum":"  727","line":"        return real_result;"},
{"lineNum":"  728","line":"    }"},
{"lineNum":"  729","line":"}"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"test \"resolve\" {"},
{"lineNum":"  732","line":"    try testResolveWindows(&[_][]const u8{ \"a\\\\b\\\\c\\\\\", \"..\\\\..\\\\..\" }, \".\");"},
{"lineNum":"  733","line":"    try testResolveWindows(&[_][]const u8{\".\"}, \".\");"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"    try testResolvePosix(&[_][]const u8{ \"a/b/c/\", \"../../..\" }, \".\");"},
{"lineNum":"  736","line":"    try testResolvePosix(&[_][]const u8{\".\"}, \".\");"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"test \"resolveWindows\" {"},
{"lineNum":"  740","line":"    try testResolveWindows("},
{"lineNum":"  741","line":"        &[_][]const u8{ \"Z:\\\\\", \"/usr/local\", \"lib\\\\zig\\\\std\\\\array_list.zig\" },"},
{"lineNum":"  742","line":"        \"Z:\\\\usr\\\\local\\\\lib\\\\zig\\\\std\\\\array_list.zig\","},
{"lineNum":"  743","line":"    );"},
{"lineNum":"  744","line":"    try testResolveWindows("},
{"lineNum":"  745","line":"        &[_][]const u8{ \"z:\\\\\", \"usr/local\", \"lib\\\\zig\" },"},
{"lineNum":"  746","line":"        \"Z:\\\\usr\\\\local\\\\lib\\\\zig\","},
{"lineNum":"  747","line":"    );"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"    try testResolveWindows(&[_][]const u8{ \"c:\\\\a\\\\b\\\\c\", \"/hi\", \"ok\" }, \"C:\\\\hi\\\\ok\");"},
{"lineNum":"  750","line":"    try testResolveWindows(&[_][]const u8{ \"c:/blah\\\\blah\", \"d:/games\", \"c:../a\" }, \"C:\\\\blah\\\\a\");"},
{"lineNum":"  751","line":"    try testResolveWindows(&[_][]const u8{ \"c:/blah\\\\blah\", \"d:/games\", \"C:../a\" }, \"C:\\\\blah\\\\a\");"},
{"lineNum":"  752","line":"    try testResolveWindows(&[_][]const u8{ \"c:/ignore\", \"d:\\\\a/b\\\\c/d\", \"\\\\e.exe\" }, \"D:\\\\e.exe\");"},
{"lineNum":"  753","line":"    try testResolveWindows(&[_][]const u8{ \"c:/ignore\", \"c:/some/file\" }, \"C:\\\\some\\\\file\");"},
{"lineNum":"  754","line":"    try testResolveWindows(&[_][]const u8{ \"d:/ignore\", \"d:some/dir//\" }, \"D:\\\\ignore\\\\some\\\\dir\");"},
{"lineNum":"  755","line":"    try testResolveWindows(&[_][]const u8{ \"//server/share\", \"..\", \"relative\\\\\" }, \"\\\\\\\\server\\\\share\\\\relative\");"},
{"lineNum":"  756","line":"    try testResolveWindows(&[_][]const u8{ \"c:/\", \"//\" }, \"C:\\\\\");"},
{"lineNum":"  757","line":"    try testResolveWindows(&[_][]const u8{ \"c:/\", \"//dir\" }, \"C:\\\\dir\");"},
{"lineNum":"  758","line":"    try testResolveWindows(&[_][]const u8{ \"c:/\", \"//server/share\" }, \"\\\\\\\\server\\\\share\\\\\");"},
{"lineNum":"  759","line":"    try testResolveWindows(&[_][]const u8{ \"c:/\", \"//server//share\" }, \"\\\\\\\\server\\\\share\\\\\");"},
{"lineNum":"  760","line":"    try testResolveWindows(&[_][]const u8{ \"c:/\", \"///some//dir\" }, \"C:\\\\some\\\\dir\");"},
{"lineNum":"  761","line":"    try testResolveWindows(&[_][]const u8{ \"C:\\\\foo\\\\tmp.3\\\\\", \"..\\\\tmp.3\\\\cycles\\\\root.js\" }, \"C:\\\\foo\\\\tmp.3\\\\cycles\\\\root.js\");"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    // Keep relative paths relative."},
{"lineNum":"  764","line":"    try testResolveWindows(&[_][]const u8{\"a/b\"}, \"a\\\\b\");"},
{"lineNum":"  765","line":"}"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"test \"resolvePosix\" {"},
{"lineNum":"  768","line":"    try testResolvePosix(&.{ \"/a/b\", \"c\" }, \"/a/b/c\");"},
{"lineNum":"  769","line":"    try testResolvePosix(&.{ \"/a/b\", \"c\", \"//d\", \"e///\" }, \"/d/e\");"},
{"lineNum":"  770","line":"    try testResolvePosix(&.{ \"/a/b/c\", \"..\", \"../\" }, \"/a\");"},
{"lineNum":"  771","line":"    try testResolvePosix(&.{ \"/\", \"..\", \"..\" }, \"/\");"},
{"lineNum":"  772","line":"    try testResolvePosix(&.{\"/a/b/c/\"}, \"/a/b/c\");"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"    try testResolvePosix(&.{ \"/var/lib\", \"../\", \"file/\" }, \"/var/file\");"},
{"lineNum":"  775","line":"    try testResolvePosix(&.{ \"/var/lib\", \"/../\", \"file/\" }, \"/file\");"},
{"lineNum":"  776","line":"    try testResolvePosix(&.{ \"/some/dir\", \".\", \"/absolute/\" }, \"/absolute\");"},
{"lineNum":"  777","line":"    try testResolvePosix(&.{ \"/foo/tmp.3/\", \"../tmp.3/cycles/root.js\" }, \"/foo/tmp.3/cycles/root.js\");"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"    // Keep relative paths relative."},
{"lineNum":"  780","line":"    try testResolvePosix(&.{\"a/b\"}, \"a/b\");"},
{"lineNum":"  781","line":"    try testResolvePosix(&.{\".\"}, \".\");"},
{"lineNum":"  782","line":"    try testResolvePosix(&.{ \".\", \"src/test.zig\", \"..\", \"../test/cases.zig\" }, \"test/cases.zig\");"},
{"lineNum":"  783","line":"}"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"fn testResolveWindows(paths: []const []const u8, expected: []const u8) !void {"},
{"lineNum":"  786","line":"    const actual = try resolveWindows(testing.allocator, paths);"},
{"lineNum":"  787","line":"    defer testing.allocator.free(actual);"},
{"lineNum":"  788","line":"    try testing.expectEqualStrings(expected, actual);"},
{"lineNum":"  789","line":"}"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"fn testResolvePosix(paths: []const []const u8, expected: []const u8) !void {"},
{"lineNum":"  792","line":"    const actual = try resolvePosix(testing.allocator, paths);"},
{"lineNum":"  793","line":"    defer testing.allocator.free(actual);"},
{"lineNum":"  794","line":"    try testing.expectEqualStrings(expected, actual);"},
{"lineNum":"  795","line":"}"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"/// Strip the last component from a file path."},
{"lineNum":"  798","line":"///"},
{"lineNum":"  799","line":"/// If the path is a file in the current directory (no directory component)"},
{"lineNum":"  800","line":"/// then returns null."},
{"lineNum":"  801","line":"///"},
{"lineNum":"  802","line":"/// If the path is the root directory, returns null."},
{"lineNum":"  803","line":"pub fn dirname(path: []const u8) ?[]const u8 {"},
{"lineNum":"  804","line":"    if (native_os == .windows) {"},
{"lineNum":"  805","line":"        return dirnameWindows(path);"},
{"lineNum":"  806","line":"    } else {"},
{"lineNum":"  807","line":"        return dirnamePosix(path);"},
{"lineNum":"  808","line":"    }"},
{"lineNum":"  809","line":"}"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"pub fn dirnameWindows(path: []const u8) ?[]const u8 {"},
{"lineNum":"  812","line":"    if (path.len == 0)"},
{"lineNum":"  813","line":"        return null;"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"    const root_slice = diskDesignatorWindows(path);"},
{"lineNum":"  816","line":"    if (path.len == root_slice.len)"},
{"lineNum":"  817","line":"        return null;"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"    const have_root_slash = path.len > root_slice.len and (path[root_slice.len] == \'/\' or path[root_slice.len] == \'\\\\\');"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"    var end_index: usize = path.len - 1;"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"    while (path[end_index] == \'/\' or path[end_index] == \'\\\\\') {"},
{"lineNum":"  824","line":"        if (end_index == 0)"},
{"lineNum":"  825","line":"            return null;"},
{"lineNum":"  826","line":"        end_index -= 1;"},
{"lineNum":"  827","line":"    }"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    while (path[end_index] != \'/\' and path[end_index] != \'\\\\\') {"},
{"lineNum":"  830","line":"        if (end_index == 0)"},
{"lineNum":"  831","line":"            return null;"},
{"lineNum":"  832","line":"        end_index -= 1;"},
{"lineNum":"  833","line":"    }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"    if (have_root_slash and end_index == root_slice.len) {"},
{"lineNum":"  836","line":"        end_index += 1;"},
{"lineNum":"  837","line":"    }"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"    if (end_index == 0)"},
{"lineNum":"  840","line":"        return null;"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"    return path[0..end_index];"},
{"lineNum":"  843","line":"}"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"pub fn dirnamePosix(path: []const u8) ?[]const u8 {"},
{"lineNum":"  846","line":"    if (path.len == 0)"},
{"lineNum":"  847","line":"        return null;"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"    var end_index: usize = path.len - 1;"},
{"lineNum":"  850","line":"    while (path[end_index] == \'/\') {"},
{"lineNum":"  851","line":"        if (end_index == 0)"},
{"lineNum":"  852","line":"            return null;"},
{"lineNum":"  853","line":"        end_index -= 1;"},
{"lineNum":"  854","line":"    }"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"    while (path[end_index] != \'/\') {"},
{"lineNum":"  857","line":"        if (end_index == 0)"},
{"lineNum":"  858","line":"            return null;"},
{"lineNum":"  859","line":"        end_index -= 1;"},
{"lineNum":"  860","line":"    }"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"    if (end_index == 0 and path[0] == \'/\')"},
{"lineNum":"  863","line":"        return path[0..1];"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"    if (end_index == 0)"},
{"lineNum":"  866","line":"        return null;"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"    return path[0..end_index];"},
{"lineNum":"  869","line":"}"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"test \"dirnamePosix\" {"},
{"lineNum":"  872","line":"    try testDirnamePosix(\"/a/b/c\", \"/a/b\");"},
{"lineNum":"  873","line":"    try testDirnamePosix(\"/a/b/c///\", \"/a/b\");"},
{"lineNum":"  874","line":"    try testDirnamePosix(\"/a\", \"/\");"},
{"lineNum":"  875","line":"    try testDirnamePosix(\"/\", null);"},
{"lineNum":"  876","line":"    try testDirnamePosix(\"//\", null);"},
{"lineNum":"  877","line":"    try testDirnamePosix(\"///\", null);"},
{"lineNum":"  878","line":"    try testDirnamePosix(\"////\", null);"},
{"lineNum":"  879","line":"    try testDirnamePosix(\"\", null);"},
{"lineNum":"  880","line":"    try testDirnamePosix(\"a\", null);"},
{"lineNum":"  881","line":"    try testDirnamePosix(\"a/\", null);"},
{"lineNum":"  882","line":"    try testDirnamePosix(\"a//\", null);"},
{"lineNum":"  883","line":"}"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"test \"dirnameWindows\" {"},
{"lineNum":"  886","line":"    try testDirnameWindows(\"c:\\\\\", null);"},
{"lineNum":"  887","line":"    try testDirnameWindows(\"c:\\\\foo\", \"c:\\\\\");"},
{"lineNum":"  888","line":"    try testDirnameWindows(\"c:\\\\foo\\\\\", \"c:\\\\\");"},
{"lineNum":"  889","line":"    try testDirnameWindows(\"c:\\\\foo\\\\bar\", \"c:\\\\foo\");"},
{"lineNum":"  890","line":"    try testDirnameWindows(\"c:\\\\foo\\\\bar\\\\\", \"c:\\\\foo\");"},
{"lineNum":"  891","line":"    try testDirnameWindows(\"c:\\\\foo\\\\bar\\\\baz\", \"c:\\\\foo\\\\bar\");"},
{"lineNum":"  892","line":"    try testDirnameWindows(\"\\\\\", null);"},
{"lineNum":"  893","line":"    try testDirnameWindows(\"\\\\foo\", \"\\\\\");"},
{"lineNum":"  894","line":"    try testDirnameWindows(\"\\\\foo\\\\\", \"\\\\\");"},
{"lineNum":"  895","line":"    try testDirnameWindows(\"\\\\foo\\\\bar\", \"\\\\foo\");"},
{"lineNum":"  896","line":"    try testDirnameWindows(\"\\\\foo\\\\bar\\\\\", \"\\\\foo\");"},
{"lineNum":"  897","line":"    try testDirnameWindows(\"\\\\foo\\\\bar\\\\baz\", \"\\\\foo\\\\bar\");"},
{"lineNum":"  898","line":"    try testDirnameWindows(\"c:\", null);"},
{"lineNum":"  899","line":"    try testDirnameWindows(\"c:foo\", null);"},
{"lineNum":"  900","line":"    try testDirnameWindows(\"c:foo\\\\\", null);"},
{"lineNum":"  901","line":"    try testDirnameWindows(\"c:foo\\\\bar\", \"c:foo\");"},
{"lineNum":"  902","line":"    try testDirnameWindows(\"c:foo\\\\bar\\\\\", \"c:foo\");"},
{"lineNum":"  903","line":"    try testDirnameWindows(\"c:foo\\\\bar\\\\baz\", \"c:foo\\\\bar\");"},
{"lineNum":"  904","line":"    try testDirnameWindows(\"file:stream\", null);"},
{"lineNum":"  905","line":"    try testDirnameWindows(\"dir\\\\file:stream\", \"dir\");"},
{"lineNum":"  906","line":"    try testDirnameWindows(\"\\\\\\\\unc\\\\share\", null);"},
{"lineNum":"  907","line":"    try testDirnameWindows(\"\\\\\\\\unc\\\\share\\\\foo\", \"\\\\\\\\unc\\\\share\\\\\");"},
{"lineNum":"  908","line":"    try testDirnameWindows(\"\\\\\\\\unc\\\\share\\\\foo\\\\\", \"\\\\\\\\unc\\\\share\\\\\");"},
{"lineNum":"  909","line":"    try testDirnameWindows(\"\\\\\\\\unc\\\\share\\\\foo\\\\bar\", \"\\\\\\\\unc\\\\share\\\\foo\");"},
{"lineNum":"  910","line":"    try testDirnameWindows(\"\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\\", \"\\\\\\\\unc\\\\share\\\\foo\");"},
{"lineNum":"  911","line":"    try testDirnameWindows(\"\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\baz\", \"\\\\\\\\unc\\\\share\\\\foo\\\\bar\");"},
{"lineNum":"  912","line":"    try testDirnameWindows(\"/a/b/\", \"/a\");"},
{"lineNum":"  913","line":"    try testDirnameWindows(\"/a/b\", \"/a\");"},
{"lineNum":"  914","line":"    try testDirnameWindows(\"/a\", \"/\");"},
{"lineNum":"  915","line":"    try testDirnameWindows(\"\", null);"},
{"lineNum":"  916","line":"    try testDirnameWindows(\"/\", null);"},
{"lineNum":"  917","line":"    try testDirnameWindows(\"////\", null);"},
{"lineNum":"  918","line":"    try testDirnameWindows(\"foo\", null);"},
{"lineNum":"  919","line":"}"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"fn testDirnamePosix(input: []const u8, expected_output: ?[]const u8) !void {"},
{"lineNum":"  922","line":"    if (dirnamePosix(input)) |output| {"},
{"lineNum":"  923","line":"        try testing.expect(mem.eql(u8, output, expected_output.?));"},
{"lineNum":"  924","line":"    } else {"},
{"lineNum":"  925","line":"        try testing.expect(expected_output == null);"},
{"lineNum":"  926","line":"    }"},
{"lineNum":"  927","line":"}"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"fn testDirnameWindows(input: []const u8, expected_output: ?[]const u8) !void {"},
{"lineNum":"  930","line":"    if (dirnameWindows(input)) |output| {"},
{"lineNum":"  931","line":"        try testing.expect(mem.eql(u8, output, expected_output.?));"},
{"lineNum":"  932","line":"    } else {"},
{"lineNum":"  933","line":"        try testing.expect(expected_output == null);"},
{"lineNum":"  934","line":"    }"},
{"lineNum":"  935","line":"}"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"pub fn basename(path: []const u8) []const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  938","line":"    if (native_os == .windows) {"},
{"lineNum":"  939","line":"        return basenameWindows(path);"},
{"lineNum":"  940","line":"    } else {"},
{"lineNum":"  941","line":"        return basenamePosix(path);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  942","line":"    }"},
{"lineNum":"  943","line":"}"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"pub fn basenamePosix(path: []const u8) []const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  946","line":"    if (path.len == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":"        return &[_]u8{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"    var end_index: usize = path.len - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  950","line":"    while (path[end_index] == \'/\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  951","line":"        if (end_index == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"            return &[_]u8{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  953","line":"        end_index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  954","line":"    }"},
{"lineNum":"  955","line":"    var start_index: usize = end_index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  956","line":"    end_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  957","line":"    while (path[start_index] != \'/\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  958","line":"        if (start_index == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  959","line":"            return path[0..end_index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  960","line":"        start_index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  961","line":"    }"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"    return path[start_index + 1 .. end_index];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  964","line":"}"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"pub fn basenameWindows(path: []const u8) []const u8 {"},
{"lineNum":"  967","line":"    if (path.len == 0)"},
{"lineNum":"  968","line":"        return &[_]u8{};"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"    var end_index: usize = path.len - 1;"},
{"lineNum":"  971","line":"    while (true) {"},
{"lineNum":"  972","line":"        const byte = path[end_index];"},
{"lineNum":"  973","line":"        if (byte == \'/\' or byte == \'\\\\\') {"},
{"lineNum":"  974","line":"            if (end_index == 0)"},
{"lineNum":"  975","line":"                return &[_]u8{};"},
{"lineNum":"  976","line":"            end_index -= 1;"},
{"lineNum":"  977","line":"            continue;"},
{"lineNum":"  978","line":"        }"},
{"lineNum":"  979","line":"        if (byte == \':\' and end_index == 1) {"},
{"lineNum":"  980","line":"            return &[_]u8{};"},
{"lineNum":"  981","line":"        }"},
{"lineNum":"  982","line":"        break;"},
{"lineNum":"  983","line":"    }"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"    var start_index: usize = end_index;"},
{"lineNum":"  986","line":"    end_index += 1;"},
{"lineNum":"  987","line":"    while (path[start_index] != \'/\' and path[start_index] != \'\\\\\' and"},
{"lineNum":"  988","line":"        !(path[start_index] == \':\' and start_index == 1))"},
{"lineNum":"  989","line":"    {"},
{"lineNum":"  990","line":"        if (start_index == 0)"},
{"lineNum":"  991","line":"            return path[0..end_index];"},
{"lineNum":"  992","line":"        start_index -= 1;"},
{"lineNum":"  993","line":"    }"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"    return path[start_index + 1 .. end_index];"},
{"lineNum":"  996","line":"}"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"test \"basename\" {"},
{"lineNum":"  999","line":"    try testBasename(\"\", \"\");"},
{"lineNum":" 1000","line":"    try testBasename(\"/\", \"\");"},
{"lineNum":" 1001","line":"    try testBasename(\"/dir/basename.ext\", \"basename.ext\");"},
{"lineNum":" 1002","line":"    try testBasename(\"/basename.ext\", \"basename.ext\");"},
{"lineNum":" 1003","line":"    try testBasename(\"basename.ext\", \"basename.ext\");"},
{"lineNum":" 1004","line":"    try testBasename(\"basename.ext/\", \"basename.ext\");"},
{"lineNum":" 1005","line":"    try testBasename(\"basename.ext//\", \"basename.ext\");"},
{"lineNum":" 1006","line":"    try testBasename(\"/aaa/bbb\", \"bbb\");"},
{"lineNum":" 1007","line":"    try testBasename(\"/aaa/\", \"aaa\");"},
{"lineNum":" 1008","line":"    try testBasename(\"/aaa/b\", \"b\");"},
{"lineNum":" 1009","line":"    try testBasename(\"/a/b\", \"b\");"},
{"lineNum":" 1010","line":"    try testBasename(\"//a\", \"a\");"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"    try testBasenamePosix(\"\\\\dir\\\\basename.ext\", \"\\\\dir\\\\basename.ext\");"},
{"lineNum":" 1013","line":"    try testBasenamePosix(\"\\\\basename.ext\", \"\\\\basename.ext\");"},
{"lineNum":" 1014","line":"    try testBasenamePosix(\"basename.ext\", \"basename.ext\");"},
{"lineNum":" 1015","line":"    try testBasenamePosix(\"basename.ext\\\\\", \"basename.ext\\\\\");"},
{"lineNum":" 1016","line":"    try testBasenamePosix(\"basename.ext\\\\\\\\\", \"basename.ext\\\\\\\\\");"},
{"lineNum":" 1017","line":"    try testBasenamePosix(\"foo\", \"foo\");"},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"    try testBasenameWindows(\"\\\\dir\\\\basename.ext\", \"basename.ext\");"},
{"lineNum":" 1020","line":"    try testBasenameWindows(\"\\\\basename.ext\", \"basename.ext\");"},
{"lineNum":" 1021","line":"    try testBasenameWindows(\"basename.ext\", \"basename.ext\");"},
{"lineNum":" 1022","line":"    try testBasenameWindows(\"basename.ext\\\\\", \"basename.ext\");"},
{"lineNum":" 1023","line":"    try testBasenameWindows(\"basename.ext\\\\\\\\\", \"basename.ext\");"},
{"lineNum":" 1024","line":"    try testBasenameWindows(\"foo\", \"foo\");"},
{"lineNum":" 1025","line":"    try testBasenameWindows(\"C:\", \"\");"},
{"lineNum":" 1026","line":"    try testBasenameWindows(\"C:.\", \".\");"},
{"lineNum":" 1027","line":"    try testBasenameWindows(\"C:\\\\\", \"\");"},
{"lineNum":" 1028","line":"    try testBasenameWindows(\"C:\\\\dir\\\\base.ext\", \"base.ext\");"},
{"lineNum":" 1029","line":"    try testBasenameWindows(\"C:\\\\basename.ext\", \"basename.ext\");"},
{"lineNum":" 1030","line":"    try testBasenameWindows(\"C:basename.ext\", \"basename.ext\");"},
{"lineNum":" 1031","line":"    try testBasenameWindows(\"C:basename.ext\\\\\", \"basename.ext\");"},
{"lineNum":" 1032","line":"    try testBasenameWindows(\"C:basename.ext\\\\\\\\\", \"basename.ext\");"},
{"lineNum":" 1033","line":"    try testBasenameWindows(\"C:foo\", \"foo\");"},
{"lineNum":" 1034","line":"    try testBasenameWindows(\"file:stream\", \"file:stream\");"},
{"lineNum":" 1035","line":"}"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"fn testBasename(input: []const u8, expected_output: []const u8) !void {"},
{"lineNum":" 1038","line":"    try testing.expectEqualSlices(u8, expected_output, basename(input));"},
{"lineNum":" 1039","line":"}"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"fn testBasenamePosix(input: []const u8, expected_output: []const u8) !void {"},
{"lineNum":" 1042","line":"    try testing.expectEqualSlices(u8, expected_output, basenamePosix(input));"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"fn testBasenameWindows(input: []const u8, expected_output: []const u8) !void {"},
{"lineNum":" 1046","line":"    try testing.expectEqualSlices(u8, expected_output, basenameWindows(input));"},
{"lineNum":" 1047","line":"}"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"/// Returns the relative path from `from` to `to`. If `from` and `to` each"},
{"lineNum":" 1050","line":"/// resolve to the same path (after calling `resolve` on each), a zero-length"},
{"lineNum":" 1051","line":"/// string is returned."},
{"lineNum":" 1052","line":"/// On Windows this canonicalizes the drive to a capital letter and paths to `\\\\`."},
{"lineNum":" 1053","line":"pub fn relative(allocator: Allocator, from: []const u8, to: []const u8) ![]u8 {"},
{"lineNum":" 1054","line":"    if (native_os == .windows) {"},
{"lineNum":" 1055","line":"        return relativeWindows(allocator, from, to);"},
{"lineNum":" 1056","line":"    } else {"},
{"lineNum":" 1057","line":"        return relativePosix(allocator, from, to);"},
{"lineNum":" 1058","line":"    }"},
{"lineNum":" 1059","line":"}"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"pub fn relativeWindows(allocator: Allocator, from: []const u8, to: []const u8) ![]u8 {"},
{"lineNum":" 1062","line":"    const cwd = try process.getCwdAlloc(allocator);"},
{"lineNum":" 1063","line":"    defer allocator.free(cwd);"},
{"lineNum":" 1064","line":"    const resolved_from = try resolveWindows(allocator, &[_][]const u8{ cwd, from });"},
{"lineNum":" 1065","line":"    defer allocator.free(resolved_from);"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"    var clean_up_resolved_to = true;"},
{"lineNum":" 1068","line":"    const resolved_to = try resolveWindows(allocator, &[_][]const u8{ cwd, to });"},
{"lineNum":" 1069","line":"    defer if (clean_up_resolved_to) allocator.free(resolved_to);"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"    const parsed_from = windowsParsePath(resolved_from);"},
{"lineNum":" 1072","line":"    const parsed_to = windowsParsePath(resolved_to);"},
{"lineNum":" 1073","line":"    const result_is_to = x: {"},
{"lineNum":" 1074","line":"        if (parsed_from.kind != parsed_to.kind) {"},
{"lineNum":" 1075","line":"            break :x true;"},
{"lineNum":" 1076","line":"        } else switch (parsed_from.kind) {"},
{"lineNum":" 1077","line":"            .NetworkShare => {"},
{"lineNum":" 1078","line":"                break :x !networkShareServersEql(parsed_to.disk_designator, parsed_from.disk_designator);"},
{"lineNum":" 1079","line":"            },"},
{"lineNum":" 1080","line":"            .Drive => {"},
{"lineNum":" 1081","line":"                break :x ascii.toUpper(parsed_from.disk_designator[0]) != ascii.toUpper(parsed_to.disk_designator[0]);"},
{"lineNum":" 1082","line":"            },"},
{"lineNum":" 1083","line":"            .None => {"},
{"lineNum":" 1084","line":"                break :x false;"},
{"lineNum":" 1085","line":"            },"},
{"lineNum":" 1086","line":"        }"},
{"lineNum":" 1087","line":"    };"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"    if (result_is_to) {"},
{"lineNum":" 1090","line":"        clean_up_resolved_to = false;"},
{"lineNum":" 1091","line":"        return resolved_to;"},
{"lineNum":" 1092","line":"    }"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"    var from_it = mem.tokenizeAny(u8, resolved_from, \"/\\\\\");"},
{"lineNum":" 1095","line":"    var to_it = mem.tokenizeAny(u8, resolved_to, \"/\\\\\");"},
{"lineNum":" 1096","line":"    while (true) {"},
{"lineNum":" 1097","line":"        const from_component = from_it.next() orelse return allocator.dupe(u8, to_it.rest());"},
{"lineNum":" 1098","line":"        const to_rest = to_it.rest();"},
{"lineNum":" 1099","line":"        if (to_it.next()) |to_component| {"},
{"lineNum":" 1100","line":"            if (windows.eqlIgnoreCaseUtf8(from_component, to_component))"},
{"lineNum":" 1101","line":"                continue;"},
{"lineNum":" 1102","line":"        }"},
{"lineNum":" 1103","line":"        var up_index_end = \"..\".len;"},
{"lineNum":" 1104","line":"        while (from_it.next()) |_| {"},
{"lineNum":" 1105","line":"            up_index_end += \"\\\\..\".len;"},
{"lineNum":" 1106","line":"        }"},
{"lineNum":" 1107","line":"        const result = try allocator.alloc(u8, up_index_end + @intFromBool(to_rest.len > 0) + to_rest.len);"},
{"lineNum":" 1108","line":"        errdefer allocator.free(result);"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"        result[0..2].* = \"..\".*;"},
{"lineNum":" 1111","line":"        var result_index: usize = 2;"},
{"lineNum":" 1112","line":"        while (result_index < up_index_end) {"},
{"lineNum":" 1113","line":"            result[result_index..][0..3].* = \"\\\\..\".*;"},
{"lineNum":" 1114","line":"            result_index += 3;"},
{"lineNum":" 1115","line":"        }"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"        var rest_it = mem.tokenizeAny(u8, to_rest, \"/\\\\\");"},
{"lineNum":" 1118","line":"        while (rest_it.next()) |to_component| {"},
{"lineNum":" 1119","line":"            result[result_index] = \'\\\\\';"},
{"lineNum":" 1120","line":"            result_index += 1;"},
{"lineNum":" 1121","line":"            @memcpy(result[result_index..][0..to_component.len], to_component);"},
{"lineNum":" 1122","line":"            result_index += to_component.len;"},
{"lineNum":" 1123","line":"        }"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        return allocator.realloc(result, result_index);"},
{"lineNum":" 1126","line":"    }"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"    return [_]u8{};"},
{"lineNum":" 1129","line":"}"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"pub fn relativePosix(allocator: Allocator, from: []const u8, to: []const u8) ![]u8 {"},
{"lineNum":" 1132","line":"    const cwd = try process.getCwdAlloc(allocator);"},
{"lineNum":" 1133","line":"    defer allocator.free(cwd);"},
{"lineNum":" 1134","line":"    const resolved_from = try resolvePosix(allocator, &[_][]const u8{ cwd, from });"},
{"lineNum":" 1135","line":"    defer allocator.free(resolved_from);"},
{"lineNum":" 1136","line":"    const resolved_to = try resolvePosix(allocator, &[_][]const u8{ cwd, to });"},
{"lineNum":" 1137","line":"    defer allocator.free(resolved_to);"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"    var from_it = mem.tokenizeScalar(u8, resolved_from, \'/\');"},
{"lineNum":" 1140","line":"    var to_it = mem.tokenizeScalar(u8, resolved_to, \'/\');"},
{"lineNum":" 1141","line":"    while (true) {"},
{"lineNum":" 1142","line":"        const from_component = from_it.next() orelse return allocator.dupe(u8, to_it.rest());"},
{"lineNum":" 1143","line":"        const to_rest = to_it.rest();"},
{"lineNum":" 1144","line":"        if (to_it.next()) |to_component| {"},
{"lineNum":" 1145","line":"            if (mem.eql(u8, from_component, to_component))"},
{"lineNum":" 1146","line":"                continue;"},
{"lineNum":" 1147","line":"        }"},
{"lineNum":" 1148","line":"        var up_count: usize = 1;"},
{"lineNum":" 1149","line":"        while (from_it.next()) |_| {"},
{"lineNum":" 1150","line":"            up_count += 1;"},
{"lineNum":" 1151","line":"        }"},
{"lineNum":" 1152","line":"        const up_index_end = up_count * \"../\".len;"},
{"lineNum":" 1153","line":"        const result = try allocator.alloc(u8, up_index_end + to_rest.len);"},
{"lineNum":" 1154","line":"        errdefer allocator.free(result);"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"        var result_index: usize = 0;"},
{"lineNum":" 1157","line":"        while (result_index < up_index_end) {"},
{"lineNum":" 1158","line":"            result[result_index..][0..3].* = \"../\".*;"},
{"lineNum":" 1159","line":"            result_index += 3;"},
{"lineNum":" 1160","line":"        }"},
{"lineNum":" 1161","line":"        if (to_rest.len == 0) {"},
{"lineNum":" 1162","line":"            // shave off the trailing slash"},
{"lineNum":" 1163","line":"            return allocator.realloc(result, result_index - 1);"},
{"lineNum":" 1164","line":"        }"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"        @memcpy(result[result_index..][0..to_rest.len], to_rest);"},
{"lineNum":" 1167","line":"        return result;"},
{"lineNum":" 1168","line":"    }"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"    return [_]u8{};"},
{"lineNum":" 1171","line":"}"},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":"test \"relative\" {"},
{"lineNum":" 1174","line":"    try testRelativeWindows(\"c:/blah\\\\blah\", \"d:/games\", \"D:\\\\games\");"},
{"lineNum":" 1175","line":"    try testRelativeWindows(\"c:/aaaa/bbbb\", \"c:/aaaa\", \"..\");"},
{"lineNum":" 1176","line":"    try testRelativeWindows(\"c:/aaaa/bbbb\", \"c:/cccc\", \"..\\\\..\\\\cccc\");"},
{"lineNum":" 1177","line":"    try testRelativeWindows(\"c:/aaaa/bbbb\", \"C:/aaaa/bbbb\", \"\");"},
{"lineNum":" 1178","line":"    try testRelativeWindows(\"c:/aaaa/bbbb\", \"c:/aaaa/cccc\", \"..\\\\cccc\");"},
{"lineNum":" 1179","line":"    try testRelativeWindows(\"c:/aaaa/\", \"c:/aaaa/cccc\", \"cccc\");"},
{"lineNum":" 1180","line":"    try testRelativeWindows(\"c:/\", \"c:\\\\aaaa\\\\bbbb\", \"aaaa\\\\bbbb\");"},
{"lineNum":" 1181","line":"    try testRelativeWindows(\"c:/aaaa/bbbb\", \"d:\\\\\", \"D:\\\\\");"},
{"lineNum":" 1182","line":"    try testRelativeWindows(\"c:/AaAa/bbbb\", \"c:/aaaa/bbbb\", \"\");"},
{"lineNum":" 1183","line":"    try testRelativeWindows(\"c:/aaaaa/\", \"c:/aaaa/cccc\", \"..\\\\aaaa\\\\cccc\");"},
{"lineNum":" 1184","line":"    try testRelativeWindows(\"C:\\\\foo\\\\bar\\\\baz\\\\quux\", \"C:\\\\\", \"..\\\\..\\\\..\\\\..\");"},
{"lineNum":" 1185","line":"    try testRelativeWindows(\"C:\\\\foo\\\\test\", \"C:\\\\foo\\\\test\\\\bar\\\\package.json\", \"bar\\\\package.json\");"},
{"lineNum":" 1186","line":"    try testRelativeWindows(\"C:\\\\foo\\\\bar\\\\baz-quux\", \"C:\\\\foo\\\\bar\\\\baz\", \"..\\\\baz\");"},
{"lineNum":" 1187","line":"    try testRelativeWindows(\"C:\\\\foo\\\\bar\\\\baz\", \"C:\\\\foo\\\\bar\\\\baz-quux\", \"..\\\\baz-quux\");"},
{"lineNum":" 1188","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\bar\", \"\\\\\\\\foo\\\\bar\\\\baz\", \"baz\");"},
{"lineNum":" 1189","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\bar\\\\baz\", \"\\\\\\\\foo\\\\bar\", \"..\");"},
{"lineNum":" 1190","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\bar\\\\baz-quux\", \"\\\\\\\\foo\\\\bar\\\\baz\", \"..\\\\baz\");"},
{"lineNum":" 1191","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\bar\\\\baz\", \"\\\\\\\\foo\\\\bar\\\\baz-quux\", \"..\\\\baz-quux\");"},
{"lineNum":" 1192","line":"    try testRelativeWindows(\"C:\\\\baz-quux\", \"C:\\\\baz\", \"..\\\\baz\");"},
{"lineNum":" 1193","line":"    try testRelativeWindows(\"C:\\\\baz\", \"C:\\\\baz-quux\", \"..\\\\baz-quux\");"},
{"lineNum":" 1194","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\baz-quux\", \"\\\\\\\\foo\\\\baz\", \"..\\\\baz\");"},
{"lineNum":" 1195","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\baz\", \"\\\\\\\\foo\\\\baz-quux\", \"..\\\\baz-quux\");"},
{"lineNum":" 1196","line":"    try testRelativeWindows(\"C:\\\\baz\", \"\\\\\\\\foo\\\\bar\\\\baz\", \"\\\\\\\\foo\\\\bar\\\\baz\");"},
{"lineNum":" 1197","line":"    try testRelativeWindows(\"\\\\\\\\foo\\\\bar\\\\baz\", \"C:\\\\baz\", \"C:\\\\baz\");"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"    try testRelativeWindows(\"a/b/c\", \"a\\\\b\", \"..\");"},
{"lineNum":" 1200","line":"    try testRelativeWindows(\"a/b/c\", \"a\", \"..\\\\..\");"},
{"lineNum":" 1201","line":"    try testRelativeWindows(\"a/b/c\", \"a\\\\b\\\\c\\\\d\", \"d\");"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"    try testRelativeWindows(\"\\\\\\\\FOO\\\\bar\\\\baz\", \"\\\\\\\\foo\\\\BAR\\\\BAZ\", \"\");"},
{"lineNum":" 1204","line":"    // Unicode-aware case-insensitive path comparison"},
{"lineNum":" 1205","line":"    try testRelativeWindows(\"\\\\\\\\кириллица\\\\ελληνικά\\\\português\", \"\\\\\\\\КИРИЛЛИЦА\\\\ΕΛΛΗΝΙΚΆ\\\\PORTUGUÊS\", \"\");"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"    try testRelativePosix(\"/var/lib\", \"/var\", \"..\");"},
{"lineNum":" 1208","line":"    try testRelativePosix(\"/var/lib\", \"/bin\", \"../../bin\");"},
{"lineNum":" 1209","line":"    try testRelativePosix(\"/var/lib\", \"/var/lib\", \"\");"},
{"lineNum":" 1210","line":"    try testRelativePosix(\"/var/lib\", \"/var/apache\", \"../apache\");"},
{"lineNum":" 1211","line":"    try testRelativePosix(\"/var/\", \"/var/lib\", \"lib\");"},
{"lineNum":" 1212","line":"    try testRelativePosix(\"/\", \"/var/lib\", \"var/lib\");"},
{"lineNum":" 1213","line":"    try testRelativePosix(\"/foo/test\", \"/foo/test/bar/package.json\", \"bar/package.json\");"},
{"lineNum":" 1214","line":"    try testRelativePosix(\"/Users/a/web/b/test/mails\", \"/Users/a/web/b\", \"../..\");"},
{"lineNum":" 1215","line":"    try testRelativePosix(\"/foo/bar/baz-quux\", \"/foo/bar/baz\", \"../baz\");"},
{"lineNum":" 1216","line":"    try testRelativePosix(\"/foo/bar/baz\", \"/foo/bar/baz-quux\", \"../baz-quux\");"},
{"lineNum":" 1217","line":"    try testRelativePosix(\"/baz-quux\", \"/baz\", \"../baz\");"},
{"lineNum":" 1218","line":"    try testRelativePosix(\"/baz\", \"/baz-quux\", \"../baz-quux\");"},
{"lineNum":" 1219","line":"}"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"fn testRelativePosix(from: []const u8, to: []const u8, expected_output: []const u8) !void {"},
{"lineNum":" 1222","line":"    const result = try relativePosix(testing.allocator, from, to);"},
{"lineNum":" 1223","line":"    defer testing.allocator.free(result);"},
{"lineNum":" 1224","line":"    try testing.expectEqualStrings(expected_output, result);"},
{"lineNum":" 1225","line":"}"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"fn testRelativeWindows(from: []const u8, to: []const u8, expected_output: []const u8) !void {"},
{"lineNum":" 1228","line":"    const result = try relativeWindows(testing.allocator, from, to);"},
{"lineNum":" 1229","line":"    defer testing.allocator.free(result);"},
{"lineNum":" 1230","line":"    try testing.expectEqualStrings(expected_output, result);"},
{"lineNum":" 1231","line":"}"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"/// Searches for a file extension separated by a `.` and returns the string after that `.`."},
{"lineNum":" 1234","line":"/// Files that end or start with `.` and have no other `.` in their name"},
{"lineNum":" 1235","line":"/// are considered to have no extension, in which case this returns \"\"."},
{"lineNum":" 1236","line":"/// Examples:"},
{"lineNum":" 1237","line":"/// - `\"main.zig\"`      ⇒ `\".zig\"`"},
{"lineNum":" 1238","line":"/// - `\"src/main.zig\"`  ⇒ `\".zig\"`"},
{"lineNum":" 1239","line":"/// - `\".gitignore\"`    ⇒ `\"\"`"},
{"lineNum":" 1240","line":"/// - `\".image.png\"`    ⇒ `\".png\"`"},
{"lineNum":" 1241","line":"/// - `\"keep.\"`         ⇒ `\".\"`"},
{"lineNum":" 1242","line":"/// - `\"src.keep.me\"`   ⇒ `\".me\"`"},
{"lineNum":" 1243","line":"/// - `\"/src/keep.me\"`  ⇒ `\".me\"`"},
{"lineNum":" 1244","line":"/// - `\"/src/keep.me/\"` ⇒ `\".me\"`"},
{"lineNum":" 1245","line":"/// The returned slice is guaranteed to have its pointer within the start and end"},
{"lineNum":" 1246","line":"/// pointer address range of `path`, even if it is length zero."},
{"lineNum":" 1247","line":"pub fn extension(path: []const u8) []const u8 {"},
{"lineNum":" 1248","line":"    const filename = basename(path);"},
{"lineNum":" 1249","line":"    const index = mem.lastIndexOfScalar(u8, filename, \'.\') orelse return path[path.len..];"},
{"lineNum":" 1250","line":"    if (index == 0) return path[path.len..];"},
{"lineNum":" 1251","line":"    return filename[index..];"},
{"lineNum":" 1252","line":"}"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"fn testExtension(path: []const u8, expected: []const u8) !void {"},
{"lineNum":" 1255","line":"    try testing.expectEqualStrings(expected, extension(path));"},
{"lineNum":" 1256","line":"}"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"test \"extension\" {"},
{"lineNum":" 1259","line":"    try testExtension(\"\", \"\");"},
{"lineNum":" 1260","line":"    try testExtension(\".\", \"\");"},
{"lineNum":" 1261","line":"    try testExtension(\"a.\", \".\");"},
{"lineNum":" 1262","line":"    try testExtension(\"abc.\", \".\");"},
{"lineNum":" 1263","line":"    try testExtension(\".a\", \"\");"},
{"lineNum":" 1264","line":"    try testExtension(\".file\", \"\");"},
{"lineNum":" 1265","line":"    try testExtension(\".gitignore\", \"\");"},
{"lineNum":" 1266","line":"    try testExtension(\".image.png\", \".png\");"},
{"lineNum":" 1267","line":"    try testExtension(\"file.ext\", \".ext\");"},
{"lineNum":" 1268","line":"    try testExtension(\"file.ext.\", \".\");"},
{"lineNum":" 1269","line":"    try testExtension(\"very-long-file.bruh\", \".bruh\");"},
{"lineNum":" 1270","line":"    try testExtension(\"a.b.c\", \".c\");"},
{"lineNum":" 1271","line":"    try testExtension(\"a.b.c/\", \".c\");"},
{"lineNum":" 1272","line":""},
{"lineNum":" 1273","line":"    try testExtension(\"/\", \"\");"},
{"lineNum":" 1274","line":"    try testExtension(\"/.\", \"\");"},
{"lineNum":" 1275","line":"    try testExtension(\"/a.\", \".\");"},
{"lineNum":" 1276","line":"    try testExtension(\"/abc.\", \".\");"},
{"lineNum":" 1277","line":"    try testExtension(\"/.a\", \"\");"},
{"lineNum":" 1278","line":"    try testExtension(\"/.file\", \"\");"},
{"lineNum":" 1279","line":"    try testExtension(\"/.gitignore\", \"\");"},
{"lineNum":" 1280","line":"    try testExtension(\"/file.ext\", \".ext\");"},
{"lineNum":" 1281","line":"    try testExtension(\"/file.ext.\", \".\");"},
{"lineNum":" 1282","line":"    try testExtension(\"/very-long-file.bruh\", \".bruh\");"},
{"lineNum":" 1283","line":"    try testExtension(\"/a.b.c\", \".c\");"},
{"lineNum":" 1284","line":"    try testExtension(\"/a.b.c/\", \".c\");"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"    try testExtension(\"/foo/bar/bam/\", \"\");"},
{"lineNum":" 1287","line":"    try testExtension(\"/foo/bar/bam/.\", \"\");"},
{"lineNum":" 1288","line":"    try testExtension(\"/foo/bar/bam/a.\", \".\");"},
{"lineNum":" 1289","line":"    try testExtension(\"/foo/bar/bam/abc.\", \".\");"},
{"lineNum":" 1290","line":"    try testExtension(\"/foo/bar/bam/.a\", \"\");"},
{"lineNum":" 1291","line":"    try testExtension(\"/foo/bar/bam/.file\", \"\");"},
{"lineNum":" 1292","line":"    try testExtension(\"/foo/bar/bam/.gitignore\", \"\");"},
{"lineNum":" 1293","line":"    try testExtension(\"/foo/bar/bam/file.ext\", \".ext\");"},
{"lineNum":" 1294","line":"    try testExtension(\"/foo/bar/bam/file.ext.\", \".\");"},
{"lineNum":" 1295","line":"    try testExtension(\"/foo/bar/bam/very-long-file.bruh\", \".bruh\");"},
{"lineNum":" 1296","line":"    try testExtension(\"/foo/bar/bam/a.b.c\", \".c\");"},
{"lineNum":" 1297","line":"    try testExtension(\"/foo/bar/bam/a.b.c/\", \".c\");"},
{"lineNum":" 1298","line":"}"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"/// Returns the last component of this path without its extension (if any):"},
{"lineNum":" 1301","line":"/// - \"hello/world/lib.tar.gz\" ⇒ \"lib.tar\""},
{"lineNum":" 1302","line":"/// - \"hello/world/lib.tar\"    ⇒ \"lib\""},
{"lineNum":" 1303","line":"/// - \"hello/world/lib\"        ⇒ \"lib\""},
{"lineNum":" 1304","line":"pub fn stem(path: []const u8) []const u8 {"},
{"lineNum":" 1305","line":"    const filename = basename(path);"},
{"lineNum":" 1306","line":"    const index = mem.lastIndexOfScalar(u8, filename, \'.\') orelse return filename[0..];"},
{"lineNum":" 1307","line":"    if (index == 0) return path;"},
{"lineNum":" 1308","line":"    return filename[0..index];"},
{"lineNum":" 1309","line":"}"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"fn testStem(path: []const u8, expected: []const u8) !void {"},
{"lineNum":" 1312","line":"    try testing.expectEqualStrings(expected, stem(path));"},
{"lineNum":" 1313","line":"}"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"test \"stem\" {"},
{"lineNum":" 1316","line":"    try testStem(\"hello/world/lib.tar.gz\", \"lib.tar\");"},
{"lineNum":" 1317","line":"    try testStem(\"hello/world/lib.tar\", \"lib\");"},
{"lineNum":" 1318","line":"    try testStem(\"hello/world/lib\", \"lib\");"},
{"lineNum":" 1319","line":"    try testStem(\"hello/lib/\", \"lib\");"},
{"lineNum":" 1320","line":"    try testStem(\"hello...\", \"hello..\");"},
{"lineNum":" 1321","line":"    try testStem(\"hello.\", \"hello\");"},
{"lineNum":" 1322","line":"    try testStem(\"/hello.\", \"hello\");"},
{"lineNum":" 1323","line":"    try testStem(\".gitignore\", \".gitignore\");"},
{"lineNum":" 1324","line":"    try testStem(\".image.png\", \".image\");"},
{"lineNum":" 1325","line":"    try testStem(\"file.ext\", \"file\");"},
{"lineNum":" 1326","line":"    try testStem(\"file.ext.\", \"file.ext\");"},
{"lineNum":" 1327","line":"    try testStem(\"a.b.c\", \"a.b\");"},
{"lineNum":" 1328","line":"    try testStem(\"a.b.c/\", \"a.b\");"},
{"lineNum":" 1329","line":"    try testStem(\".a\", \".a\");"},
{"lineNum":" 1330","line":"    try testStem(\"///\", \"\");"},
{"lineNum":" 1331","line":"    try testStem(\"..\", \".\");"},
{"lineNum":" 1332","line":"    try testStem(\".\", \".\");"},
{"lineNum":" 1333","line":"    try testStem(\" \", \" \");"},
{"lineNum":" 1334","line":"    try testStem(\"\", \"\");"},
{"lineNum":" 1335","line":"}"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"/// A path component iterator that can move forwards and backwards."},
{"lineNum":" 1338","line":"/// The \'root\' of the path (`/` for POSIX, things like `C:\\`, `\\\\server\\share\\`, etc"},
{"lineNum":" 1339","line":"/// for Windows) is treated specially and will never be returned by any of the"},
{"lineNum":" 1340","line":"/// `first`, `last`, `next`, or `previous` functions."},
{"lineNum":" 1341","line":"/// Multiple consecutive path separators are skipped (treated as a single separator)"},
{"lineNum":" 1342","line":"/// when iterating."},
{"lineNum":" 1343","line":"/// All returned component names/paths are slices of the original path."},
{"lineNum":" 1344","line":"/// There is no normalization of paths performed while iterating."},
{"lineNum":" 1345","line":"pub fn ComponentIterator(comptime path_type: PathType, comptime T: type) type {"},
{"lineNum":" 1346","line":"    return struct {"},
{"lineNum":" 1347","line":"        path: []const T,"},
{"lineNum":" 1348","line":"        root_end_index: usize = 0,"},
{"lineNum":" 1349","line":"        start_index: usize = 0,"},
{"lineNum":" 1350","line":"        end_index: usize = 0,"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"        const Self = @This();"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"        pub const Component = struct {"},
{"lineNum":" 1355","line":"            /// The current component\'s path name, e.g. \'b\'."},
{"lineNum":" 1356","line":"            /// This will never contain path separators."},
{"lineNum":" 1357","line":"            name: []const T,"},
{"lineNum":" 1358","line":"            /// The full path up to and including the current component, e.g. \'/a/b\'"},
{"lineNum":" 1359","line":"            /// This will never contain trailing path separators."},
{"lineNum":" 1360","line":"            path: []const T,"},
{"lineNum":" 1361","line":"        };"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"        const InitError = switch (path_type) {"},
{"lineNum":" 1364","line":"            .windows => error{BadPathName},"},
{"lineNum":" 1365","line":"            else => error{},"},
{"lineNum":" 1366","line":"        };"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"        /// After `init`, `next` will return the first component after the root"},
{"lineNum":" 1369","line":"        /// (there is no need to call `first` after `init`)."},
{"lineNum":" 1370","line":"        /// To iterate backwards (from the end of the path to the beginning), call `last`"},
{"lineNum":" 1371","line":"        /// after `init` and then iterate via `previous` calls."},
{"lineNum":" 1372","line":"        /// For Windows paths, `error.BadPathName` is returned if the `path` has an explicit"},
{"lineNum":" 1373","line":"        /// namespace prefix (`\\\\.\\`, `\\\\?\\`, or `\\??\\`) or if it is a UNC path with more"},
{"lineNum":" 1374","line":"        /// than two path separators at the beginning."},
{"lineNum":" 1375","line":"        pub fn init(path: []const T) InitError!Self {"},
{"lineNum":" 1376","line":"            const root_end_index: usize = switch (path_type) {"},
{"lineNum":" 1377","line":"                .posix, .uefi => posix: {"},
{"lineNum":" 1378","line":"                    // Root on UEFI and POSIX only differs by the path separator"},
{"lineNum":" 1379","line":"                    var root_end_index: usize = 0;"},
{"lineNum":" 1380","line":"                    while (true) : (root_end_index += 1) {"},
{"lineNum":" 1381","line":"                        if (root_end_index >= path.len or !path_type.isSep(T, path[root_end_index])) {"},
{"lineNum":" 1382","line":"                            break;"},
{"lineNum":" 1383","line":"                        }"},
{"lineNum":" 1384","line":"                    }"},
{"lineNum":" 1385","line":"                    break :posix root_end_index;"},
{"lineNum":" 1386","line":"                },"},
{"lineNum":" 1387","line":"                .windows => windows: {"},
{"lineNum":" 1388","line":"                    // Namespaces other than the Win32 file namespace are tricky"},
{"lineNum":" 1389","line":"                    // and basically impossible to determine a \'root\' for, since it\'s"},
{"lineNum":" 1390","line":"                    // possible to construct an effectively arbitrarily long \'root\',"},
{"lineNum":" 1391","line":"                    // e.g. `\\\\.\\GLOBALROOT\\??\\UNC\\localhost\\C$\\foo` is a"},
{"lineNum":" 1392","line":"                    // possible path that would be effectively equivalent to"},
{"lineNum":" 1393","line":"                    // `C:\\foo`, and the `GLOBALROOT\\??\\` part can also be recursive,"},
{"lineNum":" 1394","line":"                    // so `GLOBALROOT\\??\\GLOBALROOT\\??\\...` would work for any number"},
{"lineNum":" 1395","line":"                    // of repetitions. Therefore, paths with an explicit namespace prefix"},
{"lineNum":" 1396","line":"                    // (\\\\.\\, \\??\\, \\\\?\\) are not allowed here."},
{"lineNum":" 1397","line":"                    if (std.os.windows.getNamespacePrefix(T, path) != .none) {"},
{"lineNum":" 1398","line":"                        return error.BadPathName;"},
{"lineNum":" 1399","line":"                    }"},
{"lineNum":" 1400","line":"                    const windows_path_type = std.os.windows.getUnprefixedPathType(T, path);"},
{"lineNum":" 1401","line":"                    break :windows switch (windows_path_type) {"},
{"lineNum":" 1402","line":"                        .relative => 0,"},
{"lineNum":" 1403","line":"                        .root_local_device => path.len,"},
{"lineNum":" 1404","line":"                        .rooted => 1,"},
{"lineNum":" 1405","line":"                        .unc_absolute => unc: {"},
{"lineNum":" 1406","line":"                            var end_index: usize = 2;"},
{"lineNum":" 1407","line":"                            // Any extra separators between the first two and the server name are not allowed"},
{"lineNum":" 1408","line":"                            // and will always lead to STATUS_OBJECT_PATH_INVALID if it is attempted"},
{"lineNum":" 1409","line":"                            // to be used."},
{"lineNum":" 1410","line":"                            if (end_index < path.len and path_type.isSep(T, path[end_index])) {"},
{"lineNum":" 1411","line":"                                return error.BadPathName;"},
{"lineNum":" 1412","line":"                            }"},
{"lineNum":" 1413","line":"                            // Server"},
{"lineNum":" 1414","line":"                            while (end_index < path.len and !path_type.isSep(T, path[end_index])) {"},
{"lineNum":" 1415","line":"                                end_index += 1;"},
{"lineNum":" 1416","line":"                            }"},
{"lineNum":" 1417","line":"                            // Slash(es) after server"},
{"lineNum":" 1418","line":"                            while (end_index < path.len and path_type.isSep(T, path[end_index])) {"},
{"lineNum":" 1419","line":"                                end_index += 1;"},
{"lineNum":" 1420","line":"                            }"},
{"lineNum":" 1421","line":"                            // Share"},
{"lineNum":" 1422","line":"                            while (end_index < path.len and !path_type.isSep(T, path[end_index])) {"},
{"lineNum":" 1423","line":"                                end_index += 1;"},
{"lineNum":" 1424","line":"                            }"},
{"lineNum":" 1425","line":"                            // Slash(es) after share"},
{"lineNum":" 1426","line":"                            while (end_index < path.len and path_type.isSep(T, path[end_index])) {"},
{"lineNum":" 1427","line":"                                end_index += 1;"},
{"lineNum":" 1428","line":"                            }"},
{"lineNum":" 1429","line":"                            break :unc end_index;"},
{"lineNum":" 1430","line":"                        },"},
{"lineNum":" 1431","line":"                        .drive_absolute => drive: {"},
{"lineNum":" 1432","line":"                            var end_index: usize = 3;"},
{"lineNum":" 1433","line":"                            while (end_index < path.len and path_type.isSep(T, path[end_index])) {"},
{"lineNum":" 1434","line":"                                end_index += 1;"},
{"lineNum":" 1435","line":"                            }"},
{"lineNum":" 1436","line":"                            break :drive end_index;"},
{"lineNum":" 1437","line":"                        },"},
{"lineNum":" 1438","line":"                        .drive_relative => 2,"},
{"lineNum":" 1439","line":"                    };"},
{"lineNum":" 1440","line":"                },"},
{"lineNum":" 1441","line":"            };"},
{"lineNum":" 1442","line":"            return .{"},
{"lineNum":" 1443","line":"                .path = path,"},
{"lineNum":" 1444","line":"                .root_end_index = root_end_index,"},
{"lineNum":" 1445","line":"                .start_index = root_end_index,"},
{"lineNum":" 1446","line":"                .end_index = root_end_index,"},
{"lineNum":" 1447","line":"            };"},
{"lineNum":" 1448","line":"        }"},
{"lineNum":" 1449","line":""},
{"lineNum":" 1450","line":"        /// Returns the root of the path if it is an absolute path, or null otherwise."},
{"lineNum":" 1451","line":"        /// For POSIX paths, this will be `/`."},
{"lineNum":" 1452","line":"        /// For Windows paths, this will be something like `C:\\`, `\\\\server\\share\\`, etc."},
{"lineNum":" 1453","line":"        /// For UEFI paths, this will be `\\`."},
{"lineNum":" 1454","line":"        pub fn root(self: Self) ?[]const T {"},
{"lineNum":" 1455","line":"            if (self.root_end_index == 0) return null;"},
{"lineNum":" 1456","line":"            return self.path[0..self.root_end_index];"},
{"lineNum":" 1457","line":"        }"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"        /// Returns the first component (from the beginning of the path)."},
{"lineNum":" 1460","line":"        /// For example, if the path is `/a/b/c` then this will return the `a` component."},
{"lineNum":" 1461","line":"        /// After calling `first`, `previous` will always return `null`, and `next` will return"},
{"lineNum":" 1462","line":"        /// the component to the right of the one returned by `first`, if any exist."},
{"lineNum":" 1463","line":"        pub fn first(self: *Self) ?Component {"},
{"lineNum":" 1464","line":"            self.start_index = self.root_end_index;"},
{"lineNum":" 1465","line":"            self.end_index = self.start_index;"},
{"lineNum":" 1466","line":"            while (self.end_index < self.path.len and !path_type.isSep(T, self.path[self.end_index])) {"},
{"lineNum":" 1467","line":"                self.end_index += 1;"},
{"lineNum":" 1468","line":"            }"},
{"lineNum":" 1469","line":"            if (self.end_index == self.start_index) return null;"},
{"lineNum":" 1470","line":"            return .{"},
{"lineNum":" 1471","line":"                .name = self.path[self.start_index..self.end_index],"},
{"lineNum":" 1472","line":"                .path = self.path[0..self.end_index],"},
{"lineNum":" 1473","line":"            };"},
{"lineNum":" 1474","line":"        }"},
{"lineNum":" 1475","line":""},
{"lineNum":" 1476","line":"        /// Returns the last component (from the end of the path)."},
{"lineNum":" 1477","line":"        /// For example, if the path is `/a/b/c` then this will return the `c` component."},
{"lineNum":" 1478","line":"        /// After calling `last`, `next` will always return `null`, and `previous` will return"},
{"lineNum":" 1479","line":"        /// the component to the left of the one returned by `last`, if any exist."},
{"lineNum":" 1480","line":"        pub fn last(self: *Self) ?Component {"},
{"lineNum":" 1481","line":"            self.end_index = self.path.len;"},
{"lineNum":" 1482","line":"            while (true) {"},
{"lineNum":" 1483","line":"                if (self.end_index == self.root_end_index) {"},
{"lineNum":" 1484","line":"                    self.start_index = self.end_index;"},
{"lineNum":" 1485","line":"                    return null;"},
{"lineNum":" 1486","line":"                }"},
{"lineNum":" 1487","line":"                if (!path_type.isSep(T, self.path[self.end_index - 1])) break;"},
{"lineNum":" 1488","line":"                self.end_index -= 1;"},
{"lineNum":" 1489","line":"            }"},
{"lineNum":" 1490","line":"            self.start_index = self.end_index;"},
{"lineNum":" 1491","line":"            while (true) {"},
{"lineNum":" 1492","line":"                if (self.start_index == self.root_end_index) break;"},
{"lineNum":" 1493","line":"                if (path_type.isSep(T, self.path[self.start_index - 1])) break;"},
{"lineNum":" 1494","line":"                self.start_index -= 1;"},
{"lineNum":" 1495","line":"            }"},
{"lineNum":" 1496","line":"            if (self.start_index == self.end_index) return null;"},
{"lineNum":" 1497","line":"            return .{"},
{"lineNum":" 1498","line":"                .name = self.path[self.start_index..self.end_index],"},
{"lineNum":" 1499","line":"                .path = self.path[0..self.end_index],"},
{"lineNum":" 1500","line":"            };"},
{"lineNum":" 1501","line":"        }"},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"        /// Returns the next component (the component to the right of the most recently"},
{"lineNum":" 1504","line":"        /// returned component), or null if no such component exists."},
{"lineNum":" 1505","line":"        /// For example, if the path is `/a/b/c` and the most recently returned component"},
{"lineNum":" 1506","line":"        /// is `b`, then this will return the `c` component."},
{"lineNum":" 1507","line":"        pub fn next(self: *Self) ?Component {"},
{"lineNum":" 1508","line":"            var start_index = self.end_index;"},
{"lineNum":" 1509","line":"            while (start_index < self.path.len and path_type.isSep(T, self.path[start_index])) {"},
{"lineNum":" 1510","line":"                start_index += 1;"},
{"lineNum":" 1511","line":"            }"},
{"lineNum":" 1512","line":"            var end_index = start_index;"},
{"lineNum":" 1513","line":"            while (end_index < self.path.len and !path_type.isSep(T, self.path[end_index])) {"},
{"lineNum":" 1514","line":"                end_index += 1;"},
{"lineNum":" 1515","line":"            }"},
{"lineNum":" 1516","line":"            if (start_index == end_index) return null;"},
{"lineNum":" 1517","line":"            self.start_index = start_index;"},
{"lineNum":" 1518","line":"            self.end_index = end_index;"},
{"lineNum":" 1519","line":"            return .{"},
{"lineNum":" 1520","line":"                .name = self.path[self.start_index..self.end_index],"},
{"lineNum":" 1521","line":"                .path = self.path[0..self.end_index],"},
{"lineNum":" 1522","line":"            };"},
{"lineNum":" 1523","line":"        }"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"        /// Returns the previous component (the component to the left of the most recently"},
{"lineNum":" 1526","line":"        /// returned component), or null if no such component exists."},
{"lineNum":" 1527","line":"        /// For example, if the path is `/a/b/c` and the most recently returned component"},
{"lineNum":" 1528","line":"        /// is `b`, then this will return the `a` component."},
{"lineNum":" 1529","line":"        pub fn previous(self: *Self) ?Component {"},
{"lineNum":" 1530","line":"            var end_index = self.start_index;"},
{"lineNum":" 1531","line":"            while (true) {"},
{"lineNum":" 1532","line":"                if (end_index == self.root_end_index) return null;"},
{"lineNum":" 1533","line":"                if (!path_type.isSep(T, self.path[end_index - 1])) break;"},
{"lineNum":" 1534","line":"                end_index -= 1;"},
{"lineNum":" 1535","line":"            }"},
{"lineNum":" 1536","line":"            var start_index = end_index;"},
{"lineNum":" 1537","line":"            while (true) {"},
{"lineNum":" 1538","line":"                if (start_index == self.root_end_index) break;"},
{"lineNum":" 1539","line":"                if (path_type.isSep(T, self.path[start_index - 1])) break;"},
{"lineNum":" 1540","line":"                start_index -= 1;"},
{"lineNum":" 1541","line":"            }"},
{"lineNum":" 1542","line":"            if (start_index == end_index) return null;"},
{"lineNum":" 1543","line":"            self.start_index = start_index;"},
{"lineNum":" 1544","line":"            self.end_index = end_index;"},
{"lineNum":" 1545","line":"            return .{"},
{"lineNum":" 1546","line":"                .name = self.path[self.start_index..self.end_index],"},
{"lineNum":" 1547","line":"                .path = self.path[0..self.end_index],"},
{"lineNum":" 1548","line":"            };"},
{"lineNum":" 1549","line":"        }"},
{"lineNum":" 1550","line":"    };"},
{"lineNum":" 1551","line":"}"},
{"lineNum":" 1552","line":""},
{"lineNum":" 1553","line":"pub const NativeUtf8ComponentIterator = ComponentIterator(switch (native_os) {"},
{"lineNum":" 1554","line":"    .windows => .windows,"},
{"lineNum":" 1555","line":"    .uefi => .uefi,"},
{"lineNum":" 1556","line":"    else => .posix,"},
{"lineNum":" 1557","line":"}, u8);"},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"pub fn componentIterator(path: []const u8) !NativeUtf8ComponentIterator {"},
{"lineNum":" 1560","line":"    return NativeUtf8ComponentIterator.init(path);"},
{"lineNum":" 1561","line":"}"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":"test \"ComponentIterator posix\" {"},
{"lineNum":" 1564","line":"    const PosixComponentIterator = ComponentIterator(.posix, u8);"},
{"lineNum":" 1565","line":"    {"},
{"lineNum":" 1566","line":"        const path = \"a/b/c/\";"},
{"lineNum":" 1567","line":"        var it = try PosixComponentIterator.init(path);"},
{"lineNum":" 1568","line":"        try std.testing.expectEqual(@as(usize, 0), it.root_end_index);"},
{"lineNum":" 1569","line":"        try std.testing.expect(null == it.root());"},
{"lineNum":" 1570","line":"        {"},
{"lineNum":" 1571","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1572","line":""},
{"lineNum":" 1573","line":"            const first_via_next = it.next().?;"},
{"lineNum":" 1574","line":"            try std.testing.expectEqualStrings(\"a\", first_via_next.name);"},
{"lineNum":" 1575","line":"            try std.testing.expectEqualStrings(\"a\", first_via_next.path);"},
{"lineNum":" 1576","line":""},
{"lineNum":" 1577","line":"            const first = it.first().?;"},
{"lineNum":" 1578","line":"            try std.testing.expectEqualStrings(\"a\", first.name);"},
{"lineNum":" 1579","line":"            try std.testing.expectEqualStrings(\"a\", first.path);"},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"            const second = it.next().?;"},
{"lineNum":" 1584","line":"            try std.testing.expectEqualStrings(\"b\", second.name);"},
{"lineNum":" 1585","line":"            try std.testing.expectEqualStrings(\"a/b\", second.path);"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"            const third = it.next().?;"},
{"lineNum":" 1588","line":"            try std.testing.expectEqualStrings(\"c\", third.name);"},
{"lineNum":" 1589","line":"            try std.testing.expectEqualStrings(\"a/b/c\", third.path);"},
{"lineNum":" 1590","line":""},
{"lineNum":" 1591","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1592","line":"        }"},
{"lineNum":" 1593","line":"        {"},
{"lineNum":" 1594","line":"            const last = it.last().?;"},
{"lineNum":" 1595","line":"            try std.testing.expectEqualStrings(\"c\", last.name);"},
{"lineNum":" 1596","line":"            try std.testing.expectEqualStrings(\"a/b/c\", last.path);"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"            const second_to_last = it.previous().?;"},
{"lineNum":" 1601","line":"            try std.testing.expectEqualStrings(\"b\", second_to_last.name);"},
{"lineNum":" 1602","line":"            try std.testing.expectEqualStrings(\"a/b\", second_to_last.path);"},
{"lineNum":" 1603","line":""},
{"lineNum":" 1604","line":"            const third_to_last = it.previous().?;"},
{"lineNum":" 1605","line":"            try std.testing.expectEqualStrings(\"a\", third_to_last.name);"},
{"lineNum":" 1606","line":"            try std.testing.expectEqualStrings(\"a\", third_to_last.path);"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1609","line":"        }"},
{"lineNum":" 1610","line":"    }"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"    {"},
{"lineNum":" 1613","line":"        const path = \"/a/b/c/\";"},
{"lineNum":" 1614","line":"        var it = try PosixComponentIterator.init(path);"},
{"lineNum":" 1615","line":"        try std.testing.expectEqual(@as(usize, 1), it.root_end_index);"},
{"lineNum":" 1616","line":"        try std.testing.expectEqualStrings(\"/\", it.root().?);"},
{"lineNum":" 1617","line":"        {"},
{"lineNum":" 1618","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"            const first_via_next = it.next().?;"},
{"lineNum":" 1621","line":"            try std.testing.expectEqualStrings(\"a\", first_via_next.name);"},
{"lineNum":" 1622","line":"            try std.testing.expectEqualStrings(\"/a\", first_via_next.path);"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"            const first = it.first().?;"},
{"lineNum":" 1625","line":"            try std.testing.expectEqualStrings(\"a\", first.name);"},
{"lineNum":" 1626","line":"            try std.testing.expectEqualStrings(\"/a\", first.path);"},
{"lineNum":" 1627","line":""},
{"lineNum":" 1628","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1629","line":""},
{"lineNum":" 1630","line":"            const second = it.next().?;"},
{"lineNum":" 1631","line":"            try std.testing.expectEqualStrings(\"b\", second.name);"},
{"lineNum":" 1632","line":"            try std.testing.expectEqualStrings(\"/a/b\", second.path);"},
{"lineNum":" 1633","line":""},
{"lineNum":" 1634","line":"            const third = it.next().?;"},
{"lineNum":" 1635","line":"            try std.testing.expectEqualStrings(\"c\", third.name);"},
{"lineNum":" 1636","line":"            try std.testing.expectEqualStrings(\"/a/b/c\", third.path);"},
{"lineNum":" 1637","line":""},
{"lineNum":" 1638","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1639","line":"        }"},
{"lineNum":" 1640","line":"        {"},
{"lineNum":" 1641","line":"            const last = it.last().?;"},
{"lineNum":" 1642","line":"            try std.testing.expectEqualStrings(\"c\", last.name);"},
{"lineNum":" 1643","line":"            try std.testing.expectEqualStrings(\"/a/b/c\", last.path);"},
{"lineNum":" 1644","line":""},
{"lineNum":" 1645","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1646","line":""},
{"lineNum":" 1647","line":"            const second_to_last = it.previous().?;"},
{"lineNum":" 1648","line":"            try std.testing.expectEqualStrings(\"b\", second_to_last.name);"},
{"lineNum":" 1649","line":"            try std.testing.expectEqualStrings(\"/a/b\", second_to_last.path);"},
{"lineNum":" 1650","line":""},
{"lineNum":" 1651","line":"            const third_to_last = it.previous().?;"},
{"lineNum":" 1652","line":"            try std.testing.expectEqualStrings(\"a\", third_to_last.name);"},
{"lineNum":" 1653","line":"            try std.testing.expectEqualStrings(\"/a\", third_to_last.path);"},
{"lineNum":" 1654","line":""},
{"lineNum":" 1655","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1656","line":"        }"},
{"lineNum":" 1657","line":"    }"},
{"lineNum":" 1658","line":""},
{"lineNum":" 1659","line":"    {"},
{"lineNum":" 1660","line":"        const path = \"/\";"},
{"lineNum":" 1661","line":"        var it = try PosixComponentIterator.init(path);"},
{"lineNum":" 1662","line":"        try std.testing.expectEqual(@as(usize, 1), it.root_end_index);"},
{"lineNum":" 1663","line":"        try std.testing.expectEqualStrings(\"/\", it.root().?);"},
{"lineNum":" 1664","line":""},
{"lineNum":" 1665","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1666","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1667","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1668","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1671","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1672","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1673","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1674","line":"    }"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"    {"},
{"lineNum":" 1677","line":"        const path = \"\";"},
{"lineNum":" 1678","line":"        var it = try PosixComponentIterator.init(path);"},
{"lineNum":" 1679","line":"        try std.testing.expectEqual(@as(usize, 0), it.root_end_index);"},
{"lineNum":" 1680","line":"        try std.testing.expect(null == it.root());"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1683","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1684","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1685","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1686","line":""},
{"lineNum":" 1687","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1688","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1689","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1690","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1691","line":"    }"},
{"lineNum":" 1692","line":"}"},
{"lineNum":" 1693","line":""},
{"lineNum":" 1694","line":"test \"ComponentIterator windows\" {"},
{"lineNum":" 1695","line":"    const WindowsComponentIterator = ComponentIterator(.windows, u8);"},
{"lineNum":" 1696","line":"    {"},
{"lineNum":" 1697","line":"        const path = \"a/b\\\\c//\";"},
{"lineNum":" 1698","line":"        var it = try WindowsComponentIterator.init(path);"},
{"lineNum":" 1699","line":"        try std.testing.expectEqual(@as(usize, 0), it.root_end_index);"},
{"lineNum":" 1700","line":"        try std.testing.expect(null == it.root());"},
{"lineNum":" 1701","line":"        {"},
{"lineNum":" 1702","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1703","line":""},
{"lineNum":" 1704","line":"            const first_via_next = it.next().?;"},
{"lineNum":" 1705","line":"            try std.testing.expectEqualStrings(\"a\", first_via_next.name);"},
{"lineNum":" 1706","line":"            try std.testing.expectEqualStrings(\"a\", first_via_next.path);"},
{"lineNum":" 1707","line":""},
{"lineNum":" 1708","line":"            const first = it.first().?;"},
{"lineNum":" 1709","line":"            try std.testing.expectEqualStrings(\"a\", first.name);"},
{"lineNum":" 1710","line":"            try std.testing.expectEqualStrings(\"a\", first.path);"},
{"lineNum":" 1711","line":""},
{"lineNum":" 1712","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"            const second = it.next().?;"},
{"lineNum":" 1715","line":"            try std.testing.expectEqualStrings(\"b\", second.name);"},
{"lineNum":" 1716","line":"            try std.testing.expectEqualStrings(\"a/b\", second.path);"},
{"lineNum":" 1717","line":""},
{"lineNum":" 1718","line":"            const third = it.next().?;"},
{"lineNum":" 1719","line":"            try std.testing.expectEqualStrings(\"c\", third.name);"},
{"lineNum":" 1720","line":"            try std.testing.expectEqualStrings(\"a/b\\\\c\", third.path);"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1723","line":"        }"},
{"lineNum":" 1724","line":"        {"},
{"lineNum":" 1725","line":"            const last = it.last().?;"},
{"lineNum":" 1726","line":"            try std.testing.expectEqualStrings(\"c\", last.name);"},
{"lineNum":" 1727","line":"            try std.testing.expectEqualStrings(\"a/b\\\\c\", last.path);"},
{"lineNum":" 1728","line":""},
{"lineNum":" 1729","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"            const second_to_last = it.previous().?;"},
{"lineNum":" 1732","line":"            try std.testing.expectEqualStrings(\"b\", second_to_last.name);"},
{"lineNum":" 1733","line":"            try std.testing.expectEqualStrings(\"a/b\", second_to_last.path);"},
{"lineNum":" 1734","line":""},
{"lineNum":" 1735","line":"            const third_to_last = it.previous().?;"},
{"lineNum":" 1736","line":"            try std.testing.expectEqualStrings(\"a\", third_to_last.name);"},
{"lineNum":" 1737","line":"            try std.testing.expectEqualStrings(\"a\", third_to_last.path);"},
{"lineNum":" 1738","line":""},
{"lineNum":" 1739","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1740","line":"        }"},
{"lineNum":" 1741","line":"    }"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"    {"},
{"lineNum":" 1744","line":"        const path = \"C:\\\\a/b/c/\";"},
{"lineNum":" 1745","line":"        var it = try WindowsComponentIterator.init(path);"},
{"lineNum":" 1746","line":"        try std.testing.expectEqual(@as(usize, 3), it.root_end_index);"},
{"lineNum":" 1747","line":"        try std.testing.expectEqualStrings(\"C:\\\\\", it.root().?);"},
{"lineNum":" 1748","line":"        {"},
{"lineNum":" 1749","line":"            const first = it.first().?;"},
{"lineNum":" 1750","line":"            try std.testing.expectEqualStrings(\"a\", first.name);"},
{"lineNum":" 1751","line":"            try std.testing.expectEqualStrings(\"C:\\\\a\", first.path);"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":"            const second = it.next().?;"},
{"lineNum":" 1754","line":"            try std.testing.expectEqualStrings(\"b\", second.name);"},
{"lineNum":" 1755","line":"            try std.testing.expectEqualStrings(\"C:\\\\a/b\", second.path);"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"            const third = it.next().?;"},
{"lineNum":" 1758","line":"            try std.testing.expectEqualStrings(\"c\", third.name);"},
{"lineNum":" 1759","line":"            try std.testing.expectEqualStrings(\"C:\\\\a/b/c\", third.path);"},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"            try std.testing.expect(null == it.next());"},
{"lineNum":" 1762","line":"        }"},
{"lineNum":" 1763","line":"        {"},
{"lineNum":" 1764","line":"            const last = it.last().?;"},
{"lineNum":" 1765","line":"            try std.testing.expectEqualStrings(\"c\", last.name);"},
{"lineNum":" 1766","line":"            try std.testing.expectEqualStrings(\"C:\\\\a/b/c\", last.path);"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"            const second_to_last = it.previous().?;"},
{"lineNum":" 1769","line":"            try std.testing.expectEqualStrings(\"b\", second_to_last.name);"},
{"lineNum":" 1770","line":"            try std.testing.expectEqualStrings(\"C:\\\\a/b\", second_to_last.path);"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"            const third_to_last = it.previous().?;"},
{"lineNum":" 1773","line":"            try std.testing.expectEqualStrings(\"a\", third_to_last.name);"},
{"lineNum":" 1774","line":"            try std.testing.expectEqualStrings(\"C:\\\\a\", third_to_last.path);"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"            try std.testing.expect(null == it.previous());"},
{"lineNum":" 1777","line":"        }"},
{"lineNum":" 1778","line":"    }"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"    {"},
{"lineNum":" 1781","line":"        const path = \"/\";"},
{"lineNum":" 1782","line":"        var it = try WindowsComponentIterator.init(path);"},
{"lineNum":" 1783","line":"        try std.testing.expectEqual(@as(usize, 1), it.root_end_index);"},
{"lineNum":" 1784","line":"        try std.testing.expectEqualStrings(\"/\", it.root().?);"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1787","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1788","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1789","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1790","line":""},
{"lineNum":" 1791","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1792","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1793","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1794","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1795","line":"    }"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"    {"},
{"lineNum":" 1798","line":"        const path = \"\";"},
{"lineNum":" 1799","line":"        var it = try WindowsComponentIterator.init(path);"},
{"lineNum":" 1800","line":"        try std.testing.expectEqual(@as(usize, 0), it.root_end_index);"},
{"lineNum":" 1801","line":"        try std.testing.expect(null == it.root());"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1804","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1805","line":"        try std.testing.expect(null == it.first());"},
{"lineNum":" 1806","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1809","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1810","line":"        try std.testing.expect(null == it.last());"},
{"lineNum":" 1811","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1812","line":"    }"},
{"lineNum":" 1813","line":"}"},
{"lineNum":" 1814","line":""},
{"lineNum":" 1815","line":"test \"ComponentIterator windows UTF-16\" {"},
{"lineNum":" 1816","line":"    // TODO: Fix on big endian architectures"},
{"lineNum":" 1817","line":"    if (builtin.cpu.arch.endian() != .Little) {"},
{"lineNum":" 1818","line":"        return error.SkipZigTest;"},
{"lineNum":" 1819","line":"    }"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"    const WindowsComponentIterator = ComponentIterator(.windows, u16);"},
{"lineNum":" 1822","line":"    const L = std.unicode.utf8ToUtf16LeStringLiteral;"},
{"lineNum":" 1823","line":""},
{"lineNum":" 1824","line":"    const path = L(\"C:\\\\a/b/c/\");"},
{"lineNum":" 1825","line":"    var it = try WindowsComponentIterator.init(path);"},
{"lineNum":" 1826","line":"    try std.testing.expectEqual(@as(usize, 3), it.root_end_index);"},
{"lineNum":" 1827","line":"    try std.testing.expectEqualSlices(u16, L(\"C:\\\\\"), it.root().?);"},
{"lineNum":" 1828","line":"    {"},
{"lineNum":" 1829","line":"        const first = it.first().?;"},
{"lineNum":" 1830","line":"        try std.testing.expectEqualSlices(u16, L(\"a\"), first.name);"},
{"lineNum":" 1831","line":"        try std.testing.expectEqualSlices(u16, L(\"C:\\\\a\"), first.path);"},
{"lineNum":" 1832","line":""},
{"lineNum":" 1833","line":"        const second = it.next().?;"},
{"lineNum":" 1834","line":"        try std.testing.expectEqualSlices(u16, L(\"b\"), second.name);"},
{"lineNum":" 1835","line":"        try std.testing.expectEqualSlices(u16, L(\"C:\\\\a/b\"), second.path);"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"        const third = it.next().?;"},
{"lineNum":" 1838","line":"        try std.testing.expectEqualSlices(u16, L(\"c\"), third.name);"},
{"lineNum":" 1839","line":"        try std.testing.expectEqualSlices(u16, L(\"C:\\\\a/b/c\"), third.path);"},
{"lineNum":" 1840","line":""},
{"lineNum":" 1841","line":"        try std.testing.expect(null == it.next());"},
{"lineNum":" 1842","line":"    }"},
{"lineNum":" 1843","line":"    {"},
{"lineNum":" 1844","line":"        const last = it.last().?;"},
{"lineNum":" 1845","line":"        try std.testing.expectEqualSlices(u16, L(\"c\"), last.name);"},
{"lineNum":" 1846","line":"        try std.testing.expectEqualSlices(u16, L(\"C:\\\\a/b/c\"), last.path);"},
{"lineNum":" 1847","line":""},
{"lineNum":" 1848","line":"        const second_to_last = it.previous().?;"},
{"lineNum":" 1849","line":"        try std.testing.expectEqualSlices(u16, L(\"b\"), second_to_last.name);"},
{"lineNum":" 1850","line":"        try std.testing.expectEqualSlices(u16, L(\"C:\\\\a/b\"), second_to_last.path);"},
{"lineNum":" 1851","line":""},
{"lineNum":" 1852","line":"        const third_to_last = it.previous().?;"},
{"lineNum":" 1853","line":"        try std.testing.expectEqualSlices(u16, L(\"a\"), third_to_last.name);"},
{"lineNum":" 1854","line":"        try std.testing.expectEqualSlices(u16, L(\"C:\\\\a\"), third_to_last.path);"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"        try std.testing.expect(null == it.previous());"},
{"lineNum":" 1857","line":"    }"},
{"lineNum":" 1858","line":"}"},
{"lineNum":" 1859","line":""},
{"lineNum":" 1860","line":"test \"ComponentIterator roots\" {"},
{"lineNum":" 1861","line":"    // UEFI"},
{"lineNum":" 1862","line":"    {"},
{"lineNum":" 1863","line":"        var it = try ComponentIterator(.uefi, u8).init(\"\\\\\\\\a\");"},
{"lineNum":" 1864","line":"        try std.testing.expectEqualStrings(\"\\\\\\\\\", it.root().?);"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"        it = try ComponentIterator(.uefi, u8).init(\"//a\");"},
{"lineNum":" 1867","line":"        try std.testing.expect(null == it.root());"},
{"lineNum":" 1868","line":"    }"},
{"lineNum":" 1869","line":"    // POSIX"},
{"lineNum":" 1870","line":"    {"},
{"lineNum":" 1871","line":"        var it = try ComponentIterator(.posix, u8).init(\"//a\");"},
{"lineNum":" 1872","line":"        try std.testing.expectEqualStrings(\"//\", it.root().?);"},
{"lineNum":" 1873","line":""},
{"lineNum":" 1874","line":"        it = try ComponentIterator(.posix, u8).init(\"\\\\\\\\a\");"},
{"lineNum":" 1875","line":"        try std.testing.expect(null == it.root());"},
{"lineNum":" 1876","line":"    }"},
{"lineNum":" 1877","line":"    // Windows"},
{"lineNum":" 1878","line":"    {"},
{"lineNum":" 1879","line":"        // Drive relative"},
{"lineNum":" 1880","line":"        var it = try ComponentIterator(.windows, u8).init(\"C:a\");"},
{"lineNum":" 1881","line":"        try std.testing.expectEqualStrings(\"C:\", it.root().?);"},
{"lineNum":" 1882","line":""},
{"lineNum":" 1883","line":"        // Drive absolute"},
{"lineNum":" 1884","line":"        it = try ComponentIterator(.windows, u8).init(\"C://a\");"},
{"lineNum":" 1885","line":"        try std.testing.expectEqualStrings(\"C://\", it.root().?);"},
{"lineNum":" 1886","line":"        it = try ComponentIterator(.windows, u8).init(\"C:\\\\a\");"},
{"lineNum":" 1887","line":"        try std.testing.expectEqualStrings(\"C:\\\\\", it.root().?);"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"        // Rooted"},
{"lineNum":" 1890","line":"        it = try ComponentIterator(.windows, u8).init(\"\\\\a\");"},
{"lineNum":" 1891","line":"        try std.testing.expectEqualStrings(\"\\\\\", it.root().?);"},
{"lineNum":" 1892","line":"        it = try ComponentIterator(.windows, u8).init(\"/a\");"},
{"lineNum":" 1893","line":"        try std.testing.expectEqualStrings(\"/\", it.root().?);"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"        // Root local device"},
{"lineNum":" 1896","line":"        it = try ComponentIterator(.windows, u8).init(\"\\\\\\\\.\");"},
{"lineNum":" 1897","line":"        try std.testing.expectEqualStrings(\"\\\\\\\\.\", it.root().?);"},
{"lineNum":" 1898","line":"        it = try ComponentIterator(.windows, u8).init(\"//?\");"},
{"lineNum":" 1899","line":"        try std.testing.expectEqualStrings(\"//?\", it.root().?);"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"        // UNC absolute"},
{"lineNum":" 1902","line":"        it = try ComponentIterator(.windows, u8).init(\"//\");"},
{"lineNum":" 1903","line":"        try std.testing.expectEqualStrings(\"//\", it.root().?);"},
{"lineNum":" 1904","line":"        it = try ComponentIterator(.windows, u8).init(\"\\\\\\\\a\");"},
{"lineNum":" 1905","line":"        try std.testing.expectEqualStrings(\"\\\\\\\\a\", it.root().?);"},
{"lineNum":" 1906","line":"        it = try ComponentIterator(.windows, u8).init(\"\\\\\\\\a\\\\b\\\\\\\\c\");"},
{"lineNum":" 1907","line":"        try std.testing.expectEqualStrings(\"\\\\\\\\a\\\\b\\\\\\\\\", it.root().?);"},
{"lineNum":" 1908","line":"        it = try ComponentIterator(.windows, u8).init(\"//a\");"},
{"lineNum":" 1909","line":"        try std.testing.expectEqualStrings(\"//a\", it.root().?);"},
{"lineNum":" 1910","line":"        it = try ComponentIterator(.windows, u8).init(\"//a/b//c\");"},
{"lineNum":" 1911","line":"        try std.testing.expectEqualStrings(\"//a/b//\", it.root().?);"},
{"lineNum":" 1912","line":"    }"},
{"lineNum":" 1913","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 69, "covered" : 0,};
var merged_data = [];
