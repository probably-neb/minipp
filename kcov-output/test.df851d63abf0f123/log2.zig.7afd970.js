var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const math = std.math;"},
{"lineNum":"    4","line":"const expect = std.testing.expect;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"/// Returns the base-2 logarithm of x."},
{"lineNum":"    7","line":"///"},
{"lineNum":"    8","line":"/// Special Cases:"},
{"lineNum":"    9","line":"///  - log2(+inf)  = +inf"},
{"lineNum":"   10","line":"///  - log2(0)     = -inf"},
{"lineNum":"   11","line":"///  - log2(x)     = nan if x < 0"},
{"lineNum":"   12","line":"///  - log2(nan)   = nan"},
{"lineNum":"   13","line":"pub fn log2(x: anytype) @TypeOf(x) {","class":"lineCov","hits":"1","order":"2959","possible_hits":"1",},
{"lineNum":"   14","line":"    const T = @TypeOf(x);"},
{"lineNum":"   15","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"   16","line":"        .ComptimeFloat => {"},
{"lineNum":"   17","line":"            return @as(comptime_float, @log2(x));"},
{"lineNum":"   18","line":"        },"},
{"lineNum":"   19","line":"        .Float => return @log2(x),"},
{"lineNum":"   20","line":"        .ComptimeInt => comptime {"},
{"lineNum":"   21","line":"            var x_shifted = x;"},
{"lineNum":"   22","line":"            // First, calculate floorPowerOfTwo(x)"},
{"lineNum":"   23","line":"            var shift_amt = 1;"},
{"lineNum":"   24","line":"            while (x_shifted >> (shift_amt << 1) != 0) shift_amt <<= 1;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"            // Answer is in the range [shift_amt, 2 * shift_amt - 1]"},
{"lineNum":"   27","line":"            // We can find it in O(log(N)) using binary search."},
{"lineNum":"   28","line":"            var result = 0;"},
{"lineNum":"   29","line":"            while (shift_amt != 0) : (shift_amt >>= 1) {"},
{"lineNum":"   30","line":"                if (x_shifted >> shift_amt != 0) {"},
{"lineNum":"   31","line":"                    x_shifted >>= shift_amt;"},
{"lineNum":"   32","line":"                    result += shift_amt;"},
{"lineNum":"   33","line":"                }"},
{"lineNum":"   34","line":"            }"},
{"lineNum":"   35","line":"            return result;"},
{"lineNum":"   36","line":"        },"},
{"lineNum":"   37","line":"        .Int => |IntType| switch (IntType.signedness) {"},
{"lineNum":"   38","line":"            .signed => @compileError(\"log2 not implemented for signed integers\"),"},
{"lineNum":"   39","line":"            .unsigned => return math.log2_int(T, x),","class":"lineCov","hits":"1","order":"2960","possible_hits":"1",},
{"lineNum":"   40","line":"        },"},
{"lineNum":"   41","line":"        else => @compileError(\"log2 not implemented for \" ++ @typeName(T)),"},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":"}"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"test \"log2\" {"},
{"lineNum":"   46","line":"    // https://github.com/ziglang/zig/issues/13703"},
{"lineNum":"   47","line":"    if (builtin.cpu.arch == .aarch64 and builtin.os.tag == .windows) return error.SkipZigTest;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    try expect(log2(@as(f32, 0.2)) == @log2(0.2));"},
{"lineNum":"   50","line":"    try expect(log2(@as(f64, 0.2)) == @log2(0.2));"},
{"lineNum":"   51","line":"    comptime {"},
{"lineNum":"   52","line":"        try expect(log2(1) == 0);"},
{"lineNum":"   53","line":"        try expect(log2(15) == 3);"},
{"lineNum":"   54","line":"        try expect(log2(16) == 4);"},
{"lineNum":"   55","line":"        try expect(log2(1 << 4073) == 4073);"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 2, "covered" : 2,};
var merged_data = [];
