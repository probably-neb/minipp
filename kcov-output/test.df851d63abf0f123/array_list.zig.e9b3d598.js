var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const debug = std.debug;"},
{"lineNum":"    3","line":"const assert = debug.assert;"},
{"lineNum":"    4","line":"const testing = std.testing;"},
{"lineNum":"    5","line":"const mem = std.mem;"},
{"lineNum":"    6","line":"const math = std.math;"},
{"lineNum":"    7","line":"const Allocator = mem.Allocator;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"/// A contiguous, growable list of items in memory."},
{"lineNum":"   10","line":"/// This is a wrapper around an array of T values. Initialize with `init`."},
{"lineNum":"   11","line":"///"},
{"lineNum":"   12","line":"/// This struct internally stores a `std.mem.Allocator` for memory management."},
{"lineNum":"   13","line":"/// To manually specify an allocator with each method call see `ArrayListUnmanaged`."},
{"lineNum":"   14","line":"pub fn ArrayList(comptime T: type) type {"},
{"lineNum":"   15","line":"    return ArrayListAligned(T, null);"},
{"lineNum":"   16","line":"}"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/// A contiguous, growable list of arbitrarily aligned items in memory."},
{"lineNum":"   19","line":"/// This is a wrapper around an array of T values aligned to `alignment`-byte"},
{"lineNum":"   20","line":"/// addresses. If the specified alignment is `null`, then `@alignOf(T)` is used."},
{"lineNum":"   21","line":"/// Initialize with `init`."},
{"lineNum":"   22","line":"///"},
{"lineNum":"   23","line":"/// This struct internally stores a `std.mem.Allocator` for memory management."},
{"lineNum":"   24","line":"/// To manually specify an allocator with each method call see `ArrayListAlignedUnmanaged`."},
{"lineNum":"   25","line":"pub fn ArrayListAligned(comptime T: type, comptime alignment: ?u29) type {"},
{"lineNum":"   26","line":"    if (alignment) |a| {"},
{"lineNum":"   27","line":"        if (a == @alignOf(T)) {"},
{"lineNum":"   28","line":"            return ArrayListAligned(T, null);"},
{"lineNum":"   29","line":"        }"},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":"    return struct {"},
{"lineNum":"   32","line":"        const Self = @This();"},
{"lineNum":"   33","line":"        /// Contents of the list. Pointers to elements in this slice are"},
{"lineNum":"   34","line":"        /// **invalid after resizing operations** on the ArrayList unless the"},
{"lineNum":"   35","line":"        /// operation explicitly either: (1) states otherwise or (2) lists the"},
{"lineNum":"   36","line":"        /// invalidated pointers."},
{"lineNum":"   37","line":"        ///"},
{"lineNum":"   38","line":"        /// The allocator used determines how element pointers are"},
{"lineNum":"   39","line":"        /// invalidated, so the behavior may vary between lists. To avoid"},
{"lineNum":"   40","line":"        /// illegal behavior, take into account the above paragraph plus the"},
{"lineNum":"   41","line":"        /// explicit statements given in each method."},
{"lineNum":"   42","line":"        items: Slice,"},
{"lineNum":"   43","line":"        /// How many T values this list can hold without allocating"},
{"lineNum":"   44","line":"        /// additional memory."},
{"lineNum":"   45","line":"        capacity: usize,"},
{"lineNum":"   46","line":"        allocator: Allocator,"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        pub const Slice = if (alignment) |a| ([]align(a) T) else []T;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        pub fn SentinelSlice(comptime s: T) type {"},
{"lineNum":"   51","line":"            return if (alignment) |a| ([:s]align(a) T) else [:s]T;"},
{"lineNum":"   52","line":"        }"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"   55","line":"        pub fn init(allocator: Allocator) Self {","class":"linePartCov","hits":"5","order":"175","possible_hits":"9",},
{"lineNum":"   56","line":"            return Self{","class":"linePartCov","hits":"5","order":"176","possible_hits":"9",},
{"lineNum":"   57","line":"                .items = &[_]T{},"},
{"lineNum":"   58","line":"                .capacity = 0,"},
{"lineNum":"   59","line":"                .allocator = allocator,"},
{"lineNum":"   60","line":"            };"},
{"lineNum":"   61","line":"        }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        /// Initialize with capacity to hold `num` elements."},
{"lineNum":"   64","line":"        /// The resulting capacity will equal `num` exactly."},
{"lineNum":"   65","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"   66","line":"        pub fn initCapacity(allocator: Allocator, num: usize) Allocator.Error!Self {","class":"lineCov","hits":"1","order":"827","possible_hits":"1",},
{"lineNum":"   67","line":"            var self = Self.init(allocator);","class":"lineCov","hits":"1","order":"828","possible_hits":"1",},
{"lineNum":"   68","line":"            try self.ensureTotalCapacityPrecise(num);","class":"lineCov","hits":"1","order":"829","possible_hits":"1",},
{"lineNum":"   69","line":"            return self;","class":"lineCov","hits":"1","order":"830","possible_hits":"1",},
{"lineNum":"   70","line":"        }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        /// Release all allocated memory."},
{"lineNum":"   73","line":"        pub fn deinit(self: Self) void {","class":"linePartCov","hits":"4","order":"315","possible_hits":"7",},
{"lineNum":"   74","line":"            if (@sizeOf(T) > 0) {"},
{"lineNum":"   75","line":"                self.allocator.free(self.allocatedSlice());","class":"linePartCov","hits":"4","order":"316","possible_hits":"7",},
{"lineNum":"   76","line":"            }"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        /// ArrayList takes ownership of the passed in slice. The slice must have been"},
{"lineNum":"   80","line":"        /// allocated with `allocator`."},
{"lineNum":"   81","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"   82","line":"        pub fn fromOwnedSlice(allocator: Allocator, slice: Slice) Self {"},
{"lineNum":"   83","line":"            return Self{"},
{"lineNum":"   84","line":"                .items = slice,"},
{"lineNum":"   85","line":"                .capacity = slice.len,"},
{"lineNum":"   86","line":"                .allocator = allocator,"},
{"lineNum":"   87","line":"            };"},
{"lineNum":"   88","line":"        }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        /// ArrayList takes ownership of the passed in slice. The slice must have been"},
{"lineNum":"   91","line":"        /// allocated with `allocator`."},
{"lineNum":"   92","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"   93","line":"        pub fn fromOwnedSliceSentinel(allocator: Allocator, comptime sentinel: T, slice: [:sentinel]T) Self {"},
{"lineNum":"   94","line":"            return Self{"},
{"lineNum":"   95","line":"                .items = slice,"},
{"lineNum":"   96","line":"                .capacity = slice.len + 1,"},
{"lineNum":"   97","line":"                .allocator = allocator,"},
{"lineNum":"   98","line":"            };"},
{"lineNum":"   99","line":"        }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        /// Initializes an ArrayListUnmanaged with the `items` and `capacity` fields"},
{"lineNum":"  102","line":"        /// of this ArrayList. Empties this ArrayList."},
{"lineNum":"  103","line":"        pub fn moveToUnmanaged(self: *Self) ArrayListAlignedUnmanaged(T, alignment) {"},
{"lineNum":"  104","line":"            const allocator = self.allocator;"},
{"lineNum":"  105","line":"            const result = .{ .items = self.items, .capacity = self.capacity };"},
{"lineNum":"  106","line":"            self.* = init(allocator);"},
{"lineNum":"  107","line":"            return result;"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        /// The caller owns the returned memory. Empties this ArrayList,"},
{"lineNum":"  111","line":"        /// Its capacity is cleared, making deinit() safe but unnecessary to call."},
{"lineNum":"  112","line":"        pub fn toOwnedSlice(self: *Self) Allocator.Error!Slice {","class":"linePartCov","hits":"3","order":"813","possible_hits":"4",},
{"lineNum":"  113","line":"            const allocator = self.allocator;","class":"linePartCov","hits":"3","order":"814","possible_hits":"4",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"            const old_memory = self.allocatedSlice();","class":"linePartCov","hits":"3","order":"815","possible_hits":"4",},
{"lineNum":"  116","line":"            if (allocator.resize(old_memory, self.items.len)) {","class":"linePartCov","hits":"3","order":"816","possible_hits":"4",},
{"lineNum":"  117","line":"                const result = self.items;","class":"linePartCov","hits":"3","order":"817","possible_hits":"4",},
{"lineNum":"  118","line":"                self.* = init(allocator);","class":"linePartCov","hits":"3","order":"818","possible_hits":"4",},
{"lineNum":"  119","line":"                return result;","class":"linePartCov","hits":"3","order":"819","possible_hits":"4",},
{"lineNum":"  120","line":"            }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"            const new_memory = try allocator.alignedAlloc(T, alignment, self.items.len);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  123","line":"            @memcpy(new_memory, self.items);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  124","line":"            @memset(self.items, undefined);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  125","line":"            self.clearAndFree();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  126","line":"            return new_memory;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        /// The caller owns the returned memory. Empties this ArrayList."},
{"lineNum":"  130","line":"        pub fn toOwnedSliceSentinel(self: *Self, comptime sentinel: T) Allocator.Error!SentinelSlice(sentinel) {"},
{"lineNum":"  131","line":"            try self.ensureTotalCapacityPrecise(self.items.len + 1);"},
{"lineNum":"  132","line":"            self.appendAssumeCapacity(sentinel);"},
{"lineNum":"  133","line":"            const result = try self.toOwnedSlice();"},
{"lineNum":"  134","line":"            return result[0 .. result.len - 1 :sentinel];"},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        /// Creates a copy of this ArrayList, using the same allocator."},
{"lineNum":"  138","line":"        pub fn clone(self: Self) Allocator.Error!Self {"},
{"lineNum":"  139","line":"            var cloned = try Self.initCapacity(self.allocator, self.capacity);"},
{"lineNum":"  140","line":"            cloned.appendSliceAssumeCapacity(self.items);"},
{"lineNum":"  141","line":"            return cloned;"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        /// Insert `item` at index `n`. Moves `list[n .. list.len]` to higher indices to make room."},
{"lineNum":"  145","line":"        /// If `n` is equal to the length of the list this operation is equivalent to append."},
{"lineNum":"  146","line":"        /// This operation is O(N)."},
{"lineNum":"  147","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  148","line":"        pub fn insert(self: *Self, n: usize, item: T) Allocator.Error!void {"},
{"lineNum":"  149","line":"            try self.ensureUnusedCapacity(1);"},
{"lineNum":"  150","line":"            self.insertAssumeCapacity(n, item);"},
{"lineNum":"  151","line":"        }"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"        /// Insert `item` at index `n`. Moves `list[n .. list.len]` to higher indices to make room."},
{"lineNum":"  154","line":"        /// If `n` is equal to the length of the list this operation is equivalent to append."},
{"lineNum":"  155","line":"        /// This operation is O(N)."},
{"lineNum":"  156","line":"        /// Asserts that there is enough capacity for the new item."},
{"lineNum":"  157","line":"        pub fn insertAssumeCapacity(self: *Self, n: usize, item: T) void {"},
{"lineNum":"  158","line":"            assert(self.items.len < self.capacity);"},
{"lineNum":"  159","line":"            self.items.len += 1;"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"            mem.copyBackwards(T, self.items[n + 1 .. self.items.len], self.items[n .. self.items.len - 1]);"},
{"lineNum":"  162","line":"            self.items[n] = item;"},
{"lineNum":"  163","line":"        }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        /// Insert slice `items` at index `i` by moving `list[i .. list.len]` to make room."},
{"lineNum":"  166","line":"        /// This operation is O(N)."},
{"lineNum":"  167","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  168","line":"        pub fn insertSlice(self: *Self, i: usize, items: []const T) Allocator.Error!void {"},
{"lineNum":"  169","line":"            try self.ensureUnusedCapacity(items.len);"},
{"lineNum":"  170","line":"            self.items.len += items.len;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"            mem.copyBackwards(T, self.items[i + items.len .. self.items.len], self.items[i .. self.items.len - items.len]);"},
{"lineNum":"  173","line":"            @memcpy(self.items[i..][0..items.len], items);"},
{"lineNum":"  174","line":"        }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"        /// Replace range of elements `list[start..][0..len]` with `new_items`."},
{"lineNum":"  177","line":"        /// Grows list if `len < new_items.len`."},
{"lineNum":"  178","line":"        /// Shrinks list if `len > new_items.len`."},
{"lineNum":"  179","line":"        /// Invalidates pointers if this ArrayList is resized."},
{"lineNum":"  180","line":"        pub fn replaceRange(self: *Self, start: usize, len: usize, new_items: []const T) Allocator.Error!void {"},
{"lineNum":"  181","line":"            const after_range = start + len;"},
{"lineNum":"  182","line":"            const range = self.items[start..after_range];"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"            if (range.len == new_items.len)"},
{"lineNum":"  185","line":"                @memcpy(range[0..new_items.len], new_items)"},
{"lineNum":"  186","line":"            else if (range.len < new_items.len) {"},
{"lineNum":"  187","line":"                const first = new_items[0..range.len];"},
{"lineNum":"  188","line":"                const rest = new_items[range.len..];"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"                @memcpy(range[0..first.len], first);"},
{"lineNum":"  191","line":"                try self.insertSlice(after_range, rest);"},
{"lineNum":"  192","line":"            } else {"},
{"lineNum":"  193","line":"                @memcpy(range[0..new_items.len], new_items);"},
{"lineNum":"  194","line":"                const after_subrange = start + new_items.len;"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"                for (self.items[after_range..], 0..) |item, i| {"},
{"lineNum":"  197","line":"                    self.items[after_subrange..][i] = item;"},
{"lineNum":"  198","line":"                }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"                self.items.len -= len - new_items.len;"},
{"lineNum":"  201","line":"            }"},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        /// Extend the list by 1 element. Allocates more memory as necessary."},
{"lineNum":"  205","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  206","line":"        pub fn append(self: *Self, item: T) Allocator.Error!void {","class":"linePartCov","hits":"5","order":"275","possible_hits":"9",},
{"lineNum":"  207","line":"            const new_item_ptr = try self.addOne();","class":"linePartCov","hits":"5","order":"276","possible_hits":"9",},
{"lineNum":"  208","line":"            new_item_ptr.* = item;","class":"linePartCov","hits":"5","order":"291","possible_hits":"9",},
{"lineNum":"  209","line":"        }"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        /// Extend the list by 1 element, but assert `self.capacity`"},
{"lineNum":"  212","line":"        /// is sufficient to hold an additional item. **Does not**"},
{"lineNum":"  213","line":"        /// invalidate pointers."},
{"lineNum":"  214","line":"        pub fn appendAssumeCapacity(self: *Self, item: T) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"            const new_item_ptr = self.addOneAssumeCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"            new_item_ptr.* = item;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        /// Remove the element at index `i`, shift elements after index"},
{"lineNum":"  220","line":"        /// `i` forward, and return the removed element."},
{"lineNum":"  221","line":"        /// Asserts the array has at least one item."},
{"lineNum":"  222","line":"        /// Invalidates pointers to end of list."},
{"lineNum":"  223","line":"        /// This operation is O(N)."},
{"lineNum":"  224","line":"        /// This preserves item order. Use `swapRemove` if order preservation is not important."},
{"lineNum":"  225","line":"        pub fn orderedRemove(self: *Self, i: usize) T {"},
{"lineNum":"  226","line":"            const newlen = self.items.len - 1;"},
{"lineNum":"  227","line":"            if (newlen == i) return self.pop();"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"            const old_item = self.items[i];"},
{"lineNum":"  230","line":"            for (self.items[i..newlen], 0..) |*b, j| b.* = self.items[i + 1 + j];"},
{"lineNum":"  231","line":"            self.items[newlen] = undefined;"},
{"lineNum":"  232","line":"            self.items.len = newlen;"},
{"lineNum":"  233","line":"            return old_item;"},
{"lineNum":"  234","line":"        }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        /// Removes the element at the specified index and returns it."},
{"lineNum":"  237","line":"        /// The empty slot is filled from the end of the list."},
{"lineNum":"  238","line":"        /// This operation is O(1)."},
{"lineNum":"  239","line":"        /// This may not preserve item order. Use `orderedRemove` if you need to preserve order."},
{"lineNum":"  240","line":"        pub fn swapRemove(self: *Self, i: usize) T {"},
{"lineNum":"  241","line":"            if (self.items.len - 1 == i) return self.pop();"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"            const old_item = self.items[i];"},
{"lineNum":"  244","line":"            self.items[i] = self.pop();"},
{"lineNum":"  245","line":"            return old_item;"},
{"lineNum":"  246","line":"        }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        /// Append the slice of items to the list. Allocates more"},
{"lineNum":"  249","line":"        /// memory as necessary."},
{"lineNum":"  250","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  251","line":"        pub fn appendSlice(self: *Self, items: []const T) Allocator.Error!void {","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"  252","line":"            try self.ensureUnusedCapacity(items.len);","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"  253","line":"            self.appendSliceAssumeCapacity(items);","class":"lineCov","hits":"1","order":"267","possible_hits":"1",},
{"lineNum":"  254","line":"        }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"        /// Append the slice of items to the list, asserting the capacity is already"},
{"lineNum":"  257","line":"        /// enough to store the new items. **Does not** invalidate pointers."},
{"lineNum":"  258","line":"        pub fn appendSliceAssumeCapacity(self: *Self, items: []const T) void {","class":"lineCov","hits":"1","order":"268","possible_hits":"1",},
{"lineNum":"  259","line":"            const old_len = self.items.len;","class":"lineCov","hits":"1","order":"269","possible_hits":"1",},
{"lineNum":"  260","line":"            const new_len = old_len + items.len;","class":"lineCov","hits":"1","order":"270","possible_hits":"1",},
{"lineNum":"  261","line":"            assert(new_len <= self.capacity);","class":"lineCov","hits":"1","order":"271","possible_hits":"1",},
{"lineNum":"  262","line":"            self.items.len = new_len;","class":"lineCov","hits":"1","order":"272","possible_hits":"1",},
{"lineNum":"  263","line":"            @memcpy(self.items[old_len..][0..items.len], items);","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":"  264","line":"        }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        /// Append an unaligned slice of items to the list. Allocates more"},
{"lineNum":"  267","line":"        /// memory as necessary. Only call this function if calling"},
{"lineNum":"  268","line":"        /// `appendSlice` instead would be a compile error."},
{"lineNum":"  269","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  270","line":"        pub fn appendUnalignedSlice(self: *Self, items: []align(1) const T) Allocator.Error!void {"},
{"lineNum":"  271","line":"            try self.ensureUnusedCapacity(items.len);"},
{"lineNum":"  272","line":"            self.appendUnalignedSliceAssumeCapacity(items);"},
{"lineNum":"  273","line":"        }"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"        /// Append the slice of items to the list, asserting the capacity is already"},
{"lineNum":"  276","line":"        /// enough to store the new items. **Does not** invalidate pointers."},
{"lineNum":"  277","line":"        /// Only call this function if calling `appendSliceAssumeCapacity` instead"},
{"lineNum":"  278","line":"        /// would be a compile error."},
{"lineNum":"  279","line":"        pub fn appendUnalignedSliceAssumeCapacity(self: *Self, items: []align(1) const T) void {"},
{"lineNum":"  280","line":"            const old_len = self.items.len;"},
{"lineNum":"  281","line":"            const new_len = old_len + items.len;"},
{"lineNum":"  282","line":"            assert(new_len <= self.capacity);"},
{"lineNum":"  283","line":"            self.items.len = new_len;"},
{"lineNum":"  284","line":"            @memcpy(self.items[old_len..][0..items.len], items);"},
{"lineNum":"  285","line":"        }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"        pub const Writer = if (T != u8)"},
{"lineNum":"  288","line":"            @compileError(\"The Writer interface is only defined for ArrayList(u8) \" ++"},
{"lineNum":"  289","line":"                \"but the given type is ArrayList(\" ++ @typeName(T) ++ \")\")"},
{"lineNum":"  290","line":"        else"},
{"lineNum":"  291","line":"            std.io.Writer(*Self, error{OutOfMemory}, appendWrite);"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        /// Initializes a Writer which will append to the list."},
{"lineNum":"  294","line":"        pub fn writer(self: *Self) Writer {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"            return .{ .context = self };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"        }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"        /// Same as `append` except it returns the number of bytes written, which is always the same"},
{"lineNum":"  299","line":"        /// as `m.len`. The purpose of this function existing is to match `std.io.Writer` API."},
{"lineNum":"  300","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  301","line":"        fn appendWrite(self: *Self, m: []const u8) Allocator.Error!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"            try self.appendSlice(m);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"            return m.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"        }"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        /// Append a value to the list `n` times."},
{"lineNum":"  307","line":"        /// Allocates more memory as necessary."},
{"lineNum":"  308","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  309","line":"        /// The function is inline so that a comptime-known `value` parameter will"},
{"lineNum":"  310","line":"        /// have a more optimal memset codegen in case it has a repeated byte pattern."},
{"lineNum":"  311","line":"        pub inline fn appendNTimes(self: *Self, value: T, n: usize) Allocator.Error!void {"},
{"lineNum":"  312","line":"            const old_len = self.items.len;"},
{"lineNum":"  313","line":"            try self.resize(self.items.len + n);"},
{"lineNum":"  314","line":"            @memset(self.items[old_len..self.items.len], value);"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"        /// Append a value to the list `n` times."},
{"lineNum":"  318","line":"        /// Asserts the capacity is enough. **Does not** invalidate pointers."},
{"lineNum":"  319","line":"        /// The function is inline so that a comptime-known `value` parameter will"},
{"lineNum":"  320","line":"        /// have a more optimal memset codegen in case it has a repeated byte pattern."},
{"lineNum":"  321","line":"        pub inline fn appendNTimesAssumeCapacity(self: *Self, value: T, n: usize) void {"},
{"lineNum":"  322","line":"            const new_len = self.items.len + n;"},
{"lineNum":"  323","line":"            assert(new_len <= self.capacity);"},
{"lineNum":"  324","line":"            @memset(self.items.ptr[self.items.len..new_len], value);"},
{"lineNum":"  325","line":"            self.items.len = new_len;"},
{"lineNum":"  326","line":"        }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"        /// Adjust the list\'s length to `new_len`."},
{"lineNum":"  329","line":"        /// Does not initialize added items if any."},
{"lineNum":"  330","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  331","line":"        pub fn resize(self: *Self, new_len: usize) Allocator.Error!void {"},
{"lineNum":"  332","line":"            try self.ensureTotalCapacity(new_len);"},
{"lineNum":"  333","line":"            self.items.len = new_len;"},
{"lineNum":"  334","line":"        }"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"        /// Reduce allocated capacity to `new_len`."},
{"lineNum":"  337","line":"        /// May invalidate element pointers."},
{"lineNum":"  338","line":"        pub fn shrinkAndFree(self: *Self, new_len: usize) void {"},
{"lineNum":"  339","line":"            var unmanaged = self.moveToUnmanaged();"},
{"lineNum":"  340","line":"            unmanaged.shrinkAndFree(self.allocator, new_len);"},
{"lineNum":"  341","line":"            self.* = unmanaged.toManaged(self.allocator);"},
{"lineNum":"  342","line":"        }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"        /// Reduce length to `new_len`."},
{"lineNum":"  345","line":"        /// Invalidates pointers for the elements `items[new_len..]`."},
{"lineNum":"  346","line":"        pub fn shrinkRetainingCapacity(self: *Self, new_len: usize) void {"},
{"lineNum":"  347","line":"            assert(new_len <= self.items.len);"},
{"lineNum":"  348","line":"            self.items.len = new_len;"},
{"lineNum":"  349","line":"        }"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"        /// Invalidates all element pointers."},
{"lineNum":"  352","line":"        pub fn clearRetainingCapacity(self: *Self) void {"},
{"lineNum":"  353","line":"            self.items.len = 0;"},
{"lineNum":"  354","line":"        }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"        /// Invalidates all element pointers."},
{"lineNum":"  357","line":"        pub fn clearAndFree(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  358","line":"            self.allocator.free(self.allocatedSlice());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  359","line":"            self.items.len = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  360","line":"            self.capacity = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  361","line":"        }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"        /// Modify the array so that it can hold at least `new_capacity` items."},
{"lineNum":"  364","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  365","line":"        pub fn ensureTotalCapacity(self: *Self, new_capacity: usize) Allocator.Error!void {","class":"linePartCov","hits":"6","order":"202","possible_hits":"10",},
{"lineNum":"  366","line":"            if (@sizeOf(T) == 0) {"},
{"lineNum":"  367","line":"                self.capacity = math.maxInt(usize);"},
{"lineNum":"  368","line":"                return;"},
{"lineNum":"  369","line":"            }"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"            if (self.capacity >= new_capacity) return;","class":"linePartCov","hits":"11","order":"203","possible_hits":"20",},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"            var better_capacity = self.capacity;","class":"linePartCov","hits":"6","order":"204","possible_hits":"10",},
{"lineNum":"  374","line":"            while (true) {"},
{"lineNum":"  375","line":"                better_capacity +|= better_capacity / 2 + 8;","class":"linePartCov","hits":"6","order":"205","possible_hits":"10",},
{"lineNum":"  376","line":"                if (better_capacity >= new_capacity) break;","class":"linePartCov","hits":"6","order":"206","possible_hits":"10",},
{"lineNum":"  377","line":"            }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"            return self.ensureTotalCapacityPrecise(better_capacity);","class":"linePartCov","hits":"12","order":"207","possible_hits":"20",},
{"lineNum":"  380","line":"        }"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"        /// Modify the array so that it can hold `new_capacity` items."},
{"lineNum":"  383","line":"        /// Like `ensureTotalCapacity`, but the resulting capacity is guaranteed"},
{"lineNum":"  384","line":"        /// to be equal to `new_capacity`."},
{"lineNum":"  385","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  386","line":"        pub fn ensureTotalCapacityPrecise(self: *Self, new_capacity: usize) Allocator.Error!void {","class":"linePartCov","hits":"6","order":"208","possible_hits":"10",},
{"lineNum":"  387","line":"            if (@sizeOf(T) == 0) {"},
{"lineNum":"  388","line":"                self.capacity = math.maxInt(usize);"},
{"lineNum":"  389","line":"                return;"},
{"lineNum":"  390","line":"            }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"            if (self.capacity >= new_capacity) return;","class":"linePartCov","hits":"6","order":"209","possible_hits":"20",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"            // Here we avoid copying allocated but unused bytes by"},
{"lineNum":"  395","line":"            // attempting a resize in place, and falling back to allocating"},
{"lineNum":"  396","line":"            // a new buffer and doing our own copy. With a realloc() call,"},
{"lineNum":"  397","line":"            // the allocator implementation would pointlessly copy our"},
{"lineNum":"  398","line":"            // extra capacity."},
{"lineNum":"  399","line":"            const old_memory = self.allocatedSlice();","class":"linePartCov","hits":"6","order":"210","possible_hits":"10",},
{"lineNum":"  400","line":"            if (self.allocator.resize(old_memory, new_capacity)) {","class":"linePartCov","hits":"6","order":"213","possible_hits":"10",},
{"lineNum":"  401","line":"                self.capacity = new_capacity;","class":"linePartCov","hits":"4","order":"809","possible_hits":"10",},
{"lineNum":"  402","line":"            } else {"},
{"lineNum":"  403","line":"                const new_memory = try self.allocator.alignedAlloc(T, alignment, new_capacity);","class":"linePartCov","hits":"6","order":"218","possible_hits":"10",},
{"lineNum":"  404","line":"                @memcpy(new_memory[0..self.items.len], self.items);","class":"linePartCov","hits":"12","order":"256","possible_hits":"20",},
{"lineNum":"  405","line":"                self.allocator.free(old_memory);","class":"linePartCov","hits":"6","order":"257","possible_hits":"10",},
{"lineNum":"  406","line":"                self.items.ptr = new_memory.ptr;","class":"linePartCov","hits":"6","order":"265","possible_hits":"10",},
{"lineNum":"  407","line":"                self.capacity = new_memory.len;","class":"linePartCov","hits":"12","order":"266","possible_hits":"20",},
{"lineNum":"  408","line":"            }"},
{"lineNum":"  409","line":"        }"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"        /// Modify the array so that it can hold at least `additional_count` **more** items."},
{"lineNum":"  412","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  413","line":"        pub fn ensureUnusedCapacity(self: *Self, additional_count: usize) Allocator.Error!void {","class":"linePartCov","hits":"1","order":"200","possible_hits":"2",},
{"lineNum":"  414","line":"            return self.ensureTotalCapacity(self.items.len + additional_count);","class":"linePartCov","hits":"1","order":"201","possible_hits":"2",},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"        /// Increases the array\'s length to match the full capacity that is already allocated."},
{"lineNum":"  418","line":"        /// The new elements have `undefined` values. **Does not** invalidate pointers."},
{"lineNum":"  419","line":"        pub fn expandToCapacity(self: *Self) void {"},
{"lineNum":"  420","line":"            self.items.len = self.capacity;"},
{"lineNum":"  421","line":"        }"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"        /// Increase length by 1, returning pointer to the new item."},
{"lineNum":"  424","line":"        /// The returned pointer becomes invalid when the list resized."},
{"lineNum":"  425","line":"        pub fn addOne(self: *Self) Allocator.Error!*T {","class":"linePartCov","hits":"5","order":"277","possible_hits":"9",},
{"lineNum":"  426","line":"            try self.ensureTotalCapacity(self.items.len + 1);","class":"linePartCov","hits":"5","order":"278","possible_hits":"9",},
{"lineNum":"  427","line":"            return self.addOneAssumeCapacity();","class":"linePartCov","hits":"5","order":"286","possible_hits":"9",},
{"lineNum":"  428","line":"        }"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"        /// Increase length by 1, returning pointer to the new item."},
{"lineNum":"  431","line":"        /// Asserts that there is already space for the new item without allocating more."},
{"lineNum":"  432","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  433","line":"        /// **Does not** invalidate element pointers."},
{"lineNum":"  434","line":"        pub fn addOneAssumeCapacity(self: *Self) *T {","class":"linePartCov","hits":"5","order":"287","possible_hits":"9",},
{"lineNum":"  435","line":"            assert(self.items.len < self.capacity);","class":"linePartCov","hits":"5","order":"288","possible_hits":"9",},
{"lineNum":"  436","line":"            self.items.len += 1;","class":"linePartCov","hits":"5","order":"289","possible_hits":"9",},
{"lineNum":"  437","line":"            return &self.items[self.items.len - 1];","class":"linePartCov","hits":"5","order":"290","possible_hits":"9",},
{"lineNum":"  438","line":"        }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  441","line":"        /// The return value is an array pointing to the newly allocated elements."},
{"lineNum":"  442","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  443","line":"        /// Resizes list if `self.capacity` is not large enough."},
{"lineNum":"  444","line":"        pub fn addManyAsArray(self: *Self, comptime n: usize) Allocator.Error!*[n]T {"},
{"lineNum":"  445","line":"            const prev_len = self.items.len;"},
{"lineNum":"  446","line":"            try self.resize(self.items.len + n);"},
{"lineNum":"  447","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  448","line":"        }"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  451","line":"        /// The return value is an array pointing to the newly allocated elements."},
{"lineNum":"  452","line":"        /// Asserts that there is already space for the new item without allocating more."},
{"lineNum":"  453","line":"        /// **Does not** invalidate element pointers."},
{"lineNum":"  454","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  455","line":"        pub fn addManyAsArrayAssumeCapacity(self: *Self, comptime n: usize) *[n]T {"},
{"lineNum":"  456","line":"            assert(self.items.len + n <= self.capacity);"},
{"lineNum":"  457","line":"            const prev_len = self.items.len;"},
{"lineNum":"  458","line":"            self.items.len += n;"},
{"lineNum":"  459","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  460","line":"        }"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  463","line":"        /// The return value is a slice pointing to the newly allocated elements."},
{"lineNum":"  464","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  465","line":"        /// Resizes list if `self.capacity` is not large enough."},
{"lineNum":"  466","line":"        pub fn addManyAsSlice(self: *Self, n: usize) Allocator.Error![]T {"},
{"lineNum":"  467","line":"            const prev_len = self.items.len;"},
{"lineNum":"  468","line":"            try self.resize(self.items.len + n);"},
{"lineNum":"  469","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  470","line":"        }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  473","line":"        /// The return value is a slice pointing to the newly allocated elements."},
{"lineNum":"  474","line":"        /// Asserts that there is already space for the new item without allocating more."},
{"lineNum":"  475","line":"        /// **Does not** invalidate element pointers."},
{"lineNum":"  476","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  477","line":"        pub fn addManyAsSliceAssumeCapacity(self: *Self, n: usize) []T {"},
{"lineNum":"  478","line":"            assert(self.items.len + n <= self.capacity);"},
{"lineNum":"  479","line":"            const prev_len = self.items.len;"},
{"lineNum":"  480","line":"            self.items.len += n;"},
{"lineNum":"  481","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  482","line":"        }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"        /// Remove and return the last element from the list."},
{"lineNum":"  485","line":"        /// Asserts the list has at least one item."},
{"lineNum":"  486","line":"        /// Invalidates pointers to the removed element."},
{"lineNum":"  487","line":"        pub fn pop(self: *Self) T {"},
{"lineNum":"  488","line":"            const val = self.items[self.items.len - 1];"},
{"lineNum":"  489","line":"            self.items.len -= 1;"},
{"lineNum":"  490","line":"            return val;"},
{"lineNum":"  491","line":"        }"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        /// Remove and return the last element from the list, or"},
{"lineNum":"  494","line":"        /// return `null` if list is empty."},
{"lineNum":"  495","line":"        /// Invalidates pointers to the removed element, if any."},
{"lineNum":"  496","line":"        pub fn popOrNull(self: *Self) ?T {"},
{"lineNum":"  497","line":"            if (self.items.len == 0) return null;"},
{"lineNum":"  498","line":"            return self.pop();"},
{"lineNum":"  499","line":"        }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"        /// Returns a slice of all the items plus the extra capacity, whose memory"},
{"lineNum":"  502","line":"        /// contents are `undefined`."},
{"lineNum":"  503","line":"        pub fn allocatedSlice(self: Self) Slice {","class":"linePartCov","hits":"6","order":"211","possible_hits":"10",},
{"lineNum":"  504","line":"            // `items.len` is the length, not the capacity."},
{"lineNum":"  505","line":"            return self.items.ptr[0..self.capacity];","class":"linePartCov","hits":"6","order":"212","possible_hits":"10",},
{"lineNum":"  506","line":"        }"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"        /// Returns a slice of only the extra capacity after items."},
{"lineNum":"  509","line":"        /// This can be useful for writing directly into an ArrayList."},
{"lineNum":"  510","line":"        /// Note that such an operation must be followed up with a direct"},
{"lineNum":"  511","line":"        /// modification of `self.items.len`."},
{"lineNum":"  512","line":"        pub fn unusedCapacitySlice(self: Self) Slice {"},
{"lineNum":"  513","line":"            return self.allocatedSlice()[self.items.len..];"},
{"lineNum":"  514","line":"        }"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"        /// Return the last element from the list."},
{"lineNum":"  517","line":"        /// Asserts the list has at least one item."},
{"lineNum":"  518","line":"        pub fn getLast(self: Self) T {"},
{"lineNum":"  519","line":"            const val = self.items[self.items.len - 1];"},
{"lineNum":"  520","line":"            return val;"},
{"lineNum":"  521","line":"        }"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"        /// Return the last element from the list, or"},
{"lineNum":"  524","line":"        /// return `null` if list is empty."},
{"lineNum":"  525","line":"        pub fn getLastOrNull(self: Self) ?T {"},
{"lineNum":"  526","line":"            if (self.items.len == 0) return null;"},
{"lineNum":"  527","line":"            return self.getLast();"},
{"lineNum":"  528","line":"        }"},
{"lineNum":"  529","line":"    };"},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"/// An ArrayList, but the allocator is passed as a parameter to the relevant functions"},
{"lineNum":"  533","line":"/// rather than stored in the struct itself. The same allocator **must** be used throughout"},
{"lineNum":"  534","line":"/// the entire lifetime of an ArrayListUnmanaged. Initialize directly or with"},
{"lineNum":"  535","line":"/// `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"  536","line":"pub fn ArrayListUnmanaged(comptime T: type) type {"},
{"lineNum":"  537","line":"    return ArrayListAlignedUnmanaged(T, null);"},
{"lineNum":"  538","line":"}"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"/// An ArrayListAligned, but the allocator is passed as a parameter to the relevant"},
{"lineNum":"  541","line":"/// functions rather than stored  in the struct itself. The same allocator **must**"},
{"lineNum":"  542","line":"/// be used throughout the entire lifetime of an ArrayListAlignedUnmanaged."},
{"lineNum":"  543","line":"/// Initialize directly or with `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"  544","line":"pub fn ArrayListAlignedUnmanaged(comptime T: type, comptime alignment: ?u29) type {"},
{"lineNum":"  545","line":"    if (alignment) |a| {"},
{"lineNum":"  546","line":"        if (a == @alignOf(T)) {"},
{"lineNum":"  547","line":"            return ArrayListAlignedUnmanaged(T, null);"},
{"lineNum":"  548","line":"        }"},
{"lineNum":"  549","line":"    }"},
{"lineNum":"  550","line":"    return struct {"},
{"lineNum":"  551","line":"        const Self = @This();"},
{"lineNum":"  552","line":"        /// Contents of the list. Pointers to elements in this slice are"},
{"lineNum":"  553","line":"        /// **invalid after resizing operations** on the ArrayList unless the"},
{"lineNum":"  554","line":"        /// operation explicitly either: (1) states otherwise or (2) lists the"},
{"lineNum":"  555","line":"        /// invalidated pointers."},
{"lineNum":"  556","line":"        ///"},
{"lineNum":"  557","line":"        /// The allocator used determines how element pointers are"},
{"lineNum":"  558","line":"        /// invalidated, so the behavior may vary between lists. To avoid"},
{"lineNum":"  559","line":"        /// illegal behavior, take into account the above paragraph plus the"},
{"lineNum":"  560","line":"        /// explicit statements given in each method."},
{"lineNum":"  561","line":"        items: Slice = &[_]T{},"},
{"lineNum":"  562","line":"        /// How many T values this list can hold without allocating"},
{"lineNum":"  563","line":"        /// additional memory."},
{"lineNum":"  564","line":"        capacity: usize = 0,"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"        pub const Slice = if (alignment) |a| ([]align(a) T) else []T;"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"        pub fn SentinelSlice(comptime s: T) type {"},
{"lineNum":"  569","line":"            return if (alignment) |a| ([:s]align(a) T) else [:s]T;"},
{"lineNum":"  570","line":"        }"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"        /// Initialize with capacity to hold `num` elements."},
{"lineNum":"  573","line":"        /// The resulting capacity will equal `num` exactly."},
{"lineNum":"  574","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"  575","line":"        pub fn initCapacity(allocator: Allocator, num: usize) Allocator.Error!Self {"},
{"lineNum":"  576","line":"            var self = Self{};"},
{"lineNum":"  577","line":"            try self.ensureTotalCapacityPrecise(allocator, num);"},
{"lineNum":"  578","line":"            return self;"},
{"lineNum":"  579","line":"        }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"        /// Release all allocated memory."},
{"lineNum":"  582","line":"        pub fn deinit(self: *Self, allocator: Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  583","line":"            allocator.free(self.allocatedSlice());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  584","line":"            self.* = undefined;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  585","line":"        }"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"        /// Convert this list into an analogous memory-managed one."},
{"lineNum":"  588","line":"        /// The returned list has ownership of the underlying memory."},
{"lineNum":"  589","line":"        pub fn toManaged(self: *Self, allocator: Allocator) ArrayListAligned(T, alignment) {"},
{"lineNum":"  590","line":"            return .{ .items = self.items, .capacity = self.capacity, .allocator = allocator };"},
{"lineNum":"  591","line":"        }"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"        /// ArrayListUnmanaged takes ownership of the passed in slice. The slice must have been"},
{"lineNum":"  594","line":"        /// allocated with `allocator`."},
{"lineNum":"  595","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"  596","line":"        pub fn fromOwnedSlice(slice: Slice) Self {"},
{"lineNum":"  597","line":"            return Self{"},
{"lineNum":"  598","line":"                .items = slice,"},
{"lineNum":"  599","line":"                .capacity = slice.len,"},
{"lineNum":"  600","line":"            };"},
{"lineNum":"  601","line":"        }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"        /// ArrayListUnmanaged takes ownership of the passed in slice. The slice must have been"},
{"lineNum":"  604","line":"        /// allocated with `allocator`."},
{"lineNum":"  605","line":"        /// Deinitialize with `deinit` or use `toOwnedSlice`."},
{"lineNum":"  606","line":"        pub fn fromOwnedSliceSentinel(comptime sentinel: T, slice: [:sentinel]T) Self {"},
{"lineNum":"  607","line":"            return Self{"},
{"lineNum":"  608","line":"                .items = slice,"},
{"lineNum":"  609","line":"                .capacity = slice.len + 1,"},
{"lineNum":"  610","line":"            };"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"        /// The caller owns the returned memory. Empties this ArrayList."},
{"lineNum":"  614","line":"        /// Its capacity is cleared, making deinit() safe but unnecessary to call."},
{"lineNum":"  615","line":"        pub fn toOwnedSlice(self: *Self, allocator: Allocator) Allocator.Error!Slice {"},
{"lineNum":"  616","line":"            const old_memory = self.allocatedSlice();"},
{"lineNum":"  617","line":"            if (allocator.resize(old_memory, self.items.len)) {"},
{"lineNum":"  618","line":"                const result = self.items;"},
{"lineNum":"  619","line":"                self.* = .{};"},
{"lineNum":"  620","line":"                return result;"},
{"lineNum":"  621","line":"            }"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"            const new_memory = try allocator.alignedAlloc(T, alignment, self.items.len);"},
{"lineNum":"  624","line":"            @memcpy(new_memory, self.items);"},
{"lineNum":"  625","line":"            @memset(self.items, undefined);"},
{"lineNum":"  626","line":"            self.clearAndFree(allocator);"},
{"lineNum":"  627","line":"            return new_memory;"},
{"lineNum":"  628","line":"        }"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"        /// The caller owns the returned memory. ArrayList becomes empty."},
{"lineNum":"  631","line":"        pub fn toOwnedSliceSentinel(self: *Self, allocator: Allocator, comptime sentinel: T) Allocator.Error!SentinelSlice(sentinel) {"},
{"lineNum":"  632","line":"            try self.ensureTotalCapacityPrecise(allocator, self.items.len + 1);"},
{"lineNum":"  633","line":"            self.appendAssumeCapacity(sentinel);"},
{"lineNum":"  634","line":"            const result = try self.toOwnedSlice(allocator);"},
{"lineNum":"  635","line":"            return result[0 .. result.len - 1 :sentinel];"},
{"lineNum":"  636","line":"        }"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"        /// Creates a copy of this ArrayList."},
{"lineNum":"  639","line":"        pub fn clone(self: Self, allocator: Allocator) Allocator.Error!Self {"},
{"lineNum":"  640","line":"            var cloned = try Self.initCapacity(allocator, self.capacity);"},
{"lineNum":"  641","line":"            cloned.appendSliceAssumeCapacity(self.items);"},
{"lineNum":"  642","line":"            return cloned;"},
{"lineNum":"  643","line":"        }"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"        /// Insert `item` at index `n`. Moves `list[n .. list.len]` to higher indices to make room."},
{"lineNum":"  646","line":"        /// If `n` is equal to the length of the list this operation is equivalent to append."},
{"lineNum":"  647","line":"        /// This operation is O(N)."},
{"lineNum":"  648","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  649","line":"        pub fn insert(self: *Self, allocator: Allocator, n: usize, item: T) Allocator.Error!void {"},
{"lineNum":"  650","line":"            try self.ensureUnusedCapacity(allocator, 1);"},
{"lineNum":"  651","line":"            self.insertAssumeCapacity(n, item);"},
{"lineNum":"  652","line":"        }"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"        /// Insert `item` at index `n`. Moves `list[n .. list.len]` to higher indices to make room."},
{"lineNum":"  655","line":"        /// If `n` is equal to the length of the list this operation is equivalent to append."},
{"lineNum":"  656","line":"        /// This operation is O(N)."},
{"lineNum":"  657","line":"        /// Asserts that there is enough capacity for the new item."},
{"lineNum":"  658","line":"        pub fn insertAssumeCapacity(self: *Self, n: usize, item: T) void {"},
{"lineNum":"  659","line":"            assert(self.items.len < self.capacity);"},
{"lineNum":"  660","line":"            self.items.len += 1;"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"            mem.copyBackwards(T, self.items[n + 1 .. self.items.len], self.items[n .. self.items.len - 1]);"},
{"lineNum":"  663","line":"            self.items[n] = item;"},
{"lineNum":"  664","line":"        }"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"        /// Insert slice `items` at index `i`. Moves `list[i .. list.len]` to"},
{"lineNum":"  667","line":"        /// higher indicices make room."},
{"lineNum":"  668","line":"        /// This operation is O(N)."},
{"lineNum":"  669","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  670","line":"        pub fn insertSlice(self: *Self, allocator: Allocator, i: usize, items: []const T) Allocator.Error!void {"},
{"lineNum":"  671","line":"            try self.ensureUnusedCapacity(allocator, items.len);"},
{"lineNum":"  672","line":"            self.items.len += items.len;"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"            mem.copyBackwards(T, self.items[i + items.len .. self.items.len], self.items[i .. self.items.len - items.len]);"},
{"lineNum":"  675","line":"            @memcpy(self.items[i..][0..items.len], items);"},
{"lineNum":"  676","line":"        }"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"        /// Replace range of elements `list[start..][0..len]` with `new_items`"},
{"lineNum":"  679","line":"        /// Grows list if `len < new_items.len`."},
{"lineNum":"  680","line":"        /// Shrinks list if `len > new_items.len`"},
{"lineNum":"  681","line":"        /// Invalidates pointers if this ArrayList is resized."},
{"lineNum":"  682","line":"        pub fn replaceRange(self: *Self, allocator: Allocator, start: usize, len: usize, new_items: []const T) Allocator.Error!void {"},
{"lineNum":"  683","line":"            var managed = self.toManaged(allocator);"},
{"lineNum":"  684","line":"            try managed.replaceRange(start, len, new_items);"},
{"lineNum":"  685","line":"            self.* = managed.moveToUnmanaged();"},
{"lineNum":"  686","line":"        }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"        /// Extend the list by 1 element. Allocates more memory as necessary."},
{"lineNum":"  689","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  690","line":"        pub fn append(self: *Self, allocator: Allocator, item: T) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  691","line":"            const new_item_ptr = try self.addOne(allocator);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  692","line":"            new_item_ptr.* = item;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  693","line":"        }"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"        /// Extend the list by 1 element, but asserting `self.capacity`"},
{"lineNum":"  696","line":"        /// is sufficient to hold an additional item."},
{"lineNum":"  697","line":"        pub fn appendAssumeCapacity(self: *Self, item: T) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  698","line":"            const new_item_ptr = self.addOneAssumeCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  699","line":"            new_item_ptr.* = item;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  700","line":"        }"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"        /// Remove the element at index `i` from the list and return its value."},
{"lineNum":"  703","line":"        /// Asserts the array has at least one item. Invalidates pointers to"},
{"lineNum":"  704","line":"        /// last element."},
{"lineNum":"  705","line":"        /// This operation is O(N)."},
{"lineNum":"  706","line":"        pub fn orderedRemove(self: *Self, i: usize) T {"},
{"lineNum":"  707","line":"            const newlen = self.items.len - 1;"},
{"lineNum":"  708","line":"            if (newlen == i) return self.pop();"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"            const old_item = self.items[i];"},
{"lineNum":"  711","line":"            for (self.items[i..newlen], 0..) |*b, j| b.* = self.items[i + 1 + j];"},
{"lineNum":"  712","line":"            self.items[newlen] = undefined;"},
{"lineNum":"  713","line":"            self.items.len = newlen;"},
{"lineNum":"  714","line":"            return old_item;"},
{"lineNum":"  715","line":"        }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"        /// Removes the element at the specified index and returns it."},
{"lineNum":"  718","line":"        /// The empty slot is filled from the end of the list."},
{"lineNum":"  719","line":"        /// Invalidates pointers to last element."},
{"lineNum":"  720","line":"        /// This operation is O(1)."},
{"lineNum":"  721","line":"        pub fn swapRemove(self: *Self, i: usize) T {"},
{"lineNum":"  722","line":"            if (self.items.len - 1 == i) return self.pop();"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"            const old_item = self.items[i];"},
{"lineNum":"  725","line":"            self.items[i] = self.pop();"},
{"lineNum":"  726","line":"            return old_item;"},
{"lineNum":"  727","line":"        }"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"        /// Append the slice of items to the list. Allocates more"},
{"lineNum":"  730","line":"        /// memory as necessary."},
{"lineNum":"  731","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  732","line":"        pub fn appendSlice(self: *Self, allocator: Allocator, items: []const T) Allocator.Error!void {"},
{"lineNum":"  733","line":"            try self.ensureUnusedCapacity(allocator, items.len);"},
{"lineNum":"  734","line":"            self.appendSliceAssumeCapacity(items);"},
{"lineNum":"  735","line":"        }"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"        /// Append the slice of items to the list, asserting the capacity is enough"},
{"lineNum":"  738","line":"        /// to store the new items."},
{"lineNum":"  739","line":"        pub fn appendSliceAssumeCapacity(self: *Self, items: []const T) void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  740","line":"            const old_len = self.items.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  741","line":"            const new_len = old_len + items.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  742","line":"            assert(new_len <= self.capacity);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  743","line":"            self.items.len = new_len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  744","line":"            @memcpy(self.items[old_len..][0..items.len], items);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  745","line":"        }"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"        /// Append the slice of items to the list. Allocates more"},
{"lineNum":"  748","line":"        /// memory as necessary. Only call this function if a call to `appendSlice` instead would"},
{"lineNum":"  749","line":"        /// be a compile error."},
{"lineNum":"  750","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  751","line":"        pub fn appendUnalignedSlice(self: *Self, allocator: Allocator, items: []align(1) const T) Allocator.Error!void {"},
{"lineNum":"  752","line":"            try self.ensureUnusedCapacity(allocator, items.len);"},
{"lineNum":"  753","line":"            self.appendUnalignedSliceAssumeCapacity(items);"},
{"lineNum":"  754","line":"        }"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"        /// Append an unaligned slice of items to the list, asserting the capacity is enough"},
{"lineNum":"  757","line":"        /// to store the new items. Only call this function if a call to `appendSliceAssumeCapacity`"},
{"lineNum":"  758","line":"        /// instead would be a compile error."},
{"lineNum":"  759","line":"        pub fn appendUnalignedSliceAssumeCapacity(self: *Self, items: []align(1) const T) void {"},
{"lineNum":"  760","line":"            const old_len = self.items.len;"},
{"lineNum":"  761","line":"            const new_len = old_len + items.len;"},
{"lineNum":"  762","line":"            assert(new_len <= self.capacity);"},
{"lineNum":"  763","line":"            self.items.len = new_len;"},
{"lineNum":"  764","line":"            @memcpy(self.items[old_len..][0..items.len], items);"},
{"lineNum":"  765","line":"        }"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"        pub const WriterContext = struct {"},
{"lineNum":"  768","line":"            self: *Self,"},
{"lineNum":"  769","line":"            allocator: Allocator,"},
{"lineNum":"  770","line":"        };"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"        pub const Writer = if (T != u8)"},
{"lineNum":"  773","line":"            @compileError(\"The Writer interface is only defined for ArrayList(u8) \" ++"},
{"lineNum":"  774","line":"                \"but the given type is ArrayList(\" ++ @typeName(T) ++ \")\")"},
{"lineNum":"  775","line":"        else"},
{"lineNum":"  776","line":"            std.io.Writer(WriterContext, error{OutOfMemory}, appendWrite);"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"        /// Initializes a Writer which will append to the list."},
{"lineNum":"  779","line":"        pub fn writer(self: *Self, allocator: Allocator) Writer {"},
{"lineNum":"  780","line":"            return .{ .context = .{ .self = self, .allocator = allocator } };"},
{"lineNum":"  781","line":"        }"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"        /// Same as `append` except it returns the number of bytes written, which is always the same"},
{"lineNum":"  784","line":"        /// as `m.len`. The purpose of this function existing is to match `std.io.Writer` API."},
{"lineNum":"  785","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  786","line":"        fn appendWrite(context: WriterContext, m: []const u8) Allocator.Error!usize {"},
{"lineNum":"  787","line":"            try context.self.appendSlice(context.allocator, m);"},
{"lineNum":"  788","line":"            return m.len;"},
{"lineNum":"  789","line":"        }"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"        /// Append a value to the list `n` times."},
{"lineNum":"  792","line":"        /// Allocates more memory as necessary."},
{"lineNum":"  793","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  794","line":"        /// The function is inline so that a comptime-known `value` parameter will"},
{"lineNum":"  795","line":"        /// have a more optimal memset codegen in case it has a repeated byte pattern."},
{"lineNum":"  796","line":"        pub inline fn appendNTimes(self: *Self, allocator: Allocator, value: T, n: usize) Allocator.Error!void {"},
{"lineNum":"  797","line":"            const old_len = self.items.len;"},
{"lineNum":"  798","line":"            try self.resize(allocator, self.items.len + n);"},
{"lineNum":"  799","line":"            @memset(self.items[old_len..self.items.len], value);"},
{"lineNum":"  800","line":"        }"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"        /// Append a value to the list `n` times."},
{"lineNum":"  803","line":"        /// **Does not** invalidate pointers."},
{"lineNum":"  804","line":"        /// Asserts the capacity is enough."},
{"lineNum":"  805","line":"        /// The function is inline so that a comptime-known `value` parameter will"},
{"lineNum":"  806","line":"        /// have a more optimal memset codegen in case it has a repeated byte pattern."},
{"lineNum":"  807","line":"        pub inline fn appendNTimesAssumeCapacity(self: *Self, value: T, n: usize) void {"},
{"lineNum":"  808","line":"            const new_len = self.items.len + n;"},
{"lineNum":"  809","line":"            assert(new_len <= self.capacity);"},
{"lineNum":"  810","line":"            @memset(self.items.ptr[self.items.len..new_len], value);"},
{"lineNum":"  811","line":"            self.items.len = new_len;"},
{"lineNum":"  812","line":"        }"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        /// Adjust the list\'s length to `new_len`."},
{"lineNum":"  815","line":"        /// Does not initialize added items, if any."},
{"lineNum":"  816","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  817","line":"        pub fn resize(self: *Self, allocator: Allocator, new_len: usize) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  818","line":"            try self.ensureTotalCapacity(allocator, new_len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  819","line":"            self.items.len = new_len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  820","line":"        }"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"        /// Reduce allocated capacity to `new_len`."},
{"lineNum":"  823","line":"        /// May invalidate element pointers."},
{"lineNum":"  824","line":"        pub fn shrinkAndFree(self: *Self, allocator: Allocator, new_len: usize) void {"},
{"lineNum":"  825","line":"            assert(new_len <= self.items.len);"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"            if (@sizeOf(T) == 0) {"},
{"lineNum":"  828","line":"                self.items.len = new_len;"},
{"lineNum":"  829","line":"                return;"},
{"lineNum":"  830","line":"            }"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"            const old_memory = self.allocatedSlice();"},
{"lineNum":"  833","line":"            if (allocator.resize(old_memory, new_len)) {"},
{"lineNum":"  834","line":"                self.capacity = new_len;"},
{"lineNum":"  835","line":"                self.items.len = new_len;"},
{"lineNum":"  836","line":"                return;"},
{"lineNum":"  837","line":"            }"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"            const new_memory = allocator.alignedAlloc(T, alignment, new_len) catch |e| switch (e) {"},
{"lineNum":"  840","line":"                error.OutOfMemory => {"},
{"lineNum":"  841","line":"                    // No problem, capacity is still correct then."},
{"lineNum":"  842","line":"                    self.items.len = new_len;"},
{"lineNum":"  843","line":"                    return;"},
{"lineNum":"  844","line":"                },"},
{"lineNum":"  845","line":"            };"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"            @memcpy(new_memory, self.items[0..new_len]);"},
{"lineNum":"  848","line":"            allocator.free(old_memory);"},
{"lineNum":"  849","line":"            self.items = new_memory;"},
{"lineNum":"  850","line":"            self.capacity = new_memory.len;"},
{"lineNum":"  851","line":"        }"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"        /// Reduce length to `new_len`."},
{"lineNum":"  854","line":"        /// Invalidates pointers to elements `items[new_len..]`."},
{"lineNum":"  855","line":"        /// Keeps capacity the same."},
{"lineNum":"  856","line":"        pub fn shrinkRetainingCapacity(self: *Self, new_len: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  857","line":"            assert(new_len <= self.items.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  858","line":"            self.items.len = new_len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  859","line":"        }"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"        /// Invalidates all element pointers."},
{"lineNum":"  862","line":"        pub fn clearRetainingCapacity(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  863","line":"            self.items.len = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  864","line":"        }"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"        /// Invalidates all element pointers."},
{"lineNum":"  867","line":"        pub fn clearAndFree(self: *Self, allocator: Allocator) void {"},
{"lineNum":"  868","line":"            allocator.free(self.allocatedSlice());"},
{"lineNum":"  869","line":"            self.items.len = 0;"},
{"lineNum":"  870","line":"            self.capacity = 0;"},
{"lineNum":"  871","line":"        }"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"        /// Modify the array so that it can hold at least `new_capacity` items."},
{"lineNum":"  874","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  875","line":"        pub fn ensureTotalCapacity(self: *Self, allocator: Allocator, new_capacity: usize) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  876","line":"            if (self.capacity >= new_capacity) return;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"            var better_capacity = self.capacity;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  879","line":"            while (true) {"},
{"lineNum":"  880","line":"                better_capacity +|= better_capacity / 2 + 8;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  881","line":"                if (better_capacity >= new_capacity) break;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  882","line":"            }"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"            return self.ensureTotalCapacityPrecise(allocator, better_capacity);","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  885","line":"        }"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"        /// Modify the array so that it can hold `new_capacity` items."},
{"lineNum":"  888","line":"        /// Like `ensureTotalCapacity`, but the resulting capacity is guaranteed"},
{"lineNum":"  889","line":"        /// to be equal to `new_capacity`."},
{"lineNum":"  890","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  891","line":"        pub fn ensureTotalCapacityPrecise(self: *Self, allocator: Allocator, new_capacity: usize) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  892","line":"            if (@sizeOf(T) == 0) {"},
{"lineNum":"  893","line":"                self.capacity = math.maxInt(usize);"},
{"lineNum":"  894","line":"                return;"},
{"lineNum":"  895","line":"            }"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"            if (self.capacity >= new_capacity) return;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"            // Here we avoid copying allocated but unused bytes by"},
{"lineNum":"  900","line":"            // attempting a resize in place, and falling back to allocating"},
{"lineNum":"  901","line":"            // a new buffer and doing our own copy. With a realloc() call,"},
{"lineNum":"  902","line":"            // the allocator implementation would pointlessly copy our"},
{"lineNum":"  903","line":"            // extra capacity."},
{"lineNum":"  904","line":"            const old_memory = self.allocatedSlice();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  905","line":"            if (allocator.resize(old_memory, new_capacity)) {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  906","line":"                self.capacity = new_capacity;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  907","line":"            } else {"},
{"lineNum":"  908","line":"                const new_memory = try allocator.alignedAlloc(T, alignment, new_capacity);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  909","line":"                @memcpy(new_memory[0..self.items.len], self.items);","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  910","line":"                allocator.free(old_memory);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  911","line":"                self.items.ptr = new_memory.ptr;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  912","line":"                self.capacity = new_memory.len;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  913","line":"            }"},
{"lineNum":"  914","line":"        }"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"        /// Modify the array so that it can hold at least `additional_count` **more** items."},
{"lineNum":"  917","line":"        /// Invalidates pointers if additional memory is needed."},
{"lineNum":"  918","line":"        pub fn ensureUnusedCapacity("},
{"lineNum":"  919","line":"            self: *Self,"},
{"lineNum":"  920","line":"            allocator: Allocator,"},
{"lineNum":"  921","line":"            additional_count: usize,"},
{"lineNum":"  922","line":"        ) Allocator.Error!void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  923","line":"            return self.ensureTotalCapacity(allocator, self.items.len + additional_count);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  924","line":"        }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"        /// Increases the array\'s length to match the full capacity that is already allocated."},
{"lineNum":"  927","line":"        /// The new elements have `undefined` values."},
{"lineNum":"  928","line":"        /// **Does not** invalidate pointers."},
{"lineNum":"  929","line":"        pub fn expandToCapacity(self: *Self) void {"},
{"lineNum":"  930","line":"            self.items.len = self.capacity;"},
{"lineNum":"  931","line":"        }"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"        /// Increase length by 1, returning pointer to the new item."},
{"lineNum":"  934","line":"        /// The returned pointer becomes invalid when the list resized."},
{"lineNum":"  935","line":"        pub fn addOne(self: *Self, allocator: Allocator) Allocator.Error!*T {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  936","line":"            const newlen = self.items.len + 1;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  937","line":"            try self.ensureTotalCapacity(allocator, newlen);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  938","line":"            return self.addOneAssumeCapacity();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  939","line":"        }"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"        /// Increase length by 1, returning pointer to the new item."},
{"lineNum":"  942","line":"        /// Asserts that there is already space for the new item without allocating more."},
{"lineNum":"  943","line":"        /// **Does not** invalidate pointers."},
{"lineNum":"  944","line":"        /// The returned pointer becomes invalid when the list resized."},
{"lineNum":"  945","line":"        pub fn addOneAssumeCapacity(self: *Self) *T {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  946","line":"            assert(self.items.len < self.capacity);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"            self.items.len += 1;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  949","line":"            return &self.items[self.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  950","line":"        }"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  953","line":"        /// The return value is an array pointing to the newly allocated elements."},
{"lineNum":"  954","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  955","line":"        pub fn addManyAsArray(self: *Self, allocator: Allocator, comptime n: usize) Allocator.Error!*[n]T {"},
{"lineNum":"  956","line":"            const prev_len = self.items.len;"},
{"lineNum":"  957","line":"            try self.resize(allocator, self.items.len + n);"},
{"lineNum":"  958","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  959","line":"        }"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  962","line":"        /// The return value is an array pointing to the newly allocated elements."},
{"lineNum":"  963","line":"        /// Asserts that there is already space for the new item without allocating more."},
{"lineNum":"  964","line":"        /// **Does not** invalidate pointers."},
{"lineNum":"  965","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  966","line":"        pub fn addManyAsArrayAssumeCapacity(self: *Self, comptime n: usize) *[n]T {"},
{"lineNum":"  967","line":"            assert(self.items.len + n <= self.capacity);"},
{"lineNum":"  968","line":"            const prev_len = self.items.len;"},
{"lineNum":"  969","line":"            self.items.len += n;"},
{"lineNum":"  970","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  971","line":"        }"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  974","line":"        /// The return value is a slice pointing to the newly allocated elements."},
{"lineNum":"  975","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  976","line":"        /// Resizes list if `self.capacity` is not large enough."},
{"lineNum":"  977","line":"        pub fn addManyAsSlice(self: *Self, allocator: Allocator, n: usize) Allocator.Error![]T {"},
{"lineNum":"  978","line":"            const prev_len = self.items.len;"},
{"lineNum":"  979","line":"            try self.resize(allocator, self.items.len + n);"},
{"lineNum":"  980","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  981","line":"        }"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"        /// Resize the array, adding `n` new elements, which have `undefined` values."},
{"lineNum":"  984","line":"        /// The return value is a slice pointing to the newly allocated elements."},
{"lineNum":"  985","line":"        /// Asserts that there is already space for the new item without allocating more."},
{"lineNum":"  986","line":"        /// **Does not** invalidate element pointers."},
{"lineNum":"  987","line":"        /// The returned pointer becomes invalid when the list is resized."},
{"lineNum":"  988","line":"        pub fn addManyAsSliceAssumeCapacity(self: *Self, n: usize) []T {"},
{"lineNum":"  989","line":"            assert(self.items.len + n <= self.capacity);"},
{"lineNum":"  990","line":"            const prev_len = self.items.len;"},
{"lineNum":"  991","line":"            self.items.len += n;"},
{"lineNum":"  992","line":"            return self.items[prev_len..][0..n];"},
{"lineNum":"  993","line":"        }"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"        /// Remove and return the last element from the list."},
{"lineNum":"  996","line":"        /// Asserts the list has at least one item."},
{"lineNum":"  997","line":"        /// Invalidates pointers to last element."},
{"lineNum":"  998","line":"        pub fn pop(self: *Self) T {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  999","line":"            const val = self.items[self.items.len - 1];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1000","line":"            self.items.len -= 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1001","line":"            return val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1002","line":"        }"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"        /// Remove and return the last element from the list."},
{"lineNum":" 1005","line":"        /// If the list is empty, returns `null`."},
{"lineNum":" 1006","line":"        /// Invalidates pointers to last element."},
{"lineNum":" 1007","line":"        pub fn popOrNull(self: *Self) ?T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1008","line":"            if (self.items.len == 0) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1009","line":"            return self.pop();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1010","line":"        }"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"        /// Returns a slice of all the items plus the extra capacity, whose memory"},
{"lineNum":" 1013","line":"        /// contents are `undefined`."},
{"lineNum":" 1014","line":"        pub fn allocatedSlice(self: Self) Slice {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1015","line":"            return self.items.ptr[0..self.capacity];","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1016","line":"        }"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"        /// Returns a slice of only the extra capacity after items."},
{"lineNum":" 1019","line":"        /// This can be useful for writing directly into an ArrayList."},
{"lineNum":" 1020","line":"        /// Note that such an operation must be followed up with a direct"},
{"lineNum":" 1021","line":"        /// modification of `self.items.len`."},
{"lineNum":" 1022","line":"        pub fn unusedCapacitySlice(self: Self) Slice {"},
{"lineNum":" 1023","line":"            return self.allocatedSlice()[self.items.len..];"},
{"lineNum":" 1024","line":"        }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"        /// Return the last element from the list."},
{"lineNum":" 1027","line":"        /// Asserts the list has at least one item."},
{"lineNum":" 1028","line":"        pub fn getLast(self: Self) T {"},
{"lineNum":" 1029","line":"            const val = self.items[self.items.len - 1];"},
{"lineNum":" 1030","line":"            return val;"},
{"lineNum":" 1031","line":"        }"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"        /// Return the last element from the list, or"},
{"lineNum":" 1034","line":"        /// return `null` if list is empty."},
{"lineNum":" 1035","line":"        pub fn getLastOrNull(self: Self) ?T {"},
{"lineNum":" 1036","line":"            if (self.items.len == 0) return null;"},
{"lineNum":" 1037","line":"            return self.getLast();"},
{"lineNum":" 1038","line":"        }"},
{"lineNum":" 1039","line":"    };"},
{"lineNum":" 1040","line":"}"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"test \"std.ArrayList/ArrayListUnmanaged.init\" {"},
{"lineNum":" 1043","line":"    {"},
{"lineNum":" 1044","line":"        var list = ArrayList(i32).init(testing.allocator);"},
{"lineNum":" 1045","line":"        defer list.deinit();"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"        try testing.expect(list.items.len == 0);"},
{"lineNum":" 1048","line":"        try testing.expect(list.capacity == 0);"},
{"lineNum":" 1049","line":"    }"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"    {"},
{"lineNum":" 1052","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":"        try testing.expect(list.items.len == 0);"},
{"lineNum":" 1055","line":"        try testing.expect(list.capacity == 0);"},
{"lineNum":" 1056","line":"    }"},
{"lineNum":" 1057","line":"}"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"test \"std.ArrayList/ArrayListUnmanaged.initCapacity\" {"},
{"lineNum":" 1060","line":"    const a = testing.allocator;"},
{"lineNum":" 1061","line":"    {"},
{"lineNum":" 1062","line":"        var list = try ArrayList(i8).initCapacity(a, 200);"},
{"lineNum":" 1063","line":"        defer list.deinit();"},
{"lineNum":" 1064","line":"        try testing.expect(list.items.len == 0);"},
{"lineNum":" 1065","line":"        try testing.expect(list.capacity >= 200);"},
{"lineNum":" 1066","line":"    }"},
{"lineNum":" 1067","line":"    {"},
{"lineNum":" 1068","line":"        var list = try ArrayListUnmanaged(i8).initCapacity(a, 200);"},
{"lineNum":" 1069","line":"        defer list.deinit(a);"},
{"lineNum":" 1070","line":"        try testing.expect(list.items.len == 0);"},
{"lineNum":" 1071","line":"        try testing.expect(list.capacity >= 200);"},
{"lineNum":" 1072","line":"    }"},
{"lineNum":" 1073","line":"}"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"test \"std.ArrayList/ArrayListUnmanaged.clone\" {"},
{"lineNum":" 1076","line":"    const a = testing.allocator;"},
{"lineNum":" 1077","line":"    {"},
{"lineNum":" 1078","line":"        var array = ArrayList(i32).init(a);"},
{"lineNum":" 1079","line":"        try array.append(-1);"},
{"lineNum":" 1080","line":"        try array.append(3);"},
{"lineNum":" 1081","line":"        try array.append(5);"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"        const cloned = try array.clone();"},
{"lineNum":" 1084","line":"        defer cloned.deinit();"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"        try testing.expectEqualSlices(i32, array.items, cloned.items);"},
{"lineNum":" 1087","line":"        try testing.expectEqual(array.allocator, cloned.allocator);"},
{"lineNum":" 1088","line":"        try testing.expect(cloned.capacity >= array.capacity);"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"        array.deinit();"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"        try testing.expectEqual(@as(i32, -1), cloned.items[0]);"},
{"lineNum":" 1093","line":"        try testing.expectEqual(@as(i32, 3), cloned.items[1]);"},
{"lineNum":" 1094","line":"        try testing.expectEqual(@as(i32, 5), cloned.items[2]);"},
{"lineNum":" 1095","line":"    }"},
{"lineNum":" 1096","line":"    {"},
{"lineNum":" 1097","line":"        var array = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1098","line":"        try array.append(a, -1);"},
{"lineNum":" 1099","line":"        try array.append(a, 3);"},
{"lineNum":" 1100","line":"        try array.append(a, 5);"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"        var cloned = try array.clone(a);"},
{"lineNum":" 1103","line":"        defer cloned.deinit(a);"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"        try testing.expectEqualSlices(i32, array.items, cloned.items);"},
{"lineNum":" 1106","line":"        try testing.expect(cloned.capacity >= array.capacity);"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"        array.deinit(a);"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"        try testing.expectEqual(@as(i32, -1), cloned.items[0]);"},
{"lineNum":" 1111","line":"        try testing.expectEqual(@as(i32, 3), cloned.items[1]);"},
{"lineNum":" 1112","line":"        try testing.expectEqual(@as(i32, 5), cloned.items[2]);"},
{"lineNum":" 1113","line":"    }"},
{"lineNum":" 1114","line":"}"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"test \"std.ArrayList/ArrayListUnmanaged.basic\" {"},
{"lineNum":" 1117","line":"    const a = testing.allocator;"},
{"lineNum":" 1118","line":"    {"},
{"lineNum":" 1119","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1120","line":"        defer list.deinit();"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"        {"},
{"lineNum":" 1123","line":"            var i: usize = 0;"},
{"lineNum":" 1124","line":"            while (i < 10) : (i += 1) {"},
{"lineNum":" 1125","line":"                list.append(@as(i32, @intCast(i + 1))) catch unreachable;"},
{"lineNum":" 1126","line":"            }"},
{"lineNum":" 1127","line":"        }"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"        {"},
{"lineNum":" 1130","line":"            var i: usize = 0;"},
{"lineNum":" 1131","line":"            while (i < 10) : (i += 1) {"},
{"lineNum":" 1132","line":"                try testing.expect(list.items[i] == @as(i32, @intCast(i + 1)));"},
{"lineNum":" 1133","line":"            }"},
{"lineNum":" 1134","line":"        }"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"        for (list.items, 0..) |v, i| {"},
{"lineNum":" 1137","line":"            try testing.expect(v == @as(i32, @intCast(i + 1)));"},
{"lineNum":" 1138","line":"        }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"        try testing.expect(list.pop() == 10);"},
{"lineNum":" 1141","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"        list.appendSlice(&[_]i32{ 1, 2, 3 }) catch unreachable;"},
{"lineNum":" 1144","line":"        try testing.expect(list.items.len == 12);"},
{"lineNum":" 1145","line":"        try testing.expect(list.pop() == 3);"},
{"lineNum":" 1146","line":"        try testing.expect(list.pop() == 2);"},
{"lineNum":" 1147","line":"        try testing.expect(list.pop() == 1);"},
{"lineNum":" 1148","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"        var unaligned: [3]i32 align(1) = [_]i32{ 4, 5, 6 };"},
{"lineNum":" 1151","line":"        list.appendUnalignedSlice(&unaligned) catch unreachable;"},
{"lineNum":" 1152","line":"        try testing.expect(list.items.len == 12);"},
{"lineNum":" 1153","line":"        try testing.expect(list.pop() == 6);"},
{"lineNum":" 1154","line":"        try testing.expect(list.pop() == 5);"},
{"lineNum":" 1155","line":"        try testing.expect(list.pop() == 4);"},
{"lineNum":" 1156","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"        list.appendSlice(&[_]i32{}) catch unreachable;"},
{"lineNum":" 1159","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"        // can only set on indices < self.items.len"},
{"lineNum":" 1162","line":"        list.items[7] = 33;"},
{"lineNum":" 1163","line":"        list.items[8] = 42;"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"        try testing.expect(list.pop() == 42);"},
{"lineNum":" 1166","line":"        try testing.expect(list.pop() == 33);"},
{"lineNum":" 1167","line":"    }"},
{"lineNum":" 1168","line":"    {"},
{"lineNum":" 1169","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1170","line":"        defer list.deinit(a);"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"        {"},
{"lineNum":" 1173","line":"            var i: usize = 0;"},
{"lineNum":" 1174","line":"            while (i < 10) : (i += 1) {"},
{"lineNum":" 1175","line":"                list.append(a, @as(i32, @intCast(i + 1))) catch unreachable;"},
{"lineNum":" 1176","line":"            }"},
{"lineNum":" 1177","line":"        }"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"        {"},
{"lineNum":" 1180","line":"            var i: usize = 0;"},
{"lineNum":" 1181","line":"            while (i < 10) : (i += 1) {"},
{"lineNum":" 1182","line":"                try testing.expect(list.items[i] == @as(i32, @intCast(i + 1)));"},
{"lineNum":" 1183","line":"            }"},
{"lineNum":" 1184","line":"        }"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"        for (list.items, 0..) |v, i| {"},
{"lineNum":" 1187","line":"            try testing.expect(v == @as(i32, @intCast(i + 1)));"},
{"lineNum":" 1188","line":"        }"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"        try testing.expect(list.pop() == 10);"},
{"lineNum":" 1191","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"        list.appendSlice(a, &[_]i32{ 1, 2, 3 }) catch unreachable;"},
{"lineNum":" 1194","line":"        try testing.expect(list.items.len == 12);"},
{"lineNum":" 1195","line":"        try testing.expect(list.pop() == 3);"},
{"lineNum":" 1196","line":"        try testing.expect(list.pop() == 2);"},
{"lineNum":" 1197","line":"        try testing.expect(list.pop() == 1);"},
{"lineNum":" 1198","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"        var unaligned: [3]i32 align(1) = [_]i32{ 4, 5, 6 };"},
{"lineNum":" 1201","line":"        list.appendUnalignedSlice(a, &unaligned) catch unreachable;"},
{"lineNum":" 1202","line":"        try testing.expect(list.items.len == 12);"},
{"lineNum":" 1203","line":"        try testing.expect(list.pop() == 6);"},
{"lineNum":" 1204","line":"        try testing.expect(list.pop() == 5);"},
{"lineNum":" 1205","line":"        try testing.expect(list.pop() == 4);"},
{"lineNum":" 1206","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"        list.appendSlice(a, &[_]i32{}) catch unreachable;"},
{"lineNum":" 1209","line":"        try testing.expect(list.items.len == 9);"},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":"        // can only set on indices < self.items.len"},
{"lineNum":" 1212","line":"        list.items[7] = 33;"},
{"lineNum":" 1213","line":"        list.items[8] = 42;"},
{"lineNum":" 1214","line":""},
{"lineNum":" 1215","line":"        try testing.expect(list.pop() == 42);"},
{"lineNum":" 1216","line":"        try testing.expect(list.pop() == 33);"},
{"lineNum":" 1217","line":"    }"},
{"lineNum":" 1218","line":"}"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"test \"std.ArrayList/ArrayListUnmanaged.appendNTimes\" {"},
{"lineNum":" 1221","line":"    const a = testing.allocator;"},
{"lineNum":" 1222","line":"    {"},
{"lineNum":" 1223","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1224","line":"        defer list.deinit();"},
{"lineNum":" 1225","line":""},
{"lineNum":" 1226","line":"        try list.appendNTimes(2, 10);"},
{"lineNum":" 1227","line":"        try testing.expectEqual(@as(usize, 10), list.items.len);"},
{"lineNum":" 1228","line":"        for (list.items) |element| {"},
{"lineNum":" 1229","line":"            try testing.expectEqual(@as(i32, 2), element);"},
{"lineNum":" 1230","line":"        }"},
{"lineNum":" 1231","line":"    }"},
{"lineNum":" 1232","line":"    {"},
{"lineNum":" 1233","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1234","line":"        defer list.deinit(a);"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"        try list.appendNTimes(a, 2, 10);"},
{"lineNum":" 1237","line":"        try testing.expectEqual(@as(usize, 10), list.items.len);"},
{"lineNum":" 1238","line":"        for (list.items) |element| {"},
{"lineNum":" 1239","line":"            try testing.expectEqual(@as(i32, 2), element);"},
{"lineNum":" 1240","line":"        }"},
{"lineNum":" 1241","line":"    }"},
{"lineNum":" 1242","line":"}"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"test \"std.ArrayList/ArrayListUnmanaged.appendNTimes with failing allocator\" {"},
{"lineNum":" 1245","line":"    const a = testing.failing_allocator;"},
{"lineNum":" 1246","line":"    {"},
{"lineNum":" 1247","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1248","line":"        defer list.deinit();"},
{"lineNum":" 1249","line":"        try testing.expectError(error.OutOfMemory, list.appendNTimes(2, 10));"},
{"lineNum":" 1250","line":"    }"},
{"lineNum":" 1251","line":"    {"},
{"lineNum":" 1252","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1253","line":"        defer list.deinit(a);"},
{"lineNum":" 1254","line":"        try testing.expectError(error.OutOfMemory, list.appendNTimes(a, 2, 10));"},
{"lineNum":" 1255","line":"    }"},
{"lineNum":" 1256","line":"}"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"test \"std.ArrayList/ArrayListUnmanaged.orderedRemove\" {"},
{"lineNum":" 1259","line":"    const a = testing.allocator;"},
{"lineNum":" 1260","line":"    {"},
{"lineNum":" 1261","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1262","line":"        defer list.deinit();"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"        try list.append(1);"},
{"lineNum":" 1265","line":"        try list.append(2);"},
{"lineNum":" 1266","line":"        try list.append(3);"},
{"lineNum":" 1267","line":"        try list.append(4);"},
{"lineNum":" 1268","line":"        try list.append(5);"},
{"lineNum":" 1269","line":"        try list.append(6);"},
{"lineNum":" 1270","line":"        try list.append(7);"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"        //remove from middle"},
{"lineNum":" 1273","line":"        try testing.expectEqual(@as(i32, 4), list.orderedRemove(3));"},
{"lineNum":" 1274","line":"        try testing.expectEqual(@as(i32, 5), list.items[3]);"},
{"lineNum":" 1275","line":"        try testing.expectEqual(@as(usize, 6), list.items.len);"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"        //remove from end"},
{"lineNum":" 1278","line":"        try testing.expectEqual(@as(i32, 7), list.orderedRemove(5));"},
{"lineNum":" 1279","line":"        try testing.expectEqual(@as(usize, 5), list.items.len);"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"        //remove from front"},
{"lineNum":" 1282","line":"        try testing.expectEqual(@as(i32, 1), list.orderedRemove(0));"},
{"lineNum":" 1283","line":"        try testing.expectEqual(@as(i32, 2), list.items[0]);"},
{"lineNum":" 1284","line":"        try testing.expectEqual(@as(usize, 4), list.items.len);"},
{"lineNum":" 1285","line":"    }"},
{"lineNum":" 1286","line":"    {"},
{"lineNum":" 1287","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1288","line":"        defer list.deinit(a);"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"        try list.append(a, 1);"},
{"lineNum":" 1291","line":"        try list.append(a, 2);"},
{"lineNum":" 1292","line":"        try list.append(a, 3);"},
{"lineNum":" 1293","line":"        try list.append(a, 4);"},
{"lineNum":" 1294","line":"        try list.append(a, 5);"},
{"lineNum":" 1295","line":"        try list.append(a, 6);"},
{"lineNum":" 1296","line":"        try list.append(a, 7);"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"        //remove from middle"},
{"lineNum":" 1299","line":"        try testing.expectEqual(@as(i32, 4), list.orderedRemove(3));"},
{"lineNum":" 1300","line":"        try testing.expectEqual(@as(i32, 5), list.items[3]);"},
{"lineNum":" 1301","line":"        try testing.expectEqual(@as(usize, 6), list.items.len);"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"        //remove from end"},
{"lineNum":" 1304","line":"        try testing.expectEqual(@as(i32, 7), list.orderedRemove(5));"},
{"lineNum":" 1305","line":"        try testing.expectEqual(@as(usize, 5), list.items.len);"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"        //remove from front"},
{"lineNum":" 1308","line":"        try testing.expectEqual(@as(i32, 1), list.orderedRemove(0));"},
{"lineNum":" 1309","line":"        try testing.expectEqual(@as(i32, 2), list.items[0]);"},
{"lineNum":" 1310","line":"        try testing.expectEqual(@as(usize, 4), list.items.len);"},
{"lineNum":" 1311","line":"    }"},
{"lineNum":" 1312","line":"}"},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"test \"std.ArrayList/ArrayListUnmanaged.swapRemove\" {"},
{"lineNum":" 1315","line":"    const a = testing.allocator;"},
{"lineNum":" 1316","line":"    {"},
{"lineNum":" 1317","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1318","line":"        defer list.deinit();"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"        try list.append(1);"},
{"lineNum":" 1321","line":"        try list.append(2);"},
{"lineNum":" 1322","line":"        try list.append(3);"},
{"lineNum":" 1323","line":"        try list.append(4);"},
{"lineNum":" 1324","line":"        try list.append(5);"},
{"lineNum":" 1325","line":"        try list.append(6);"},
{"lineNum":" 1326","line":"        try list.append(7);"},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"        //remove from middle"},
{"lineNum":" 1329","line":"        try testing.expect(list.swapRemove(3) == 4);"},
{"lineNum":" 1330","line":"        try testing.expect(list.items[3] == 7);"},
{"lineNum":" 1331","line":"        try testing.expect(list.items.len == 6);"},
{"lineNum":" 1332","line":""},
{"lineNum":" 1333","line":"        //remove from end"},
{"lineNum":" 1334","line":"        try testing.expect(list.swapRemove(5) == 6);"},
{"lineNum":" 1335","line":"        try testing.expect(list.items.len == 5);"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"        //remove from front"},
{"lineNum":" 1338","line":"        try testing.expect(list.swapRemove(0) == 1);"},
{"lineNum":" 1339","line":"        try testing.expect(list.items[0] == 5);"},
{"lineNum":" 1340","line":"        try testing.expect(list.items.len == 4);"},
{"lineNum":" 1341","line":"    }"},
{"lineNum":" 1342","line":"    {"},
{"lineNum":" 1343","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1344","line":"        defer list.deinit(a);"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"        try list.append(a, 1);"},
{"lineNum":" 1347","line":"        try list.append(a, 2);"},
{"lineNum":" 1348","line":"        try list.append(a, 3);"},
{"lineNum":" 1349","line":"        try list.append(a, 4);"},
{"lineNum":" 1350","line":"        try list.append(a, 5);"},
{"lineNum":" 1351","line":"        try list.append(a, 6);"},
{"lineNum":" 1352","line":"        try list.append(a, 7);"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"        //remove from middle"},
{"lineNum":" 1355","line":"        try testing.expect(list.swapRemove(3) == 4);"},
{"lineNum":" 1356","line":"        try testing.expect(list.items[3] == 7);"},
{"lineNum":" 1357","line":"        try testing.expect(list.items.len == 6);"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"        //remove from end"},
{"lineNum":" 1360","line":"        try testing.expect(list.swapRemove(5) == 6);"},
{"lineNum":" 1361","line":"        try testing.expect(list.items.len == 5);"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"        //remove from front"},
{"lineNum":" 1364","line":"        try testing.expect(list.swapRemove(0) == 1);"},
{"lineNum":" 1365","line":"        try testing.expect(list.items[0] == 5);"},
{"lineNum":" 1366","line":"        try testing.expect(list.items.len == 4);"},
{"lineNum":" 1367","line":"    }"},
{"lineNum":" 1368","line":"}"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"test \"std.ArrayList/ArrayListUnmanaged.insert\" {"},
{"lineNum":" 1371","line":"    const a = testing.allocator;"},
{"lineNum":" 1372","line":"    {"},
{"lineNum":" 1373","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1374","line":"        defer list.deinit();"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"        try list.insert(0, 1);"},
{"lineNum":" 1377","line":"        try list.append(2);"},
{"lineNum":" 1378","line":"        try list.insert(2, 3);"},
{"lineNum":" 1379","line":"        try list.insert(0, 5);"},
{"lineNum":" 1380","line":"        try testing.expect(list.items[0] == 5);"},
{"lineNum":" 1381","line":"        try testing.expect(list.items[1] == 1);"},
{"lineNum":" 1382","line":"        try testing.expect(list.items[2] == 2);"},
{"lineNum":" 1383","line":"        try testing.expect(list.items[3] == 3);"},
{"lineNum":" 1384","line":"    }"},
{"lineNum":" 1385","line":"    {"},
{"lineNum":" 1386","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1387","line":"        defer list.deinit(a);"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"        try list.insert(a, 0, 1);"},
{"lineNum":" 1390","line":"        try list.append(a, 2);"},
{"lineNum":" 1391","line":"        try list.insert(a, 2, 3);"},
{"lineNum":" 1392","line":"        try list.insert(a, 0, 5);"},
{"lineNum":" 1393","line":"        try testing.expect(list.items[0] == 5);"},
{"lineNum":" 1394","line":"        try testing.expect(list.items[1] == 1);"},
{"lineNum":" 1395","line":"        try testing.expect(list.items[2] == 2);"},
{"lineNum":" 1396","line":"        try testing.expect(list.items[3] == 3);"},
{"lineNum":" 1397","line":"    }"},
{"lineNum":" 1398","line":"}"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"test \"std.ArrayList/ArrayListUnmanaged.insertSlice\" {"},
{"lineNum":" 1401","line":"    const a = testing.allocator;"},
{"lineNum":" 1402","line":"    {"},
{"lineNum":" 1403","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1404","line":"        defer list.deinit();"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"        try list.append(1);"},
{"lineNum":" 1407","line":"        try list.append(2);"},
{"lineNum":" 1408","line":"        try list.append(3);"},
{"lineNum":" 1409","line":"        try list.append(4);"},
{"lineNum":" 1410","line":"        try list.insertSlice(1, &[_]i32{ 9, 8 });"},
{"lineNum":" 1411","line":"        try testing.expect(list.items[0] == 1);"},
{"lineNum":" 1412","line":"        try testing.expect(list.items[1] == 9);"},
{"lineNum":" 1413","line":"        try testing.expect(list.items[2] == 8);"},
{"lineNum":" 1414","line":"        try testing.expect(list.items[3] == 2);"},
{"lineNum":" 1415","line":"        try testing.expect(list.items[4] == 3);"},
{"lineNum":" 1416","line":"        try testing.expect(list.items[5] == 4);"},
{"lineNum":" 1417","line":""},
{"lineNum":" 1418","line":"        const items = [_]i32{1};"},
{"lineNum":" 1419","line":"        try list.insertSlice(0, items[0..0]);"},
{"lineNum":" 1420","line":"        try testing.expect(list.items.len == 6);"},
{"lineNum":" 1421","line":"        try testing.expect(list.items[0] == 1);"},
{"lineNum":" 1422","line":"    }"},
{"lineNum":" 1423","line":"    {"},
{"lineNum":" 1424","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1425","line":"        defer list.deinit(a);"},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"        try list.append(a, 1);"},
{"lineNum":" 1428","line":"        try list.append(a, 2);"},
{"lineNum":" 1429","line":"        try list.append(a, 3);"},
{"lineNum":" 1430","line":"        try list.append(a, 4);"},
{"lineNum":" 1431","line":"        try list.insertSlice(a, 1, &[_]i32{ 9, 8 });"},
{"lineNum":" 1432","line":"        try testing.expect(list.items[0] == 1);"},
{"lineNum":" 1433","line":"        try testing.expect(list.items[1] == 9);"},
{"lineNum":" 1434","line":"        try testing.expect(list.items[2] == 8);"},
{"lineNum":" 1435","line":"        try testing.expect(list.items[3] == 2);"},
{"lineNum":" 1436","line":"        try testing.expect(list.items[4] == 3);"},
{"lineNum":" 1437","line":"        try testing.expect(list.items[5] == 4);"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"        const items = [_]i32{1};"},
{"lineNum":" 1440","line":"        try list.insertSlice(a, 0, items[0..0]);"},
{"lineNum":" 1441","line":"        try testing.expect(list.items.len == 6);"},
{"lineNum":" 1442","line":"        try testing.expect(list.items[0] == 1);"},
{"lineNum":" 1443","line":"    }"},
{"lineNum":" 1444","line":"}"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"test \"std.ArrayList/ArrayListUnmanaged.replaceRange\" {"},
{"lineNum":" 1447","line":"    var arena = std.heap.ArenaAllocator.init(testing.allocator);"},
{"lineNum":" 1448","line":"    defer arena.deinit();"},
{"lineNum":" 1449","line":"    const a = arena.allocator();"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"    const init = [_]i32{ 1, 2, 3, 4, 5 };"},
{"lineNum":" 1452","line":"    const new = [_]i32{ 0, 0, 0 };"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"    const result_zero = [_]i32{ 1, 0, 0, 0, 2, 3, 4, 5 };"},
{"lineNum":" 1455","line":"    const result_eq = [_]i32{ 1, 0, 0, 0, 5 };"},
{"lineNum":" 1456","line":"    const result_le = [_]i32{ 1, 0, 0, 0, 4, 5 };"},
{"lineNum":" 1457","line":"    const result_gt = [_]i32{ 1, 0, 0, 0 };"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"    {"},
{"lineNum":" 1460","line":"        var list_zero = ArrayList(i32).init(a);"},
{"lineNum":" 1461","line":"        var list_eq = ArrayList(i32).init(a);"},
{"lineNum":" 1462","line":"        var list_lt = ArrayList(i32).init(a);"},
{"lineNum":" 1463","line":"        var list_gt = ArrayList(i32).init(a);"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"        try list_zero.appendSlice(&init);"},
{"lineNum":" 1466","line":"        try list_eq.appendSlice(&init);"},
{"lineNum":" 1467","line":"        try list_lt.appendSlice(&init);"},
{"lineNum":" 1468","line":"        try list_gt.appendSlice(&init);"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"        try list_zero.replaceRange(1, 0, &new);"},
{"lineNum":" 1471","line":"        try list_eq.replaceRange(1, 3, &new);"},
{"lineNum":" 1472","line":"        try list_lt.replaceRange(1, 2, &new);"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"        // after_range > new_items.len in function body"},
{"lineNum":" 1475","line":"        try testing.expect(1 + 4 > new.len);"},
{"lineNum":" 1476","line":"        try list_gt.replaceRange(1, 4, &new);"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"        try testing.expectEqualSlices(i32, list_zero.items, &result_zero);"},
{"lineNum":" 1479","line":"        try testing.expectEqualSlices(i32, list_eq.items, &result_eq);"},
{"lineNum":" 1480","line":"        try testing.expectEqualSlices(i32, list_lt.items, &result_le);"},
{"lineNum":" 1481","line":"        try testing.expectEqualSlices(i32, list_gt.items, &result_gt);"},
{"lineNum":" 1482","line":"    }"},
{"lineNum":" 1483","line":"    {"},
{"lineNum":" 1484","line":"        var list_zero = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1485","line":"        var list_eq = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1486","line":"        var list_lt = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1487","line":"        var list_gt = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"        try list_zero.appendSlice(a, &init);"},
{"lineNum":" 1490","line":"        try list_eq.appendSlice(a, &init);"},
{"lineNum":" 1491","line":"        try list_lt.appendSlice(a, &init);"},
{"lineNum":" 1492","line":"        try list_gt.appendSlice(a, &init);"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"        try list_zero.replaceRange(a, 1, 0, &new);"},
{"lineNum":" 1495","line":"        try list_eq.replaceRange(a, 1, 3, &new);"},
{"lineNum":" 1496","line":"        try list_lt.replaceRange(a, 1, 2, &new);"},
{"lineNum":" 1497","line":""},
{"lineNum":" 1498","line":"        // after_range > new_items.len in function body"},
{"lineNum":" 1499","line":"        try testing.expect(1 + 4 > new.len);"},
{"lineNum":" 1500","line":"        try list_gt.replaceRange(a, 1, 4, &new);"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":"        try testing.expectEqualSlices(i32, list_zero.items, &result_zero);"},
{"lineNum":" 1503","line":"        try testing.expectEqualSlices(i32, list_eq.items, &result_eq);"},
{"lineNum":" 1504","line":"        try testing.expectEqualSlices(i32, list_lt.items, &result_le);"},
{"lineNum":" 1505","line":"        try testing.expectEqualSlices(i32, list_gt.items, &result_gt);"},
{"lineNum":" 1506","line":"    }"},
{"lineNum":" 1507","line":"}"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"const Item = struct {"},
{"lineNum":" 1510","line":"    integer: i32,"},
{"lineNum":" 1511","line":"    sub_items: ArrayList(Item),"},
{"lineNum":" 1512","line":"};"},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"const ItemUnmanaged = struct {"},
{"lineNum":" 1515","line":"    integer: i32,"},
{"lineNum":" 1516","line":"    sub_items: ArrayListUnmanaged(ItemUnmanaged),"},
{"lineNum":" 1517","line":"};"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"test \"std.ArrayList/ArrayListUnmanaged: ArrayList(T) of struct T\" {"},
{"lineNum":" 1520","line":"    const a = std.testing.allocator;"},
{"lineNum":" 1521","line":"    {"},
{"lineNum":" 1522","line":"        var root = Item{ .integer = 1, .sub_items = ArrayList(Item).init(a) };"},
{"lineNum":" 1523","line":"        defer root.sub_items.deinit();"},
{"lineNum":" 1524","line":"        try root.sub_items.append(Item{ .integer = 42, .sub_items = ArrayList(Item).init(a) });"},
{"lineNum":" 1525","line":"        try testing.expect(root.sub_items.items[0].integer == 42);"},
{"lineNum":" 1526","line":"    }"},
{"lineNum":" 1527","line":"    {"},
{"lineNum":" 1528","line":"        var root = ItemUnmanaged{ .integer = 1, .sub_items = ArrayListUnmanaged(ItemUnmanaged){} };"},
{"lineNum":" 1529","line":"        defer root.sub_items.deinit(a);"},
{"lineNum":" 1530","line":"        try root.sub_items.append(a, ItemUnmanaged{ .integer = 42, .sub_items = ArrayListUnmanaged(ItemUnmanaged){} });"},
{"lineNum":" 1531","line":"        try testing.expect(root.sub_items.items[0].integer == 42);"},
{"lineNum":" 1532","line":"    }"},
{"lineNum":" 1533","line":"}"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"test \"std.ArrayList(u8)/ArrayListAligned implements writer\" {"},
{"lineNum":" 1536","line":"    const a = testing.allocator;"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"    {"},
{"lineNum":" 1539","line":"        var buffer = ArrayList(u8).init(a);"},
{"lineNum":" 1540","line":"        defer buffer.deinit();"},
{"lineNum":" 1541","line":""},
{"lineNum":" 1542","line":"        const x: i32 = 42;"},
{"lineNum":" 1543","line":"        const y: i32 = 1234;"},
{"lineNum":" 1544","line":"        try buffer.writer().print(\"x: {}\\ny: {}\\n\", .{ x, y });"},
{"lineNum":" 1545","line":""},
{"lineNum":" 1546","line":"        try testing.expectEqualSlices(u8, \"x: 42\\ny: 1234\\n\", buffer.items);"},
{"lineNum":" 1547","line":"    }"},
{"lineNum":" 1548","line":"    {"},
{"lineNum":" 1549","line":"        var list = ArrayListAligned(u8, 2).init(a);"},
{"lineNum":" 1550","line":"        defer list.deinit();"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"        const writer = list.writer();"},
{"lineNum":" 1553","line":"        try writer.writeAll(\"a\");"},
{"lineNum":" 1554","line":"        try writer.writeAll(\"bc\");"},
{"lineNum":" 1555","line":"        try writer.writeAll(\"d\");"},
{"lineNum":" 1556","line":"        try writer.writeAll(\"efg\");"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"        try testing.expectEqualSlices(u8, list.items, \"abcdefg\");"},
{"lineNum":" 1559","line":"    }"},
{"lineNum":" 1560","line":"}"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"test \"std.ArrayListUnmanaged(u8) implements writer\" {"},
{"lineNum":" 1563","line":"    const a = testing.allocator;"},
{"lineNum":" 1564","line":""},
{"lineNum":" 1565","line":"    {"},
{"lineNum":" 1566","line":"        var buffer: ArrayListUnmanaged(u8) = .{};"},
{"lineNum":" 1567","line":"        defer buffer.deinit(a);"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"        const x: i32 = 42;"},
{"lineNum":" 1570","line":"        const y: i32 = 1234;"},
{"lineNum":" 1571","line":"        try buffer.writer(a).print(\"x: {}\\ny: {}\\n\", .{ x, y });"},
{"lineNum":" 1572","line":""},
{"lineNum":" 1573","line":"        try testing.expectEqualSlices(u8, \"x: 42\\ny: 1234\\n\", buffer.items);"},
{"lineNum":" 1574","line":"    }"},
{"lineNum":" 1575","line":"    {"},
{"lineNum":" 1576","line":"        var list: ArrayListAlignedUnmanaged(u8, 2) = .{};"},
{"lineNum":" 1577","line":"        defer list.deinit(a);"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"        const writer = list.writer(a);"},
{"lineNum":" 1580","line":"        try writer.writeAll(\"a\");"},
{"lineNum":" 1581","line":"        try writer.writeAll(\"bc\");"},
{"lineNum":" 1582","line":"        try writer.writeAll(\"d\");"},
{"lineNum":" 1583","line":"        try writer.writeAll(\"efg\");"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"        try testing.expectEqualSlices(u8, list.items, \"abcdefg\");"},
{"lineNum":" 1586","line":"    }"},
{"lineNum":" 1587","line":"}"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"test \"shrink still sets length when resizing is disabled\" {"},
{"lineNum":" 1590","line":"    // Use the testing allocator but with resize disabled."},
{"lineNum":" 1591","line":"    var a = testing.allocator;"},
{"lineNum":" 1592","line":"    a.vtable = &.{"},
{"lineNum":" 1593","line":"        .alloc = a.vtable.alloc,"},
{"lineNum":" 1594","line":"        .resize = Allocator.noResize,"},
{"lineNum":" 1595","line":"        .free = a.vtable.free,"},
{"lineNum":" 1596","line":"    };"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"    {"},
{"lineNum":" 1599","line":"        var list = ArrayList(i32).init(a);"},
{"lineNum":" 1600","line":"        defer list.deinit();"},
{"lineNum":" 1601","line":""},
{"lineNum":" 1602","line":"        try list.append(1);"},
{"lineNum":" 1603","line":"        try list.append(2);"},
{"lineNum":" 1604","line":"        try list.append(3);"},
{"lineNum":" 1605","line":""},
{"lineNum":" 1606","line":"        list.shrinkAndFree(1);"},
{"lineNum":" 1607","line":"        try testing.expect(list.items.len == 1);"},
{"lineNum":" 1608","line":"    }"},
{"lineNum":" 1609","line":"    {"},
{"lineNum":" 1610","line":"        var list = ArrayListUnmanaged(i32){};"},
{"lineNum":" 1611","line":"        defer list.deinit(a);"},
{"lineNum":" 1612","line":""},
{"lineNum":" 1613","line":"        try list.append(a, 1);"},
{"lineNum":" 1614","line":"        try list.append(a, 2);"},
{"lineNum":" 1615","line":"        try list.append(a, 3);"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"        list.shrinkAndFree(a, 1);"},
{"lineNum":" 1618","line":"        try testing.expect(list.items.len == 1);"},
{"lineNum":" 1619","line":"    }"},
{"lineNum":" 1620","line":"}"},
{"lineNum":" 1621","line":""},
{"lineNum":" 1622","line":"test \"shrinkAndFree with a copy\" {"},
{"lineNum":" 1623","line":"    // Use the testing allocator but with resize disabled."},
{"lineNum":" 1624","line":"    var a = testing.allocator;"},
{"lineNum":" 1625","line":"    a.vtable = &.{"},
{"lineNum":" 1626","line":"        .alloc = a.vtable.alloc,"},
{"lineNum":" 1627","line":"        .resize = Allocator.noResize,"},
{"lineNum":" 1628","line":"        .free = a.vtable.free,"},
{"lineNum":" 1629","line":"    };"},
{"lineNum":" 1630","line":"    var list = ArrayList(i32).init(a);"},
{"lineNum":" 1631","line":"    defer list.deinit();"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"    try list.appendNTimes(3, 16);"},
{"lineNum":" 1634","line":"    list.shrinkAndFree(4);"},
{"lineNum":" 1635","line":"    try testing.expect(mem.eql(i32, list.items, &.{ 3, 3, 3, 3 }));"},
{"lineNum":" 1636","line":"}"},
{"lineNum":" 1637","line":""},
{"lineNum":" 1638","line":"test \"std.ArrayList/ArrayListUnmanaged.addManyAsArray\" {"},
{"lineNum":" 1639","line":"    const a = std.testing.allocator;"},
{"lineNum":" 1640","line":"    {"},
{"lineNum":" 1641","line":"        var list = ArrayList(u8).init(a);"},
{"lineNum":" 1642","line":"        defer list.deinit();"},
{"lineNum":" 1643","line":""},
{"lineNum":" 1644","line":"        (try list.addManyAsArray(4)).* = \"aoeu\".*;"},
{"lineNum":" 1645","line":"        try list.ensureTotalCapacity(8);"},
{"lineNum":" 1646","line":"        list.addManyAsArrayAssumeCapacity(4).* = \"asdf\".*;"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"        try testing.expectEqualSlices(u8, list.items, \"aoeuasdf\");"},
{"lineNum":" 1649","line":"    }"},
{"lineNum":" 1650","line":"    {"},
{"lineNum":" 1651","line":"        var list = ArrayListUnmanaged(u8){};"},
{"lineNum":" 1652","line":"        defer list.deinit(a);"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"        (try list.addManyAsArray(a, 4)).* = \"aoeu\".*;"},
{"lineNum":" 1655","line":"        try list.ensureTotalCapacity(a, 8);"},
{"lineNum":" 1656","line":"        list.addManyAsArrayAssumeCapacity(4).* = \"asdf\".*;"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"        try testing.expectEqualSlices(u8, list.items, \"aoeuasdf\");"},
{"lineNum":" 1659","line":"    }"},
{"lineNum":" 1660","line":"}"},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"test \"std.ArrayList/ArrayList.fromOwnedSliceSentinel\" {"},
{"lineNum":" 1663","line":"    const a = testing.allocator;"},
{"lineNum":" 1664","line":""},
{"lineNum":" 1665","line":"    var orig_list = ArrayList(u8).init(a);"},
{"lineNum":" 1666","line":"    defer orig_list.deinit();"},
{"lineNum":" 1667","line":"    try orig_list.appendSlice(\"foobar\");"},
{"lineNum":" 1668","line":"    const sentinel_slice = try orig_list.toOwnedSliceSentinel(0);"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"    var list = ArrayList(u8).fromOwnedSliceSentinel(a, 0, sentinel_slice);"},
{"lineNum":" 1671","line":"    defer list.deinit();"},
{"lineNum":" 1672","line":"    try testing.expectEqualStrings(list.items, \"foobar\");"},
{"lineNum":" 1673","line":"}"},
{"lineNum":" 1674","line":""},
{"lineNum":" 1675","line":"test \"std.ArrayList/ArrayListUnmanaged.fromOwnedSlice\" {"},
{"lineNum":" 1676","line":"    const a = testing.allocator;"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"    var list = ArrayList(u8).init(a);"},
{"lineNum":" 1679","line":"    defer list.deinit();"},
{"lineNum":" 1680","line":"    try list.appendSlice(\"foobar\");"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"    const slice = try list.toOwnedSlice();"},
{"lineNum":" 1683","line":"    var unmanaged = ArrayListUnmanaged(u8).fromOwnedSlice(slice);"},
{"lineNum":" 1684","line":"    defer unmanaged.deinit(a);"},
{"lineNum":" 1685","line":"    try testing.expectEqualStrings(unmanaged.items, \"foobar\");"},
{"lineNum":" 1686","line":"}"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"test \"std.ArrayList/ArrayListUnmanaged.fromOwnedSliceSentinel\" {"},
{"lineNum":" 1689","line":"    const a = testing.allocator;"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"    var list = ArrayList(u8).init(a);"},
{"lineNum":" 1692","line":"    defer list.deinit();"},
{"lineNum":" 1693","line":"    try list.appendSlice(\"foobar\");"},
{"lineNum":" 1694","line":""},
{"lineNum":" 1695","line":"    const sentinel_slice = try list.toOwnedSliceSentinel(0);"},
{"lineNum":" 1696","line":"    var unmanaged = ArrayListUnmanaged(u8).fromOwnedSliceSentinel(0, sentinel_slice);"},
{"lineNum":" 1697","line":"    defer unmanaged.deinit(a);"},
{"lineNum":" 1698","line":"    try testing.expectEqualStrings(unmanaged.items, \"foobar\");"},
{"lineNum":" 1699","line":"}"},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"test \"std.ArrayList/ArrayListUnmanaged.toOwnedSliceSentinel\" {"},
{"lineNum":" 1702","line":"    const a = testing.allocator;"},
{"lineNum":" 1703","line":"    {"},
{"lineNum":" 1704","line":"        var list = ArrayList(u8).init(a);"},
{"lineNum":" 1705","line":"        defer list.deinit();"},
{"lineNum":" 1706","line":""},
{"lineNum":" 1707","line":"        try list.appendSlice(\"foobar\");"},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"        const result = try list.toOwnedSliceSentinel(0);"},
{"lineNum":" 1710","line":"        defer a.free(result);"},
{"lineNum":" 1711","line":"        try testing.expectEqualStrings(result, mem.sliceTo(result.ptr, 0));"},
{"lineNum":" 1712","line":"    }"},
{"lineNum":" 1713","line":"    {"},
{"lineNum":" 1714","line":"        var list = ArrayListUnmanaged(u8){};"},
{"lineNum":" 1715","line":"        defer list.deinit(a);"},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"        try list.appendSlice(a, \"foobar\");"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"        const result = try list.toOwnedSliceSentinel(a, 0);"},
{"lineNum":" 1720","line":"        defer a.free(result);"},
{"lineNum":" 1721","line":"        try testing.expectEqualStrings(result, mem.sliceTo(result.ptr, 0));"},
{"lineNum":" 1722","line":"    }"},
{"lineNum":" 1723","line":"}"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"test \"ArrayListAligned/ArrayListAlignedUnmanaged accepts unaligned slices\" {"},
{"lineNum":" 1726","line":"    const a = testing.allocator;"},
{"lineNum":" 1727","line":"    {"},
{"lineNum":" 1728","line":"        var list = std.ArrayListAligned(u8, 8).init(a);"},
{"lineNum":" 1729","line":"        defer list.deinit();"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"        try list.appendSlice(&.{ 0, 1, 2, 3 });"},
{"lineNum":" 1732","line":"        try list.insertSlice(2, &.{ 4, 5, 6, 7 });"},
{"lineNum":" 1733","line":"        try list.replaceRange(1, 3, &.{ 8, 9 });"},
{"lineNum":" 1734","line":""},
{"lineNum":" 1735","line":"        try testing.expectEqualSlices(u8, list.items, &.{ 0, 8, 9, 6, 7, 2, 3 });"},
{"lineNum":" 1736","line":"    }"},
{"lineNum":" 1737","line":"    {"},
{"lineNum":" 1738","line":"        var list = std.ArrayListAlignedUnmanaged(u8, 8){};"},
{"lineNum":" 1739","line":"        defer list.deinit(a);"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"        try list.appendSlice(a, &.{ 0, 1, 2, 3 });"},
{"lineNum":" 1742","line":"        try list.insertSlice(a, 2, &.{ 4, 5, 6, 7 });"},
{"lineNum":" 1743","line":"        try list.replaceRange(a, 1, 3, &.{ 8, 9 });"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"        try testing.expectEqualSlices(u8, list.items, &.{ 0, 8, 9, 6, 7, 2, 3 });"},
{"lineNum":" 1746","line":"    }"},
{"lineNum":" 1747","line":"}"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"test \"std.ArrayList(u0)\" {"},
{"lineNum":" 1750","line":"    // An ArrayList on zero-sized types should not need to allocate"},
{"lineNum":" 1751","line":"    var failing_allocator = testing.FailingAllocator.init(testing.allocator, 0);"},
{"lineNum":" 1752","line":"    const a = failing_allocator.allocator();"},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"    var list = ArrayList(u0).init(a);"},
{"lineNum":" 1755","line":"    defer list.deinit();"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"    try list.append(0);"},
{"lineNum":" 1758","line":"    try list.append(0);"},
{"lineNum":" 1759","line":"    try list.append(0);"},
{"lineNum":" 1760","line":"    try testing.expectEqual(list.items.len, 3);"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"    var count: usize = 0;"},
{"lineNum":" 1763","line":"    for (list.items) |x| {"},
{"lineNum":" 1764","line":"        try testing.expectEqual(x, 0);"},
{"lineNum":" 1765","line":"        count += 1;"},
{"lineNum":" 1766","line":"    }"},
{"lineNum":" 1767","line":"    try testing.expectEqual(count, 3);"},
{"lineNum":" 1768","line":"}"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"test \"std.ArrayList(?u32).popOrNull()\" {"},
{"lineNum":" 1771","line":"    const a = testing.allocator;"},
{"lineNum":" 1772","line":""},
{"lineNum":" 1773","line":"    var list = ArrayList(?u32).init(a);"},
{"lineNum":" 1774","line":"    defer list.deinit();"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"    try list.append(null);"},
{"lineNum":" 1777","line":"    try list.append(1);"},
{"lineNum":" 1778","line":"    try list.append(2);"},
{"lineNum":" 1779","line":"    try testing.expectEqual(list.items.len, 3);"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"    try testing.expect(list.popOrNull().? == @as(u32, 2));"},
{"lineNum":" 1782","line":"    try testing.expect(list.popOrNull().? == @as(u32, 1));"},
{"lineNum":" 1783","line":"    try testing.expect(list.popOrNull().? == null);"},
{"lineNum":" 1784","line":"    try testing.expect(list.popOrNull() == null);"},
{"lineNum":" 1785","line":"}"},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"test \"std.ArrayList(u32).getLast()\" {"},
{"lineNum":" 1788","line":"    const a = testing.allocator;"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"    var list = ArrayList(u32).init(a);"},
{"lineNum":" 1791","line":"    defer list.deinit();"},
{"lineNum":" 1792","line":""},
{"lineNum":" 1793","line":"    try list.append(2);"},
{"lineNum":" 1794","line":"    const const_list = list;"},
{"lineNum":" 1795","line":"    try testing.expectEqual(const_list.getLast(), 2);"},
{"lineNum":" 1796","line":"}"},
{"lineNum":" 1797","line":""},
{"lineNum":" 1798","line":"test \"std.ArrayList(u32).getLastOrNull()\" {"},
{"lineNum":" 1799","line":"    const a = testing.allocator;"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"    var list = ArrayList(u32).init(a);"},
{"lineNum":" 1802","line":"    defer list.deinit();"},
{"lineNum":" 1803","line":""},
{"lineNum":" 1804","line":"    try testing.expectEqual(list.getLastOrNull(), null);"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"    try list.append(2);"},
{"lineNum":" 1807","line":"    const const_list = list;"},
{"lineNum":" 1808","line":"    try testing.expectEqual(const_list.getLastOrNull().?, 2);"},
{"lineNum":" 1809","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 129, "covered" : 54,};
var merged_data = [];
