var data = {lines:[
{"lineNum":"    1","line":"//! The 7-bit [ASCII](https://en.wikipedia.org/wiki/ASCII) character encoding standard."},
{"lineNum":"    2","line":"//!"},
{"lineNum":"    3","line":"//! This is not to be confused with the 8-bit [extended ASCII](https://en.wikipedia.org/wiki/Extended_ASCII) character encoding."},
{"lineNum":"    4","line":"//!"},
{"lineNum":"    5","line":"//! Even though this module concerns itself with 7-bit ASCII,"},
{"lineNum":"    6","line":"//! functions use `u8` as the type instead of `u7` for convenience and compatibility."},
{"lineNum":"    7","line":"//! Characters outside of the 7-bit range are gracefully handled (e.g. by returning `false`)."},
{"lineNum":"    8","line":"//!"},
{"lineNum":"    9","line":"//! See also: https://en.wikipedia.org/wiki/ASCII#Character_set"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"const std = @import(\"std\");"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// The C0 control codes of the ASCII encoding."},
{"lineNum":"   14","line":"///"},
{"lineNum":"   15","line":"/// See also: https://en.wikipedia.org/wiki/C0_and_C1_control_codes and `isControl`"},
{"lineNum":"   16","line":"pub const control_code = struct {"},
{"lineNum":"   17","line":"    /// Null."},
{"lineNum":"   18","line":"    pub const nul = 0x00;"},
{"lineNum":"   19","line":"    /// Start of Heading."},
{"lineNum":"   20","line":"    pub const soh = 0x01;"},
{"lineNum":"   21","line":"    /// Start of Text."},
{"lineNum":"   22","line":"    pub const stx = 0x02;"},
{"lineNum":"   23","line":"    /// End of Text."},
{"lineNum":"   24","line":"    pub const etx = 0x03;"},
{"lineNum":"   25","line":"    /// End of Transmission."},
{"lineNum":"   26","line":"    pub const eot = 0x04;"},
{"lineNum":"   27","line":"    /// Enquiry."},
{"lineNum":"   28","line":"    pub const enq = 0x05;"},
{"lineNum":"   29","line":"    /// Acknowledge."},
{"lineNum":"   30","line":"    pub const ack = 0x06;"},
{"lineNum":"   31","line":"    /// Bell, Alert."},
{"lineNum":"   32","line":"    pub const bel = 0x07;"},
{"lineNum":"   33","line":"    /// Backspace."},
{"lineNum":"   34","line":"    pub const bs = 0x08;"},
{"lineNum":"   35","line":"    /// Horizontal Tab, Tab (\'\\t\')."},
{"lineNum":"   36","line":"    pub const ht = 0x09;"},
{"lineNum":"   37","line":"    /// Line Feed, Newline (\'\\n\')."},
{"lineNum":"   38","line":"    pub const lf = 0x0A;"},
{"lineNum":"   39","line":"    /// Vertical Tab."},
{"lineNum":"   40","line":"    pub const vt = 0x0B;"},
{"lineNum":"   41","line":"    /// Form Feed."},
{"lineNum":"   42","line":"    pub const ff = 0x0C;"},
{"lineNum":"   43","line":"    /// Carriage Return (\'\\r\')."},
{"lineNum":"   44","line":"    pub const cr = 0x0D;"},
{"lineNum":"   45","line":"    /// Shift Out."},
{"lineNum":"   46","line":"    pub const so = 0x0E;"},
{"lineNum":"   47","line":"    /// Shift In."},
{"lineNum":"   48","line":"    pub const si = 0x0F;"},
{"lineNum":"   49","line":"    /// Data Link Escape."},
{"lineNum":"   50","line":"    pub const dle = 0x10;"},
{"lineNum":"   51","line":"    /// Device Control One (XON)."},
{"lineNum":"   52","line":"    pub const dc1 = 0x11;"},
{"lineNum":"   53","line":"    /// Device Control Two."},
{"lineNum":"   54","line":"    pub const dc2 = 0x12;"},
{"lineNum":"   55","line":"    /// Device Control Three (XOFF)."},
{"lineNum":"   56","line":"    pub const dc3 = 0x13;"},
{"lineNum":"   57","line":"    /// Device Control Four."},
{"lineNum":"   58","line":"    pub const dc4 = 0x14;"},
{"lineNum":"   59","line":"    /// Negative Acknowledge."},
{"lineNum":"   60","line":"    pub const nak = 0x15;"},
{"lineNum":"   61","line":"    /// Synchronous Idle."},
{"lineNum":"   62","line":"    pub const syn = 0x16;"},
{"lineNum":"   63","line":"    /// End of Transmission Block"},
{"lineNum":"   64","line":"    pub const etb = 0x17;"},
{"lineNum":"   65","line":"    /// Cancel."},
{"lineNum":"   66","line":"    pub const can = 0x18;"},
{"lineNum":"   67","line":"    /// End of Medium."},
{"lineNum":"   68","line":"    pub const em = 0x19;"},
{"lineNum":"   69","line":"    /// Substitute."},
{"lineNum":"   70","line":"    pub const sub = 0x1A;"},
{"lineNum":"   71","line":"    /// Escape."},
{"lineNum":"   72","line":"    pub const esc = 0x1B;"},
{"lineNum":"   73","line":"    /// File Separator."},
{"lineNum":"   74","line":"    pub const fs = 0x1C;"},
{"lineNum":"   75","line":"    /// Group Separator."},
{"lineNum":"   76","line":"    pub const gs = 0x1D;"},
{"lineNum":"   77","line":"    /// Record Separator."},
{"lineNum":"   78","line":"    pub const rs = 0x1E;"},
{"lineNum":"   79","line":"    /// Unit Separator."},
{"lineNum":"   80","line":"    pub const us = 0x1F;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    /// Delete."},
{"lineNum":"   83","line":"    pub const del = 0x7F;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    /// An alias to `dc1`."},
{"lineNum":"   86","line":"    pub const xon = dc1;"},
{"lineNum":"   87","line":"    /// An alias to `dc3`."},
{"lineNum":"   88","line":"    pub const xoff = dc3;"},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"/// Returns whether the character is alphanumeric: A-Z, a-z, or 0-9."},
{"lineNum":"   92","line":"pub fn isAlphanumeric(c: u8) bool {","class":"lineCov","hits":"1","order":"731","possible_hits":"1",},
{"lineNum":"   93","line":"    return switch (c) {","class":"lineCov","hits":"1","order":"732","possible_hits":"1",},
{"lineNum":"   94","line":"        \'0\'...\'9\', \'A\'...\'Z\', \'a\'...\'z\' => true,"},
{"lineNum":"   95","line":"        else => false,"},
{"lineNum":"   96","line":"    };"},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"/// Returns whether the character is alphabetic: A-Z or a-z."},
{"lineNum":"  100","line":"pub fn isAlphabetic(c: u8) bool {"},
{"lineNum":"  101","line":"    return switch (c) {"},
{"lineNum":"  102","line":"        \'A\'...\'Z\', \'a\'...\'z\' => true,"},
{"lineNum":"  103","line":"        else => false,"},
{"lineNum":"  104","line":"    };"},
{"lineNum":"  105","line":"}"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"/// Returns whether the character is a control character."},
{"lineNum":"  108","line":"///"},
{"lineNum":"  109","line":"/// See also: `control_code`"},
{"lineNum":"  110","line":"pub fn isControl(c: u8) bool {","class":"lineCov","hits":"1","order":"790","possible_hits":"1",},
{"lineNum":"  111","line":"    return c <= control_code.us or c == control_code.del;","class":"lineCov","hits":"1","order":"791","possible_hits":"1",},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"/// Returns whether the character is a digit."},
{"lineNum":"  115","line":"pub fn isDigit(c: u8) bool {","class":"lineCov","hits":"1","order":"1320","possible_hits":"1",},
{"lineNum":"  116","line":"    return switch (c) {","class":"lineCov","hits":"1","order":"1321","possible_hits":"1",},
{"lineNum":"  117","line":"        \'0\'...\'9\' => true,"},
{"lineNum":"  118","line":"        else => false,"},
{"lineNum":"  119","line":"    };"},
{"lineNum":"  120","line":"}"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"/// Returns whether the character is a lowercase letter."},
{"lineNum":"  123","line":"pub fn isLower(c: u8) bool {"},
{"lineNum":"  124","line":"    return switch (c) {"},
{"lineNum":"  125","line":"        \'a\'...\'z\' => true,"},
{"lineNum":"  126","line":"        else => false,"},
{"lineNum":"  127","line":"    };"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"/// Returns whether the character is printable and has some graphical representation,"},
{"lineNum":"  131","line":"/// including the space character."},
{"lineNum":"  132","line":"pub fn isPrint(c: u8) bool {","class":"lineCov","hits":"1","order":"786","possible_hits":"1",},
{"lineNum":"  133","line":"    return isASCII(c) and !isControl(c);","class":"lineCov","hits":"1","order":"787","possible_hits":"1",},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"/// Returns whether this character is included in `whitespace`."},
{"lineNum":"  137","line":"pub fn isWhitespace(c: u8) bool {"},
{"lineNum":"  138","line":"    return for (whitespace) |other| {"},
{"lineNum":"  139","line":"        if (c == other)"},
{"lineNum":"  140","line":"            break true;"},
{"lineNum":"  141","line":"    } else false;"},
{"lineNum":"  142","line":"}"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"/// Whitespace for general use."},
{"lineNum":"  145","line":"/// This may be used with e.g. `std.mem.trim` to trim whitespace."},
{"lineNum":"  146","line":"///"},
{"lineNum":"  147","line":"/// See also: `isWhitespace`"},
{"lineNum":"  148","line":"pub const whitespace = [_]u8{ \' \', \'\\t\', \'\\n\', \'\\r\', control_code.vt, control_code.ff };"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"test \"whitespace\" {"},
{"lineNum":"  151","line":"    for (whitespace) |char| try std.testing.expect(isWhitespace(char));"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    var i: u8 = 0;"},
{"lineNum":"  154","line":"    while (isASCII(i)) : (i += 1) {"},
{"lineNum":"  155","line":"        if (isWhitespace(i)) try std.testing.expect(std.mem.indexOfScalar(u8, &whitespace, i) != null);"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"/// Returns whether the character is an uppercase letter."},
{"lineNum":"  160","line":"pub fn isUpper(c: u8) bool {"},
{"lineNum":"  161","line":"    return switch (c) {"},
{"lineNum":"  162","line":"        \'A\'...\'Z\' => true,"},
{"lineNum":"  163","line":"        else => false,"},
{"lineNum":"  164","line":"    };"},
{"lineNum":"  165","line":"}"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"/// Returns whether the character is a hexadecimal digit: A-F, a-f, or 0-9."},
{"lineNum":"  168","line":"pub fn isHex(c: u8) bool {"},
{"lineNum":"  169","line":"    return switch (c) {"},
{"lineNum":"  170","line":"        \'0\'...\'9\', \'A\'...\'F\', \'a\'...\'f\' => true,"},
{"lineNum":"  171","line":"        else => false,"},
{"lineNum":"  172","line":"    };"},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"/// Returns whether the character is a 7-bit ASCII character."},
{"lineNum":"  176","line":"pub fn isASCII(c: u8) bool {","class":"lineCov","hits":"1","order":"788","possible_hits":"1",},
{"lineNum":"  177","line":"    return c < 128;","class":"lineCov","hits":"1","order":"789","possible_hits":"1",},
{"lineNum":"  178","line":"}"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"/// Uppercases the character and returns it as-is if already uppercase or not a letter."},
{"lineNum":"  181","line":"pub fn toUpper(c: u8) u8 {"},
{"lineNum":"  182","line":"    if (isLower(c)) {"},
{"lineNum":"  183","line":"        return c & 0b11011111;"},
{"lineNum":"  184","line":"    } else {"},
{"lineNum":"  185","line":"        return c;"},
{"lineNum":"  186","line":"    }"},
{"lineNum":"  187","line":"}"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"/// Lowercases the character and returns it as-is if already lowercase or not a letter."},
{"lineNum":"  190","line":"pub fn toLower(c: u8) u8 {"},
{"lineNum":"  191","line":"    if (isUpper(c)) {"},
{"lineNum":"  192","line":"        return c | 0b00100000;"},
{"lineNum":"  193","line":"    } else {"},
{"lineNum":"  194","line":"        return c;"},
{"lineNum":"  195","line":"    }"},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"test \"ASCII character classes\" {"},
{"lineNum":"  199","line":"    const testing = std.testing;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    try testing.expect(!isControl(\'a\'));"},
{"lineNum":"  202","line":"    try testing.expect(!isControl(\'z\'));"},
{"lineNum":"  203","line":"    try testing.expect(!isControl(\' \'));"},
{"lineNum":"  204","line":"    try testing.expect(isControl(control_code.nul));"},
{"lineNum":"  205","line":"    try testing.expect(isControl(control_code.ff));"},
{"lineNum":"  206","line":"    try testing.expect(isControl(control_code.us));"},
{"lineNum":"  207","line":"    try testing.expect(isControl(control_code.del));"},
{"lineNum":"  208","line":"    try testing.expect(!isControl(0x80));"},
{"lineNum":"  209","line":"    try testing.expect(!isControl(0xff));"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    try testing.expect(\'C\' == toUpper(\'c\'));"},
{"lineNum":"  212","line":"    try testing.expect(\':\' == toUpper(\':\'));"},
{"lineNum":"  213","line":"    try testing.expect(\'\\xab\' == toUpper(\'\\xab\'));"},
{"lineNum":"  214","line":"    try testing.expect(!isUpper(\'z\'));"},
{"lineNum":"  215","line":"    try testing.expect(!isUpper(0x80));"},
{"lineNum":"  216","line":"    try testing.expect(!isUpper(0xff));"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    try testing.expect(\'c\' == toLower(\'C\'));"},
{"lineNum":"  219","line":"    try testing.expect(\':\' == toLower(\':\'));"},
{"lineNum":"  220","line":"    try testing.expect(\'\\xab\' == toLower(\'\\xab\'));"},
{"lineNum":"  221","line":"    try testing.expect(!isLower(\'Z\'));"},
{"lineNum":"  222","line":"    try testing.expect(!isLower(0x80));"},
{"lineNum":"  223","line":"    try testing.expect(!isLower(0xff));"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    try testing.expect(isAlphanumeric(\'Z\'));"},
{"lineNum":"  226","line":"    try testing.expect(isAlphanumeric(\'z\'));"},
{"lineNum":"  227","line":"    try testing.expect(isAlphanumeric(\'5\'));"},
{"lineNum":"  228","line":"    try testing.expect(isAlphanumeric(\'a\'));"},
{"lineNum":"  229","line":"    try testing.expect(!isAlphanumeric(\'!\'));"},
{"lineNum":"  230","line":"    try testing.expect(!isAlphanumeric(0x80));"},
{"lineNum":"  231","line":"    try testing.expect(!isAlphanumeric(0xff));"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    try testing.expect(!isAlphabetic(\'5\'));"},
{"lineNum":"  234","line":"    try testing.expect(isAlphabetic(\'c\'));"},
{"lineNum":"  235","line":"    try testing.expect(!isAlphabetic(\'@\'));"},
{"lineNum":"  236","line":"    try testing.expect(isAlphabetic(\'Z\'));"},
{"lineNum":"  237","line":"    try testing.expect(!isAlphabetic(0x80));"},
{"lineNum":"  238","line":"    try testing.expect(!isAlphabetic(0xff));"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    try testing.expect(isWhitespace(\' \'));"},
{"lineNum":"  241","line":"    try testing.expect(isWhitespace(\'\\t\'));"},
{"lineNum":"  242","line":"    try testing.expect(isWhitespace(\'\\r\'));"},
{"lineNum":"  243","line":"    try testing.expect(isWhitespace(\'\\n\'));"},
{"lineNum":"  244","line":"    try testing.expect(isWhitespace(control_code.ff));"},
{"lineNum":"  245","line":"    try testing.expect(!isWhitespace(\'.\'));"},
{"lineNum":"  246","line":"    try testing.expect(!isWhitespace(control_code.us));"},
{"lineNum":"  247","line":"    try testing.expect(!isWhitespace(0x80));"},
{"lineNum":"  248","line":"    try testing.expect(!isWhitespace(0xff));"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    try testing.expect(!isHex(\'g\'));"},
{"lineNum":"  251","line":"    try testing.expect(isHex(\'b\'));"},
{"lineNum":"  252","line":"    try testing.expect(isHex(\'F\'));"},
{"lineNum":"  253","line":"    try testing.expect(isHex(\'9\'));"},
{"lineNum":"  254","line":"    try testing.expect(!isHex(0x80));"},
{"lineNum":"  255","line":"    try testing.expect(!isHex(0xff));"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    try testing.expect(!isDigit(\'~\'));"},
{"lineNum":"  258","line":"    try testing.expect(isDigit(\'0\'));"},
{"lineNum":"  259","line":"    try testing.expect(isDigit(\'9\'));"},
{"lineNum":"  260","line":"    try testing.expect(!isDigit(0x80));"},
{"lineNum":"  261","line":"    try testing.expect(!isDigit(0xff));"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    try testing.expect(isPrint(\' \'));"},
{"lineNum":"  264","line":"    try testing.expect(isPrint(\'@\'));"},
{"lineNum":"  265","line":"    try testing.expect(isPrint(\'~\'));"},
{"lineNum":"  266","line":"    try testing.expect(!isPrint(control_code.esc));"},
{"lineNum":"  267","line":"    try testing.expect(!isPrint(0x80));"},
{"lineNum":"  268","line":"    try testing.expect(!isPrint(0xff));"},
{"lineNum":"  269","line":"}"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"/// Writes a lower case copy of `ascii_string` to `output`."},
{"lineNum":"  272","line":"/// Asserts `output.len >= ascii_string.len`."},
{"lineNum":"  273","line":"pub fn lowerString(output: []u8, ascii_string: []const u8) []u8 {"},
{"lineNum":"  274","line":"    std.debug.assert(output.len >= ascii_string.len);"},
{"lineNum":"  275","line":"    for (ascii_string, 0..) |c, i| {"},
{"lineNum":"  276","line":"        output[i] = toLower(c);"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":"    return output[0..ascii_string.len];"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"test \"lowerString\" {"},
{"lineNum":"  282","line":"    var buf: [1024]u8 = undefined;"},
{"lineNum":"  283","line":"    const result = lowerString(&buf, \"aBcDeFgHiJkLmNOPqrst0234+💩!\");"},
{"lineNum":"  284","line":"    try std.testing.expectEqualStrings(\"abcdefghijklmnopqrst0234+💩!\", result);"},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"/// Allocates a lower case copy of `ascii_string`."},
{"lineNum":"  288","line":"/// Caller owns returned string and must free with `allocator`."},
{"lineNum":"  289","line":"pub fn allocLowerString(allocator: std.mem.Allocator, ascii_string: []const u8) ![]u8 {"},
{"lineNum":"  290","line":"    const result = try allocator.alloc(u8, ascii_string.len);"},
{"lineNum":"  291","line":"    return lowerString(result, ascii_string);"},
{"lineNum":"  292","line":"}"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"test \"allocLowerString\" {"},
{"lineNum":"  295","line":"    const result = try allocLowerString(std.testing.allocator, \"aBcDeFgHiJkLmNOPqrst0234+💩!\");"},
{"lineNum":"  296","line":"    defer std.testing.allocator.free(result);"},
{"lineNum":"  297","line":"    try std.testing.expectEqualStrings(\"abcdefghijklmnopqrst0234+💩!\", result);"},
{"lineNum":"  298","line":"}"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"/// Writes an upper case copy of `ascii_string` to `output`."},
{"lineNum":"  301","line":"/// Asserts `output.len >= ascii_string.len`."},
{"lineNum":"  302","line":"pub fn upperString(output: []u8, ascii_string: []const u8) []u8 {"},
{"lineNum":"  303","line":"    std.debug.assert(output.len >= ascii_string.len);"},
{"lineNum":"  304","line":"    for (ascii_string, 0..) |c, i| {"},
{"lineNum":"  305","line":"        output[i] = toUpper(c);"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":"    return output[0..ascii_string.len];"},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"test \"upperString\" {"},
{"lineNum":"  311","line":"    var buf: [1024]u8 = undefined;"},
{"lineNum":"  312","line":"    const result = upperString(&buf, \"aBcDeFgHiJkLmNOPqrst0234+💩!\");"},
{"lineNum":"  313","line":"    try std.testing.expectEqualStrings(\"ABCDEFGHIJKLMNOPQRST0234+💩!\", result);"},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"/// Allocates an upper case copy of `ascii_string`."},
{"lineNum":"  317","line":"/// Caller owns returned string and must free with `allocator`."},
{"lineNum":"  318","line":"pub fn allocUpperString(allocator: std.mem.Allocator, ascii_string: []const u8) ![]u8 {"},
{"lineNum":"  319","line":"    const result = try allocator.alloc(u8, ascii_string.len);"},
{"lineNum":"  320","line":"    return upperString(result, ascii_string);"},
{"lineNum":"  321","line":"}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"test \"allocUpperString\" {"},
{"lineNum":"  324","line":"    const result = try allocUpperString(std.testing.allocator, \"aBcDeFgHiJkLmNOPqrst0234+💩!\");"},
{"lineNum":"  325","line":"    defer std.testing.allocator.free(result);"},
{"lineNum":"  326","line":"    try std.testing.expectEqualStrings(\"ABCDEFGHIJKLMNOPQRST0234+💩!\", result);"},
{"lineNum":"  327","line":"}"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"/// Compares strings `a` and `b` case-insensitively and returns whether they are equal."},
{"lineNum":"  330","line":"pub fn eqlIgnoreCase(a: []const u8, b: []const u8) bool {"},
{"lineNum":"  331","line":"    if (a.len != b.len) return false;"},
{"lineNum":"  332","line":"    for (a, 0..) |a_c, i| {"},
{"lineNum":"  333","line":"        if (toLower(a_c) != toLower(b[i])) return false;"},
{"lineNum":"  334","line":"    }"},
{"lineNum":"  335","line":"    return true;"},
{"lineNum":"  336","line":"}"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"test \"eqlIgnoreCase\" {"},
{"lineNum":"  339","line":"    try std.testing.expect(eqlIgnoreCase(\"HEl💩Lo!\", \"hel💩lo!\"));"},
{"lineNum":"  340","line":"    try std.testing.expect(!eqlIgnoreCase(\"hElLo!\", \"hello! \"));"},
{"lineNum":"  341","line":"    try std.testing.expect(!eqlIgnoreCase(\"hElLo!\", \"helro!\"));"},
{"lineNum":"  342","line":"}"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"pub fn startsWithIgnoreCase(haystack: []const u8, needle: []const u8) bool {"},
{"lineNum":"  345","line":"    return if (needle.len > haystack.len) false else eqlIgnoreCase(haystack[0..needle.len], needle);"},
{"lineNum":"  346","line":"}"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"test \"startsWithIgnoreCase\" {"},
{"lineNum":"  349","line":"    try std.testing.expect(startsWithIgnoreCase(\"boB\", \"Bo\"));"},
{"lineNum":"  350","line":"    try std.testing.expect(!startsWithIgnoreCase(\"Needle in hAyStAcK\", \"haystack\"));"},
{"lineNum":"  351","line":"}"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"pub fn endsWithIgnoreCase(haystack: []const u8, needle: []const u8) bool {"},
{"lineNum":"  354","line":"    return if (needle.len > haystack.len) false else eqlIgnoreCase(haystack[haystack.len - needle.len ..], needle);"},
{"lineNum":"  355","line":"}"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"test \"endsWithIgnoreCase\" {"},
{"lineNum":"  358","line":"    try std.testing.expect(endsWithIgnoreCase(\"Needle in HaYsTaCk\", \"haystack\"));"},
{"lineNum":"  359","line":"    try std.testing.expect(!endsWithIgnoreCase(\"BoB\", \"Bo\"));"},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"/// Finds `needle` in `haystack`, ignoring case, starting at index 0."},
{"lineNum":"  363","line":"pub fn indexOfIgnoreCase(haystack: []const u8, needle: []const u8) ?usize {"},
{"lineNum":"  364","line":"    return indexOfIgnoreCasePos(haystack, 0, needle);"},
{"lineNum":"  365","line":"}"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"/// Finds `needle` in `haystack`, ignoring case, starting at `start_index`."},
{"lineNum":"  368","line":"/// Uses Boyer-Moore-Horspool algorithm on large inputs; `indexOfIgnoreCasePosLinear` on small inputs."},
{"lineNum":"  369","line":"pub fn indexOfIgnoreCasePos(haystack: []const u8, start_index: usize, needle: []const u8) ?usize {"},
{"lineNum":"  370","line":"    if (needle.len > haystack.len) return null;"},
{"lineNum":"  371","line":"    if (needle.len == 0) return start_index;"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    if (haystack.len < 52 or needle.len <= 4)"},
{"lineNum":"  374","line":"        return indexOfIgnoreCasePosLinear(haystack, start_index, needle);"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    var skip_table: [256]usize = undefined;"},
{"lineNum":"  377","line":"    boyerMooreHorspoolPreprocessIgnoreCase(needle, skip_table[0..]);"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    var i: usize = start_index;"},
{"lineNum":"  380","line":"    while (i <= haystack.len - needle.len) {"},
{"lineNum":"  381","line":"        if (eqlIgnoreCase(haystack[i .. i + needle.len], needle)) return i;"},
{"lineNum":"  382","line":"        i += skip_table[toLower(haystack[i + needle.len - 1])];"},
{"lineNum":"  383","line":"    }"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    return null;"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"/// Consider using `indexOfIgnoreCasePos` instead of this, which will automatically use a"},
{"lineNum":"  389","line":"/// more sophisticated algorithm on larger inputs."},
{"lineNum":"  390","line":"pub fn indexOfIgnoreCasePosLinear(haystack: []const u8, start_index: usize, needle: []const u8) ?usize {"},
{"lineNum":"  391","line":"    var i: usize = start_index;"},
{"lineNum":"  392","line":"    const end = haystack.len - needle.len;"},
{"lineNum":"  393","line":"    while (i <= end) : (i += 1) {"},
{"lineNum":"  394","line":"        if (eqlIgnoreCase(haystack[i .. i + needle.len], needle)) return i;"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":"    return null;"},
{"lineNum":"  397","line":"}"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"fn boyerMooreHorspoolPreprocessIgnoreCase(pattern: []const u8, table: *[256]usize) void {"},
{"lineNum":"  400","line":"    for (table) |*c| {"},
{"lineNum":"  401","line":"        c.* = pattern.len;"},
{"lineNum":"  402","line":"    }"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    var i: usize = 0;"},
{"lineNum":"  405","line":"    // The last item is intentionally ignored and the skip size will be pattern.len."},
{"lineNum":"  406","line":"    // This is the standard way Boyer-Moore-Horspool is implemented."},
{"lineNum":"  407","line":"    while (i < pattern.len - 1) : (i += 1) {"},
{"lineNum":"  408","line":"        table[toLower(pattern[i])] = pattern.len - 1 - i;"},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":"}"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"test \"indexOfIgnoreCase\" {"},
{"lineNum":"  413","line":"    try std.testing.expect(indexOfIgnoreCase(\"one Two Three Four\", \"foUr\").? == 14);"},
{"lineNum":"  414","line":"    try std.testing.expect(indexOfIgnoreCase(\"one two three FouR\", \"gOur\") == null);"},
{"lineNum":"  415","line":"    try std.testing.expect(indexOfIgnoreCase(\"foO\", \"Foo\").? == 0);"},
{"lineNum":"  416","line":"    try std.testing.expect(indexOfIgnoreCase(\"foo\", \"fool\") == null);"},
{"lineNum":"  417","line":"    try std.testing.expect(indexOfIgnoreCase(\"FOO foo\", \"fOo\").? == 0);"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    try std.testing.expect(indexOfIgnoreCase(\"one two three four five six seven eight nine ten eleven\", \"ThReE fOUr\").? == 8);"},
{"lineNum":"  420","line":"    try std.testing.expect(indexOfIgnoreCase(\"one two three four five six seven eight nine ten eleven\", \"Two tWo\") == null);"},
{"lineNum":"  421","line":"}"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"/// Returns the lexicographical order of two slices. O(n)."},
{"lineNum":"  424","line":"pub fn orderIgnoreCase(lhs: []const u8, rhs: []const u8) std.math.Order {"},
{"lineNum":"  425","line":"    const n = @min(lhs.len, rhs.len);"},
{"lineNum":"  426","line":"    var i: usize = 0;"},
{"lineNum":"  427","line":"    while (i < n) : (i += 1) {"},
{"lineNum":"  428","line":"        switch (std.math.order(toLower(lhs[i]), toLower(rhs[i]))) {"},
{"lineNum":"  429","line":"            .eq => continue,"},
{"lineNum":"  430","line":"            .lt => return .lt,"},
{"lineNum":"  431","line":"            .gt => return .gt,"},
{"lineNum":"  432","line":"        }"},
{"lineNum":"  433","line":"    }"},
{"lineNum":"  434","line":"    return std.math.order(lhs.len, rhs.len);"},
{"lineNum":"  435","line":"}"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"/// Returns whether the lexicographical order of `lhs` is lower than `rhs`."},
{"lineNum":"  438","line":"pub fn lessThanIgnoreCase(lhs: []const u8, rhs: []const u8) bool {"},
{"lineNum":"  439","line":"    return orderIgnoreCase(lhs, rhs) == .lt;"},
{"lineNum":"  440","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 10, "covered" : 10,};
var merged_data = [];
