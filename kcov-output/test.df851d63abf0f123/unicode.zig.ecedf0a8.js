var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"./std.zig\");"},
{"lineNum":"    2","line":"const assert = std.debug.assert;"},
{"lineNum":"    3","line":"const testing = std.testing;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"/// Use this to replace an unknown, unrecognized, or unrepresentable character."},
{"lineNum":"    7","line":"///"},
{"lineNum":"    8","line":"/// See also: https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character"},
{"lineNum":"    9","line":"pub const replacement_character: u21 = 0xFFFD;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// Returns how many bytes the UTF-8 representation would require"},
{"lineNum":"   12","line":"/// for the given codepoint."},
{"lineNum":"   13","line":"pub fn utf8CodepointSequenceLength(c: u21) !u3 {"},
{"lineNum":"   14","line":"    if (c < 0x80) return @as(u3, 1);"},
{"lineNum":"   15","line":"    if (c < 0x800) return @as(u3, 2);"},
{"lineNum":"   16","line":"    if (c < 0x10000) return @as(u3, 3);"},
{"lineNum":"   17","line":"    if (c < 0x110000) return @as(u3, 4);"},
{"lineNum":"   18","line":"    return error.CodepointTooLarge;"},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"/// Given the first byte of a UTF-8 codepoint,"},
{"lineNum":"   22","line":"/// returns a number 1-4 indicating the total length of the codepoint in bytes."},
{"lineNum":"   23","line":"/// If this byte does not match the form of a UTF-8 start byte, returns Utf8InvalidStartByte."},
{"lineNum":"   24","line":"pub fn utf8ByteSequenceLength(first_byte: u8) !u3 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"    // The switch is optimized much better than a \"smart\" approach using @clz"},
{"lineNum":"   26","line":"    return switch (first_byte) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"        0b0000_0000...0b0111_1111 => 1,"},
{"lineNum":"   28","line":"        0b1100_0000...0b1101_1111 => 2,"},
{"lineNum":"   29","line":"        0b1110_0000...0b1110_1111 => 3,"},
{"lineNum":"   30","line":"        0b1111_0000...0b1111_0111 => 4,"},
{"lineNum":"   31","line":"        else => error.Utf8InvalidStartByte,"},
{"lineNum":"   32","line":"    };"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/// Encodes the given codepoint into a UTF-8 byte sequence."},
{"lineNum":"   36","line":"/// c: the codepoint."},
{"lineNum":"   37","line":"/// out: the out buffer to write to. Must have a len >= utf8CodepointSequenceLength(c)."},
{"lineNum":"   38","line":"/// Errors: if c cannot be encoded in UTF-8."},
{"lineNum":"   39","line":"/// Returns: the number of bytes written to out."},
{"lineNum":"   40","line":"pub fn utf8Encode(c: u21, out: []u8) !u3 {"},
{"lineNum":"   41","line":"    const length = try utf8CodepointSequenceLength(c);"},
{"lineNum":"   42","line":"    assert(out.len >= length);"},
{"lineNum":"   43","line":"    switch (length) {"},
{"lineNum":"   44","line":"        // The pattern for each is the same"},
{"lineNum":"   45","line":"        // - Increasing the initial shift by 6 each time"},
{"lineNum":"   46","line":"        // - Each time after the first shorten the shifted"},
{"lineNum":"   47","line":"        //   value to a max of 0b111111 (63)"},
{"lineNum":"   48","line":"        1 => out[0] = @as(u8, @intCast(c)), // Can just do 0 + codepoint for initial range"},
{"lineNum":"   49","line":"        2 => {"},
{"lineNum":"   50","line":"            out[0] = @as(u8, @intCast(0b11000000 | (c >> 6)));"},
{"lineNum":"   51","line":"            out[1] = @as(u8, @intCast(0b10000000 | (c & 0b111111)));"},
{"lineNum":"   52","line":"        },"},
{"lineNum":"   53","line":"        3 => {"},
{"lineNum":"   54","line":"            if (0xd800 <= c and c <= 0xdfff) return error.Utf8CannotEncodeSurrogateHalf;"},
{"lineNum":"   55","line":"            out[0] = @as(u8, @intCast(0b11100000 | (c >> 12)));"},
{"lineNum":"   56","line":"            out[1] = @as(u8, @intCast(0b10000000 | ((c >> 6) & 0b111111)));"},
{"lineNum":"   57","line":"            out[2] = @as(u8, @intCast(0b10000000 | (c & 0b111111)));"},
{"lineNum":"   58","line":"        },"},
{"lineNum":"   59","line":"        4 => {"},
{"lineNum":"   60","line":"            out[0] = @as(u8, @intCast(0b11110000 | (c >> 18)));"},
{"lineNum":"   61","line":"            out[1] = @as(u8, @intCast(0b10000000 | ((c >> 12) & 0b111111)));"},
{"lineNum":"   62","line":"            out[2] = @as(u8, @intCast(0b10000000 | ((c >> 6) & 0b111111)));"},
{"lineNum":"   63","line":"            out[3] = @as(u8, @intCast(0b10000000 | (c & 0b111111)));"},
{"lineNum":"   64","line":"        },"},
{"lineNum":"   65","line":"        else => unreachable,"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":"    return length;"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"const Utf8DecodeError = Utf8Decode2Error || Utf8Decode3Error || Utf8Decode4Error;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"/// Decodes the UTF-8 codepoint encoded in the given slice of bytes."},
{"lineNum":"   73","line":"/// bytes.len must be equal to utf8ByteSequenceLength(bytes[0]) catch unreachable."},
{"lineNum":"   74","line":"/// If you already know the length at comptime, you can call one of"},
{"lineNum":"   75","line":"/// utf8Decode2,utf8Decode3,utf8Decode4 directly instead of this function."},
{"lineNum":"   76","line":"pub fn utf8Decode(bytes: []const u8) Utf8DecodeError!u21 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"    return switch (bytes.len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"        1 => @as(u21, bytes[0]),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"        2 => utf8Decode2(bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"        3 => utf8Decode3(bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"        4 => utf8Decode4(bytes),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    };"},
{"lineNum":"   84","line":"}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"const Utf8Decode2Error = error{"},
{"lineNum":"   87","line":"    Utf8ExpectedContinuation,"},
{"lineNum":"   88","line":"    Utf8OverlongEncoding,"},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":"pub fn utf8Decode2(bytes: []const u8) Utf8Decode2Error!u21 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"    assert(bytes.len == 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    assert(bytes[0] & 0b11100000 == 0b11000000);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"    var value: u21 = bytes[0] & 0b00011111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"    value <<= 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   97","line":"    value |= bytes[1] & 0b00111111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    if (value < 0x80) return error.Utf8OverlongEncoding;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"const Utf8Decode3Error = error{"},
{"lineNum":"  105","line":"    Utf8ExpectedContinuation,"},
{"lineNum":"  106","line":"    Utf8OverlongEncoding,"},
{"lineNum":"  107","line":"    Utf8EncodesSurrogateHalf,"},
{"lineNum":"  108","line":"};"},
{"lineNum":"  109","line":"pub fn utf8Decode3(bytes: []const u8) Utf8Decode3Error!u21 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"    assert(bytes.len == 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"    assert(bytes[0] & 0b11110000 == 0b11100000);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"    var value: u21 = bytes[0] & 0b00001111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"    value <<= 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  116","line":"    value |= bytes[1] & 0b00111111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"    value <<= 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  120","line":"    value |= bytes[2] & 0b00111111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    if (value < 0x800) return error.Utf8OverlongEncoding;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"    if (0xd800 <= value and value <= 0xdfff) return error.Utf8EncodesSurrogateHalf;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"}"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"const Utf8Decode4Error = error{"},
{"lineNum":"  129","line":"    Utf8ExpectedContinuation,"},
{"lineNum":"  130","line":"    Utf8OverlongEncoding,"},
{"lineNum":"  131","line":"    Utf8CodepointTooLarge,"},
{"lineNum":"  132","line":"};"},
{"lineNum":"  133","line":"pub fn utf8Decode4(bytes: []const u8) Utf8Decode4Error!u21 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"    assert(bytes.len == 4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"    assert(bytes[0] & 0b11111000 == 0b11110000);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"    var value: u21 = bytes[0] & 0b00000111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"    value <<= 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  140","line":"    value |= bytes[1] & 0b00111111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"    value <<= 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  144","line":"    value |= bytes[2] & 0b00111111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    if (bytes[3] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"    value <<= 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  148","line":"    value |= bytes[3] & 0b00111111;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    if (value < 0x10000) return error.Utf8OverlongEncoding;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"    if (value > 0x10FFFF) return error.Utf8CodepointTooLarge;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    return value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"}"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"/// Returns true if the given unicode codepoint can be encoded in UTF-8."},
{"lineNum":"  157","line":"pub fn utf8ValidCodepoint(value: u21) bool {"},
{"lineNum":"  158","line":"    return switch (value) {"},
{"lineNum":"  159","line":"        0xD800...0xDFFF => false, // Surrogates range"},
{"lineNum":"  160","line":"        0x110000...0x1FFFFF => false, // Above the maximum codepoint value"},
{"lineNum":"  161","line":"        else => true,"},
{"lineNum":"  162","line":"    };"},
{"lineNum":"  163","line":"}"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"/// Returns the length of a supplied UTF-8 string literal in terms of unicode"},
{"lineNum":"  166","line":"/// codepoints."},
{"lineNum":"  167","line":"pub fn utf8CountCodepoints(s: []const u8) !usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"    var len: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    const N = @sizeOf(usize);"},
{"lineNum":"  171","line":"    const MASK = 0x80 * (std.math.maxInt(usize) / 0xff);"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    while (i < s.len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  175","line":"        // Fast path for ASCII sequences"},
{"lineNum":"  176","line":"        while (i + N <= s.len) : (i += N) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  177","line":"            const v = mem.readIntNative(usize, s[i..][0..N]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  178","line":"            if (v & MASK != 0) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  179","line":"            len += N;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"        }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        if (i < s.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"            const n = try utf8ByteSequenceLength(s[i]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"            if (i + n > s.len) return error.TruncatedInput;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            switch (n) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  187","line":"                1 => {}, // ASCII, no validation needed"},
{"lineNum":"  188","line":"                else => _ = try utf8Decode(s[i..][0..n]),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"            }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            i += n;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"            len += 1;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  193","line":"        }"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    return len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"}"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"pub fn utf8ValidateSlice(s: []const u8) bool {"},
{"lineNum":"  200","line":"    var i: usize = 0;"},
{"lineNum":"  201","line":"    while (i < s.len) {"},
{"lineNum":"  202","line":"        if (utf8ByteSequenceLength(s[i])) |cp_len| {"},
{"lineNum":"  203","line":"            if (i + cp_len > s.len) {"},
{"lineNum":"  204","line":"                return false;"},
{"lineNum":"  205","line":"            }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"            if (std.meta.isError(utf8Decode(s[i .. i + cp_len]))) {"},
{"lineNum":"  208","line":"                return false;"},
{"lineNum":"  209","line":"            }"},
{"lineNum":"  210","line":"            i += cp_len;"},
{"lineNum":"  211","line":"        } else |_| {"},
{"lineNum":"  212","line":"            return false;"},
{"lineNum":"  213","line":"        }"},
{"lineNum":"  214","line":"    }"},
{"lineNum":"  215","line":"    return true;"},
{"lineNum":"  216","line":"}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"/// Utf8View iterates the code points of a utf-8 encoded string."},
{"lineNum":"  219","line":"///"},
{"lineNum":"  220","line":"/// ```"},
{"lineNum":"  221","line":"/// var utf8 = (try std.unicode.Utf8View.init(\"hi there\")).iterator();"},
{"lineNum":"  222","line":"/// while (utf8.nextCodepointSlice()) |codepoint| {"},
{"lineNum":"  223","line":"///   std.debug.print(\"got codepoint {}\\n\", .{codepoint});"},
{"lineNum":"  224","line":"/// }"},
{"lineNum":"  225","line":"/// ```"},
{"lineNum":"  226","line":"pub const Utf8View = struct {"},
{"lineNum":"  227","line":"    bytes: []const u8,"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    pub fn init(s: []const u8) !Utf8View {"},
{"lineNum":"  230","line":"        if (!utf8ValidateSlice(s)) {"},
{"lineNum":"  231","line":"            return error.InvalidUtf8;"},
{"lineNum":"  232","line":"        }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        return initUnchecked(s);"},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    pub fn initUnchecked(s: []const u8) Utf8View {"},
{"lineNum":"  238","line":"        return Utf8View{ .bytes = s };"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    /// TODO: https://github.com/ziglang/zig/issues/425"},
{"lineNum":"  242","line":"    pub fn initComptime(comptime s: []const u8) Utf8View {"},
{"lineNum":"  243","line":"        if (comptime init(s)) |r| {"},
{"lineNum":"  244","line":"            return r;"},
{"lineNum":"  245","line":"        } else |err| switch (err) {"},
{"lineNum":"  246","line":"            error.InvalidUtf8 => {"},
{"lineNum":"  247","line":"                @compileError(\"invalid utf8\");"},
{"lineNum":"  248","line":"            },"},
{"lineNum":"  249","line":"        }"},
{"lineNum":"  250","line":"    }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    pub fn iterator(s: Utf8View) Utf8Iterator {"},
{"lineNum":"  253","line":"        return Utf8Iterator{"},
{"lineNum":"  254","line":"            .bytes = s.bytes,"},
{"lineNum":"  255","line":"            .i = 0,"},
{"lineNum":"  256","line":"        };"},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":"};"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"pub const Utf8Iterator = struct {"},
{"lineNum":"  261","line":"    bytes: []const u8,"},
{"lineNum":"  262","line":"    i: usize,"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    pub fn nextCodepointSlice(it: *Utf8Iterator) ?[]const u8 {"},
{"lineNum":"  265","line":"        if (it.i >= it.bytes.len) {"},
{"lineNum":"  266","line":"            return null;"},
{"lineNum":"  267","line":"        }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        const cp_len = utf8ByteSequenceLength(it.bytes[it.i]) catch unreachable;"},
{"lineNum":"  270","line":"        it.i += cp_len;"},
{"lineNum":"  271","line":"        return it.bytes[it.i - cp_len .. it.i];"},
{"lineNum":"  272","line":"    }"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    pub fn nextCodepoint(it: *Utf8Iterator) ?u21 {"},
{"lineNum":"  275","line":"        const slice = it.nextCodepointSlice() orelse return null;"},
{"lineNum":"  276","line":"        return utf8Decode(slice) catch unreachable;"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    /// Look ahead at the next n codepoints without advancing the iterator."},
{"lineNum":"  280","line":"    /// If fewer than n codepoints are available, then return the remainder of the string."},
{"lineNum":"  281","line":"    pub fn peek(it: *Utf8Iterator, n: usize) []const u8 {"},
{"lineNum":"  282","line":"        const original_i = it.i;"},
{"lineNum":"  283","line":"        defer it.i = original_i;"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"        var end_ix = original_i;"},
{"lineNum":"  286","line":"        var found: usize = 0;"},
{"lineNum":"  287","line":"        while (found < n) : (found += 1) {"},
{"lineNum":"  288","line":"            const next_codepoint = it.nextCodepointSlice() orelse return it.bytes[original_i..];"},
{"lineNum":"  289","line":"            end_ix += next_codepoint.len;"},
{"lineNum":"  290","line":"        }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        return it.bytes[original_i..end_ix];"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":"};"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"pub const Utf16LeIterator = struct {"},
{"lineNum":"  297","line":"    bytes: []const u8,"},
{"lineNum":"  298","line":"    i: usize,"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    pub fn init(s: []const u16) Utf16LeIterator {"},
{"lineNum":"  301","line":"        return Utf16LeIterator{"},
{"lineNum":"  302","line":"            .bytes = mem.sliceAsBytes(s),"},
{"lineNum":"  303","line":"            .i = 0,"},
{"lineNum":"  304","line":"        };"},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    pub fn nextCodepoint(it: *Utf16LeIterator) !?u21 {"},
{"lineNum":"  308","line":"        assert(it.i <= it.bytes.len);"},
{"lineNum":"  309","line":"        if (it.i == it.bytes.len) return null;"},
{"lineNum":"  310","line":"        const c0: u21 = mem.readIntLittle(u16, it.bytes[it.i..][0..2]);"},
{"lineNum":"  311","line":"        it.i += 2;"},
{"lineNum":"  312","line":"        if (c0 & ~@as(u21, 0x03ff) == 0xd800) {"},
{"lineNum":"  313","line":"            // surrogate pair"},
{"lineNum":"  314","line":"            if (it.i >= it.bytes.len) return error.DanglingSurrogateHalf;"},
{"lineNum":"  315","line":"            const c1: u21 = mem.readIntLittle(u16, it.bytes[it.i..][0..2]);"},
{"lineNum":"  316","line":"            if (c1 & ~@as(u21, 0x03ff) != 0xdc00) return error.ExpectedSecondSurrogateHalf;"},
{"lineNum":"  317","line":"            it.i += 2;"},
{"lineNum":"  318","line":"            return 0x10000 + (((c0 & 0x03ff) << 10) | (c1 & 0x03ff));"},
{"lineNum":"  319","line":"        } else if (c0 & ~@as(u21, 0x03ff) == 0xdc00) {"},
{"lineNum":"  320","line":"            return error.UnexpectedSecondSurrogateHalf;"},
{"lineNum":"  321","line":"        } else {"},
{"lineNum":"  322","line":"            return c0;"},
{"lineNum":"  323","line":"        }"},
{"lineNum":"  324","line":"    }"},
{"lineNum":"  325","line":"};"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"/// Returns the length of a supplied UTF-16 string literal in terms of unicode"},
{"lineNum":"  328","line":"/// codepoints."},
{"lineNum":"  329","line":"pub fn utf16CountCodepoints(utf16le: []const u16) !usize {"},
{"lineNum":"  330","line":"    var len: usize = 0;"},
{"lineNum":"  331","line":"    var it = Utf16LeIterator.init(utf16le);"},
{"lineNum":"  332","line":"    while (try it.nextCodepoint()) |_| len += 1;"},
{"lineNum":"  333","line":"    return len;"},
{"lineNum":"  334","line":"}"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"fn testUtf16CountCodepoints() !void {"},
{"lineNum":"  337","line":"    try testing.expectEqual("},
{"lineNum":"  338","line":"        @as(usize, 1),"},
{"lineNum":"  339","line":"        try utf16CountCodepoints(utf8ToUtf16LeStringLiteral(\"a\")),"},
{"lineNum":"  340","line":"    );"},
{"lineNum":"  341","line":"    try testing.expectEqual("},
{"lineNum":"  342","line":"        @as(usize, 10),"},
{"lineNum":"  343","line":"        try utf16CountCodepoints(utf8ToUtf16LeStringLiteral(\"abcdefghij\")),"},
{"lineNum":"  344","line":"    );"},
{"lineNum":"  345","line":"    try testing.expectEqual("},
{"lineNum":"  346","line":"        @as(usize, 10),"},
{"lineNum":"  347","line":"        try utf16CountCodepoints(utf8ToUtf16LeStringLiteral(\"äåéëþüúíóö\")),"},
{"lineNum":"  348","line":"    );"},
{"lineNum":"  349","line":"    try testing.expectEqual("},
{"lineNum":"  350","line":"        @as(usize, 5),"},
{"lineNum":"  351","line":"        try utf16CountCodepoints(utf8ToUtf16LeStringLiteral(\"こんにちは\")),"},
{"lineNum":"  352","line":"    );"},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"test \"utf16 count codepoints\" {"},
{"lineNum":"  356","line":"    try testUtf16CountCodepoints();"},
{"lineNum":"  357","line":"    try comptime testUtf16CountCodepoints();"},
{"lineNum":"  358","line":"}"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"test \"utf8 encode\" {"},
{"lineNum":"  361","line":"    try comptime testUtf8Encode();"},
{"lineNum":"  362","line":"    try testUtf8Encode();"},
{"lineNum":"  363","line":"}"},
{"lineNum":"  364","line":"fn testUtf8Encode() !void {"},
{"lineNum":"  365","line":"    // A few taken from wikipedia a few taken elsewhere"},
{"lineNum":"  366","line":"    var array: [4]u8 = undefined;"},
{"lineNum":"  367","line":"    try testing.expect((try utf8Encode(try utf8Decode(\"€\"), array[0..])) == 3);"},
{"lineNum":"  368","line":"    try testing.expect(array[0] == 0b11100010);"},
{"lineNum":"  369","line":"    try testing.expect(array[1] == 0b10000010);"},
{"lineNum":"  370","line":"    try testing.expect(array[2] == 0b10101100);"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    try testing.expect((try utf8Encode(try utf8Decode(\"$\"), array[0..])) == 1);"},
{"lineNum":"  373","line":"    try testing.expect(array[0] == 0b00100100);"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"    try testing.expect((try utf8Encode(try utf8Decode(\"¢\"), array[0..])) == 2);"},
{"lineNum":"  376","line":"    try testing.expect(array[0] == 0b11000010);"},
{"lineNum":"  377","line":"    try testing.expect(array[1] == 0b10100010);"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    try testing.expect((try utf8Encode(try utf8Decode(\"𐍈\"), array[0..])) == 4);"},
{"lineNum":"  380","line":"    try testing.expect(array[0] == 0b11110000);"},
{"lineNum":"  381","line":"    try testing.expect(array[1] == 0b10010000);"},
{"lineNum":"  382","line":"    try testing.expect(array[2] == 0b10001101);"},
{"lineNum":"  383","line":"    try testing.expect(array[3] == 0b10001000);"},
{"lineNum":"  384","line":"}"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"test \"utf8 encode error\" {"},
{"lineNum":"  387","line":"    try comptime testUtf8EncodeError();"},
{"lineNum":"  388","line":"    try testUtf8EncodeError();"},
{"lineNum":"  389","line":"}"},
{"lineNum":"  390","line":"fn testUtf8EncodeError() !void {"},
{"lineNum":"  391","line":"    var array: [4]u8 = undefined;"},
{"lineNum":"  392","line":"    try testErrorEncode(0xd800, array[0..], error.Utf8CannotEncodeSurrogateHalf);"},
{"lineNum":"  393","line":"    try testErrorEncode(0xdfff, array[0..], error.Utf8CannotEncodeSurrogateHalf);"},
{"lineNum":"  394","line":"    try testErrorEncode(0x110000, array[0..], error.CodepointTooLarge);"},
{"lineNum":"  395","line":"    try testErrorEncode(0x1fffff, array[0..], error.CodepointTooLarge);"},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"fn testErrorEncode(codePoint: u21, array: []u8, expectedErr: anyerror) !void {"},
{"lineNum":"  399","line":"    try testing.expectError(expectedErr, utf8Encode(codePoint, array));"},
{"lineNum":"  400","line":"}"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"test \"utf8 iterator on ascii\" {"},
{"lineNum":"  403","line":"    try comptime testUtf8IteratorOnAscii();"},
{"lineNum":"  404","line":"    try testUtf8IteratorOnAscii();"},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":"fn testUtf8IteratorOnAscii() !void {"},
{"lineNum":"  407","line":"    const s = Utf8View.initComptime(\"abc\");"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    var it1 = s.iterator();"},
{"lineNum":"  410","line":"    try testing.expect(std.mem.eql(u8, \"a\", it1.nextCodepointSlice().?));"},
{"lineNum":"  411","line":"    try testing.expect(std.mem.eql(u8, \"b\", it1.nextCodepointSlice().?));"},
{"lineNum":"  412","line":"    try testing.expect(std.mem.eql(u8, \"c\", it1.nextCodepointSlice().?));"},
{"lineNum":"  413","line":"    try testing.expect(it1.nextCodepointSlice() == null);"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    var it2 = s.iterator();"},
{"lineNum":"  416","line":"    try testing.expect(it2.nextCodepoint().? == \'a\');"},
{"lineNum":"  417","line":"    try testing.expect(it2.nextCodepoint().? == \'b\');"},
{"lineNum":"  418","line":"    try testing.expect(it2.nextCodepoint().? == \'c\');"},
{"lineNum":"  419","line":"    try testing.expect(it2.nextCodepoint() == null);"},
{"lineNum":"  420","line":"}"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"test \"utf8 view bad\" {"},
{"lineNum":"  423","line":"    try comptime testUtf8ViewBad();"},
{"lineNum":"  424","line":"    try testUtf8ViewBad();"},
{"lineNum":"  425","line":"}"},
{"lineNum":"  426","line":"fn testUtf8ViewBad() !void {"},
{"lineNum":"  427","line":"    // Compile-time error."},
{"lineNum":"  428","line":"    // const s3 = Utf8View.initComptime(\"\\xfe\\xf2\");"},
{"lineNum":"  429","line":"    try testing.expectError(error.InvalidUtf8, Utf8View.init(\"hel\\xadlo\"));"},
{"lineNum":"  430","line":"}"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"test \"utf8 view ok\" {"},
{"lineNum":"  433","line":"    try comptime testUtf8ViewOk();"},
{"lineNum":"  434","line":"    try testUtf8ViewOk();"},
{"lineNum":"  435","line":"}"},
{"lineNum":"  436","line":"fn testUtf8ViewOk() !void {"},
{"lineNum":"  437","line":"    const s = Utf8View.initComptime(\"東京市\");"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    var it1 = s.iterator();"},
{"lineNum":"  440","line":"    try testing.expect(std.mem.eql(u8, \"東\", it1.nextCodepointSlice().?));"},
{"lineNum":"  441","line":"    try testing.expect(std.mem.eql(u8, \"京\", it1.nextCodepointSlice().?));"},
{"lineNum":"  442","line":"    try testing.expect(std.mem.eql(u8, \"市\", it1.nextCodepointSlice().?));"},
{"lineNum":"  443","line":"    try testing.expect(it1.nextCodepointSlice() == null);"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"    var it2 = s.iterator();"},
{"lineNum":"  446","line":"    try testing.expect(it2.nextCodepoint().? == 0x6771);"},
{"lineNum":"  447","line":"    try testing.expect(it2.nextCodepoint().? == 0x4eac);"},
{"lineNum":"  448","line":"    try testing.expect(it2.nextCodepoint().? == 0x5e02);"},
{"lineNum":"  449","line":"    try testing.expect(it2.nextCodepoint() == null);"},
{"lineNum":"  450","line":"}"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"test \"bad utf8 slice\" {"},
{"lineNum":"  453","line":"    try comptime testBadUtf8Slice();"},
{"lineNum":"  454","line":"    try testBadUtf8Slice();"},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":"fn testBadUtf8Slice() !void {"},
{"lineNum":"  457","line":"    try testing.expect(utf8ValidateSlice(\"abc\"));"},
{"lineNum":"  458","line":"    try testing.expect(!utf8ValidateSlice(\"abc\\xc0\"));"},
{"lineNum":"  459","line":"    try testing.expect(!utf8ValidateSlice(\"abc\\xc0abc\"));"},
{"lineNum":"  460","line":"    try testing.expect(utf8ValidateSlice(\"abc\\xdf\\xbf\"));"},
{"lineNum":"  461","line":"}"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"test \"valid utf8\" {"},
{"lineNum":"  464","line":"    try comptime testValidUtf8();"},
{"lineNum":"  465","line":"    try testValidUtf8();"},
{"lineNum":"  466","line":"}"},
{"lineNum":"  467","line":"fn testValidUtf8() !void {"},
{"lineNum":"  468","line":"    try testValid(\"\\x00\", 0x0);"},
{"lineNum":"  469","line":"    try testValid(\"\\x20\", 0x20);"},
{"lineNum":"  470","line":"    try testValid(\"\\x7f\", 0x7f);"},
{"lineNum":"  471","line":"    try testValid(\"\\xc2\\x80\", 0x80);"},
{"lineNum":"  472","line":"    try testValid(\"\\xdf\\xbf\", 0x7ff);"},
{"lineNum":"  473","line":"    try testValid(\"\\xe0\\xa0\\x80\", 0x800);"},
{"lineNum":"  474","line":"    try testValid(\"\\xe1\\x80\\x80\", 0x1000);"},
{"lineNum":"  475","line":"    try testValid(\"\\xef\\xbf\\xbf\", 0xffff);"},
{"lineNum":"  476","line":"    try testValid(\"\\xf0\\x90\\x80\\x80\", 0x10000);"},
{"lineNum":"  477","line":"    try testValid(\"\\xf1\\x80\\x80\\x80\", 0x40000);"},
{"lineNum":"  478","line":"    try testValid(\"\\xf3\\xbf\\xbf\\xbf\", 0xfffff);"},
{"lineNum":"  479","line":"    try testValid(\"\\xf4\\x8f\\xbf\\xbf\", 0x10ffff);"},
{"lineNum":"  480","line":"}"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"test \"invalid utf8 continuation bytes\" {"},
{"lineNum":"  483","line":"    try comptime testInvalidUtf8ContinuationBytes();"},
{"lineNum":"  484","line":"    try testInvalidUtf8ContinuationBytes();"},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":"fn testInvalidUtf8ContinuationBytes() !void {"},
{"lineNum":"  487","line":"    // unexpected continuation"},
{"lineNum":"  488","line":"    try testError(\"\\x80\", error.Utf8InvalidStartByte);"},
{"lineNum":"  489","line":"    try testError(\"\\xbf\", error.Utf8InvalidStartByte);"},
{"lineNum":"  490","line":"    // too many leading 1\'s"},
{"lineNum":"  491","line":"    try testError(\"\\xf8\", error.Utf8InvalidStartByte);"},
{"lineNum":"  492","line":"    try testError(\"\\xff\", error.Utf8InvalidStartByte);"},
{"lineNum":"  493","line":"    // expected continuation for 2 byte sequences"},
{"lineNum":"  494","line":"    try testError(\"\\xc2\", error.UnexpectedEof);"},
{"lineNum":"  495","line":"    try testError(\"\\xc2\\x00\", error.Utf8ExpectedContinuation);"},
{"lineNum":"  496","line":"    try testError(\"\\xc2\\xc0\", error.Utf8ExpectedContinuation);"},
{"lineNum":"  497","line":"    // expected continuation for 3 byte sequences"},
{"lineNum":"  498","line":"    try testError(\"\\xe0\", error.UnexpectedEof);"},
{"lineNum":"  499","line":"    try testError(\"\\xe0\\x00\", error.UnexpectedEof);"},
{"lineNum":"  500","line":"    try testError(\"\\xe0\\xc0\", error.UnexpectedEof);"},
{"lineNum":"  501","line":"    try testError(\"\\xe0\\xa0\", error.UnexpectedEof);"},
{"lineNum":"  502","line":"    try testError(\"\\xe0\\xa0\\x00\", error.Utf8ExpectedContinuation);"},
{"lineNum":"  503","line":"    try testError(\"\\xe0\\xa0\\xc0\", error.Utf8ExpectedContinuation);"},
{"lineNum":"  504","line":"    // expected continuation for 4 byte sequences"},
{"lineNum":"  505","line":"    try testError(\"\\xf0\", error.UnexpectedEof);"},
{"lineNum":"  506","line":"    try testError(\"\\xf0\\x00\", error.UnexpectedEof);"},
{"lineNum":"  507","line":"    try testError(\"\\xf0\\xc0\", error.UnexpectedEof);"},
{"lineNum":"  508","line":"    try testError(\"\\xf0\\x90\\x00\", error.UnexpectedEof);"},
{"lineNum":"  509","line":"    try testError(\"\\xf0\\x90\\xc0\", error.UnexpectedEof);"},
{"lineNum":"  510","line":"    try testError(\"\\xf0\\x90\\x80\\x00\", error.Utf8ExpectedContinuation);"},
{"lineNum":"  511","line":"    try testError(\"\\xf0\\x90\\x80\\xc0\", error.Utf8ExpectedContinuation);"},
{"lineNum":"  512","line":"}"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"test \"overlong utf8 codepoint\" {"},
{"lineNum":"  515","line":"    try comptime testOverlongUtf8Codepoint();"},
{"lineNum":"  516","line":"    try testOverlongUtf8Codepoint();"},
{"lineNum":"  517","line":"}"},
{"lineNum":"  518","line":"fn testOverlongUtf8Codepoint() !void {"},
{"lineNum":"  519","line":"    try testError(\"\\xc0\\x80\", error.Utf8OverlongEncoding);"},
{"lineNum":"  520","line":"    try testError(\"\\xc1\\xbf\", error.Utf8OverlongEncoding);"},
{"lineNum":"  521","line":"    try testError(\"\\xe0\\x80\\x80\", error.Utf8OverlongEncoding);"},
{"lineNum":"  522","line":"    try testError(\"\\xe0\\x9f\\xbf\", error.Utf8OverlongEncoding);"},
{"lineNum":"  523","line":"    try testError(\"\\xf0\\x80\\x80\\x80\", error.Utf8OverlongEncoding);"},
{"lineNum":"  524","line":"    try testError(\"\\xf0\\x8f\\xbf\\xbf\", error.Utf8OverlongEncoding);"},
{"lineNum":"  525","line":"}"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"test \"misc invalid utf8\" {"},
{"lineNum":"  528","line":"    try comptime testMiscInvalidUtf8();"},
{"lineNum":"  529","line":"    try testMiscInvalidUtf8();"},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":"fn testMiscInvalidUtf8() !void {"},
{"lineNum":"  532","line":"    // codepoint out of bounds"},
{"lineNum":"  533","line":"    try testError(\"\\xf4\\x90\\x80\\x80\", error.Utf8CodepointTooLarge);"},
{"lineNum":"  534","line":"    try testError(\"\\xf7\\xbf\\xbf\\xbf\", error.Utf8CodepointTooLarge);"},
{"lineNum":"  535","line":"    // surrogate halves"},
{"lineNum":"  536","line":"    try testValid(\"\\xed\\x9f\\xbf\", 0xd7ff);"},
{"lineNum":"  537","line":"    try testError(\"\\xed\\xa0\\x80\", error.Utf8EncodesSurrogateHalf);"},
{"lineNum":"  538","line":"    try testError(\"\\xed\\xbf\\xbf\", error.Utf8EncodesSurrogateHalf);"},
{"lineNum":"  539","line":"    try testValid(\"\\xee\\x80\\x80\", 0xe000);"},
{"lineNum":"  540","line":"}"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"test \"utf8 iterator peeking\" {"},
{"lineNum":"  543","line":"    try comptime testUtf8Peeking();"},
{"lineNum":"  544","line":"    try testUtf8Peeking();"},
{"lineNum":"  545","line":"}"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"fn testUtf8Peeking() !void {"},
{"lineNum":"  548","line":"    const s = Utf8View.initComptime(\"noël\");"},
{"lineNum":"  549","line":"    var it = s.iterator();"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"    try testing.expect(std.mem.eql(u8, \"n\", it.nextCodepointSlice().?));"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"    try testing.expect(std.mem.eql(u8, \"o\", it.peek(1)));"},
{"lineNum":"  554","line":"    try testing.expect(std.mem.eql(u8, \"oë\", it.peek(2)));"},
{"lineNum":"  555","line":"    try testing.expect(std.mem.eql(u8, \"oël\", it.peek(3)));"},
{"lineNum":"  556","line":"    try testing.expect(std.mem.eql(u8, \"oël\", it.peek(4)));"},
{"lineNum":"  557","line":"    try testing.expect(std.mem.eql(u8, \"oël\", it.peek(10)));"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    try testing.expect(std.mem.eql(u8, \"o\", it.nextCodepointSlice().?));"},
{"lineNum":"  560","line":"    try testing.expect(std.mem.eql(u8, \"ë\", it.nextCodepointSlice().?));"},
{"lineNum":"  561","line":"    try testing.expect(std.mem.eql(u8, \"l\", it.nextCodepointSlice().?));"},
{"lineNum":"  562","line":"    try testing.expect(it.nextCodepointSlice() == null);"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    try testing.expect(std.mem.eql(u8, &[_]u8{}, it.peek(1)));"},
{"lineNum":"  565","line":"}"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"fn testError(bytes: []const u8, expected_err: anyerror) !void {"},
{"lineNum":"  568","line":"    try testing.expectError(expected_err, testDecode(bytes));"},
{"lineNum":"  569","line":"}"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"fn testValid(bytes: []const u8, expected_codepoint: u21) !void {"},
{"lineNum":"  572","line":"    try testing.expect((testDecode(bytes) catch unreachable) == expected_codepoint);"},
{"lineNum":"  573","line":"}"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"fn testDecode(bytes: []const u8) !u21 {"},
{"lineNum":"  576","line":"    const length = try utf8ByteSequenceLength(bytes[0]);"},
{"lineNum":"  577","line":"    if (bytes.len < length) return error.UnexpectedEof;"},
{"lineNum":"  578","line":"    try testing.expect(bytes.len == length);"},
{"lineNum":"  579","line":"    return utf8Decode(bytes);"},
{"lineNum":"  580","line":"}"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"/// Caller must free returned memory."},
{"lineNum":"  583","line":"pub fn utf16leToUtf8Alloc(allocator: mem.Allocator, utf16le: []const u16) ![]u8 {"},
{"lineNum":"  584","line":"    // optimistically guess that it will all be ascii."},
{"lineNum":"  585","line":"    var result = try std.ArrayList(u8).initCapacity(allocator, utf16le.len);"},
{"lineNum":"  586","line":"    errdefer result.deinit();"},
{"lineNum":"  587","line":"    var out_index: usize = 0;"},
{"lineNum":"  588","line":"    var it = Utf16LeIterator.init(utf16le);"},
{"lineNum":"  589","line":"    while (try it.nextCodepoint()) |codepoint| {"},
{"lineNum":"  590","line":"        const utf8_len = utf8CodepointSequenceLength(codepoint) catch unreachable;"},
{"lineNum":"  591","line":"        try result.resize(result.items.len + utf8_len);"},
{"lineNum":"  592","line":"        assert((utf8Encode(codepoint, result.items[out_index..]) catch unreachable) == utf8_len);"},
{"lineNum":"  593","line":"        out_index += utf8_len;"},
{"lineNum":"  594","line":"    }"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"    return result.toOwnedSlice();"},
{"lineNum":"  597","line":"}"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"/// Caller must free returned memory."},
{"lineNum":"  600","line":"pub fn utf16leToUtf8AllocZ(allocator: mem.Allocator, utf16le: []const u16) ![:0]u8 {"},
{"lineNum":"  601","line":"    // optimistically guess that it will all be ascii (and allocate space for the null terminator)"},
{"lineNum":"  602","line":"    var result = try std.ArrayList(u8).initCapacity(allocator, utf16le.len + 1);"},
{"lineNum":"  603","line":"    errdefer result.deinit();"},
{"lineNum":"  604","line":"    var out_index: usize = 0;"},
{"lineNum":"  605","line":"    var it = Utf16LeIterator.init(utf16le);"},
{"lineNum":"  606","line":"    while (try it.nextCodepoint()) |codepoint| {"},
{"lineNum":"  607","line":"        const utf8_len = utf8CodepointSequenceLength(codepoint) catch unreachable;"},
{"lineNum":"  608","line":"        try result.resize(result.items.len + utf8_len);"},
{"lineNum":"  609","line":"        assert((utf8Encode(codepoint, result.items[out_index..]) catch unreachable) == utf8_len);"},
{"lineNum":"  610","line":"        out_index += utf8_len;"},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":"    return result.toOwnedSliceSentinel(0);"},
{"lineNum":"  613","line":"}"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"/// Asserts that the output buffer is big enough."},
{"lineNum":"  616","line":"/// Returns end byte index into utf8."},
{"lineNum":"  617","line":"pub fn utf16leToUtf8(utf8: []u8, utf16le: []const u16) !usize {"},
{"lineNum":"  618","line":"    var end_index: usize = 0;"},
{"lineNum":"  619","line":"    var it = Utf16LeIterator.init(utf16le);"},
{"lineNum":"  620","line":"    while (try it.nextCodepoint()) |codepoint| {"},
{"lineNum":"  621","line":"        end_index += try utf8Encode(codepoint, utf8[end_index..]);"},
{"lineNum":"  622","line":"    }"},
{"lineNum":"  623","line":"    return end_index;"},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"test \"utf16leToUtf8\" {"},
{"lineNum":"  627","line":"    var utf16le: [2]u16 = undefined;"},
{"lineNum":"  628","line":"    const utf16le_as_bytes = mem.sliceAsBytes(utf16le[0..]);"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    {"},
{"lineNum":"  631","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], \'A\');"},
{"lineNum":"  632","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], \'a\');"},
{"lineNum":"  633","line":"        const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  634","line":"        defer std.testing.allocator.free(utf8);"},
{"lineNum":"  635","line":"        try testing.expect(mem.eql(u8, utf8, \"Aa\"));"},
{"lineNum":"  636","line":"    }"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"    {"},
{"lineNum":"  639","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], 0x80);"},
{"lineNum":"  640","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], 0xffff);"},
{"lineNum":"  641","line":"        const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  642","line":"        defer std.testing.allocator.free(utf8);"},
{"lineNum":"  643","line":"        try testing.expect(mem.eql(u8, utf8, \"\\xc2\\x80\" ++ \"\\xef\\xbf\\xbf\"));"},
{"lineNum":"  644","line":"    }"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    {"},
{"lineNum":"  647","line":"        // the values just outside the surrogate half range"},
{"lineNum":"  648","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], 0xd7ff);"},
{"lineNum":"  649","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], 0xe000);"},
{"lineNum":"  650","line":"        const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  651","line":"        defer std.testing.allocator.free(utf8);"},
{"lineNum":"  652","line":"        try testing.expect(mem.eql(u8, utf8, \"\\xed\\x9f\\xbf\" ++ \"\\xee\\x80\\x80\"));"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    {"},
{"lineNum":"  656","line":"        // smallest surrogate pair"},
{"lineNum":"  657","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], 0xd800);"},
{"lineNum":"  658","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], 0xdc00);"},
{"lineNum":"  659","line":"        const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  660","line":"        defer std.testing.allocator.free(utf8);"},
{"lineNum":"  661","line":"        try testing.expect(mem.eql(u8, utf8, \"\\xf0\\x90\\x80\\x80\"));"},
{"lineNum":"  662","line":"    }"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    {"},
{"lineNum":"  665","line":"        // largest surrogate pair"},
{"lineNum":"  666","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], 0xdbff);"},
{"lineNum":"  667","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], 0xdfff);"},
{"lineNum":"  668","line":"        const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  669","line":"        defer std.testing.allocator.free(utf8);"},
{"lineNum":"  670","line":"        try testing.expect(mem.eql(u8, utf8, \"\\xf4\\x8f\\xbf\\xbf\"));"},
{"lineNum":"  671","line":"    }"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"    {"},
{"lineNum":"  674","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], 0xdbff);"},
{"lineNum":"  675","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], 0xdc00);"},
{"lineNum":"  676","line":"        const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  677","line":"        defer std.testing.allocator.free(utf8);"},
{"lineNum":"  678","line":"        try testing.expect(mem.eql(u8, utf8, \"\\xf4\\x8f\\xb0\\x80\"));"},
{"lineNum":"  679","line":"    }"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"    {"},
{"lineNum":"  682","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[0..], 0xdcdc);"},
{"lineNum":"  683","line":"        mem.writeIntSliceLittle(u16, utf16le_as_bytes[2..], 0xdcdc);"},
{"lineNum":"  684","line":"        const result = utf16leToUtf8Alloc(std.testing.allocator, &utf16le);"},
{"lineNum":"  685","line":"        try std.testing.expectError(error.UnexpectedSecondSurrogateHalf, result);"},
{"lineNum":"  686","line":"    }"},
{"lineNum":"  687","line":"}"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"pub fn utf8ToUtf16LeWithNull(allocator: mem.Allocator, utf8: []const u8) ![:0]u16 {"},
{"lineNum":"  690","line":"    // optimistically guess that it will not require surrogate pairs"},
{"lineNum":"  691","line":"    var result = try std.ArrayList(u16).initCapacity(allocator, utf8.len + 1);"},
{"lineNum":"  692","line":"    errdefer result.deinit();"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"    const view = try Utf8View.init(utf8);"},
{"lineNum":"  695","line":"    var it = view.iterator();"},
{"lineNum":"  696","line":"    while (it.nextCodepoint()) |codepoint| {"},
{"lineNum":"  697","line":"        if (codepoint < 0x10000) {"},
{"lineNum":"  698","line":"            const short = @as(u16, @intCast(codepoint));"},
{"lineNum":"  699","line":"            try result.append(mem.nativeToLittle(u16, short));"},
{"lineNum":"  700","line":"        } else {"},
{"lineNum":"  701","line":"            const high = @as(u16, @intCast((codepoint - 0x10000) >> 10)) + 0xD800;"},
{"lineNum":"  702","line":"            const low = @as(u16, @intCast(codepoint & 0x3FF)) + 0xDC00;"},
{"lineNum":"  703","line":"            var out: [2]u16 = undefined;"},
{"lineNum":"  704","line":"            out[0] = mem.nativeToLittle(u16, high);"},
{"lineNum":"  705","line":"            out[1] = mem.nativeToLittle(u16, low);"},
{"lineNum":"  706","line":"            try result.appendSlice(out[0..]);"},
{"lineNum":"  707","line":"        }"},
{"lineNum":"  708","line":"    }"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"    return result.toOwnedSliceSentinel(0);"},
{"lineNum":"  711","line":"}"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"/// Returns index of next character. If exact fit, returned index equals output slice length."},
{"lineNum":"  714","line":"/// Assumes there is enough space for the output."},
{"lineNum":"  715","line":"pub fn utf8ToUtf16Le(utf16le: []u16, utf8: []const u8) !usize {"},
{"lineNum":"  716","line":"    var dest_i: usize = 0;"},
{"lineNum":"  717","line":"    var src_i: usize = 0;"},
{"lineNum":"  718","line":"    while (src_i < utf8.len) {"},
{"lineNum":"  719","line":"        const n = utf8ByteSequenceLength(utf8[src_i]) catch return error.InvalidUtf8;"},
{"lineNum":"  720","line":"        const next_src_i = src_i + n;"},
{"lineNum":"  721","line":"        const codepoint = utf8Decode(utf8[src_i..next_src_i]) catch return error.InvalidUtf8;"},
{"lineNum":"  722","line":"        if (codepoint < 0x10000) {"},
{"lineNum":"  723","line":"            const short = @as(u16, @intCast(codepoint));"},
{"lineNum":"  724","line":"            utf16le[dest_i] = mem.nativeToLittle(u16, short);"},
{"lineNum":"  725","line":"            dest_i += 1;"},
{"lineNum":"  726","line":"        } else {"},
{"lineNum":"  727","line":"            const high = @as(u16, @intCast((codepoint - 0x10000) >> 10)) + 0xD800;"},
{"lineNum":"  728","line":"            const low = @as(u16, @intCast(codepoint & 0x3FF)) + 0xDC00;"},
{"lineNum":"  729","line":"            utf16le[dest_i] = mem.nativeToLittle(u16, high);"},
{"lineNum":"  730","line":"            utf16le[dest_i + 1] = mem.nativeToLittle(u16, low);"},
{"lineNum":"  731","line":"            dest_i += 2;"},
{"lineNum":"  732","line":"        }"},
{"lineNum":"  733","line":"        src_i = next_src_i;"},
{"lineNum":"  734","line":"    }"},
{"lineNum":"  735","line":"    return dest_i;"},
{"lineNum":"  736","line":"}"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"test \"utf8ToUtf16Le\" {"},
{"lineNum":"  739","line":"    var utf16le: [2]u16 = [_]u16{0} ** 2;"},
{"lineNum":"  740","line":"    {"},
{"lineNum":"  741","line":"        const length = try utf8ToUtf16Le(utf16le[0..], \"𐐷\");"},
{"lineNum":"  742","line":"        try testing.expectEqual(@as(usize, 2), length);"},
{"lineNum":"  743","line":"        try testing.expectEqualSlices(u8, \"\\x01\\xd8\\x37\\xdc\", mem.sliceAsBytes(utf16le[0..]));"},
{"lineNum":"  744","line":"    }"},
{"lineNum":"  745","line":"    {"},
{"lineNum":"  746","line":"        const length = try utf8ToUtf16Le(utf16le[0..], \"\\u{10FFFF}\");"},
{"lineNum":"  747","line":"        try testing.expectEqual(@as(usize, 2), length);"},
{"lineNum":"  748","line":"        try testing.expectEqualSlices(u8, \"\\xff\\xdb\\xff\\xdf\", mem.sliceAsBytes(utf16le[0..]));"},
{"lineNum":"  749","line":"    }"},
{"lineNum":"  750","line":"    {"},
{"lineNum":"  751","line":"        const result = utf8ToUtf16Le(utf16le[0..], \"\\xf4\\x90\\x80\\x80\");"},
{"lineNum":"  752","line":"        try testing.expectError(error.InvalidUtf8, result);"},
{"lineNum":"  753","line":"    }"},
{"lineNum":"  754","line":"}"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"test \"utf8ToUtf16LeWithNull\" {"},
{"lineNum":"  757","line":"    {"},
{"lineNum":"  758","line":"        const utf16 = try utf8ToUtf16LeWithNull(testing.allocator, \"𐐷\");"},
{"lineNum":"  759","line":"        defer testing.allocator.free(utf16);"},
{"lineNum":"  760","line":"        try testing.expectEqualSlices(u8, \"\\x01\\xd8\\x37\\xdc\", mem.sliceAsBytes(utf16[0..]));"},
{"lineNum":"  761","line":"        try testing.expect(utf16[2] == 0);"},
{"lineNum":"  762","line":"    }"},
{"lineNum":"  763","line":"    {"},
{"lineNum":"  764","line":"        const utf16 = try utf8ToUtf16LeWithNull(testing.allocator, \"\\u{10FFFF}\");"},
{"lineNum":"  765","line":"        defer testing.allocator.free(utf16);"},
{"lineNum":"  766","line":"        try testing.expectEqualSlices(u8, \"\\xff\\xdb\\xff\\xdf\", mem.sliceAsBytes(utf16[0..]));"},
{"lineNum":"  767","line":"        try testing.expect(utf16[2] == 0);"},
{"lineNum":"  768","line":"    }"},
{"lineNum":"  769","line":"    {"},
{"lineNum":"  770","line":"        const result = utf8ToUtf16LeWithNull(testing.allocator, \"\\xf4\\x90\\x80\\x80\");"},
{"lineNum":"  771","line":"        try testing.expectError(error.InvalidUtf8, result);"},
{"lineNum":"  772","line":"    }"},
{"lineNum":"  773","line":"}"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"/// Converts a UTF-8 string literal into a UTF-16LE string literal."},
{"lineNum":"  776","line":"pub fn utf8ToUtf16LeStringLiteral(comptime utf8: []const u8) *const [calcUtf16LeLen(utf8) catch unreachable:0]u16 {"},
{"lineNum":"  777","line":"    return comptime blk: {"},
{"lineNum":"  778","line":"        const len: usize = calcUtf16LeLen(utf8) catch |err| @compileError(err);"},
{"lineNum":"  779","line":"        var utf16le: [len:0]u16 = [_:0]u16{0} ** len;"},
{"lineNum":"  780","line":"        const utf16le_len = utf8ToUtf16Le(&utf16le, utf8[0..]) catch |err| @compileError(err);"},
{"lineNum":"  781","line":"        assert(len == utf16le_len);"},
{"lineNum":"  782","line":"        break :blk &utf16le;"},
{"lineNum":"  783","line":"    };"},
{"lineNum":"  784","line":"}"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"const CalcUtf16LeLenError = Utf8DecodeError || error{Utf8InvalidStartByte};"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"/// Returns length in UTF-16 of UTF-8 slice as length of []u16."},
{"lineNum":"  789","line":"/// Length in []u8 is 2*len16."},
{"lineNum":"  790","line":"pub fn calcUtf16LeLen(utf8: []const u8) CalcUtf16LeLenError!usize {"},
{"lineNum":"  791","line":"    var src_i: usize = 0;"},
{"lineNum":"  792","line":"    var dest_len: usize = 0;"},
{"lineNum":"  793","line":"    while (src_i < utf8.len) {"},
{"lineNum":"  794","line":"        const n = try utf8ByteSequenceLength(utf8[src_i]);"},
{"lineNum":"  795","line":"        const next_src_i = src_i + n;"},
{"lineNum":"  796","line":"        const codepoint = try utf8Decode(utf8[src_i..next_src_i]);"},
{"lineNum":"  797","line":"        if (codepoint < 0x10000) {"},
{"lineNum":"  798","line":"            dest_len += 1;"},
{"lineNum":"  799","line":"        } else {"},
{"lineNum":"  800","line":"            dest_len += 2;"},
{"lineNum":"  801","line":"        }"},
{"lineNum":"  802","line":"        src_i = next_src_i;"},
{"lineNum":"  803","line":"    }"},
{"lineNum":"  804","line":"    return dest_len;"},
{"lineNum":"  805","line":"}"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"fn testCalcUtf16LeLen() !void {"},
{"lineNum":"  808","line":"    try testing.expectEqual(@as(usize, 1), try calcUtf16LeLen(\"a\"));"},
{"lineNum":"  809","line":"    try testing.expectEqual(@as(usize, 10), try calcUtf16LeLen(\"abcdefghij\"));"},
{"lineNum":"  810","line":"    try testing.expectEqual(@as(usize, 10), try calcUtf16LeLen(\"äåéëþüúíóö\"));"},
{"lineNum":"  811","line":"    try testing.expectEqual(@as(usize, 5), try calcUtf16LeLen(\"こんにちは\"));"},
{"lineNum":"  812","line":"}"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"test \"calculate utf16 string length of given utf8 string in u16\" {"},
{"lineNum":"  815","line":"    try testCalcUtf16LeLen();"},
{"lineNum":"  816","line":"    try comptime testCalcUtf16LeLen();"},
{"lineNum":"  817","line":"}"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"/// Print the given `utf16le` string"},
{"lineNum":"  820","line":"fn formatUtf16le("},
{"lineNum":"  821","line":"    utf16le: []const u16,"},
{"lineNum":"  822","line":"    comptime fmt: []const u8,"},
{"lineNum":"  823","line":"    options: std.fmt.FormatOptions,"},
{"lineNum":"  824","line":"    writer: anytype,"},
{"lineNum":"  825","line":") !void {"},
{"lineNum":"  826","line":"    _ = fmt;"},
{"lineNum":"  827","line":"    _ = options;"},
{"lineNum":"  828","line":"    var buf: [300]u8 = undefined; // just a random size I chose"},
{"lineNum":"  829","line":"    var it = Utf16LeIterator.init(utf16le);"},
{"lineNum":"  830","line":"    var u8len: usize = 0;"},
{"lineNum":"  831","line":"    while (it.nextCodepoint() catch replacement_character) |codepoint| {"},
{"lineNum":"  832","line":"        u8len += utf8Encode(codepoint, buf[u8len..]) catch"},
{"lineNum":"  833","line":"            utf8Encode(replacement_character, buf[u8len..]) catch unreachable;"},
{"lineNum":"  834","line":"        if (u8len + 3 >= buf.len) {"},
{"lineNum":"  835","line":"            try writer.writeAll(buf[0..u8len]);"},
{"lineNum":"  836","line":"            u8len = 0;"},
{"lineNum":"  837","line":"        }"},
{"lineNum":"  838","line":"    }"},
{"lineNum":"  839","line":"    try writer.writeAll(buf[0..u8len]);"},
{"lineNum":"  840","line":"}"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"/// Return a Formatter for a Utf16le string"},
{"lineNum":"  843","line":"pub fn fmtUtf16le(utf16le: []const u16) std.fmt.Formatter(formatUtf16le) {"},
{"lineNum":"  844","line":"    return .{ .data = utf16le };"},
{"lineNum":"  845","line":"}"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"test \"fmtUtf16le\" {"},
{"lineNum":"  848","line":"    const expectFmt = std.testing.expectFmt;"},
{"lineNum":"  849","line":"    try expectFmt(\"\", \"{}\", .{fmtUtf16le(utf8ToUtf16LeStringLiteral(\"\"))});"},
{"lineNum":"  850","line":"    try expectFmt(\"foo\", \"{}\", .{fmtUtf16le(utf8ToUtf16LeStringLiteral(\"foo\"))});"},
{"lineNum":"  851","line":"    try expectFmt(\"𐐷\", \"{}\", .{fmtUtf16le(utf8ToUtf16LeStringLiteral(\"𐐷\"))});"},
{"lineNum":"  852","line":"    try expectFmt(\"퟿\", \"{}\", .{fmtUtf16le(&[_]u16{std.mem.readIntNative(u16, \"\\xff\\xd7\")})});"},
{"lineNum":"  853","line":"    try expectFmt(\"�\", \"{}\", .{fmtUtf16le(&[_]u16{std.mem.readIntNative(u16, \"\\x00\\xd8\")})});"},
{"lineNum":"  854","line":"    try expectFmt(\"�\", \"{}\", .{fmtUtf16le(&[_]u16{std.mem.readIntNative(u16, \"\\xff\\xdb\")})});"},
{"lineNum":"  855","line":"    try expectFmt(\"�\", \"{}\", .{fmtUtf16le(&[_]u16{std.mem.readIntNative(u16, \"\\x00\\xdc\")})});"},
{"lineNum":"  856","line":"    try expectFmt(\"�\", \"{}\", .{fmtUtf16le(&[_]u16{std.mem.readIntNative(u16, \"\\xff\\xdf\")})});"},
{"lineNum":"  857","line":"    try expectFmt(\"\", \"{}\", .{fmtUtf16le(&[_]u16{std.mem.readIntNative(u16, \"\\x00\\xe0\")})});"},
{"lineNum":"  858","line":"}"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"test \"utf8ToUtf16LeStringLiteral\" {"},
{"lineNum":"  861","line":"    {"},
{"lineNum":"  862","line":"        const bytes = [_:0]u16{"},
{"lineNum":"  863","line":"            mem.nativeToLittle(u16, 0x41),"},
{"lineNum":"  864","line":"        };"},
{"lineNum":"  865","line":"        const utf16 = utf8ToUtf16LeStringLiteral(\"A\");"},
{"lineNum":"  866","line":"        try testing.expectEqualSlices(u16, &bytes, utf16);"},
{"lineNum":"  867","line":"        try testing.expect(utf16[1] == 0);"},
{"lineNum":"  868","line":"    }"},
{"lineNum":"  869","line":"    {"},
{"lineNum":"  870","line":"        const bytes = [_:0]u16{"},
{"lineNum":"  871","line":"            mem.nativeToLittle(u16, 0xD801),"},
{"lineNum":"  872","line":"            mem.nativeToLittle(u16, 0xDC37),"},
{"lineNum":"  873","line":"        };"},
{"lineNum":"  874","line":"        const utf16 = utf8ToUtf16LeStringLiteral(\"𐐷\");"},
{"lineNum":"  875","line":"        try testing.expectEqualSlices(u16, &bytes, utf16);"},
{"lineNum":"  876","line":"        try testing.expect(utf16[2] == 0);"},
{"lineNum":"  877","line":"    }"},
{"lineNum":"  878","line":"    {"},
{"lineNum":"  879","line":"        const bytes = [_:0]u16{"},
{"lineNum":"  880","line":"            mem.nativeToLittle(u16, 0x02FF),"},
{"lineNum":"  881","line":"        };"},
{"lineNum":"  882","line":"        const utf16 = utf8ToUtf16LeStringLiteral(\"\\u{02FF}\");"},
{"lineNum":"  883","line":"        try testing.expectEqualSlices(u16, &bytes, utf16);"},
{"lineNum":"  884","line":"        try testing.expect(utf16[1] == 0);"},
{"lineNum":"  885","line":"    }"},
{"lineNum":"  886","line":"    {"},
{"lineNum":"  887","line":"        const bytes = [_:0]u16{"},
{"lineNum":"  888","line":"            mem.nativeToLittle(u16, 0x7FF),"},
{"lineNum":"  889","line":"        };"},
{"lineNum":"  890","line":"        const utf16 = utf8ToUtf16LeStringLiteral(\"\\u{7FF}\");"},
{"lineNum":"  891","line":"        try testing.expectEqualSlices(u16, &bytes, utf16);"},
{"lineNum":"  892","line":"        try testing.expect(utf16[1] == 0);"},
{"lineNum":"  893","line":"    }"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"        const bytes = [_:0]u16{"},
{"lineNum":"  896","line":"            mem.nativeToLittle(u16, 0x801),"},
{"lineNum":"  897","line":"        };"},
{"lineNum":"  898","line":"        const utf16 = utf8ToUtf16LeStringLiteral(\"\\u{801}\");"},
{"lineNum":"  899","line":"        try testing.expectEqualSlices(u16, &bytes, utf16);"},
{"lineNum":"  900","line":"        try testing.expect(utf16[1] == 0);"},
{"lineNum":"  901","line":"    }"},
{"lineNum":"  902","line":"    {"},
{"lineNum":"  903","line":"        const bytes = [_:0]u16{"},
{"lineNum":"  904","line":"            mem.nativeToLittle(u16, 0xDBFF),"},
{"lineNum":"  905","line":"            mem.nativeToLittle(u16, 0xDFFF),"},
{"lineNum":"  906","line":"        };"},
{"lineNum":"  907","line":"        const utf16 = utf8ToUtf16LeStringLiteral(\"\\u{10FFFF}\");"},
{"lineNum":"  908","line":"        try testing.expectEqualSlices(u16, &bytes, utf16);"},
{"lineNum":"  909","line":"        try testing.expect(utf16[2] == 0);"},
{"lineNum":"  910","line":"    }"},
{"lineNum":"  911","line":"}"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"fn testUtf8CountCodepoints() !void {"},
{"lineNum":"  914","line":"    try testing.expectEqual(@as(usize, 10), try utf8CountCodepoints(\"abcdefghij\"));"},
{"lineNum":"  915","line":"    try testing.expectEqual(@as(usize, 10), try utf8CountCodepoints(\"äåéëþüúíóö\"));"},
{"lineNum":"  916","line":"    try testing.expectEqual(@as(usize, 5), try utf8CountCodepoints(\"こんにちは\"));"},
{"lineNum":"  917","line":"    // testing.expectError(error.Utf8EncodesSurrogateHalf, utf8CountCodepoints(\"\\xED\\xA0\\x80\"));"},
{"lineNum":"  918","line":"}"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"test \"utf8 count codepoints\" {"},
{"lineNum":"  921","line":"    try testUtf8CountCodepoints();"},
{"lineNum":"  922","line":"    try comptime testUtf8CountCodepoints();"},
{"lineNum":"  923","line":"}"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"fn testUtf8ValidCodepoint() !void {"},
{"lineNum":"  926","line":"    try testing.expect(utf8ValidCodepoint(\'e\'));"},
{"lineNum":"  927","line":"    try testing.expect(utf8ValidCodepoint(\'ë\'));"},
{"lineNum":"  928","line":"    try testing.expect(utf8ValidCodepoint(\'は\'));"},
{"lineNum":"  929","line":"    try testing.expect(utf8ValidCodepoint(0xe000));"},
{"lineNum":"  930","line":"    try testing.expect(utf8ValidCodepoint(0x10ffff));"},
{"lineNum":"  931","line":"    try testing.expect(!utf8ValidCodepoint(0xd800));"},
{"lineNum":"  932","line":"    try testing.expect(!utf8ValidCodepoint(0xdfff));"},
{"lineNum":"  933","line":"    try testing.expect(!utf8ValidCodepoint(0x110000));"},
{"lineNum":"  934","line":"}"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"test \"utf8 valid codepoint\" {"},
{"lineNum":"  937","line":"    try testUtf8ValidCodepoint();"},
{"lineNum":"  938","line":"    try comptime testUtf8ValidCodepoint();"},
{"lineNum":"  939","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 63, "covered" : 0,};
var merged_data = [];
