var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const sort = std.sort;"},
{"lineNum":"    3","line":"const mem = std.mem;"},
{"lineNum":"    4","line":"const math = std.math;"},
{"lineNum":"    5","line":"const testing = std.testing;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Unstable in-place sort. n best case, n*log(n) worst case and average case."},
{"lineNum":"    8","line":"/// log(n) memory (no allocator required)."},
{"lineNum":"    9","line":"///"},
{"lineNum":"   10","line":"/// Sorts in ascending order with respect to the given `lessThan` function."},
{"lineNum":"   11","line":"pub fn pdq("},
{"lineNum":"   12","line":"    comptime T: type,"},
{"lineNum":"   13","line":"    items: []T,"},
{"lineNum":"   14","line":"    context: anytype,"},
{"lineNum":"   15","line":"    comptime lessThanFn: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,"},
{"lineNum":"   16","line":") void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"    const Context = struct {"},
{"lineNum":"   18","line":"        items: []T,"},
{"lineNum":"   19","line":"        sub_ctx: @TypeOf(context),"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        pub fn lessThan(ctx: @This(), a: usize, b: usize) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"            return lessThanFn(ctx.sub_ctx, ctx.items[a], ctx.items[b]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"        }"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"        pub fn swap(ctx: @This(), a: usize, b: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"            return mem.swap(T, &ctx.items[a], &ctx.items[b]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"        }"},
{"lineNum":"   28","line":"    };"},
{"lineNum":"   29","line":"    pdqContext(0, items.len, Context{ .items = items, .sub_ctx = context });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"const Hint = enum {"},
{"lineNum":"   33","line":"    increasing,"},
{"lineNum":"   34","line":"    decreasing,"},
{"lineNum":"   35","line":"    unknown,"},
{"lineNum":"   36","line":"};"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"/// Unstable in-place sort. O(n) best case, O(n*log(n)) worst case and average case."},
{"lineNum":"   39","line":"/// O(log(n)) memory (no allocator required)."},
{"lineNum":"   40","line":"/// `context` must have methods `swap` and `lessThan`,"},
{"lineNum":"   41","line":"/// which each take 2 `usize` parameters indicating the index of an item."},
{"lineNum":"   42","line":"/// Sorts in ascending order with respect to `lessThan`."},
{"lineNum":"   43","line":"pub fn pdqContext(a: usize, b: usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    // slices of up to this length get sorted using insertion sort."},
{"lineNum":"   45","line":"    const max_insertion = 24;"},
{"lineNum":"   46","line":"    // number of allowed imbalanced partitions before switching to heap sort."},
{"lineNum":"   47","line":"    const max_limit = std.math.floorPowerOfTwo(usize, b - a) + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    // set upper bound on stack memory usage."},
{"lineNum":"   50","line":"    const Range = struct { a: usize, b: usize, limit: usize };"},
{"lineNum":"   51","line":"    const stack_size = math.log2(math.maxInt(usize) + 1);"},
{"lineNum":"   52","line":"    var stack: [stack_size]Range = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    var range = Range{ .a = a, .b = b, .limit = max_limit };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    var top: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    while (true) {"},
{"lineNum":"   57","line":"        var was_balanced = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"        var was_partitioned = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        while (true) {"},
{"lineNum":"   61","line":"            const len = range.b - range.a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"            // very short slices get sorted using insertion sort."},
{"lineNum":"   64","line":"            if (len <= max_insertion) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"                break sort.insertionContext(range.a, range.b, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"            }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"            // if too many bad pivot choices were made, simply fall back to heapsort in order to"},
{"lineNum":"   69","line":"            // guarantee O(n*log(n)) worst-case."},
{"lineNum":"   70","line":"            if (range.limit == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"                break sort.heapContext(range.a, range.b, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"            }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"            // if the last partitioning was imbalanced, try breaking patterns in the slice by shuffling"},
{"lineNum":"   75","line":"            // some elements around. Hopefully we\'ll choose a better pivot this time."},
{"lineNum":"   76","line":"            if (!was_balanced) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"                breakPatterns(range.a, range.b, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"                range.limit -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"            }"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"            // choose a pivot and try guessing whether the slice is already sorted."},
{"lineNum":"   82","line":"            var pivot: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"            var hint = chosePivot(range.a, range.b, &pivot, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"            if (hint == .decreasing) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"                // The maximum number of swaps was performed, so items are likely"},
{"lineNum":"   87","line":"                // in reverse order. Reverse it to make sorting faster."},
{"lineNum":"   88","line":"                reverseRange(range.a, range.b, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"                pivot = (range.b - 1) - (pivot - range.a);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"                hint = .increasing;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"            }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"            // if the last partitioning was decently balanced and didn\'t shuffle elements, and if pivot"},
{"lineNum":"   94","line":"            // selection predicts the slice is likely already sorted..."},
{"lineNum":"   95","line":"            if (was_balanced and was_partitioned and hint == .increasing) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"                // try identifying several out-of-order elements and shifting them to correct"},
{"lineNum":"   97","line":"                // positions. If the slice ends up being completely sorted, we\'re done."},
{"lineNum":"   98","line":"                if (partialInsertionSort(range.a, range.b, context)) break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"            }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"            // if the chosen pivot is equal to the predecessor, then it\'s the smallest element in the"},
{"lineNum":"  102","line":"            // slice. Partition the slice into elements equal to and elements greater than the pivot."},
{"lineNum":"  103","line":"            // This case is usually hit when the slice contains many duplicate elements."},
{"lineNum":"  104","line":"            if (range.a > a and !context.lessThan(range.a - 1, pivot)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"                range.a = partitionEqual(range.a, range.b, pivot, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"            }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"            // partition the slice."},
{"lineNum":"  110","line":"            var mid = pivot;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"            was_partitioned = partition(range.a, range.b, &mid, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"            const left_len = mid - range.a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"            const right_len = range.b - mid;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"            const balanced_threshold = len / 8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"            if (left_len < right_len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"                was_balanced = left_len >= balanced_threshold;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"                stack[top] = .{ .a = range.a, .b = mid, .limit = range.limit };","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  119","line":"                top += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"                range.a = mid + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"            } else {"},
{"lineNum":"  122","line":"                was_balanced = right_len >= balanced_threshold;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                stack[top] = .{ .a = mid + 1, .b = range.b, .limit = range.limit };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"                top += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"                range.b = mid;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  126","line":"            }"},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        top = math.sub(usize, top, 1) catch break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"        range = stack[top];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  131","line":"    }"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"/// partitions `items[a..b]` into elements smaller than `items[pivot]`,"},
{"lineNum":"  135","line":"/// followed by elements greater than or equal to `items[pivot]`."},
{"lineNum":"  136","line":"///"},
{"lineNum":"  137","line":"/// sets the new pivot."},
{"lineNum":"  138","line":"/// returns `true` if already partitioned."},
{"lineNum":"  139","line":"fn partition(a: usize, b: usize, pivot: *usize, context: anytype) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"    // move pivot to the first place"},
{"lineNum":"  141","line":"    context.swap(a, pivot.*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    var i = a + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    var j = b - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    while (i <= j and context.lessThan(i, a)) i += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"    while (i <= j and !context.lessThan(j, a)) j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    // check if items are already partitioned (no item to swap)"},
{"lineNum":"  150","line":"    if (i > j) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"        // put pivot back to the middle"},
{"lineNum":"  152","line":"        context.swap(j, a);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"        pivot.* = j;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"        return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"    }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    context.swap(i, j);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"    i += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"    j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    while (true) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"        while (i <= j and context.lessThan(i, a)) i += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"        while (i <= j and !context.lessThan(j, a)) j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"        if (i > j) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        context.swap(i, j);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"        i += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"        j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"    }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    // TODO: Enable the BlockQuicksort optimization"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    context.swap(j, a);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    pivot.* = j;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"/// partitions items into elements equal to `items[pivot]`"},
{"lineNum":"  179","line":"/// followed by elements greater than `items[pivot]`."},
{"lineNum":"  180","line":"///"},
{"lineNum":"  181","line":"/// it assumed that `items[a..b]` does not contain elements smaller than the `items[pivot]`."},
{"lineNum":"  182","line":"fn partitionEqual(a: usize, b: usize, pivot: usize, context: anytype) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"    // move pivot to the first place"},
{"lineNum":"  184","line":"    context.swap(a, pivot);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    var i = a + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"    var j = b - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    while (true) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"        while (i <= j and !context.lessThan(a, i)) i += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"        while (i <= j and context.lessThan(a, j)) j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"        if (i > j) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"        context.swap(i, j);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"        i += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"        j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"    }"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    return i;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"/// partially sorts a slice by shifting several out-of-order elements around."},
{"lineNum":"  203","line":"///"},
{"lineNum":"  204","line":"/// returns `true` if the slice is sorted at the end. This function is `O(n)` worst-case."},
{"lineNum":"  205","line":"fn partialInsertionSort(a: usize, b: usize, context: anytype) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"    @setCold(true);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    // maximum number of adjacent out-of-order pairs that will get shifted"},
{"lineNum":"  209","line":"    const max_steps = 5;"},
{"lineNum":"  210","line":"    // if the slice is shorter than this, don\'t shift any elements"},
{"lineNum":"  211","line":"    const shortest_shifting = 50;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    var i = a + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"    for (0..max_steps) |_| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  215","line":"        // find the next pair of adjacent out-of-order elements."},
{"lineNum":"  216","line":"        while (i < b and !context.lessThan(i, i - 1)) i += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"        // are we done?"},
{"lineNum":"  219","line":"        if (i == b) return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"        // don\'t shift elements on short arrays, that has a performance cost."},
{"lineNum":"  222","line":"        if (b - a < shortest_shifting) return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"        // swap the found pair of elements. This puts them in correct order."},
{"lineNum":"  225","line":"        context.swap(i, i - 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        // shift the smaller element to the left."},
{"lineNum":"  228","line":"        if (i - a >= 2) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"            var j = i - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"            while (j >= 1) : (j -= 1) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  231","line":"                if (!context.lessThan(j, j - 1)) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"                context.swap(j, j - 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"            }"},
{"lineNum":"  234","line":"        }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        // shift the greater element to the right."},
{"lineNum":"  237","line":"        if (b - i >= 2) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"            var j = i + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"            while (j < b) : (j += 1) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  240","line":"                if (!context.lessThan(j, j - 1)) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"                context.swap(j, j - 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  242","line":"            }"},
{"lineNum":"  243","line":"        }"},
{"lineNum":"  244","line":"    }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"fn breakPatterns(a: usize, b: usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"    @setCold(true);"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    const len = b - a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"    if (len < 8) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    var rand = @as(u64, @intCast(len));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"    const modulus = math.ceilPowerOfTwoAssert(u64, len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    var i = a + (len / 4) * 2 - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  259","line":"    while (i <= a + (len / 4) * 2 + 1) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  260","line":"        // xorshift64"},
{"lineNum":"  261","line":"        rand ^= rand << 13;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"        rand ^= rand >> 7;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"        rand ^= rand << 17;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"        var other = @as(usize, @intCast(rand & (modulus - 1)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"        if (other >= len) other -= len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  267","line":"        context.swap(i, a + other);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  268","line":"    }"},
{"lineNum":"  269","line":"}"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"/// choses a pivot in `items[a..b]`."},
{"lineNum":"  272","line":"/// swaps likely_sorted when `items[a..b]` seems to be already sorted."},
{"lineNum":"  273","line":"fn chosePivot(a: usize, b: usize, pivot: *usize, context: anytype) Hint {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"    // minimum length for using the Tukey\'s ninther method"},
{"lineNum":"  275","line":"    const shortest_ninther = 50;"},
{"lineNum":"  276","line":"    // max_swaps is the maximum number of swaps allowed in this function"},
{"lineNum":"  277","line":"    const max_swaps = 4 * 3;"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    var len = b - a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"    var i = a + len / 4 * 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"    var j = a + len / 4 * 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"    var k = a + len / 4 * 3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"    var swaps: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    if (len >= 8) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"        if (len >= shortest_ninther) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"            // find medians in the neighborhoods of `i`, `j` and `k`"},
{"lineNum":"  288","line":"            sort3(i - 1, i, i + 1, &swaps, context);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  289","line":"            sort3(j - 1, j, j + 1, &swaps, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"            sort3(k - 1, k, k + 1, &swaps, context);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  291","line":"        }"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        // find the median among `i`, `j` and `k` and stores it in `j`"},
{"lineNum":"  294","line":"        sort3(i, j, k, &swaps, context);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    pivot.* = j;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"    return switch (swaps) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  299","line":"        0 => .increasing,"},
{"lineNum":"  300","line":"        max_swaps => .decreasing,"},
{"lineNum":"  301","line":"        else => .unknown,"},
{"lineNum":"  302","line":"    };"},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"fn sort3(a: usize, b: usize, c: usize, swaps: *usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"    if (context.lessThan(b, a)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"        swaps.* += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  308","line":"        context.swap(b, a);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  309","line":"    }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    if (context.lessThan(c, b)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"        swaps.* += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  313","line":"        context.swap(c, b);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  314","line":"    }"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    if (context.lessThan(b, a)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"        swaps.* += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  318","line":"        context.swap(b, a);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":"}"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"fn reverseRange(a: usize, b: usize, context: anytype) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"    var i = a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"    var j = b - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    while (i < j) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"        context.swap(i, j);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"        i += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":"        j -= 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:48", "instrumented" : 145, "covered" : 0,};
var merged_data = [];
