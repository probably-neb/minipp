var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const io = std.io;"},
{"lineNum":"    3","line":"const testing = std.testing;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const assert = std.debug.assert;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// This turns a byte buffer into an `io.Writer`, `io.Reader`, or `io.SeekableStream`."},
{"lineNum":"    8","line":"/// If the supplied byte buffer is const, then `io.Writer` is not available."},
{"lineNum":"    9","line":"pub fn FixedBufferStream(comptime Buffer: type) type {"},
{"lineNum":"   10","line":"    return struct {"},
{"lineNum":"   11","line":"        /// `Buffer` is either a `[]u8` or `[]const u8`."},
{"lineNum":"   12","line":"        buffer: Buffer,"},
{"lineNum":"   13","line":"        pos: usize,"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"        pub const ReadError = error{};"},
{"lineNum":"   16","line":"        pub const WriteError = error{NoSpaceLeft};"},
{"lineNum":"   17","line":"        pub const SeekError = error{};"},
{"lineNum":"   18","line":"        pub const GetSeekPosError = error{};"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"        pub const Reader = io.Reader(*Self, ReadError, read);"},
{"lineNum":"   21","line":"        pub const Writer = io.Writer(*Self, WriteError, write);"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"        pub const SeekableStream = io.SeekableStream("},
{"lineNum":"   24","line":"            *Self,"},
{"lineNum":"   25","line":"            SeekError,"},
{"lineNum":"   26","line":"            GetSeekPosError,"},
{"lineNum":"   27","line":"            seekTo,"},
{"lineNum":"   28","line":"            seekBy,"},
{"lineNum":"   29","line":"            getPos,"},
{"lineNum":"   30","line":"            getEndPos,"},
{"lineNum":"   31","line":"        );"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        const Self = @This();"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"        pub fn reader(self: *Self) Reader {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"            return .{ .context = self };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        pub fn writer(self: *Self) Writer {","class":"lineCov","hits":"1","order":"607","possible_hits":"1",},
{"lineNum":"   40","line":"            return .{ .context = self };","class":"lineCov","hits":"1","order":"608","possible_hits":"1",},
{"lineNum":"   41","line":"        }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        pub fn seekableStream(self: *Self) SeekableStream {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"            return .{ .context = self };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"        }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        pub fn read(self: *Self, dest: []u8) ReadError!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"            const size = @min(dest.len, self.buffer.len - self.pos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"            const end = self.pos + size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"            @memcpy(dest[0..size], self.buffer[self.pos..end]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":"            self.pos = end;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"            return size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"        }"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        /// If the returned number of bytes written is less than requested, the"},
{"lineNum":"   58","line":"        /// buffer is full. Returns `error.NoSpaceLeft` when no bytes would be written."},
{"lineNum":"   59","line":"        /// Note: `error.NoSpaceLeft` matches the corresponding error from"},
{"lineNum":"   60","line":"        /// `std.fs.File.WriteError`."},
{"lineNum":"   61","line":"        pub fn write(self: *Self, bytes: []const u8) WriteError!usize {","class":"lineCov","hits":"1","order":"624","possible_hits":"1",},
{"lineNum":"   62","line":"            if (bytes.len == 0) return 0;","class":"linePartCov","hits":"1","order":"625","possible_hits":"2",},
{"lineNum":"   63","line":"            if (self.pos >= self.buffer.len) return error.NoSpaceLeft;","class":"linePartCov","hits":"1","order":"626","possible_hits":"2",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"            const n = if (self.pos + bytes.len <= self.buffer.len)","class":"linePartCov","hits":"1","order":"627","possible_hits":"2",},
{"lineNum":"   66","line":"                bytes.len","class":"lineCov","hits":"1","order":"628","possible_hits":"1",},
{"lineNum":"   67","line":"            else"},
{"lineNum":"   68","line":"                self.buffer.len - self.pos;","class":"linePartCov","hits":"1","order":"629","possible_hits":"2",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"            @memcpy(self.buffer[self.pos..][0..n], bytes[0..n]);","class":"lineCov","hits":"3","order":"630","possible_hits":"3",},
{"lineNum":"   71","line":"            self.pos += n;","class":"linePartCov","hits":"1","order":"631","possible_hits":"2",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"            if (n == 0) return error.NoSpaceLeft;","class":"linePartCov","hits":"1","order":"632","possible_hits":"2",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"            return n;","class":"lineCov","hits":"1","order":"633","possible_hits":"1",},
{"lineNum":"   76","line":"        }"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        pub fn seekTo(self: *Self, pos: u64) SeekError!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"            self.pos = if (std.math.cast(usize, pos)) |x| @min(self.buffer.len, x) else self.buffer.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        pub fn seekBy(self: *Self, amt: i64) SeekError!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"            if (amt < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"                const abs_amt = std.math.absCast(amt);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"                const abs_amt_usize = std.math.cast(usize, abs_amt) orelse std.math.maxInt(usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   86","line":"                if (abs_amt_usize > self.pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"                    self.pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"                } else {"},
{"lineNum":"   89","line":"                    self.pos -= abs_amt_usize;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"                }"},
{"lineNum":"   91","line":"            } else {"},
{"lineNum":"   92","line":"                const amt_usize = std.math.cast(usize, amt) orelse std.math.maxInt(usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   93","line":"                const new_pos = std.math.add(usize, self.pos, amt_usize) catch std.math.maxInt(usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   94","line":"                self.pos = @min(self.buffer.len, new_pos);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"            }"},
{"lineNum":"   96","line":"        }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        pub fn getEndPos(self: *Self) GetSeekPosError!u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"            return self.buffer.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"        }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        pub fn getPos(self: *Self) GetSeekPosError!u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"            return self.pos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"        }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        pub fn getWritten(self: Self) Buffer {","class":"lineCov","hits":"1","order":"637","possible_hits":"1",},
{"lineNum":"  107","line":"            return self.buffer[0..self.pos];","class":"lineCov","hits":"1","order":"638","possible_hits":"1",},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        pub fn reset(self: *Self) void {"},
{"lineNum":"  111","line":"            self.pos = 0;"},
{"lineNum":"  112","line":"        }"},
{"lineNum":"  113","line":"    };"},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"pub fn fixedBufferStream(buffer: anytype) FixedBufferStream(Slice(@TypeOf(buffer))) {","class":"linePartCov","hits":"1","order":"604","possible_hits":"2",},
{"lineNum":"  117","line":"    return .{ .buffer = buffer, .pos = 0 };","class":"linePartCov","hits":"1","order":"605","possible_hits":"2",},
{"lineNum":"  118","line":"}"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"fn Slice(comptime T: type) type {"},
{"lineNum":"  121","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  122","line":"        .Pointer => |ptr_info| {"},
{"lineNum":"  123","line":"            var new_ptr_info = ptr_info;"},
{"lineNum":"  124","line":"            switch (ptr_info.size) {"},
{"lineNum":"  125","line":"                .Slice => {},"},
{"lineNum":"  126","line":"                .One => switch (@typeInfo(ptr_info.child)) {"},
{"lineNum":"  127","line":"                    .Array => |info| new_ptr_info.child = info.child,"},
{"lineNum":"  128","line":"                    else => @compileError(\"invalid type given to fixedBufferStream\"),"},
{"lineNum":"  129","line":"                },"},
{"lineNum":"  130","line":"                else => @compileError(\"invalid type given to fixedBufferStream\"),"},
{"lineNum":"  131","line":"            }"},
{"lineNum":"  132","line":"            new_ptr_info.size = .Slice;"},
{"lineNum":"  133","line":"            return @Type(.{ .Pointer = new_ptr_info });"},
{"lineNum":"  134","line":"        },"},
{"lineNum":"  135","line":"        else => @compileError(\"invalid type given to fixedBufferStream\"),"},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"test \"FixedBufferStream output\" {"},
{"lineNum":"  140","line":"    var buf: [255]u8 = undefined;"},
{"lineNum":"  141","line":"    var fbs = fixedBufferStream(&buf);"},
{"lineNum":"  142","line":"    const stream = fbs.writer();"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    try stream.print(\"{s}{s}!\", .{ \"Hello\", \"World\" });"},
{"lineNum":"  145","line":"    try testing.expectEqualSlices(u8, \"HelloWorld!\", fbs.getWritten());"},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"test \"FixedBufferStream output at comptime\" {"},
{"lineNum":"  149","line":"    comptime {"},
{"lineNum":"  150","line":"        var buf: [255]u8 = undefined;"},
{"lineNum":"  151","line":"        var fbs = fixedBufferStream(&buf);"},
{"lineNum":"  152","line":"        const stream = fbs.writer();"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        try stream.print(\"{s}{s}!\", .{ \"Hello\", \"World\" });"},
{"lineNum":"  155","line":"        try testing.expectEqualSlices(u8, \"HelloWorld!\", fbs.getWritten());"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"test \"FixedBufferStream output 2\" {"},
{"lineNum":"  160","line":"    var buffer: [10]u8 = undefined;"},
{"lineNum":"  161","line":"    var fbs = fixedBufferStream(&buffer);"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    try fbs.writer().writeAll(\"Hello\");"},
{"lineNum":"  164","line":"    try testing.expect(mem.eql(u8, fbs.getWritten(), \"Hello\"));"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    try fbs.writer().writeAll(\"world\");"},
{"lineNum":"  167","line":"    try testing.expect(mem.eql(u8, fbs.getWritten(), \"Helloworld\"));"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    try testing.expectError(error.NoSpaceLeft, fbs.writer().writeAll(\"!\"));"},
{"lineNum":"  170","line":"    try testing.expect(mem.eql(u8, fbs.getWritten(), \"Helloworld\"));"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    fbs.reset();"},
{"lineNum":"  173","line":"    try testing.expect(fbs.getWritten().len == 0);"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    try testing.expectError(error.NoSpaceLeft, fbs.writer().writeAll(\"Hello world!\"));"},
{"lineNum":"  176","line":"    try testing.expect(mem.eql(u8, fbs.getWritten(), \"Hello worl\"));"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    try fbs.seekTo((try fbs.getEndPos()) + 1);"},
{"lineNum":"  179","line":"    try testing.expectError(error.NoSpaceLeft, fbs.writer().writeAll(\"H\"));"},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"test \"FixedBufferStream input\" {"},
{"lineNum":"  183","line":"    const bytes = [_]u8{ 1, 2, 3, 4, 5, 6, 7 };"},
{"lineNum":"  184","line":"    var fbs = fixedBufferStream(&bytes);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    var dest: [4]u8 = undefined;"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    var read = try fbs.reader().read(&dest);"},
{"lineNum":"  189","line":"    try testing.expect(read == 4);"},
{"lineNum":"  190","line":"    try testing.expect(mem.eql(u8, dest[0..4], bytes[0..4]));"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    read = try fbs.reader().read(&dest);"},
{"lineNum":"  193","line":"    try testing.expect(read == 3);"},
{"lineNum":"  194","line":"    try testing.expect(mem.eql(u8, dest[0..3], bytes[4..7]));"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    read = try fbs.reader().read(&dest);"},
{"lineNum":"  197","line":"    try testing.expect(read == 0);"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    try fbs.seekTo((try fbs.getEndPos()) + 1);"},
{"lineNum":"  200","line":"    read = try fbs.reader().read(&dest);"},
{"lineNum":"  201","line":"    try testing.expect(read == 0);"},
{"lineNum":"  202","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2024-04-26 16:14:49", "instrumented" : 42, "covered" : 16,};
var merged_data = [];
